{
  "title": {
    "text": "RFC 4507 - Transport Layer Security (TLS) Session Resumption without Server-Side State",
    "ja": "RFC 4507 - トランスポート層セキュリティ（TLS）サーバー側の状態のないセッション再開"
  },
  "number": 4507,
  "created_at": "2019-10-21 22:34:33.518199+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         J. Salowey\nRequest for Comments: 4507                                       H. Zhou\nCategory: Standards Track                                  Cisco Systems\n                                                               P. Eronen\n                                                                   Nokia\n                                                           H. Tschofenig\n                                                                 Siemens\n                                                                May 2006",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Transport Layer Security (TLS) Session\n Resumption without Server-Side State",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes a mechanism that enables the Transport Layer Security (TLS) server to resume sessions and avoid keeping per-client session state. The TLS server encapsulates the session state into a ticket and forwards it to the client. The client can subsequently resume a session using the obtained ticket.",
      "ja": "この文書では、セッションを再開し、クライアントごとのセッション状態を維持避けるために、トランスポート層セキュリティ（TLS）サーバーを可能にするメカニズムを説明しています。 TLSサーバは、チケットにセッション状態をカプセル化し、それをクライアントに転送します。クライアントはその後、得られたチケットを使用してセッションを再開することができます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n2. Terminology .....................................................3\n3. Protocol ........................................................3\n   3.1. Overview ...................................................4\n   3.2. SessionTicket TLS Extension ................................6\n   3.3. NewSessionTicket Handshake Message .........................7\n   3.4. Interaction with TLS Session ID ............................8\n4. Recommended Ticket Construction .................................9\n5. Security Considerations ........................................10\n   5.1. Invalidating Sessions .....................................11\n   5.2. Stolen Tickets ............................................11\n   5.3. Forged Tickets ............................................11\n   5.4. Denial of Service Attacks .................................11\n   5.5. Ticket Protection Key Management ..........................12\n   5.6. Ticket Lifetime ...........................................12\n   5.7. Alternate Ticket Formats and Distribution Schemes .........12\n   5.8. Identity Privacy, Anonymity, and Unlinkability ............12\n6. Acknowledgements ...............................................13\n7. IANA Considerations ............................................13\n8. References .....................................................14\n   8.1. Normative References ......................................14\n   8.2. Informative References ....................................14",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document defines a way to resume a Transport Layer Security (TLS) session without requiring session-specific state at the TLS server. This mechanism may be used with any TLS ciphersuite. This document applies to both TLS 1.0 defined in [RFC2246] and TLS 1.1 defined in [RFC4346]. The mechanism makes use of TLS extensions defined in [RFC4366] and defines a new TLS message type.",
      "ja": "この文書では、TLSサーバでセッション固有の状態を必要とせずにトランスポート層セキュリティ（TLS）セッションを再開するための方法を定義します。このメカニズムは、任意のTLS暗号スイートを使用することができます。この文書では、[RFC2246]と[RFC4346]で定義されたTLS 1.1で定義されたTLS 1.0の両方に適用されます。機構は、[RFC4366]で定義されたTLS拡張子を使用し、新たなTLSメッセージタイプを定義します。"
    },
    {
      "indent": 3,
      "text": "This mechanism is useful in the following situations:",
      "ja": "このメカニズムは、次のような場合に便利です。"
    },
    {
      "indent": 3,
      "text": "1. servers that handle a large number of transactions from different users 2. servers that desire to cache sessions for a long time 3. ability to load balance requests across servers 4. embedded servers with little memory",
      "ja": "長い時間のために少しのメモリを持つサーバー4.埋め込まれたサーバー間でバランスの要求をロードする3.能力を異なるユーザキャッシュセッションに望む2.サーバからの多数のトランザクションを処理1.サーバ"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "Within this document, the term 'ticket' refers to a cryptographically protected data structure that is created by the server and consumed by the server to rebuild session-specific state.",
      "ja": "このドキュメント内では、用語「チケット」は、サーバによって作成され、セッション固有の状態を再構築するために、サーバによって消費される暗号で保護されたデータ構造を指します。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. Protocol",
      "section_title": true,
      "ja": "3.プロトコル"
    },
    {
      "indent": 3,
      "text": "This specification describes a mechanism to distribute encrypted session-state information in the form of a ticket. The ticket is created by a TLS server and sent to a TLS client. The TLS client presents the ticket to the TLS server to resume a session. Implementations of this specification are expected to support both mechanisms. Other specifications can take advantage of the session tickets, perhaps specifying alternative means for distribution or selection. For example, a separate specification may describe an alternate way to distribute a ticket and use the TLS extension in this document to resume the session. This behavior is beyond the scope of the document and would need to be described in a separate specification.",
      "ja": "この仕様は、チケットの形式で暗号化されたセッション状態情報を配布するためのメカニズムについて説明します。チケットはTLSサーバによって作成され、TLSクライアントに送信されます。 TLSクライアントがセッションを再開するためにTLSサーバーへのチケットを提示します。この仕様の実装は両方のメカニズムをサポートすることが期待されます。その他の仕様は、おそらく分布や選択のための代替手段を指定して、セッションチケットを利用することができます。例えば、別々の仕様は、チケットを配布する代替の方法を記述してもよいし、セッションを再開するために、この文書でTLS拡張子を使用します。この動作は、文書の範囲を超えて、個別仕様書に記述される必要があるであろう。"
    },
    {
      "indent": 0,
      "text": "3.1. Overview",
      "section_title": true,
      "ja": "3.1. 概要"
    },
    {
      "indent": 3,
      "text": "The client indicates that it supports this mechanism by including a SessionTicket TLS extension in the ClientHello message. The extension will be empty if the client does not already possess a ticket for the server. The extension is described in Section 3.2.",
      "ja": "クライアントはClientHelloメッセージでSessionTicket TLS拡張子を含めることによって、このメカニズムをサポートしていることを示しています。クライアントがすでにサーバのチケットを持っていない場合の拡張子は空になります。拡張子は、3.2節に記載されています。"
    },
    {
      "indent": 3,
      "text": "If the server wants to use this mechanism, it stores its session state (such as ciphersuite and master secret) to a ticket that is encrypted and integrity-protected by a key known only to the server. The ticket is distributed to the client using the NewSessionTicket TLS handshake message described in Section 3.3. This message is sent during the TLS handshake before the ChangeCipherSpec message, after the server has successfully verified the client's Finished message.",
      "ja": "サーバは、このメカニズムを使用したい場合は、暗号化され、サーバだけに知られているキーで整合性が保護されたチケットに（例えば暗号スイートとマスター秘密として）そのセッション状態を保存します。チケットは、3.3節に記載NewSessionTicket TLSハンドシェイクメッセージを使用して、クライアントに配信されます。サーバーがクライアントのFinishedメッセージを正常に確認した後に、このメッセージは、ChangeCipherSpecをメッセージの前にTLSハンドシェイク中に送信されます。"
    },
    {
      "indent": 6,
      "text": "Client Server",
      "ja": "クライアントサーバー"
    },
    {
      "indent": 6,
      "text": "ClientHello\n(empty SessionTicket extension)------->\n                                                ServerHello\n                            (empty SessionTicket extension)\n                                               Certificate*\n                                         ServerKeyExchange*\n                                        CertificateRequest*\n                             <--------      ServerHelloDone\nCertificate*\nClientKeyExchange\nCertificateVerify*\n[ChangeCipherSpec]\nFinished                     -------->\n                                           NewSessionTicket\n                                         [ChangeCipherSpec]\n                             <--------             Finished\nApplication Data             <------->     Application Data",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 1: Message flow for full handshake issuing new session ticket",
      "ja": "図1：新しいセッションチケットを発行する完全な握手のためのメッセージフロー"
    },
    {
      "indent": 3,
      "text": "The client caches this ticket along with the master secret and other parameters associated with the current session. When the client wishes to resume the session, it includes the ticket in the SessionTicket extension within the ClientHello message. The server then decrypts the received ticket, verifies the ticket's validity, retrieves the session state from the contents of the ticket, and uses this state to resume the session. The interaction with the TLS Session ID is described in Section 3.4. If the server successfully verifies the client's ticket, then it may renew the ticket by including a NewSessionTicket handshake message after the ServerHello.",
      "ja": "クライアントは、マスターシークレットと、現在のセッションに関連付けられている他のパラメーターと一緒にこのチケットをキャッシュします。クライアントがセッションを再開することを希望する場合は、ClientHelloメッセージ内のSessionTicket拡張のチケットが含まれています。次に、サーバは、受け取ったチケットを復号化し、チケットの有効性を検証し、チケットの内容からセッション状態を取得し、セッションを再開するために、この状態を使用しています。 TLSセッションIDとの相互作用は、3.4節に記述されています。サーバーが正常にクライアントのチケットを確認した場合、それはのServerHello後NewSessionTicketハンドシェイクメッセージを含めることによって、チケットを更新することができます。"
    },
    {
      "indent": 6,
      "text": "Client Server",
      "ja": "クライアントサーバー"
    },
    {
      "indent": 6,
      "text": "ClientHello\n(SessionTicket extension)      -------->\n                                                 ServerHello\n                             (empty SessionTicket extension)\n                                            NewSessionTicket\n                                          [ChangeCipherSpec]\n                              <--------             Finished\n[ChangeCipherSpec]\nFinished                      -------->\nApplication Data              <------->     Application Data",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 2: Message flow for abbreviated handshake using new session ticket",
      "ja": "図2：新しいセッションチケットを使用して簡略ハンドシェイクのためのメッセージフロー"
    },
    {
      "indent": 3,
      "text": "A recommended ticket format is given in Section 4.",
      "ja": "推奨チケット形式はセクション4に示されています。"
    },
    {
      "indent": 3,
      "text": "If the server cannot or does not want to honor the ticket, then it can initiate a full handshake with the client.",
      "ja": "サーバーは、またはチケットを称えるために望んでいないことができないなら、それはクライアントとの完全なハンドシェイクを開始することができます。"
    },
    {
      "indent": 3,
      "text": "In the case that the server does not wish to issue a new ticket at this time, it just completes the handshake without including a SessionTicket extension or NewSessionTicket handshake message. This is shown below (this flow is identical to Figure 1 in RFC 2246, except for the session ticket extension in the first message):",
      "ja": "サーバは、この時点で新しいチケットを発行することを希望しない場合には、それだけでSessionTicket拡張子またはNewSessionTicketハンドシェイクメッセージを含めずにハンドシェイクを完了します。これは、（この流れは最初のメッセージでセッションチケット拡張を除いて、RFC 2246で図1と同一である）を以下に示します："
    },
    {
      "indent": 6,
      "text": "Client Server",
      "ja": "クライアントサーバー"
    },
    {
      "indent": 6,
      "text": "ClientHello\n(SessionTicket extension)    -------->\n                                                ServerHello\n                                               Certificate*\n                                         ServerKeyExchange*\n                                        CertificateRequest*\n                             <--------      ServerHelloDone\nCertificate*\nClientKeyExchange\nCertificateVerify*\n[ChangeCipherSpec]\nFinished                     -------->\n                                         [ChangeCipherSpec]\n                             <--------             Finished\nApplication Data             <------->     Application Data",
      "raw": true
    },
    {
      "indent": 7,
      "text": "Figure 3: Message flow for server completing full handshake without issuing new session ticket",
      "ja": "図3：新しいセッションチケットを発行せず、完全なハンドシェイクを完了し、サーバーのメッセージフロー"
    },
    {
      "indent": 3,
      "text": "If the server rejects the ticket, it may still wish to issue a new ticket after performing the full handshake as shown below (this flow is identical to Figure 1, except the SessionTicket extension in the Client Hello is not empty):",
      "ja": "サーバーがチケットを拒否した場合、それはまだ（このフローはこんにちはが空でないクライアントでSessionTicket拡張子を除いて、図1と同じである）は、以下に示すように、完全なハンドシェイクを実行した後に新しいチケットを発行したいことがあります。"
    },
    {
      "indent": 6,
      "text": "Client Server",
      "ja": "クライアントサーバー"
    },
    {
      "indent": 6,
      "text": "ClientHello\n(SessionTicket extension) -------->\n                                                ServerHello\n                            (empty SessionTicket extension)\n                                               Certificate*\n                                         ServerKeyExchange*\n                                        CertificateRequest*\n                         <--------          ServerHelloDone\nCertificate*\nClientKeyExchange\nCertificateVerify*\n[ChangeCipherSpec]\nFinished                 -------->\n                                           NewSessionTicket\n                                         [ChangeCipherSpec]\n                         <--------                 Finished\nApplication Data         <------->         Application Data",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 4: Message flow for server rejecting ticket, performing full handshake and issuing new session ticket",
      "ja": "図4：サーバーは完全なハンドシェイクを実行して、新しいセッションチケットを発行し、チケットを拒否するメッセージフロー"
    },
    {
      "indent": 0,
      "text": "3.2. SessionTicket TLS Extension",
      "section_title": true,
      "ja": "3.2.  SessionTicket TLS拡張"
    },
    {
      "indent": 3,
      "text": "The SessionTicket TLS extension is based on [RFC4366]. The format of the ticket is an opaque structure used to carry session-specific state information. This extension may be sent in the ClientHello and ServerHello.",
      "ja": "SessionTicket TLS拡張子は[RFC4366]に基づいています。チケットのフォーマットは、セッション固有の状態情報を運ぶために使用される不透明な構造です。この拡張はのClientHelloとServerHelloメッセージで送信することができます。"
    },
    {
      "indent": 3,
      "text": "If the client possesses a ticket that it wants to use to resume a session, then it includes the ticket in the SessionTicket extension in the ClientHello. If the client does not have a ticket and is prepared to receive one in the NewSessionTicket handshake message, then it MUST include a zero-length ticket in the SessionTicket extension. If the client is not prepared to receive a ticket in the NewSessionTicket handshake message then it MUST NOT include a SessionTicket extension unless it is sending a non-empty ticket it received through some other means from the server.",
      "ja": "クライアントがセッションを再開するために使用したいチケットを所有している場合、それはのClientHelloでSessionTicket拡張のチケットが含まれています。クライアントがチケットを持っているとNewSessionTicketハンドシェイクメッセージに1を受け取るために用意されていない場合、それはSessionTicket拡張の長さがゼロのチケットを含まなければなりません。クライアントがNewSessionTicketハンドシェイクメッセージでチケットを受け取るために用意されていない場合は、それがサーバーからいくつかの他の手段を介して受信した非空のチケットを送信していない限り、それはSessionTicket拡張子を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "The server uses an zero length SessionTicket extension to indicate to the client that it will send a new session ticket using the NewSessionTicket handshake message described in Section 3.3. The",
      "ja": "サーバは、3.3節で説明NewSessionTicketハンドシェイクメッセージを使用して新しいセッションチケットを送信することをクライアントに示すために、長さゼロのSessionTicket拡張を使用しています。ザ・"
    },
    {
      "indent": 3,
      "text": "server MUST send this extension in the ServerHello if it wishes to issue a new ticket to the client using the NewSessionTicket handshake message. The server MUST NOT send this extension if it does not receive one in the ClientHello.",
      "ja": "それはNewSessionTicketハンドシェイクメッセージを使用して、クライアントに新しいチケットを発行することを希望する場合、サーバはServerHelloメッセージでこの拡張を送らなければなりません。それはのClientHelloで1を受信しない場合、サーバーは、この拡張機能を送ってはいけません。"
    },
    {
      "indent": 3,
      "text": "If the server fails to verify the ticket, then it falls back to performing a full handshake. If the ticket is accepted by the server but the handshake fails, the client SHOULD delete the ticket.",
      "ja": "サーバーがチケットを確認するために失敗した場合、それが戻って完全なハンドシェイクを実行することに落ちます。チケットは、サーバーによって受け入れられているが、ハンドシェイクが失敗した場合、クライアントは、チケットを削除する必要があります。"
    },
    {
      "indent": 3,
      "text": "The SessionTicket extension has been assigned the number 35. The format of the SessionTicket extension is given at the end of this section.",
      "ja": "SessionTicket拡張はSessionTicket拡張のフォーマットは、このセクションの終わりに与えられる番号35が割り当てられています。"
    },
    {
      "indent": 6,
      "text": "struct {\n    opaque ticket<0..2^16-1>;\n} SessionTicket;",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3.3. NewSessionTicket Handshake Message",
      "section_title": true,
      "ja": "3.3.  NewSessionTicketハンドシェイクメッセージ"
    },
    {
      "indent": 3,
      "text": "This message is sent by the server during the TLS handshake before the ChangeCipherSpec message. This message MUST be sent if the server included a SessionTicket extension in the ServerHello. This message MUST NOT be sent if the server did not include a SessionTicket extension in the ServerHello. In the case of a full handshake, the server MUST verify the client's Finished message before sending the ticket. The client MUST NOT treat the ticket as valid until it has verified the server's Finished message. If the server determines that it does not want to include a ticket after it has included the SessionTicket extension in the ServerHello, then it sends a zero-length ticket in the NewSessionTicket handshake message.",
      "ja": "このメッセージは、ChangeCipherSpecをメッセージの前にTLSハンドシェイク中にサーバによって送信されます。サーバがのServerHelloでSessionTicket拡張子が含まれている場合、このメッセージが送られなければなりません。サーバがのServerHelloでSessionTicket拡張子が含まれていなかった場合、このメッセージは送ってはいけません。完全なハンドシェイクの場合、サーバーは、チケットを送信する前に、クライアントのFinishedメッセージを確かめなければなりません。それは、サーバーのFinishedメッセージを検証するまで、クライアントは有効なものとして、チケットを処理してはなりません。サーバは、それがのServerHelloでSessionTicket拡張子を含めた後に、それはチケットを含めるいないと判断した場合、それはNewSessionTicketハンドシェイクメッセージに長さゼロのチケットを送信します。"
    },
    {
      "indent": 3,
      "text": "If the server successfully verifies the client's ticket, then it MAY renew the ticket by including a NewSessionTicket handshake message after the ServerHello in the abbreviated handshake. The client should start using the new ticket as soon as possible after it verifies the server's Finished message for new connections. Note that since the updated ticket is issued before the handshake completes, it is possible that the client may not put the new ticket into use before it initiates new connections. The server MUST NOT assume that the client actually received the updated ticket until it successfully verifies the client's Finished message.",
      "ja": "サーバーが正常にクライアントのチケットを確認した場合、それは簡略ハンドシェイクでのServerHello後NewSessionTicketハンドシェイクメッセージを含めることによって、チケットを更新することができます。クライアントは、それが新しい接続のためのサーバのFinishedメッセージを確認した後、できるだけ早く新しいチケットを使用して開始する必要があります。ハンドシェイクが完了する前に更新され、チケットが発行されているので、新しい接続を開始する前に、クライアントが使用されるように新しいチケットを入れない可能性があることに注意してください。サーバは、それが成功し、クライアントのFinishedメッセージを確認するまで、クライアントが実際に更新チケットを受け取ったと仮定してはいけません。"
    },
    {
      "indent": 3,
      "text": "The NewSessionTicket handshake message has been assigned the number 4 and its definition is given at the end of this section. The ticket_lifetime_hint field contains a hint from the server about how long the ticket should be stored. The value indicates the lifetime in seconds as a 32-bit unsigned integer in network byte order. A value of zero is reserved to indicate that the lifetime of the ticket is unspecified. A client SHOULD delete the ticket and associated state when the time expires. It MAY delete the ticket earlier based on local policy. A server MAY treat a ticket as valid for a shorter or longer period of time than what is stated in the ticket_lifetime_hint.",
      "ja": "NewSessionTicketハンドシェークメッセージ番号4が割り当てられており、その定義は、このセクションの終わりに与えられます。 ticket_lifetime_hintフィールドは、チケットが格納されるべきか、長さ約サーバーからのヒントが含まれています。値は、ネットワークバイト順で32ビットの符号なし整数として寿命を秒単位で示しています。ゼロの値は、チケットの有効期間が指定されていないことを示すために予約されています。時間の有効期限が切れたとき、クライアントはチケットと関連付けられた状態を削除する必要があります。これは、ローカルポリシーに基づいて、以前のチケットを削除することができます。サーバーはticket_lifetime_hintに記載されているものよりも時間が短いか長い期間として有効なチケットを扱うかもしれ。"
    },
    {
      "indent": 6,
      "text": "struct {\n    HandshakeType msg_type;\n    uint24 length;\n    select (HandshakeType) {\n        case hello_request:       HelloRequest;\n        case client_hello:        ClientHello;\n        case server_hello:        ServerHello;\n        case certificate:         Certificate;\n        case server_key_exchange: ServerKeyExchange;\n        case certificate_request: CertificateRequest;\n        case server_hello_done:   ServerHelloDone;\n        case certificate_verify:  CertificateVerify;\n        case client_key_exchange: ClientKeyExchange;\n        case finished:            Finished;\n        case session_ticket:      NewSessionTicket; /* NEW */\n    } body;\n} Handshake;",
      "raw": true
    },
    {
      "indent": 6,
      "text": "struct {\n    uint32 ticket_lifetime_hint;\n    opaque ticket<0..2^16-1>;\n} NewSessionTicket;",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3.4. Interaction with TLS Session ID",
      "section_title": true,
      "ja": "3.4.  TLSセッションIDとの対話"
    },
    {
      "indent": 3,
      "text": "If a server is planning on issuing a SessionTicket to a client that does not present one, it SHOULD include an empty Session ID in the ServerHello. If the server includes a non-empty session ID, then it is indicating intent to use stateful session resume. If the client receives a SessionTicket from the server, then it discards any Session ID that was sent in the ServerHello.",
      "ja": "サーバーが1つを提示していないクライアントにSessionTicketを発行することを計画している場合、それはのServerHelloで空のセッションIDを含むべきです。サーバが空でないセッションIDが含まれている場合、それはステートフルセッション再開を使用する意図を示しています。クライアントがサーバからSessionTicketを受信した場合、それはServerHelloメッセージで送信されたすべてのセッションIDを破棄する。"
    },
    {
      "indent": 3,
      "text": "When presenting a ticket, the client MAY generate and include a Session ID in the TLS ClientHello. If the server accepts the ticket and the Session ID is not empty, then it MUST respond with the same Session ID present in the ClientHello. This allows the client to easily differentiate when the server is resuming a session from when it is falling back to a full handshake. Since the client generates a Session ID, the server MUST NOT rely upon the Session ID having a particular value when validating the ticket. If a ticket is presented by the client, the server MUST NOT attempt to use the",
      "ja": "チケットを提示すると、クライアントが生成し、TLSのClientHelloでのセッションIDを含むかもしれません。サーバーがチケットを受け入れ、セッションIDが空でない場合、それはのClientHello内で同じセッションIDの存在で応じなければなりません。これは、サーバが、それは完全なハンドシェイクにフォールバックされたときからセッションを再開したとき、クライアントは簡単に区別することができます。クライアントは、セッションIDを生成しているため、サーバーは、チケットの検証時に特定の値を持つセッションIDに依存してはなりません。チケットがクライアントによって提示された場合、サーバーは、使用しようとしてはなりません"
    },
    {
      "indent": 3,
      "text": "Session ID in the ClientHello for stateful session resume. Alternatively, the client MAY include an empty Session ID in the ClientHello. In this case, the client ignores the Session ID sent in the ServerHello and determines if the server is resuming a session by the subsequent handshake messages.",
      "ja": "ステートフルセッション再開のためのClientHelloでのセッションID。また、クライアントはのClientHelloに空のセッションIDを含むかもしれません。この場合、クライアントはServerHelloメッセージで送信されたセッションIDを無視し、サーバが、その後のハンドシェイクメッセージでセッションを再開しているかどうかを判断します。"
    },
    {
      "indent": 0,
      "text": "4. Recommended Ticket Construction",
      "section_title": true,
      "ja": "4.推奨チケット建設"
    },
    {
      "indent": 3,
      "text": "This section describes a recommended format and protection for the ticket. Note that the ticket is opaque to the client, so the structure is not subject to interoperability concerns, and implementations may diverge from this format. If implementations do diverge from this format, they must take security concerns seriously. Clients MUST NOT examine the ticket under the assumption that it complies with this document.",
      "ja": "このセクションでは、チケットの推奨フォーマットおよび保護について説明します。構造は、相互運用性の懸念の対象ではありませんので、チケットは、クライアントに不透明であることに注意してください、と実装は、このフォーマットから発散することがあります。実装は、このフォーマットから発散するならば、彼らは真剣にセキュリティ上の懸念を取る必要があります。クライアントは、それは、この文書に準拠していることを仮定してチケットを調べてはなりません。"
    },
    {
      "indent": 3,
      "text": "The server uses two different keys: one 128-bit key for AES [AES] in CBC mode [CBC] encryption and one 128-bit key for HMAC-SHA1 [RFC2104] [SHA1].",
      "ja": "AES [AES] CBCモードで[CBC]暗号化するための1つの128ビット鍵とHMAC-SHA1 [RFC2104] [SHA1]のための1つの128ビット鍵：サーバは、二つの異なる鍵を使用します。"
    },
    {
      "indent": 3,
      "text": "The ticket is structured as follows:",
      "ja": "次のようにチケットが構成されています。"
    },
    {
      "indent": 6,
      "text": "struct {\n    opaque key_name[16];\n    opaque iv[16];\n    opaque encrypted_state<0..2^16-1>;\n    opaque mac[20];\n} ticket;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Here, key_name serves to identify a particular set of keys used to protect the ticket. It enables the server to easily recognize tickets it has issued. The key_name should be randomly generated to avoid collisions between servers. One possibility is to generate new random keys and key_name every time the server is started.",
      "ja": "ここで、たキー名は、チケットを保護するために使用されるキーの特定のセットを識別するのに役立ちます。それは簡単にそれが発行したチケットを認識するようにサーバーを可能にします。 key_nameは、ランダムにサーバー間での衝突を避けるために生成する必要があります。一つの可能​​性は、新しいランダムキーを生成し、サーバが起動されるたびにKEY_NAMEすることです。"
    },
    {
      "indent": 3,
      "text": "The actual state information in encrypted_state is encrypted using 128-bit AES in CBC mode with the given IV. The MAC is calculated using HMAC-SHA1 over key_name (16 octets)and IV (16 octets), followed by the length of the encrypted_state field (2 octets) and its contents (variable length).",
      "ja": "encrypted_stateにおける実際の状態情報は、所与のIVとCBCモードで128ビットのAESを使用して暗号化されています。 MACはencrypted_stateフィールド（2つのオクテット）の長さとその内容（可変長）続いたキー名（16オクテット）およびIV（16オクテット）、上にHMAC-SHA1を使用して計算されます。"
    },
    {
      "indent": 6,
      "text": "struct {\n    ProtocolVersion protocol_version;\n    CipherSuite cipher_suite;\n    CompressionMethod compression_method;\n    opaque master_secret[48];\n    ClientIdentity client_identity;\n    uint32 timestamp;\n} StatePlaintext;",
      "raw": true
    },
    {
      "indent": 5,
      "text": " enum { anonymous(0), certificate_based(1), psk(2) } ClientAuthenticationType;",
      "ja": "列挙{匿名（0）、certificate_based（1）、PSK（2）} ClientAuthenticationType。"
    },
    {
      "indent": 6,
      "text": "struct {\n    ClientAuthenticationType client_authentication_type;\n    select (ClientAuthenticationType) {\n        case anonymous: struct {};\n        case certificate_based:\n            ASN.1Cert certificate_list<0..2^24-1>;\n        case psk:\n            opaque psk_identity<0..2^16-1>; /* from [RFC4279] */",
      "raw": true
    },
    {
      "indent": 7,
      "text": " } } ClientIdentity;",
      "ja": "}} ClientIdentity。"
    },
    {
      "indent": 3,
      "text": "The structure StatePlaintext stores the TLS session state including the master_secret. The timestamp within this structure allows the TLS server to expire tickets. To cover the authentication and key exchange protocols provided by TLS, the ClientIdentity structure contains the authentication type of the client used in the initial exchange (see ClientAuthenticationType). To offer the TLS server with the same capabilities for authentication and authorization, a certificate list is included in case of public-key-based authentication. The TLS server is therefore able to inspect a number of different attributes within these certificates. A specific implementation might choose to store a subset of this information or additional information. Other authentication mechanisms, such as Kerberos [RFC2712], would require different client identity data.",
      "ja": "でマスター_を含むTLSセッション状態を保存するStatePlaintext構造。この構造内のタイムスタンプは、TLSサーバがチケットを期限切れにすることができます。 TLSが提供する認証および鍵交換プロトコルをカバーするために、ClientIdentity構造は、初期の交換（ClientAuthenticationTypeを参照）に使用されるクライアントの認証タイプが含まれています。認証と承認のために同じ機能を備えたTLSサーバーを提供するには、証明書のリストが公開鍵ベースの認証の場合に含まれています。 TLSサーバは、したがって、これらの証明書内の異なる属性の数を検査することができます。具体的な実装は、この情報や追加情報のサブセットを格納することもできます。このようケルベロス[RFC2712]、などの他の認証メカニズムは、異なるクライアントIDのデータを必要とします。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "This section addresses security issues related to the usage of a ticket. Tickets must be authenticated and encrypted to prevent modification or eavesdropping by an attacker. Several attacks described below will be possible if this is not carefully done.",
      "ja": "このセクションでは、チケットの使用に関連するセキュリティ問題に対処します。チケットは認証され、攻撃者によって修正や盗聴を防ぐために暗号化する必要があります。これは注意深く行われていない場合は以下のいくつかの攻撃が可能になります。"
    },
    {
      "indent": 3,
      "text": "Implementations should take care to ensure that the processing of tickets does not increase the chance of denial of service as described below.",
      "ja": "実装は、以下に述べるように、チケットの処理は、サービス拒否の機会を増加させないように注意する必要があります。"
    },
    {
      "indent": 0,
      "text": "5.1. Invalidating Sessions",
      "section_title": true,
      "ja": "5.1. セッションの無効化"
    },
    {
      "indent": 3,
      "text": "The TLS specification requires that TLS sessions be invalidated when errors occur. [CSSC] discusses the security implications of this in detail. In the analysis in this paper, failure to invalidate sessions does not pose a security risk. This is because the TLS handshake uses a non-reversible function to derive keys for a session so information about one session does not provide an advantage to attack the master secret or a different session. If a session invalidation scheme is used, the implementation should verify the integrity of the ticket before using the contents to invalidate a session to ensure that an attacker cannot invalidate a chosen session.",
      "ja": "TLS仕様では、エラーが発生したときにTLSセッションが無効にされている必要があります。 [CSSC]詳細にこれのセキュリティへの影響について説明します。本論文での分析では、セッションを無効にする失敗はセキュリティ上のリスクをもたらすことはありません。 TLSハンドシェイクが1つのセッションに関する情報は、マスタシークレットまたは別のセッションを攻撃する利点を提供しないように、セッションのために鍵を導出するために、非可逆関数を使用するためです。セッションの無効化スキームを使用する場合、実装は、攻撃者が選択したセッションを無効にすることができないことを保証するためにセッションを無効にするためのコンテンツを使用する前に、チケットの整合性を確認する必要があります。"
    },
    {
      "indent": 0,
      "text": "5.2. Stolen Tickets",
      "section_title": true,
      "ja": "5.2. 盗まれたチケット"
    },
    {
      "indent": 3,
      "text": "An eavesdropper or man-in-the-middle may obtain the ticket and attempt to use the ticket to establish a session with the server; however, since the ticket is encrypted and the attacker does not know the secret key, a stolen ticket does not help an attacker resume a session. A TLS server MUST use strong encryption and integrity protection for the ticket to prevent an attacker from using a brute force mechanism to obtain the ticket's contents.",
      "ja": "盗聴者や男性-・イン・ミドルチケットを取得し、サーバーとのセッションを確立するためにチケットを使用しようとすること。チケットが暗号化されると、攻撃者が秘密鍵を知らないので、盗まれたチケットは、攻撃者がセッションを再開する助けにはなりません。 TLSサーバは、チケットの内容を取得するためにブルートフォースメカニズムを使用してから攻撃を防ぐために、チケットの強力な暗号化と完全性保護を使用しなければなりません。"
    },
    {
      "indent": 0,
      "text": "5.3. Forged Tickets",
      "section_title": true,
      "ja": "5.3. 鍛造チケット"
    },
    {
      "indent": 3,
      "text": "A malicious user could forge or alter a ticket in order to resume a session, to extend its lifetime, to impersonate as another user, or to gain additional privileges. This attack is not possible if the ticket is protected using a strong integrity protection algorithm such as a keyed HMAC-SHA1.",
      "ja": "悪意のあるユーザーが偽造または、その寿命を延ばすために、別のユーザーとして偽装するために、または追加の権限を取得するために、セッションを再開するためにチケットを変更することができます。チケットは、鍵付きHMAC-SHA1などの強い完全性保護アルゴリズムを使用して保護されている場合は、この攻撃はできません。"
    },
    {
      "indent": 0,
      "text": "5.4. Denial of Service Attacks",
      "section_title": true,
      "ja": "5.4. サービス拒否攻撃"
    },
    {
      "indent": 3,
      "text": "The key_name field defined in the recommended ticket format helps the server efficiently reject tickets that it did not issue. However, an adversary could store or generate a large number of tickets to send to the TLS server for verification. To minimize the possibility of a denial of service, the verification of the ticket should be lightweight (e.g., using efficient symmetric key cryptographic algorithms).",
      "ja": "推奨チケット形式で定義されたキー名フィールドには、サーバーが効率的にそれが発行していないチケットを拒絶することができます。しかし、敵は検証のためにTLSサーバに送信するチケットを大量に保存したり、生成することができます。サービス拒否攻撃の可能性を最小限に抑えるために、チケットの検証は、（例えば、効率的な対称鍵暗号アルゴリズムを用いて）軽量であるべきです。"
    },
    {
      "indent": 0,
      "text": "5.5. Ticket Protection Key Management",
      "section_title": true,
      "ja": "5.5. チケットの保護キー管理"
    },
    {
      "indent": 3,
      "text": "A full description of the management of the keys used to protect the ticket is beyond the scope of this document. A list of RECOMMENDED practices is given below.",
      "ja": "チケットを保護するために使用されるキーの管理の完全な説明はこのドキュメントの範囲を超えています。推奨事項のリストは以下のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The keys should be generated securely following the randomness recommendations in [RFC4086]. o The keys and cryptographic protection algorithms should be at least 128 bits in strength. o The keys should not be used for any other purpose than generating and verifying tickets. o The keys should be changed regularly. o The keys should be changed if the ticket format or cryptographic protection algorithms change.",
      "ja": "キーは[RFC4086]で乱数推奨に従って確実に生成する必要があり、O。 O鍵暗号保護アルゴリズムは、強度が少なくとも128ビットであるべきです。キーoを生成し、チケットを検証する以外の目的のために使用すべきではありません。キーoを定期的に変更する必要があります。チケット形式または暗号保護アルゴリズムが変更された場合、Oキーを変更する必要があります。"
    },
    {
      "indent": 0,
      "text": "5.6. Ticket Lifetime",
      "section_title": true,
      "ja": "5.6. チケットの有効期間"
    },
    {
      "indent": 3,
      "text": "The TLS server controls the lifetime of the ticket. Servers determine the acceptable lifetime based on the operational and security requirements of the environments in which they are deployed. The ticket lifetime may be longer than the 24-hour lifetime recommended in [RFC2246]. TLS clients may be given a hint of the lifetime of the ticket. Since the lifetime of a ticket may be unspecified, a client has its own local policy that determines when it discards tickets.",
      "ja": "TLSサーバは、チケットの有効期間を制御します。サーバーは、彼らが展開される環境の運用とセキュリティ要件に基づいて許容できる寿命を決定します。チケットの有効期間は、[RFC2246]で推奨されて24時間の寿命よりも長くなることがあります。 TLSクライアントは、チケットの有効期間のヒントを与えてもよいです。チケットの有効期間が指定されていない可能性があるため、クライアントはチケットを破棄したときに決定し、独自のローカルポリシーを持っています。"
    },
    {
      "indent": 0,
      "text": "5.7. Alternate Ticket Formats and Distribution Schemes",
      "section_title": true,
      "ja": "5.7. 代替チケットフォーマットおよび配布スキーム"
    },
    {
      "indent": 3,
      "text": "If the ticket format or distribution scheme defined in this document is not used, then great care must be taken in analyzing the security of the solution. In particular, if confidential information, such as a secret key, is transferred to the client, it MUST be done using secure communication so as to prevent attackers from obtaining or modifying the key. Also, the ticket MUST have its integrity and confidentiality protected with strong cryptographic techniques to prevent a breach in the security of the system.",
      "ja": "この文書で定義されたチケット形式または分散方式が使用されていない場合には、細心の注意は、ソリューションのセキュリティを分析する際に注意する必要があります。鍵を取得または変更から攻撃を防止するために、特に、そのような秘密鍵などの機密情報、あれば、クライアントに転送され、それは安全な通信を使用して行われなければなりません。また、チケットは、その完全性と機密性は、システムのセキュリティに違反することを防止するために、強力な暗号化技術で保護されていなければなりません。"
    },
    {
      "indent": 0,
      "text": "5.8. Identity Privacy, Anonymity, and Unlinkability",
      "section_title": true,
      "ja": "5.8. アイデンティティプライバシー、匿名性、及びリンク不能"
    },
    {
      "indent": 3,
      "text": "This document mandates that the content of the ticket is confidentiality protected in order to avoid leakage of its content, such as user-relevant information. As such, it prevents disclosure of potentially sensitive information carried within the ticket.",
      "ja": "この文書では、チケットのコンテンツは、ユーザー関連情報として、その内容の漏洩を回避するために、機密保護されていることを義務付け。このように、チケットの中に運ば機密情報の開示を防止します。"
    },
    {
      "indent": 3,
      "text": "The initial handshake exchange, which was used to obtain the ticket, might not provide identity confidentiality of the client based on the properties of TLS. Another relevant security threat is the ability for an on-path adversary to observe multiple TLS handshakes where the same ticket is used and therefore to conclude that they belong to the same communication endpoints. Application designers that use the ticket mechanism described in this document should consider that unlinkability [ANON] is not necessarily provided.",
      "ja": "チケットを取得するために使用された最初のハンドシェイク交換は、TLSの性質に基づいて、クライアントのアイデンティティの機密性を提供しない場合があります。他の関連するセキュリティの脅威は、同じチケットが使用されているので、彼らは同じ通信のエンドポイントに属しているという結論に複数のTLSハンドシェイクを観察するために、パス敵のための機能です。この文書で説明したチケットのメカニズムを使用するアプリケーションの設計者は、リンク不能[ANON]は必ずしも提供されていないことを考慮すべきです。"
    },
    {
      "indent": 3,
      "text": "While a full discussion of these topics is beyond the scope of this document, it should be noted that it is possible to issue a ticket using a TLS renegotiation handshake that occurs after a secure tunnel has been established by a previous handshake. This may help address some privacy and unlinkability issues in some environments.",
      "ja": "これらのトピックの完全な議論は、この文書の範囲外ですが、安全なトンネルは、前のハンドシェイクによって確立された後に発生したTLS再ネゴシエーションハンドシェイクを使用してチケットを発行することが可能であることに留意すべきです。これは、一部の環境では、いくつかのプライバシーとリンク不能の問題に対処するに役立つことがあります。"
    },
    {
      "indent": 0,
      "text": "6. Acknowledgements",
      "section_title": true,
      "ja": "6.謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank the following people for their help with preparing and reviewing this document: Eric Rescorla, Mohamad Badra, Tim Dierks, Nelson Bolyard, Nancy Cam-Winget, David McGrew, Rob Dugal, Russ Housley, Amir Herzberg, Bernard Aboba, and members of the TLS working group.",
      "ja": "著者は、この文書を作成し、見直しを持つ彼らの助けのために、以下の人々に感謝したいと思います：エリックレスコラ、モハマドBadra、ティム・ダークス、ネルソンBolyard、ナンシー・カム・ウィンゲット、デビッドマグリュー、ロブDugal、ラスHousley、アミール・ハーツバーグ、バーナードAboba TLSワーキンググループの、そしてメンバー。"
    },
    {
      "indent": 3,
      "text": "[CSSC] describes a solution that is very similar to the one described in this document and gives a detailed analysis of the security considerations involved. [RFC2712] describes a mechanism for using Kerberos [RFC4120] in TLS ciphersuites, which helped inspire the use of tickets to avoid server state. [EAP-FAST] makes use of a similar mechanism to avoid maintaining server state for the cryptographic tunnel. [SC97] also investigates the concept of stateless sessions.",
      "ja": "[CSSC]この文書で説明したものと非常に似ており、関連するセキュリティ上の考慮事項の詳細な分析を提供するソリューションについて説明します。 [RFC2712]は、サーバーの状態を回避するために、チケットの使用を鼓舞助けたTLS暗号群にケルベロス[RFC4120]を使用するためのメカニズムを、説明しています。 [EAP-FAST]は同様の機構の使用は、暗号トンネルのサーバ状態を維持回避することができます。 [SC97]もステートレスセッションの概念を調査します。"
    },
    {
      "indent": 0,
      "text": "7. IANA Considerations",
      "section_title": true,
      "ja": "7. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA has assigned a TLS extension number of 35 to the SessionTicket TLS extension from the TLS registry of ExtensionType values defined in [RFC4366].",
      "ja": "IANAは[RFC4366]で定義さExtensionType値のTLSレジストリからSessionTicket TLS拡張子35のTLSの内線番号を割り当てました。"
    },
    {
      "indent": 3,
      "text": "IANA has assigned a TLS HandshakeType number 4 to the NewSessionTicket handshake type from the TLS registry of HandshakeType values defined in [RFC4346].",
      "ja": "IANAは[RFC4346]で定義さHandshakeType値のTLSレジストリからNewSessionTicketハンドシェイクタイプにTLS HandshakeType番号4が割り当てられています。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8.参照文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC 2246, January 1999.",
      "ja": "[RFC2246]ダークス、T.とC.アレン、 \"TLSプロトコルバージョン1.0\"、RFC 2246、1999年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC4346] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.1\", RFC 4346, April 2006.",
      "ja": "[RFC4346]ダークス、T.およびE.レスコラ、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.1\"、RFC 4346、2006年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC4366] Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J., and T. Wright, \"Transport Layer Security (TLS) Extensions\", RFC 4366, April 2006.",
      "ja": "[RFC4366]ブレイク・ウィルソン、S.、Nystrom、M.、ホップウッド、D.、ミケルセン、J.、およびT.ライト、 \"トランスポート層セキュリティ（TLS）拡張機能\"、RFC 4366、2006年4月。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[AES] National Institute of Standards and Technology, \"Advanced Encryption Standard (AES)\", Federal Information Processing Standards (FIPS) Publication 197, November 2001.",
      "ja": "[AES]米国国立標準技術研究所、「高度暗号化標準（AES）」、連邦情報処理規格（FIPS）出版197、2001年11月。"
    },
    {
      "indent": 3,
      "text": "[ANON] Pfitzmann, A. and M. Hansen, \"Anonymity, Unlinkability, Unobservability, Pseudonymity, and Identity Management - A Consolidated Proposal for Terminology\", http://dud.inf.tu-dresden.de/literatur/ Anon_Terminology_v0.26-1.pdf, Draft 0.26, December 2005.",
      "ja": "【ANON] Pfitzmann、A.およびM.ハンセン、 \"匿名性、リンク不能性、観察不能、偽名、及びアイデンティティ管理 - 用語の連結提案\"、http://dud.inf.tu-dresden.de/literatur/ Anon_Terminology_v0。 26-1.pdf、ドラフト0.26、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[CBC] National Institute of Standards and Technology, \"Recommendation for Block Cipher Modes of Operation - Methods and Techniques\", NIST Special Publication 800- 38A, December 2001.",
      "ja": "[CBC]米国国立標準技術研究所、「ブロック暗号操作モードのための提言 - の方法と技術」、は、NIST Special Publication 800- 38A、2001年12月。"
    },
    {
      "indent": 3,
      "text": "[CSSC] Shacham, H., Boneh, D., and E. Rescorla, \"Client-side caching for TLS\", Transactions on Information and System Security (TISSEC) , Volume 7, Issue 4, November 2004.",
      "ja": "[CSSC] Shacham、H.、Boneh、D.、およびE.レスコラ、 \"TLSのクライアント側のキャッシュ\"、情報システムセキュリティ（TISSEC）、第7巻、第4号、2004年11月に取引。"
    },
    {
      "indent": 3,
      "text": "[EAP-FAST] Cam-Winget, N., McGrew, D., Salowey, J., and H. Zhou, \"EAP Flexible Authentication via Secure Tunneling (EAP-FAST)\", Work in Progress, April 2005.",
      "ja": "[EAP-FAST]カムウィンゲット、N.、マグリュー、D.、Salowey、J.、およびH.周進歩、2005年4月に、ワーク \"セキュアなトンネリング（EAP-FAST）を介してEAPフレキシブル認証\"。"
    },
    {
      "indent": 3,
      "text": "[RFC2104] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, February 1997.",
      "ja": "[RFC2104] Krawczyk、H.、ベラー、M.、およびR.カネッティ、 \"HMAC：メッセージ認証のための鍵付きハッシュ化\"、RFC 2104、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC2712] Medvinsky, A. and M. Hur, \"Addition of Kerberos Cipher Suites to Transport Layer Security (TLS)\", RFC 2712, October 1999.",
      "ja": "[RFC2712] Medvinsky、A.とM.ハー、RFC 2712、1999年10月 \"Layer Security（TLS）を輸送するためのケルベロス暗号スイートの追加\"。"
    },
    {
      "indent": 3,
      "text": "[RFC4086] Eastlake, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, June 2005.",
      "ja": "[RFC4086]イーストレーク、D.、シラー、J.、およびS.クロッカー、 \"セキュリティのためのランダム要件\"、BCP 106、RFC 4086、2005年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC4120] Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The Kerberos Network Authentication Service (V5)\", RFC 4120, July 2005.",
      "ja": "[RFC4120]ノイマン、C.、ゆう、T.、ハルトマン、S.、およびK.レイバーン、 \"ケルベロスネットワーク認証サービス（V5）\"、RFC 4120、2005年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC4279] Eronen, P. and H. Tschofenig, \"Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)\", RFC 4279, December 2005.",
      "ja": "[RFC4279] Eronen、P.とH. Tschofenig、RFC 4279 \"トランスポート層セキュリティ（TLS）のための事前共有鍵暗号の組み合わせ\"、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[SC97] Aura, T. and P. Nikander, \"Stateless Connections\", Proceedings of the First International Conference on Information and Communication Security (ICICS '97), 1997.",
      "ja": "[SC97]オーラ、T.およびP. Nikander、 \"ステートレス接続\"、情報通信セキュリティ（ICICS '97）、1997年第一回国際会議の議事録。"
    },
    {
      "indent": 3,
      "text": "[SHA1] National Institute of Standards and Technology, \"Secure Hash Standard (SHS)\", Federal Information Processing Standards (FIPS) Publication 180-2, August 2002.",
      "ja": "[SHA1]米国国立標準技術研究所、「セキュアハッシュ規格（SHS）」、連邦情報処理規格（FIPS）180-2出版、2002年8月。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Joseph Salowey Cisco Systems 2901 3rd Ave Seattle, WA 98121 US",
      "ja": "ジョセフSaloweyシスコシステムズ2901年第三アベニューシアトル、WA 98121米国"
    },
    {
      "indent": 3,
      "text": "EMail: jsalowey@cisco.com",
      "ja": "メールアドレス：jsalowey@cisco.com"
    },
    {
      "indent": 3,
      "text": "Hao Zhou Cisco Systems 4125 Highlander Parkway Richfield, OH 44286 US",
      "ja": "ハオ周シスコシステムズ4125ハイランダーパークウェイリッチフィールド、オハイオ州44286米国"
    },
    {
      "indent": 3,
      "text": "EMail: hzhou@cisco.com",
      "ja": "メールアドレス：hzhou@cisco.com"
    },
    {
      "indent": 3,
      "text": "Pasi Eronen Nokia Research Center P.O. Box 407 FIN-00045 Nokia Group Finland",
      "ja": "ノキア・リサーチセンター私書箱のパシEronenボックス407 FIN-00045 Nokiaのグループフィンランド"
    },
    {
      "indent": 3,
      "text": "EMail: pasi.eronen@nokia.com",
      "ja": "メールアドレス：pasi.eronen@nokia.com"
    },
    {
      "indent": 3,
      "text": "Hannes Tschofenig Siemens Otto-Hahn-Ring 6 Munich, Bayern 81739 Germany",
      "ja": "ハンネスTschofenigシーメンスオットー・ハーンリング6ミュンヘン、バイエルン81739ドイツ"
    },
    {
      "indent": 3,
      "text": "EMail: Hannes.Tschofenig@siemens.com",
      "ja": "メールアドレス：Hannes.Tschofenig@siemens.com"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットソサエティおよびインターネット・エンジニアリング・タスク・フォース放棄すべての保証、明示または、（もしあれば）後援ISに設けられています。黙示、情報の利用は、特定の目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証含むがこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is provided by the IETF Administrative Support Activity (IASA).",
      "ja": "RFCエディタ機能のための資金は、IETF管理サポート活動（IASA）によって提供されます。"
    }
  ]
}