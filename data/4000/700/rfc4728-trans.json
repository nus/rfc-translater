{
  "title": {
    "text": "RFC 4728 - The Dynamic Source Routing Protocol (DSR) for Mobile Ad Hoc Networks for IPv4",
    "ja": "RFC 4728 - IPv4のモバイルアドホックネットワークのためのダイナミックルーティングプロトコル（DSR）"
  },
  "number": 4728,
  "created_at": "2019-10-25 14:18:37.395830+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         D. Johnson\nRequest for Comments: 4728                               Rice University\nCategory: Experimental                                             Y. Hu\n                                                                    UIUC\n                                                                D. Maltz\n                                                      Microsoft Research\n                                                           February 2007",
      "raw": true
    },
    {
      "indent": 15,
      "text": "The Dynamic Source Routing Protocol (DSR)\n   for Mobile Ad Hoc Networks for IPv4",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This memo defines an Experimental Protocol for the Internet community. It does not specify an Internet standard of any kind. Discussion and suggestions for improvement are requested. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのためにExperimentalプロトコルを定義します。それはどんな種類のインターネット標準を指定しません。改善のための議論や提案が要求されています。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2007).",
      "ja": "著作権（C）IETFトラスト（2007）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The Dynamic Source Routing protocol (DSR) is a simple and efficient routing protocol designed specifically for use in multi-hop wireless ad hoc networks of mobile nodes. DSR allows the network to be completely self-organizing and self-configuring, without the need for any existing network infrastructure or administration. The protocol is composed of the two main mechanisms of \"Route Discovery\" and \"Route Maintenance\", which work together to allow nodes to discover and maintain routes to arbitrary destinations in the ad hoc network. All aspects of the protocol operate entirely on demand, allowing the routing packet overhead of DSR to scale automatically to only what is needed to react to changes in the routes currently in use. The protocol allows multiple routes to any destination and allows each sender to select and control the routes used in routing its packets, for example, for use in load balancing or for increased robustness. Other advantages of the DSR protocol include easily guaranteed loop-free routing, operation in networks containing unidirectional links, use of only \"soft state\" in routing, and very rapid recovery when routes in the network change. The DSR protocol is designed mainly for mobile ad hoc networks of up to about two hundred nodes and is designed to work well even with very high rates of mobility. This document specifies the operation of the DSR protocol for routing unicast IPv4 packets.",
      "ja": "ダイナミックソースルーティングプロトコル（DSR）は、移動ノードのマルチホップ無線アドホックネットワークで使用するために特別に設計さ簡単かつ効率的なルーティングプロトコルです。 DSRは、既存のネットワークインフラストラクチャや管理を必要とせずに、ネットワークは完全に自己組織化と自己設定することができます。プロトコルは、ノードがアドホックネットワーク内の任意の宛先へのルートを発見し、維持することを可能にするために一緒に働く「経路探索」と「ルートメンテナンス」の2つの主要な機構、構成されています。プロトコルのすべての側面は、DSRのルーティング・パケット・オーバーヘッドは、現在使用中のルートの変化に反応するために必要とされるもののみに自動的に拡張することができ、必要に応じて完全に動作します。プロトコルは、任意の宛先への複数のルートを可能にし、例えば、負荷分散に使用するためのまたは増大堅牢性のために、各送信側はそのパケットをルーティングに使用されるルートを選択して制御することを可能にします。 DSRプロトコルの他の利点は容易に保証ループフリールーティング、単方向リンクを含むネットワークの動作、ルーティングにのみ「ソフト状態」の使用、および非常に迅速な回復ネットワーク変更に経路が含まれます。 DSRプロトコルは、主に、最大約200ノードのモバイルアドホックネットワーク用に設計されており、移動性の非常に高いレートでさえもうまく動作するように設計されています。この文書では、ユニキャストIPv4パケットをルーティングするためのDSRプロトコルの動作を指定します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................5\n2. Assumptions .....................................................7\n3. DSR Protocol Overview ...........................................9\n   3.1. Basic DSR Route Discovery .................................10\n   3.2. Basic DSR Route Maintenance ...............................12\n   3.3. Additional Route Discovery Features .......................14\n        3.3.1. Caching Overheard Routing Information ..............14\n        3.3.2. Replying to Route Requests Using Cached Routes .....15\n        3.3.3. Route Request Hop Limits ...........................16\n   3.4. Additional Route Maintenance Features .....................17\n        3.4.1. Packet Salvaging ...................................17\n        3.4.2. Queued Packets Destined over a Broken Link .........18\n        3.4.3. Automatic Route Shortening .........................19\n        3.4.4. Increased Spreading of Route Error Messages ........20\n   3.5. Optional DSR Flow State Extension .........................20\n        3.5.1. Flow Establishment .................................21\n        3.5.2. Receiving and Forwarding Establishment Packets .....22\n        3.5.3. Sending Packets along Established Flows ............22\n        3.5.4. Receiving and Forwarding Packets Sent along\n               Established Flows ..................................23\n        3.5.5. Processing Route Errors ............................24\n        3.5.6. Interaction with Automatic Route Shortening ........24\n        3.5.7. Loop Detection .....................................25\n        3.5.8. Acknowledgement Destination ........................25\n        3.5.9. Crash Recovery .....................................25\n        3.5.10. Rate Limiting .....................................25\n        3.5.11. Interaction with Packet Salvaging .................26\n4. Conceptual Data Structures .....................................26\n   4.1. Route Cache ...............................................26\n   4.2. Send Buffer ...............................................30\n   4.3. Route Request Table .......................................30\n   4.4. Gratuitous Route Reply Table ..............................31\n   4.5. Network Interface Queue and Maintenance Buffer ............32\n   4.6. Blacklist .................................................33\n5. Additional Conceptual Data Structures for Flow State\n   Extension ......................................................34\n   5.1. Flow Table ................................................34\n   5.2. Automatic Route Shortening Table ..........................35\n   5.3. Default Flow ID Table .....................................36\n6. DSR Options Header Format ......................................36\n   6.1. Fixed Portion of DSR Options Header .......................37\n   6.2. Route Request Option ......................................40\n   6.3. Route Reply Option ........................................42",
      "raw": true
    },
    {
      "indent": 3,
      "text": "   6.4. Route Error Option ........................................44\n        6.4.1. Node Unreachable Type-Specific Information .........46\n        6.4.2. Flow State Not Supported Type-Specific\n               Information ........................................46\n        6.4.3. Option Not Supported Type-Specific Information .....46\n   6.5. Acknowledgement Request Option ............................46\n   6.6. Acknowledgement Option ....................................47\n   6.7. DSR Source Route Option ...................................48\n   6.8. Pad1 Option ...............................................50\n   6.9. PadN Option ...............................................50\n7. Additional Header Formats and Options for Flow State\n   Extension ......................................................51\n   7.1. DSR Flow State Header .....................................52\n   7.2. New Options and Extensions in DSR Options Header ..........52\n        7.2.1. Timeout Option .....................................52\n        7.2.2. Destination and Flow ID Option .....................53\n   7.3. New Error Types for Route Error Option ....................54\n        7.3.1. Unknown Flow Type-Specific Information .............54\n        7.3.2. Default Flow Unknown Type-Specific Information .....55\n   7.4. New Acknowledgement Request Option Extension ..............55\n        7.4.1. Previous Hop Address Extension .....................55\n8. Detailed Operation .............................................56\n   8.1. General Packet Processing .................................56\n        8.1.1. Originating a Packet ...............................56\n        8.1.2. Adding a DSR Options Header to a Packet ............57\n        8.1.3. Adding a DSR Source Route Option to a Packet .......57\n        8.1.4. Processing a Received Packet .......................58\n        8.1.5. Processing a Received DSR Source Route Option ......60\n        8.1.6. Handling an Unknown DSR Option .....................63\n   8.2. Route Discovery Processing ................................64\n        8.2.1. Originating a Route Request ........................65\n        8.2.2. Processing a Received Route Request Option .........66\n        8.2.3. Generating a Route Reply Using the Route Cache .....68\n        8.2.4. Originating a Route Reply ..........................71\n        8.2.5. Preventing Route Reply Storms ......................72\n        8.2.6. Processing a Received Route Reply Option ...........74\n   8.3. Route Maintenance Processing ..............................74\n        8.3.1. Using Link-Layer Acknowledgements ..................75\n        8.3.2. Using Passive Acknowledgements .....................76\n        8.3.3. Using Network-Layer Acknowledgements ...............77\n        8.3.4. Originating a Route Error ..........................80\n        8.3.5. Processing a Received Route Error Option ...........81\n        8.3.6. Salvaging a Packet .................................82\n   8.4. Multiple Network Interface Support ........................84\n   8.5. IP Fragmentation and Reassembly ...........................84\n   8.6. Flow State Processing .....................................85\n        8.6.1. Originating a Packet ...............................85\n        8.6.2. Inserting a DSR Flow State Header ..................88",
      "raw": true
    },
    {
      "indent": 3,
      "text": "        8.6.3. Receiving a Packet .................................88\n        8.6.4. Forwarding a Packet Using Flow IDs .................93\n        8.6.5. Promiscuously Receiving a Packet ...................93\n        8.6.6. Operation Where the Layer below DSR\n               Decreases the IP TTL ...............................94\n        8.6.7. Salvage Interactions with DSR ......................94\n9. Protocol Constants and Configuration Variables .................95\n10. IANA Considerations ...........................................96\n11. Security Considerations .......................................96\nAppendix A. Link-MaxLife Cache Description ........................97\nAppendix B. Location of DSR in the ISO Network Reference Model ....99\nAppendix C. Implementation and Evaluation Status .................100\nAcknowledgements .................................................101\nNormative References .............................................102\nInformative References ...........................................102",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "The Dynamic Source Routing protocol (DSR) [JOHNSON94, JOHNSON96a] is a simple and efficient routing protocol designed specifically for use in multi-hop wireless ad hoc networks of mobile nodes. Using DSR, the network is completely self-organizing and self-configuring, requiring no existing network infrastructure or administration. Network nodes cooperate to forward packets for each other to allow communication over multiple \"hops\" between nodes not directly within wireless transmission range of one another. As nodes in the network move about or join or leave the network, and as wireless transmission conditions such as sources of interference change, all routing is automatically determined and maintained by the DSR routing protocol. Since the number or sequence of intermediate hops needed to reach any destination may change at any time, the resulting network topology may be quite rich and rapidly changing.",
      "ja": "ダイナミックソースルーティングプロトコル（DSR）JOHNSON94、JOHNSON96a】移動ノードのマルチホップ無線アドホックネットワークで使用するために特別に設計さ簡単かつ効率的なルーティングプロトコルです。 DSRを使用して、ネットワークには、既存のネットワークインフラストラクチャや管理を必要としない、完全に自己組織化と自己構成です。ネットワークノードは、複数を介した通信を可能にするために相互にパケットを転送するように協働する互いの無線伝送範囲内で直接ノードではないとの間で「ホップ」。参加したり、ネットワークを離れ、そしてそのような干渉の変化の源としての無線送信条件として又は約ネットワークの移動のノードとして、すべてのルーティングが自動的に決定され、DSRルーティングプロトコルによって維持されます。任意の宛先に到達するために必要な中間ホップ数や配列は任意の時点で変更することができるので、結果として得られるネットワークトポロジーは非常に豊富で、急速に変化してもよいです。"
    },
    {
      "indent": 3,
      "text": "In designing DSR, we sought to create a routing protocol that had very low overhead yet was able to react very quickly to changes in the network. The DSR protocol provides highly reactive service in order to help ensure successful delivery of data packets in spite of node movement or other changes in network conditions.",
      "ja": "DSRの設計では、我々は非常に低いオーバーヘッドを持っていた、まだネットワークの変化に非常に迅速に反応することができましたルーティングプロトコルを作成しようとしました。 DSRプロトコルは、ノードの移動やネットワークの状態の他の変化にもかかわらず、データ・パケットの配信の成功を確保するために、反応性の高いサービスを提供します。"
    },
    {
      "indent": 3,
      "text": "The DSR protocol is composed of two main mechanisms that work together to allow the discovery and maintenance of source routes in the ad hoc network:",
      "ja": "DSRプロトコルは、アドホックネットワーク内のソースルートの発見及び維持を可能にするために一緒に働く二つの主要なメカニズムで構成されています。"
    },
    {
      "indent": 3,
      "text": "- Route Discovery is the mechanism by which a node S wishing to send a packet to a destination node D obtains a source route to D. Route Discovery is used only when S attempts to send a packet to D and does not already know a route to D.",
      "ja": " - ルート探索は、宛先ノードDにパケットを送信することを望むノードSは、SがDにパケットを送信しようとする場合にのみ使用されているD.経路探索にソースルートを取得し、既にへのルートを知らないれる機構でありますD."
    },
    {
      "indent": 3,
      "text": "- Route Maintenance is the mechanism by which node S is able to detect, while using a source route to D, if the network topology has changed such that it can no longer use its route to D because a link along the route no longer works. When Route Maintenance indicates a source route is broken, S can attempt to use any other route it happens to know to D, or it can invoke Route Discovery again to find a new route for subsequent packets to D. Route Maintenance for this route is used only when S is actually sending packets to D.",
      "ja": " - ルートメンテナンスネットワークトポロジは、ルートに沿ったリンクは、もはや動作するため、それがもはやDへの経路を使用することができないように変更された場合、Dのソースルートを使用している間、ノードSは、検出することができるされる機構です。ルートメンテナンスソース経路が破壊されていることを示す場合、Sは、Dに知ることが起こる他の経路を使用することを試みることができ、またはこのルートを使用することがD.経路維持に後続のパケットのための新たなルートを見つけるために再度経路探索を呼び出すことができSは、実際にはD.にパケットを送信しているときにのみ"
    },
    {
      "indent": 3,
      "text": "In DSR, Route Discovery and Route Maintenance each operate entirely \"on demand\". In particular, unlike other protocols, DSR requires no periodic packets of any kind at any layer within the network. For example, DSR does not use any periodic routing advertisement, link status sensing, or neighbor detection packets and does not rely on these functions from any underlying protocols in the network. This entirely on-demand behavior and lack of periodic activity allows the number of overhead packets caused by DSR to scale all the way down to zero, when all nodes are approximately stationary with respect to each other and all routes needed for current communication have already been discovered. As nodes begin to move more or as communication patterns change, the routing packet overhead of DSR automatically scales to only what is needed to track the routes currently in use. Network topology changes not affecting routes currently in use are ignored and do not cause reaction from the protocol.",
      "ja": "DSRでは、経路探索やルートメンテナンス、それぞれが「オンデマンド」完全に動作します。具体的には、他のプロトコルとは異なり、DSRは、ネットワーク内のいずれの層にいかなる種類の周期的なパケットを必要としません。例えば、DSRは、任意の周期のルーティング広告、リンク状態検出、またはネイバー検出パケットを使用していないと、ネットワーク内の任意の基礎となるプロトコルからこれらの機能に依存しません。この完全にオンデマンド動作及び周期活性の欠如は、すべてのノードが互いに対してほぼ静止していると現在の通信に必要なすべてのルートがすでにされている場合DSRによって引き起こされるオーバーヘッドパケットの数は、ゼロまですべての方法を拡張することを可能にします発見されました。ノードがより移動し始めるように、または通信パターンが変化するにつれて、DSRのルーティングパケットのオーバーヘッドが自動的に現在使用中のルートを追跡するために必要とされるもののみに比例します。現在使用中のルートに影響を与えていないネットワークトポロジの変更は無視され、プロトコルからの反応を引き起こしません。"
    },
    {
      "indent": 3,
      "text": "All state maintained by DSR is \"soft state\" [CLARK88], in that the loss of any state will not interfere with the correct operation of the protocol; all state is discovered as needed and can easily and quickly be rediscovered if needed after a failure without significant impact on the protocol. This use of only soft state allows the routing protocol to be very robust to problems such as dropped or delayed routing packets or node failures. In particular, a node in DSR that fails and reboots can easily rejoin the network immediately after rebooting; if the failed node was involved in forwarding packets for other nodes as an intermediate hop along one or more routes, it can also resume this forwarding quickly after rebooting, with no or minimal interruption to the routing protocol.",
      "ja": "DSRによって維持すべての状態がどのような状態の損失は、プロトコルの正しい動作を妨害しないという点で、[CLARK88「ソフト状態」です。すべての状態は、必要に応じて発見され、プロトコルに大きな影響を与えることなく、障害が発生した後、必要に応じて簡単かつ迅速に再発見することができます。のみ柔らかい状態のこの使用は、ルーティングプロトコルは、ドロップ又は遅延ルーティングパケットまたはノード障害などの問題に対して非常に堅牢にすることができます。具体的には、失敗し、再起動を容易に再起動した直後にネットワークに再加入することができるDSR内のノード。障害が発生したノードは、1つの以上のルートに沿った中間ホップのような他のノードのパケット転送に関与している場合、それはまた、ルーティングプロトコルにないか又は最小限の中断で、再起動後すぐにこの転送を再開することができます。"
    },
    {
      "indent": 3,
      "text": "In response to a single Route Discovery (as well as through routing information from other packets overheard), a node may learn and cache multiple routes to any destination. This support for multiple routes allows the reaction to routing changes to be much more rapid, since a node with multiple routes to a destination can try another cached route if the one it has been using should fail. This caching of multiple routes also avoids the overhead of needing to perform a new Route Discovery each time a route in use breaks. The sender of a packet selects and controls the route used for its own packets, which, together with support for multiple routes, also allows features such as load balancing to be defined. In addition, all routes used are easily guaranteed to be loop-free, since the sender can avoid duplicate hops in the routes selected.",
      "ja": "単一経路探索（ならびに介して耳に他のパケットからルーティング情報）に応じて、ノードは、任意の宛先への複数のルートを学習し、キャッシュすることができます。それが使用されたものに障害が発生した場合、宛先に複数のルートを持つノードが別のキャッシュされたルートを試すことができるので、複数のルートのこのサポートは、ルーティングの変更への反応ははるかに急速にすることができます。複数のルートのこのキャッシュは、新しい経路探索たび使用休憩中にルートを実行する必要のオーバーヘッドを回避できます。パケットの送信元は、複数の経路をサポートし、また、そのような負荷を定義するバランシングなどの機能を可能にする、独自のパケットのために使用されるルートを選択し、制御します。送信者が選択されたルートに重複ホップを避けることができるので、また、使用されているすべてのルートが簡単に、ループフリーであることが保証されています。"
    },
    {
      "indent": 3,
      "text": "The operation of both Route Discovery and Route Maintenance in DSR are designed to allow unidirectional links and asymmetric routes to be supported. In particular, as noted in Section 2, in wireless networks, it is possible that a link between two nodes may not work equally well in both directions, due to differing transmit power levels or sources of interference.",
      "ja": "DSRにおける経路探索および経路維持の両方の動作は単方向リンクと非対称ルートをサポートできるように設計されています。具体的には、第2節で述べたように、無線ネットワークでは、2つのノード間のリンクは、干渉の送信電力レベルまたはソース異なるによる両方向に等しく良好に動作しない可能性があります。"
    },
    {
      "indent": 3,
      "text": "It is possible to interface a DSR network with other networks, external to this DSR network. Such external networks may, for example, be the Internet or may be other ad hoc networks routed with a routing protocol other than DSR. Such external networks may also be other DSR networks that are treated as external networks in order to improve scalability. The complete handling of such external networks is beyond the scope of this document. However, this document specifies a minimal set of requirements and features necessary to allow nodes only implementing this specification to interoperate correctly with nodes implementing interfaces to such external networks.",
      "ja": "このDSRネットワークの外部の他のネットワークとのDSRネットワークをインタフェースすることが可能です。そのような外部ネットワークは、例えば、インターネットであってもよく、またはDSR以外のルーティングプロトコルとルーティング他のアドホックネットワークであってもよいです。そのような外部ネットワークはまた、スケーラビリティを向上させるために外部ネットワークとして扱われ、他のDSRのネットワークであってもよいです。そのような外部ネットワークの完全な取り扱いは、このドキュメントの範囲を超えています。しかし、この文書は、要件の最小セットを指定してのみ、この仕様を実装するノードは、外部ネットワークへのインタフェースを実装するノードと正しく相互運用できるようにする必要があります。"
    },
    {
      "indent": 3,
      "text": "This document specifies the operation of the DSR protocol for routing unicast IPv4 packets in multi-hop wireless ad hoc networks. Advanced, optional features, such as Quality of Service (QoS) support and efficient multicast routing, and operation of DSR with IPv6 [RFC2460], will be covered in other documents. The specification of DSR in this document provides a compatible base on which such features can be added, either independently or by integration with the DSR operation specified here. As described in Appendix C, the design of DSR has been extensively studied through detailed simulations and testbed implementation and demonstration; this document encourages additional implementation and experimentation with the protocol.",
      "ja": "この文書は、マルチホップ無線アドホックネットワークにおいてユニキャストIPv4パケットをルーティングするためのDSRプロトコルの動作を指定します。高度な、そのようなサービスの品質（QoS）をサポートし、効率的なマルチキャストルーティング、およびIPv6でDSRの動作とオプション機能、[RFC2460]は、他の文書で説明します。本書でDSRの仕様は、このような特徴は、単独またはここで指定されたDSR操作と統合することにより、添加可能な互換性のある基盤を提供します。付録Cに記載されているように、DSRの設計は、広範囲の詳細なシミュレーションとテストベッドの実装と実証を通して研究されてきました。このドキュメントは、プロトコルを追加実装し、実験を奨励しています。"
    },
    {
      "indent": 3,
      "text": "The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "キーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\" は、 \"NOT SHALL\" \"ものと\" この文書では、 \"SHOULD\"、 \"推奨\" \"NOT SHOULD\"、 \"MAY\"、 \"OPTIONAL\" はにありますRFC 2119 [RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Assumptions",
      "section_title": true,
      "ja": "2.仮定"
    },
    {
      "indent": 3,
      "text": "As described here, the DSR protocol is designed mainly for mobile ad hoc networks of up to about two hundred nodes and is designed to work well even with very high rates of mobility. Other protocol features and enhancements that may allow DSR to scale to larger networks are outside the scope of this document.",
      "ja": "ここで説明したように、DSRプロトコルは、主に、最大約200ノードのモバイルアドホックネットワーク用に設計されており、移動性の非常に高いレートでさえもうまく動作するように設計されています。 DSRは、大規模なネットワークに拡張することを可能にする他のプロトコル機能と拡張機能は、この文書の範囲外です。"
    },
    {
      "indent": 3,
      "text": "We assume in this document that all nodes wishing to communicate with other nodes within the ad hoc network are willing to participate fully in the protocols of the network. In particular, each node participating in the ad hoc network SHOULD also be willing to forward packets for other nodes in the network.",
      "ja": "私たちは、アドホックネットワーク内の他のノードとの通信を希望するすべてのノードがネットワークのプロトコルに完全に参加する意思があることを、この文書で前提としています。特に、アドホックネットワークに参加する各ノードは、ネットワーク内の他のノードのためにパケットを転送するために喜んであるべきです。"
    },
    {
      "indent": 3,
      "text": "The diameter of an ad hoc network is the minimum number of hops necessary for a packet to reach from any node located at one extreme edge of the ad hoc network to another node located at the opposite extreme. We assume that this diameter will often be small (e.g., perhaps 5 or 10 hops), but it may often be greater than 1.",
      "ja": "アドホックネットワークの直径は、反対の極端に位置する別のノードにアドホックネットワークの一の極端縁に位置する任意のノードから到達するパケットのために必要なホップの最小数です。我々は、この直径は、多くの場合（例えば、恐らく5つのまたは10ホップ）小さくなると仮定し、それは多くの場合、1より大きくてもよいです。"
    },
    {
      "indent": 3,
      "text": "Packets may be lost or corrupted in transmission on the wireless network. We assume that a node receiving a corrupted packet can detect the error, such as through a standard link-layer checksum or Cyclic Redundancy Check (CRC), and discard the packet.",
      "ja": "パケットは、ワイヤレスネットワーク上の伝送に失われたり、壊れている可能性があります。我々は、破損したパケットを受信したノードは、標準的なリンク層チェックサムまたは巡回冗長検査（CRC）を介してのように、エラーを検出し、パケットを廃棄することができると仮定する。"
    },
    {
      "indent": 3,
      "text": "Nodes within the ad hoc network MAY move at any time without notice and MAY even move continuously, but we assume that the speed with which nodes move is moderate with respect to the packet transmission latency and wireless transmission range of the particular underlying network hardware in use. In particular, DSR can support very rapid rates of arbitrary node mobility, but we assume that nodes do not continuously move so rapidly as to make the flooding of every individual data packet the only possible routing protocol.",
      "ja": "アドホックネットワーク内のノードは、予告なしにいつでも移動することができ、さらに連続的に移動することができるが、我々は、移動ノードする速度は、使用中の特定の基本的なネットワークハードウェアのパケット伝送待ち時間および無線伝送範囲に対して中程度であると仮定します。特に、DSRは、任意のノードの移動性の非常に急速なレートをサポートすることができますが、我々はすべての個々のデータパケットのみ可能ルーティングプロトコルのフラッディングを行うこととして、ノードが継続的に急速に移動しないことを前提としています。"
    },
    {
      "indent": 3,
      "text": "A common feature of many network interfaces, including most current LAN hardware for broadcast media such as wireless, is the ability to operate the network interface in \"promiscuous\" receive mode. This mode causes the hardware to deliver every received packet to the network driver software without filtering based on link-layer destination address. Although we do not require this facility, some of our optimizations can take advantage of its availability. Use of promiscuous mode does increase the software overhead on the CPU, but we believe that wireless network speeds and capacity are more the inherent limiting factors to performance in current and future systems; we also believe that portions of the protocol are suitable for implementation directly within a programmable network interface unit to avoid this overhead on the CPU [JOHNSON96a]. Use of promiscuous mode may also increase the power consumption of the network interface hardware, depending on the design of the receiver hardware, and in such cases, DSR can easily be used without the optimizations that depend on promiscuous receive mode or can be programmed to only periodically switch the interface into promiscuous mode. Use of promiscuous receive mode is entirely optional.",
      "ja": "このような無線などの放送メディアの最新のLANハードウェアを含む多くのネットワークインターフェイスの共通の特徴は、「無差別」モードを受け取るネットワークインタフェースを操作する能力です。このモードでは、リンク層の宛先アドレスに基づいてフィルタリングすることなく、ネットワーク・ドライバ・ソフトウェアへのすべての受信したパケットを提供するために、ハードウェアの原因となります。私たちはこの機能を必要としませんが、私たちの最適化のいくつかは、その可用性を利用することができます。プロミスキャスモードを使用すると、CPU上でソフトウェアのオーバーヘッドを増加させないが、我々は、ワイヤレスネットワーク速度と容量は、現在および将来のシステムのパフォーマンスに固有の制限要因よりあると信じています。我々はまた、プロトコルの部分がCPU [JOHNSON96a]でこのオーバーヘッドを回避するために、直接プログラム可能なネットワークインターフェースユニット内の実装に適していると考えています。無差別モードの使用はまた、受信機ハードウェアの設計に応じて、ネットワーク・インターフェース・ハードウェアの電力消費を増加させることができる、そのような場合には、DSRを容易に無差別に依存して最適化することなく使用することができる受信モードのみにプログラムすることができます定期的に無差別モードにインタフェースを切り替えます。無差別の使用は、モードは完全にオプションで受け取ります。"
    },
    {
      "indent": 3,
      "text": "Wireless communication ability between any pair of nodes may at times not work equally well in both directions, due, for example, to transmit power levels or sources of interference around the two nodes [BANTZ94, LAUER95]. That is, wireless communications between each pair of nodes will in many cases be able to operate bidirectionally, but at times the wireless link between two nodes may be only unidirectional, allowing one node to successfully send packets to the other while no communication is possible in the reverse direction. Some Medium Access Control (MAC) protocols, however, such as MACA [KARN90], MACAW [BHARGHAVAN94], or IEEE 802.11 [IEEE80211], limit unicast data packet transmission to bidirectional links, due to the required bidirectional exchange of request to send (RTS) and clear to send (CTS) packets in these protocols and to the link-layer acknowledgement feature in IEEE 802.11. When used on top of MAC protocols such as these, DSR can take advantage of additional optimizations, such as the ability to reverse a source route to obtain a route back to the origin of the original route.",
      "ja": "時間に両方向に等しく良好に動作しない可能性があり、ノードの任意の対の間の無線通信の能力は、例えば、二つのノード[BANTZ94、LAUER95]周りの干渉の電力レベルまたはソースを送信します。すなわち、ノードの各対の間の無線通信は、多くの場合、双方向に動作することができるであろうが、しかし時間に2つのノード間の無線リンクには、通信が可能であるしない、一方のノードが正常に相互にパケットを送信することを可能にする、一方向のみであってもよいです逆方向。いくつかの媒体アクセス制御（MAC）プロトコル、しかし、そのようなによる送信要求の必要な双方向の交換にMACA [KARN90]、MACAW [BHARGHAVAN94]、またはIEEE 802.11 [IEEE80211]、双方向リンクに制限ユニキャストデータパケットを送信、など（ RTS）と、これらのプロトコルにし、IEEE 802.11でリンク層確認応答機能に（CTS）パケットを送信することが明らか。このようなMACプロトコルの上で使用される場合、DSRは、元の経路の原点までの経路を取得するためにソースルートを逆転させる能力などの追加の最適化の利点を取ることができます。"
    },
    {
      "indent": 3,
      "text": "The IP address used by a node using the DSR protocol MAY be assigned by any mechanism (e.g., static assignment or use of Dynamic Host Configuration Protocol (DHCP) for dynamic assignment [RFC2131]), although the method of such assignment is outside the scope of this specification.",
      "ja": "そのような割り当ての方法が範囲外であるが、DSRプロトコルを使用してノードによって使用されるIPアドレスは、任意の機構（動的割り当ての動的ホスト構成プロトコル（DHCP）の、例えば、静的な割り当て、または使用[RFC2131]）によって割り当てられてもよいですこの仕様の。"
    },
    {
      "indent": 3,
      "text": "A routing protocol such as DSR chooses a next-hop for each packet and provides the IP address of that next-hop. When the packet is transmitted, however, the lower-layer protocol often has a separate, MAC-layer address for the next-hop node. DSR uses the Address Resolution Protocol (ARP) [RFC826] to translate from next-hop IP addresses to next-hop MAC addresses. In addition, a node MAY add an entry to its ARP cache based on any received packet, when the IP address and MAC address of the transmitting node are available in the packet; for example, the IP address of the transmitting node is present in a Route Request option (in the Address list being accumulated) and any packets containing a source route. Adding entries to the ARP cache in this way avoids the overhead of ARP in most cases.",
      "ja": "このようなDSRのようなルーティングプロトコルは、各パケットのための次のホップを選択し、その次ホップのIPアドレスを提供します。パケットが送信されると、しかし、下位層プロトコルは、多くの場合、次ホップノードのための別個の、MAC層アドレスを有します。 DSRは、ネクストホップのMACアドレスをネクストホップIPアドレスから変換するために、[RFC826]アドレス解決プロトコル（ARP）を使用しています。加えて、ノードは、送信ノードのIPアドレスとMACアドレスがパケットに利用可能である任意の受信したパケットに基づいて、そのARPキャッシュにエントリを追加するかもしれません。例えば、送信ノードのIPアドレスは、（蓄積されるアドレスリストに）経路要求オプションとソース経路を含む任意のパケットの中に存在します。このように、ARPキャッシュにエントリを追加すると、ほとんどの場合、ARPのオーバーヘッドを回避できます。"
    },
    {
      "indent": 0,
      "text": "3. DSR Protocol Overview",
      "section_title": true,
      "ja": "3. DSRプロトコルの概要"
    },
    {
      "indent": 3,
      "text": "This section provides an overview of the operation of the DSR protocol. The basic version of DSR uses explicit \"source routing\", in which each data packet sent carries in its header the complete, ordered list of nodes through which the packet will pass. This use of explicit source routing allows the sender to select and control the routes used for its own packets, supports the use of multiple routes to any destination (for example, for load balancing), and allows a simple guarantee that the routes used are loop-free. By including this source route in the header of each data packet, other nodes forwarding or overhearing any of these packets can also easily cache this routing information for future use. Section 3.1 describes this basic operation of Route Discovery, Section 3.2 describes basic Route Maintenance, and Sections 3.3 and 3.4 describe additional features of these two parts of DSR's operation. Section 3.5 then describes an optional, compatible extension to DSR, known as \"flow state\", that allows the routing of most packets without an explicit source route header in the packet, while the fundamental properties of DSR's operation are preserved.",
      "ja": "このセクションでは、DSRプロトコルの動作の概要を提供します。 DSRの基本的なバージョンは、送信される各データパケットは、そのヘッダに完全を担持した明示的な「ソースルーティング」を使用して、パケットが通過するノードのリストを命じました。明示的なソースルーティングの使用は、送信者が自身のパケットのために使用される経路を選択して制御することを可能にする（例えば、ロードバランシングのために）任意の宛先への複数の経路の使用をサポートし、そして使用される経路がループしているという単純な保証を可能にします-自由。各データ・パケットのヘッダ内のこのソース経路を含むことにより、これらのパケットのいずれかを転送または傍受他のノードも簡単に将来の使用のために、このルーティング情報をキャッシュすることができます。 3.1節では、3.2節は、基本的なルートのメンテナンスを説明し、経路探索のこの基本的な操作を説明し、セクション3.3と3.4は、DSRの操作のこれら二つの部分の追加機能について説明します。セクション3.5は、次いで、DSRの操作の基本的な特性は保持している間、パケット内の明示的なソースルートヘッダなしで最もパケットのルーティングを可能にする「流動状態」として知らDSRオプション、互換性の拡張を記述しています。"
    },
    {
      "indent": 0,
      "text": "3.1. Basic DSR Route Discovery",
      "section_title": true,
      "ja": "3.1。基本DSR経路探索"
    },
    {
      "indent": 3,
      "text": "When some source node originates a new packet addressed to some destination node, the source node places in the header of the packet a \"source route\" giving the sequence of hops that the packet is to follow on its way to the destination. Normally, the sender will obtain a suitable source route by searching its \"Route Cache\" of routes previously learned; if no route is found in its cache, it will initiate the Route Discovery protocol to dynamically find a new route to this destination node. In this case, we call the source node the \"initiator\" and the destination node the \"target\" of the Route Discovery.",
      "ja": "いくつかのソースノードが発信する場合、新しいパケットは、いくつかの宛先ノード宛のパケットは、宛先への途中に従うことであるホップのシーケンスを与えるパケットA「送信元経路」のヘッダ内のソース・ノードの場所。通常、送信者は、以前に学習したルートのその「ルートキャッシュ」を検索して、適切なソースルートを取得します。何のルートがそのキャッシュ内に見つからない場合、それは動的にこの宛先ノードへの新しいルートを見つけるために、経路探索プロトコルを開始します。この場合、我々は、経路探索の「ターゲット」「イニシエータ」と宛先ノードソースノードを呼び出します。"
    },
    {
      "indent": 3,
      "text": "For example, suppose a node A is attempting to discover a route to node E. The Route Discovery initiated by node A in this example would proceed as follows:",
      "ja": "例えば、ノードAは、以下のように進行する。この例では、ノードAによって開始E.ザ経路探索ノードへの経路を発見しようとしていると仮定する。"
    },
    {
      "indent": 9,
      "text": "   ^    \"A\"    ^   \"A,B\"   ^  \"A,B,C\"  ^ \"A,B,C,D\"\n   |   id=2    |   id=2    |   id=2    |   id=2\n+-----+     +-----+     +-----+     +-----+     +-----+\n|  A  |---->|  B  |---->|  C  |---->|  D  |---->|  E  |\n+-----+     +-----+     +-----+     +-----+     +-----+\n   |           |           |           |\n   v           v           v           v",
      "raw": true
    },
    {
      "indent": 3,
      "text": "To initiate the Route Discovery, node A transmits a \"Route Request\" as a single local broadcast packet, which is received by (approximately) all nodes currently within wireless transmission range of A, including node B in this example. Each Route Request identifies the initiator and target of the Route Discovery, and also contains a unique request identification (2, in this example), determined by the initiator of the Request. Each Route Request also contains a record listing the address of each intermediate node through which this particular copy of the Route Request has been forwarded. This route record is initialized to an empty list by the initiator of the Route Discovery. In this example, the route record initially lists only node A.",
      "ja": "経路探索を開始するために、ノードAは、現在、この例では、ノードBを含むAの無線伝送範囲内のすべてのノード（約）によって受信される単一のローカルブロードキャストパケットとして「ルート要求」を送信します。各ルート要求は、経路探索のイニシエータおよびターゲットを識別し、また、要求のイニシエータによって決まる（この例では2）のユニークなリクエスト識別を含んでいます。各ルート要求はまた、ルート・リクエストのこの特定のコピーが転送されてきた、それを通して各中間ノードのアドレスをリストレコードが含まれています。このルートレコードは、経路探索のイニシエータによって、空のリストに初期化されます。この例では、ルート・レコードは、当初はノードAを示しています"
    },
    {
      "indent": 3,
      "text": "When another node receives this Route Request (such as node B in this example), if it is the target of the Route Discovery, it returns a \"Route Reply\" to the initiator of the Route Discovery, giving a copy of the accumulated route record from the Route Request; when the initiator receives this Route Reply, it caches this route in its Route Cache for use in sending subsequent packets to this destination.",
      "ja": "それは経路探索の対象である場合、他のノードは、（例えば、この例では、ノードBなど）は、このルート要求を受信すると、蓄積されたルートレコードのコピーを与え、経路探索の開始に「ルート応答」を返しますルート要求から、イニシエータは、このルート応答を受信すると、この宛先に後続のパケットの送信に使用するために、そのルートキャッシュにこのルートをキャッシュします。"
    },
    {
      "indent": 3,
      "text": "Otherwise, if this node receiving the Route Request has recently seen another Route Request message from this initiator bearing this same request identification and target address, or if this node's own address is already listed in the route record in the Route Request, this node discards the Request. (A node considers a Request recently seen if it still has information about that Request in its Route Request Table, which is described in Section 4.3.) Otherwise, this node appends its own address to the route record in the Route Request and propagates it by transmitting it as a local broadcast packet (with the same request identification). In this example, node B broadcast the Route Request, which is received by node C; nodes C and D each also, in turn, broadcast the Request, resulting in receipt of a copy of the Request by node E.",
      "ja": "そうでなければ、ルート要求を受信し、このノードは、最近、この同じ要求識別およびターゲットアドレスを担持するこのイニシエータから別の経路要求メッセージを見ている、またはこのノード自身のアドレスが既にルート要求にルートレコードにリストされている場合、このノードは破棄場合要求。 （ノードは、それがまだセクション4.3に記載され、その経路要求表にその要求に関する情報を持っている場合、最近見た要求を考慮している。）それ以外の場合は、このノードがルート要求の経路レコードに自身のアドレスを付加してそれを伝播します（同じリクエスト識別を有する）ローカルブロードキャストパケットとして送信します。この例では、ノードBは、ノードCによって受信されたルート要求を、ブロードキャストします。ノードC及びDは、それぞれはまた、今度は、ノードEによる要求のコピーを受信し、その結果、要求のブロードキャスト"
    },
    {
      "indent": 3,
      "text": "In returning the Route Reply to the initiator of the Route Discovery, such as in this example, node E replying back to node A, node E will typically examine its own Route Cache for a route back to A and, if one is found, will use it for the source route for delivery of the packet containing the Route Reply. Otherwise, E SHOULD perform its own Route Discovery for target node A, but to avoid possible infinite recursion of Route Discoveries, it MUST in this case piggyback this Route Reply on the packet containing its own Route Request for A. It is also possible to piggyback other small data packets, such as a TCP SYN packet [RFC793], on a Route Request using this same mechanism.",
      "ja": "復帰ルートは、1つが見つかった場合、ノードAに戻す応答ノードEは、ノードEは、典型的には、あろうバックAへのルートのために独自のルートキャッシュを検査します。この例のように、経路探索の開始に返信経路応答を含むパケットの送達のためのソースルートのためにそれを使用。そうでなければ、Eは、ターゲット・ノードAのために、独自の経路探索を行う必要がありますが、ルート発見の可能性無限の再帰を避けるために、それはこの場合のピギーバックこのルートではピギーバックすることも可能であるA.のために、独自のルート要求を含むパケットに返信しなければなりませんこの同じメカニズムを使用してルート要求に例えばTCP SYNパケットのような他の小さなデータパケット、[RFC793]。"
    },
    {
      "indent": 3,
      "text": "Node E could instead simply reverse the sequence of hops in the route record that it is trying to send in the Route Reply and use this as the source route on the packet carrying the Route Reply itself. For MAC protocols, such as IEEE 802.11, that require a bidirectional frame exchange for unicast packets as part of the MAC protocol [IEEE80211], the discovered source route MUST be reversed in this way to return the Route Reply, since this route reversal tests the discovered route to ensure that it is bidirectional before the Route Discovery initiator begins using the route. This route reversal also avoids the overhead of a possible second Route Discovery.",
      "ja": "ノードEは、代わりに、単に返信して自分自身を返信ルートを運ぶパケットのソースルートとしてこれを使用するルートに送信しようとしているルート・レコード内のホップの順序を逆転できます。このルート反転がテスト以来[IEEE80211】MACプロトコルの一部として、ユニキャストパケットの双方向のフレーム交換を必要とするようなIEEE 802.11のようなMACプロトコルについては、発見されたソースルートは、ルート応答を返すためにこのように反転されなければなりません経路探索イニシエータは、ルートの使用を開始する前に、それが双方向であることを確認するためにルートを発見しました。この経路の逆転も可能第2の経路探索のオーバーヘッドを回避します。"
    },
    {
      "indent": 3,
      "text": "When initiating a Route Discovery, the sending node saves a copy of the original packet (that triggered the discovery) in a local buffer called the \"Send Buffer\". The Send Buffer contains a copy of each packet that cannot be transmitted by this node because it does not yet have a source route to the packet's destination. Each packet in the Send Buffer is logically associated with the time that it was placed into the Send Buffer and is discarded after residing in the Send Buffer for some timeout period SendBufferTimeout; if necessary for preventing the Send Buffer from overflowing, a FIFO or other replacement strategy MAY also be used to evict packets even before they expire.",
      "ja": "経路探索を開始すると、送信ノードは、「バッファの送信」と呼ばれるローカルバッファに（発見のきっかけという）元のパケットのコピーを保存します。送信バッファは、それがまだパケットの宛先への送信元ルートを持っていないため、このノードによって送信することができない、各パケットのコピーが含まれています。送信バッファ内の各パケットは、論理的に、それが送信バッファに入れ、いくつかのタイムアウト期間SendBufferTimeoutためのバッファを送信に常駐後に廃棄される時間に関連しています。オーバーフローバッファを送る防止するため、必要に応じて、FIFOまたは他の代替戦略はまた、彼らは有効期限が切れる前であっても、パケットを立ち退かせるために使用されるかもしれません。"
    },
    {
      "indent": 3,
      "text": "While a packet remains in the Send Buffer, the node SHOULD occasionally initiate a new Route Discovery for the packet's destination address. However, the node MUST limit the rate at which such new Route Discoveries for the same address are initiated (as described in Section 4.3), since it is possible that the destination node is not currently reachable. In particular, due to the limited wireless transmission range and the movement of the nodes in the network, the network may at times become partitioned, meaning that there is currently no sequence of nodes through which a packet could be forwarded to reach the destination. Depending on the movement pattern and the density of nodes in the network, such network partitions may be rare or common.",
      "ja": "パケットが送信バッファに残っている間、ノードは時折、パケットの宛先アドレスのための新しい経路探索を開始すべきです。宛先ノードが現在到達できない可能性があるので、ノードは、（第4.3節に記載のように）同じアドレスに対する新たなルート発見が開始される速度を制限する必要があります。特に、により制限された無線送信範囲及びネットワーク内のノードの移動に、ネットワークは、時間にパケットが宛先に到達するために転送することができ、それを通してノードのない配列が現在存在しないことを意味し、分配なることがあります。移動パターン、ネットワーク内のノード密度に応じて、そのようなネットワーク・パーティションは稀または共通であってもよいです。"
    },
    {
      "indent": 3,
      "text": "If a new Route Discovery was initiated for each packet sent by a node in such a partitioned network, a large number of unproductive Route Request packets would be propagated throughout the subset of the ad hoc network reachable from this node. In order to reduce the overhead from such Route Discoveries, a node SHOULD use an exponential back-off algorithm to limit the rate at which it initiates new Route Discoveries for the same target, doubling the timeout between each successive discovery initiated for the same target. If the node attempts to send additional data packets to this same destination node more frequently than this limit, the subsequent packets SHOULD be buffered in the Send Buffer until a Route Reply is received giving a route to this destination, but the node MUST NOT initiate a new Route Discovery until the minimum allowable interval between new Route Discoveries for this target has been reached. This limitation on the maximum rate of Route Discoveries for the same target is similar to the mechanism required by Internet nodes to limit the rate at which ARP Requests are sent for any single target IP address [RFC1122].",
      "ja": "新しい経路探索は、このような分割されたネットワーク内のノードによって送信されたパケットごとに開始された場合は、非生産的な経路要求パケットの数が多いが、このノードから到達可能なアドホックネットワークのサブセット全体に伝播されます。このような経路発見のオーバーヘッドを低減するために、ノードは、同じターゲットに対して開始各連続発見間タイムアウトを倍加、同じターゲットに対して新しいルート発見を開始する速度を制限するために、指数バックオフアルゴリズムを使用すべきです。ノードがこの限界よりも頻繁に、この同じ宛先ノードに追加のデータパケットを送信しようとすると、後続のパケットは、ルート応答が、この目的地までの経路を与える受信されるまで送信バッファにバッファリングする必要がありますが、ノードが開始してはいけませんこの目標のための新たなルートの発見間の最小許容間隔までの新しい経路探索に達しました。同じ標的に対するルート発見の最大速度に関するこの制限は、ARP要求は、任意の単一のターゲットIPアドレス[RFC1122]のために送信されるレートを制限するために、インターネット・ノードによって必要とされる機構に類似しています。"
    },
    {
      "indent": 0,
      "text": "3.2. Basic DSR Route Maintenance",
      "section_title": true,
      "ja": "3.2。基本DSR経路維持"
    },
    {
      "indent": 3,
      "text": "When originating or forwarding a packet using a source route, each node transmitting the packet is responsible for confirming that data can flow over the link from that node to the next hop. For example, in the situation shown below, node A has originated a packet for node E using a source route through intermediate nodes B, C, and D:",
      "ja": "発信元またはソースルートを使用してパケットを転送する際、パケットを送信する各ノードは、データが次のホップにそのノードからリンクを介して流れることができることを確認する責任があります。例えば、以下に示す状況では、ノードAが中間ノードB、C、及びDを介してソースルートを使用してノードEのパケットを発信しました。"
    },
    {
      "indent": 9,
      "text": "+-----+     +-----+     +-----+     +-----+     +-----+\n|  A  |---->|  B  |---->|  C  |-->? |  D  |     |  E  |\n+-----+     +-----+     +-----+     +-----+     +-----+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "In this case, node A is responsible for the link from A to B, node B is responsible for the link from B to C, node C is responsible for the link from C to D, and node D is responsible for the link from D to E.",
      "ja": "この場合、ノードAは、ノードBは、BからCへのリンクを担当AからBへのリンクを担当しており、ノードCはCからDへのリンクを担当して、ノードDは、Dからのリンクの原因でありますE.へ"
    },
    {
      "indent": 3,
      "text": "An acknowledgement can provide confirmation that a link is capable of carrying data, and in wireless networks, acknowledgements are often provided at no cost, either as an existing standard part of the MAC protocol in use (such as the link-layer acknowledgement frame defined by IEEE 802.11 [IEEE80211]), or by a \"passive acknowledgement\" [JUBIN87] (in which, for example, B confirms receipt at C by overhearing C transmit the packet when forwarding it on to D).",
      "ja": "肯定応答は、によって定義されたリンク層確認応答フレームとして（使用中のMACプロトコルの既存の標準一部としてリンクデータを搬送することが可能であり、無線ネットワークにおいて、肯定応答は、多くの場合無償で提供される確認、のいずれかを提供することができIEEE 802.11 [IEEE80211]）、または「受動的確認応答」によって[JUBIN87（例えば、BはDにそれを転送するときCパケットを送信傍受することによってCで受信を確認しました）。"
    },
    {
      "indent": 3,
      "text": "If a built-in acknowledgement mechanism is not available, the node transmitting the packet can explicitly request that a DSR-specific software acknowledgement be returned by the next node along the route; this software acknowledgement will normally be transmitted directly to the sending node, but if the link between these two nodes is unidirectional (Section 4.6), this software acknowledgement could travel over a different, multi-hop path.",
      "ja": "組み込みの確認応答機構を利用できない場合、パケットを送信するノードは、明示的DSR固有のソフトウェア応答は、ルートに沿って次のノードによって戻されることを要求することができます。このソフトウェア肯定応答は、通常、送信ノードに直接送信されるが、これら2つのノード間のリンクは、一方向（第4.6節）である場合、このソフトウェア応答は異なる、マルチホップ経路上を移動できました。"
    },
    {
      "indent": 3,
      "text": "After an acknowledgement has been received from some neighbor, a node MAY choose not to require acknowledgements from that neighbor for a brief period of time, unless the network interface connecting a node to that neighbor always receives an acknowledgement in response to unicast traffic.",
      "ja": "承認は、いくつかのネイバーから受信された後、ノードは、その隣人にノードを接続するネットワーク・インタフェースは、常にユニキャストトラフィックに応じて、承認を受けない限り、時間の短い期間のためにそのネイバーからの確認応答を必要としないこともできます。"
    },
    {
      "indent": 3,
      "text": "When a software acknowledgement is used, the acknowledgement request SHOULD be retransmitted up to a maximum number of times. A retransmission of the acknowledgement request can be sent as a separate packet, piggybacked on a retransmission of the original data packet, or piggybacked on any packet with the same next-hop destination that does not also contain a software acknowledgement.",
      "ja": "ソフトウェアの承認を使用する場合、承認要求は最大回数まで再送されるべきです。応答要求の再送が別個のパケットとして送信することができ、元のデータパケットの再送にピギーバック、または、ソフトウェアの確認応答を含まない同一の次のホップ先と任意のパケットにピギーバック。"
    },
    {
      "indent": 3,
      "text": "After the acknowledgement request has been retransmitted the maximum number of times, if no acknowledgement has been received, then the sender treats the link to this next-hop destination as currently \"broken\". It SHOULD remove this link from its Route Cache and SHOULD return a \"Route Error\" to each node that has sent a packet routed over that link since an acknowledgement was last received. For example, in the situation shown above, if C does not receive an acknowledgement from D after some number of requests, it would return a Route Error to A, as well as any other node that may have used the link from C to D since C last received an acknowledgement from D. Node A then removes this broken link from its cache; any retransmission of the original packet can be performed by upper layer protocols such as TCP, if necessary. For sending such a retransmission or other packets to this same destination E, if A has in its Route Cache another route to E (for example, from additional Route Replies from its earlier Route Discovery, or from having overheard sufficient routing information from other packets), it can send the packet using the new route immediately. Otherwise, it SHOULD perform a new Route Discovery for this target (subject to the back-off described in Section 3.1).",
      "ja": "肯定応答が受信されていない場合、確認応答要求は、最大回数の再送信された後、送信者は、現在、「壊れた」とこの次ホップ先へのリンクを扱います。それは、そのルートキャッシュからこのリンクを削除する必要がありますし、最後に受信して確認するのでそのリンクを介してルーティングされたパケットを送信した各ノードに「ルートError」を返すべきです。例えば、状況にCがリクエストの一部の数の後にDからの肯定応答を受信しない場合、それはAへのルートエラーを返す、ならびにのでCからDへのリンクを使用している可能性のある他のノードになる、上に示しましたCは、最後のそのキャッシュから、この壊れたリンクを削除D.ノードAから肯定応答を受け取りました。必要に応じて元のパケットの任意の再送信は、TCPなどの上位層プロトコルによって行うことができます。この同じ宛先Eへのそのような再送信または他のパケットを送信するため、AはそのルートキャッシュにEへの別のルートを有する場合（例えば、追加のルートからその以前の経路探索から返信、または他のパケットから十分なルーティング情報を耳にしたから） 、それはすぐに新しいルートを使用してパケットを送信することができます。それ以外の場合は、このターゲット（3.1節に記載のバックオフによる）のために新たな経路探索を実行する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.3. Additional Route Discovery Features",
      "section_title": true,
      "ja": "3.3。追加の経路探索機能"
    },
    {
      "indent": 0,
      "text": "3.3.1. Caching Overheard Routing Information",
      "section_title": true,
      "ja": "3.3.1。耳にルーティング情報をキャッシュ"
    },
    {
      "indent": 3,
      "text": "A node forwarding or otherwise overhearing any packet SHOULD add all usable routing information from that packet to its own Route Cache. The usefulness of routing information in a packet depends on the directionality characteristics of the physical medium (Section 2), as well as on the MAC protocol being used. Specifically, three distinct cases are possible:",
      "ja": "任意のパケットを傍受するノードの転送またはその他は、独自のルートキャッシュにそのパケットのすべての使用可能なルーティング情報を追加する必要があります。パケット内のルーティング情報の有用性は、物理的媒体（第2）の指向特性上、ならびに使用されているMACプロトコルに依存します。具体的には、三つの異なるケースが考えられます。"
    },
    {
      "indent": 3,
      "text": "- Links in the network frequently are capable of operating only unidirectionally (not bidirectionally), and the MAC protocol in use in the network is capable of transmitting unicast packets over unidirectional links.",
      "ja": " - ネットワーク内のリンクは、頻繁にのみ一方向（ない双方向に）動作可能であり、ネットワークで使用されているMACプロトコルは、単方向リンク上でユニキャストパケットを送信することができます。"
    },
    {
      "indent": 3,
      "text": "- Links in the network occasionally are capable of operating only unidirectionally (not bidirectionally), but this unidirectional restriction on any link is not persistent; almost all links are physically bidirectional, and the MAC protocol in use in the network is capable of transmitting unicast packets over unidirectional links.",
      "ja": " - ネットワーク内のリンクは時折だけ一方向（ない双方向）の動作が可能ですが、任意のリンク上でこの一方向の制限は永続的ではありません。ほとんどすべてのリンクは、物理的に双方向であり、ネットワークで使用されているMACプロトコルは、単方向リンクを介してユニキャストパケットを送信することができます。"
    },
    {
      "indent": 3,
      "text": "- The MAC protocol in use in the network is not capable of transmitting unicast packets over unidirectional links; only bidirectional links can be used by the MAC protocol for transmitting unicast packets. For example, the IEEE 802.11 Distributed Coordination Function (DCF) MAC protocol [IEEE80211] is capable of transmitting a unicast packet only over a bidirectional link, since the MAC protocol requires the return of a link-level acknowledgement packet from the receiver and also optionally requires the bidirectional exchange of an RTS and CTS packet between the transmitter and receiver nodes.",
      "ja": " - ネットワークで使用されているMACプロトコルは、単方向リンク上でユニキャストパケットを送信することができません。唯一の双方向リンクは、ユニキャストパケットを送信するためのMACプロトコルによって使用することができます。 MACプロトコルはまた、必要に応じて、受信機からのリンクレベル肯定応答パケットの戻りを必要とするので、例えば、IEEE 802.11分散協調機能（DCF）MACプロトコルが[IEEE80211]、唯一の双方向リンクを介してユニキャストパケットを送信することが可能です送信機と受信機ノード間のRTSとCTSパケットの双方向交換を必要とします。"
    },
    {
      "indent": 3,
      "text": "In the first case above, for example, the source route used in a data packet, the accumulated route record in a Route Request, or the route being returned in a Route Reply SHOULD all be cached by any node in the \"forward\" direction. Any node SHOULD cache this information from any such packet received, whether the packet was addressed to this node, sent to a broadcast (or multicast) MAC address, or overheard while the node's network interface is in promiscuous mode. However, the \"reverse\" direction of the links identified in such packet headers SHOULD NOT be cached.",
      "ja": "上記最初のケースでは、例えば、ソースルートは、ルート要求では、データパケットに蓄積されたルート・レコードを使用するか、またはルートが全て「前方」方向に任意のノードによってキャッシュされるべきルート応答で返されます。任意のノードは、パケットからこの情報をキャッシュすべきパケットをブロードキャスト（またはマルチキャスト）に送られ、このノードにアドレス指定されたかどうかを、受信したMACアドレス、またはノードのネットワークインタフェースがプロミスキャスモードにある間耳。しかし、このようなパケットヘッダに特定されたリンクの「逆」方向がキャッシュされるべきではありません。"
    },
    {
      "indent": 3,
      "text": "For example, in the situation shown below, node A is using a source route to communicate with node E:",
      "ja": "例えば、状況では、ノードAがノードEと通信するソースルートを使用して、以下に示します："
    },
    {
      "indent": 6,
      "text": "+-----+     +-----+     +-----+     +-----+     +-----+\n|  A  |---->|  B  |---->|  C  |---->|  D  |---->|  E  |\n+-----+     +-----+     +-----+     +-----+     +-----+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "As node C forwards a data packet along the route from A to E, it SHOULD add to its cache the presence of the \"forward\" direction links that it learns from the headers of these packets, from itself to D and from D to E. Node C SHOULD NOT, in this case, cache the \"reverse\" direction of the links identified in these packet headers, from itself back to B and from B to A, since these links might be unidirectional.",
      "ja": "ノードCはEへの経路に沿ってデータパケットを転送するように、そのキャッシュそれ自体からDおよびDからEに、これらのパケットのヘッダから学習「前方」方向リンクの存在に追加しますこれらのリンクは一方向であるかもしれないので、ノードCは、この場合には、バック自体からBおよびBからAに、これらのパケットヘッダで識別されたリンクの「逆」方向をキャッシュすべきではありません。"
    },
    {
      "indent": 3,
      "text": "In the second case above, in which links may occasionally operate unidirectionally, the links described above SHOULD be cached in both directions. Furthermore, in this case, if node X overhears (e.g., through promiscuous mode) a packet transmitted by node C that is using a source route from node A to E, node X SHOULD cache all of these links as well, also including the link from C to X over which it overheard the packet.",
      "ja": "リンクは時折一方向に動作することができる上述した第2の場合において、上記リンクは両方向にキャッシュされます。また、EへのノードAからソースルートを使用しているノードCが送信したパケットノードXが（無差別モードを介して、例えば）耳にすれば、この場合、ノードXは、リンクなど、ならびにこれらのリンクのすべてをキャッシュしますCからXまで、その上、それはパケットを耳に。"
    },
    {
      "indent": 3,
      "text": "In the final case, in which the MAC protocol requires physical bidirectionality for unicast operation, links from a source route SHOULD be cached in both directions, except when the packet also contains a Route Reply, in which case only the links already traversed in this source route SHOULD be cached. However, the links not yet traversed in this route SHOULD NOT be cached.",
      "ja": "MACプロトコルは、ユニキャスト動作のための物理的な双方向性を必要とする最終的な場合には、パケットはまた、リンクのみが既にこのソースに横断その場合、ルート応答が、含まれている場合を除いて、両方向にキャッシュされるべきソースルートからリンクルートはキャッシュされるべき。しかし、まだこのルートではトラバースないリンクがキャッシュされるべきではありません。"
    },
    {
      "indent": 0,
      "text": "3.3.2. Replying to Route Requests Using Cached Routes",
      "section_title": true,
      "ja": "3.3.2。キャッシュされたルートを使用したルート要求に返信"
    },
    {
      "indent": 3,
      "text": "A node receiving a Route Request for which it is not the target searches its own Route Cache for a route to the target of the Request. If it is found, the node generally returns a Route Reply to the initiator itself rather than forward the Route Request. In the Route Reply, this node sets the route record to list the sequence of hops over which this copy of the Route Request was forwarded to it, concatenated with the source route to this target obtained from its own Route Cache.",
      "ja": "それは、ターゲットされていないルート要求を受信したノードは、要求のターゲットへのルートのために、独自のルートキャッシュを検索します。それが見つかった場合、ノードは、一般的にルートがイニシエータ自体に返信するのではなくルート要求を転送し返します。ルート応答では、このノードは、独自のルートキャッシュから得られたこのターゲットへのソース経路と連結ルート要求のこのコピーがそれに転送された先のホップのシーケンスをリストするルートレコードを設定します。"
    },
    {
      "indent": 3,
      "text": "However, before transmitting a Route Reply packet that was generated using information from its Route Cache in this way, a node MUST verify that the resulting route being returned in the Route Reply, after this concatenation, contains no duplicate nodes listed in the route record. For example, the figure below illustrates a case in which a Route Request for target E has been received by node F, and node F already has in its Route Cache a route from itself to E:",
      "ja": "しかしながら、このようにして、そのルートキャッシュからの情報を使用して生成されたルートリプライパケットを送信する前に、ノードは、得られたルートがルート応答で返されることを確認しなければならない、この連結した後、ルートレコードにリストされた重複ノードを含んでいません。例えば、以下の図は、ターゲットEのルート要求はノードFによって受信された場合を示し、ノードFは、すでにそのルートキャッシュにEへ自体からのルートが設定されています。"
    },
    {
      "indent": 9,
      "text": "+-----+     +-----+                 +-----+     +-----+\n|  A  |---->|  B  |-               >|  D  |---->|  E  |\n+-----+     +-----+ \\             / +-----+     +-----+\n                     \\           /\n                      \\ +-----+ /\n                       >|  C  |-\n                        +-----+\n                          | ^\n                          v |\n  Route Request         +-----+\n  Route: A - B - C - F  |  F  |  Cache: C - D - E\n                        +-----+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The concatenation of the accumulated route record from the Route Request and the cached route from F's Route Cache would include a duplicate node in passing from C to F and back to C.",
      "ja": "ルート要求とFのルートキャッシュからキャッシュされたルートから蓄積されたルートレコードの連結はC.に戻ってCからFへと渡すことで、重複するノードが含まれるであろう"
    },
    {
      "indent": 3,
      "text": "Node F in this case could attempt to edit the route to eliminate the duplication, resulting in a route from A to B to C to D and on to E, but in this case, node F would not be on the route that it returned in its own Route Reply. DSR Route Discovery prohibits node F from returning such a Route Reply from its cache; this prohibition increases the probability that the resulting route is valid, since node F in this case should have received a Route Error if the route had previously stopped working. Furthermore, this prohibition means that a future Route Error traversing the route is very likely to pass through any node that sent the Route Reply for the route (including node F), which helps to ensure that stale data is removed from caches (such as at F) in a timely manner; otherwise, the next Route Discovery initiated by A might also be contaminated by a Route Reply from F containing the same stale route. If, due to this restriction on returning a Route Reply based on information from its Route Cache, node F does not return such a Route Reply, it propagates the Route Request normally.",
      "ja": "この場合、ノードFは、BからCへのDおよびEに上から経路をもたらす、重複を排除するルートを編集しようとする可能性があり、この場合には、ノードFはそれに返される経路上ではないであろう独自のルート返信。 DSR経路探索は、そのキャッシュからそのような経路応答を返すからノードFを禁止しています。この禁止は、ルートが以前に動作を停止していた場合、この場合のノードFは、経路エラーを受け取っているはずですので、その結果ルートは、有効である確率を高めます。さらに、この禁止は、ルートを横断将来経路エラーは、時としてキャッシュ（から除去された古いデータを確実にするのに役立つ（ノードFを含む）ルートがルートに返信送信されたノードを通過する可能性が高いことを意味しますタイムリーにF）。そうでない場合は、Aによって開始される次のルート探索も同じ失効経路を含むFから返信経路により汚染される可能性があります。原因ルートがそのルートキャッシュからの情報をもとに返信を返すにこの制限に、ノードFは、このような経路応答を返さない、場合、それは通常、ルート要求を伝播します。"
    },
    {
      "indent": 0,
      "text": "3.3.3. Route Request Hop Limits",
      "section_title": true,
      "ja": "3.3.3。ルート要求のホップの制限"
    },
    {
      "indent": 3,
      "text": "Each Route Request message contains a \"hop limit\" that may be used to limit the number of intermediate nodes allowed to forward that copy of the Route Request. This hop limit is implemented using the Time-to-Live (TTL) field in the IP header of the packet carrying the Route Request. As the Request is forwarded, this limit is decremented, and the Request packet is discarded if the limit reaches zero before finding the target. This Route Request hop limit can be used to implement a variety of algorithms for controlling the spread of a Route Request during a Route Discovery attempt.",
      "ja": "各経路要求メッセージは、ルート要求のコピーを転送することができ、中間ノードの数を制限するために使用することができる「ホップ制限」を含みます。このホップ制限は、ルート要求を搬送するパケットのIPヘッダ内のタイム・ツー・ライブ（TTL）フィールドを使用して実装されています。要求が転送されるように、この制限はデクリメントされ、そして制限がターゲットを見つける前にゼロに達する場合、要求パケットは破棄されます。このルート要求ホップ限界は、経路探索試行中ルート要求の広がりを制御するための様々なアルゴリズムを実装するために使用することができます。"
    },
    {
      "indent": 3,
      "text": "For example, a node MAY use this hop limit to implement a \"non-propagating\" Route Request as an initial phase of a Route Discovery. A node using this technique sends its first Route Request attempt for some target node using a hop limit of 1, such that any node receiving the initial transmission of the Route Request will not forward the Request to other nodes by re-broadcasting it. This form of Route Request is called a \"non-propagating\" Route Request; it provides an inexpensive method for determining if the target is currently a neighbor of the initiator or if a neighbor node has a route to the target cached (effectively using the neighbors' Route Caches as an extension of the initiator's own Route Cache). If no Route Reply is received after a short timeout, then the node sends a \"propagating\" Route Request for the target node (i.e., with hop limit as defined by the value of the DiscoveryHopLimit configuration variable).",
      "ja": "例えば、ノードは、経路探索の初期段階として「非伝播」ルート要求を実現するために、このホップリミットを使用するかもしれません。この技術を使用して、ノードがルート要求の初期伝送を受信する任意のノードがそれを再ブロードキャストすることによって他のノードに要求を転送しないよう1のホップリミットを使用して、いくつかのターゲットノードのためにその最初の経路要求試みを送信します。ルート要求のこの形式は、「非伝播する」ルート要求と呼ばれています。ターゲットがイニシエータ現在の隣人である場合、または隣接ノードが（有効イニシエータ独自のルートキャッシュの拡張として隣人のルートキャッシュを使用して）、キャッシュされたターゲットへの経路を有する場合には、決定するための安価な方法を提供します。 NOルート応答が短いタイムアウトの後に受信されない場合、そのノードは、ターゲット・ノードのための「伝播」ルート要求を（すなわち、ホップリミットとDiscoveryHopLimit設定変数の値によって定義される）を送信します。"
    },
    {
      "indent": 3,
      "text": "As another example, a node MAY use this hop limit to implement an \"expanding ring\" search for the target [JOHNSON96a]. A node using this technique sends an initial non-propagating Route Request as described above; if no Route Reply is received for it, the node originates another Route Request with a hop limit of 2. For each Route Request originated, if no Route Reply is received for it, the node doubles the hop limit used on the previous attempt, to progressively explore for the target node without allowing the Route Request to propagate over the entire network. However, this expanding ring search approach could increase the average latency of Route Discovery, since multiple Discovery attempts and timeouts may be needed before discovering a route to the target node.",
      "ja": "別の例として、ノードは[JOHNSON96a】ターゲットのための「拡張リング」検索を実現するために、このホップリミットを使用するかもしれません。この技術を使用して、ノードは、上述したように、初期の非伝播ルート要求を送信します。 NOルート応答がそれのために受信されない場合、ノードは、各ルート要求に対して2のホップリミットと別のルート要求を発信する発信、NOルート応答がそれのために受信されない場合、ノードは、前の試行で使用されるホップリミットを倍増徐々にルート要求がネットワーク全体に伝播させることなく、ターゲット・ノードのために探ります。複数の検出試行とタイムアウトがターゲット・ノードへのルートを発見する前に必要とされるかもしれないので、この拡張リング検索アプローチは、経路探索の平均待ち時間を増加させることができます。"
    },
    {
      "indent": 0,
      "text": "3.4. Additional Route Maintenance Features",
      "section_title": true,
      "ja": "3.4。追加のルートメンテナンス機能"
    },
    {
      "indent": 0,
      "text": "3.4.1. Packet Salvaging",
      "section_title": true,
      "ja": "3.4.1。パケットサルベージ"
    },
    {
      "indent": 3,
      "text": "When an intermediate node forwarding a packet detects through Route Maintenance that the next hop along the route for that packet is broken, if the node has another route to the packet's destination in its Route Cache, the node SHOULD \"salvage\" the packet rather than discard it. To salvage a packet, the node replaces the original source route on the packet with a route from its Route Cache. The node then forwards the packet to the next node indicated along this source route. For example, in the situation shown in the example of Section 3.2, if node C has another route cached to node E, it can salvage the packet by replacing the original route in the packet with this new route from its own Route Cache rather than discarding the packet.",
      "ja": "パケットを転送する中間ノードは、ノードがそのルートキャッシュノードSHOULD「サルベージ」パケット内のパケットの宛先への別のルートが設定されているのではなく破棄する場合、そのパケットの経路に沿った次のホップは、破壊されていることをルートメンテナンスを通じて検出された場合それ。パケットを救済するために、ノードは、そのルートキャッシュからのルートを有するパケットに元のソースルートを置き換えます。ノードは、このソース・ルートに沿って示され、次のノードにパケットを転送します。ノードCは、別のルートがEをノードAにキャッシュされている場合、例えば、3.2節の例に示されているような状況で、それはそれ自身のルートキャッシュからこの新たなルートを有するパケット内の元のルートを交換するのではなく破棄することによってパケットを回収することができパケット。"
    },
    {
      "indent": 3,
      "text": "When salvaging a packet, a count is maintained in the packet of the number of times that it has been salvaged, to prevent a single packet from being salvaged endlessly. Otherwise, since the TTL is decremented only once by each node, a single node could salvage a packet an unbounded number of times. Even if we chose to require the TTL to be decremented on each salvage attempt, packet salvaging is an expensive operation, so it is desirable to bound the maximum number of times a packet can be salvaged independently of the maximum number of hops a packet can traverse.",
      "ja": "パケットをサルベージすると、カウントが延々と救出されることから、単一のパケットを防ぐために、それは救助された回数のパケット内に維持されています。 TTLは、各ノードが一度だけデクリメントされるのでそうでなければ、単一のノードは、パケットを何回の無制限数を救うことができました。私たちはそれぞれのサルベージ試行で減算されるようにTTLを必要とすることを選択した場合でも、パケットのサルベージは、高価な操作ですので、パケットは、パケットが通過できる最大ホップ数とは独立して救済することができる最大回数バインドすることが望ましいです。"
    },
    {
      "indent": 3,
      "text": "As described in Section 3.2, an intermediate node, such as in this case, that detects through Route Maintenance that the next hop along the route for a packet that it is forwarding is broken, the node also SHOULD return a Route Error to the original sender of the packet, identifying the link over which the packet could not be forwarded. If the node sends this Route Error, it SHOULD originate the Route Error before salvaging the packet.",
      "ja": "例えば、それは転送されるパケットの経路に沿った次のホップが壊れてその経路のメンテナンスを介して検出し、この場合、同様に、セクション3.2、中間ノード、に記載されているように、ノードはまた、元の送信者に経路エラーを返すべきパケットの、パケットを転送することができなかった上、リンクを特定します。ノードは、この経路エラーを送信した場合、それはパケットをサルベージする前に経路エラーを発信すべきです。"
    },
    {
      "indent": 0,
      "text": "3.4.2. Queued Packets Destined over a Broken Link",
      "section_title": true,
      "ja": "3.4.2。リンク切れの上に運命キューイングされたパケット"
    },
    {
      "indent": 3,
      "text": "When an intermediate node forwarding a packet detects through Route Maintenance that the next-hop link along the route for that packet is broken, in addition to handling that packet as defined for Route Maintenance, the node SHOULD also handle in a similar way any pending packets that it has queued that are destined over this new broken link. Specifically, the node SHOULD search its Network Interface Queue and Maintenance Buffer (Section 4.5) for packets for which the next-hop link is this new broken link. For each such packet currently queued at this node, the node SHOULD process that packet as follows:",
      "ja": "パケットを転送する中間ノードはそのパケットの経路に沿った次のホップのリンクが壊れていることルートメンテナンスを介して検出された場合、ルートメンテナンス用に定義されたように、そのパケットを処理することに加えて、ノードはまた、同様の方法で保留中のパケットを処理しますそれはキューに入れられたことを、この新しい壊れたリンクの上に運命づけられています。具体的には、ノードは、次ホップのリンクは、この新しいリンク切れしているため、パケットのためのネットワーク・インタフェース・キューとメンテナンスバッファー（4.5節）を検索します。次のように、現在このノードでキューに入れられたそのような各パケットについて、ノードはそのパケットを処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "- Remove the packet from the node's Network Interface Queue and Maintenance Buffer.",
      "ja": " - ノードのネットワークインターフェイスキューとメンテナンスバッファからパケットを削除します。"
    },
    {
      "indent": 3,
      "text": "- Originate a Route Error for this packet to the original sender of the packet, using the procedure described in Section 8.3.4, as if the node had already reached the maximum number of retransmission attempts for that packet for Route Maintenance. However, in sending such Route Errors for queued packets in response to detection of a single, new broken link, the node SHOULD send no more than one Route Error to each original sender of any of these packets.",
      "ja": " - ノードがすでにルートメンテナンスのために、そのパケットの再送信試行の最大数に達したかのように、セクション8.3.4に記載した手順を使用して、パケットの元の送信者にこのパケットの経路エラーを発信。しかし、単一、新たに壊れたリンクの検出に応答してキューイングされたパケットのために、このようなルートエラーを送信するには、ノードは、これらのパケットのうちのいずれかの各元の送信者に1つ以下の経路エラーを送るべきではありません。"
    },
    {
      "indent": 3,
      "text": "- If the node has another route to the packet's IP Destination Address in its Route Cache, the node SHOULD salvage the packet as described in Section 8.3.6. Otherwise, the node SHOULD discard the packet.",
      "ja": " - ノードがルートキャッシュ内のパケットのIP宛先アドレスへの別のルートを持っている場合は、セクション8.3.6で説明したように、ノードはパケットを救済すべきです。そうしないと、ノードはパケットを破棄すべきです。"
    },
    {
      "indent": 0,
      "text": "3.4.3. Automatic Route Shortening",
      "section_title": true,
      "ja": "3.4.3。自動ルート短縮"
    },
    {
      "indent": 3,
      "text": "Source routes in use MAY be automatically shortened if one or more intermediate nodes in the route become no longer necessary. This mechanism of automatically shortening routes in use is somewhat similar to the use of passive acknowledgements [JUBIN87]. In particular, if a node is able to overhear a packet carrying a source route (e.g., by operating its network interface in promiscuous receive mode), then this node examines the unexpended portion of that source route. If this node is not the intended next-hop destination for the packet but is named in the later unexpended portion of the packet's source route, then it can infer that the intermediate nodes before itself in the source route are no longer needed in the route. For example, the figure below illustrates an example in which node D has overheard a data packet being transmitted from B to C, for later forwarding to D and to E:",
      "ja": "もはや必要となる経路中の1つまたは複数の中間ノード場合に使用されているソースルートを自動的に短縮することができます。自動的に使用中のルートを短縮するこのメカニズムは、受動的確認応答[JUBIN87]の使用に幾分類似しています。ノードが（例えば、無差別にそのネットワークインタフェースを操作することにより、受信モード）ソースルートを運ぶパケットをオーバーヒアリングすることができる場合、特に、このノードは、ソース経路のunexpended部分を調べます。このノードは、パケットのための意図ネクストホップ先ではなく、パケットの送信元ルートの後のunexpended部分に指定されている場合、それはソースルートで自身の前に中間ノードがもはやルートで必要とされていないことを推測することができます。例えば、以下の図は、ノードDが後でDおよびEに転送するために、CにBから送信されるデータパケットを傍受していた例を示しています。"
    },
    {
      "indent": 9,
      "text": "+-----+     +-----+     +-----+     +-----+     +-----+\n|  A  |---->|  B  |---->|  C  |     |  D  |     |  E  |\n+-----+     +-----+     +-----+     +-----+     +-----+\n               \\                       ^\n                \\                     /\n                 ---------------------",
      "raw": true
    },
    {
      "indent": 3,
      "text": "In this case, this node (node D) SHOULD return a \"gratuitous\" Route Reply to the original sender of the packet (node A). The Route Reply gives the shorter route as the concatenation of the portion of the original source route up through the node that transmitted the overheard packet (node B), plus the suffix of the original source route beginning with the node returning the gratuitous Route Reply (node D). In this example, the route returned in the gratuitous Route Reply message sent from D to A gives the new route as the sequence of hops from A to B to D to E.",
      "ja": "この場合、ノード（ノードD）は、「無償」経路はパケット（ノードA）の元の送信者に返信を返すべきです。 （ルート応答を傍受パケットを送信したノードを介して元のソース経路アップ（ノードB）の部分の連結のようなより短いルートを提供し、加えて、元のソース・ルートの接尾辞は、無償ルート応答を返すノードで始まりますノードD）。この例では、ルートは、AにDから送信された無償の経路応答メッセージで返さBにDへE.へのホップのシーケンスとして新しいルートを与えます"
    },
    {
      "indent": 3,
      "text": "When deciding whether to return a gratuitous Route Reply in this way, a node MAY factor in additional information beyond the fact that it was able to overhear the packet. For example, the node MAY decide to return the gratuitous Route Reply only when the overheard packet is received with a signal strength or signal-to-noise ratio above some specific threshold. In addition, each node maintains a Gratuitous Route Reply Table, as described in Section 4.4, to limit the rate at which it originates gratuitous Route Replies for the same returned route.",
      "ja": "このように無償経路応答を返すかどうかを決定する際に、ノードはパケットを立ち聞きすることができたという事実を超えた追加情報に考慮するかもしれません。例えば、ノードは、傍受パケットが信号強度またはいくつかの特定の閾値を超える信号対雑音比で受信されるだけ無償ルート応答を返却することを決定することができます。また、各ノードは、それが無償経路が同じ返されるルートの返信起因する速度を制限するために、4.4節で説明したように無償経路は、表返信維持します。"
    },
    {
      "indent": 0,
      "text": "3.4.4. Increased Spreading of Route Error Messages",
      "section_title": true,
      "ja": "3.4.4。増加したルートのエラーメッセージの広がり"
    },
    {
      "indent": 3,
      "text": "When a source node receives a Route Error for a data packet that it originated, this source node propagates this Route Error to its neighbors by piggybacking it on its next Route Request. In this way, stale information in the caches of nodes around this source node will not generate Route Replies that contain the same invalid link for which this source node received the Route Error.",
      "ja": "ソースノードは、それが発祥のデータパケットの経路エラーを受信すると、このソースノードは、その次のルート要求にそれをピギーバックすることによって、その隣人にこの経路エラーを伝播します。このように、このソースノードの周囲のノードのキャッシュ内の古い情報は、このソースノードは経路エラーを受信したため、同じ無効なリンクを含むルート応答を生成しないであろう。"
    },
    {
      "indent": 3,
      "text": "For example, in the situation shown in the example of Section 3.2, node A learns from the Route Error message from C that the link from C to D is currently broken. It thus removes this link from its own Route Cache and initiates a new Route Discovery (if it has no other route to E in its Route Cache). On the Route Request packet initiating this Route Discovery, node A piggybacks a copy of this Route Error, ensuring that the Route Error spreads well to other nodes, and guaranteeing that any Route Reply that it receives (including those from other node's Route Caches) in response to this Route Request does not contain a route that assumes the existence of this broken link.",
      "ja": "例えば、セクション3.2の例に示されている状況において、ノードAは、CからDへのリンクが現在破壊されるCから経路エラーメッセージから学習します。したがって、独自のルートキャッシュからこのリンクを削除し、（それはそのルートキャッシュにEへの他のルートを持っていない場合は）新しい経路探索を開始します。この経路探索を開始するルート要求パケットには、ノードAは、経路エラーが他のノードにも広がることを確実にすること、および、任意のルートは、（他のノードのルートキャッシュからのものを含む）、受信した返信することを保証し、この経路エラーのコピーをピギーバックこのルート要求に対する応答は、この壊れたリンクの存在を前提としていた経路が含まれていません。"
    },
    {
      "indent": 0,
      "text": "3.5. Optional DSR Flow State Extension",
      "section_title": true,
      "ja": "3.5。オプションDSRフロー状態拡張"
    },
    {
      "indent": 3,
      "text": "This section describes an optional, compatible extension to the DSR protocol, known as \"flow state\", that allows the routing of most packets without an explicit source route header in the packet. The DSR flow state extension further reduces the overhead of the protocol yet still preserves the fundamental properties of DSR's operation. Once a sending node has discovered a source route such as through DSR's Route Discovery mechanism, the flow state mechanism allows the sending node to establish hop-by-hop forwarding state within the network, based on this source route, to enable each node along the route to forward the packet to the next hop based on the node's own local knowledge of the flow along which this packet is being routed. Flow state is dynamically initialized by the first packet using a source route and is then able to route subsequent packets along the same flow without use of a source route header in the packet. The state established at each hop along a flow is \"soft state\" and thus automatically expires when no longer needed and can be quickly recreated as necessary. Extending DSR's basic operation based on an explicit source route in the header of each packet routed, the flow state extension operates as a form of \"implicit source routing\" by preserving DSR's basic operation but removing the explicit source route from packets.",
      "ja": "このセクションでは、パケット内の明示的なソースルートヘッダなしで最もパケットのルーティングを可能にする「流動状態」として知られているDSRプロトコル、オプション、互換性の拡張を記述しています。 DSRフロー状態の拡張は、さらにまたさらにプロトコルのオーバーヘッドを低減DSRの操作の基本的な特性を維持します。送信ノードは、DSRのルート発見メカニズムを介して、ソースルートを発見した後、フロー状態機構は、送信ノードは、このソースの経路に基づいて、ネットワーク内のホップバイホップ転送状態を確立するために沿って各ノードを有効にすることができますこのパケットがルーティングされ、それに沿って流れのノード自体のローカルな知識に基づいて、次のホップにパケットを転送するルート。流動状態を動的ソースルートを使用して第1のパケットによって初期化した後、パケット内のソース・ルート・ヘッダを使用せずに、同じフローに沿った経路後続パケットに可能です。流れに沿って各ホップで確立された状態は、「ソフト状態」であり、もはや必要と迅速に必要に応じて再作成することができる場合にこのように自動的に満了していません。ルーティングされた各パケットのヘッダ内の明示的なソースルートに基づいて延びるDSRの基本的な動作は、フロー状態拡張子はDSRの基本的な動作を維持するが、パケットからの明示的なソースルートを除去することにより、「暗黙的なソース・ルーティング」の形態として動作します。"
    },
    {
      "indent": 0,
      "text": "3.5.1. Flow Establishment",
      "section_title": true,
      "ja": "3.5.1。フローの確立"
    },
    {
      "indent": 3,
      "text": "A source node sending packets to some destination node MAY use the DSR flow state extension described here to establish a route to that destination as a flow. A \"flow\" is a route from the source to the destination represented by hop-by-hop forwarding state within the nodes along the route. Each flow is uniquely identified by a combination of the source node address, the destination node address, and a flow identifier (flow ID) chosen by the source node.",
      "ja": "いくつかの宛先ノードにパケットを送信元ノードは、流れとしてその目的地までの経路を確立するために、ここで説明DSRフロー状態拡張を使用するかもしれません。 「フロー」は、ルートに沿ったノード内のホップバイホップ転送状態によって表される送信元から宛先までの経路です。各フローは一意的ソースノードにより選択された送信元ノードアドレス、宛先ノードアドレス、およびフロー識別子（フローID）の組み合わせによって識別されます。"
    },
    {
      "indent": 3,
      "text": "Each flow ID is a 16-bit unsigned integer. Comparison between different flow IDs MUST be performed modulo 2**16. For example, using an implementation in the C programming language, a flow ID value (a) is greater than another flow ID value (b) if ((short)((a) - (b)) > 0), if a C language \"short\" data type is implemented as a 16-bit signed integer.",
      "ja": "各フローIDは、16ビットの符号なし整数です。異なるフローIDとの間の比較は、モジュロ2 ** 16を実行しなければなりません。例えば、Cプログラミング言語で実装を使用して、フローID値（a）は別のフローIDの値よりも大きい（b）の場合（（ショート）（（A） - （B））> 0）、Cもし言語「短い」データ・タイプは、16ビット符号付き整数として実装されます。"
    },
    {
      "indent": 3,
      "text": "A DSR Flow State header in a packet identifies the flow ID to be followed in forwarding that packet. From a given source to some destination, any number of different flows MAY exist and be in use, for example, following different sequences of hops to reach the destination. One of these flows MAY be considered the \"default\" flow from that source to that destination. If a node receives a packet with neither a DSR Options header specifying the route to be taken (with a Source Route option in the DSR Options header) nor a DSR Flow State header specifying the flow ID to be followed, it is forwarded along the default flow for the source and destination addresses specified in the packet's IP header.",
      "ja": "パケット内DSRフロー状態ヘッダは、そのパケットを転送するに従うべきフローIDを識別する。宛先に到達するためのホップの異なる配列を以下、例えば、いくつかの宛先に指定されたソースから、異なるフローの任意の数が存在してもよいし、使用中です。これらの流れの一つは、その宛先への送信元から「デフォルト」の流れと考えることができます。ノードが（DSRオプションヘッダー内のソースルートオプションで）取るべきルートを指定DSRオプションヘッダも従うべきフローIDを指定DSRフロー状態のヘッダも持たないパケットを受信した場合、それがデフォルトに沿って転送されますパケットのIPヘッダーで指定された送信元アドレスと宛先アドレスのための流れ。"
    },
    {
      "indent": 3,
      "text": "In establishing a new flow, the source node generates a nonzero 16-bit flow ID greater than any unexpired flow IDs for this (source, destination) pair. If the source wishes for this flow to become the default flow, the low bit of the flow ID MUST be set (the flow ID is an odd number); otherwise, the low bit MUST NOT be set (the flow ID is an even number).",
      "ja": "新しいフローを確立する際に、ソースノードは、この（元、送信先）ペアのための任意の期限切れフローIDより大きい非ゼロの16ビットのフローIDを生成します。ソースは、デフォルトの流れになるため、このフローのために望む場合、フローIDの下位ビットを設定する必要があり（フローIDは奇数）。そうでない場合は、低いビットが設定されてはいけません（フローIDは偶数です）。"
    },
    {
      "indent": 3,
      "text": "The source node establishing the new flow then transmits a packet containing a DSR Options header with a Source Route option. To establish the flow, the source node also MUST include in the packet a DSR Flow State header, with the Flow ID field set to the chosen flow ID for the new flow, and MUST include a Timeout option in the DSR Options header, giving the lifetime after which state information about this flow is to expire. This packet will generally be a normal data packet being sent from this sender to the destination (for example, the first packet sent after discovering the new route) but is also treated as a \"flow establishment\" packet.",
      "ja": "新たな流れを確立ソースノードは、ソースルートオプションを使用してDSRオプションヘッダを含むパケットを送信します。流れを確立するために、ソースノードは、パケットに新しいフローのために選ばれたフローIDに設定フローIDフィールドを持つDSRフロー状態ヘッダを含まなければならない、と与え、DSRオプションヘッダー内のタイムアウト]オプションを含まなければなりません生涯その後、このフローについての状態情報が期限切れにあります。このパケットは、一般に、（例えば、新たなルートを発見した後に送信された最初のパケット）の宛先にこの送信者から送信されるだけでなく、「フロー確立」パケットとして扱われる通常のデータパケットであろう。"
    },
    {
      "indent": 3,
      "text": "The source node records this flow in its Flow Table for future use, setting the TTL in this Flow Table entry to the value used in the TTL field in the packet's IP header and setting the Lifetime in this entry to the lifetime specified in the Timeout option in the DSR Options header. The TTL field is used for Default Flow Forwarding, as described in Sections 3.5.3 and 3.5.4.",
      "ja": "ソースノードは、パケットのIPヘッダのTTLフィールドに使用される値に、このフローテーブルエントリにTTLを設定し、タイムアウトオプションで指定された寿命にこのエントリにライフタイムを設定する、将来の使用のためにその流れを表にこのフローを記録しますDSRオプションヘッダです。セクション3.5.3および3.5.4に記載されるようにTTLフィールドは、デフォルトフロー転送に使用されます。"
    },
    {
      "indent": 3,
      "text": "Any further packets sent with this flow ID before the timeout that also contain a DSR Options header with a Source Route option MUST use this same source route in the Source Route option.",
      "ja": "また、ソースルートオプションでDSRオプションヘッダを含む、タイムアウトする前に、このフローIDと送信され、さらに、パケットが送信元経路オプションで同じソースルートを使用しなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.5.2. Receiving and Forwarding Establishment Packets",
      "section_title": true,
      "ja": "3.5.2。受信と設立パケットを転送します"
    },
    {
      "indent": 3,
      "text": "Packets intended to establish a flow, as described in Section 3.5.1, contain a DSR Options header with a Source Route option and are forwarded along the indicated route. A node implementing the DSR flow state extension, when receiving and forwarding such a DSR packet, also keeps some state in its own Flow Table to enable it to forward future packets that are sent along this flow with only the flow ID specified. Specifically, if the packet also contains a DSR Flow State header, this packet SHOULD cause an entry to be established for this flow in the Flow Table of each node along the packet's route.",
      "ja": "セクション3.5.1で説明したように、フローを確立することを意図したパケットは、ソースルートオプションを使用してDSRオプションヘッダを含むと示されたルートに沿って転送されます。このようなDSRパケットを受信および転送DSRフロー状態の拡張を実装するノードは、また、指定された唯一のフローIDと、この流れに沿って送信される将来のパケットを転送することを可能にするために、自身のフローテーブル内のいくつかの状態を維持します。パケットはまた、DSRフロー状態ヘッダが含まれている場合、具体的に、このパケットは、エントリが、パケットのルートに沿った各ノードのフローテーブルにこのフローのために確立させるべきです。"
    },
    {
      "indent": 3,
      "text": "The Hop Count field of the DSR Flow State header is also stored in the Flow Table, as is the lifetime specified in the Timeout option specified in the DSR Options header.",
      "ja": "DSRフロー状態のヘッダのホップカウントフィールドもDSRオプションヘッダで指定されたタイムアウトオプションで指定された寿命があるように、フローテーブルに格納されます。"
    },
    {
      "indent": 3,
      "text": "If the Flow ID is odd and there is no flow in the Flow Table with Flow ID greater than the received Flow ID, set the default Flow ID for this (IP Source Address, IP Destination Address) pair to the received Flow ID, and the TTL of the packet is recorded.",
      "ja": "フローIDが奇数で、受信したフローIDよりも大きなフローIDとフロー表で流れがない場合は、受信したフローIDに、この（IPソースアドレス、IP宛先アドレス）ペアのデフォルトのフローIDを設定し、パケットのTTLが記録されています。"
    },
    {
      "indent": 3,
      "text": "The Flow ID option is removed before final delivery of the packet.",
      "ja": "フローIDオプションは、パケットの最終的な配送前に除去されます。"
    },
    {
      "indent": 0,
      "text": "3.5.3. Sending Packets along Established Flows",
      "section_title": true,
      "ja": "3.5.3。設立フローに沿ってパケットを送信します"
    },
    {
      "indent": 3,
      "text": "When a flow is established as described in Section 3.5.1, a packet is sent that establishes state in each node along the route. This state is soft; that is, the protocol contains mechanisms for recovering from the loss of this state. However, the use of these mechanisms may result in reduced performance for packets sent along flows with forgotten state. As a result, it is desirable to differentiate behavior based on whether or not the sender is reasonably certain that the flow state exists on each node along the route. We define a flow's state to be \"established end-to-end\" if the Flow Tables of all nodes on the route contains forwarding information for that flow. While it is impossible to detect whether or not a flow's state has been established end-to-end without sending packets, implementations may make reasonable assumptions about the retention of flow state and the probability that an establishment packet has been seen by all nodes on the route.",
      "ja": "セクション3.5.1に記載したように、フローが確立されると、パケットは、ルートに沿った各ノードで状態を確立すること送信されます。この状態は柔らかいです。つまり、プロトコルは、この状態の損失から回復するためのメカニズムを含んでいます。しかしながら、これらのメカニズムの使用を忘れた状態で流れる沿って送信されるパケットの性能低下をもたらすことができます。その結果、送信者は、フロー状態は、ルートに沿った各ノード上に存在することを合理的に一定であるか否かに基づいて動作を区別することが望ましいです。私たちは、経路上のすべてのノードのフローテーブルは、そのフローのための情報を転送して含まれている場合は、「エンドツーエンドを確立」するために、フローの状態を定義します。それは、パケットを送信することなく、流れの状態は、エンドツーエンドを確立しているか否かを検出することは不可能ですが、実装が成立パケットは上のすべてのノードで見られていることを流動状態の保持と確率についての合理的な仮定を行うことができますルート。"
    },
    {
      "indent": 3,
      "text": "A source wishing to send a packet along an established flow determines if the flow state has been established end-to-end. If it has not, a DSR Options header with Source Route option with this flow's route is added to the packet. The source SHOULD set the Flow ID field of the DSR Flow State header either to the flow ID previously associated with this flow's route or to zero. If it sets the Flow ID field to any other value, it MUST follow the processing steps in Section 3.5.1 for establishing a new flow ID. If it sets the Flow ID field to a nonzero value, it MUST include a Timeout option with a value not greater than the timeout remaining in the node's Flow Table, and if its TTL is not equal to that specified in the Flow Table, the flow MUST NOT be used as a default flow in the future.",
      "ja": "流動状態は、エンドツーエンドに確立されている場合に確立された流れに沿ってパケットを送信することを望むソース判定する。それはしていない場合は、このフローのルートとソースルートオプション付きDSRオプションヘッダがパケットに追加されます。ソースは、以前にこのフローの経路またはゼロに関連付けられたフローIDにDSRフロー状態ヘッダのフローIDフィールドを設定する必要があります。それは他の値にフローIDフィールドを設定した場合、それは新しいフローIDを確立するため、セクション3.5.1における処理の手順に従う必要があります。それがゼロ以外の値にフローIDフィールドを設定した場合、それはノードのフローテーブル内に残っているタイムアウトより大きくない値でタイムアウトオプションを含まなければなりません、そのTTLは、フローテーブルで指定され、流れに等しくない場合将来的にデフォルトの流れとして使用してはいけません。"
    },
    {
      "indent": 3,
      "text": "Once flow state has been established end-to-end for non-default flows, a source adds a DSR Flow State header to each packet it wishes to send along that flow, setting the Flow ID field to the flow ID of that flow. A Source Route option SHOULD NOT be added to the packet, though if one is, then the steps for processing flows that have not been established end-to-end MUST be followed.",
      "ja": "一度流れ状態は、エンドツーエンドのデフォルト以外のフローのために確立されている、ソースは、そのフローのフローIDをフローIDフィールドを設定し、それがその流れに沿って送ることを望む各パケットにDSRフロー状態のヘッダを付加します。 1である場合は、その後、エンド・ツー・エンドの確立されていない処理フローのための手順が続かなければなりませんけれどもソースルートオプションは、パケットに追加しないでください。"
    },
    {
      "indent": 3,
      "text": "Once flow state has been established end-to-end for default flows, sources sending packets with IP TTL equal to the TTL value in the local Flow Table entry for this flow then transmit the packet to the next hop. In this case, a DSR Flow State header SHOULD NOT be added to the packet and a DSR Options header likewise SHOULD NOT be added to the packet; though if one is, the steps for sending packets along non-default flows MUST be followed. If the IP TTL is not equal to the TTL value in the local Flow Table, then the steps for processing a non-default flow MUST be followed.",
      "ja": "一度流れ状態は、エンドツーエンドのデフォルトのフローのために確立されている、このフローのローカルフローテーブルエントリのTTL値に等しいIP TTLを持つパケットを送信元は、次のホップにパケットを送信します。この場合には、DSRフロー状態ヘッダがパケットに追加されるべきではなく、DSRオプションヘッダは、同様に、パケットに付加されるべきではありません。 1である場合にも、デフォルト以外のフローに沿ってパケットを送信するための手順に従わなければなりません。 IP TTLローカルフローテーブルにおけるTTL値と等しくない場合は、デフォルト以外のフローを処理するための手順に従わなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.5.4. Receiving and Forwarding Packets Sent along Established Flows",
      "section_title": true,
      "ja": "3.5.4。受信して設立フローに沿って送信されたパケット転送"
    },
    {
      "indent": 3,
      "text": "The handling of packets containing a DSR Options header with both a nonzero Flow ID and a Source Route option is described in Section 3.5.2. The Flow ID is ignored when it is equal to zero. This section only describes handling of packets without a Source Route option.",
      "ja": "ゼロ以外のフローIDとソースルートオプションの両方とDSRオプションヘッダを含むパケットの処理は、セクション3.5.2に記載されています。それがゼロに等しいときのフローIDは無視されます。この項では、ソースルートオプションを使用せずにパケットの処理を記述します。"
    },
    {
      "indent": 3,
      "text": "If a node receives a packet with a Flow ID in the DSR Options header that indicates an unexpired flow in the node's Flow Table, it increments the Hop Count in the DSR Options header and forwards the packet to the next hop indicated in the Flow Table.",
      "ja": "ノードは、ノードのフローテーブル内の期限が切れていない流れを示しDSRオプションヘッダ内のフローIDを有するパケットを受信した場合、それはDSRオプションヘッダ内のホップカウントをインクリメントし、フローテーブルに示されている次のホップにパケットを転送します。"
    },
    {
      "indent": 3,
      "text": "If a node receives a packet with a Flow ID that indicates a flow not currently in the node's Flow Table, it returns a Route Error of type UNKNOWN_FLOW with Error Destination and IP Destination addresses copied from the IP Source of the packet triggering the error. This error packet SHOULD be MAC-destined to the node from which the packet was received; if it cannot confirm reachability of the previous node using Route Maintenance, it MUST send the error as described in Section 8.1.1. The node sending the error SHOULD attempt to salvage the packet triggering the Route Error. If it does salvage the packet, it MUST zero the Flow ID in the packet.",
      "ja": "ノードは、ノードのフローテーブルに存在しない現在流れを示しているフローIDを持つパケットを受信した場合、それはエラーをトリガーしたパケットのIPソースからコピーされたエラー送り先とIP宛先アドレスを持つ型UNKNOWN_FLOWの経路エラーを返します。このエラーパケットは、パケットを受信したノードにMAC-宛てされるべきです。それがルートのメンテナンスを使用して、前のノードの到達可能性を確認できない場合は、セクション8.1.1で説明したように、それは誤りを送らなければなりません。エラーを送信するノードは、経路エラーをトリガするパケットをサルベージを試みる必要があります。それは、パケットを救済した場合は、パケット内のフローIDをゼロにしなければなりません。"
    },
    {
      "indent": 3,
      "text": "If a node receives a packet with no DSR Options header and no DSR Flow State header, it checks the Default Flow Table. If there is a matching entry, it forwards to the next hop indicated in the Flow Table for the default flow. Otherwise, it returns a Route Error of type DEFAULT_FLOW_UNKNOWN with Error Destination and IP Destination addresses copied from the IP Source Address of the packet triggering the error. This error packet SHOULD be MAC-destined to the node from which it was received; if this node cannot confirm reachability of the previous node using Route Maintenance, it MUST send the error as described in Section 8.1.1. The node sending the error SHOULD attempt to salvage the packet triggering the Route Error. If it does salvage the packet, it MUST zero the Flow ID in the packet.",
      "ja": "ノードがDSRオプションヘッダなしDSRフロー状態のヘッダを有するパケットを受信した場合、デフォルトフローテーブルをチェックします。一致するエントリがある場合は、デフォルトのフローのためのフロー表に示された次のホップに転送します。それ以外の場合は、エラーをトリガするパケットのIPソースアドレスからコピーエラー送り先とIP宛先アドレスを持つタイプDEFAULT_FLOW_UNKNOWNの経路エラーを返します。このエラーパケットは、それが受信されたノードにMAC-宛てされるべきです。このノードがルートのメンテナンスを使用して、前のノードの到達可能性を確認できない場合は、セクション8.1.1で説明したように、それは誤りを送らなければなりません。エラーを送信するノードは、経路エラーをトリガするパケットをサルベージを試みる必要があります。それは、パケットを救済した場合は、パケット内のフローIDをゼロにしなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.5.5. Processing Route Errors",
      "section_title": true,
      "ja": "3.5.5。ルートエラーの処理"
    },
    {
      "indent": 3,
      "text": "When a node receives a Route Error of type UNKNOWN_FLOW, it marks the flow to indicate that it has not been established end-to-end. When a node receives a Route Error of type DEFAULT_FLOW_UNKNOWN, it marks the default flow to indicate that it has not been established end-to-end.",
      "ja": "ノードがタイプUNKNOWN_FLOWの経路エラーを受信した場合、それは、エンドツーエンドを確立していないことを示すために流れをマーク。ノードがタイプDEFAULT_FLOW_UNKNOWNの経路エラーを受信した場合、それは、エンドツーエンドを確立していないことを示すために、デフォルトの流れをマーク。"
    },
    {
      "indent": 0,
      "text": "3.5.6. Interaction with Automatic Route Shortening",
      "section_title": true,
      "ja": "3.5.6。自動ルート短縮との相互作用"
    },
    {
      "indent": 3,
      "text": "Because a full source route is not carried in every packet, an alternative method for performing automatic route shortening is necessary for packets using the flow state extension. Instead, nodes promiscuously listen to packets, and if a node receives a packet with (IP Source, IP Destination, Flow ID) found in the Flow Table but the MAC-layer (next hop) destination address of the packet is not this node, the node determines whether the packet was sent by an upstream or downstream node by examining the Hop Count field in the DSR Flow State header. If the Hop Count field is less than the expected Hop Count at this node (that is, the expected Hop Count field in the Flow Table described in Section 5.1), the node assumes that the packet was sent by an upstream node and adds an entry for the packet to its Automatic Route Shortening Table, possibly evicting an earlier entry added to this table. When the packet is then sent to that node for forwarding, the node finds that it has previously received the packet by checking its Automatic Route Shortening Table and returns a gratuitous Route Reply to the source of the packet.",
      "ja": "完全なソースルートは、すべてのパケットで運ばれていないため、自動ルートの短縮を実行するための別の方法は、フロー状態拡張を使用してパケットのために必要です。その代わりに、ノードは無差別パケットをリッスンし、ノードがフローテーブルが、パケットのMAC層（次のホップ）送信先アドレスに見られる（IP送信元、IP宛先、フローID）を持つパケットを受信した場合、このノードではありません、ノードは、パケットがDSRフロー状態ヘッダでホップカウントフィールドを調べることによって、上流または下流のノードによって送信されたか否かを判断します。ホップカウントフィールドは、このノードにおける予想ホップカウントよりも小さい場合（すなわち、セクション5.1で説明したフロー表で予想ホップカウントフィールド）は、ノードは、パケットが上流のノードによって送信されたと仮定し、エントリを追加しますその自動ルート短縮表にパケットのために、おそらくこの表に追加され、以前のエントリを立ち退か。パケットは、次に転送するためにそのノードに送信されると、ノードは、それが以前にその自動ルート短縮表をチェックすることによってパケットを受信し、パケットのソースに無償ルート応答を返したことを認めます。"
    },
    {
      "indent": 0,
      "text": "3.5.7. Loop Detection",
      "section_title": true,
      "ja": "3.5.7。ループ検出"
    },
    {
      "indent": 3,
      "text": "If a node receives a packet for forwarding with TTL lower than expected and default flow forwarding is being used, it sends a Route Error of type DEFAULT_FLOW_UNKNOWN back to the IP source. It can attempt delivery of the packet by normal salvaging (subject to constraints described in Section 8.6.7).",
      "ja": "ノードが予想されると、デフォルトのフローの転送が使用されているよりも低いTTLと共に転送するためのパケットを受信した場合、それはバックIPソースに型DEFAULT_FLOW_UNKNOWNの経路エラーを送信します。これは、通常のサルベージ（セクション8.6.7で説明した制約を受ける）でパケットの配信を試みることができます。"
    },
    {
      "indent": 0,
      "text": "3.5.8. Acknowledgement Destination",
      "section_title": true,
      "ja": "3.5.8。謝辞先"
    },
    {
      "indent": 3,
      "text": "In packets sent using Flow State, the previous hop is not necessarily known. In order to allow nodes that have lost flow state to determine the previous hop, the address of the previous hop can optionally be stored in the Acknowledgement Request. This extension SHOULD NOT be used when a Source Route option is present, MAY be used when flow state routing is used without a Source Route option, and SHOULD be used before Route Maintenance determines that the next-hop destination is unreachable.",
      "ja": "フロー状態を使用して送信されたパケットでは、前のホップは必ずしも知られていません。前のホップを決定するために、流動状態を失ったノードを可能にするために、前のホップのアドレスは、必要に応じて確認応答要求に格納することができます。ソースルートオプションが存在する場合、この拡張を使用すべきでないフロー状態ルーティングは、ソースルートオプションなしで使用する場合、使用することができ、ルートメンテナンスネクストホップ宛先が到達不能であると判断する前に、使用されるべきです。"
    },
    {
      "indent": 0,
      "text": "3.5.9. Crash Recovery",
      "section_title": true,
      "ja": "3.5.9。クラッシュ回復"
    },
    {
      "indent": 3,
      "text": "Each node has a maximum Timeout value that it can possibly generate. This can be based on the largest number that can be set in a timeout option (2**16 - 1 seconds) or may be less than this, set in system software. When a node crashes, it does not establish new flows for a period equal to this maximum Timeout value, in order to avoid colliding with its old Flow IDs.",
      "ja": "各ノードは、それはおそらく生成できることを最大のタイムアウト値を持っています。 （ -  1秒2 ** 16）またはこれ未満とすることができる、システムソフトウェアで設定これは、タイムアウトオプションで設定できる最大数に基づくことができます。ときにノードがクラッシュすると、それはその古いフローのIDとの衝突を避けるために、この最大タイムアウト値に等しい期間のための新しいフローを確立しません。"
    },
    {
      "indent": 0,
      "text": "3.5.10. Rate Limiting",
      "section_title": true,
      "ja": "3.5.10。帯域制限"
    },
    {
      "indent": 3,
      "text": "Flow IDs can be assigned with a counter. More specifically, the \"Current Flow ID\" is kept. When a new default Flow ID needs to be assigned, if the Current Flow ID is odd, the Current Flow ID is assigned as the Flow ID and the Current Flow ID is incremented by one; if the Current Flow ID is even, one plus the Current Flow ID is assigned as the Flow ID and the Current Flow ID is incremented by two.",
      "ja": "フローIDはカウンターで割り当てることができます。具体的には、「現在のフローIDは」保たれています。現在のフローIDが奇数の場合、新しいデフォルトのフローIDは、割り当てる必要がある場合はフローIDと現在のフローIDを1インクリメントするよう、現在のフローIDが割り当てられます。現在のフローIDが偶数の場合、現在のフローIDプラスワンは、フローIDとして割り当てられ、現在のフローIDは2インクリメントされます。"
    },
    {
      "indent": 3,
      "text": "If Flow IDs are assigned in this way, one algorithm for avoiding duplicate, unexpired Flow IDs is to rate limit new Flow IDs to an average rate of n assignments per second, where n is 2**15 divided by the maximum Timeout value. This can be averaged over any period not exceeding the maximum Timeout value.",
      "ja": "フローIDは、このように割り当てられている場合、重複を回避するための1つのアルゴリズムは、期限が切れていないフローIDは、nが最大タイムアウト値で割った2 ** 15で毎秒N個の割り当ての平均速度、新しいフローIDをレート制限することです。これは、最大タイムアウト値を超えない任意の期間にわたって平均化することができます。"
    },
    {
      "indent": 0,
      "text": "3.5.11. Interaction with Packet Salvaging",
      "section_title": true,
      "ja": "3.5.11。パケットサルベージとの相互作用"
    },
    {
      "indent": 3,
      "text": "Salvaging is modified to zero the Flow ID field in the packet. Also, anytime this document refers to the Salvage field in the Source Route option in a DSR Options header, packets without a Source Route option are considered to have the value zero in the Salvage field.",
      "ja": "サルベージは、パケット内のフローIDフィールドをゼロに変更されます。また、いつでもこの文書はDSRオプションヘッダー内のソースルートオプションでサルベージフィールドを参照し、ソースルートオプションを指定せずにパケットがサルベージフィールドに値ゼロを有すると考えられます。"
    },
    {
      "indent": 0,
      "text": "4. Conceptual Data Structures",
      "section_title": true,
      "ja": "4.概念データ構造"
    },
    {
      "indent": 3,
      "text": "This document describes the operation of the DSR protocol in terms of a number of conceptual data structures. This section describes each of these data structures and provides an overview of its use in the protocol. In an implementation of the protocol, these data structures MUST be implemented in a manner consistent with the external behavior described in this document, but the choice of implementation used is otherwise unconstrained. Additional conceptual data structures are required for the optional flow state extensions to DSR; these data structures are described in Section 5.",
      "ja": "この文書では、概念的なデータ構造の数の点でDSRプロトコルの動作を説明します。このセクションでは、これらのデータ構造のそれぞれについて説明し、プロトコルにおけるその使用の概要を提供します。プロトコルの実装では、これらのデータ構造は、この文書に記載された外部挙動と一致する形で実施されなければならないが、使用するインプリメンテーションの選択は、他の非拘束です。追加の概念的なデータ構造はDSRに、オプションのフロー状態の拡張のために必要とされます。これらのデータ構造は、第5節で説明されています。"
    },
    {
      "indent": 0,
      "text": "4.1. Route Cache",
      "section_title": true,
      "ja": "4.1。ルートキャッシュ"
    },
    {
      "indent": 3,
      "text": "Each node implementing DSR MUST maintain a Route Cache, containing routing information needed by the node. A node adds information to its Route Cache as it learns of new links between nodes in the ad hoc network; for example, a node may learn of new links when it receives a packet carrying a Route Request, Route Reply, or DSR source route. Likewise, a node removes information from its Route Cache as it learns that existing links in the ad hoc network have broken. For example, a node may learn of a broken link when it receives a packet carrying a Route Error or through the link-layer retransmission mechanism reporting a failure in forwarding a packet to its next-hop destination.",
      "ja": "DSRを実装する各ノードは、そのノードによって必要とされるルーティング情報を含む、ルートキャッシュを維持しなければなりません。それは、アドホックネットワーク内のノード間の新しいリンクを知るように、ノードは、そのルートキャッシュに情報を追加します。それがルート要求、経路応答、またはDSRソースルートを運ぶパケットを受信した場合、たとえば、ノードが新しいリンクを知ることがあります。それは、アドホックネットワーク内の既存のリンクが壊れていることを知ると同様に、ノードは、そのルートキャッシュから情報を削除します。それは、その次のホップ先にパケットを転送に失敗したことを報告リンク層再送信機構を介して、または経路エラーを運ぶパケットを受信した場合、例えば、ノードが壊れたリンクを知ることができます。"
    },
    {
      "indent": 3,
      "text": "Anytime a node adds new information to its Route Cache, the node SHOULD check each packet in its own Send Buffer (Section 4.2) to determine whether a route to that packet's IP Destination Address now exists in the node's Route Cache (including the information just added to the Cache). If so, the packet SHOULD then be sent using that route and removed from the Send Buffer.",
      "ja": "いつでもノードは、ノードがそのパケットのIP宛先アドレスへのルートは、今追加した情報を含む（ノードのルートキャッシュに存在するかどうかを判断するためのバッファ（4.2節）を送信し、自身の各パケットをチェックする必要があり、そのルートキャッシュに新しい情報を追加キャッシュへ）。その場合、パケットはそのルートを使用して送信し、送信バッファから削除する必要があります。"
    },
    {
      "indent": 3,
      "text": "It is possible to interface a DSR network with other networks, external to this DSR network. Such external networks may, for example, be the Internet or may be other ad hoc networks routed with a routing protocol other than DSR. Such external networks may also be other DSR networks that are treated as external networks in order to improve scalability. The complete handling of such external networks is beyond the scope of this document. However, this document specifies a minimal set of requirements and features necessary to allow nodes only implementing this specification to interoperate correctly with nodes implementing interfaces to such external networks. This minimal set of requirements and features involve the First Hop External (F) and Last Hop External (L) bits in a DSR Source Route option (Section 6.7) and a Route Reply option (Section 6.3) in a packet's DSR Options header (Section 6). These requirements also include the addition of an External flag bit tagging each link in the Route Cache, copied from the First Hop External (F) and Last Hop External (L) bits in the DSR Source Route option or Route Reply option from which this link was learned.",
      "ja": "このDSRネットワークの外部の他のネットワークとのDSRネットワークをインタフェースすることが可能です。そのような外部ネットワークは、例えば、インターネットであってもよく、またはDSR以外のルーティングプロトコルとルーティング他のアドホックネットワークであってもよいです。そのような外部ネットワークはまた、スケーラビリティを向上させるために外部ネットワークとして扱われ、他のDSRのネットワークであってもよいです。そのような外部ネットワークの完全な取り扱いは、このドキュメントの範囲を超えています。しかし、この文書は、要件の最小セットを指定してのみ、この仕様を実装するノードは、外部ネットワークへのインタフェースを実装するノードと正しく相互運用できるようにする必要があります。要件や機能のこの最小限のセットは、DSRソースルートオプション（6.7節）およびルートは（パケットのDSRオプションヘッダにオプション（6.3節）を返信セクションの最初のホップの外部（F）と最終ホップ外部（L）ビットを必要とします6）。これらの要件はまた、最初のホップの外部（F）からコピーされ、DSRソースルートオプションまたはルートにおける最終ホップ外部（L）ビットがこのリンクオプションを返信、ルートキャッシュ内の各リンクをタグ付け外部フラグビットの付加を含みます学習されました。"
    },
    {
      "indent": 3,
      "text": "The Route Cache SHOULD support storing more than one route to each destination. In searching the Route Cache for a route to some destination node, the Route Cache is searched by destination node address. The following properties describe this searching function on a Route Cache:",
      "ja": "ルートキャッシュは各宛先に複数のルートを保存するサポートすべきです。いくつかの宛先ノードへのルートのためのルートキャッシュの検索では、ルートキャッシュは、宛先ノード・アドレスによって検索されます。次のプロパティは、ルートキャッシュにこの検索機能について説明します。"
    },
    {
      "indent": 3,
      "text": "- Each implementation of DSR at any node MAY choose any appropriate strategy and algorithm for searching its Route Cache and selecting a \"best\" route to the destination from among those found. For example, a node MAY choose to select the shortest route to the destination (the shortest sequence of hops), or it MAY use an alternate metric to select the route from the Cache.",
      "ja": " - 任意のノードで、DSRの各実装は、そのルートキャッシュを検索し、見つかったものの中から目的地への「最良の」ルートを選択するための任意の適切な戦略とアルゴリズムを選択することができます。例えば、ノードは、宛先（ホップの最短配列）への最短経路を選択することもあれば、キャッシュからの経路を選択する代替メトリックを使用するかもしれません。"
    },
    {
      "indent": 3,
      "text": "- However, if there are multiple cached routes to a destination, the selection of routes when searching the Route Cache SHOULD prefer routes that do not have the External flag set on any link. This preference will select routes that lead directly to the target node over routes that attempt to reach the target via any external networks connected to the DSR ad hoc network.",
      "ja": " - 複数のキャッシュされたルートが先にある場合は、ルートキャッシュを検索するルートの選択は、任意のリンクに設定された外部旗を持っていないルートを好むべきです。この設定は、DSRアドホックネットワークに接続された任意の外部ネットワークを経由して目標を達成しようとしたルート上のターゲットノードに直接つながるルートを選択します。"
    },
    {
      "indent": 3,
      "text": "- In addition, any route selected when searching the Route Cache MUST NOT have the External bit set for any links other than possibly the first link, the last link, or both; the External bit MUST NOT be set for any intermediate hops in the route selected.",
      "ja": " - また、任意の経路が選択された可能性の最初のリンク、最後のリンク、またはその両方以外のリンクに設定された外部ビットを有してはならないルートキャッシュを検索するときに、外部ビットは、選択した経路における任意の中間ホップのために設定してはいけません。"
    },
    {
      "indent": 3,
      "text": "An implementation of a Route Cache MAY provide a fixed capacity for the cache, or the cache size MAY be variable. The following properties describe the management of available space within a node's Route Cache:",
      "ja": "ルートキャッシュの実装は、キャッシュ用の固定容量を提供したり、キャッシュサイズは可変であってもよいです。次のプロパティは、ノードのルートキャッシュ内で利用可能なスペースの管理について説明します。"
    },
    {
      "indent": 3,
      "text": "- Each implementation of DSR at each node MAY choose any appropriate policy for managing the entries in its Route Cache, such as when limited cache capacity requires a choice of which entries to retain in the Cache. For example, a node MAY chose a \"least recently used\" (LRU) cache replacement policy, in which the entry last used longest ago is discarded from the cache if a decision needs to be made to allow space in the cache for some new entry being added.",
      "ja": " - 各ノードでのDSRの各実装は、このような制限はキャッシュ容量がキャッシュに保持するエントリその選択を要求するときのように、そのルートキャッシュ内のエントリを管理するための任意の適切なポリシーを選択することができます。例えば、ノードMAYは、エントリが最後の決定は、いくつかの新しいエントリのために、キャッシュ内のスペースを確保するために行われる必要がある場合、最長は前にキャッシュから破棄され使用されている「最低使用」（LRU）キャッシュ置換ポリシーを選択しました追加されています。"
    },
    {
      "indent": 3,
      "text": "- However, the Route Cache replacement policy SHOULD allow routes to be categorized based upon \"preference\", where routes with a higher preferences are less likely to be removed from the cache. For example, a node could prefer routes for which it initiated a Route Discovery over routes that it learned as the result of promiscuous snooping on other packets. In particular, a node SHOULD prefer routes that it is presently using over those that it is not.",
      "ja": " - しかし、ルートキャッシュ置換ポリシーは、ルートがより高い優先を持つルートはキャッシュから除去されにくい「優先」に基づいて分類することを可能にするべきです。例えば、ノードは、それが他のパケットに無差別スヌープの結果として学習経路上に経路探索を開始したのルートを好む可能性があります。具体的には、ノードは、現在そうでないものの上に使用しているルートを好むべきです。"
    },
    {
      "indent": 3,
      "text": "Any suitable data structure organization, consistent with this specification, MAY be used to implement the Route Cache in any node. For example, the following two types of organization are possible:",
      "ja": "任意の適切なデータ構造組織は、本明細書と一致して、任意のノードでルートキャッシュを実装するために使用され得ます。たとえば、組織は、次の2種類が考えられます。"
    },
    {
      "indent": 3,
      "text": "- In DSR, the route returned in each Route Reply that is received by the initiator of a Route Discovery (or that is learned from the header of overhead packets, as described in Section 8.1.4) represents a complete path (a sequence of links) leading to the destination node. By caching each of these paths separately, a \"path cache\" organization for the Route Cache can be formed. A path cache is very simple to implement and easily guarantees that all routes are loop-free, since each individual route from a Route Reply or Route Request or used in a packet is loop-free. To search for a route in a path cache data structure, the sending node can simply search its Route Cache for any path (or prefix of a path) that leads to the intended destination node.",
      "ja": " -  DSRでは、ルートは、完全なパス（リンクのシーケンスを表すことを経路探索の開始によって受信される（またはセクション8.1.4で説明したようにそれは、オーバーヘッドパケットのヘッダから学習された）返信各経路に返さ）宛先ノードに至ります。別々にこれらのパスの各々をキャッシュすることによって、ルートキャッシュの「パス・キャッシュ」組織を形成することができます。経路キャッシュが実装するのは非常に簡単であり、容易パケットで使用される各個々の経路応答またはルート要求から経路またはループフリーであるため、すべてのルートは、ループフリーであることを保証します。パスキャッシュデータ構造内のルートを検索するには、単に目的の宛先ノードにつながる任意のパス（またはパスの接頭辞）のためにそのルートキャッシュを検索することができます送信ノード。"
    },
    {
      "indent": 6,
      "text": "This type of organization for the Route Cache in DSR has been extensively studied through simulation [BROCH98, HU00, JOHANSSON99, MALTZ99a] and through implementation of DSR in a mobile outdoor testbed under significant workload [MALTZ99b, MALTZ00, MALTZ01].",
      "ja": "DSRにおけるルートキャッシュのための組織のこのタイプは、広範囲に大きな作業負荷の下で携帯屋外テストベッド[MALTZ99b、MALTZ00、MALTZ01]でシミュレーション[BROCH98、HU00、JOHANSSON99、MALTZ99a]を通って、DSRの実装により研究されてきました。"
    },
    {
      "indent": 3,
      "text": "- Alternatively, a \"link cache\" organization could be used for the Route Cache, in which each individual link (hop) in the routes returned in Route Reply packets (or otherwise learned from the header of overhead packets) is added to a unified graph data structure of this node's current view of the network topology. To search for a route in link cache, the sending node must use a more complex graph search algorithm, such as the well-known Dijkstra's shortest-path algorithm, to find the current best path through the graph to the destination node. Such an algorithm is more difficult to implement and may require significantly more CPU time to execute.",
      "ja": " - あるいは、「リンク・キャッシュ」組織は、統一されたグラフに追加されたルートに戻さ経路内の個々のリンク（ホップ）（オーバーヘッドパケットのヘッダから学習さもなければまたは）パケットを返信、ルートキャッシュを使用することができますネットワークトポロジのこのノードの現在のビューのデータ構造。リンクキャッシュ内のルートを検索するには、送信ノードは、宛先ノードへのグラフを介して電流の最適なパスを見つけるために、そのようなよく知られているダイクストラの最短経路アルゴリズムとして、より複雑なグラフ探索アルゴリズムを使用する必要があります。このようなアルゴリズムを実装し、実行するためにかなり多くのCPU時間を必要とすることがより困難です。"
    },
    {
      "indent": 6,
      "text": "However, a link cache organization is more powerful than a path cache organization, in its ability to effectively utilize all of the potential information that a node might learn about the state of the network. In particular, links learned from different Route Discoveries or from the header of any overheard packets can be merged together to form new routes in the network, but this is not possible in a path cache due to the separation of each individual path in the cache.",
      "ja": "ただし、リンクのキャッシュ組織が効果的にノードがネットワークの状態を知るかもしれない潜在的なすべての情報を活用する能力で、パスのキャッシュ構成よりも強力です。具体的には、リンクは異なるルート発見から、または任意の傍受パケットのヘッダから学習ネットワーク内の新しいルートを形成するために一緒に併合するが、これは、キャッシュ内の各個々のパスの分離に経路キャッシュに不可能であることができます。"
    },
    {
      "indent": 6,
      "text": "This type of organization for the Route Cache in DSR, including the effect of a range of implementation choices, has been studied through detailed simulation [HU00].",
      "ja": "実装の選択の範囲の効果を含めDSRにおけるルートキャッシュのための組織のこのタイプは、[HU00]詳細なシミュレーションにより研究されてきました。"
    },
    {
      "indent": 3,
      "text": "The choice of data structure organization to use for the Route Cache in any DSR implementation is a local matter for each node and affects only performance; any reasonable choice of organization for the Route Cache does not affect either correctness or interoperability.",
      "ja": "任意のDSR実装でルートキャッシュに使用するデータ構造組織の選択は、各ノードのローカルな問題であり、唯一のパフォーマンスに影響を与えます。ルートキャッシュのための組織のいずれかの合理的な選択が正しいか、相互運用性のどちらかには影響を与えません。"
    },
    {
      "indent": 3,
      "text": "Each entry in the Route Cache SHOULD have a timeout associated with it, to allow that entry to be deleted if not used within some time. The particular choice of algorithm and data structure used to implement the Route Cache SHOULD be considered in choosing the timeout for entries in the Route Cache. The configuration variable RouteCacheTimeout defined in Section 9 specifies the timeout to be applied to entries in the Route Cache, although it is also possible to instead use an adaptive policy in choosing timeout values rather than using a single timeout setting for all entries. For example, the Link-MaxLife cache design (below) uses an adaptive timeout algorithm and does not use the RouteCacheTimeout configuration variable.",
      "ja": "ルートキャッシュ内の各エントリには、いくつかの時間内に使用されていない場合、そのエントリを削除できるようにするために、それに関連付けられたタイムアウトを持つべきである（SHOULD）。ルートキャッシュを実装するために使用されるアルゴリズムとデータ構造の特定の選択は、ルートキャッシュ内のエントリのタイムアウトを選択する際に考慮されるべきです。代わりに、タイムアウト値を選択するのではなく、すべてのエントリの設定単一のタイムアウトを使用して、適応ポリシーを使用することも可能であるが、セクション9で定義されたコンフィギュレーション変数RouteCacheTimeoutは、ルートキャッシュ内のエントリに適用されるタイムアウトを指定します。例えば、リンクMaxLifeキャッシュの設計は（下）適応タイムアウトアルゴリズムを使用し、RouteCacheTimeout構成変数を使用しません。"
    },
    {
      "indent": 3,
      "text": "As guidance to implementers, Appendix A describes a type of link cache known as \"Link-MaxLife\" that has been shown to outperform other types of link caches and path caches studied in detailed simulation [HU00]. Link-MaxLife is an adaptive link cache in which each link in the cache has a timeout that is determined dynamically by the caching node according to its observed past behavior of the two nodes at the ends of the link. In addition, when selecting a route for a packet being sent to some destination, among cached routes of equal length (number of hops) to that destination, Link-MaxLife selects the route with the longest expected lifetime (highest minimum timeout of any link in the route). Use of the Link-MaxLife design for the Route Cache is recommended in implementations of DSR.",
      "ja": "実装者への指導として、付録Aには、詳細なシミュレーション[HU00]で研究リンクキャッシュとパスキャッシュの他のタイプをアウトパフォームすることが示されている「リンクMaxLife」として知られているリンク・キャッシュのタイプを記述する。リンクmaxlifeがキャッシュ内の各リンクは、リンクの両端における2つのノードのその観察過去の行動に応じてキャッシングノードによって動的に決定されたタイムアウトを有する適応リンクキャッシュです。パケットのルートを選択する際に加えて、その宛先に等しい長さ（ホップ数）のキャッシュされた経路のうち、いくつかの宛先に送信され、リンクmaxlifeが（任意のリンクで最高の最小タイムアウトを最長の予想寿命を有する経路を選択しますルート）。ルートキャッシュのリンクMaxLifeデザインの使用は、DSRの実装で推奨されます。"
    },
    {
      "indent": 0,
      "text": "4.2. Send Buffer",
      "section_title": true,
      "ja": "4.2。バッファを送信"
    },
    {
      "indent": 3,
      "text": "The Send Buffer of a node implementing DSR is a queue of packets that cannot be sent by that node because it does not yet have a source route to each such packet's destination. Each packet in the Send Buffer is logically associated with the time that it was placed into the buffer and SHOULD be removed from the Send Buffer and silently discarded after a period of SendBufferTimeout after initially being placed in the buffer. If necessary, a FIFO strategy SHOULD be used to evict packets before they time out to prevent the buffer from overflowing.",
      "ja": "DSRを実装するノードの送信バッファは、それはまだ、このような各パケットの宛先への送信元ルートを持っていないため、そのノードが送信できないパケットのキューです。送信バッファ内の各パケットは、論理的に、それがバッファに入れ、送信バッファから除去されるべきであり、静かに最初にバッファに置かれた後SendBufferTimeoutの期間後に廃棄された時間に関連付けられています。必要であれば、FIFO戦略は、彼らがあふれてからバッファを防ぐために、タイムアウトする前にパケットを立ち退かせるために使用されるべきです。"
    },
    {
      "indent": 3,
      "text": "Subject to the rate limiting defined in Section 4.3, a Route Discovery SHOULD be initiated as often as allowed for the destination address of any packets residing in the Send Buffer.",
      "ja": "4.3節で定義されたレート制限に従うことを条件として、経路探索は、できるだけ頻繁に送信バッファに存在する任意のパケットの宛先アドレスに許可として開始すべきです。"
    },
    {
      "indent": 0,
      "text": "4.3. Route Request Table",
      "section_title": true,
      "ja": "4.3。経路要求表"
    },
    {
      "indent": 3,
      "text": "The Route Request Table of a node implementing DSR records information about Route Requests that have been recently originated or forwarded by this node. The table is indexed by IP address.",
      "ja": "最近、このノードによって発信または転送されたルート要求についてDSRレコードの情報を実装するノードの経路要求テーブル。テーブルは、IPアドレスでインデックス化されます。"
    },
    {
      "indent": 3,
      "text": "The Route Request Table on a node records the following information about nodes to which this node has initiated a Route Request:",
      "ja": "ノード上のルート要求表は、このノードがルート要求を開始した先のノードに関する以下の情報を記録します。"
    },
    {
      "indent": 3,
      "text": "- The Time-to-Live (TTL) field used in the IP header of the Route Request for the last Route Discovery initiated by this node for that target node. This value allows the node to implement a variety of algorithms for controlling the spread of its Route Request on each Route Discovery initiated for a target. As examples, two possible algorithms for this use of the TTL field are described in Section 3.3.3.",
      "ja": " - そのターゲットノードに対して、このノードによって開始された最後の経路探索のためのルート・リクエストのIPヘッダで使用されるタイム・ツー・ライブ（TTL）フィールド。この値は、ノードがターゲットの開始各経路探索にそのルート・リクエストの広がりを制御するための様々なアルゴリズムを実装することを可能にします。例として、TTLフィールドのこの使用のための二つの可能なアルゴリズムは、セクション3.3.3に記載されています。"
    },
    {
      "indent": 3,
      "text": "- The time that this node last originated a Route Request for that target node.",
      "ja": " - このノードが最後にそのターゲットノードのルート要求を発信している時間。"
    },
    {
      "indent": 3,
      "text": "- The number of consecutive Route Discoveries initiated for this target since receiving a valid Route Reply giving a route to that target node.",
      "ja": " - 有効なルートを受信して​​いるので、この目標のために開始連続ルート発見の数は、ターゲット・ノードへの経路を与える返信。"
    },
    {
      "indent": 3,
      "text": "- The remaining amount of time before which this node MAY next attempt at a Route Discovery for that target node. When the node initiates a new Route Discovery for this target node, this field in the Route Request Table entry for that target node is initialized to the timeout for that Route Discovery, after which the node MAY initiate a new Discovery for that target. Until a valid Route Reply is received for this target node address, a node MUST implement a back-off algorithm in determining this timeout value for each successive Route Discovery initiated for this target using the same Time-to-Live (TTL) value in the IP header of the Route Request packet. The timeout between such consecutive Route Discovery initiations SHOULD increase by doubling the timeout value on each new initiation.",
      "ja": " - そのターゲットノードのための経路探索にする前に、このノードMAY次の試行時間の残量。ノードは、このターゲット・ノードのための新しい経路探索を開始すると、そのターゲットノードの経路要求テーブルのエントリでは、このフィールドは、ノードがその目標のために、新たな発見を開始することができるた後、その経路探索のためにタイムアウトに初期化されます。有効なルート応答は、このターゲット・ノード・アドレスのために受信されるまで、ノードは各連続ルート発見のために、このタイムアウト値を決定する際にバックオフアルゴリズムを実装する必要があり、同じ時間 - ライブ（TTL）値を使用して、この目標のために開始ルート要求パケットのIPヘッダ。そのような連続した経路探索イニシエーションの間のタイムアウトはそれぞれの新しい開始のタイムアウト値を倍にすることによって増加させるべきです。"
    },
    {
      "indent": 3,
      "text": "In addition, the Route Request Table on a node also records the following information about initiator nodes from which this node has received a Route Request:",
      "ja": "加えて、ノード上のルート要求表には、このノードがルート要求を受信したから、イニシエータノードに関する以下の情報を記録します。"
    },
    {
      "indent": 3,
      "text": "- A FIFO cache of size RequestTableIds entries containing the Identification value and target address from the most recent Route Requests received by this node from that initiator node.",
      "ja": " - 識別値を含むサイズRequestTableIdsエントリのFIFOキャッシュとそのイニシエータノードからこのノードが受信した最新のルート要求からアドレスをターゲットにしています。"
    },
    {
      "indent": 3,
      "text": "Nodes SHOULD use an LRU policy to manage the entries in their Route Request Table.",
      "ja": "ノードは、その経路要求テーブル内のエントリを管理するためにLRUポリシーを使用すべきです。"
    },
    {
      "indent": 3,
      "text": "The number of Identification values to retain in each Route Request Table entry, RequestTableIds, MUST NOT be unlimited, since, in the worst case, when a node crashes and reboots, the first RequestTableIds Route Discoveries it initiates after rebooting could appear to be duplicates to the other nodes in the network. In addition, a node SHOULD base its initial Identification value, used for Route Discoveries after rebooting, on a battery backed-up clock or other persistent memory device, if available, in order to help avoid any possible such delay in successfully discovering new routes after rebooting; if no such source of initial Identification value is available, a node after rebooting SHOULD base its initial Identification value on a random number.",
      "ja": "リブートがに重複であるように見える可能性が後最悪の場合には、ときにノードがクラッシュし、再起動各経路要求テーブルエントリに保持する識別値の数、RequestTableIds、以降、無制限であってはなりません、最初RequestTableIdsルート発見は、それが開始しますネットワーク内の他のノード。利用可能な場合に加えて、ノードが正常に後に新しいルートを発見する任意の可能なこのような遅延を回避するために、バッテリバックアップされたクロックまたは他の持続性メモリデバイスに、再起動後にルート発見のために使用される初期識別値を、ベースSHOULDリブート;初期識別値のそのようなソースが利用可能でない場合、再起動後のノードは、乱数に初期識別値の基礎とすべきです。"
    },
    {
      "indent": 0,
      "text": "4.4. Gratuitous Route Reply Table",
      "section_title": true,
      "ja": "4.4。無償ルート応答表"
    },
    {
      "indent": 3,
      "text": "The Gratuitous Route Reply Table of a node implementing DSR records information about \"gratuitous\" Route Replies sent by this node as part of automatic route shortening. As described in Section 3.4.3, a node returns a gratuitous Route Reply when it overhears a packet transmitted by some node, for which the node overhearing the packet was not the intended next-hop node but was named later in the unexpended hops of the source route in that packet; the node overhearing the packet returns a gratuitous Route Reply to the original sender of the packet, listing the shorter route (not including the hops of the source route \"skipped over\" by this packet). A node uses its Gratuitous Route Reply Table to limit the rate at which it originates gratuitous Route Replies to the same original sender for the same node from which it overheard a packet to trigger the gratuitous Route Reply.",
      "ja": "無償ルートは「無償」ルートに関する情報を自動ルート短縮の一部として、このノードによって送信された返信DSRレコードを実装するノードの表を返信。セクション3.4.3で説明したように、パケットを傍受ノードが意図次ホップノードされなかったいくつかのノードによって送信されたパケットを傍受しかしのunexpendedホップで後命名された場合、ノードは、無償ルート応答を返しますそのパケットの送信元ルート。パケットを傍受ノードは、無償経路が短い経路（送信元経路のホップを含まないが、このパケットによって「スキップ」）リスト、パケットの元の送信者に返信戻ります。ノードは、その無償ルートを使用し、それは無償のルートは、それが無償ルート応答をトリガするパケットを耳のと同じノードで同じ元の送信者に返信発信する速度を制限するために表を返信。"
    },
    {
      "indent": 3,
      "text": "Each entry in the Gratuitous Route Reply Table of a node contains the following fields:",
      "ja": "ノードの無償ルート応答テーブルの各エントリには、以下のフィールドが含まれています。"
    },
    {
      "indent": 3,
      "text": "- The address of the node to which this node originated a gratuitous Route Reply.",
      "ja": " - このノードが無償ルート応答を発信したノードのアドレス。"
    },
    {
      "indent": 3,
      "text": "- The address of the node from which this node overheard the packet triggering that gratuitous Route Reply.",
      "ja": " - このノードがその無償ルート応答をトリガーパケットを傍受するノードのアドレス。"
    },
    {
      "indent": 3,
      "text": "- The remaining time before which this entry in the Gratuitous Route Reply Table expires and SHOULD be deleted by the node. When a node creates a new entry in its Gratuitous Route Reply Table, the timeout value for that entry SHOULD be initialized to the value GratReplyHoldoff.",
      "ja": " - 無償経路上でこのエントリが表返信れるまでの残り時間が満了すると、ノードによって削除されるべきです。ノードは、無償のルート表を返信その中に新しいエントリを作成すると、そのエントリのタイムアウト値は、値GratReplyHoldoffに初期化する必要があります。"
    },
    {
      "indent": 3,
      "text": "When a node overhears a packet that would trigger a gratuitous Route Reply, if a corresponding entry already exists in the node's Gratuitous Route Reply Table, then the node SHOULD NOT send a gratuitous Route Reply for that packet. Otherwise (i.e., if no corresponding entry already exists), the node SHOULD create a new entry in its Gratuitous Route Reply Table to record that gratuitous Route Reply, with a timeout value of GratReplyHoldoff.",
      "ja": "ノードは、対応するエントリがすでに表を返信ノードの無償ルートに存在する場合、無償経路応答をトリガーするパケットを耳にすると、そのノードは、いわれのないルートは、そのパケットに対する応答送るべきではありません。そうでない場合（すなわち、該当するエントリが既に存在しない場合）、ノードは、その無償ルートに新しいエントリを作成する必要GratReplyHoldoffのタイムアウト値と、その無償ルート応答を記録する表を返信。"
    },
    {
      "indent": 0,
      "text": "4.5. Network Interface Queue and Maintenance Buffer",
      "section_title": true,
      "ja": "4.5。ネットワークインターフェイスキューとメンテナンスバッファ"
    },
    {
      "indent": 3,
      "text": "Depending on factors such as the structure and organization of the operating system, protocol stack implementation, network interface device driver, and network interface hardware, a packet being transmitted could be queued in a variety of ways. For example, outgoing packets from the network protocol stack might be queued at the operating system or link layer, before transmission by the network interface. The network interface might also provide a retransmission mechanism for packets, such as occurs in IEEE 802.11 [IEEE80211]; the DSR protocol, as part of Route Maintenance, requires limited buffering of packets already transmitted for which the reachability of the next-hop destination has not yet been determined. The operation of DSR is defined here in terms of two conceptual data structures that, together, incorporate this queuing behavior.",
      "ja": "そのようなオペレーティングシステム、プロトコルスタックの実装、ネットワークインターフェースデバイスドライバ、およびネットワーク・インターフェース・ハードウェアの構造と組織などの要因に応じて、送信されるパケットは、様々な方法でキューに入れることができました。例えば、ネットワーク・プロトコル・スタックからの送信パケットは、ネットワークインタフェースによる送信の前に、オペレーティング・システムまたはリンク層でキューイングされるかもしれません。 IEEE 802.11 [IEEE80211]に生じるようなネットワーク・インターフェースはまた、パケットの再送機構を提供するかもしれません。 DSRプロトコルは、ルートメンテナンスの一部として、次のホップ先の到達可能性は、まだ決定されていないために既に送信されたパケットの制限されたバッファリングを必要とします。 DSRの動作は、一緒になって、このキューイング動作を組み込んだ2つの概念的なデータ構造の観点から、ここで定義されています。"
    },
    {
      "indent": 3,
      "text": "The Network Interface Queue of a node implementing DSR is an output queue of packets from the network protocol stack waiting to be transmitted by the network interface; for example, in the 4.4BSD Unix network protocol stack implementation, this queue for a network interface is represented as a \"struct ifqueue\" [WRIGHT95]. This queue is used to hold packets while the network interface is in the process of transmitting another packet.",
      "ja": "DSRを実装するノードのネットワークインターフェイスキューは、ネットワーク・インタフェースによって送信されるのを待っているネットワーク・プロトコル・スタックからのパケットの出力キューです。例えば、4.4BSD Unixのネットワーク・プロトコル・スタックの実装では、ネットワークインターフェイスのこのキューは、「構造体ifqueue」[WRIGHT95]として表されます。このキューは、ネットワークインタフェースが別のパケットを送信するプロセスにある間、パケットを保持するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The Maintenance Buffer of a node implementing DSR is a queue of packets sent by this node that are awaiting next-hop reachability confirmation as part of Route Maintenance. For each packet in the Maintenance Buffer, a node maintains a count of the number of retransmissions and the time of the last retransmission. Packets are added to the Maintenance buffer after the first transmission attempt is made. The Maintenance Buffer MAY be of limited size; when adding a new packet to the Maintenance Buffer, if the buffer size is insufficient to hold the new packet, the new packet SHOULD be silently discarded. If, after MaxMaintRexmt attempts to confirm next-hop reachability of some node, no confirmation is received, all packets in this node's Maintenance Buffer with this next-hop destination SHOULD be removed from the Maintenance Buffer. In this case, the node also SHOULD originate a Route Error for this packet to each original source of a packet removed in this way (Section 8.3) and SHOULD salvage each packet removed in this way (Section 8.3.6) if it has another route to that packet's IP Destination Address in its Route Cache. The definition of MaxMaintRexmt conceptually includes any retransmissions that might be attempted for a packet at the link layer or within the network interface hardware. The timeout value to use for each transmission attempt for an acknowledgement request depends on the type of acknowledgement mechanism used by Route Maintenance for that attempt, as described in Section 8.3.",
      "ja": "DSRを実装するノードのメンテナンスバッファルートメンテナンスの一部として、ネクストホップ到達性確認を待っているこのノードによって送信されたパケットのキューです。メンテナンスバッファ内の各パケットのために、ノードは、再送回数と最後の再送信の時間のカウントを維持します。最初の送信試行が行われた後パケットがメンテナンスバッファに追加されます。メンテナンスバッファは、限られたサイズのものであってもよいです。メンテナンスバッファに新たなパケットを追加する場合、バッファサイズは、新しいパケットを保持するのに不十分である場合、新たなパケットが静かに捨てられるべきです。 MaxMaintRexmtは、いくつかのノードのネクストホップ到達可能性を確認しようとした後、何の確認が受信されない場合、この次ホップ先このノードのメンテナンスバッファ内のすべてのパケットが保守バッファから除去されるべきです。この場合、ノードはまた、このようにして除去パケット（セクション8.3）の各元のソースにこのパケットの経路エラーを発信すべきであり、それは別のルートを持っている場合は、この方法（セクション8.3.6）で除去し、各パケットを回収すべきですそのルートキャッシュ内のパケットのIP宛先アドレスへ。 MaxMaintRexmtの定義は、概念的にリンク層で、またはネットワーク・インターフェース・ハードウェア内のパケットのために試みられている可能性のある再送信を含んでいます。応答要求に対する各送信試行のために使用するタイムアウト値は、8.3節で説明したように、その試みのルートメンテナンスにより使用される確認応答機構のタイプに依存します。"
    },
    {
      "indent": 0,
      "text": "4.6. Blacklist",
      "section_title": true,
      "ja": "4.6。ブラックリスト"
    },
    {
      "indent": 3,
      "text": "When a node using the DSR protocol is connected through a network interface that requires physically bidirectional links for unicast transmission, the node MUST maintain a blacklist. The blacklist is a table, indexed by neighbor node address, that indicates that the link between this node and the specified neighbor node may not be bidirectional. A node places another node's address in this list when it believes that broadcast packets from that other node reach this node, but that unicast transmission between the two nodes is not possible. For example, if a node forwarding a Route Reply discovers that the next hop is unreachable, it places that next hop in the node's blacklist.",
      "ja": "DSRプロトコルを使用してノードがユニキャスト送信のために物理的に双方向リンクを必要とするネットワーク・インターフェースを介して接続されている場合、ノードは、ブラックリストを維持しなければなりません。ブラックリストは、このノードと指定された隣接ノードの間のリンクが双方向ではないかもしれないことを示す、隣接ノードアドレスによって索引付け、テーブルです。それは、他のノードからのブロードキャストパケットがこのノードに到達することを考えていますが、2つのノード間でそのユニキャスト送信が可能でない場合、ノードはこのリスト内の別のノードのアドレスを配置します。ルート返信を転送するノードは、次のホップが到達不能であることを発見した場合、それはノードのブラックリストにその次のホップを配置します。"
    },
    {
      "indent": 3,
      "text": "Once a node discovers that it can communicate bidirectionally with one of the nodes listed in the blacklist, it SHOULD remove that node from the blacklist. For example, if node A has node B listed in its blacklist, but after transmitting a Route Request, node A hears B forward the Route Request with a route record indicating that the broadcast from A to B was successful, then A SHOULD remove the entry for node B from its blacklist.",
      "ja": "ノードは、それがブラックリストに記載されているいずれかのノードと双方向通信することができることを発見したら、それはブラックリストからそのノードを削除する必要があります。例えば、ノードAは、そのブラックリストにリストされたノードBを有する場合が、ルート要求を送信した後、ノードAは、AからBへのブロードキャストが成功した後、エントリを削除すべきであることを示すBは、ルートレコードにルート要求を転送聞きますそのブラックリストからのノードBのために。"
    },
    {
      "indent": 3,
      "text": "A node MUST associate a state with each node listed in its blacklist, specifying whether the unidirectionality of the link to that node is \"questionable\" or \"probable\". Each time the unreachability is positively determined, the node SHOULD set the state to \"probable\". After the unreachability has not been positively determined for some amount of time, the state SHOULD revert to \"questionable\". A node MAY expire entries for nodes from its blacklist after a reasonable amount of time.",
      "ja": "ノードは、そのノードへのリンクの一方向性が「疑わしい」または「可能性」であるか否かを指定して、そのブラックリストにリストされた各ノードで状態を関連付ける必要があります。不到達が正に判断されるたびに、ノードは「可能性」の状態を設定する必要があります。不通が積極時間のいくつかの量のために決定されていない後、状態が「疑わしい」に戻すべきです。ノードは、妥当な時間後にブラックリストからのノードのエントリが期限切れになることがあります。"
    },
    {
      "indent": 0,
      "text": "5. Additional Conceptual Data Structures for Flow State Extension",
      "section_title": true,
      "ja": "フロー状態拡張のため5.追加の概念データ構造"
    },
    {
      "indent": 3,
      "text": "This section defines additional conceptual data structures used by the optional \"flow state\" extension to DSR. In an implementation of the protocol, these data structures MUST be implemented in a manner consistent with the external behavior described in this document, but the choice of implementation used is otherwise unconstrained.",
      "ja": "このセクションでは、DSRのオプションの「流動状態」拡張子で使用される追加の概念的なデータ構造を定義します。プロトコルの実装では、これらのデータ構造は、この文書に記載された外部挙動と一致する形で実施されなければならないが、使用するインプリメンテーションの選択は、他の非拘束です。"
    },
    {
      "indent": 0,
      "text": "5.1. Flow Table",
      "section_title": true,
      "ja": "5.1。フロー表"
    },
    {
      "indent": 3,
      "text": "A node implementing the flow state extension MUST implement a Flow Table or other data structure consistent with the external behavior described in this section. A node not implementing the flow state extension SHOULD NOT implement a Flow Table.",
      "ja": "フロー状態拡張を実装ノードは、このセクションで説明する外部の挙動と一致するフローテーブルまたは他のデータ構造を実装しなければなりません。フロー状態拡張を実装していないノードは、フローテーブルを実装すべきではありません。"
    },
    {
      "indent": 3,
      "text": "The Flow Table records information about flows from which packets recently have been sent or forwarded by this node. The table is indexed by a triple (IP Source Address, IP Destination Address, Flow ID), where Flow ID is a 16-bit number assigned by the source as described in Section 3.5.1. Each entry in the Flow Table contains the following fields:",
      "ja": "フロー表は、パケットが最近、このノードによって送信または転送されているから、フローに関する情報を記録します。テーブルは、フローIDは、セクション3.5.1に記載したようにソースによって割り当てられた16ビット数であるトリプル（IPソースアドレス、IP宛先アドレス、フローID）によって索引付けされます。フローテーブルの各エントリには、以下のフィールドが含まれています。"
    },
    {
      "indent": 3,
      "text": "- The MAC address of the next-hop node along this flow.",
      "ja": " - このフローに沿った次ホップノードのMACアドレス。"
    },
    {
      "indent": 3,
      "text": "- An indication of the outgoing network interface on this node to be used in transmitting packets along this flow.",
      "ja": " - このノードに発信ネットワークインタフェースの表示は、この流れに沿ってパケットを送信する際に使用されます。"
    },
    {
      "indent": 3,
      "text": "- The MAC address of the previous-hop node along this flow.",
      "ja": " - このフローに沿って、前のホップノードのMACアドレス。"
    },
    {
      "indent": 3,
      "text": "- An indication of the network interface on this node from which packets from that previous-hop node are received.",
      "ja": " - その前ホップノードからパケットが受信されてから、このノード上のネットワーク・インターフェースの表示。"
    },
    {
      "indent": 3,
      "text": "- A timeout after which this entry in the Flow Table MUST be deleted.",
      "ja": " - フロー表では、このエントリを削除しなければなりませんした後のタイムアウト。"
    },
    {
      "indent": 3,
      "text": "- The expected value of the Hop Count field in the DSR Flow State header for packets received for forwarding along this field (for use with packets containing a DSR Flow State header).",
      "ja": " - パケットのDSRフロー状態ヘッダー内のホップカウントフィールドの期待値は、（DSRフロー状態のヘッダを含むパケットで使用するために）このフィールドに沿って転送するために受け取りました。"
    },
    {
      "indent": 3,
      "text": "- An indication of whether or not this flow can be used as a default flow for packets originated by this node (the Flow ID of a default flow MUST be odd).",
      "ja": " - か否かを、このフローの表示は、このノードから発信するパケットのためのデフォルト・フロー（デフォルトのフローのフローIDが奇数でなければならない）として使用することができます。"
    },
    {
      "indent": 3,
      "text": "- The entry SHOULD record the complete source route for the flow. (Nodes not recording the complete source route cannot participate in Automatic Route Shortening.)",
      "ja": " - エントリは、フローのための完全なソースルートを記録する必要があります。 （ノードは、自動ルートの短縮に参加することはできません完全なソースルートを記録していません。）"
    },
    {
      "indent": 3,
      "text": "- The entry MAY contain a field recording the time this entry was last used.",
      "ja": " - エントリは、このエントリが最後に使用された時間を記録するフィールドを含むかもしれません。"
    },
    {
      "indent": 3,
      "text": "The entry MUST be deleted when its timeout expires.",
      "ja": "そのタイムアウトが満了したときに、エントリを削除する必要があります。"
    },
    {
      "indent": 0,
      "text": "5.2. Automatic Route Shortening Table",
      "section_title": true,
      "ja": "5.2。自動ルート短縮表"
    },
    {
      "indent": 3,
      "text": "A node implementing the flow state extension SHOULD implement an Automatic Route Shortening Table or other data structure consistent with the external behavior described in this section. A node not implementing the flow state extension SHOULD NOT implement an Automatic Route Shortening Table.",
      "ja": "フロー状態拡張を実装ノードは、自動ルート短縮表またはこの項で説明する外部の挙動と一致する他のデータ構造を実装する必要があります。フロー状態拡張を実装していないノードは、自動ルート短縮表を実装すべきではありません。"
    },
    {
      "indent": 3,
      "text": "The Automatic Route Shortening Table records information about received packets for which Automatic Route Shortening may be possible. The table is indexed by a triple (IP Source Address, IP Destination Address, Flow ID). Each entry in the Automatic Route Shortening Table contains a list of (packet identifier, Hop Count) pairs for that flow. The packet identifier in the list may be any unique identifier for the received packet; for example, for IPv4 packets, the combination of the following fields from the packet's IP header MAY be used as a unique identifier for the packet: Source Address, Destination Address, Identification, Protocol, Fragment Offset, and Total Length. The Hop Count in the list in the entry is copied from the Hop Count field in the DSR Flow State header of the received packet for which this table entry was created. Any packet identifier SHOULD appear at most once in an entry's list, and this list item SHOULD record the minimum Hop Count value received for that packet (if the wireless signal strength or signal-to-noise ratio at which a packet is received is available to the DSR implementation in a node, the node MAY, for example, remember instead in this list the minimum Hop Count value for which the received packet's signal strength or signal-to-noise ratio exceeded some threshold).",
      "ja": "自動ルート短縮表は、自動ルートの短縮が可能とすることができるため、受信したパケットに関する情報を記録します。テーブルはトリプル（IPソースアドレス、IP宛先アドレス、フローID）によって索引付けされます。自動ルート短縮表の各エントリは（パケット識別子、ホップカウント）そのフローのペアのリストが含まれています。リスト中のパケット識別子は、受信したパケットのための任意の一意の識別子であってもよいです。送信元アドレス、宛先アドレス、識別、プロトコル、フラグメントオフセット、全長：例えば、IPv4パケットのために、パケットのIPヘッダから以下のフィールドの組み合わせは、パケットの一意の識別子として使用することができます。エントリのリストにホップカウントは、このテーブルエントリが作成された受信パケットのDSRフロー状態ヘッダー内のホップカウントフィールドからコピーされます。任意のパケット識別子は、エントリのリスト内で最も回現れるべきであり、パケットが受信された無線信号強度または信号対雑音比が利用可能である場合は、このリストの項目は（そのパケットのために受信された最小のホップカウント値を記録する必要がありますノードにおけるDSR実装では、ノードは、例えば、このリストに代えて、受信したパケットの信号強度又は信号対雑音比）がいくつかの閾値を超えているため、最小ホップカウント値を覚えているかもしれ。"
    },
    {
      "indent": 3,
      "text": "Space in the Automatic Route Shortening Table of a node MAY be dynamically managed by any local algorithm at the node. For example, in order to limit the amount of memory used to store the table, any existing entry MAY be deleted at any time, and the number of packets listed in each entry MAY be limited. However, when reclaiming space in the table, nodes SHOULD favor retaining information about more flows in the table rather than about more packets listed in each entry in the table, as long as at least the listing of some small number of packets (e.g., 3) can be retained in each entry.",
      "ja": "ノードの自動ルート短縮表内のスペースを動的にノードのローカルアルゴリズムによって管理されていてもよいです。たとえば、テーブルを格納するために使用されるメモリの量を制限するために、任意の既存のエントリはいつでも削除してもよいし、各エントリにリストされているパケットの数が制限されてもよいです。テーブル内のスペースを再利用する場合ただし、ノードは、パケット（例えば、3のいくつかの小さな数の限り最低のリストをテーブル内の多くのフローではなく、テーブル内の各エントリに記載されている詳細パケットに関する情報保持を優先すべきです）各エントリに保持することができます。"
    },
    {
      "indent": 0,
      "text": "5.3. Default Flow ID Table",
      "section_title": true,
      "ja": "5.3。デフォルトのフローID表"
    },
    {
      "indent": 3,
      "text": "A node implementing the flow state extension MUST implement a Default Flow Table or other data structure consistent with the external behavior described in this section. A node not implementing the flow state extension SHOULD NOT implement a Default Flow Table.",
      "ja": "フロー状態拡張を実装ノードは、このセクションで説明する外部の挙動と一致デフォルトフローテーブルまたは他のデータ構造を実装しなければなりません。フロー状態拡張を実装していないノードは、デフォルトフローテーブルを実装すべきではありません。"
    },
    {
      "indent": 3,
      "text": "For each (IP Source Address, IP Destination Address) pair for which a node forwards packets, the node MUST record:",
      "ja": "ノードがパケットを転送するために、各（IPソースアドレス、IP宛先アドレス）ペアの場合、ノードは、記録する必要があります："
    },
    {
      "indent": 3,
      "text": "- The largest odd Flow ID value seen.",
      "ja": " - 最大の奇数のフローID値を見て。"
    },
    {
      "indent": 3,
      "text": "- The time at which all the corresponding flows that are forwarded by this node expire.",
      "ja": " - このノードによって転送されるすべての対応するフローが期限切れした時刻。"
    },
    {
      "indent": 3,
      "text": "- The current default Flow ID.",
      "ja": " - 現在のデフォルトのフローID。"
    },
    {
      "indent": 3,
      "text": "- A flag indicating whether or not the current default Flow ID is valid.",
      "ja": " - 現在のデフォルトのフローIDが有効であるかどうかを示すフラグ。"
    },
    {
      "indent": 3,
      "text": "If a node deletes this record for an (IP Source Address, IP Destination Address) pair, it MUST also delete all Flow Table entries for that pair. Nodes MUST delete table entries if all of this (IP Source Address, IP Destination Address) pair's flows that are forwarded by this node expire.",
      "ja": "ノードが（IPソースアドレス、IP宛先アドレス）のペアのために、このレコードを削除した場合、それはまた、そのペアのために、すべてのフローテーブルのエントリを削除しなければなりません。このノードによって転送され、このすべての（IPソースアドレス、IP宛先アドレス）ペアのフローが期限切れになる場合、ノードは、テーブルエントリを削除しなければなりません。"
    },
    {
      "indent": 0,
      "text": "6. DSR Options Header Format",
      "section_title": true,
      "ja": "6. DSRオプションヘッダー形式"
    },
    {
      "indent": 3,
      "text": "The Dynamic Source Routing protocol makes use of a special header carrying control information that can be included in any existing IP packet. This DSR Options header in a packet contains a small fixed-sized, 4-octet portion, followed by a sequence of zero or more DSR options carrying optional information. The end of the sequence of DSR options in the DSR Options header is implied by the total length of the DSR Options header.",
      "ja": "ダイナミックソースルーティングプロトコルは、既存のIPパケットに含まれる特殊なヘッダ搬送制御情報を利用します。パケット内のこのDSRオプションヘッダは、オプションの情報を搬送するゼロ以上DSRオプションの配列が続く小さな固定サイズ、4オクテットの部分を含んでいます。 DSRオプションヘッダでDSRオプションの配列の端部は、DSRオプションヘッダの全長によって暗示されています。"
    },
    {
      "indent": 3,
      "text": "For IPv4, the DSR Options header MUST immediately follow the IP header in the packet. (If a Hop-by-Hop Options extension header, as defined in IPv6 [RFC2460], becomes defined for IPv4, the DSR Options header MUST immediately follow the Hop-by-Hop Options extension header, if one is present in the packet, and MUST otherwise immediately follow the IP header.)",
      "ja": "IPv4の場合、DSRオプションヘッダは直ちにパケットのIPヘッダに従わなければなりません。 IPv6 [RFC2460]で定義されるようにホップバイホップオプション拡張ヘッダは、IPv4のために定義されたようになる場合は、1つのパケットに存在する場合（DSRオプションヘッダは直ちに、ホップバイホップオプション拡張ヘッダに従わなければなりませんそうでない場合、直ちにIPヘッダに従わなければなりません。）"
    },
    {
      "indent": 3,
      "text": "To add a DSR Options header to a packet, the DSR Options header is inserted following the packet's IP header, before any following header such as a traditional (e.g., TCP or UDP) transport layer header. Specifically, the Protocol field in the IP header is used to indicate that a DSR Options header follows the IP header, and the Next Header field in the DSR Options header is used to indicate the type of protocol header (such as a transport layer header) following the DSR Options header.",
      "ja": "パケットにDSRオプションヘッダを追加するには、DSRオプションヘッダは、伝統的な（例えば、TCPまたはUDP）トランスポート層ヘッダのような任意の次のヘッダーの前に、パケットのIPヘッダの後に挿入されます。具体的には、IPヘッダ内のプロトコルフィールドはDSRオプションヘッダは、IPヘッダの後に続くことを示すために使用され、そしてDSRオプションヘッダ内の次ヘッダフィールドは（例えば、トランスポート層ヘッダとして）プロトコル・ヘッダのタイプを示すために使用されますDSRオプションヘッダに続きます。"
    },
    {
      "indent": 3,
      "text": "If any headers follow the DSR Options header in a packet, the total length of the DSR Options header (and thus the total, combined length of all DSR options present) MUST be a multiple of 4 octets. This requirement preserves the alignment of these following headers in the packet.",
      "ja": "任意のヘッダがパケットにDSRオプションヘッダに従っている場合、DSRオプションヘッダの合計長さ（したがって、合計、存在するすべてのDSRオプションの組み合わされた長さ）が4つのオクテットの倍数でなければなりません。この要件は、パケット内のこれらの次のヘッダーのアライメントを維持します。"
    },
    {
      "indent": 0,
      "text": "6.1. Fixed Portion of DSR Options Header",
      "section_title": true,
      "ja": "6.1。 DSRオプションヘッダーの固定部分"
    },
    {
      "indent": 3,
      "text": "The fixed portion of the DSR Options header is used to carry information that must be present in any DSR Options header. This fixed portion of the DSR Options header has the following format:",
      "ja": "DSRオプションヘッダの固定部分は、任意のDSRオプションヘッダに存在しなければならない情報を運ぶために使用されます。 DSRオプションヘッダのこの固定部分は、以下の形式を有します。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  |F|   Reserved  |        Payload Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n.                                                               .\n.                            Options                            .\n.                                                               .\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Next Header",
      "ja": "次のヘッダー"
    },
    {
      "indent": 9,
      "text": "8-bit selector. Identifies the type of header immediately following the DSR Options header. Uses the same values as the IPv4 Protocol field [RFC1700]. If no header follows, then Next Header MUST have the value 59, \"No Next Header\" [RFC2460].",
      "ja": "8ビットセレクタ。直ちにDSRオプションヘッダに続くヘッダのタイプを識別する。 IPv4のプロトコルフィールド[RFC1700]と同じ値を使用します。何ヘッダが続かない場合、次のヘッダ値59、「いいえ次ヘッダ」[RFC2460]を持たなければなりません。"
    },
    {
      "indent": 6,
      "text": "Flow State Header (F)",
      "ja": "フロー状態ヘッダー（F）"
    },
    {
      "indent": 9,
      "text": "Flag bit. MUST be set to 0. This bit is set in a DSR Flow State header (Section 7.1) and clear in a DSR Options header.",
      "ja": "フラグビット。このビットはDSRフロー状態のヘッダ（セクション7.1）に設定し、DSRオプションヘッダには明らかである0に設定しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Reserved",
      "ja": "予約済み"
    },
    {
      "indent": 9,
      "text": "MUST be sent as 0 and ignored on reception.",
      "ja": "0として送信され、受信時に無視しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Payload Length",
      "ja": "ペイロード長"
    },
    {
      "indent": 9,
      "text": "The length of the DSR Options header, excluding the 4-octet fixed portion. The value of the Payload Length field defines the total length of all options carried in the DSR Options header.",
      "ja": "4オクテットの固定部分を除いDSRオプションヘッダの長さ。ペイロード長フィールドの値はDSRオプションヘッダで運ばれたすべてのオプションの合計の長さを規定します。"
    },
    {
      "indent": 6,
      "text": "Options",
      "ja": "オプション"
    },
    {
      "indent": 9,
      "text": "Variable-length field; the length of the Options field is specified by the Payload Length field in this DSR Options header. Contains one or more pieces of optional information (DSR options), encoded in type-length-value (TLV) format (with the exception of the Pad1 option described in Section 6.8).",
      "ja": "可変長フィールド。オプションフィールドの長さは、このDSRオプションヘッダ内のペイロード長フィールドによって指定されます。 （セクション6.8で説明したパッド1のオプションを除く）タイプレングス値（TLV）形式でエンコードされたオプションの情報（DSRオプション）、の一つ以上の部分を含んでいます。"
    },
    {
      "indent": 3,
      "text": "The placement of DSR options following the fixed portion of the DSR Options header MAY be padded for alignment. However, due to the typically limited available wireless bandwidth in ad hoc networks, this padding is not required, and receiving nodes MUST NOT expect options within a DSR Options header to be aligned.",
      "ja": "DSRオプションヘッダの固定部以下DSRオプションの配置は、位置合わせのために埋められることがあります。しかし、アドホックネットワークで一般的に限定され、利用可能な無線帯域幅に起因して、このパディングは必要なく、受信ノードは、DSRオプションヘッダ内のオプションを整列させることを期待してはいけません。"
    },
    {
      "indent": 3,
      "text": "Each DSR option is assigned a unique Option Type code. The most significant 3 bits (that is, Option Type & 0xE0) allow a node not implementing processing for this Option Type value to behave in the manner closest to correct for that type:",
      "ja": "各DSRオプションは、独自のオプションタイプコードが割り当てられています。最上位3ビット（すなわち、オプションタイプ＆0xE0となっている）ノードは、そのタイプを補正するようにして最も近い挙動には、このオプションタイプ値のための処理を実施しない可能。"
    },
    {
      "indent": 3,
      "text": "- The most significant bit in the Option Type value (that is, Option Type & 0x80) represents whether or not a node receiving this Option Type (when the node does not implement processing for this Option Type) SHOULD respond to such a DSR option with a Route Error of type OPTION_NOT_SUPPORTED, except that such a Route Error SHOULD never be sent in response to a packet containing a Route Request option.",
      "ja": " - オプションタイプ値の最上位ビット（すなわち、オプションタイプとは0x80である）、このオプションタイプ（ノードがこのオプションタイプの処理を実装していない）受信ノードは、このようなDSRオプションに応答すべきか否かを示しますそのような経路のエラーを除くタイプOPTION_NOT_SUPPORTEDの経路エラーは、経路要求オプションを含むパケットに応答して送信すべきではありません。"
    },
    {
      "indent": 3,
      "text": "- The two following bits in the Option Type value (that is, Option Type & 0x60) are a two-bit field indicating how such a node that does not support this Option Type MUST process the packet:",
      "ja": " - オプションタイプ値における2つの次のビット（すなわち、オプションタイプ＆0x60である）、このオプションタイプをサポートしていないようなノードは、パケットを処理しなければならないかを示す2ビットのフィールドです。"
    },
    {
      "indent": 9,
      "text": "00 = Ignore Option\n01 = Remove Option\n10 = Mark Option\n11 = Drop Packet",
      "raw": true
    },
    {
      "indent": 6,
      "text": "When these 2 bits are 00 (that is, Option Type & 0x60 == 0), a node not implementing processing for that Option Type MUST use the Opt Data Len field to skip over the option and continue processing. When these 2 bits are 01 (that is, Option Type & 0x60 == 0x20), a node not implementing processing for that Option Type",
      "ja": "これらの2ビット（つまり、オプションタイプ＆0x60 == 0）00である場合、そのオプションタイプの処理を実装していないノードは、オプションをスキップして処理を継続することを選ぶデータLENフィールドを使用しなければなりません。これらの2ビット（つまり、オプションタイプ＆0x60 == 0x20にある）01である場合、ノードは、オプションタイプの処理を実施しません"
    },
    {
      "indent": 6,
      "text": "MUST use the Opt Data Len field to remove the option from the packet and continue processing as if the option had not been included in the received packet. When these 2 bits are 10 (that is, Option Type & 0x60 == 0x40), a node not implementing processing for that Option Type MUST set the most significant bit following the Opt Data Len field, MUST ignore the contents of the option using the Opt Data Len field, and MUST continue processing the packet. Finally, when these 2 bits are 11 (that is, Option Type & 0x60 == 0x60), a node not implementing processing for that Option Type MUST drop the packet.",
      "ja": "パケットからオプションを削除し、オプションでは、受信したパケットに含まれていなかったかのように処理を継続することを選ぶのデータLENフィールドを使用しなければなりません。これらの2ビット（つまり、オプションタイプ＆0x60 == 0x40の場合）10である場合、そのオプションタイプは、オプトデータLENフィールド次の最上位ビットをセットしなければならないための処理を実施しないノードは、使用オプションの内容を無視しなければなりませんデータLENフィールドを選ぶと、パケットの処理を継続しなければなりません。最後に、これらの2ビットが11（即ち、オプションタイプ＆0x60の== 0x60）、パケットをドロップする必要があり、そのオプションタイプの処理を実装していないノード。"
    },
    {
      "indent": 3,
      "text": "The following types of DSR options are defined in this document for use within a DSR Options header:",
      "ja": "DSRオプションの次のタイプはDSRオプションヘッダ内で使用するため、この文書で定義されています。"
    },
    {
      "indent": 3,
      "text": "- Route Request option (Section 6.2)",
      "ja": " - ルート要求オプション（6.2節）"
    },
    {
      "indent": 3,
      "text": "- Route Reply option (Section 6.3)",
      "ja": " - ルートオプション（6.3節）を返信"
    },
    {
      "indent": 3,
      "text": "- Route Error option (Section 6.4)",
      "ja": " - ルート・エラー・オプション（6.4節）"
    },
    {
      "indent": 3,
      "text": "- Acknowledgement Request option (Section 6.5)",
      "ja": " - 承認要求オプション（6.5節）"
    },
    {
      "indent": 3,
      "text": "- Acknowledgement option (Section 6.6)",
      "ja": " - 承認オプション（6.6節）"
    },
    {
      "indent": 3,
      "text": "- DSR Source Route option (Section 6.7)",
      "ja": " -  DSRソースルートオプション（6.7節）"
    },
    {
      "indent": 3,
      "text": "- Pad1 option (Section 6.8)",
      "ja": " - パッド1オプション（6.8節）"
    },
    {
      "indent": 3,
      "text": "- PadN option (Section 6.9)",
      "ja": " -  PADNオプション（6.9節）"
    },
    {
      "indent": 3,
      "text": "In addition, Section 7 specifies further DSR options for use with the optional DSR flow state extension.",
      "ja": "また、第7章は、オプションDSRフロー状態拡張子と共に使用するためのさらにDSRのオプションを指定します。"
    },
    {
      "indent": 0,
      "text": "6.2. Route Request Option",
      "section_title": true,
      "ja": "6.2。ルート要求オプション"
    },
    {
      "indent": 3,
      "text": "The Route Request option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダに経路要求オプションが符号化されます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  |  Opt Data Len |         Identification        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         Target Address                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[1]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[2]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                              ...                              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[n]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "IP fields:",
      "ja": "IPフィールド："
    },
    {
      "indent": 6,
      "text": "Source Address",
      "ja": "送信元アドレス"
    },
    {
      "indent": 9,
      "text": "MUST be set to the address of the node originating this packet. Intermediate nodes that retransmit the packet to propagate the Route Request MUST NOT change this field.",
      "ja": "このパケットを発信するノードのアドレスに設定しなければなりません。パケットを再送信する中間ノードは、このフィールドを変更してはならないルート要求を伝播します。"
    },
    {
      "indent": 6,
      "text": "Destination Address",
      "ja": "宛先アドレス"
    },
    {
      "indent": 9,
      "text": "MUST be set to the IP limited broadcast address (255.255.255.255).",
      "ja": "IP制限されたブロードキャストアドレス（255.255.255.255）に設定しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Hop Limit (TTL)",
      "ja": "ホップリミット（TTL）"
    },
    {
      "indent": 9,
      "text": "MAY be varied from 1 to 255, for example, to implement non-propagating Route Requests and Route Request expanding-ring searches (Section 3.3.3).",
      "ja": "非伝播するルート要求とルート要求拡大リング検索（3.3.3）を実装するために、例えば、1から255まで変化させることができます。"
    },
    {
      "indent": 3,
      "text": "Route Request fields:",
      "ja": "ルート要求フィールド："
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "1. Nodes not understanding this option will ignore this option.",
      "ja": "このオプションを理解していない1.ノードは、このオプションを無視します。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields. MUST be set equal to (4 * n) + 6, where n is the number of addresses in the Route Request Option.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。 nは経路要求オプション内のアドレスの数である（4 * n）で+ 6、に等しく設定されなければなりません。"
    },
    {
      "indent": 6,
      "text": "Identification",
      "ja": "識別"
    },
    {
      "indent": 9,
      "text": "A unique value generated by the initiator (original sender) of the Route Request. Nodes initiating a Route Request generate a new Identification value for each Route Request, for example based on a sequence number counter of all Route Requests initiated by the node.",
      "ja": "ルート要求のイニシエータ（元の送信者）によって生成された一意の値。ルート要求を開始するノードは、例えばノードによって開始されたすべてのルート要求のシーケンス番号カウンタに基づいて、各ルート要求に対して新たな識別値を生成します。"
    },
    {
      "indent": 9,
      "text": "This value allows a receiving node to determine whether it has recently seen a copy of this Route Request. If this Identification value (for this IP Source address and Target Address) is found by this receiving node in its Route Request Table (in the cache of Identification values in the entry there for this initiating node), this receiving node MUST discard the Route Request. When a Route Request is propagated, this field MUST be copied from the received copy of the Route Request being propagated.",
      "ja": "この値は、受信ノードは、それが最近、このルート要求のコピーを見ているかどうかを判断することができます。 （このIPソースアドレスとターゲットアドレスの場合）、この識別値が（この開始ノードのためにそこエントリで識別値のキャッシュに）その経路要求表に、この受信ノードによって発見された場合、この受信ノードはルート要求を捨てなければなりません。ルート要求が伝播されている場合、このフィールドは、伝搬されるルート・リクエストの受信したコピーからコピーする必要があります。"
    },
    {
      "indent": 6,
      "text": "Target Address",
      "ja": "ターゲットアドレス"
    },
    {
      "indent": 9,
      "text": "The address of the node that is the target of the Route Request.",
      "ja": "ルート要求の対象であるノードのアドレス。"
    },
    {
      "indent": 6,
      "text": "Address[1..n]",
      "ja": "アドレス[1..nの]"
    },
    {
      "indent": 9,
      "text": "Address[i] is the IPv4 address of the i-th node recorded in the Route Request option. The address given in the Source Address field in the IP header is the address of the initiator of the Route Discovery and MUST NOT be listed in the Address[i] fields; the address given in Address[1] is thus the IPv4 address of the first node on the path after the initiator. The number of addresses present in this field is indicated by the Opt Data Len field in the option (n = (Opt Data Len - 6) / 4). Each node propagating the Route Request adds its own address to this list, increasing the Opt Data Len value by 4 octets.",
      "ja": "アドレス[i]は経路要求オプションに記録され、i番目のノードのIPv4アドレスです。 IPヘッダのソースアドレスフィールドで指定されたアドレスは、経路探索の開始アドレスであり、アドレス[i]のフィールドにリストされてはいけません。 [1]アドレスで指定されたアドレスは、このように開始後の経路上の最初のノードのIPv4アドレスです。このフィールドに存在するアドレスの数は、オプションオプトインデータLENフィールドによって示される（N =（オプトデータレン -  6）/ 4）。ルート要求を伝播する各ノードは4つのオクテットでオプトデータレン値を増やし、このリストに自身のアドレスを追加します。"
    },
    {
      "indent": 3,
      "text": "The Route Request option MUST NOT appear more than once within a DSR Options header.",
      "ja": "ルート要求オプションは、一度DSRオプションヘッダ内のより多く見えてはいけません。"
    },
    {
      "indent": 0,
      "text": "6.3. Route Reply Option",
      "section_title": true,
      "ja": "6.3。ルート応答オプション"
    },
    {
      "indent": 3,
      "text": "The Route Reply option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダに経路応答オプションが符号化されます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                |  Option Type  |  Opt Data Len |L|   Reserved  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[1]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[2]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                              ...                              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[n]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "IP fields:",
      "ja": "IPフィールド："
    },
    {
      "indent": 6,
      "text": "Source Address",
      "ja": "送信元アドレス"
    },
    {
      "indent": 9,
      "text": "Set to the address of the node sending the Route Reply. In the case of a node sending a reply from its Route Cache (Section 3.3.2) or sending a gratuitous Route Reply (Section 3.4.3), this address can differ from the address that was the target of the Route Discovery.",
      "ja": "経路応答を送信するノードのアドレスに設定します。そのルートキャッシュ（3.3.2）または無償経路応答（セクション3.4.3）の送信から応答を送信するノードの場合、このアドレスは、経路探索の対象となったアドレスと異なることができます。"
    },
    {
      "indent": 6,
      "text": "Destination Address",
      "ja": "宛先アドレス"
    },
    {
      "indent": 9,
      "text": "MUST be set to the address of the source node of the route being returned. Copied from the Source Address field of the Route Request generating the Route Reply or, in the case of a gratuitous Route Reply, copied from the Source Address field of the data packet triggering the gratuitous Reply.",
      "ja": "返される経路の送信元ノードのアドレスに設定しなければなりません。ルートを生成するルート要求の送信元アドレスフィールドからコピーされた無償の応答をトリガデータパケットの送信元アドレスフィールドからコピーされた無償経路応答の場合には、返信または。"
    },
    {
      "indent": 3,
      "text": "Route Reply fields:",
      "ja": "経路応答フィールド："
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "2. Nodes not understanding this option will ignore this option.",
      "ja": "このオプションを理解していない2ノードは、このオプションを無視します。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields. MUST be set equal to (4 * n) + 1, where n is the number of addresses in the Route Reply Option.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。 nがルート内のアドレスの数は、オプション応答である（4×n個）+ 1に等しく設定されなければなりません。"
    },
    {
      "indent": 6,
      "text": "Last Hop External (L)",
      "ja": "最終ホップ外部（L）"
    },
    {
      "indent": 9,
      "text": "Set to indicate that the last hop given by the Route Reply (the link from Address[n-1] to Address[n]) is actually an arbitrary path in a network external to the DSR network; the exact route outside the DSR network is not represented in the Route Reply. Nodes caching this hop in their Route Cache MUST flag the cached hop with the External flag. Such hops MUST NOT be returned in a cached Route Reply generated from this Route Cache entry, and selection of routes from the Route Cache to route a packet being sent SHOULD prefer routes that contain no hops flagged as External.",
      "ja": "（[n]をアドレスするためのアドレスからリンク[N-1]）ルート応答によって与えられた最後のホップが実際DSRネットワークの外部のネットワーク内の任意の経路であることを示すように設定。 DSRネットワーク外の正確なルートがルート応答に示されていません。そのルートキャッシュMUSTフラグに外部フラグでキャッシュされたホップをこのホップをキャッシュノード。このようなホップは、キャッシュされたルートで返されてはならない送信されるパケットが外部としてフラグ付け一切のホップを含まないルートを好むべきである。このルートキャッシュエントリから生成され、ルートへのルートキャッシュからのルートの選択返信。"
    },
    {
      "indent": 6,
      "text": "Reserved",
      "ja": "予約済み"
    },
    {
      "indent": 9,
      "text": "MUST be sent as 0 and ignored on reception.",
      "ja": "0として送信され、受信時に無視しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Address[1..n]",
      "ja": "アドレス[1..nの]"
    },
    {
      "indent": 9,
      "text": "The source route being returned by the Route Reply. The route indicates a sequence of hops, originating at the source node specified in the Destination Address field of the IP header of the packet carrying the Route Reply, through each of the Address[i] nodes in the order listed in the Route Reply, ending at the node indicated by Address[n]. The number of addresses present in the Address[1..n] field is indicated by the Opt Data Len field in the option (n = (Opt Data Len - 1) / 4).",
      "ja": "ソースルートは、経路応答で返されます。ルートは終了、ルート応答にリストされた順に[i]は、ノードアドレスの各々を介して、ルート応答を運ぶパケットのIPヘッダの宛先アドレスフィールドで指定されたソースノードで発信をホップのシーケンスを示していますノードのアドレス[N]で示されます。 [1..nの]フィールドはオプション（ -  1）/ 4、N =（オプトデータLEN）オプトインデータLENフィールドによって示されるアドレスに存在するアドレスの数。"
    },
    {
      "indent": 3,
      "text": "A Route Reply option MAY appear one or more times within a DSR Options header.",
      "ja": "ルート応答オプションは、DSRオプションヘッダ内の1つのまたは複数回表示されることがあります。"
    },
    {
      "indent": 0,
      "text": "6.4. Route Error Option",
      "section_title": true,
      "ja": "6.4。経路エラーオプション"
    },
    {
      "indent": 3,
      "text": "The Route Error option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダー内のルート・エラー・オプションがエンコードされています。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  |  Opt Data Len |   Error Type  |Reservd|Salvage|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      Error Source Address                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   Error Destination Address                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n.                                                               .\n.                   Type-Specific Information                   .\n.                                                               .\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "3. Nodes not understanding this option will ignore this option.",
      "ja": "このオプションを理解していない3.ノードは、このオプションを無視します。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。"
    },
    {
      "indent": 9,
      "text": "For the current definition of the Route Error option, this field MUST be set to 10, plus the size of any Type-Specific Information present in the Route Error. Further extensions to the Route Error option format may also be included after the Type-Specific Information portion of the Route Error option specified above. The presence of such extensions will be indicated by the Opt Data Len field. When the Opt Data Len is greater than that required for the fixed portion of the Route Error plus the necessary Type-Specific Information as indicated by the Option Type value in the option, the remaining octets are interpreted as extensions. Currently, no such further extensions have been defined.",
      "ja": "ルート・エラー・オプションの現在の定義については、このフィールドは10に設定しなければならない、プラス経路エラーのいずれかのタイプ固有の情報の存在の大きさ。ルートErrorオプション形式への更なる拡張は、上記の指定されたルート・エラー・オプションの種類に固有の情報部分の後に含めることができます。そのような拡張の存在は、オプトデータLENフィールドによって示されます。オプトデータlenが経路エラープラスオプションのオプションタイプ値によって示されるように、必要なタイプに固有の情報の固定部分のために必要とされるよりも大きい場合、残りのオクテットは、拡張機能として解釈されます。現在、そのような更なる拡張が定義されていません。"
    },
    {
      "indent": 6,
      "text": "Error Type",
      "ja": "エラータイプ"
    },
    {
      "indent": 9,
      "text": "The type of error encountered. Currently, the following type values are defined:",
      "ja": "エラーの種類が発生しました。現在、次の型の値が定義されています。"
    },
    {
      "indent": 12,
      "text": "1 = NODE_UNREACHABLE 2 = FLOW_STATE_NOT_SUPPORTED 3 = OPTION_NOT_SUPPORTED",
      "ja": "1 = NODE_UNREACHABLE 2 = FLOW_STATE_NOT_SUPPORTED 3 = OPTION_NOT_SUPPORTED"
    },
    {
      "indent": 9,
      "text": "Other values of the Error Type field are reserved for future use.",
      "ja": "エラータイプフィールドの他の値は将来の使用のために予約されています。"
    },
    {
      "indent": 6,
      "text": "Reservd",
      "ja": "予約済み"
    },
    {
      "indent": 9,
      "text": "Reserved. MUST be sent as 0 and ignored on reception.",
      "ja": "予約済み。 0として送信され、受信時に無視しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Salvage",
      "ja": "サルベージ"
    },
    {
      "indent": 9,
      "text": "A 4-bit unsigned integer. Copied from the Salvage field in the DSR Source Route option of the packet triggering the Route Error.",
      "ja": "4ビットの符号なし整数。経路エラーをトリガするパケットのDSRソースルートオプションでサルベージフィールドからコピーされます。"
    },
    {
      "indent": 9,
      "text": "The \"total salvage count\" of the Route Error option is derived from the value in the Salvage field of this Route Error option and all preceding Route Error options in the packet as follows: the total salvage count is the sum of, for each such Route Error option, one plus the value in the Salvage field of that Route Error option.",
      "ja": "次のように経路エラーオプションの「総サルベージカウントは」このルートErrorオプションとパケット内の先行するすべてのルート・エラー・オプションのサルベージフィールドの値から導出される：総サルベージ・カウントは、そのような各ルートについての総和であり、エラーオプション、1プラスその経路エラーオプションのサルベージフィールドの値。"
    },
    {
      "indent": 6,
      "text": "Error Source Address",
      "ja": "エラーソースアドレス"
    },
    {
      "indent": 9,
      "text": "The address of the node originating the Route Error (e.g., the node that attempted to forward a packet and discovered the link failure).",
      "ja": "経路エラー（例えば、パケットを転送しようとしてリンク障害を発見したノード）を起点ノードのアドレス。"
    },
    {
      "indent": 6,
      "text": "Error Destination Address",
      "ja": "エラー送り先住所"
    },
    {
      "indent": 9,
      "text": "The address of the node to which the Route Error must be delivered. For example, when the Error Type field is set to NODE_UNREACHABLE, this field will be set to the address of the node that generated the routing information claiming that the hop from the Error Source Address to Unreachable Node Address (specified in the Type-Specific Information) was a valid hop.",
      "ja": "経路エラーを配信する必要があるかをノードのアドレス。エラータイプフィールドがNODE_UNREACHABLEに設定されている場合たとえば、このフィールドには、到達不能ノードアドレスにエラーソースアドレスからのホップが（タイプ固有の情報に指定されたと主張してルーティング情報を生成したノードのアドレスに設定されます。 ）有効なホップました。"
    },
    {
      "indent": 6,
      "text": "Type-Specific Information",
      "ja": "タイプ固有の情報"
    },
    {
      "indent": 9,
      "text": "Information specific to the Error Type of this Route Error message.",
      "ja": "この経路エラーメッセージのエラータイプに固有の情報。"
    },
    {
      "indent": 3,
      "text": "A Route Error option MAY appear one or more times within a DSR Options header.",
      "ja": "ルート・エラー・オプションは、DSRオプションヘッダ内の1つのまたは複数回表示されることがあります。"
    },
    {
      "indent": 0,
      "text": "6.4.1. Node Unreachable Type-Specific Information",
      "section_title": true,
      "ja": "6.4.1。ノード到達不能タイプ固有の情報"
    },
    {
      "indent": 3,
      "text": "When the Route Error is of type NODE_UNREACHABLE, the Type-Specific Information field is defined as follows:",
      "ja": "経路エラーがタイプNODE_UNREACHABLEである場合には、以下のように、タイプ固有の情報フィールドが定義されています。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Unreachable Node Address                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Unreachable Node Address",
      "ja": "到達不能ノードアドレス"
    },
    {
      "indent": 9,
      "text": "The IP address of the node that was found to be unreachable (the next-hop neighbor to which the node with address Error Source Address was attempting to transmit the packet).",
      "ja": "到達不能であることが判明したノード（アドレスエラーソースアドレスを持つノードがパケットを送信しようとしていた先のネクストホップネイバー）のIPアドレス。"
    },
    {
      "indent": 0,
      "text": "6.4.2. Flow State Not Supported Type-Specific Information",
      "section_title": true,
      "ja": "6.4.2。フロー状態は、タイプ固有の情報をサポートされていません"
    },
    {
      "indent": 3,
      "text": "When the Route Error is of type FLOW_STATE_NOT_SUPPORTED, the Type-Specific Information field is empty.",
      "ja": "ルートエラータイプFLOW_STATE_NOT_SUPPORTEDである場合には、タイプ固有の情報フィールドは空です。"
    },
    {
      "indent": 0,
      "text": "6.4.3. Option Not Supported Type-Specific Information",
      "section_title": true,
      "ja": "6.4.3。オプションサポートされていないタイプ固有の情報"
    },
    {
      "indent": 3,
      "text": "When the Route Error is of type OPTION_NOT_SUPPORTED, the Type-Specific Information field is defined as follows:",
      "ja": "ルートエラータイプOPTION_NOT_SUPPORTEDである場合には、以下のように、タイプ固有の情報フィールドが定義されています。"
    },
    {
      "indent": 3,
      "text": "0 1 2 3 4 5 6 7\n+-+-+-+-+-+-+-+-+\n|Unsupported Opt|\n+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Unsupported Opt",
      "ja": "サポートされていないオプト"
    },
    {
      "indent": 9,
      "text": "The Option Type of option triggering the Route Error.",
      "ja": "経路エラーをトリガオプションのオプションタイプ。"
    },
    {
      "indent": 0,
      "text": "6.5. Acknowledgement Request Option",
      "section_title": true,
      "ja": "6.5。謝辞要求オプション"
    },
    {
      "indent": 3,
      "text": "The Acknowledgement Request option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダ内の応答要求オプションが符号化されます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  |  Opt Data Len |         Identification        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "160. Nodes not understanding this option will remove the option and return a Route Error.",
      "ja": "このオプションを理解していない160のノードは、オプションを削除し、ルートエラーが返されます。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。"
    },
    {
      "indent": 6,
      "text": "Identification",
      "ja": "識別"
    },
    {
      "indent": 9,
      "text": "The Identification field is set to a unique value and is copied into the Identification field of the Acknowledgement option when returned by the node receiving the packet over this hop.",
      "ja": "識別フィールドは、一意の値に設定され、このホップにわたってパケットを受信するノードによって戻されたときに確認応答オプションの識別フィールドにコピーされます。"
    },
    {
      "indent": 3,
      "text": "An Acknowledgement Request option MUST NOT appear more than once within a DSR Options header.",
      "ja": "謝辞要求オプションは、一度DSRオプションヘッダ内のより多く見えてはいけません。"
    },
    {
      "indent": 0,
      "text": "6.6. Acknowledgement Option",
      "section_title": true,
      "ja": "6.6。謝辞オプション"
    },
    {
      "indent": 3,
      "text": "The Acknowledgement option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダ内の肯定応答オプションが符号化されます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  |  Opt Data Len |         Identification        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       ACK Source Address                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                     ACK Destination Address                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "32. Nodes not understanding this option will remove the option.",
      "ja": "このオプションを理解していない32.ノードは、オプションを削除します。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。"
    },
    {
      "indent": 6,
      "text": "Identification",
      "ja": "識別"
    },
    {
      "indent": 9,
      "text": "Copied from the Identification field of the Acknowledgement Request option of the packet being acknowledged.",
      "ja": "認知されたパケットの確認応答を要求オプションの識別フィールドからコピーされます。"
    },
    {
      "indent": 6,
      "text": "ACK Source Address",
      "ja": "ACKの送信元アドレス"
    },
    {
      "indent": 9,
      "text": "The address of the node originating the acknowledgement.",
      "ja": "確認応答を発信するノードのアドレス。"
    },
    {
      "indent": 6,
      "text": "ACK Destination Address",
      "ja": "ACKの宛先アドレス"
    },
    {
      "indent": 9,
      "text": "The address of the node to which the acknowledgement is to be delivered.",
      "ja": "肯定応答が配信されるべきノードのアドレス。"
    },
    {
      "indent": 3,
      "text": "An Acknowledgement option MAY appear one or more times within a DSR Options header.",
      "ja": "謝辞オプションは、DSRオプションヘッダ内の1つのまたは複数回表示されることがあります。"
    },
    {
      "indent": 0,
      "text": "6.7. DSR Source Route Option",
      "section_title": true,
      "ja": "6.7。 DSRソースルートオプション"
    },
    {
      "indent": 3,
      "text": "The DSR Source Route option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダー内のDSRソースルートオプションがコード化されています。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  |  Opt Data Len |F|L|Reservd|Salvage| Segs Left |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[1]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[2]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                              ...                              |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Address[n]                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "96. Nodes not understanding this option will drop the packet.",
      "section_title": true,
      "ja": "このオプションを理解していない96.ノードはパケットをドロップします。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields. For the format of the DSR Source Route option defined here, this field MUST be set to the value (n * 4) + 2, where n is the number of addresses present in the Address[i] fields.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。ここで定義されたDSRソースルートオプションのフォーマットのために、このフィールドに値を設定しなければなりません（N * 4）+ 2、nはアドレス[i]のフィールドに存在するアドレスの数です。"
    },
    {
      "indent": 6,
      "text": "First Hop External (F)",
      "ja": "最初のホップ外部（F）"
    },
    {
      "indent": 9,
      "text": "Set to indicate that the first hop indicated by the DSR Source Route option is actually an arbitrary path in a network external to the DSR network; the exact route outside the DSR network is not represented in the DSR Source Route option. Nodes caching this hop in their Route Cache MUST flag the cached hop with the External flag. Such hops MUST NOT be returned in a Route Reply generated from this Route Cache entry, and selection of routes from the Route Cache to route a packet being sent SHOULD prefer routes that contain no hops flagged as External.",
      "ja": "DSRソースルートオプションによって示される第1のホップが実際DSRネットワークの外部のネットワーク内の任意の経路であることを示すように設定。 DSRネットワーク外の正確なルートは、DSRソースルートオプションで表現されていません。そのルートキャッシュMUSTフラグに外部フラグでキャッシュされたホップをこのホップをキャッシュノード。このようなホップは、ルートで返されてはならない送信されるパケットが外部としてフラグ付け一切のホップを含まないルートを好むべきである。このルートキャッシュエントリから生成され、ルートへのルートキャッシュからのルートの選択返信。"
    },
    {
      "indent": 6,
      "text": "Last Hop External (L)",
      "ja": "最終ホップ外部（L）"
    },
    {
      "indent": 9,
      "text": "Set to indicate that the last hop indicated by the DSR Source Route option is actually an arbitrary path in a network external to the DSR network; the exact route outside the DSR network is not represented in the DSR Source Route option. Nodes caching this hop in their Route Cache MUST flag the cached hop with the External flag. Such hops MUST NOT be returned in a Route Reply generated from this Route Cache entry, and selection of routes from the Route Cache to route a packet being sent SHOULD prefer routes that contain no hops flagged as External.",
      "ja": "DSRソースルートオプションによって示された最後のホップがDSRネットワークの外部ネットワーク内の任意のパスが実際にあることを示すために設定します。 DSRネットワーク外の正確なルートは、DSRソースルートオプションで表現されていません。そのルートキャッシュMUSTフラグに外部フラグでキャッシュされたホップをこのホップをキャッシュノード。このようなホップは、ルートで返されてはならない送信されるパケットが外部としてフラグ付け一切のホップを含まないルートを好むべきである。このルートキャッシュエントリから生成され、ルートへのルートキャッシュからのルートの選択返信。"
    },
    {
      "indent": 6,
      "text": "Reserved",
      "ja": "予約済み"
    },
    {
      "indent": 9,
      "text": "MUST be sent as 0 and ignored on reception.",
      "ja": "0として送信され、受信時に無視しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Salvage",
      "ja": "サルベージ"
    },
    {
      "indent": 9,
      "text": "A 4-bit unsigned integer. Count of number of times that this packet has been salvaged as a part of DSR routing (Section 3.4.1).",
      "ja": "4ビットの符号なし整数。このパケットがDSRルーティング（3.4.1）の一部として救済された回数のカウント。"
    },
    {
      "indent": 6,
      "text": "Segments Left (Segs Left)",
      "ja": "左のセグメント（SEGS左）"
    },
    {
      "indent": 9,
      "text": "Number of route segments remaining, i.e., number of explicitly listed intermediate nodes still to be visited before reaching the final destination.",
      "ja": "残りの経路セグメントの数、まだ最終的な宛先に到達する前に訪問される明示的にリストされた中間ノードの、すなわち、数。"
    },
    {
      "indent": 6,
      "text": "Address[1..n]",
      "ja": "アドレス[1..nの]"
    },
    {
      "indent": 9,
      "text": "The sequence of addresses of the source route. In routing and forwarding the packet, the source route is processed as described in Sections 8.1.3 and 8.1.5. The number of addresses present in the Address[1..n] field is indicated by the Opt Data Len field in the option (n = (Opt Data Len - 2) / 4).",
      "ja": "ソースルートのアドレスのシーケンス。セクション8.1.3および8.1.5に記載されるようにパケットをルーティングおよび転送は、ソースルートが処理されます。 [1..nの]フィールドはオプション（ -  2）/ 4、N =（オプトデータLEN）オプトインデータLENフィールドによって示されるアドレスに存在するアドレスの数。"
    },
    {
      "indent": 3,
      "text": "When forwarding a packet along a DSR source route using a DSR Source Route option in the packet's DSR Options header, the Destination Address field in the packet's IP header is always set to the address of the packet's ultimate destination. A node receiving a packet containing a DSR Options header with a DSR Source Route option MUST examine the indicated source route to determine if it is the intended next-hop node for the packet and how to forward the packet, as defined in Sections 8.1.4 and 8.1.5.",
      "ja": "パケットのDSRオプションヘッダー内のDSRソースルートオプションを使用してDSRソースルートに沿ってパケットを転送する場合、パケットのIPヘッダ内の宛先アドレスフィールドには、常にパケットの最終的な宛先のアドレスに設定されています。それが意図され、次のホップパケットのノードおよび方法のセクション8.1.4で定義されるように、パケットを転送する場合DSRソースルートオプションでDSRオプションヘッダを含むパケットを受信したノードは、決定するために、示されたソースルートを調べる必要がありますおよび8.1.5。"
    },
    {
      "indent": 0,
      "text": "6.8. Pad1 Option",
      "section_title": true,
      "ja": "6.8。 PAD1オプション"
    },
    {
      "indent": 3,
      "text": "The Pad1 option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダにおけるパッド1のオプションは、コードされます。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+\n|  Option Type  |\n+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "224. Nodes not understanding this option will drop the packet and return a Route Error.",
      "ja": "224ノードは、このオプションはパケットをドロップし、ルートエラーを返します理解していません。"
    },
    {
      "indent": 3,
      "text": "A Pad1 option MAY be included in the Options field of a DSR Options header in order to align subsequent DSR options, but such alignment is not required and MUST NOT be expected by a node receiving a packet containing a DSR Options header.",
      "ja": "パッド1のオプションは、後続のDSRオプションを整列させるために、DSRオプションヘッダのオプションフィールドに含まれてもよいが、そのような位置合わせは必要とされず、DSRオプションヘッダを含むパケットを受信したノードが期待されてはいけません。"
    },
    {
      "indent": 3,
      "text": "If any headers follow the DSR Options header in a packet, the total length of a DSR Options header, indicated by the Payload Length field in the DSR Options header MUST be a multiple of 4 octets. In this case, when building a DSR Options header in a packet, sufficient Pad1 or PadN options MUST be included in the Options field of the DSR Options header to make the total length a multiple of 4 octets.",
      "ja": "任意のヘッダがパケットにDSRオプションヘッダに従っている場合、DSRオプションヘッダ内のペイロード長さフィールドによって示さDSRオプションヘッダの全長は、4つのオクテットの倍数でなければなりません。パケットにDSRオプションヘッダを構築する際に、この場合、十分なパッド1又はパッドNオプションは、全体の長さを4つのオクテットの倍数にするためにDSRオプションヘッダのオプションフィールドに含まれなければなりません。"
    },
    {
      "indent": 3,
      "text": "If more than one consecutive octet of padding is being inserted in the Options field of a DSR Options header, the PadN option described next, SHOULD be used, rather than multiple Pad1 options.",
      "ja": "パディングの複数の連続するオクテットがDSRオプションヘッダのオプションフィールドに挿入されている場合、次に説明パッドNオプションは、むしろ複数のパッド1オプションよりも、使用されるべきです。"
    },
    {
      "indent": 3,
      "text": "Note that the format of the Pad1 option is a special case; it does not have an Opt Data Len or Option Data field.",
      "ja": "パッド1オプションのフォーマットは、特殊なケースであることに注意してください。それはオプトデータレンまたはオプションデータフィールドを持っていません。"
    },
    {
      "indent": 0,
      "text": "6.9. PadN Option",
      "section_title": true,
      "ja": "6.9。 PADNオプション"
    },
    {
      "indent": 3,
      "text": "The PadN option in a DSR Options header is encoded as follows:",
      "ja": "次のようにDSRオプションヘッダ内のパッドNオプションが符号化されます。"
    },
    {
      "indent": 3,
      "text": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -\n|  Option Type  |  Opt Data Len |   Option Data\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- - - - - - - - -",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "0. Nodes not understanding this option will ignore this option.",
      "ja": "このオプションを理解していない0ノードは、このオプションを無視します。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields. The size of the Option Data field.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。オプションデータフィールドのサイズ。"
    },
    {
      "indent": 6,
      "text": "Option Data",
      "ja": "オプションデータ"
    },
    {
      "indent": 9,
      "text": "A number of zero-valued octets equal to the Opt Data Len.",
      "ja": "オプトデータレンに等しいゼロ値オクテットの数。"
    },
    {
      "indent": 3,
      "text": "A PadN option MAY be included in the Options field of a DSR Options header in order to align subsequent DSR options, but such alignment is not required and MUST NOT be expected by a node receiving a packet containing a DSR Options header.",
      "ja": "パッドNオプションは、後続のDSRオプションを整列させるために、DSRオプションヘッダのオプションフィールドに含まれてもよいが、そのような位置合わせは必要とされず、DSRオプションヘッダを含むパケットを受信したノードが期待されてはいけません。"
    },
    {
      "indent": 3,
      "text": "If any headers follow the DSR Options header in a packet, the total length of a DSR Options header, indicated by the Payload Length field in the DSR Options header, MUST be a multiple of 4 octets. In this case, when building a DSR Options header in a packet, sufficient Pad1 or PadN options MUST be included in the Options field of the DSR Options header to make the total length a multiple of 4 octets.",
      "ja": "任意のヘッダがパケットにDSRオプションヘッダに従っている場合、DSRオプションヘッダ内のペイロード長さフィールドによって示さDSRオプションヘッダの全長は、4つのオクテットの倍数でなければなりません。パケットにDSRオプションヘッダを構築する際に、この場合、十分なパッド1又はパッドNオプションは、全体の長さを4つのオクテットの倍数にするためにDSRオプションヘッダのオプションフィールドに含まれなければなりません。"
    },
    {
      "indent": 0,
      "text": "7. Additional Header Formats and Options for Flow State Extension",
      "section_title": true,
      "ja": "7.追加のヘッダーフォーマットとフロー状態拡張するためのオプション"
    },
    {
      "indent": 3,
      "text": "The optional DSR flow state extension requires a new header type, the DSR Flow State header.",
      "ja": "任意DSRフロー状態の拡張は、新しいヘッダタイプ、DSRフロー状態ヘッダーを必要とします。"
    },
    {
      "indent": 3,
      "text": "In addition, the DSR flow state extension adds the following options for the DSR Options header defined in Section 6:",
      "ja": "また、DSRフロー状態拡張はセクション6で定義されたDSRオプションヘッダは、以下のオプションを追加します。"
    },
    {
      "indent": 3,
      "text": "- Timeout option (Section 7.2.1)",
      "ja": " - タイムアウトオプション（7.2.1項）"
    },
    {
      "indent": 3,
      "text": "- Destination and Flow ID option (Section 7.2.2)",
      "ja": " - デスティネーションおよびフローIDオプション（7.2.2項）"
    },
    {
      "indent": 3,
      "text": "Two new Error Type values are also defined for use in the Route Error option in a DSR Options header:",
      "ja": "二つの新しいエラータイプの値もDSRオプションヘッダー内のルートErrorオプションで使用するために定義されています。"
    },
    {
      "indent": 3,
      "text": "- UNKNOWN_FLOW",
      "ja": " -  UNKNOWN_FLOW"
    },
    {
      "indent": 3,
      "text": "- DEFAULT_FLOW_UNKNOWN",
      "ja": " -  DEFAULT_FLOW_UNKNOWN"
    },
    {
      "indent": 3,
      "text": "Finally, an extension to the Acknowledgement Request option in a DSR Options header is also defined:",
      "ja": "最後に、DSRオプションヘッダで応答要求オプションへの拡張も定義されています。"
    },
    {
      "indent": 3,
      "text": "- Previous Hop Address",
      "ja": " - 前のホップアドレス"
    },
    {
      "indent": 3,
      "text": "This section defines each of these new header, option, or extension formats.",
      "ja": "このセクションでは、これらの新しいヘッダ、オプション、または拡張フォーマットの各々を規定します。"
    },
    {
      "indent": 0,
      "text": "7.1. DSR Flow State Header",
      "section_title": true,
      "ja": "7.1。 DSRフロー状態ヘッダー"
    },
    {
      "indent": 3,
      "text": "The DSR Flow State header is a small 4-byte header optionally used to carry the flow ID and hop count for a packet being sent along a DSR flow. It is distinguished from the fixed DSR Options header (Section 6.1) in that the Flow State Header (F) bit is set in the DSR Flow State header and is clear in the fixed DSR Options header.",
      "ja": "DSRフロー状態ヘッダは、必要に応じてDSR流れに沿って送信されるパケットのフローIDとホップカウントを運ぶために使用される小型の4バイトのヘッダです。フロー状態ヘッダ（F）ビットはDSRフロー状態ヘッダに設定され、固定されたDSRオプションヘッダに明らかであるという点で、それは、固定DSRオプションヘッダ（セクション6.1）と区別されます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Next Header  |F|  Hop Count  |        Flow Identifier        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Next Header",
      "ja": "次のヘッダー"
    },
    {
      "indent": 9,
      "text": "8-bit selector. Identifies the type of header immediately following the DSR Flow State header. Uses the same values as the IPv4 Protocol field [RFC1700].",
      "ja": "8ビットセレクタ。 DSRフロー状態のヘッダの直後のヘッダのタイプを識別します。 IPv4のプロトコルフィールド[RFC1700]と同じ値を使用します。"
    },
    {
      "indent": 6,
      "text": "Flow State Header (F)",
      "ja": "フロー状態ヘッダー（F）"
    },
    {
      "indent": 9,
      "text": "Flag bit. MUST be set to 1. This bit is set in a DSR Flow State header and clear in a DSR Options header (Section 6.1).",
      "ja": "フラグビット。このビットはDSRフロー状態のヘッダに設定されている1に設定し、DSRオプションヘッダ（6.1節）に明確でなければなりません。"
    },
    {
      "indent": 6,
      "text": "Hop Count",
      "ja": "ホップカウント"
    },
    {
      "indent": 9,
      "text": "7-bit unsigned integer. The number of hops through which this packet has been forwarded.",
      "ja": "7ビットの符号なし整数。このパケットが転送されてきた、それを通してホップ数。"
    },
    {
      "indent": 6,
      "text": "Flow Identification",
      "ja": "フロー識別"
    },
    {
      "indent": 9,
      "text": "The flow ID for this flow, as described in Section 3.5.1.",
      "ja": "3.5.1項で説明したようにこのフローのフローID、。"
    },
    {
      "indent": 0,
      "text": "7.2. New Options and Extensions in DSR Options Header",
      "section_title": true,
      "ja": "7.2。 DSRオプションヘッダの新しいオプションと拡張機能"
    },
    {
      "indent": 0,
      "text": "7.2.1. Timeout Option",
      "section_title": true,
      "ja": "7.2.1。タイムアウトオプション"
    },
    {
      "indent": 3,
      "text": "The Timeout option is defined for use in a DSR Options header to indicate the amount of time before the expiration of the flow ID along which the packet is being sent.",
      "ja": "タイムアウトオプションは、パケットが送信されてそれに沿ってフローIDの有効期限までの時間を示すために、DSRオプションヘッダで使用するために定義されています。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  | Opt Data Len  |            Timeout            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "128. Nodes not understanding this option will ignore the option and return a Route Error.",
      "ja": "このオプションを理解していない128のノードは、オプションを無視して、経路エラーが返されます。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。"
    },
    {
      "indent": 9,
      "text": "When no extensions are present, the Opt Data Len of a Timeout option is 2. Further extensions to DSR may include additional data in a Timeout option. The presence of such extensions is indicated by an Opt Data Len greater than 2. Currently, no such extensions have been defined.",
      "ja": "何の拡張子が存在しない場合は、タイムアウトオプションのオプトデータレンはDSR 2.さらなる拡張がタイムアウトオプションで追加データを含むことがあります。そのような拡張の存在は、現在、2より大きく、そのような機能拡張が定義されていないオプトデータレンで示されています。"
    },
    {
      "indent": 6,
      "text": "Timeout",
      "ja": "タイムアウト"
    },
    {
      "indent": 9,
      "text": "The number of seconds for which this flow remains valid.",
      "ja": "このフローは有効なままであるために秒数。"
    },
    {
      "indent": 3,
      "text": "The Timeout option MUST NOT appear more than once within a DSR Options header.",
      "ja": "タイムアウト]オプションは、一度DSRオプションヘッダ内のより多く見えてはいけません。"
    },
    {
      "indent": 0,
      "text": "7.2.2. Destination and Flow ID Option",
      "section_title": true,
      "ja": "7.2.2。目的地およびフローID・オプション"
    },
    {
      "indent": 3,
      "text": "The Destination and Flow ID option is defined for use in a DSR Options header to send a packet to an intermediate host along one flow, for eventual forwarding to the final destination along a different flow. This option enables the aggregation of the state of multiple flows.",
      "ja": "宛先およびフローIDオプションは、異なる流れに沿って、最終的な宛先への最終的な転送のために、一つのフローに沿った中間ホストにパケットを送信するDSRオプションヘッダで使用するために定義されています。このオプションは、複数のフローの状態の集約を可能にします。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  | Opt Data Len  |      New Flow Identifier      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   New IP Destination Address                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "129. Nodes not understanding this option will ignore the option and return a Route Error.",
      "ja": "このオプションを理解していない129のノードは、オプションを無視して、経路エラーが返されます。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。"
    },
    {
      "indent": 9,
      "text": "When no extensions are present, the Opt Data Len of a Destination and Flow ID option is 6. Further extensions to DSR may include additional data in a Destination and Flow ID option. The presence of such extensions is indicated by an Opt Data Len greater than 6. Currently, no such extensions have been defined.",
      "ja": "何の拡張子が存在しない場合には、先のオプトデータレンとフローIDオプションは、DSR 6.さらに拡張は、追加先のデータおよびフローIDオプションを含むことがあります。そのような拡張の存在は、現在、6より大きく、そのような機能拡張が定義されていないオプトデータレンで示されています。"
    },
    {
      "indent": 6,
      "text": "New Flow Identifier",
      "ja": "新しいフロー識別子"
    },
    {
      "indent": 9,
      "text": "Indicates the next identifier to store in the Flow ID field of the DSR Options header.",
      "ja": "DSRオプションヘッダのフローIDフィールドに格納する次の識別子を示します。"
    },
    {
      "indent": 6,
      "text": "New IP Destination Address",
      "ja": "新しいIP宛先アドレス"
    },
    {
      "indent": 9,
      "text": "Indicates the next address to store in the Destination Address field of the IP header.",
      "ja": "IPヘッダの宛先アドレスフィールドに格納するための次のアドレスを示します。"
    },
    {
      "indent": 3,
      "text": "The Destination and Flow ID option MAY appear one or more times within a DSR Options header.",
      "ja": "デスティネーションとフローIDのオプションは、DSRオプションヘッダ内の1つのまたは複数回表示されることがあります。"
    },
    {
      "indent": 0,
      "text": "7.3. New Error Types for Route Error Option",
      "section_title": true,
      "ja": "7.3。ルート・エラー・オプションの新しいエラーの種類"
    },
    {
      "indent": 0,
      "text": "7.3.1. Unknown Flow Type-Specific Information",
      "section_title": true,
      "ja": "7.3.1。不明なフロータイプ固有の情報"
    },
    {
      "indent": 3,
      "text": "A new Error Type value of 129 (UNKNOWN_FLOW) is defined for use in a Route Error option in a DSR Options header. The Type-Specific Information for errors of this type is encoded as follows:",
      "ja": "129（UNKNOWN_FLOW）の新しいエラータイプ値はDSRオプションヘッダ内の経路エラー・オプションで使用するために定義されています。次のようにこの種のエラーの種類に固有の情報が符号化されます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                Original IP Destination Address                |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|            Flow ID            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Original IP Destination Address",
      "ja": "オリジナルIP宛先アドレス"
    },
    {
      "indent": 9,
      "text": "The IP Destination Address of the packet that caused the error.",
      "ja": "エラーの原因となったパケットのIP宛先アドレス。"
    },
    {
      "indent": 6,
      "text": "Flow ID",
      "ja": "フローID"
    },
    {
      "indent": 9,
      "text": "The Flow ID contained in the DSR Flow ID option that caused the error.",
      "ja": "フローIDは、エラーの原因となったDSRフローIDオプションに含まれています。"
    },
    {
      "indent": 0,
      "text": "7.3.2. Default Flow Unknown Type-Specific Information",
      "section_title": true,
      "ja": "7.3.2。デフォルトのフロー未知のタイプに固有の情報"
    },
    {
      "indent": 3,
      "text": "A new Error Type value of 130 (DEFAULT_FLOW_UNKNOWN) is defined for use in a Route Error option in a DSR Options header. The Type-Specific Information for errors of this type is encoded as follows:",
      "ja": "130（DEFAULT_FLOW_UNKNOWN）の新しいエラータイプ値はDSRオプションヘッダ内の経路エラー・オプションで使用するために定義されています。次のようにこの種のエラーの種類に固有の情報が符号化されます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|               Original IP Destination Address                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Original IP Destination Address",
      "ja": "オリジナルIP宛先アドレス"
    },
    {
      "indent": 9,
      "text": "The IP Destination Address of the packet that caused the error.",
      "ja": "エラーの原因となったパケットのIP宛先アドレス。"
    },
    {
      "indent": 0,
      "text": "7.4. New Acknowledgement Request Option Extension",
      "section_title": true,
      "ja": "7.4。新しい承認要求オプションの拡張"
    },
    {
      "indent": 0,
      "text": "7.4.1. Previous Hop Address Extension",
      "section_title": true,
      "ja": "7.4.1。前のホップアドレス拡張"
    },
    {
      "indent": 3,
      "text": "When the Opt Data Len field of an Acknowledgement Request option in a DSR Options header is greater than or equal to 6, the ACK Request Source Address field is present. The option is then formatted as follows:",
      "ja": "DSRオプションヘッダ内の応答要求オプションのオプトデータLENフィールドが6以上の場合、ACKリクエスト送信元アドレスフィールドが存在します。次のようにオプションは、フォーマットされます。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  | Opt Data Len  |       Packet Identifier       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   ACK Request Source Address                  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "160. Nodes not understanding this option will remove the option and return a Route Error.",
      "ja": "このオプションを理解していない160のノードは、オプションを削除し、ルートエラーが返されます。"
    },
    {
      "indent": 6,
      "text": "Opt Data Len",
      "ja": "オプトデータレン"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Opt Data Len fields.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプトデータレンフィールドを除くオクテット内のオプションの長さ、、。"
    },
    {
      "indent": 9,
      "text": "When no extensions are presents, the Opt Data Len of an Acknowledgement Request option is 2. Further extensions to DSR may include additional data in an Acknowledgement Request option. The presence of such extensions is indicated by an Opt Data Len greater than 2.",
      "ja": "何の拡張子がプレゼントされていない場合は、承認要求オプションのオプトデータレンはDSR 2.さらなる拡張が承認要求オプションで追加データを含むことがあります。そのような拡張の存在は、オプトデータレンより大きい2で示されています。"
    },
    {
      "indent": 9,
      "text": "Currently, one such extension has been defined. If the Opt Data Len is at least 6, then an ACK Request Source Address is present.",
      "ja": "現在、そのような拡張が定義されています。オプトデータレンは、少なくとも6の場合、ACKの要求元アドレスが存在しています。"
    },
    {
      "indent": 6,
      "text": "Packet Identifier",
      "ja": "パケット識別子"
    },
    {
      "indent": 9,
      "text": "The Packet Identifier field is set to a unique number and is copied into the Identification field of the DSR Acknowledgement option when returned by the node receiving the packet over this hop.",
      "ja": "パケット識別子フィールドは、固有の番号に設定され、このホップにわたってパケットを受信するノードによって戻されたときにDSR肯定応答オプションの識別フィールドにコピーされます。"
    },
    {
      "indent": 6,
      "text": "ACK Request Source Address",
      "ja": "ACK要求元アドレス"
    },
    {
      "indent": 9,
      "text": "The address of the node requesting the DSR Acknowledgement.",
      "ja": "DSR謝辞を要求するノードのアドレス。"
    },
    {
      "indent": 0,
      "text": "8. Detailed Operation",
      "section_title": true,
      "ja": "8.詳細動作"
    },
    {
      "indent": 0,
      "text": "8.1. General Packet Processing",
      "section_title": true,
      "ja": "8.1。一般的なパケット処理"
    },
    {
      "indent": 0,
      "text": "8.1.1. Originating a Packet",
      "section_title": true,
      "ja": "8.1.1。パケットを発信"
    },
    {
      "indent": 3,
      "text": "When originating any packet, a node using DSR routing MUST perform the following sequence of steps:",
      "ja": "任意のパケットを発信するとき、DSRルーティングを使用して、ノードは、ステップの次のシーケンスを実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "- Search the node's Route Cache for a route to the address given in the IP Destination Address field in the packet's header.",
      "ja": " - パケットのヘッダにIP宛先アドレスフィールドで指定されたアドレスへのルートのノードのルートキャッシュを検索します。"
    },
    {
      "indent": 3,
      "text": "- If no such route is found in the Route Cache, then perform Route Discovery for the Destination Address, as described in Section 8.2. Initiating a Route Discovery for this target node address results in the node adding a Route Request option in a DSR Options header in this existing packet, or saving this existing packet to its Send Buffer and initiating the Route Discovery by sending a separate packet containing such a Route Request option. If the node chooses to initiate the Route Discovery by adding the Route Request option to this existing packet, it will replace the IP Destination Address field with the IP \"limited broadcast\" address (255.255.255.255) [RFC1122], copying the original IP Destination Address to the Target Address field of the new Route Request option added to the packet, as described in Section 8.2.1.",
      "ja": " - そのようなルートがルートキャッシュに見つからない場合は、セクション8.2で説明したように、その後、宛先アドレスに対応する経路探索を行います。この既存のパケットでDSRオプションヘッダに経路要求オプションを追加する、またはその送信バッファには、この既存のパケットを保存し、そのようなAを含む別個のパケットを送信することによって経路探索を開始するノードにこのターゲットノードアドレス結果の経路探索を開始しますルート要求オプション。ノードは、この既存のパケットにルート要求オプションを追加することにより、経路探索を開始することを選択した場合は、元のIP宛先をコピーし、IP「限定されたブロードキャスト」アドレス（255.255.255.255）[RFC1122]でIP宛先アドレスフィールドに置き換えられます8.2.1項で説明したように、新たなルート要求オプションのターゲットアドレスフィールドにアドレスは、パケットに付加しました。"
    },
    {
      "indent": 3,
      "text": "- If the packet now does not contain a Route Request option, then this node must have a route to the Destination Address of the packet; if the node has more than one route to this Destination Address, the node selects one to use for this packet. If the length of this route is greater than 1 hop, or if the node determines to request a DSR network-layer acknowledgement from the first-hop node in that route, then insert a DSR Options header into the packet, as described in Section 8.1.2, and insert a DSR Source Route option, as described in Section 8.1.3. The source route in the packet is initialized from the selected route to the Destination Address of the packet.",
      "ja": " - パケットが今やルート要求オプションが含まれていない場合、このノードは、パケットの宛先アドレスへのルートを持っている必要があります。ノードはこの宛先アドレスに複数のルートを持っている場合、ノードは、このパケットに使用するものを選択します。 8.1節で説明したように、この経路の長さは、1つのホップよりも大きい場合、またはノードがその経路の最初のホップノードからDSRネットワーク層肯定応答を要求することを決定する場合、パケットにDSRオプションヘッダを挿入する場合0.2、および8.1.3項で説明したように、DSRソースルートオプションを挿入します。パケットの送信元のルートは、パケットの宛先アドレスに選択されたルートから初期化されます。"
    },
    {
      "indent": 3,
      "text": "- Transmit the packet to the first-hop node address given in selected source route, using Route Maintenance to determine the reachability of the next hop, as described in Section 8.3.",
      "ja": " - セクション8.3で説明したように、次のホップの到達可能性を判定するためにルートメンテナンスを使用して、選択されたソースルートで与えられる最初のホップノードのアドレスにパケットを送信します。"
    },
    {
      "indent": 0,
      "text": "8.1.2. Adding a DSR Options Header to a Packet",
      "section_title": true,
      "ja": "8.1.2。パケットにDSRオプションヘッダーを追加します"
    },
    {
      "indent": 3,
      "text": "A node originating a packet adds a DSR Options header to the packet, if necessary, to carry information needed by the routing protocol. A packet MUST NOT contain more than one DSR Options header. A DSR Options header is added to a packet by performing the following sequence of steps (these steps assume that the packet contains no other headers that MUST be located in the packet before the DSR Options header):",
      "ja": "パケットを発信するノードは、必要に応じて、ルーティングプロトコルが必要とする情報を運ぶために、パケットにDSRオプションヘッダを付加します。パケットは、複数のDSRオプションヘッダを含めることはできません。 DSRオプションヘッダは、（これらのステップは、パケットがDSRオプションヘッダの前にパケット内に配置されなければならない他のヘッダが含まれていないと仮定）以下の一連のステップを実行することによって、パケットに付加されます。"
    },
    {
      "indent": 3,
      "text": "- Insert a DSR Options header after the IP header but before any other header that may be present.",
      "ja": " -  IPヘッダの後で存在し得る任意の他のヘッダの前にDSRオプションヘッダを挿入します。"
    },
    {
      "indent": 3,
      "text": "- Set the Next Header field of the DSR Options header to the Protocol number field of the packet's IP header.",
      "ja": " - パケットのIPヘッダのプロトコル番号フィールドにDSRオプションヘッダの次ヘッダフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Set the Protocol field of the packet's IP header to the protocol number assigned for DSR (48).",
      "ja": " -  DSR（48）に割り当てられたプロトコル番号にパケットのIPヘッダのプロトコルフィールドを設定します。"
    },
    {
      "indent": 0,
      "text": "8.1.3. Adding a DSR Source Route Option to a Packet",
      "section_title": true,
      "ja": "8.1.3。パケットにDSRソースルートオプションの追加"
    },
    {
      "indent": 3,
      "text": "A node originating a packet adds a DSR Source Route option to the packet, if necessary, in order to carry the source route from this originating node to the final destination address of the packet. Specifically, the node adding the DSR Source Route option constructs the DSR Source Route option and modifies the IP packet according to the following sequence of steps:",
      "ja": "必要に応じてパケットを発信するノードは、パケットの最終宛先アドレスにこの発信ノードからソースルートを実行するために、パケットにDSRソースルートオプションを付加します。具体的には、DSRソースルートオプションを追加したノードは、DSRソースルートオプションを構築し、次のステップの順序に従ってIPパケットを変更します。"
    },
    {
      "indent": 3,
      "text": "- The node creates a DSR Source Route option, as described in Section 6.7, and appends it to the DSR Options header in the packet. (A DSR Options header is added, as described in Section 8.1.2, if not already present.)",
      "ja": " - ノードは、セクション6.7で説明したように、DSRソースルートオプションを作成し、パケット内DSRオプションヘッダに追加します。 （DSRオプションヘッダは、セクション8.1.2で説明したように、添加しない場合は、既に存在しています。）"
    },
    {
      "indent": 3,
      "text": "- The number of Address[i] fields to include in the DSR Source Route option (n) is the number of intermediate nodes in the source route for the packet (i.e., excluding the address of the originating node and the final destination address of the packet). The Segments Left field in the DSR Source Route option is initialized equal to n.",
      "ja": " -  DSRソースルートオプション（N）に含めるアドレスの数[i]のフィールドは、発信ノードのアドレスとの最終的な宛先アドレスを除いたパケットの送信元経路における中間ノードの数（すなわち、ありますパケット）。 DSRソースルートオプションでフィールドを左セグメントは、nに等しい初期化されます。"
    },
    {
      "indent": 3,
      "text": "- The addresses within the source route for the packet are copied into sequential Address[i] fields in the DSR Source Route option, for i = 1, 2, ..., n.",
      "ja": " - パケットの送信元経路内のアドレスが順次アドレスにコピーされている[I] DSRソースルートオプションのフィールドに対するI = 1、2、...、N。"
    },
    {
      "indent": 3,
      "text": "- The First Hop External (F) bit in the DSR Source Route option is copied from the External bit flagging the first hop in the source route for the packet, as indicated in the Route Cache.",
      "ja": " - ルートキャッシュに示されているようにDSRソースルートオプションで最初のホップの外部（F）ビットは、パケットの送信元経路の最初のホップにフラグを立てる外部ビットからコピーされます。"
    },
    {
      "indent": 3,
      "text": "- The Last Hop External (L) bit in the DSR Source Route option is copied from the External bit flagging the last hop in the source route for the packet, as indicated in the Route Cache.",
      "ja": " - ルートキャッシュに示されるように、DSRソースルートオプションで最終ホップ外部（L）ビットは、パケットの送信元ルートの最後のホップにフラグを立てる外部ビットからコピーされます。"
    },
    {
      "indent": 3,
      "text": "- The Salvage field in the DSR Source Route option is initialized to 0.",
      "ja": " -  DSRソースルートオプションでサルベージフィールドが0に初期化されます。"
    },
    {
      "indent": 0,
      "text": "8.1.4. Processing a Received Packet",
      "section_title": true,
      "ja": "8.1.4。受信したパケットを処理"
    },
    {
      "indent": 3,
      "text": "When a node receives any packet (whether for forwarding, overheard, or the final destination of the packet), if that packet contains a DSR Options header, then that node MUST process any options contained in that DSR Options header, in the order contained there. Specifically:",
      "ja": "ノードが（転送のため、耳にするかどうか、またはパケットの最終宛先）任意のパケットを受信した場合、そのパケットは、DSRオプションヘッダが含まれている場合、そのノードは、そこに含まれるために、そのDSRオプションヘッダに含まれるオプションを処理しなければなりません。具体的に："
    },
    {
      "indent": 3,
      "text": "- If the DSR Options header contains a Route Request option, the node SHOULD extract the source route from the Route Request and add this routing information to its Route Cache, subject to the conditions identified in Section 3.3.1. The routing information from the Route Request is the sequence of hop addresses",
      "ja": " -  DSRオプションヘッダは、ルート要求オプションが含まれている場合、ノードは、ルート要求から送信元経路を抽出し、セクション3.3.1において同定条件に従う、そのルートキャッシュ、このルーティング情報を追加する必要があります。ルート要求からのルーティング情報は、ホップ・アドレスのシーケンスであります"
    },
    {
      "indent": 9,
      "text": "initiator, Address[1], Address[2], ..., Address[n]",
      "ja": "イニシエータは、アドレス[1]、[2]、...、[n]のアドレスをアドレス"
    },
    {
      "indent": 6,
      "text": "where initiator is the value of the Source Address field in the IP header of the packet carrying the Route Request (the address of the initiator of the Route Discovery), and each Address[i] is a node through which this Route Request has passed, in turn, during this Route Discovery. The value n, here, is the number of addresses recorded in the Route Request option, or (Opt Data Len - 6) / 4.",
      "ja": "イニシエータは、ルート要求（経路探索の開始アドレス）を運ぶパケット、及び各アドレスのIPヘッダのソースアドレスフィールドの値である[i]は、このルート要求が通過したノードでありますターンでは、この経路探索中。値nは、ここで、又は経路要求オプションに記録されたアドレスの数である（オプションデータレン -  6）/ 4。"
    },
    {
      "indent": 6,
      "text": "After possibly updating the node's Route Cache in response to the routing information in the Route Request option, the node MUST then process the Route Request option as described in Section 8.2.2.",
      "ja": "セクション8.2.2に記載したように、おそらく経路要求オプションでルーティング情報に応答して、ノードのルートキャッシュを更新した後、ノードは、ルート要求オプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the DSR Options header contains a Route Reply option, the node SHOULD extract the source route from the Route Reply and add this routing information to its Route Cache, subject to the conditions identified in Section 3.3.1. The source route from the Route Reply is the sequence of hop addresses",
      "ja": " -  DSRオプションヘッダは、ルートオプションを返信が含まれている場合、ノードは、ルートリプライからソースルートを抽出し、セクション3.3.1において同定条件に従う、そのルートキャッシュにこのルーティング情報を、追加する必要があります。ルート応答からソース経路は、ホップ・アドレスのシーケンスであります"
    },
    {
      "indent": 9,
      "text": "initiator, Address[1], Address[2], ..., Address[n]",
      "ja": "イニシエータは、アドレス[1]、[2]、...、[n]のアドレスをアドレス"
    },
    {
      "indent": 6,
      "text": "where initiator is the value of the Destination Address field in the IP header of the packet carrying the Route Reply (the address of the initiator of the Route Discovery), and each Address[i] is a node through which the source route passes, in turn, on the route to the target of the Route Discovery. Address[n] is the address of the target. If the Last Hop External (L) bit is set in the Route Reply, the node MUST flag the last hop from the Route Reply (the link from Address[n-1] to Address[n]) in its Route Cache as External. The value n here is the number of addresses in the source route being returned in the Route Reply option, or (Opt Data Len - 1) / 4.",
      "ja": "イニシエータは、[I]において、送信元経路が通過するノードであるルート応答（経路探索の開始アドレス）、及び各アドレスを運ぶパケットのIPヘッダの宛先アドレス・フィールドの値であります経路探索の対象へのルート上で、オンにします。アドレス[n]は、ターゲットのアドレスです。最終ホップ外部（L）ビットは、外部としてそのルートキャッシュ内のルート応答（アドレスからリンク[N-1] [n]を対処するために）からルート応答、ノードMUSTフラグ最終ホップに設定されている場合。 / 4  - ここで値nが送信元経路のアドレスの数オプションを返信、または（1オプトデータLEN）ルートで返されています。"
    },
    {
      "indent": 6,
      "text": "After possibly updating the node's Route Cache in response to the routing information in the Route Reply option, then if the packet's IP Destination Address matches one of this node's IP addresses, the node MUST then process the Route Reply option as described in Section 8.2.6.",
      "ja": "オプションを返信パケットのIP宛先アドレスがこのノードのIPアドレスのいずれかに一致した場合、おそらくルートにおけるルーティング情報に応じて、ノードのルートキャッシュを更新した後、その後、ノードは、セクション8.2.6で説明したようにオプションを返信ルートを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the DSR Options header contains a Route Error option, the node MUST process the Route Error option as described in Section 8.3.5.",
      "ja": " -  DSRオプションヘッダは、ルート・エラー・オプションが含まれている場合は、セクション8.3.5で説明したように、ノードは経路エラーオプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the DSR Options header contains an Acknowledgement Request option, the node MUST process the Acknowledgement Request option as described in Section 8.3.3.",
      "ja": " -  DSRオプションヘッダは、受信確認要求オプションが含まれている場合は、セクション8.3.3で説明したように、ノードは、肯定応答要求オプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the DSR Options header contains an Acknowledgement option, then subject to the conditions identified in Section 3.3.1, the node SHOULD add to its Route Cache the single link from the node identified by the ACK Source Address field to the node identified by the ACK Destination Address field.",
      "ja": " -  DSRオプションヘッダーは、セクション3.3.1で特定した条件に続い対象謝辞オプションが含まれている場合、ノードは、そのルートキャッシュにで識別されるノードにACKの送信元アドレスフィールドによって識別されるノードから単一のリンクを追加すべきですACK宛先アドレスフィールド。"
    },
    {
      "indent": 6,
      "text": "After possibly updating the node's Route Cache in response to the routing information in the Acknowledgement option, the node MUST then process the Acknowledgement option as described in Section 8.3.3.",
      "ja": "セクション8.3.3に記載したように、おそらく肯定応答オプションでルーティング情報に応答して、ノードのルートキャッシュを更新した後、ノードは、肯定応答オプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the DSR Options header contains a DSR Source Route option, the node SHOULD extract the source route from the DSR Source Route option and add this routing information to its Route Cache, subject to the conditions identified in Section 3.3.1. If the value of the Salvage field in the DSR Source Route option is zero, then the routing information from the DSR Source Route is the sequence of hop addresses",
      "ja": " -  DSRオプションヘッダはDSRソースルートオプションが含まれている場合、ノードはDSRソースルートオプションからソースルートを抽出し、セクション3.3.1において同定条件に従う、そのルートキャッシュ、このルーティング情報を追加する必要があります。 DSRソースルートオプションでサルベージフィールドの値がゼロの場合は、DSRソースルートからのルーティング情報は、ホップアドレスのシーケンスであります"
    },
    {
      "indent": 9,
      "text": "source, Address[1], Address[2], ..., Address[n], destination",
      "ja": "ソースは、[1]、[2]、...、[n]のアドレス、宛先アドレスアドレス"
    },
    {
      "indent": 6,
      "text": "Otherwise (i.e., if Salvage is nonzero), the routing information from the DSR Source Route is the sequence of hop addresses",
      "ja": "（サルベージがゼロでない場合、すなわち、）それ以外の場合、DSRソースルートからのルーティング情報は、ホップ・アドレスのシーケンスであります"
    },
    {
      "indent": 9,
      "text": "Address[1], Address[2], ..., Address[n], destination",
      "ja": "アドレス[1]、...、[2]のアドレス[n]を、宛先アドレス"
    },
    {
      "indent": 6,
      "text": "where source is the value of the Source Address field in the IP header of the packet carrying the DSR Source Route option (the original sender of the packet), each Address[i] is the value in the Address[i] field in the DSR Source Route option, and destination is the value of the Destination Address field in the packet's IP header (the last-hop address of the source route). The value n here is the number of addresses in source route in the DSR Source Route option, or (Opt Data Len - 2) / 4.",
      "ja": "ソースはDSRソースルートオプション（パケットの元の送信者）、各アドレスを運ぶパケットのIPヘッダのソースアドレスフィールドの値であり、[I] DSRにおけるアドレス[i]のフィールドの値でありますソースルートオプション、および宛先は、パケットのIPヘッダ内の宛先アドレスフィールドの値（ソースルートの最後のホップアドレス）です。 / 4  - ここで値nは、DSRソースルートオプションでソースルートのアドレス、または（2オプトデータLEN）の数です。"
    },
    {
      "indent": 6,
      "text": "After possibly updating the node's Route Cache in response to the routing information in the DSR Source Route option, the node MUST then process the DSR Source Route option as described in Section 8.1.5.",
      "ja": "セクション8.1.5で説明したように、おそらくDSRソースルートオプションでのルーティング情報に応じて、ノードのルートキャッシュを更新した後、ノードは、DSRソースルートオプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Any Pad1 or PadN options in the DSR Options header are ignored.",
      "ja": " -  DSRオプションヘッダー内の任意のパッド1またはパッドNオプションは無視されます。"
    },
    {
      "indent": 3,
      "text": "- Finally, if the Destination Address in the packet's IP header matches one of this receiving node's own IP address(es), remove the DSR Options header and all the included DSR options in the header, and pass the rest of the packet to the network layer.",
      "ja": " - パケットのIPヘッダ内の宛先アドレスが、この受信ノード自身のIPアドレス（複数可）のいずれかに一致する場合は最後に、DSRのオプションヘッダとヘッダ内のすべて含まDSRのオプションを削除し、ネットワークにパケットの残りを渡します層。"
    },
    {
      "indent": 0,
      "text": "8.1.5. Processing a Received DSR Source Route Option",
      "section_title": true,
      "ja": "8.1.5。受信DSRソースルートオプションの処理"
    },
    {
      "indent": 3,
      "text": "When a node receives a packet containing a DSR Source Route option (whether for forwarding, overheard, or the final destination of the packet), that node SHOULD examine the packet to determine if the receipt of that packet indicates an opportunity for automatic route shortening, as described in Section 3.4.3. Specifically, if this",
      "ja": "ノードが（転送のため、傍受、またはパケットの最終宛先かどうか）DSRソースルートオプションを含むパケットを受信した場合、そのノードは、そのパケットの受信が自動ルート短縮の機会を示しているかどうかを決定するためにパケットを調べる必要があり、第3.4.3項で説明したように。具体的には、この場合"
    },
    {
      "indent": 3,
      "text": "node is not the intended next-hop destination for the packet but is named in the later unexpended portion of the source route in the packet's DSR Source Route option, then this packet indicates an opportunity for automatic route shortening: the intermediate nodes after the node from which this node overheard the packet and before this node itself are no longer necessary in the source route. In this case, this node SHOULD perform the following sequence of steps as part of automatic route shortening:",
      "ja": "ノードは、パケットのための意図した次ホップ先ではなく、パケットのDSRソースルートオプションでソースルートの後のunexpended部分で命名され、その後、このパケットは、自動ルート短縮のための機会を示していますから、ノードの後に​​中間ノードこれは、このノードがパケットを傍受し、このノードの前に自身が送信元経路にもはや必要ではありません。この場合、このノードは、自動ルート短縮の一部として、以下の一連のステップを実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "- The node searches its Gratuitous Route Reply Table for an entry describing a gratuitous Route Reply earlier sent by this node, for which the original sender (of the packet triggering the gratuitous Route Reply) and the transmitting node (from which this node overheard that packet in order to trigger the gratuitous Route Reply) both match the respective node addresses for this new received packet. If such an entry is found in the node's Gratuitous Route Reply Table, the node SHOULD NOT perform automatic route shortening in response to this receipt of this packet.",
      "ja": " - ノードは、その無償経路が元の送信者（無償ルート応答をトリガーパケット）と送信ノードは、（そこからこのノードがパケットこと耳れる前にこのノードによって送信された返信無償ルートを記述エントリ、表返信検索します無償ルート応答を誘発するために）この新たな受信パケットのそれぞれのノードアドレスと一致し、両方。そのようなエントリは、ノードの無償ルートで発見された場合は、表を返信、ノードは、このパケットのこの受信に応答して自動ルートの短縮を行うべきではありません。"
    },
    {
      "indent": 3,
      "text": "- Otherwise, the node creates an entry for this overheard packet in its Gratuitous Route Reply Table. The timeout value for this new entry SHOULD be initialized to the value GratReplyHoldoff. After this timeout has expired, the node SHOULD delete this entry from its Gratuitous Route Reply Table.",
      "ja": " - そうでない場合、ノードは、その無償経路上でこの耳パケットのためのエントリを作成する表を返信。この新しいエントリのタイムアウト値は、値GratReplyHoldoffに初期化する必要があります。このタイムアウトが経過した後、ノードは、その無償経路返答表からこのエントリを削除する必要があります。"
    },
    {
      "indent": 3,
      "text": "- After creating the new Gratuitous Route Reply Table entry above, the node originates a gratuitous Route Reply to the IP Source Address of this overheard packet, as described in Section 3.4.3.",
      "ja": " - 上記の表のエントリを返信新しい無償ルートを作成した後、ノードは、セクション3.4.3に記載したように無償経路は、この傍受パケットのIPソースアドレスに返信発信します。"
    },
    {
      "indent": 6,
      "text": "If the MAC protocol in use in the network is not capable of transmitting unicast packets over unidirectional links, as discussed in Section 3.3.1, then in originating this Route Reply, the node MUST use a source route for routing the Route Reply packet that is obtained by reversing the sequence of hops over which the packet triggering the gratuitous Route Reply was routed in reaching and being overheard by this node. This reversing of the route uses the gratuitous Route Reply to test this sequence of hops for bidirectionality, preventing the gratuitous Route Reply from being received by the initiator of the Route Discovery unless each of the hops over which the gratuitous Route Reply is returned is bidirectional.",
      "ja": "ネットワークで使用されているMACプロトコルは、単方向リンクを介してユニキャストパケットを送信することができない場合は、3.3.1項で説明したように、このルート応答を発信元に、ノードは、ルートリプライパケットをルーティングするためのソースルートを使用しなければなりません無償ルート応答をトリガーパケットが到達にルーティングし、このノードによって傍受され、その上ホップのシーケンスを反転させました。ルートの反転これは無償ルート応答が返されるにわたってホップのそれぞれが双方向でない限り、経路探索の開始によって受信さから無償ルート応答を防止する、双方向性のためのホップのこのシーケンスをテストするために無償ルート応答を使用します。"
    },
    {
      "indent": 3,
      "text": "- Discard the overheard packet, since the packet has been received before its normal traversal of the packet's source route would have caused it to reach this receiving node. Another copy of the packet will normally arrive at this node as indicated in the packet's source route; discarding this initial copy of the packet, which triggered the gratuitous Route Reply, will prevent the duplication of this packet that would otherwise occur.",
      "ja": " - パケットが受信されているので、パケットの送信元ルートの通常のトラバーサルはこの受信ノードに到達するために、それを引き起こしているだろう前に、耳にパケットを破棄します。パケットの別のコピーは、通常、パケットの送信元経路に示されているように、このノードに到着します。無償経路応答を引き起こしたパケットのこの最初のコピーを破棄し、そうでない場合に発生する。このパケットの重複を防ぐことができます。"
    },
    {
      "indent": 3,
      "text": "If the packet is not discarded as part of automatic route shortening above, then the node MUST process the Source Route option according to the following sequence of steps:",
      "ja": "パケットが上記短縮自動ルートの一部として廃棄されていない場合、ノードは、ステップの次のシーケンスに従ってソースルートオプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the value of the Segments Left field in the DSR Source Route option equals 0, then remove the DSR Source Route option from the DSR Options header.",
      "ja": " -  DSRソースルートオプションのフィールド左のセグメントの値が0の場合、DSRオプションヘッダからDSRソースルートオプションを削除します。"
    },
    {
      "indent": 3,
      "text": "- Else, let n equal (Opt Data Len - 2) / 4. This is the number of addresses in the DSR Source Route option.",
      "ja": " - これはDSRソースルートオプション内のアドレスの数です/ 4  - そうでなければ、（2オプトデータレン）等しいNましょう。"
    },
    {
      "indent": 3,
      "text": "- If the value of the Segments Left field is greater than n, then send an ICMP Parameter Problem, Code 0, message [RFC792] to the IP Source Address, pointing to the Segments Left field, and discard the packet. Do not process the DSR Source Route option further.",
      "ja": " - セグメント左フィールドの値がnより大きい場合、フィールド左セグメントを指し、ICMPパラメータ問題、コード0、[RFC792] IPソースアドレスにメッセージを送信し、パケットを廃棄します。さらにDSRソースルートオプションを処理しないでください。"
    },
    {
      "indent": 3,
      "text": "- Else, decrement the value of the Segments Left field by 1. Let i equal n minus Segments Left. This is the index of the next address to be visited in the Address vector.",
      "ja": " - そうでなければ、iがnマイナスのセグメントが左等しく1.レッツによってSegments Leftフィールドの値をデクリメントします。これは、アドレスベクトルで訪問される次のアドレスのインデックスです。"
    },
    {
      "indent": 3,
      "text": "- If Address[i] or the IP Destination Address is a multicast address, then discard the packet. Do not process the DSR Source Route option further.",
      "ja": " - アドレス[I]またはIP宛先アドレスがマルチキャストアドレスである場合は、そのパケットを破棄する。さらにDSRソースルートオプションを処理しないでください。"
    },
    {
      "indent": 3,
      "text": "- If this node has more than one network interface and if Address[i] is the address of one this node's network interfaces, then this indicates a change in the network interface to use in forwarding the packet, as described in Section 8.4. In this case, decrement the value of the Segments Left field by 1 to skip over this address (that indicated the change of network interface) and go to the first step above (checking the value of the Segments Left field) to continue processing this Source Route option; in further processing of this Source Route option, the indicated new network interface MUST be used in forwarding the packet.",
      "ja": " - このノードが複数のネットワークインタフェースがある場合とアドレス[i]が1つのこのノードのネットワークインタフェースのアドレスである場合、セクション8.4で説明したように、これは、パケットを転送する際に使用するネットワークインタフェースの変化を示します。この場合には、（ネットワークインタフェースの変化を示す）、このアドレスをスキップするように1フィールドを左のセグメントの値をデクリメントし、このソースの処理を続行するために、上記（セグメント左フィールドの値をチェックする）最初のステップに進みルートオプション。このソースルートオプションのさらなる処理では、示された新しいネットワークインタフェースは、パケットの転送に使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the MTU of the link over which this node would transmit the packet to forward it to the node Address[i] is less than the size of the packet, the node MUST either discard the packet and send an ICMP Packet Too Big message to the packet's Source Address [RFC792] or fragment it as specified in Section 8.5.",
      "ja": " - このノードがノードアドレスに転送するパケットを送信するであろう、その上のリンクのMTU [i]はパケットのサイズよりも小さい場合、ノードはパケットを破棄し、にICMPパケット過大メッセージを送らなければなりませんどちらかセクション8.5で指定されたパケットの送信元アドレスは[RFC792]や、それを断片化。"
    },
    {
      "indent": 3,
      "text": "- Forward the packet to the IP address specified in the Address[i] field of the IP header, following normal IP forwarding procedures, including checking and decrementing the Time-to-Live (TTL) field in the packet's IP header [RFC791, RFC1122]. In this forwarding of the packet, the next-hop node (identified by Address[i]) MUST be treated as a direct neighbor node: the transmission to that next node MUST be done in a single IP forwarding hop, without Route Discovery and without searching the Route Cache.",
      "ja": " - アドレスで指定されたIPアドレス[I] IPヘッダのフィールド、通常のIP転送手順に従って検査を含む、パケットのIPヘッダ内のタイム・ツー・ライブ（TTL）フィールドをデクリメント[RFC791、RFC1122にパケットを転送]。パケットのこの転送は、（アドレスによって識別される[i]）と次ホップノードは、直接隣接ノードとして扱わなければならない：その次のノードへの送信は、経路探索なしとすることなく、単一のIP転送ホップで行われなければなりませんルートキャッシュを検索します。"
    },
    {
      "indent": 3,
      "text": "- In forwarding the packet, perform Route Maintenance for the next hop of the packet, by verifying that the next-hop node is reachable, as described in Section 8.3.",
      "ja": " - パケットを転送するには、8.3節で説明したように次ホップノードは、到達可能であることを確認することによって、パケットの次のホップの経路メンテナンスを行います。"
    },
    {
      "indent": 3,
      "text": "Multicast addresses MUST NOT appear in a DSR Source Route option or in the IP Destination Address field of a packet carrying a DSR Source Route option in a DSR Options header.",
      "ja": "マルチキャストアドレスはDSRソースルートオプションまたはDSRオプションヘッダー内のDSRソースルートオプションを運ぶパケットのIP宛先アドレスフィールドに現れてはいけません。"
    },
    {
      "indent": 0,
      "text": "8.1.6. Handling an Unknown DSR Option",
      "section_title": true,
      "ja": "8.1.6。不明なDSRオプションの取り扱い"
    },
    {
      "indent": 3,
      "text": "Nodes implementing DSR MUST handle all options specified in this document, except those options pertaining to the optional flow state extension (Section 7). However, further extensions to DSR may include other option types that may not be understood by implementations conforming to this version of the DSR specification. In DSR, Option Type codes encode required behavior for nodes not implementing that type of option. These behaviors are included in the most significant 3 bits of the Option Type.",
      "ja": "DSRを実装するノードは、オプションのフロー状態の拡張（第7節）に関連するこれらのオプションを除き、この文書で指定されたすべてのオプションを処理しなければなりません。しかし、DSRのさらなる拡張はDSR仕様のこのバージョンに準拠実装によって理解されないかもしれない他のオプションタイプを含むことができます。 DSRでは、オプションタイプコードは、オプションのタイプを実装していないノードに必要な動作をコードします。これらの動作は、オプションタイプの上位3ビットに含まれています。"
    },
    {
      "indent": 3,
      "text": "If the most significant bit of the Option Type is set (that is, Option Type & 0x80 is nonzero), and this packet does not contain a Route Request option, a node SHOULD return a Route Error to the IP Source Address, following the steps described in Section 8.3.4, except that the Error Type MUST be set to OPTION_NOT_SUPPORTED and the Unsupported Opt field MUST be set to the Option Type triggering the Route Error.",
      "ja": "オプションタイプの最上位ビット（つまりオプションタイプ＆0x80のがゼロでない、である）、そしてこのパケットは経路要求オプションが含まれていない設定されている場合は、手順に従ってIPソースアドレスへのルートエラーを返すべきノード、エラーの種類がOPTION_NOT_SUPPORTEDに設定しなければならなくて、サポートされていないのOptフィールドは経路エラーをトリガオプションタイプに設定しなければならないことを除いて、8.3.4項で説明しました。"
    },
    {
      "indent": 3,
      "text": "Whether or not a Route Error is sent in response to this DSR option, as described above, the node also MUST examine the next 2 most significant bits (that is, Option Type & 0x60):",
      "ja": "経路エラーこのDSRオプションに応答して送信されているか否かを、上述したように、ノードは、（すなわち、オプションタイプ＆0x60である）次の2つの最上位ビットを検査しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- When these 2 bits are 00 (that is, Option Type & 0x60 == 0), a node not implementing processing for that Option Type MUST use the Opt Data Len field to skip over the option and continue processing.",
      "ja": " - これらの2ビット（すなわち、オプションタイプ＆0x60 == 0）00である場合、そのオプションタイプの処理を実装していないノードは、オプションをスキップして処理を継続することを選ぶデータLENフィールドを使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- When these 2 bits are 01 (that is, Option Type & 0x60 == 0x20), a node not implementing processing for that Option Type MUST use the Opt Data Len field to remove the option from the packet and continue processing as if the option had not been included in the received packet.",
      "ja": " - これらの2ビットである場合には01（つまり、オプションタイプ＆0x60 == 0x20の場合）、パケットからオプションを削除し、オプションであるかのように処理を継続することを選ぶデータLENフィールドを使用しなければならないことオプションタイプの処理を実装していないノード受信したパケットに含まれていませんでした。"
    },
    {
      "indent": 3,
      "text": "- When these 2 bits are 10 (that is, Option Type & 0x60 == 0x40), a node not implementing processing for that Option Type MUST set the most significant bit following the Opt Data Len field. In addition, the node MUST then ignore and skip over the contents of the option using the Opt Data Len field and MUST continue processing the packet.",
      "ja": " - これらの2ビットである場合、図10（即ち、オプションタイプ＆0x60の== 0x40の）、オプトデータLENフィールド次の最上位ビットを設定しなければならないというオプションタイプの処理を実装していないノード。また、ノードは無視して、オプトデータLENフィールドを使用してオプションの内容をスキップし、パケットの処理を継続しなければならないしなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Finally, when these 2 bits are 11 (that is, Option Type & 0x60 == 0x60), a node not implementing processing for that Option Type MUST drop the packet.",
      "ja": " - 最後に、これらの2ビットが11（即ち、オプションタイプ＆0x60の== 0x60）、パケットをドロップする必要があり、そのオプションタイプの処理を実装していないノード。"
    },
    {
      "indent": 0,
      "text": "8.2. Route Discovery Processing",
      "section_title": true,
      "ja": "8.2。経路探索処理"
    },
    {
      "indent": 3,
      "text": "Route Discovery is the mechanism by which a node S wishing to send a packet to a destination node D obtains a source route to D. Route Discovery SHOULD be used only when S attempts to send a packet to D and does not already know a route to D. The node initiating a Route Discovery is known as the \"initiator\" of the Route Discovery, and the destination node for which the Route Discovery is initiated is known as the \"target\" of the Route Discovery.",
      "ja": "経路探索は、宛先ノードDにパケットを送信することを望むノードSは、SがDにパケットを送信しようとする場合にのみ使用されるべきであるD.経路探索にソースルートを取得し、既にへのルートを知っているしないメカニズムでありますD.経路探索を開始するノードは、経路探索の「イニシエータ」として知られており、経路探索が開始された宛先ノードは、経路探索の「ターゲット」として知られています。"
    },
    {
      "indent": 3,
      "text": "Route Discovery operates entirely on demand; a node initiates Route Discovery based on its own origination of new packets for some destination address to which it does not currently know a route. Route Discovery does not depend on any periodic or background exchange of routing information or neighbor node detection at any layer in the network protocol stack at any node.",
      "ja": "経路探索は、オンデマンドで完全に動作します。ノードは、それが現在のルートを知らないためにいくつかの宛先アドレスの新しいパケットの独自の発信に基づいて経路探索を開始します。経路探索は、任意のノードのネットワーク・プロトコル・スタックの任意の層にルーティング情報又は隣接ノード検出の任意の周期的またはバックグラウンドの交換に依存しません。"
    },
    {
      "indent": 3,
      "text": "The Route Discovery procedure utilizes two types of messages, a Route Request (Section 6.2) and a Route Reply (Section 6.3), to actively search the ad hoc network for a route to the desired target destination. These DSR messages MAY be carried in any type of IP packet, through use of the DSR Options header as described in Section 6.",
      "ja": "ルート発見手順は、メッセージの二つのタイプを利用する、ルート要求（セクション6.2）とルート応答（セクション6.3）は、積極的に所望の目標目的地までの経路のためにアドホックネットワークを検索します。これらDSRメッセージはセクション6で説明したようにDSRオプションヘッダの使用を介して、IPパケットの任意のタイプで行うことができます。"
    },
    {
      "indent": 3,
      "text": "Except as discussed in Section 8.3.5, a Route Discovery for a destination address SHOULD NOT be initiated unless the initiating node has a packet in its Send Buffer requiring delivery to that destination. A Route Discovery for a given target node MUST NOT be initiated unless permitted by the rate-limiting information contained in the Route Request Table. After each Route Discovery attempt, the interval between successive Route Discoveries for this target SHOULD be doubled, up to a maximum of MaxRequestPeriod, until a valid Route Reply is received for this target.",
      "ja": "開始ノードは、その宛先にそのバッファを送る必要送達にパケットがない限り、セクション8.3.5で説明したように除いて、宛先アドレスのための経路探索が開始されるべきではありません。経路要求テーブルに含ま速度制限情報で許可されない限り、指定されたターゲット・ノードのための経路探索を開始してはいけません。有効なルート応答が、この目標のために受信されるまで、各経路探索を試みた後、この目標のために連続した経路発見間隔は、MaxRequestPeriodの最大値まで、倍増されるべきです。"
    },
    {
      "indent": 0,
      "text": "8.2.1. Originating a Route Request",
      "section_title": true,
      "ja": "8.2.1。ルート要求を発信"
    },
    {
      "indent": 3,
      "text": "A node initiating a Route Discovery for some target creates and initializes a Route Request option in a DSR Options header in some IP packet. This MAY be a separate IP packet, used only to carry this Route Request option, or the node MAY include the Route Request option in some existing packet that it needs to send to the target node (e.g., the IP packet originated by this node that caused the node to attempt Route Discovery for the destination address of the packet). The Route Request option MUST be included in a DSR Options header in the packet. To initialize the Route Request option, the node performs the following sequence of steps:",
      "ja": "いくつかのターゲットのルート探索を開始するノードは、いくつかのIPパケット内DSRオプションヘッダに経路要求オプションを作成し、初期化します。これは、この経路要求オプションを運ぶためにのみ使用し、別のIPパケットであってもよく、またはノードは、それが（ターゲット・ノードに送信する必要があるいくつかの既存のパケット内の経路要求オプションを含める例えば、このノードによって発信IPパケットいます）ノードは、パケットの宛先アドレスのための経路探索を試みるようになりました。ルート要求オプションは、パケット内のDSRオプションヘッダに含まれなければなりません。ルート要求オプションを初期化するには、ノードは、次の一連のステップを実行します。"
    },
    {
      "indent": 3,
      "text": "- The Option Type in the option MUST be set to the value 2.",
      "ja": " - オプションでオプションタイプは、値2に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- The Opt Data Len field in the option MUST be set to the value 6. The total size of the Route Request option, when initiated, is 8 octets; the Opt Data Len field excludes the size of the Option Type and Opt Data Len fields themselves.",
      "ja": " - オプションオプトインデータLENフィールドは、開始経路要求オプションの合計サイズ6の値に設定しなければならない8つのオクテットです。オプトデータレンフィールドは、オプションタイプのサイズを除外し、オプトデータレンは自分自身をフィールド。"
    },
    {
      "indent": 3,
      "text": "- The Identification field in the option MUST be set to a new value, different from that used for other Route Requests recently initiated by this node for this same target address. For example, each node MAY maintain a single counter value for generating a new Identification value for each Route Request it initiates.",
      "ja": " - オプションで識別フィールドは最近、これと同じターゲットアドレスのため、このノードによって開始され、他のルート要求のために使用されるものとは異なる新しい値に設定しなければなりません。例えば、各ノードは、それが開始する各ルート要求に対して新たな識別値を生成するための単一のカウンタ値を維持することができます。"
    },
    {
      "indent": 3,
      "text": "- The Target Address field in the option MUST be set to the IP address that is the target of this Route Discovery.",
      "ja": " - オプションでターゲットアドレスフィールドには、この経路探索の対象であるIPアドレスに設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The Source Address in the IP header of this packet MUST be the node's own IP address. The Destination Address in the IP header of this packet MUST be the IP \"limited broadcast\" address (255.255.255.255).",
      "ja": "このパケットのIPヘッダ内の送信元アドレスはノード自体のIPアドレスでなければなりません。このパケットのIPヘッダ内の宛先アドレスはIP「限定されたブロードキャスト」アドレス（255.255.255.255）でなければなりません。"
    },
    {
      "indent": 3,
      "text": "A node MUST maintain, in its Route Request Table, information about Route Requests that it initiates. When initiating a new Route Request, the node MUST use the information recorded in the Route Request Table entry for the target of that Route Request, and it MUST update that information in the table entry for use in the next Route Request initiated for this target. In particular:",
      "ja": "ノードは、その経路要求テーブルに、それが開始ルート要求についての情報を維持しなければなりません。新しいルート要求を開始すると、ノードはそのルート要求の対象のための経路要求テーブルのエントリに記録された情報を使用しなければならない、そしてそれは、この目標のために開始され、次のルート要求で使用するためのテーブルエントリにその情報を更新する必要があります。特に："
    },
    {
      "indent": 3,
      "text": "- The Route Request Table entry for a target node records the Time-to-Live (TTL) field used in the IP header of the Route Request for the last Route Discovery initiated by this node for that target node. This value allows the node to implement a variety of algorithms for controlling the spread of its Route Request on each Route Discovery initiated for a target. As examples, two possible algorithms for this use of the TTL field are described in Section 3.3.3.",
      "ja": " - ターゲット・ノードのルートリクエストテーブル・エントリは、そのターゲット・ノードにこのノードによって開始された最後の経路探索のためのルート・リクエストのIPヘッダで使用されるタイム・ツー・ライブ（TTL）フィールドを記録します。この値は、ノードがターゲットの開始各経路探索にそのルート・リクエストの広がりを制御するための様々なアルゴリズムを実装することを可能にします。例として、TTLフィールドのこの使用のための二つの可能なアルゴリズムは、セクション3.3.3に記載されています。"
    },
    {
      "indent": 3,
      "text": "- The Route Request Table entry for a target node records the number of consecutive Route Requests initiated for this target since receiving a valid Route Reply giving a route to that target node, and the remaining amount of time before which this node MAY next attempt at a Route Discovery for that target node.",
      "ja": " - ターゲット・ノードのためのルートのリクエストテーブルのエントリは、そのターゲット・ノードへの経路を与える返信有効なルートを受けて以来、この目標のために開始した連続したルート要求の数を記録し、時間の残量でいるこのノードMAY次の試行の前にそのターゲット・ノードのための経路探索。"
    },
    {
      "indent": 6,
      "text": "A node MUST use these values to implement a back-off algorithm to limit the rate at which this node initiates new Route Discoveries for the same target address. In particular, until a valid Route Reply is received for this target node address, the timeout between consecutive Route Discovery initiations for this target node with the same hop limit SHOULD increase by doubling the timeout value on each new initiation.",
      "ja": "ノードは、このノードが同じターゲットアドレスに新しいルート発見を開始する速度を制限するために、バックオフアルゴリズムを実装するためにこれらの値を使用しなければなりません。有効なルート応答は、このターゲット・ノード・アドレスのために受信されるまで、特に、同じホップリミットこのターゲット・ノードのための連続的な経路探索のイニシエーションの間のタイムアウトはそれぞれの新しい開始のタイムアウト値を倍にすることによって増加させるべきです。"
    },
    {
      "indent": 3,
      "text": "The behavior of a node processing a packet containing DSR Options header with both a DSR Source Route option and a Route Request option is unspecified. Packets SHOULD NOT contain both a DSR Source Route option and a Route Request option.",
      "ja": "DSRソースルートオプションと経路要求オプションの両方でDSRオプションヘッダを含むパケットを処理するノードの動作は不定です。パケットは、DSRソースルートオプションおよび経路要求オプションの両方を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "Packets containing a Route Request option SHOULD NOT include an Acknowledgement Request option, SHOULD NOT expect link-layer acknowledgement or passive acknowledgement, and SHOULD NOT be retransmitted. The retransmission of packets containing a Route Request option is controlled solely by the logic described in this section.",
      "ja": "ルート要求オプションを含むパケットは、承認要求オプションを含めるべきではありませんリンク層肯定応答または受動的確認応答を期待すべきではありませんし、再送されるべきではありません。経路要求オプションを含むパケットの再送信は、単にこの節で説明する論理によって制御されます。"
    },
    {
      "indent": 0,
      "text": "8.2.2. Processing a Received Route Request Option",
      "section_title": true,
      "ja": "8.2.2。受信した経路要求オプションの処理"
    },
    {
      "indent": 3,
      "text": "When a node receives a packet containing a Route Request option, that node MUST process the option according to the following sequence of steps:",
      "ja": "ノードがルート要求オプションを含むパケットを受信した場合、そのノードは、ステップの次のシーケンスに従ってオプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the Target Address field in the Route Request matches this node's own IP address, then the node SHOULD return a Route Reply to the initiator of this Route Request (the Source Address in the IP header of the packet), as described in Section 8.2.4. The source route for this Reply is the sequence of hop addresses",
      "ja": " - ルート要求におけるターゲットアドレスフィールドは、このノード自身のIPアドレスと一致する場合、そのノードは、8.2節で説明したように、このルート要求（パケットのIPヘッダ内の送信元アドレス）のイニシエータに返信するルートを返すべきです0.4。この返信用のソースルートは、ホップアドレスのシーケンスであります"
    },
    {
      "indent": 9,
      "text": "initiator, Address[1], Address[2], ..., Address[n], target",
      "ja": "イニシエータは、[1]、[2]、...、[n]のアドレス、ターゲットアドレスアドレス"
    },
    {
      "indent": 6,
      "text": "where initiator is the address of the initiator of this Route Request, each Address[i] is an address from the Route Request, and target is the target of the Route Request (the Target Address field in the Route Request). The value n here is the number of addresses recorded in the Route Request, or (Opt Data Len - 6) / 4.",
      "ja": "イニシエータは、このルート・リクエストの開始アドレスであり、各アドレス[i]はルート要求からのアドレスであり、ターゲットは、ルート要求（ルート要求でターゲットアドレスフィールド）の標的です。 / 4  - ここで値Nがルート要求に記録されたアドレスの数、または（6オプトデータレン）です。"
    },
    {
      "indent": 6,
      "text": "The node then MUST replace the Destination Address field in the Route Request packet's IP header with the value in the Target Address field in the Route Request option, and continue processing the rest of the Route Request packet normally. The node MUST NOT process the Route Request option further and MUST NOT retransmit the Route Request to propagate it to other nodes as part of the Route Discovery.",
      "ja": "ノードは、ルート要求オプションでターゲットアドレスフィールドの値でルート要求パケットのIPヘッダ内の宛先アドレスフィールドを交換し、正常にルート要求パケットの残りの処理を継続しなければなりません。ノードは、さらにルート要求オプションを処理してはならないと経路探索の一環として、他のノードにそれを伝播するルート要求を再送してはなりません。"
    },
    {
      "indent": 3,
      "text": "- Else, the node MUST examine the route recorded in the Route Request option (the IP Source Address field and the sequence of Address[i] fields) to determine if this node's own IP address already appears in this list of addresses. If so, the node MUST discard the entire packet carrying the Route Request option.",
      "ja": " - そうでなければ、ノードは、このノード自身のIPアドレスが既にアドレスのこのリストに表示されるかどうかを判断するためにルート要求オプション（送信元IPアドレスフィールドと住所のシーケンス[i]のフィールド）に記録されているルートを調べる必要があります。その場合、ノードは経路要求オプションを運ぶパケット全体を捨てなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Else, if the Route Request was received through a network interface that requires physically bidirectional links for unicast transmission, the node MUST check if the Route Request was last forwarded by a node on its blacklist (Section 4.6). If such an entry is found in the blacklist, and the state of the unidirectional link is \"probable\", then the Request MUST be silently discarded.",
      "ja": " - ルート要求をユニキャスト送信するための物理的に双方向リンクを必要とするネットワーク・インターフェースを介して受信された場合のルート・リクエストは、そのブラックリスト（セクション4.6）上のノードによって最後に転送された場合にそうでなければ、ノードは、チェックしなければなりません。そのようなエントリがブラックリストで発見され、かつ単方向リンクの状態が「可能性」である場合、その要求は静かに捨てなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Else, if the Route Request was received through a network interface that requires physically bidirectional links for unicast transmission, the node MUST check if the Route Request was last forwarded by a node on its blacklist. If such an entry is found in the blacklist, and the state of the unidirectional link is \"questionable\", then the node MUST create and unicast a Route Request packet to that previous node, setting the IP Time-To-Live (TTL) to 1 to prevent the Request from being propagated. If the node receives a Route Reply in response to the new Request, it MUST remove the blacklist entry for that node, and SHOULD continue processing. If the node does not receive a Route Reply within some reasonable amount of time, the node MUST silently discard the Route Request packet.",
      "ja": " - ルート要求をユニキャスト送信するための物理的に双方向リンクを必要とするネットワーク・インターフェースを介して受信された場合のルート・リクエストは、そのブラックリスト上のノードが最後に転送された場合にそうでなければ、ノードは、チェックしなければなりません。そのようなエントリがブラックリストで発見され、かつ単方向リンクの状態が「疑わしい」であれば、ノードはにIPのTime-To-Live（TTL）を設定し、ユニキャストにその前のノードへのルート要求パケットを作成しなければなりません。 1伝播さからの要求を防ぐために。ノードが新しい要求に応じて、ルート返信を受け取った場合、それは、そのノードのブラックリストのエントリを削除する必要があり、処理を継続する必要があります。ノードは、時間のいくつかの合理的な量の範囲内経路応答を受信しない場合、ノードは静かにルート要求パケットを捨てなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Else, the node MUST search its Route Request Table for an entry for the initiator of this Route Request (the IP Source Address field). If such an entry is found in the table, the node MUST search the cache of Identification values of recently received Route Requests in that table entry, to determine if an entry is present in the cache matching the Identification value and target node address in this Route Request. If such an (Identification, target address) entry is found in this cache in this entry in the Route Request Table, then the node MUST discard the entire packet carrying the Route Request option.",
      "ja": " - そうでなければ、ノードは、このルート要求（IPソースアドレスフィールド）のイニシエータのエントリのためにその経路要求表を検索する必要があります。このようなエントリがテーブル内に見つかった場合、ノードは、エントリがこの経路で識別値と目標ノードアドレスと一致するキャッシュ内に存在しているかどうかを決定するために、最近ではそのテーブルエントリにルート要求を受信したの識別値のキャッシュを検索しなければなりません要求。このような（識別、ターゲットアドレス）エントリが経路要求表のこのエントリで、このキャッシュ内に見つかった場合、そのノードはルート要求オプションを運ぶパケット全体を廃棄しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Else, this node SHOULD further process the Route Request according to the following sequence of steps:",
      "ja": " - そうでなければ、このノードは、さらに、以下の一連のステップに従ってルート要求を処理しなければなりません。"
    },
    {
      "indent": 6,
      "text": "o Add an entry for this Route Request in its cache of (Identification, target address) values of recently received Route Requests.",
      "ja": "O（識別、ターゲットアドレス）最近受信したルート要求の値をそのキャッシュにこのルート要求のエントリを追加します。"
    },
    {
      "indent": 6,
      "text": "o Conceptually create a copy of this entire packet and perform the following steps on the copy of the packet.",
      "ja": "O概念的には、このパケット全体のコピーを作成し、パケットのコピーで次の手順を実行します。"
    },
    {
      "indent": 6,
      "text": "o Append this node's own IP address to the list of Address[i] values in the Route Request and increase the value of the Opt Data Len field in the Route Request by 4 (the size of an IP address). However, if the node has multiple network interfaces, this step MUST be modified by the special processing specified in Section 8.4.",
      "ja": "Oアドレスのリストにこのノード自身のIPアドレスを追加[i]がルート要求の値と4によってルート要求オプトインデータLENフィールドの値（IPアドレスのサイズ）を増加させます。ノードは複数のネットワークインタフェースを有する場合は、この手順はセクション8.4で指定された特別な処理によって修正されなければなりません。"
    },
    {
      "indent": 6,
      "text": "o This node SHOULD search its own Route Cache for a route (from itself, as if it were the source of a packet) to the target of this Route Request. If such a route is found in its Route Cache, then this node SHOULD follow the procedure outlined in Section 8.2.3 to return a \"cached Route Reply\" to the initiator of this Route Request, if permitted by the restrictions specified there.",
      "ja": "（それがパケットのソースであるかのように、それ自体から）Oこのノードは、このルート要求のターゲットにルーティングするための独自のルートキャッシュを検索します。このような経路は、その経路キャッシュで発見された場合、このノードが指定された制限によって許可されている場合、このルート要求のイニシエータに「キャッシュされた経路応答」を返すために、セクション8.2.3で説明した手順に従ってください。"
    },
    {
      "indent": 6,
      "text": "o If the node does not return a cached Route Reply, then this node SHOULD transmit this copy of the packet as a link-layer broadcast, with a short jitter delay before the broadcast is sent. The jitter period SHOULD be chosen as a random period, uniformly distributed between 0 and BroadcastJitter.",
      "ja": "ノードがキャッシュされた経路応答を返さない場合、ブロードキャストが送信される前に、O、その後、このノードは、短いジッタ遅延と、リンク層ブロードキャストとしてパケットのこのコピーを送信する必要があります。ジッタ期間は、ランダム期間、均一に0とBroadcastJitter間に分布として選択されるべきです。"
    },
    {
      "indent": 0,
      "text": "8.2.3. Generating a Route Reply Using the Route Cache",
      "section_title": true,
      "ja": "8.2.3。ルートキャッシュを使用した経路応答を生成します"
    },
    {
      "indent": 3,
      "text": "As described in Section 3.3.2, it is possible for a node processing a received Route Request to avoid propagating the Route Request further toward the target of the Request, if this node has in its Route Cache a route from itself to this target. Such a Route Reply generated by a node from its own cached route to the target of a Route Request is called a \"cached Route Reply\", and this mechanism can greatly reduce the overall overhead of Route Discovery on the network by reducing the flood of Route Requests. The general processing of a received Route Request is described in Section 8.2.2; this section specifies the additional requirements that MUST be met before a cached Route Reply may be generated and returned and specifies the procedure for returning such a cached Route Reply.",
      "ja": "セクション3.3.2に記載したように、このノードは、そのルートキャッシュにこのターゲットへ自体からのルートを有する場合、それは、要求のターゲットに向かってさらにルート要求を伝播を回避するために、受信したルート要求を処理するノードが可能です。このような経路は、「キャッシュされた経路応答」と呼ばれ、このメカニズムが大幅ルートの洪水を低減することにより、ネットワーク上の経路探索の全体的なオーバーヘッドを減らすことができるルート要求の対象に独自のキャッシュされた経路からノードによって生成された返信リクエスト。受信したルート要求の一般的な処理は、セクション8.2.2に記載されています。このセクションでは、キャッシュされた経路応答を生成することができる前に会って、返されなければならない追加的な要件を指定して、このようなキャッシュされた経路応答を返すための手順を指定します。"
    },
    {
      "indent": 3,
      "text": "While processing a received Route Request, for a node to possibly return a cached Route Reply, it MUST have in its Route Cache a route from itself to the target of this Route Request. However, before generating a cached Route Reply for this Route Request, the node MUST verify that there are no duplicate addresses listed in the route accumulated in the Route Request together with the route from this node's Route Cache. Specifically, there MUST be no duplicates among the following addresses:",
      "ja": "受信したルート要求を処理している間に、おそらくはキャッシュルート応答を返すノードに対して、それがそのルートキャッシュにこのルート要求の対象に自分自身からのルートを持たなければなりません。ただし、キャッシュされたルートは、このルート要求に対する応答を生成する前に、ノードは、このノードのルートキャッシュからのルートと一緒にルート要求に蓄積されたルートに列挙された重複アドレスが存在しないことを確かめなければなりません。具体的には、以下のアドレスの間には重複があってはなりません。"
    },
    {
      "indent": 3,
      "text": "- The IP Source Address of the packet containing the Route Request,",
      "ja": " - ルート要求を含むパケットの送信元IPアドレス、"
    },
    {
      "indent": 3,
      "text": "- The Address[i] fields in the Route Request, and",
      "ja": " - アドレス[i]はルート要求内のフィールド、および"
    },
    {
      "indent": 3,
      "text": "- The nodes listed in the route obtained from this node's Route Cache, excluding the address of this node itself (this node itself is the common point between the route accumulated in the Route Request and the route obtained from the Route Cache).",
      "ja": " - ノードは、このノード自身のアドレスを除いたこのノードのルートキャッシュ（このノード自体がルート要求およびルートキャッシュから取得した経路に蓄積された経路の間の共通点である）から得られたルートに記載されています。"
    },
    {
      "indent": 3,
      "text": "If any duplicates exist among these addresses, then the node MUST NOT send a cached Route Reply using this route from the Route Cache (it is possible that this node has another route in its Route Cache for which the above restriction on duplicate addresses is met, allowing the node to send a cached Route Reply based on that cached route, instead). The node SHOULD continue to process the Route Request as described in Section 8.2.2 if it does not send a cached Route Reply.",
      "ja": "任意の重複がこれらのアドレスの中に存在する場合、ノードはルートキャッシュからこのルートを使用して返信キャッシュルートを送ってはいけません（このノードが重複したアドレスに上記制限が満たされているため、そのルートキャッシュ内の別の経路を有することが可能ですノード）に代えて、そのキャッシュされた経路に基づいて、キャッシュされたルート応答を送信することを可能にします。 8.2.2項で説明したように、キャッシュされた経路応答を送信しない場合、ノードはルート要求を処理し続けるべきです。"
    },
    {
      "indent": 3,
      "text": "If the Route Request and the route from the Route Cache meet the restriction above, then the node SHOULD construct and return a cached Route Reply as follows:",
      "ja": "ルート要求およびルートキャッシュからのルートは、上記の制限を満たしている場合は、次のようにノードを構築し、キャッシュされた経路応答を返すべきです："
    },
    {
      "indent": 3,
      "text": "- The source route for this Route Reply is the sequence of hop addresses",
      "ja": " - このルート応答のソース経路は、ホップ・アドレスの配列であります"
    },
    {
      "indent": 9,
      "text": "initiator, Address[1], Address[2], ..., Address[n], c-route",
      "ja": "イニシエータは、[1]、[2]、...、[n]のアドレス、Cルートをアドレスアドレス"
    },
    {
      "indent": 6,
      "text": "where initiator is the address of the initiator of this Route Request, each Address[i] is an address from the Route Request, and c-route is the sequence of hop addresses in the source route to this target node, obtained from the node's Route Cache. In appending this cached route to the source route for the reply, the address of this node itself MUST be excluded, since it is already listed as Address[n].",
      "ja": "イニシエータは、このルート・リクエストの開始アドレスであり、各アドレス[i]はルート要求からのアドレスであり、c-ルートノードのルートから得られた、このターゲット・ノードへのソース経路におけるホップ・アドレスのシーケンスでありますキャッシュ。既にアドレス[N]としてリストされているので、応答のソースルートにこのキャッシュされた経路を追加では、このノード自体のアドレスは、除外しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Send a Route Reply to the initiator of the Route Request, using the procedure defined in Section 8.2.4. The initiator of the Route Request is indicated in the Source Address field in the packet's IP header.",
      "ja": " - 第8.2.4項で定義された手順を使用して、ルート・リクエストのイニシエータに返信するルートを送信します。ルート要求のイニシエータは、パケットのIPヘッダ内の送信元アドレスフィールドに示されています。"
    },
    {
      "indent": 3,
      "text": "Before sending the cached Route Reply, however, the node MAY delay the Reply in order to help prevent a possible Route Reply \"storm\", as described in Section 8.2.5.",
      "ja": "キャッシュされた経路応答を送信する前に、しかし、ノードは、8.2.5項で説明したように、可能な経路応答「嵐」を防ぐのを助けるために、返信を遅らせる可能性があります。"
    },
    {
      "indent": 3,
      "text": "If the node returns a cached Route Reply as described above, then the node MUST NOT propagate the Route Request further (i.e., the node MUST NOT rebroadcast the Route Request). In this case, instead, if the packet contains no other DSR options and contains no payload after the DSR Options header (e.g., the Route Request is not piggybacked on a TCP or UDP packet), then the node SHOULD simply discard the packet. Otherwise (if the packet contains other DSR options or contains any payload after the DSR Options header), the node SHOULD forward the packet along the cached route to the target of the Route Request. Specifically, if the node does so, it MUST use the following steps:",
      "ja": "上記のようにノードがキャッシュされたルート応答を返した場合、ノード（すなわち、ノードがルート要求を再放送してはいけません）さらにルート要求を伝播してはいけません。この場合には、代わりに、パケットは、他のDSRのオプションが含まれていない場合、ノードは単にパケットを破棄すべきである（例えば、ルート・リクエストがTCPまたはUDPパケットに便乗されていない）DSRオプションヘッダの後にはペイロードを含みません。 （パケットは、他のDSRのオプションが含まれているか、DSRオプションヘッダの後の任意のペイロードを含む場合）、そうでない場合、ノードは、ルート要求の対象にキャッシュされたルートに沿ってパケットを転送すべきです。ノードがそうするならば具体的には、次の手順を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "- Copy the Target Address from the Route Request option in the DSR Options header to the Destination Address field in the packet's IP header.",
      "ja": " - パケットのIPヘッダ内の宛先アドレスフィールドにDSRオプションヘッダー内のルート要求オプションからターゲットアドレスをコピーします。"
    },
    {
      "indent": 3,
      "text": "- Remove the Route Request option from the DSR Options header in the packet, and add a DSR Source Route option to the packet's DSR Options header.",
      "ja": " - パケット内のDSRオプションヘッダからルート要求オプションを削除して、パケットのDSRオプションヘッダにDSRソースルートオプションを追加します。"
    },
    {
      "indent": 3,
      "text": "- In the DSR Source Route option, set the Address[i] fields to represent the source route found in this node's Route Cache to the original target of the Route Discovery (the new IP Destination Address of the packet). Specifically, the node copies the hop addresses of the source route into sequential Address[i] fields in the DSR Source Route option, for i = 1, 2, ..., n. Address[1], here, is the address of this node itself (the first address in the source route found from this node to the original target of the Route Discovery). The value n, here, is the number of hop addresses in this source route, excluding the destination of the packet (which is instead already represented in the Destination Address field in the packet's IP header).",
      "ja": " -  DSRソースルートオプションでは、経路探索（パケットの新しいIP宛先アドレス）の当初の目標にこのノードのルートキャッシュで見つかったソースルートを表現するためにアドレス[i]のフィールドを設定します。具体的には、ノードコピーシーケンシャルアドレスに送信元経路のホップアドレス[i]はDSRソースルートオプションのフィールドに対するI = 1、2、...、N。 [1]ここで、このノード自体（経路探索の元のターゲットにこのノードから求めたソースルートの最初のアドレス）のアドレスです。値nは、ここで、（代わりに、既にパケットのIPヘッダの宛先アドレスフィールドに示されている）は、パケットの宛先を除く、このソース経路におけるホップアドレスの数です。"
    },
    {
      "indent": 3,
      "text": "- Initialize the Segments Left field in the DSR Source Route option to n as defined above.",
      "ja": " - 上記で定義されたように、nにDSRソースルートオプションのフィールドを左セグメントを初期化します。"
    },
    {
      "indent": 3,
      "text": "- The First Hop External (F) bit in the DSR Source Route option MUST be set to 0.",
      "ja": " -  DSRソースルートオプションの最初のホップの外部（F）ビットが0に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- The Last Hop External (L) bit in the DSR Source Route option is copied from the External bit flagging the last hop in the source route for the packet, as indicated in the Route Cache.",
      "ja": " - ルートキャッシュに示されるように、DSRソースルートオプションで最終ホップ外部（L）ビットは、パケットの送信元ルートの最後のホップにフラグを立てる外部ビットからコピーされます。"
    },
    {
      "indent": 3,
      "text": "- The Salvage field in the DSR Source Route option MUST be initialized to some nonzero value; the particular nonzero value used SHOULD be MAX_SALVAGE_COUNT. By initializing this field to a nonzero value, nodes forwarding or overhearing this packet will not consider a link to exist between the IP Source Address of the packet and the Address[1] address in the DSR Source Route option (e.g., they will not attempt to add this to their Route Cache as a link). By choosing MAX_SALVAGE_COUNT as the nonzero value to which the node initializes this field, nodes furthermore will not attempt to salvage this packet.",
      "ja": " -  DSRソースルートオプションでサルベージフィールドには、いくつかのゼロ以外の値に初期化されなければなりません。使用される特定の非ゼロ値はMAX_SALVAGE_COUNTであるべきです。ゼロ以外の値にこのフィールドを初期化することにより、転送ノードまたはこのパケットを傍受することは、パケットの送信元IPアドレスとアドレスの間に存在するリンクを考慮しませんDSRソースルートオプションで、[1]のアドレス（例えば、彼らがしようとしませんリンクとしてそのルートキャッシュにこれを追加します）。ノードは、このフィールドを初期化した非ゼロ値としてMAX_SALVAGE_COUNTを選択して、このパケットを救済しようとしないであろう、さらにノード。"
    },
    {
      "indent": 3,
      "text": "- Transmit the packet to the next-hop node on the new source route in the packet, using the forwarding procedure described in Section 8.1.5.",
      "ja": " - セクション8.1.5に記載の転送手順を使用して、パケットに新しい送信元経路上の次ホップノードにパケットを送信します。"
    },
    {
      "indent": 0,
      "text": "8.2.4. Originating a Route Reply",
      "section_title": true,
      "ja": "8.2.4。ルート返信を発信"
    },
    {
      "indent": 3,
      "text": "A node originates a Route Reply in order to reply to a received and processed Route Request, according to the procedures described in Sections 8.2.2 and 8.2.3. The Route Reply is returned in a Route Reply option (Section 6.3). The Route Reply option MAY be returned to the initiator of the Route Request in a separate IP packet, used only to carry this Route Reply option, or it MAY be included in any other IP packet being sent to this address.",
      "ja": "ノードは、セクション8.2.2および8.2.3に記載の手順に従って、受信され、処理ルート要求に応答するためにルート応答を発信します。ルート返信がルートで返されるオプション（6.3節）を返信します。ルートオプションは別のIPパケット内のルート要求のイニシエータに戻すことができる返信、このルート応答オプションを運ぶためにのみ使用し、またはこのアドレスに送信されている他のIPパケットに含まれるかもしれません。"
    },
    {
      "indent": 3,
      "text": "The Route Reply option MUST be included in a DSR Options header in the packet returned to the initiator. To initialize the Route Reply option, the node performs the following sequence of steps:",
      "ja": "ルートオプションがイニシエータに返送パケットでDSRオプションヘッダに含まれなければならない返信。ルート応答オプションを初期化するには、ノードは、次の一連のステップを実行します。"
    },
    {
      "indent": 3,
      "text": "- The Option Type in the option MUST be set to the value 3.",
      "ja": " - オプションでオプションタイプは、値3に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- The Opt Data Len field in the option MUST be set to the value (n * 4) + 3, where n is the number of addresses in the source route being returned (excluding the Route Discovery initiator node's address).",
      "ja": " - オプションオプトインデータLENフィールド値に設定しなければなりません（N * 4）+ 3、nは（経路探索開始ノードのアドレスを除く）返されるソース経路内のアドレスの数です。"
    },
    {
      "indent": 3,
      "text": "- If this node is the target of the Route Request, the Last Hop External (L) bit in the option MUST be initialized to 0.",
      "ja": " - このノードがルート要求の対象である場合は、オプションの最後のホップ外部（L）ビットが0に初期化する必要があります。"
    },
    {
      "indent": 3,
      "text": "- The Reserved field in the option MUST be initialized to 0.",
      "ja": " - オプションでの予約フィールドが0に初期化する必要があります。"
    },
    {
      "indent": 3,
      "text": "- The Route Request Identifier MUST be initialized to the Identifier field of the Route Request to which this Route Reply is sent in response.",
      "ja": " - 経路要求識別子は、このルート応答が応答で送信されたルート要求の識別子フィールドに初期化されなければなりません。"
    },
    {
      "indent": 3,
      "text": "- The sequence of hop addresses in the source route are copied into the Address[i] fields of the option. Address[1] MUST be set to the first-hop address of the route after the initiator of the",
      "ja": " - ソース経路におけるホップ・アドレスのシーケンスは、オプションのアドレス[i]のフィールドにコピーされます。アドレス[1]の開始後のルートの最初のホップアドレスに設定しなければなりません"
    },
    {
      "indent": 6,
      "text": "Route Discovery, Address[n] MUST be set to the last-hop address of the source route (the address of the target node), and each other Address[i] MUST be set to the next address in sequence in the source route being returned.",
      "ja": "経路探索、[n]をアドレスは、送信元経路（対象ノードのアドレス）の最後のホップアドレス、および各他のアドレスに設定しなければなりません[i]はソースルートであることにシーケンス内の次のアドレスに設定しなければなりません戻ってきた。"
    },
    {
      "indent": 3,
      "text": "The Destination Address field in the IP header of the packet carrying the Route Reply option MUST be set to the address of the initiator of the Route Discovery (i.e., for a Route Reply being returned in response to some Route Request, the IP Source Address of the Route Request).",
      "ja": "ルートを運ぶパケットのIPヘッダ内の宛先アドレスフィールドオプションはルートのための経路探索（すなわち、のイニシエータのアドレスに設定しなければならない返信は、いくつかのルート・リクエストの送信元IPアドレスに対応して返される返信ルート要求）。"
    },
    {
      "indent": 3,
      "text": "After creating and initializing the Route Reply option and the IP packet containing it, send the Route Reply. In sending the Route Reply from this node (but not from nodes forwarding the Route Reply), this node SHOULD delay the Reply by a small jitter period chosen randomly between 0 and BroadcastJitter.",
      "ja": "ルート応答オプションと、それを含むIPパケットを作成し、初期化した後、ルート返信を送ります。ルートをこのノードから返信（ただしルート応答を転送するノードからの）送信において、このノードは、0とBroadcastJitter間でランダムに選択された小ジッタ周期によって返信を遅らせるべきです。"
    },
    {
      "indent": 3,
      "text": "When returning any Route Reply in the case in which the MAC protocol in use in the network is not capable of transmitting unicast packets over unidirectional links, the source route used for routing the Route Reply packet MUST be obtained by reversing the sequence of hops in the Route Request packet (the source route that is then returned in the Route Reply). This restriction on returning a Route Reply enables the Route Reply to test this sequence of hops for bidirectionality, preventing the Route Reply from being received by the initiator of the Route Discovery unless each of the hops over which the Route Reply is returned (and thus each of the hops in the source route being returned in the Reply) is bidirectional.",
      "ja": "任意のルートを返すとき、ネットワークで使用されているMACプロトコルは、単方向リンクを介してユニキャストパケットを送信することができない、ルートリプライパケットをルーティングするために使用するソースルート内のホップの順序を逆にすることによって得られる必要がある場合に返信ルート要求パケット（次いで、ルート応答で返されたソースルート）。 、双方向性のためのホップのこのシーケンスをテストするためにルート応答を可能にするルート応答を返すルートがルート応答が返され、その上ホップの各々ない限り、経路探索の開始によって受信されるの返信防止（ひいてはそれぞれにこの制限応答で返されるソースルートのホップ）は、双方向です。"
    },
    {
      "indent": 3,
      "text": "If sending a Route Reply to the initiator of the Route Request requires performing a Route Discovery, the Route Reply option MUST be piggybacked on the packet that contains the Route Request. This piggybacking prevents a recursive dependency wherein the target of the new Route Request (which was itself the initiator of the original Route Request) must do another Route Request in order to return its Route Reply.",
      "ja": "ルート要求のイニシエータに返信するルートを送ることが経路探索を実行する必要がある場合は、ルートはオプション返信ルート要求を含むパケットに背負わなければなりません。このピギーバッキングは、（元のルート・リクエストの開始剤自体であった）新しいルート要求の対象は、そのルート応答を返すために別のルート要求を行う必要があり、前記再帰的依存性を防止します。"
    },
    {
      "indent": 3,
      "text": "If sending the Route Reply to the initiator of the Route Request does not require performing a Route Discovery, a node SHOULD send a unicast Route Reply in response to every Route Request it receives for which it is the target node.",
      "ja": "すべてのルートは、それがターゲット・ノードであるための受信リクエストに経路が経路探索を行う必要がないルート要求のイニシエータに返信送信した場合、ノードは、応答して、ユニキャストルート応答を送信すべきです。"
    },
    {
      "indent": 0,
      "text": "8.2.5. Preventing Route Reply Storms",
      "section_title": true,
      "ja": "8.2.5。ルートは、嵐の返信の防止"
    },
    {
      "indent": 3,
      "text": "The ability for nodes to reply to a Route Request based on information in their Route Caches, as described in Sections 3.3.2 and 8.2.3, could result in a possible Route Reply \"storm\" in some cases. In particular, if a node broadcasts a Route Request for a target node for which the node's neighbors have a route in their Route Caches, each neighbor may attempt to send a Route Reply, thereby wasting bandwidth and possibly increasing the number of network collisions in the area.",
      "ja": "ノードは、そのルートキャッシュ内の情報に基づいてルート要求に応答するための能力は、セクション3.3.2および8.2.3に記載したように、いくつかのケースでは、「ストーム」の可能なルート応答をもたらし得ます。ノードは、ノードの隣人が自分のルートキャッシュ内のルートを持っているため、ターゲット・ノードのルート要求を放送する場合は特に、各隣人が、それによって帯域幅を浪費し、多分にネットワーク衝突の数を増やし、経路応答を送信しようとすること範囲。"
    },
    {
      "indent": 3,
      "text": "For example, the figure below shows a situation in which nodes B, C, D, E, and F all receive A's Route Request for target G, and each has the indicated route cached for this target:",
      "ja": "例えば、以下の図は、B、C、D、Eノードする状況を示しており、FはすべてのターゲットG用Aのルート要求を受信し、各々は、この目標のために示す経路をキャッシュを有します。"
    },
    {
      "indent": 6,
      "text": "          +-----+                 +-----+\n          |  D  |<               >|  C  |\n          +-----+ \\             / +-----+\nCache: C - B - G   \\           /  Cache: B - G\n                    \\ +-----+ /\n                     -|  A  |-\n                      +-----+\\     +-----+     +-----+\n                       |   |  \\--->|  B  |     |  G  |\n                      /     \\      +-----+     +-----+\n                     /       \\     Cache: G\n                    v         v\n              +-----+         +-----+\n              |  E  |         |  F  |\n              +-----+         +-----+\n         Cache: F - B - G     Cache: B - G",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Normally, each of these nodes would attempt to reply from its own Route Cache, and they would thus all send their Route Replies at about the same time, since they all received the broadcast Route Request at about the same time. Such simultaneous Route Replies from different nodes all receiving the Route Request may cause local congestion in the wireless network and may create packet collisions among some or all of these Replies if the MAC protocol in use does not provide sufficient collision avoidance for these packets. In addition, it will often be the case that the different replies will indicate routes of different lengths, as shown in this example.",
      "ja": "通常、これらの各ノードは、独自のルートキャッシュから返信しようとしていました、そして、彼らはこのように、すべてのは、彼らのすべてがほぼ同時に放送ルート要求を受けたので、そのルートは、ほぼ同時に返信送信します。このような同時ルートは、すべてのルート要求無線ネットワーク内のローカルの混雑を引き起こす可能性があり、使用中のMACプロトコルはこれらのパケットのための十分な衝突回避を提供していない場合は、これらの回答の一部または全ての間でパケット衝突を作成することがを受ける異なるノードからの返信。また、多くの場合、この例に示すように異なった応答が、異なる長さの経路を示すことになる場合であろう。"
    },
    {
      "indent": 3,
      "text": "In order to reduce these effects, if a node can put its network interface into promiscuous receive mode, it MAY delay sending its own Route Reply for a short period, while listening to see if the initiating node begins using a shorter route first. Specifically, this node MAY delay sending its own Route Reply for a random period",
      "ja": "ノードが受信モード無差別にそのネットワークインターフェイスを置くことができるならば、これらの影響を低減するためには、開始ノードは、最初の短いルートを使用して始まるかどうかを確認するために聞きながら、独自のルートが短期間返信送信を遅らせてもよい（MAY）。具体的には、このノードはランダムな時間のために、独自の経路応答を送信遅らせる可能性"
    },
    {
      "indent": 6,
      "text": "d = H * (h - 1 + r)",
      "ja": "D = H *（H  -  1つの+ R）"
    },
    {
      "indent": 3,
      "text": "where h is the length in number of network hops for the route to be returned in this node's Route Reply, r is a random floating point number between 0 and 1, and H is a small constant delay (at least twice the maximum wireless link propagation delay) to be introduced per hop. This delay effectively randomizes the time at which each node sends its Route Reply, with all nodes sending Route Replies giving routes of length less than h sending their Replies before this node, and all nodes sending Route Replies giving routes of length greater than h send their Replies after this node.",
      "ja": "ネットワークの数の長さがこのノードのルート応答で返されるルートのホップ時間は、rは0と1の間のランダムな浮動小数点数であり、そしてHは小さな一定の遅延（少なくとも二倍の最大無線リンクの伝搬でありますホップごとに導入される遅延）。この遅延は、効果的に経路がhより送信大きい長さの経路を与える返信送信経路は、このノードの前に返信を送る時間未満の長さの経路を与える返信送信すべてのノードとすべてのノードと、各ノードは、そのルート応答を送信する時刻をランダム化し、そのこのノードの後に​​返信。"
    },
    {
      "indent": 3,
      "text": "Within the delay period, this node promiscuously receives all packets, looking for data packets from the initiator of this Route Discovery destined for the target of the Route Discovery. If such a data packet received by this node during the delay period uses a source route of length less than or equal to h, this node may infer that the initiator of the Route Discovery has already received a Route Reply giving an equally good or better route. In this case, this node SHOULD cancel its delay timer and SHOULD NOT send its Route Reply for this Route Discovery.",
      "ja": "遅延期間内に、このノードは無差別経路探索の対象に向けられ、この経路探索の開始からデータパケットを探し、すべてのパケットを受信します。遅延期間中にこのノードによって受信されたそのようなデータパケットがより少ないまたはhに等しい長さのソースルートを使用している場合、このノードは、経路探索の開始が既にルートを受信したことを推測することができる等しく良好またはより良好な経路を与える返信。この場合、このノードは、その遅延タイマーを解除すべきであり、この経路探索のためにその経路応答を送るべきではありません。"
    },
    {
      "indent": 0,
      "text": "8.2.6. Processing a Received Route Reply Option",
      "section_title": true,
      "ja": "8.2.6。受信した経路返信オプションの処理"
    },
    {
      "indent": 3,
      "text": "Section 8.1.4 describes the general processing for a received packet, including the addition of routing information from options in the packet's DSR Options header to the receiving node's Route Cache.",
      "ja": "セクション8.1.4は、受信ノードのルートキャッシュにパケットのDSRオプションヘッダのオプションからルーティング情報の追加を含め、受信したパケットのための一般的な処理について説明します。"
    },
    {
      "indent": 3,
      "text": "If the received packet contains a Route Reply, no additional special processing of the Route Reply option is required beyond what is described there. As described in Section 4.1, anytime a node adds new information to its Route Cache (including the information added from this Route Reply option), the node SHOULD check each packet in its own Send Buffer (Section 4.2) to determine whether a route to that packet's IP Destination Address now exists in the node's Route Cache (including the information just added to the Cache). If so, the packet SHOULD then be sent using that route and removed from the Send Buffer. This general procedure handles all processing required for a received Route Reply option.",
      "ja": "受信したパケットは、経路応答が含まれている場合は、ルートの追加の特別な処理がオプションがそこに記載されているものを超えて必要とされて返信しません。セクション4.1に記載されているように、いつでもノードは、そのルートキャッシュに新しい情報を追加する（この経路からの追加情報を含むオプションを返信）、ノードは、独自に各パケットをチェックする必要があることへのルートかどうかを決定するために緩衝液（4.2節）を送信パケットのIP宛先アドレスは現在、（単にキャッシュに追加された情報を含む）ノードのルートキャッシュに存在します。その場合、パケットはそのルートを使用して送信し、送信バッファから削除する必要があります。この一般的な手順は、受信経路応答オプションのために必要なすべての処理を扱います。"
    },
    {
      "indent": 3,
      "text": "When using a MAC protocol that requires bidirectional links for unicast transmission, a unidirectional link may be discovered by the propagation of the Route Request. When the Route Reply is sent over the reverse path, a forwarding node may discover that the next-hop is unreachable. In this case, it MUST add the next-hop address to its blacklist (Section 4.6).",
      "ja": "ユニキャスト送信のための双方向リンクを必要とするMACプロトコルを使用する場合は、単方向リンクはルート要求の伝播によって発見することができます。ルート応答は、逆の経路を介して送信されたときに、転送ノードは、次ホップが到達不能であることを発見してもよいです。この場合には、そのブラックリスト（4.6節）への次ホップアドレスを追加する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.3. Route Maintenance Processing",
      "section_title": true,
      "ja": "8.3。ルートメンテナンス処理"
    },
    {
      "indent": 3,
      "text": "Route Maintenance is the mechanism by which a source node S is able to detect, while using a source route to some destination node D, if the network topology has changed such that it can no longer use its route to D because a link along the route no longer works. When Route Maintenance indicates that a source route is broken, S can attempt to use any other route it happens to know to D or can invoke Route Discovery again to find a new route for subsequent packets to D. Route Maintenance for this route is used only when S is actually sending packets to D.",
      "ja": "経路維持は、いくつかの宛先ノードDへのソース経路を使用しながら、ネットワークトポロジは、それがもはやルートに沿ったリンクので、Dへの経路を使用することができるように変更された場合、ソースノードSは、検出することができるされるメカニズムであります動作しなくなります。ルートメンテナンスソース経路が破壊されることを示す場合、SはDに知ることはそれが起こる他の経路を使用するように試みることができるか、またはこの経路にのみ使用されるためD.経路維持に後続のパケットのために新たなルートを見つけるために再度経路探索を呼び出すことができSは、実際にはD.にパケットを送信しているとき"
    },
    {
      "indent": 3,
      "text": "Specifically, when forwarding a packet, a node MUST attempt to confirm the reachability of the next-hop node, unless such confirmation had been received in the last MaintHoldoffTime period. Individual implementations MAY choose to bypass such confirmation for some limited number of packets, as long as those packets all fall within MaintHoldoffTime since the last confirmation. If no confirmation is received after the retransmission of MaxMaintRexmt acknowledgement requests, after the initial transmission of the packet, and conceptually including all retransmissions provided by the MAC layer, the node determines that the link for this next-hop node of the source route is \"broken\". This confirmation from the next-hop node for Route Maintenance can be implemented using a link-layer acknowledgement (Section 8.3.1), a \"passive acknowledgement\" (Section 8.3.2), or a network-layer acknowledgement (Section 8.3.3); the particular strategy for retransmission timing depends on the type of acknowledgement mechanism used. When not using link-layer acknowledgements for Route Maintenance, nodes SHOULD use passive acknowledgements when possible but SHOULD try requesting a network-layer acknowledgement one or more times before deciding that the link has failed and originating a Route Error to the original sender of the packet, as described in Section 8.3.4.",
      "ja": "パケットを転送する際具体的に、ノードは、そのような確認が最後MaintHoldoffTime期間で受信されていない限り、次ホップノードの到達可能性を確認しようとしなければなりません。個々の実装は、最後の確認以降のMaintHoldoffTime内のすべての秋限り、それらのパケットとして、パケットの一部の限られた数のため、このような確認をバイパスすることを選ぶかもしれ。全く確認がMaxMaintRexmt確認要求の再送後に受信されない場合、最初のパケットの送信、及び概念的MAC層によって提供されるすべての再送を含めた後に、ノードは、「送信元経路のこの次ホップノードのリンクであると判断します壊れた\"。ルートメンテナンスのための次のホップノードからこの確認は、リンク層肯定応答（8.3.1項）、「受動的アクノレッジメント」（8.3.2項）、またはネットワーク層肯定応答（セクション8.3.3を使用して実施することができます）;再送タイミングのための特定の戦略を用いる肯定応答機構のタイプに依存します。ルートのメンテナンスのためのリンク層確認応答を使用しない場合、ノードは、可能な場合、パッシブ確認応答を使用する必要がありますが、リンクが失敗したと判断し、パケットの元の送信者に経路エラーを発信する前に、ネットワーク層の確認1回以上を要求して試してみてください、8.3.4項で説明したように。"
    },
    {
      "indent": 3,
      "text": "In deciding whether or not to send a Route Error in response to attempting to forward a packet from some sender over a broken link, a node MUST limit the number of consecutive packets from a single sender that the node attempts to forward over this same broken link for which the node chooses not to return a Route Error. This requirement MAY be satisfied by returning a Route Error for each packet that the node attempts to forward over a broken link.",
      "ja": "壊れたリンクの上にいくつかの送信者からのパケットを転送しようとしたことに応答して経路エラーを送信するかどうかを決定するには、ノードは、ノードが同じ壊れたリンク上で転送しようとすることを、単一の送信者からの連続したパケットの数を制限しなければなりませんそのためにノードが経路エラーを返すことがないことを選択しました。この要件は、ノードが壊れたリンクを経由転送しようと各パケットの経路エラーを返すことによって満たすことができます。"
    },
    {
      "indent": 0,
      "text": "8.3.1. Using Link-Layer Acknowledgements",
      "section_title": true,
      "ja": "8.3.1。リンク層謝辞を使用します"
    },
    {
      "indent": 3,
      "text": "If the MAC protocol in use provides feedback as to the successful delivery of a data packet (such as is provided for unicast packets by the link-layer acknowledgement frame defined by IEEE 802.11 [IEEE80211]), then the use of the DSR Acknowledgement Request and Acknowledgement options is not necessary. If such link-layer feedback is available, it SHOULD be used instead of any other acknowledgement mechanism for Route Maintenance, and the node SHOULD NOT use either passive acknowledgements or network-layer acknowledgements for Route Maintenance.",
      "ja": "使用中のMACプロトコルは、データパケットの配信成功に関するフィードバックを提供する場合、DSR応答要求を使用すると（などは、IEEE 802.11 [IEEE80211]によって定義されたリンク層確認応答フレームによるユニキャストパケットのために提供されます）謝辞オプションは必要ありません。そのようなリンク層フィードバックが利用可能である場合、それは代わりに、ルートのメンテナンスのための任意の他の確認応答機構を使用する必要があり、ノードがルートの維持のための受動的確認応答またはネットワーク層の肯定応答のいずれかを使用しないでください。"
    },
    {
      "indent": 3,
      "text": "When using link-layer acknowledgements for Route Maintenance, the retransmission timing and the timing at which retransmission attempts are scheduled are generally controlled by the particular link layer implementation in use in the network. For example, in IEEE 802.11, the link-layer acknowledgement is returned after a unicast packet as a part of the basic access method of the IEEE 802.11 Distributed Coordination Function (DCF) MAC protocol; the time at which the acknowledgement is expected to arrive and the time at which the next retransmission attempt (if necessary) will occur are controlled by the MAC protocol implementation.",
      "ja": "経路維持のためのリンク層肯定応答を使用する場合、再送タイミングと再送試行がスケジュールされるタイミングは、一般に、ネットワークで使用中の特定のリンクレイヤの実装によって制御されます。例えば、IEEE 802.11に、リンク層肯定応答は、IEEE 802.11分散協調機能（DCF）MACプロトコルの基本的なアクセス方法の一部として、ユニキャストパケットの後に戻されます。肯定応答が到着すると予想される時間と、次の再送信試行（必要な場合）が発生する時間は、MACプロトコルの実装によって制御されます。"
    },
    {
      "indent": 3,
      "text": "When a node receives a link-layer acknowledgement for any packet in its Maintenance Buffer, that node SHOULD remove from its Maintenance Buffer that packet, as well as any other packets in its Maintenance Buffer with the same next-hop destination.",
      "ja": "ノードは、そのメンテナンスバッファ内の任意のパケットに対するリンク層肯定応答を受信すると、そのノードは、そのメンテナンスバッファからそのパケット、ならびに同じ次のホップ先とのメンテナンスバッファ内の他のパケットを削除してください。"
    },
    {
      "indent": 0,
      "text": "8.3.2. Using Passive Acknowledgements",
      "section_title": true,
      "ja": "8.3.2。パッシブ謝辞を使用して"
    },
    {
      "indent": 3,
      "text": "When link-layer acknowledgements are not available, but passive acknowledgements [JUBIN87] are available, passive acknowledgements SHOULD be used for Route Maintenance when originating or forwarding a packet along any hop other than the last hop (the hop leading to the IP Destination Address node of the packet). In particular, passive acknowledgements SHOULD be used for Route Maintenance in such cases if the node can place its network interface into \"promiscuous\" receive mode, and if network links used for data packets generally operate bidirectionally.",
      "ja": "ホップはIP宛先アドレスのノードに至る（リンク層肯定応答は利用できないが、利用可能である最終ホップ以外のホップに沿ってパケットを発信または転送するとき受動謝辞[JUBIN87]、受動謝辞ルートメンテナンスのために使用されるべきときパケットの）。ノードが受信モード、及びデータパケットに使用されるネットワークリンクは、一般的に双方向に動作する場合は、「無差別」にそのネットワークインターフェースを配置することができれば、特に、受動肯定応答は、このような場合には経路維持のために使用されるべきです。"
    },
    {
      "indent": 3,
      "text": "A node MUST NOT attempt to use passive acknowledgements for Route Maintenance for a packet originated or forwarded over its last hop (the hop leading to the IP Destination Address node of the packet), since the receiving node will not be forwarding the packet and thus no passive acknowledgement will be available to be heard by this node. Beyond this restriction, a node MAY utilize a variety of strategies in using passive acknowledgements for Route Maintenance of a packet that it originates or forwards. For example, the following two strategies are possible:",
      "ja": "ノードは、受信ノードがパケットを転送するため、ノーされないため、起源、またはその最後のホップ（パケットのIP宛先アドレスのノードにつながるホップ）を介して転送されたパケットの経路のメンテナンスのための受動的な確認応答を使うのを試みてはいけません受動的な承認は、このノードで聞こえるように利用できるようになります。この制限を超えて、ノードは、それが発信または転送パケットの経路探索のための受動的な確認応答を使用して、様々な戦略を利用することができます。たとえば、次の2つの戦略が考えられます。"
    },
    {
      "indent": 3,
      "text": "- Each time a node receives a packet to be forwarded to a node other than the final destination (the IP Destination Address of the packet), that node sends the original transmission of that packet without requesting a network-layer acknowledgement for it. If no passive acknowledgement is received within PassiveAckTimeout after this transmission, the node retransmits the packet, again without requesting a network-layer acknowledgement for it; the same PassiveAckTimeout timeout value is used for each such attempt. If no acknowledgement has been received after a total of TryPassiveAcks retransmissions of the packet, network-layer acknowledgements (as described in Section 8.3.3) are requested for all remaining attempts for that packet.",
      "ja": " - ノードが最終的な宛先（パケットのIP宛先アドレス）以外の他のノードに転送するパケットを受信するたびに、そのノードは、そのためのネットワークレイヤの肯定応答を要求することなく、そのパケットの送信元に送信します。いかなる受動的確認応答がこの送信後PassiveAckTimeout内に受信されない場合、ノードは再びそれのためにネットワーク層肯定応答を要求することなく、パケットを再送します。同じPassiveAckTimeoutタイムアウト値は、各そのような試みのために使用されます。 （セクション8.3.3で説明したように）肯定応答パケット、ネットワーク層肯定応答のTryPassiveAcks再送の合計後に受信されていない場合、そのパケットの残りのすべての試みのために要求されます。"
    },
    {
      "indent": 3,
      "text": "- Each node maintains a table of possible next-hop destination nodes, noting whether or not passive acknowledgements can typically be expected from transmission to that node, and the expected latency and jitter of a passive acknowledgement from that node. Each time a node receives a packet to be forwarded to a node other than the IP Destination Address, the node checks its table of next-hop destination nodes to determine whether to use a passive acknowledgement or a network-layer acknowledgement for that transmission to that node. The timeout for this packet can also be derived from this table. A node using this method SHOULD prefer using passive acknowledgements to network-layer acknowledgements.",
      "ja": " - 各ノードは受動肯定応答は、典型的には、そのノードに送信し、そのノードから受動的確認応答の予想待ち時間およびジッタから予想することができるかどうかを指摘し、可能な次ホップの宛先ノードのテーブルを維持します。ノードは、IP宛先アドレス以外のノードに転送するパケットを受信するたびに、ノードはそれにその送信のために受動的確認応答またはネットワーク層確認応答を使用するかどうかを決定するために、次ホップの宛先ノードの自身のテーブルをチェックノード。このパケットのタイムアウトも、この表から得ることができます。この方法を使用して、ノードがネットワーク層の肯定応答に受動的な肯定応答を使用して好むべきです。"
    },
    {
      "indent": 3,
      "text": "In using passive acknowledgements for a packet that it originates or forwards, a node considers the later receipt of a new packet (e.g., with promiscuous receive mode enabled on its network interface) an acknowledgement of this first packet if both of the following two tests succeed:",
      "ja": "以下の二つの試験の両方が成功した場合、この最初のパケットの確認応答を（無差別は、そのネットワーク・インタフェース上で有効に受信モードで、例えば）それは転送発信またはパケットのための受動的な確認応答を使用して、ノードは、新たなパケットの後に領収書を検討します："
    },
    {
      "indent": 3,
      "text": "- The Source Address, Destination Address, Protocol, Identification, and Fragment Offset fields in the IP header of the two packets MUST match [RFC791].",
      "ja": " - 送信元アドレス、宛先アドレス、プロトコル、識別、およびフラグメントは、2つのパケットのIPヘッダ内のフィールドオフセットは[RFC791]と一致しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If either packet contains a DSR Source Route header, both packets MUST contain one, and the value in the Segments Left field in the DSR Source Route header of the new packet MUST be less than that in the first packet.",
      "ja": " - いずれかのパケットがDSRソースルートヘッダが含まれている場合、両方のパケットが1つを含まなければなりません、そして新たなパケットのDSRソースRouteヘッダ内のフィールドを左セグメントの値が最初のパケットのそれより小さくなければなりません。"
    },
    {
      "indent": 3,
      "text": "When a node hears such a passive acknowledgement for any packet in its Maintenance Buffer, that node SHOULD remove from its Maintenance Buffer that packet, as well as any other packets in its Maintenance Buffer with the same next-hop destination.",
      "ja": "ノードは、そのメンテナンスバッファ内の任意のパケットのためのそのような受動的な肯定応答を聞くときに、そのノードは、そのメンテナンスバッファからそのパケット、ならびに同じ次のホップ先とのメンテナンスバッファ内の他のパケットを削除してください。"
    },
    {
      "indent": 0,
      "text": "8.3.3. Using Network-Layer Acknowledgements",
      "section_title": true,
      "ja": "8.3.3。ネットワーク層の謝辞を使用します"
    },
    {
      "indent": 3,
      "text": "When a node originates or forwards a packet and has no other mechanism of acknowledgement available to determine reachability of the next-hop node in the source route for Route Maintenance, that node SHOULD request a network-layer acknowledgement from that next-hop node. To do so, the node inserts an Acknowledgement Request option in the DSR Options header in the packet. The Identification field in that Acknowledgement Request option MUST be set to a value unique over all packets recently transmitted by this node to the same next-hop node.",
      "ja": "ノードが発信またはパケットを転送し、ルートメンテナンスのソースルート内の次ホップノードの到達可能性を決定するために利用可能な肯定応答の他の機構を有していない場合、そのノードは、次ホップノードからネットワーク層肯定応答を要求すべきです。そうするために、ノードは、パケット内のDSRオプションヘッダ内の応答要求オプションを挿入します。その承認要求オプションで識別フィールドは最近、同じネクストホップノードにこのノードによって送信されるすべてのパケットを超える一意の値に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "When a node receives a packet containing an Acknowledgement Request option, that node performs the following tests on the packet:",
      "ja": "ノードが応答要求オプションを含むパケットを受信した場合、そのノードは、パケットに次のテストを実行します。"
    },
    {
      "indent": 3,
      "text": "- If the indicated next-hop node address for this packet does not match any of this node's own IP addresses, then this node MUST NOT process the Acknowledgement Request option. The indicated next-hop node address is the next Address[i] field in the DSR Source Route option in the DSR Options header in the packet, or the IP Destination Address in the packet if the packet does not contain a DSR Source Route option or the Segments Left there is zero.",
      "ja": " - このパケットの指示の次ホップノードアドレスがこのノード自身のIPアドレスのいずれにも一致しない場合、このノードは、受信確認要求オプションを処理してはいけません。パケットがDSRソースルートオプションが含まれていない場合を示し、次ホップノードアドレスは、パケット内のDSRオプションヘッダー内のDSRソースルートオプション、またはパケット内のIP宛先アドレスの次のアドレス[i]のフィールドですかセグメントは、ゼロがある左。"
    },
    {
      "indent": 3,
      "text": "- If the packet contains an Acknowledgement option, then this node MUST NOT process the Acknowledgement Request option.",
      "ja": " - パケットが受信確認オプションが含まれている場合、このノードは、受信確認要求オプションを処理してはいけません。"
    },
    {
      "indent": 3,
      "text": "If neither of the tests above fails, then this node MUST process the Acknowledgement Request option by sending an Acknowledgement option to the previous-hop node; to do so, the node performs the following sequence of steps:",
      "ja": "テストのどちらが上失敗した場合は、このノードは、前のホップノードへの謝辞オプションを送信することにより、承認要求オプションを処理しなければなりません。そうするために、ノードは、次の一連のステップを実行します。"
    },
    {
      "indent": 3,
      "text": "- Create a packet and set the IP Protocol field to the protocol number assigned for DSR (48).",
      "ja": " - パケットを作成し、DSR（48）に割り当てられたプロトコル番号にIPプロトコルフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Set the IP Source Address field in this packet to the IP address of this node, copied from the source route in the DSR Source Route option in that packet (or from the IP Destination Address field of the packet, if the packet does not contain a DSR Source Route option).",
      "ja": " - パケットが含まれていない場合、そのパケット内の（またはパケットのIP宛先アドレスフィールドからDSRソースルートオプションでソースルートからコピーされたこのノードのIPアドレスに、このパケット内の送信元IPアドレスフィールドを、設定しますDSRソースルートオプション）。"
    },
    {
      "indent": 3,
      "text": "- Set the IP Destination Address field in this packet to the IP address of the previous-hop node, copied from the source route in the DSR Source Route option in that packet (or from the IP Source Address field of the packet, if the packet does not contain a DSR Source Route option).",
      "ja": " - パケット場合は、パケットのIP送信元アドレスフィールドから、（そのパケットにDSRソースルートオプションでソースルートからコピーされ、以前のホップノードのIPアドレスにこのパケットにIP宛先アドレスフィールドを設定）DSRソースルートオプションが含まれていません。"
    },
    {
      "indent": 3,
      "text": "- Add a DSR Options header to the packet. Set the Next Header field in the DSR Options header to the value 59, \"No Next Header\" [RFC2460].",
      "ja": " - パケットにDSRオプションヘッダを追加します。値59、「いいえ次ヘッダ」[RFC2460]にDSRオプションヘッダ内の次のヘッダーフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Add an Acknowledgement option to the DSR Options header in the packet; set the Acknowledgement option's Option Type field to 6 and the Opt Data Len field to 10.",
      "ja": " - パケット内のDSRオプションヘッダに確認応答オプションを追加します。謝辞オプションのオプションタイプフィールドに6と10のオプトデータLENフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Copy the Identification field from the received Acknowledgement Request option into the Identification field in the Acknowledgement option.",
      "ja": " - 謝辞オプションで識別フィールドに、受信確認応答を要求オプションから識別フィールドをコピーします。"
    },
    {
      "indent": 3,
      "text": "- Set the ACK Source Address field in the Acknowledgement option to be the IP Source Address of this new packet (set above to be the IP address of this node).",
      "ja": " - （このノードのIPアドレスであることを上記の設定）この新しいパケットの送信元IPアドレスであることを確認応答オプションでACK送信元アドレスフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Set the ACK Destination Address field in the Acknowledgement option to be the IP Destination Address of this new packet (set above to be the IP address of the previous-hop node).",
      "ja": " - （前のホップノードのIPアドレスであることを上記の設定）この新しいパケットのIP宛先アドレスであることを確認応答オプションでACK宛先アドレスフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Send the packet as described in Section 8.1.1.",
      "ja": " - セクション8.1.1で説明したようにパケットを送信します。"
    },
    {
      "indent": 3,
      "text": "Packets containing an Acknowledgement option SHOULD NOT be placed in the Maintenance Buffer.",
      "ja": "謝辞オプションを含むパケットは、メンテナンス・バッファに配置されるべきではありません。"
    },
    {
      "indent": 3,
      "text": "When a node receives a packet with both an Acknowledgement option and an Acknowledgement Request option, if that node is not the destination of the Acknowledgement option (the IP Destination Address of the packet), then the Acknowledgement Request option MUST be ignored. Otherwise (that node is the destination of the Acknowledgement option), that node MUST process the Acknowledgement Request option by returning an Acknowledgement option according to the following sequence of steps:",
      "ja": "そのノードが受信確認オプション（パケットのIP宛先アドレス）の宛先ではない場合、ノードは、確認応答オプションと謝辞リクエストオプションの両方でパケットを受信すると、その後、承認要求オプションは無視しなければなりません。そうでない場合（そのノードは、肯定応答オプションの宛先である）、以下の一連の手順に従って確認応答オプションを返すことによって応答要求オプションを処理しなければならないことをノード。"
    },
    {
      "indent": 3,
      "text": "- Create a packet and set the IP Protocol field to the protocol number assigned for DSR (48).",
      "ja": " - パケットを作成し、DSR（48）に割り当てられたプロトコル番号にIPプロトコルフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Set the IP Source Address field in this packet to the IP address of this node, copied from the source route in the DSR Source Route option in that packet (or from the IP Destination Address field of the packet, if the packet does not contain a DSR Source Route option).",
      "ja": " - パケットが含まれていない場合、そのパケット内の（またはパケットのIP宛先アドレスフィールドからDSRソースルートオプションでソースルートからコピーされたこのノードのIPアドレスに、このパケット内の送信元IPアドレスフィールドを、設定しますDSRソースルートオプション）。"
    },
    {
      "indent": 3,
      "text": "- Set the IP Destination Address field in this packet to the IP address of the node originating the Acknowledgement option.",
      "ja": " - 謝辞オプションを発信ノードのIPアドレスに、このパケットのIP宛先アドレスフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Add a DSR Options header to the packet, and set the DSR Options header's Next Header field to the value 59, \"No Next Header\" [RFC2460].",
      "ja": " - パケットにDSRオプションヘッダを追加し、値59にDSRオプションヘッダの次ヘッダフィールドを設定し、「いいえ次ヘッダ」[RFC2460]。"
    },
    {
      "indent": 3,
      "text": "- Add an Acknowledgement option to the DSR Options header in this packet; set the Acknowledgement option's Option Type field to 6 and the Opt Data Len field to 10.",
      "ja": " - このパケットでDSRオプションヘッダに確認応答オプションを追加します。謝辞オプションのオプションタイプフィールドに6と10のオプトデータLENフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Copy the Identification field from the received Acknowledgement Request option into the Identification field in the Acknowledgement option.",
      "ja": " - 謝辞オプションで識別フィールドに、受信確認応答を要求オプションから識別フィールドをコピーします。"
    },
    {
      "indent": 3,
      "text": "- Set the ACK Source Address field in the option to the IP Source Address of this new packet (set above to be the IP address of this node).",
      "ja": " - （このノードのIPアドレスであることを上記の設定）この新しいパケットの送信元IPアドレスにオプションでACK送信元アドレスフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Set the ACK Destination Address field in the option to the IP Destination Address of this new packet (set above to be the IP address of the node originating the Acknowledgement option).",
      "ja": " - （確認応答オプションを発信ノードのIPアドレスであることを上記の設定）この新しいパケットのIP宛先アドレスにオプションでACK宛先アドレスフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Send the packet directly to the destination. The IP Destination Address MUST be treated as a direct neighbor node: the transmission to that node MUST be done in a single IP forwarding hop, without Route Discovery and without searching the Route Cache. In addition, this packet MUST NOT contain a DSR Acknowledgement Request, MUST NOT be retransmitted for Route Maintenance, and MUST NOT expect a link-layer acknowledgement or passive acknowledgement.",
      "ja": " - 宛先に直接パケットを送信します。 IP宛先アドレスは、直接隣接ノードとして扱わなければなりません：そのノードへの送信は、経路探索がなく、ルートキャッシュを検索することなく、単一のIPフォワーディングホップで行わなければなりません。また、このパケットは、DSR承認要求を含んではならないルートのメンテナンスのために再送信してはならない、とリンク層肯定的または受動的確認応答を予想してはいけません。"
    },
    {
      "indent": 3,
      "text": "When using network-layer acknowledgements for Route Maintenance, a node SHOULD use an adaptive algorithm in determining the retransmission timeout for each transmission attempt of an acknowledgement request. For example, a node SHOULD maintain a separate round-trip time (RTT) estimate for each node to which it has recently attempted to transmit packets, and it SHOULD use this RTT estimate in setting the timeout for each retransmission attempt for Route Maintenance. The TCP RTT estimation algorithm has been shown to work well for this purpose in implementation and testbed experiments with DSR [MALTZ99b, MALTZ01].",
      "ja": "経路維持のためのネットワーク層肯定応答を使用する場合、ノードは、応答要求の各送信試行のための再送タイムアウトを決定する適応アルゴリズムを使用すべきです。例えば、ノードは、それが最近パケットを送信しようとしている各ノードに対して個別のラウンドトリップ時間（RTT）の推定値を維持しなければならない、それがルートのメンテナンスのための各再送信試行のタイムアウトを設定する際に、このRTT推定値を使用すべきです。 TCP RTT推定アルゴリズムは、DSR [MALTZ99b、MALTZ01]で実装とテストベッドの実験では、この目的のために働くことが示されています。"
    },
    {
      "indent": 0,
      "text": "8.3.4. Originating a Route Error",
      "section_title": true,
      "ja": "8.3.4。経路エラーを発信"
    },
    {
      "indent": 3,
      "text": "When a node is unable to verify reachability of a next-hop node after reaching a maximum number of retransmission attempts, it SHOULD send a Route Error to the IP Source Address of the packet. When sending a Route Error for a packet containing either a Route Error option or an Acknowledgement option, a node SHOULD add these existing options to its Route Error, subject to the limit described below.",
      "ja": "ノードが再試行の最大数に達した後、次ホップノードの到達可能性を検証することができない場合は、パケットの送信元IPアドレスへの経路エラーを送るべきです。経路エラーオプションまたは確認応答のオプションのいずれかを含むパケットの経路エラーを送信する場合、ノードは、後述する限界を条件として、その経路エラーにこれらの既存のオプションを追加する必要があります。"
    },
    {
      "indent": 3,
      "text": "A node transmitting a Route Error MUST perform the following steps:",
      "ja": "経路エラーを送信するノードは、次の手順を実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "- Create an IP packet and set the IP Protocol field to the protocol number assigned for DSR (48). Set the Source Address field in this packet's IP header to the address of this node.",
      "ja": " -  IPパケットを作成し、DSR（48）に割り当てられたプロトコル番号にIPプロトコルフィールドを設定します。このノードのアドレスにこのパケットのIPヘッダ内の送信元アドレスフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- If the Salvage field in the DSR Source Route option in the packet triggering the Route Error is zero, then copy the Source Address field of the packet triggering the Route Error into the Destination Address field in the new packet's IP header;",
      "ja": " - 経路エラーをトリガーパケットでDSRソースルートオプションでサルベージフィールドがゼロの場合、新しいパケットのIPヘッダ内の宛先アドレスフィールドに経路エラーをトリガーしたパケットの送信元アドレスフィールドをコピーします。"
    },
    {
      "indent": 6,
      "text": "otherwise, copy the Address[1] field from the DSR Source Route option of the packet triggering the Route Error into the Destination Address field in the new packet's IP header",
      "ja": "そうでない場合は、アドレスをコピーして、[1]の新しいパケットのIPヘッダ内の宛先アドレスフィールドに経路エラーをトリガするパケットのDSRソースルートオプションからフィールド"
    },
    {
      "indent": 3,
      "text": "- Insert a DSR Options header into the new packet.",
      "ja": " - 新しいパケットにDSRオプションヘッダを挿入します。"
    },
    {
      "indent": 3,
      "text": "- Add a Route Error Option to the new packet, setting the Error Type to NODE_UNREACHABLE, the Salvage value to the Salvage value from the DSR Source Route option of the packet triggering the Route Error, and the Unreachable Node Address field to the address of the next-hop node from the original source route. Set the Error Source Address field to this node's IP address, and the Error Destination field to the new packet's IP Destination Address.",
      "ja": " - のアドレスへのルートエラーをトリガするパケットのDSRソースルートオプション、および到達不能ノードアドレスフィールドからNODE_UNREACHABLE、残存価額を残存価額にエラーの種類を設定し、新しいパケットに経路エラーオプションを追加します。元のソース経路から次ホップノード。このノードのIPアドレスにエラーソースアドレスフィールド、および新しいパケットのIP宛先アドレスにエラー送り先]フィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- If the packet triggering the Route Error contains any Route Error or Acknowledgement options, the node MAY append to its Route Error each of these options, with the following constraints:",
      "ja": " - 経路エラーをトリガーしたパケットがどの経路エラーまたは承認のオプションが含まれている場合、ノードは次の制約で、その経路エラーにこれらの各オプションを追加することがあります。"
    },
    {
      "indent": 6,
      "text": "o The node MUST NOT include any Route Error option from the packet triggering the new Route Error, for which the total Salvage count (Section 6.4) of that included Route Error would be greater than MAX_SALVAGE_COUNT in the new packet.",
      "ja": "Oノードは、その合計サルベージ数（6.4節）は、新たなパケットにMAX_SALVAGE_COUNTよりも大きいだろう経路エラーが含まれていたため、新たな経路エラーを、トリガーパケットから任意の経路エラーオプションを含んではいけません。"
    },
    {
      "indent": 6,
      "text": "o If any Route Error option from the packet triggering the new Route Error is not included in the packet, the node MUST NOT include any following Route Error or Acknowledgement options from the packet triggering the new Route Error.",
      "ja": "新しい経路エラーをトリガーしたパケットから任意の経路エラーオプションがパケットに含まれていない場合は、O、ノードが新しい経路エラーをトリガーしたパケットから、任意の以下の経路エラーまたは承認のオプションを含んではいけません。"
    },
    {
      "indent": 6,
      "text": "o Any appended options from the packet triggering the Route Error MUST follow the new Route Error in the packet.",
      "ja": "O経路エラーをトリガーしたパケットからどれでも追加のオプションは、パケットの新しい経路エラーに従わなければなりません。"
    },
    {
      "indent": 6,
      "text": "o In appending these options to the new Route Error, the order of these options from the packet triggering the Route Error MUST be preserved.",
      "ja": "O新しい経路エラーにこれらのオプションを追加するには、ルートエラーをトリガーしたパケットから、これらのオプションの順序は保存されなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Send the packet as described in Section 8.1.1.",
      "ja": " - セクション8.1.1で説明したようにパケットを送信します。"
    },
    {
      "indent": 0,
      "text": "8.3.5. Processing a Received Route Error Option",
      "section_title": true,
      "ja": "8.3.5。受信した経路エラー・オプションの処理"
    },
    {
      "indent": 3,
      "text": "When a node receives a packet containing a Route Error option, that node MUST process the Route Error option according to the following sequence of steps:",
      "ja": "ノードは経路エラーオプションを含むパケットを受信した場合、そのノードは、ステップの次のシーケンスに従って経路エラーオプションを処理しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- The node MUST remove from its Route Cache the link from the node identified by the Error Source Address field to the node identified by the Unreachable Node Address field (if this link is present in its Route Cache). If the node implements its Route Cache as a link cache, as described in Section 4.1, only this",
      "ja": " - ノードはルートキャッシュから到達不能ノードアドレスフィールドによって識別されるノードにエラーソースアドレスフィールドによって識別されるノード（このリンクはそのルートキャッシュに存在する場合）からのリンクを削除する必要があります。 4.1節で説明したように、ノードは、リンクのキャッシュとしてそのルートキャッシュを実装する場合、これだけ"
    },
    {
      "indent": 6,
      "text": "single link is removed; if the node implements its Route Cache as a path cache, however, all routes (paths) that use this link are either truncated before the link or removed completely.",
      "ja": "単一のリンクが削除されます。ノードは、経路キャッシュとしてそのルートキャッシュを実装する場合、ただし、このリンクを使用するすべての経路（パス）は、いずれかのリンクの前に切り捨てられるか、完全に除去します。"
    },
    {
      "indent": 3,
      "text": "- If the option following the Route Error is an Acknowledgement or Route Error option sent by this node (that is, with Acknowledgement or Error Source Address equal to this node's address), copy the DSR options following the current Route Error into a new packet with IP Source Address equal to this node's own IP address and IP Destination Address equal to the Acknowledgement or Error Destination Address. Transmit this packet as described in Section 8.1.1, with the Salvage count in the DSR Source Route option set to the Salvage value of the Route Error.",
      "ja": " - 経路エラー以下のオプションは、このノード（つまり、承認またはこのノードのアドレスと等しいエラーソースアドレスと、である）によって送られた確認応答や経路エラーオプションは、新しいパケットとに現在の経路エラー以下のDSRのオプションをコピーし、ある場合にはこのノード自身のIPアドレスと謝辞またはエラー送り先のアドレスに等しいIP宛先アドレスと同じ送信元IPアドレス。経路エラーのサルベージ値に設定DSRソースルートオプションでサルベージ・カウントで、8.1.1項で説明したように、このパケットを送信します。"
    },
    {
      "indent": 3,
      "text": "In addition, after processing the Route Error as described above, the node MAY initiate a new Route Discovery for any destination node for which it then has no route in its Route Cache as a result of processing this Route Error, if the node has indication that a route to that destination is needed. For example, if the node has an open TCP connection to some destination node, then if the processing of this Route Error removed the only route to that destination from this node's Route Cache, then this node MAY initiate a new Route Discovery for that destination node. Any node, however, MUST limit the rate at which it initiates new Route Discoveries for any single destination address, and any new Route Discovery initiated in this way as part of processing this Route Error MUST conform as a part of this limit.",
      "ja": "ノードという指示を有する場合に加えて、上記のように経路エラーを処理した後、ノードは、それが、この経路エラーを処理した結果として、そのルートキャッシュにルートを持たないため、任意の宛先ノードのための新しいルート探索を開始することができますその目的地へのルートが必要とされています。ノードは、いくつかの宛先ノードへのTCP接続を開いている場合、この経路エラーの処理はこのノードのルートキャッシュからその宛先への唯一のルートを削除した場合、その後、このノードは、宛先ノードのための新しい経路探索を開始することができます。任意のノードが、しかし、それは、任意の単一の宛先アドレスに新しいルート発見を開始する速度を制限する必要があり、任意の新たな経路探索は、この経路エラーがこの制限の一部として適合しなければならない処理の一部として、このようにして開始しました。"
    },
    {
      "indent": 0,
      "text": "8.3.6. Salvaging a Packet",
      "section_title": true,
      "ja": "8.3.6。パケットをサルベージ"
    },
    {
      "indent": 3,
      "text": "When an intermediate node forwarding a packet detects through Route Maintenance that the next-hop link along the route for that packet is broken (Section 8.3), if the node has another route to the packet's IP Destination Address in its Route Cache, the node SHOULD \"salvage\" the packet rather than discard it. To do so using the route found in its Route Cache, this node processes the packet as follows:",
      "ja": "パケットを転送する中間ノードはそのパケットの経路に沿った次のホップのリンクが壊れていることルートメンテナンスを介して検出された場合、ノードは、そのルートキャッシュ内のパケットのIP宛先アドレスに別のルートを持っている場合（8.3節）、ノードはSHOULDパケットを「救う」というよりも、それを捨てます。次のようにそのルートキャッシュで見つかったルートを使用してこれを行うには、このノードはパケットを処理します。"
    },
    {
      "indent": 3,
      "text": "- If the MAC protocol in use in the network is not capable of transmitting unicast packets over unidirectional links, as discussed in Section 3.3.1, then if this packet contains a Route Reply option, remove and discard the Route Reply option in the packet; if the DSR Options header in the packet then contains no DSR options or only a DSR Source Route Option, remove the DSR Options header from the packet. If the resulting packet then contains only an IP header (e.g., no transport layer header or payload), the node SHOULD NOT salvage the packet and instead SHOULD discard the entire packet.",
      "ja": " - このパケットがルートを含む場合、次に、3.3.1項で説明したように、ネットワークで使用されているMACプロトコルは、単方向リンクを介してユニキャストパケットを送信することができない場合はオプション返信経路を削除し、廃棄パケットでオプションを返信。パケット内のDSRオプションヘッダーは、その後何のDSRオプションのみDSRソースルートオプションが含まれていない場合、パケットからDSRオプションヘッダを削除します。得られたパケットは、次に唯一のIPヘッダ（例えば、なしトランスポート層ヘッダまたはペイロード）が含まれている場合、ノードはパケットを回収すべきではなく、代わりに全体のパケットを破棄すべきです。"
    },
    {
      "indent": 3,
      "text": "- Modify the existing DSR Source Route option in the packet so that the Address[i] fields represent the source route found in this node's Route Cache to this packet's IP Destination Address. Specifically, the node copies the hop addresses of the source route into sequential Address[i] fields in the DSR Source Route option, for i = 1, 2, ..., n. Address[1], here, is the address of the salvaging node itself (the first address in the source route found from this node to the IP Destination Address of the packet). The value n, here, is the number of hop addresses in this source route, excluding the destination of the packet (which is instead already represented in the Destination Address field in the packet's IP header).",
      "ja": "。 - アドレス[i]のフィールドは、このパケットのIP宛先アドレスに、このノードのルートキャッシュで見つかったソースルートを表すように、パケット内の既存のDSRソースルートオプションを変更します。具体的には、ノードコピーシーケンシャルアドレスに送信元経路のホップアドレス[i]はDSRソースルートオプションのフィールドに対するI = 1、2、...、N。 [1]アドレス、ここでは、サルベージノード自身のアドレス（パケットのIP宛先アドレスにこのノードから求めたソースルートの最初のアドレス）です。値nは、ここで、（代わりに、既にパケットのIPヘッダの宛先アドレスフィールドに示されている）は、パケットの宛先を除く、このソース経路におけるホップアドレスの数です。"
    },
    {
      "indent": 3,
      "text": "- Initialize the Segments Left field in the DSR Source Route option to n as defined above.",
      "ja": " - 上記で定義されたように、nにDSRソースルートオプションのフィールドを左セグメントを初期化します。"
    },
    {
      "indent": 3,
      "text": "- The First Hop External (F) bit in the DSR Source Route option MUST be set to 0.",
      "ja": " -  DSRソースルートオプションの最初のホップの外部（F）ビットが0に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- The Last Hop External (L) bit in the DSR Source Route option is copied from the External bit flagging the last hop in the source route for the packet, as indicated in the Route Cache.",
      "ja": " - ルートキャッシュに示されるように、DSRソースルートオプションで最終ホップ外部（L）ビットは、パケットの送信元ルートの最後のホップにフラグを立てる外部ビットからコピーされます。"
    },
    {
      "indent": 3,
      "text": "- The Salvage field in the DSR Source Route option is set to 1 plus the value of the Salvage field in the DSR Source Route option of the packet that caused the error.",
      "ja": " -  DSRソースルートオプションでサルベージフィールドは、エラーの原因となったパケットのDSRソースルートオプションでサルベージフィールドの値+ 1に設定されています。"
    },
    {
      "indent": 3,
      "text": "- Transmit the packet to the next-hop node on the new source route in the packet, using the forwarding procedure described in Section 8.1.5.",
      "ja": " - セクション8.1.5に記載の転送手順を使用して、パケットに新しい送信元経路上の次ホップノードにパケットを送信します。"
    },
    {
      "indent": 3,
      "text": "As described in Section 8.3.4, the node in this case also SHOULD return a Route Error to the original sender of the packet. If the node chooses to salvage the packet, it SHOULD do so after originating the Route Error.",
      "ja": "8.3.4項で述べたように、この場合のノードは、パケットの元の送信者にルートエラーを返す必要があります。ノードがパケットを救済することを選択した場合、それは経路エラーを発信した後、それを行うべきです。"
    },
    {
      "indent": 3,
      "text": "When returning any Route Reply in the case in which the MAC protocol in use in the network is not capable of transmitting unicast packets over unidirectional links, the source route used for routing the Route Reply packet MUST be obtained by reversing the sequence of hops in the Route Request packet (the source route that is then returned in the Route Reply). This restriction on returning a Route Reply and on salvaging a packet that contains a Route Reply option enables the Route Reply to test this sequence of hops for bidirectionality, preventing the Route Reply from being received by the initiator of the Route Discovery unless each of the hops over which the Route Reply is returned (and thus each of the hops in the source route being returned in the Reply) is bidirectional.",
      "ja": "任意のルートを返すとき、ネットワークで使用されているMACプロトコルは、単方向リンクを介してユニキャストパケットを送信することができない、ルートリプライパケットをルーティングするために使用するソースルート内のホップの順序を逆にすることによって得られる必要がある場合に返信ルート要求パケット（次いで、ルート応答で返されたソースルート）。返信ルートを返すにし、ルートを含むパケットを救済に、この制限はオプションはホップの各々ない限り、経路探索の開始によって受信されるのルート応答を防止する、双方向性のためのホップのこのシーケンスをテストするルート応答を可能に返信その上ルート応答が返され（従って、各応答で返されるソース経路におけるホップの）双方向性です。"
    },
    {
      "indent": 0,
      "text": "8.4. Multiple Network Interface Support",
      "section_title": true,
      "ja": "8.4。複数のネットワークインターフェイスのサポート"
    },
    {
      "indent": 3,
      "text": "A node using DSR MAY have multiple network interfaces that support DSR ad hoc network routing. This section describes special packet processing at such nodes.",
      "ja": "DSRを使用して、ノードは、DSRアドホックネットワークのルーティングをサポートする複数のネットワークインタフェースがあるかもしれません。このセクションでは、そのようなノードに特別なパケット処理について説明します。"
    },
    {
      "indent": 3,
      "text": "A node with multiple network interfaces that support DSR ad hoc network routing MUST have some policy for determining which Route Request packets are forwarded using which network interfaces. For example, a node MAY choose to forward all Route Requests over all network interfaces.",
      "ja": "DSRアドホックネットワークのルーティングをサポートする複数のネットワークインターフェースを有するノードがルートリクエストパケットがどのネットワークインターフェイスを使用して転送されるかを決定するためのいくつかのポリシーを持っていなければなりません。例えば、ノードは、すべてのネットワークインタフェース上のすべてのルート要求を転送することを選ぶかもしれ。"
    },
    {
      "indent": 3,
      "text": "When a node with multiple network interfaces that support DSR propagates a Route Request on a network interface other than the one on which it received the Route Request, it MUST in this special case modify the Address list in the Route Request as follows:",
      "ja": "DSRをサポートする複数のネットワークインターフェースを有するノードがルート要求を受信したもの以外のネットワーク・インターフェース上のルート要求を伝播する際、以下のように、この特別な場合にルート要求のアドレスリストを変更する必要があります。"
    },
    {
      "indent": 3,
      "text": "- Append the node's IP address for the incoming network interface.",
      "ja": " - 着信ネットワークインタフェースのためのノードのIPアドレスを追加します。"
    },
    {
      "indent": 3,
      "text": "- Append the node's IP address for the outgoing network interface.",
      "ja": " - 発信ネットワークインタフェースのためのノードのIPアドレスを追加します。"
    },
    {
      "indent": 3,
      "text": "When a node forwards a packet containing a source route, it MUST assume that the next-hop node is reachable on the incoming network interface, unless the next hop is the address of one of this node's network interfaces, in which case this node MUST skip over this address in the source route and process the packet in the same way as if it had just received it from that network interface, as described in Section 8.1.5.",
      "ja": "ノードは、ソース経路を含むパケットを転送するとき、次ホップがこのノードのネットワークインタフェースの一つのアドレスがある場合を除き、それは、次ホップノードが着信ネットワークインターフェース上で到達可能であると仮定しなければならない場合、このノードはスキップしなければなりませんソースルートにこのアドレスを超えると、セクション8.1.5に記載したように、それはちょうど、そのネットワークインタフェースからそれを受け取ったかのように同じ方法でパケットを処理します。"
    },
    {
      "indent": 3,
      "text": "If a node that previously had multiple network interfaces that support DSR receives a packet sent with a source route specifying a change to a network interface, as described above, that is no longer available, it MAY send a Route Error to the source of the packet without attempting to forward the packet on the incoming network interface, unless the network uses an autoconfiguration mechanism that may have allowed another node to acquire the now unused address of the unavailable network interface.",
      "ja": "以前にDSRをサポートする複数のネットワークインターフェイスを持っていたノードは、それがもはや利用可能である上述したように、ネットワークインターフェースへの変更を指定するソースルートを用いて送信されたパケットを受信しない場合、そのパケットの送信元へのルートエラーを送信することができますネットワークは、別のノードが利用できないネットワークインタフェースの今未使用のアドレスを取得することができたかもしれない自動機構を使用しない限り、着信ネットワークインターフェース上でパケットを転送しようとせず。"
    },
    {
      "indent": 0,
      "text": "8.5. IP Fragmentation and Reassembly",
      "section_title": true,
      "ja": "8.5。 IPフラグメンテーションおよび再構成"
    },
    {
      "indent": 3,
      "text": "When a node using DSR wishes to fragment a packet that contains a DSR header not containing a Route Request option, it MUST perform the following sequence of steps:",
      "ja": "DSRを使用して、ノードがルート要求オプションを含まないDSRヘッダを含むパケットを断片化することを望む場合には、次の一連のステップを実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "- Remove the DSR Options header from the packet.",
      "ja": " - パケットからDSRオプションヘッダを削除します。"
    },
    {
      "indent": 3,
      "text": "- Fragment the packet using normal IP fragmentation processing [RFC791]. However, when determining the size of each fragment to create from the original packet, the fragment size MUST be reduced by the size of the DSR Options header from the original packet.",
      "ja": " -  [RFC791]通常のIPフラグメンテーション処理を使用してパケットを断片。しかし、元のパケットから作成する各断片のサイズを決定するときに、フラグメントサイズは、元のパケットからDSRオプションヘッダのサイズによって低減されなければなりません。"
    },
    {
      "indent": 3,
      "text": "- IP-in-IP encapsulate each fragment [RFC2003]. The IP Destination address of the outer (encapsulating) packet MUST be set equal to the IP Destination address of the original packet.",
      "ja": " -  IP-IPにおける各フラグメント[RFC2003]をカプセル化します。外側の（カプセル化）パケットのIP宛先アドレスは、元のパケットのIP宛先アドレスに等しく設定されなければなりません。"
    },
    {
      "indent": 3,
      "text": "- Add the DSR Options header from the original packet to each resulting encapsulating packet. If a Source Route header is present in the DSR Options header, increment the Salvage field.",
      "ja": " - 得られた各カプセル化パケットに元のパケットからDSRオプションヘッダを追加します。ソースルートヘッダはDSRオプションヘッダに存在している場合、サルベージフィールドをインクリメントします。"
    },
    {
      "indent": 3,
      "text": "When a node using the DSR protocol receives an IP-in-IP encapsulated packet destined to itself, it SHOULD decapsulate the packet [RFC2003] and then process the inner packet according to standard IP reassembly processing [RFC791].",
      "ja": "DSRプロトコルを使用してノード自体に宛てIPインIPカプセル化されたパケットを受信すると、パケット[RFC2003]をデカプセル化して、[RFC791]標準IPリアセンブル処理に係るインナーパケットを処理しなければなりません。"
    },
    {
      "indent": 0,
      "text": "8.6. Flow State Processing",
      "section_title": true,
      "ja": "8.6。フロー状態処理"
    },
    {
      "indent": 3,
      "text": "A node implementing the optional DSR flow state extension MUST follow these additional processing steps.",
      "ja": "任意DSRフロー状態拡張を実装するノードは、これらの追加の処理ステップに従わなければなりません。"
    },
    {
      "indent": 0,
      "text": "8.6.1. Originating a Packet",
      "section_title": true,
      "ja": "8.6.1。パケットを発信"
    },
    {
      "indent": 3,
      "text": "When originating any packet to be routed using flow state, a node using DSR flow state MUST do the following:",
      "ja": "フロー状態を使用してルーティングされるすべてのパケットを発信するときは、DSRフロー状態を使用して、ノードは以下を行う必要があります。"
    },
    {
      "indent": 3,
      "text": "- If the route to be used for this packet has never had a DSR flow state established along it (or the existing flow state has expired):",
      "ja": " - ルートがこのパケットに使用する場合は、それに沿って確立DSR流状態がありませんでした（または既存のフロー状態の有効期限が切れています）："
    },
    {
      "indent": 6,
      "text": "o Generate a 16-bit Flow ID larger than any unexpired Flow IDs used by this node for this destination. Odd Flow IDs MUST be chosen for \"default\" flows; even Flow IDs MUST be chosen for non-default flows.",
      "ja": "Oこの宛先は、このノードによって使用される任意の期限切れフローIDより大きい16ビットのフローIDを生成します。奇数フローIDは「デフォルト」のフローのために選ばなければなりません。でも、フローIDは、デフォルト以外のフローのために選ばなければなりません。"
    },
    {
      "indent": 6,
      "text": "o Add a DSR Options header, as described in Section 8.1.2.",
      "ja": "セクション8.1.2で説明したように、O、DSRオプションヘッダを追加します。"
    },
    {
      "indent": 6,
      "text": "o Add a DSR Flow State header, as described in Section 8.6.2.",
      "ja": "第8.6.2項で説明したように、O、DSRフロー状態ヘッダーを追加します。"
    },
    {
      "indent": 6,
      "text": "o Initialize the Hop Count field in the DSR Flow State header to 0.",
      "ja": "O 0にDSRフロー状態ヘッダーでホップカウントフィールドを初期化します。"
    },
    {
      "indent": 6,
      "text": "o Set the Flow ID field in the DSR Flow State header to the Flow ID generated in the first step.",
      "ja": "O第一工程で生成されたフローIDにDSRフロー状態ヘッダーにフローIDフィールドを設定します。"
    },
    {
      "indent": 6,
      "text": "o Add a Timeout option to the DSR Options header.",
      "ja": "O DSRオプションヘッダにタイムアウトオプションを追加します。"
    },
    {
      "indent": 6,
      "text": "o Add a Source Route option after the Timeout option with the route to be used, as described in Section 8.1.3.",
      "ja": "8.1.3項で説明したように、O、使用するルートとタイムアウトオプションの後にソースルートオプションを追加します。"
    },
    {
      "indent": 6,
      "text": "o The source node SHOULD record this flow in its Flow Table.",
      "ja": "Oソースノードは、そのフローテーブル内でこの流れを記録する必要があります。"
    },
    {
      "indent": 6,
      "text": "o If this flow is recorded in the Flow Table, the TTL in this Flow Table entry MUST be set to be the TTL of this flow establishment packet.",
      "ja": "このフローはフローテーブルに記録されている場合は、O、このフローテーブルエントリのTTLは、このフローの確立パケットのTTLに設定しなければなりません。"
    },
    {
      "indent": 6,
      "text": "o If this flow is recorded in the Flow Table, the timeout in this Flow Table entry MUST be set to a value no less than the value specified in the Timeout option.",
      "ja": "この流れは、フローテーブルに記録されている場合は、O、このフローテーブルのエントリにタイムアウトがタイムアウトオプションで指定された値を下回らない値に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the route to be used for this packet has had DSR flow state established along it, but has not been established end-to-end:",
      "ja": " - このパケットのために使用されるルートは、それに沿って確立DSRフロー状態を持っていますが、エンド・ツー・エンドの確立されていない場合："
    },
    {
      "indent": 6,
      "text": "o Add a DSR Options header, as described in Section 8.1.2.",
      "ja": "セクション8.1.2で説明したように、O、DSRオプションヘッダを追加します。"
    },
    {
      "indent": 6,
      "text": "o Add a DSR Flow State header, as described in Section 8.6.2.",
      "ja": "第8.6.2項で説明したように、O、DSRフロー状態ヘッダーを追加します。"
    },
    {
      "indent": 6,
      "text": "o Initialize the Hop Count field in the DSR Flow State header to 0.",
      "ja": "O 0にDSRフロー状態ヘッダーでホップカウントフィールドを初期化します。"
    },
    {
      "indent": 6,
      "text": "o The Flow ID field of the DSR Flow State header SHOULD be the Flow ID previously used for this route. If it is not, the steps for sending packets along never-before-established routes above MUST be followed in place of these.",
      "ja": "O DSRフロー状態のヘッダのフローIDフィールドは、以前にこのルートに使用されるフローIDであるべきです。そうでない場合は、上記の前に決して確立されたルートに沿ってパケットを送信するための手順は、これらの代わりに従わなければなりません。"
    },
    {
      "indent": 6,
      "text": "o Add a Timeout option to the DSR Options header, setting the Timeout to a value not greater than the timeout remaining for this flow in the Flow Table.",
      "ja": "oフロー表では、この流れのために残りのタイムアウトよりも大きくない値にタイムアウトを設定し、DSRのオプションヘッダにタイムアウトオプションを追加します。"
    },
    {
      "indent": 6,
      "text": "o Add a Source Route option after the Timeout option with the route to be used, as described in Section 8.1.3.",
      "ja": "8.1.3項で説明したように、O、使用するルートとタイムアウトオプションの後にソースルートオプションを追加します。"
    },
    {
      "indent": 6,
      "text": "o If the IP TTL is not equal to the TTL specified in the Flow Table, the source node MUST set a flag to indicate that this flow cannot be used as default.",
      "ja": "IP TTLは、フローテーブルで指定されたTTLに等しくない場合、O、ソースノードは、このフローをデフォルトとして使用できないことを示すためにフラグを設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "- If the route the node wishes to use for this packet has been established as a flow end-to-end and is not the default flow:",
      "ja": " - ノードが希望するルートがこのパケットに使用する場合は、フローのエンドツーエンドとして設立され、デフォルトの流れではありませんされています。"
    },
    {
      "indent": 6,
      "text": "o Add a DSR Flow State header, as described in Section 8.6.2.",
      "ja": "第8.6.2項で説明したように、O、DSRフロー状態ヘッダーを追加します。"
    },
    {
      "indent": 6,
      "text": "o Initialize the Hop Count field in the DSR Flow State header to 0.",
      "ja": "O 0にDSRフロー状態ヘッダーでホップカウントフィールドを初期化します。"
    },
    {
      "indent": 6,
      "text": "o The Flow ID field of the DSR Flow State header SHOULD be set to the Flow ID previously used for this route. If it is not, the steps for sending packets along never-before-established routes above MUST be followed in place of these.",
      "ja": "oをDSRフロー状態のヘッダのフローIDフィールドは、以前にこのルートに使用されるフローIDに設定されるべきです。そうでない場合は、上記の前に決して確立されたルートに沿ってパケットを送信するための手順は、これらの代わりに従わなければなりません。"
    },
    {
      "indent": 6,
      "text": "o If the next hop requires a network-layer acknowledgement for Route Maintenance, add a DSR Options header, as described in Section 8.1.2, and an Acknowledgement Request option, as described in Section 8.3.3.",
      "ja": "セクション8.3.3に記載したように、O次のホップは、セクション8.1.2、および確認応答要求オプションで説明したように、DSRオプションヘッダを追加し、ルートメンテナンス用のネットワーク層肯定応答を必要とする場合。"
    },
    {
      "indent": 6,
      "text": "o A DSR Options header SHOULD NOT be added to a packet, unless it is added to carry an Acknowledgement Request option, in which case:",
      "ja": "この場合には、肯定応答要求オプションを運ぶために添加されていない限り、O DSRオプションヘッダは、パケットに追加しないでください。"
    },
    {
      "indent": 9,
      "text": "+ A Source Route option in the DSR Options header SHOULD NOT be added.",
      "ja": "DSRオプションヘッダー内のソースルートオプションを+する追加しないでください。"
    },
    {
      "indent": 9,
      "text": "+ If a Source Route option in the DSR Options header is added, the steps for sending packets along flows not yet established end-to-end MUST be followed in place of these.",
      "ja": "+ DSRオプションヘッダ内の送信元経路オプションが追加された場合、まだエンドツーエンドを確立していない流れに沿ってパケットを送信するための手順は、これらの代わりに従わなければなりません。"
    },
    {
      "indent": 9,
      "text": "+ A Timeout option SHOULD NOT be added.",
      "ja": "+ Aタイムアウト]オプションを追加しないでください。"
    },
    {
      "indent": 9,
      "text": "+ If a Timeout option is added, it MUST specify a timeout not greater than the timeout remaining for this flow in the Flow Table.",
      "ja": "+タイムアウト]オプションが追加された場合、それはフローテーブルにこのフローのために残りのタイムアウトよりも大きくないタイムアウトを指定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the route the node wishes to use for this packet has been established as a flow end-to-end and is the current default flow:",
      "ja": " - ノードが希望するルートがこのパケットで使用する場合、フローエンド・ツー・エンドとして確立し、現在のデフォルトの流れであるれています。"
    },
    {
      "indent": 6,
      "text": "o If the IP TTL is not equal to the TTL specified in the Flow Table, the source node MUST follow the steps above for sending a packet along a non-default flow that has been established end-to-end in place of these steps.",
      "ja": "IP TTLは、フローテーブルで指定されたTTLに等しくない場合、O、ソースノードは、これらのステップの代わりに、エンド・ツー・エンドの確立されたデフォルト以外の流れに沿ってパケットを送信するための上記の手順に従わなければなりません。"
    },
    {
      "indent": 6,
      "text": "o If the next hop requires a network-layer acknowledgement for Route Maintenance, the sending node MUST add a DSR Options header and an Acknowledgement Request option, as described in Section 8.3.3. The sending node MUST NOT add any additional options to this header.",
      "ja": "次ホップがルートメンテナンスのためにネットワーク層肯定応答を必要とする場合、セクション8.3.3に記載したように、O、送信ノードは、DSRオプションヘッダと応答要求オプションを追加しなければなりません。送信ノードは、このヘッダに追加のオプションを追加してはなりません。"
    },
    {
      "indent": 6,
      "text": "o A DSR Options header SHOULD NOT be added, except as specified in the previous step. If one is added in a way inconsistent with the previous step, the source node MUST follow the steps above for sending a packet along a non-default flow that has been established end-to-end in place of these steps.",
      "ja": "O DSRオプションヘッダは、前のステップで指定されている以外は、追加しないでください。一つは前のステップと矛盾ように追加された場合、ソースノードは、これらのステップの代わりに、エンド・ツー・エンドの確立されたデフォルト以外の流れに沿ってパケットを送信するための上記の手順に従わなければなりません。"
    },
    {
      "indent": 0,
      "text": "8.6.2. Inserting a DSR Flow State Header",
      "section_title": true,
      "ja": "8.6.2。 DSRフロー状態ヘッダーを挿入"
    },
    {
      "indent": 3,
      "text": "A node originating a packet adds a DSR Flow State header to the packet, if necessary, to carry information needed by the routing protocol. A packet MUST NOT contain more than one DSR Flow State header. A DSR Flow State header is added to a packet by performing the following sequence of steps:",
      "ja": "パケットを発信するノードは、必要に応じて、ルーティングプロトコルが必要とする情報を運ぶために、パケットにDSRフロー状態のヘッダを付加します。パケットは、複数のDSRフロー状態ヘッダーを含めることはできません。 DSRフロー状態ヘッダは、以下の一連のステップを実行することによって、パケットに付加されます。"
    },
    {
      "indent": 3,
      "text": "- Insert a DSR Flow State header after the IP header and any Hop-by-Hop Options header that may already be in the packet, but before any other header that may be present.",
      "ja": " -  IPヘッダーと既にパケットであってもよく、任意のホップバイホップオプションヘッダの後DSRフロー状態ヘッダーを挿入するが、存在し得る任意の他のヘッダの前に。"
    },
    {
      "indent": 3,
      "text": "- Set the Next Header field of the DSR Flow State header to the Next Header field of the previous header (either an IP header or a Hop-by-Hop Options header).",
      "ja": " - 以前のヘッダ（IPヘッダまたはホップバイホップオプションヘッダのいずれか）の次ヘッダフィールドにDSRフロー状態ヘッダの次ヘッダフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "- Set the Flow (F) bit in the DSR Flow State header to 1.",
      "ja": " -  1にDSRフロー状態ヘッダー内の流れ（F）ビットを設定します。"
    },
    {
      "indent": 3,
      "text": "- Set the Protocol field of the IP header to the protocol number assigned for DSR (48).",
      "ja": " -  DSR（48）に割り当てられたプロトコル番号にIPヘッダのプロトコルフィールドを設定します。"
    },
    {
      "indent": 0,
      "text": "8.6.3. Receiving a Packet",
      "section_title": true,
      "ja": "8.6.3。パケットを受信しました"
    },
    {
      "indent": 3,
      "text": "This section describes processing only for packets that are sent to this processing node as the next-hop node; that is, when the MAC-layer destination address is the MAC address of this node. Otherwise, the process described in Sections 8.6.5 should be followed.",
      "ja": "このセクションでは、次ホップノードとして処理ノードに送信されるパケットのための処理を説明します。すなわち、MACレイヤ宛先アドレスがこのノードのMACアドレスである場合、です。そうでない場合は、セクション8.6.5に記載された方法に従うべきです。"
    },
    {
      "indent": 3,
      "text": "The flow along which a packet is being sent is considered to be in the Flow Table if the triple (IP Source Address, IP Destination Address, Flow ID) has an unexpired entry in this node's Flow Table.",
      "ja": "パケットが送信されて、それに沿って流れはト​​リプル（IPソースアドレス、IP宛先アドレス、フローID）がこのノードのフローテーブルで有効期限内のエントリを持っている場合はフローテーブルにあると考えられています。"
    },
    {
      "indent": 3,
      "text": "When a node using DSR flow state receives a packet, it MUST follow the following steps for processing:",
      "ja": "DSRフロー状態を使用して、ノードがパケットを受信すると、処理のために、以下の手順に従う必要があります。"
    },
    {
      "indent": 3,
      "text": "- If a DSR Flow State header is present, increment the Hop Count field.",
      "ja": " -  DSRフロー状態のヘッダが存在する場合、ホップカウントフィールドをインクリメントします。"
    },
    {
      "indent": 3,
      "text": "- In addition, if a DSR Flow State header is present, then if the triple (IP Source Address, IP Destination Address, Flow ID) is in this node's Automatic Route Shortening Table and the packet is listed in the entry, then the node MAY send a gratuitous Route Reply as described in Section 4.4, subject to the rate limiting specified therein. This gratuitous Route Reply gives the route by which the packet originally reached this node. Specifically, the node sending the gratuitous Route Reply constructs the route to return in the Route Reply as follows: o Let k = (packet Hop Count) - (table Hop Count), where packet Hop Count is the value of the Hop Count field in this received packet, and table Hop Count is the Hop Count value stored for this packet in the corresponding entry in this node's Automatic Route Shortening Table.",
      "ja": " -  DSRフロー状態ヘッダーが存在する場合はさらに、その後、トリプル（IPソースアドレス、IP宛先アドレス、フローID）は、このノードの自動ルート短縮表にある場合、パケットは、エントリにリストされ、その後、ノードは、MAYそこに指定されたレート制限を受けるセクション4.4に記載の無償ルート応答を送信します。この無償経路応答パケットが、もともとこのノードに到達したことにより、ルートを提供します。具体的には以下のように無償ルート応答を送信するノードは、ルート応答で返すようにルートを構築：OうK =（パケットホップカウント） - パケットのホップカウントがホップカウントフィールドの値である（表ホップカウント）これは、パケットを受信し、そしてテーブルホップカウントは、このノードの自動ルート短縮テーブル内の対応するエントリに、このパケットのために格納さホップカウント値です。"
    },
    {
      "indent": 6,
      "text": "o Copy the complete source route for this flow from the corresponding entry in the node's Flow Table.",
      "ja": "Oノードのフローテーブル内の対応するエントリからこの流れのための完全なソースルートをコピーします。"
    },
    {
      "indent": 6,
      "text": "o Remove from this route the k hops immediately preceding this node in the route, since these are the hops \"skipped over\" by the packet as recorded in the Automatic Route Shortening Table entry.",
      "ja": "これらはホップ自動ルート短縮テーブルのエントリに記録されているパケットが「スキップ」であるので、O、kは直ちに経路上でこのノードの前のホップこのルートから削除。"
    },
    {
      "indent": 3,
      "text": "- Process each of the DSR options within the DSR Options header in order:",
      "ja": " - プロセスの順序でDSRオプションヘッダ内のDSRの各オプション："
    },
    {
      "indent": 6,
      "text": "o On receiving a Pad1 or PadN option, skip over the option.",
      "ja": "Oパッド1またはパッドNオプションを受信すると、オプションをスキップ。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Route Request for which this node is the destination, remove the option and return a Route Reply as specified in Section 8.2.2.",
      "ja": "Oこのノードが宛先であるルート要求を受信すると、オプションを削除して、セクション8.2.2で指定されるようにルート応答を返します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a broadcast Route Request that this node has not previously seen for which this node is not the destination, append this node's incoming interface address to the Route Request, continue propagating the Route Request as specified in Section 8.2.2, pass the payload, if any, to the network layer, and stop processing.",
      "ja": "O、セクション8.2.2で指定されるようにルート要求を伝播し続け、ルート要求にこのノードの着信インターフェイスのアドレスを追加し、このノードが以前にこのノードが宛先されていない見ていないことを放送ルート要求を受信すると、ペイロードを渡しますもしあれば、ネットワーク層に、処理を停止します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Route Request that this node has previously seen for which this node is not the destination, discard the packet and stop processing.",
      "ja": "Oこのノードが以前にこのノードが宛先されていない見たことがルート要求を受信すると、パケットを破棄して処理を停止します。"
    },
    {
      "indent": 6,
      "text": "o On receiving any Route Request, add appropriate links to the Route Cache, as specified in Section 8.2.2.",
      "ja": "任意のルート要求を受信すると、O、8.2.2項で指定されるように、ルートキャッシュへの適切なリンクを追加します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Route Reply for which this node is the initiator, remove the Route Reply from the packet and process it as specified in Section 8.2.6.",
      "ja": "Oこのノードが開始されたルート応答を受信すると、セクション8.2.6で指定されるように経路がパケットおよびプロセスをから返信取り除きます。"
    },
    {
      "indent": 6,
      "text": "o On receiving any Route Reply, add appropriate links to the Route Cache, as specified in Section 8.2.6.",
      "ja": "任意の経路応答を受信すると、O、セクション8.2.6で指定されるように、ルートキャッシュへの適切なリンクを追加します。"
    },
    {
      "indent": 6,
      "text": "o On receiving any Route Error of type NODE_UNREACHABLE, remove appropriate links to the Route Cache, as specified in Section 8.3.5.",
      "ja": "O UNREACHABLE型NODEのいずれかの経路エラーを受信すると、セクション8.3.5で指定されるように、ルートキャッシュへの適切なリンクを削除します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Route Error of type NODE_UNREACHABLE that this node is the Error Destination Address of, remove the Route Error from the packet and process it as specified in Section 8.3.5. It also MUST stop originating packets along any flows using the link from Error Source Address to Unreachable Node, and it MAY remove from its Flow Table any flows using the link from Error Source Address to Unreachable Node.",
      "ja": "Oこのノードがのエラー宛先アドレスであることを型NODE_UNREACHABLEの経路エラーを受信すると、パケットから経路エラーを削除し、8.3.5で指定されたとして、それを処理します。また、エラー送信元アドレスから到達不能ノードへのリンクを使用して、任意の流れに沿ってパケットを発信するのを止めなければなりません、それが到達不能ノードへのエラー送信元アドレスからのリンクを使用して、そのフローテーブルからすべてのフローを削除することができます。"
    },
    {
      "indent": 6,
      "text": "o  On receiving a Route Error of type UNKNOWN_FLOW that this node\n   is not the Error Destination Address of, the node checks if the\n   Route Error corresponds to a flow in its Flow Table.  If it\n   does not, the node silently discards the Route Error;\n   otherwise, it forwards the packet to the expected previous hop\n   of the corresponding flow.  If Route Maintenance cannot confirm\n   the reachability of the previous hop, the node checks if the\n   network interface requires bidirectional links for operation.\n   If it does, the node silently discards the Route Error;\n   otherwise, it sends the Error as if it were originating it, as\n   described in Section 8.1.1.",
      "raw": true
    },
    {
      "indent": 6,
      "text": "o On receiving a Route Error of type UNKNOWN_FLOW that this node is the Error Destination Address of, remove the Route Error from the packet and mark the flow specified by the triple (Error Destination Address, Original IP Destination Address, Flow ID) as not having been established end-to-end.",
      "ja": "Oこのノードのエラー宛先アドレスであること型UNKNOWN_FLOWの経路エラーを受信すると、パケットから経路エラーを除去し、有していないように三重（エラー宛先アドレス、元のIP宛先アドレス、フローID）で指定されるフローをマークエンドツーエンドを確立されて。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Route Error of type DEFAULT_FLOW_UNKNOWN that this node is not the Error Destination Address of, the node checks if the Route Error corresponds to a flow in its Default Flow Table. If it does not, the node silently discards the Route Error; otherwise, it forwards the packet to the expected previous hop of the corresponding flow. If Route Maintenance cannot confirm the reachability of the previous hop, the node checks if the network interface requires bidirectional links for operation. If it does, the node silently discards the Route Error; otherwise, it sends the Error as if it were originating it, as described in Section 8.1.1.",
      "ja": "O経路エラーがデフォルトフローテーブル内の流れに対応する場合、このノードは、ノードのチェックのエラー宛先アドレスがないこと型DEFAULT_FLOW_UNKNOWNの経路エラーを受信します。そうでない場合は、ノードは静かに経路エラーを破棄する。それ以外の場合は、対応するフローの予想前のホップにパケットを転送します。ルートのメンテナンスが前のホップの到達可能性を確認できない場合は、ノードのチェックは、ネットワークインターフェイスは操作のための双方向リンクを必要とする場合。それがない場合、ノードは静かに経路エラーを破棄する。セクション8.1.1で説明したように、それは、それを発信したかのように、それ以外の場合はエラーを送信します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Route Error of type DEFAULT_FLOW_UNKNOWN that this node is the Error Destination Address of, remove the Route Error from the packet and mark the default flow between the Error Destination Address and the Original IP Destination Address as not having been established end-to-end.",
      "ja": "エンドツーエンドを確立されていないと、パケットから経路エラーを削除し、エラー宛先アドレスとオリジナルIP宛先アドレス間のデフォルトの流れをマークし、このノードがのエラー宛先アドレスであることを型DEFAULT_FLOW_UNKNOWNの経路エラーを受信すると、O -終わり。"
    },
    {
      "indent": 6,
      "text": "o On receiving an Acknowledgement Request option, the receiving node removes the Acknowledgement Request option and replies to the previous hop with an Acknowledgement option. If the previous hop cannot be determined, the Acknowledgement Request option is discarded, and processing continues.",
      "ja": "O肯定応答要求オプションを受信すると、受信ノードは、応答要求オプションを削除し、確認応答オプションを使用して、前のホップに応答します。前のホップが決定できない場合は、承認要求オプションを破棄し、処理を続行しています。"
    },
    {
      "indent": 6,
      "text": "o On receiving an Acknowledgement option, the receiving node removes the Acknowledgement option and processes it.",
      "ja": "O肯定応答オプションを受信すると、受信ノードは、肯定応答オプションを削除し、それを処理します。"
    },
    {
      "indent": 6,
      "text": "o On receiving any Acknowledgement option, add the appropriate link to the Route Cache, as specified in Section 8.1.4.",
      "ja": "Oも確認応答オプションを受信すると、セクション8.1.4で指定されているように、ルートキャッシュに適切なリンクを追加します。"
    },
    {
      "indent": 6,
      "text": "o On receiving any Source Route option, add appropriate links to the Route Cache, as specified in Section 8.1.4.",
      "ja": "任意のソースルートオプションを受信すると、O、セクション8.1.4で指定されるように、ルートキャッシュへの適切なリンクを追加します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Source Route option, if no DSR Flow State header is present, if the flow this packet is being sent along is in the Flow Table, or if no Timeout option preceded the Source Route option in this DSR Options header, process it as specified in Section 8.1.4. Stop processing this packet unless the last address in the Source Route option is an address of this node.",
      "ja": "Oを、このパケットに沿って送信されているフローはフローテーブルにある場合、何DSRフロー状態のヘッダが存在しない場合、ソースルートオプションを受信する、またはタイムアウトのオプションは、このDSRオプションヘッダ内の送信元経路オプションを先行していない場合、プロセスセクション8.1.4で指定されています。ソースルートオプションの最後のアドレスがこのノードのアドレスである場合を除き、このパケットを処理を停止します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Source Route option in a packet with a DSR Flow State header, if the Flow ID specified in the DSR Flow State header is not in the Flow Table, add the flow to the Flow Table, setting the Timeout value to a value not greater than the Timeout field of the Timeout option in this header. If no Timeout option preceded the Source Route option in this header, the flow MUST NOT be added to the Flow Table.",
      "ja": "O DSRフロー状態ヘッダで指定されたフローIDは、フローテーブル内にない場合、DSRフロー状態ヘッダを持つパケットの送信元経路オプションを受信すると、値にタイムアウト値を設定し、フローテーブルにフローを追加このヘッダ内のタイムアウト]オプションのタイムアウト]フィールドよりも大きくありません。タイムアウトオプションは、このヘッダにソースルートオプションを先行していない場合は、フローはフローテーブルに追加してはなりません。"
    },
    {
      "indent": 9,
      "text": "If the Flow ID is odd and larger than any unexpired, odd Flow IDs for this (IP Source Address, IP Destination Address), it is set to be default in the Default Flow ID Table.",
      "ja": "フローIDが奇数と任意の有効期限が切れていないよりも大きい場合は、この（IPソースアドレス、IP宛先アドレス）のための奇妙なフローIDは、デフォルトのフローIDの表のデフォルトに設定されています。"
    },
    {
      "indent": 9,
      "text": "Then process the Route option as specified in Section 8.1.4. Stop processing this packet unless the last address in the Source Route option is an address of this node.",
      "ja": "セクション8.1.4で指定されたその後のルートオプションを処理します。ソースルートオプションの最後のアドレスがこのノードのアドレスである場合を除き、このパケットを処理を停止します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Timeout option, check if this packet contains a DSR Flow State header. If this packet does not contain a DSR Flow State header, discard the DSR option. Otherwise, record the Timeout value in the option for future reference. The value recorded SHOULD be discarded when the node has finished processing this DSR Options header. If the flow that this packet is being sent along is in the Flow Table, it MAY set the flow to time out no more than Timeout seconds in the future.",
      "ja": "このパケットがDSRフロー状態ヘッダーが含まれている場合は、Oタイムアウト]オプションを受信すると、確認してください。このパケットがDSRフロー状態ヘッダーが含まれていない場合は、DSRオプションを破棄。それ以外の場合は、今後の参考のためにオプションでタイムアウト値を記録します。ノードがこのDSRオプションヘッダの処理を終了したときに記録された値が廃棄されるべきです。このパケットが一緒に送信されていることフローはフローテーブルにある場合、それは将来的にタイムアウト秒以下でタイムアウトしないようにフローを設定することができます。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Destination and Flow ID option, if the IP Destination Address is not an address of this node, forward the packet according to the Flow ID, as described in Section 8.6.4, and stop processing this packet.",
      "ja": "O IP宛先アドレスが本ノードのアドレスでない場合、宛先およびフローID・オプションを受信すると、セクション8.6.4に記載したように、フローIDに応じてパケットを転送し、このパケットの処理を停止します。"
    },
    {
      "indent": 6,
      "text": "o On receiving a Destination and Flow ID option, if the IP Destination Address is an address of this node, set the IP Destination Address to the New IP Destination Address specified in the option and set the Flow ID to the New Flow Identifier. Then remove the Destination and Flow ID option from the packet and continue processing.",
      "ja": "O IP宛先アドレスがこのノードのアドレスがある場合、デスティネーションおよびフローIDオプションを受信すると、オプションで指定された新しいIP宛先アドレスにIP宛先アドレスを設定し、新しいフロー識別子にフローIDを設定します。そして、パケットから宛先およびフローIDオプションを削除して処理を続行します。"
    },
    {
      "indent": 3,
      "text": "- If the IP Destination Address is an address of this node, remove the DSR Options header, if any, pass the packet up the network stack, and stop processing.",
      "ja": " -  IP宛先アドレスが本ノードのアドレスである場合、もしあれば、ネットワークスタックアップパケットを渡し、処理を停止し、DSRオプションヘッダを削除します。"
    },
    {
      "indent": 3,
      "text": "- If there is still a DSR Options header containing no options, remove the DSR Options header.",
      "ja": " - まだオプションを含まないDSRオプションヘッダが存在する場合、DSRオプションヘッダを削除します。"
    },
    {
      "indent": 3,
      "text": "- If there is still a DSR Flow State header, forward the packet according to the Flow ID, as described in Section 8.6.4.",
      "ja": " -  DSRフロー状態ヘッダが依然として存在する場合、セクション8.6.4に記載したように、フローIDに応じてパケットを転送します。"
    },
    {
      "indent": 3,
      "text": "- If there is neither a DSR Options header nor a DSR Flow State header, but there is an entry in the Default Flow Table for the (IP Source Address, IP Destination Address) pair:",
      "ja": " -  DSRオプションヘッダやDSRフロー状態ヘッダでもないがあるが、（IPソースアドレス、IP宛先アドレス）ペアのデフォルトフローテーブルにエントリがある場合："
    },
    {
      "indent": 6,
      "text": "o If the IP TTL is not equal to the TTL expected in the Flow Table, insert a DSR Flow State header, setting the Hop Count equal to the Hop Count of this node, and the Flow ID equal to the default Flow ID found in the Default Flow Table, and forward this packet according to the Flow ID, as described in Section 8.6.4.",
      "ja": "IP TTLは、フローテーブルに期待TTLに等しくない場合、O、このノードのホップカウントに等しいホップカウントを設定し、DSRフロー状態ヘッダーを挿入し、デフォルトフローIDに等しいフローIDが中に見出さフローテーブルデフォルト、およびセクション8.6.4に記載したように、フローIDに従ってこのパケットを転送します。"
    },
    {
      "indent": 6,
      "text": "o Otherwise, follow the steps for forwarding the packet using Flow IDs described in Section 8.6.4, but taking the Flow ID to be the default Flow ID found in the Default Flow Table.",
      "ja": "Oそれ以外の場合は、8.6.4項で説明したフローIDを使用してパケットを転送しますが、デフォルトフローテーブルにあるデフォルトのフローIDであることをフローIDを取るための手順に従ってください。"
    },
    {
      "indent": 3,
      "text": "- If there is no DSR Options header and no DSR Flow State header and no default flow can be found, the node returns a Route Error of type DEFAULT_FLOW_UNKNOWN to the IP Source Address, specifying the IP Destination Address as the Original IP Destination in the type-specific field.",
      "ja": " - 何DSRオプションヘッダなしDSRフロー状態ヘッダーなしデフォルト流れていますがない場合、ノードがタイプでオリジナルIP宛先としてIP宛先アドレスを指定して、送信元IPアドレスへの型DEFAULT_FLOW_UNKNOWNの経路エラーを返します。固有のフィールド。"
    },
    {
      "indent": 0,
      "text": "8.6.4. Forwarding a Packet Using Flow IDs",
      "section_title": true,
      "ja": "8.6.4。フローIDを使ってパケットを転送します"
    },
    {
      "indent": 3,
      "text": "To forward a packet using Flow IDs, a node MUST follow the following sequence of steps:",
      "ja": "フローのIDを使用してパケットを転送するには、ノードは、次の一連のステップに従う必要があります。"
    },
    {
      "indent": 3,
      "text": "- If the triple (IP Source Address, IP Destination Address, Flow ID) is not in the Flow Table, return a Route Error of type UNKNOWN_FLOW.",
      "ja": " - トリプルた場合（IPソースアドレス、IP宛先アドレス、フローIDは）型UNKNOWN_FLOWの経路エラーを返し、フロー表ではありません。"
    },
    {
      "indent": 3,
      "text": "- If a network-layer acknowledgement is required for Route Maintenance for the next hop, the node MUST include an Acknowledgement Request option as specified in Section 8.3.3. If no DSR Options header is in the packet in which the Acknowledgement Request option is to be added, it MUST be included, as described in Section 8.1.2, except that it MUST be added after the DSR Flow State header, if one is present.",
      "ja": " - ネットワーク層確認応答が次のホップの経路維持のために必要とされる場合、セクション8.3.3で指定されるように、ノードは、肯定応答要求オプションを含まなければなりません。何DSRオプションヘッダは、応答要求オプションを追加するセクション8.1.2で説明したように、それが1が存在する場合、それは、DSRフロー状態のヘッダの後に追加されなければならないことを除いて、含まれなければならないパケットでない場合。"
    },
    {
      "indent": 3,
      "text": "- Attempt to transmit this packet to the next hop as specified in the Flow Table, performing Route Maintenance to detect broken routes.",
      "ja": " - フローテーブルに指定されている次のホップにこのパケットを送信しようとすると、壊れたルートを検出するためのルートのメンテナンスを行います。"
    },
    {
      "indent": 0,
      "text": "8.6.5. Promiscuously Receiving a Packet",
      "section_title": true,
      "ja": "8.6.5。無差別パケットを受信しました"
    },
    {
      "indent": 3,
      "text": "This section describes processing only for packets that have MAC destinations other than this processing node. Otherwise, the process described in Section 8.6.3 should be followed.",
      "ja": "このセクションでは、この処理ノード以外のMACの宛先を持つパケット処理を説明するものです。それ以外の場合は、セクション8.6.3に記載されているプロセスに従ってください。"
    },
    {
      "indent": 3,
      "text": "When a node using DSR flow state promiscuously overhears a packet, it SHOULD follow the following steps for processing:",
      "ja": "無差別DSRフロー状態を使用して、ノードがパケットを傍受するとき、それは、処理のために次の手順に従うべきです。"
    },
    {
      "indent": 3,
      "text": "- If the packet contains a DSR Flow State header, and if the triple (IP Source Address, IP Destination Address, Flow ID) is in the Flow Table and the Hop Count is less than the Hop Count in the flow's entry, the node MAY retain the packet in the Automatic Route Shortening Table. If it can be determined that this Flow ID has been recently used, the node SHOULD retain the packet in the Automatic Route Shortening Table.",
      "ja": " - パケットがDSRフロー状態ヘッダーが含まれており、三重の場合（IPソースアドレス、IP宛先アドレス、フローID）は、ノードMAYフローテーブルにあり、ホップカウントはフローのエントリ内のホップカウントよりも小さい場合自動ルート短縮表にパケットを保持しています。それは、このフローIDは、最近使用されていると判断できる場合、ノードは自動ルート短縮表にパケットを保持しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- If the packet contains neither a DSR Flow State header nor a Source Route option and a Default Flow ID can be found in the Default Flow Table for the (IP Source Address, IP Destination Address), and if the IP TTL is greater than the TTL in the Flow Table for the default flow, the node MAY retain the packet in the Automatic Route Shortening Table. If it can be determined that this Flow ID has been used recently, the node SHOULD retain the packet in the Automatic Route Shortening Table.",
      "ja": " - パケットがDSRフロー状態ヘッダやソースルートオプションとデフォルトのフローIDは、（IPソースアドレス、IP宛先アドレス）のデフォルトフローテーブルで見つけることができ、およびIP TTLがより大きい場合もないが含まれている場合デフォルトのフローのためのフロー表でTTL、ノードは自動ルート短縮表にパケットを保持することができます。それは、このフローIDは、最近使用されていると判断できる場合、ノードは自動ルート短縮表にパケットを保持しなければなりません。"
    },
    {
      "indent": 0,
      "text": "8.6.6. Operation Where the Layer below DSR Decreases the IP TTL Non-uniformly",
      "ja": "8.6.6。 DSR下の層は、IP TTL非均一を下げ操作"
    },
    {
      "indent": 3,
      "text": "Some nodes may use an IP tunnel as a DSR hop. If different packets sent along this IP tunnel can take different routes, the reduction in IP TTL across this link may be different for different packets. This prevents the Automatic Route Shortening and Loop Detection functionality from working properly when used in conjunction with default routes.",
      "ja": "いくつかのノードは、DSRホップとしてIPトンネルを使用することができます。このIPトンネルに沿って送信された異なるパケットは異なる経路を取ることができる場合は、このリンクを介してIP TTLの減少は、異なるパケットについて異なっていてもよいです。これがデフォルトルートと組み合わせて使用​​すると正しく動作してから自動ルートの短縮やループ検出機能を防ぎます。"
    },
    {
      "indent": 3,
      "text": "Nodes forwarding packets without a Source Route option onto a link with unpredictable TTL changes MUST ensure that a DSR Flow State header is present, indicating the correct Hop Count and Flow ID.",
      "ja": "予測不可能なTTLの変更とのリンク上にソースルートオプションを使用せずにパケットを転送するノードが正しいホップカウント及びフローIDを示し、DSRフロー状態のヘッダが存在することを確実にしなければなりません。"
    },
    {
      "indent": 0,
      "text": "8.6.7. Salvage Interactions with DSR",
      "section_title": true,
      "ja": "8.6.7。 DSRとサルベージの相互作用"
    },
    {
      "indent": 3,
      "text": "Nodes salvaging packets MUST remove the DSR Flow State header, if present.",
      "ja": "存在する場合、DSRフロー状態ヘッダを削除する必要があり、パケットをサルベージノード。"
    },
    {
      "indent": 3,
      "text": "Anytime this document refers to the Salvage field in the Source Route option, packets without a Source Route option are considered to have the value zero in the Salvage field.",
      "ja": "いつでもこのドキュメントは、ソースルートオプションでサルベージフィールドを参照し、ソースルートオプションを指定せずにパケットがサルベージフィールドに値ゼロを有すると考えられます。"
    },
    {
      "indent": 0,
      "text": "9. Protocol Constants and Configuration Variables",
      "section_title": true,
      "ja": "9.プロトコル定数と構成変数"
    },
    {
      "indent": 3,
      "text": "Any DSR implementation MUST support the following configuration variables and MUST support a mechanism enabling the value of these variables to be modified by system management. The specific variable names are used for demonstration purposes only, and an implementation is not required to use these names for the configuration variables, so long as the external behavior of the implementation is consistent with that described in this document.",
      "ja": "任意DSR実装は、次の設定変数をサポートしなければならないと、システム管理によって修飾されるこれらの変数の値を可能にするメカニズムをサポートしなければなりません。特定の変数名は唯一のデモの目的のために使用され、実装は限り実装の外部の振舞いが本書に記載されたものと一致しているとして、設定変数のためにこれらの名前を使用する必要はありません。"
    },
    {
      "indent": 3,
      "text": "For each configuration variable below, the default value is specified to simplify configuration. In particular, the default values given below are chosen for a DSR network running over 2 Mbps IEEE 802.11 network interfaces using the Distributed Coordination Function (DCF) MAC protocol with RTS and CTS [IEEE80211, BROCH98].",
      "ja": "以下の各設定変数の場合、デフォルト値は、構成を簡素化するために指定されています。具体的には、下記のデフォルト値は、RTSとCTS [IEEE80211、BROCH98]と分散協調機能（DCF）MACプロトコルを使用して2上MbpsのIEEE 802.11ネットワークインターフェイスを実行DSRネットワークのために選択されます。"
    },
    {
      "indent": 6,
      "text": "DiscoveryHopLimit 255 hops",
      "ja": "DiscoveryHopLimit 255ホップ"
    },
    {
      "indent": 6,
      "text": "BroadcastJitter 10 milliseconds",
      "ja": "BroadcastJitter 10ミリ秒"
    },
    {
      "indent": 6,
      "text": "RouteCacheTimeout 300 seconds",
      "ja": "ルートキャッシュタイムアウト300秒"
    },
    {
      "indent": 6,
      "text": "SendBufferTimeout 30 seconds",
      "ja": "SendBufferTimeout 30秒"
    },
    {
      "indent": 6,
      "text": "RequestTableSize 64 nodes RequestTableIds 16 identifiers MaxRequestRexmt 16 retransmissions MaxRequestPeriod 10 seconds RequestPeriod 500 milliseconds NonpropRequestTimeout 30 milliseconds",
      "ja": "RequestTableSize 64個のノードRequestTableIds 16の識別子は16の再送が10秒30ミリ秒NonpropRequestTimeout 500ミリ秒RequestPeriod MaxRequestPeriod MaxRequestRexmt"
    },
    {
      "indent": 6,
      "text": "RexmtBufferSize 50 packets",
      "ja": "50個のパケットをRexmtBufferSize"
    },
    {
      "indent": 6,
      "text": "MaintHoldoffTime 250 milliseconds",
      "ja": "250 millicekantsをMaintoltuatime"
    },
    {
      "indent": 6,
      "text": "MaxMaintRexmt 2 retransmissions",
      "ja": "MaxMaintRexmt 2放送"
    },
    {
      "indent": 6,
      "text": "TryPassiveAcks 1 attempt PassiveAckTimeout 100 milliseconds",
      "ja": "100ミリ秒PassiveAckTimeout TryPassiveAcks 1つの試み"
    },
    {
      "indent": 6,
      "text": "GratReplyHoldoff 1 second",
      "ja": "GratReplyHoldoff 1秒"
    },
    {
      "indent": 3,
      "text": "In addition, the following protocol constant MUST be supported by any implementation of the DSR protocol:",
      "ja": "加えて、以下のプロトコル定数はDSRプロトコルの任意の実装によってサポートされなければなりません。"
    },
    {
      "indent": 6,
      "text": "MAX_SALVAGE_COUNT 15 salvages",
      "ja": "MAX_SALVAGE_COUNT 15サルベージ"
    },
    {
      "indent": 0,
      "text": "10. IANA Considerations",
      "section_title": true,
      "ja": "10. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document specifies the DSR Options header and DSR Flow State header, for which the IP protocol number 48 has been assigned. A single IP protocol number can be used for both header types, since they can be distinguished by the Flow State Header (F) bit in each header.",
      "ja": "この文書では、IPプロトコル番号48が割り当てられているためDSRのオプションヘッダとDSRフロー状態ヘッダーを指定します。それらは各ヘッダ内のフロー状態のヘッダ（F）ビットによって識別することができるので、単一のIPプロトコル番号は、両方のヘッダ・タイプに使用することができます。"
    },
    {
      "indent": 3,
      "text": "In addition, this document proposes use of the value \"No Next Header\" (originally defined for use in IPv6 [RFC2460]) within an IPv4 packet, to indicate that no further header follows a DSR Options header.",
      "ja": "また、この文書は、さらなるヘッダがDSRオプションヘッダに続くないことを示すために、IPv4パケット内の（本来のIPv6での使用のために定義された[RFC2460]）値が「いいえ次ヘッダ」の使用を提案しています。"
    },
    {
      "indent": 3,
      "text": "Finally, this document introduces a number of DSR options for use in the DSR Options header, and additional new DSR options may be defined in the future. Each of these options requires a unique Option Type value, the most significant 3 bits (that is, Option Type & 0xE0) encoded as defined in Section 6.1. It is necessary only that each Option Type value be unique, not that they be unique in the remaining 5 bits of the value after these 3 most significant bits.",
      "ja": "最後に、この文書はDSRオプションヘッダで使用するためのDSRオプションの数を導入し、そして追加の新しいDSRのオプションは、将来に定義されてもよいです。これらのオプションのそれぞれは、固有のオプションタイプ値、セクション6.1で定義されるように符号化された最上位3ビット（すなわち、オプションタイプ＆0xE0となっ）を必要とします。彼らがこれらの3つの最上位ビット後の値の残りの5ビットで一意ではないことを、各オプションタイプの値が一意であることのみが必要です。"
    },
    {
      "indent": 3,
      "text": "Two registries (DSR Protocol Options and DSR Protocol Route Error Types) have been created and contain the initial registrations. Assignment of new values for DSR options will be by Expert Review [RFC2434], with the authors of this document serving as the Designated Experts.",
      "ja": "二つのレジストリ（DSRプロトコル・オプションおよびDSRプロトコルルート・エラー・タイプ）が作成され、初期登録を含まれています。 DSRオプションの新しい値の割り当ては、指定の専門家として、この文書の執筆者で、専門家レビュー[RFC2434]によるであろう。"
    },
    {
      "indent": 0,
      "text": "11. Security Considerations",
      "section_title": true,
      "ja": "11.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "This document does not specifically address security concerns. This document does assume that all nodes participating in the DSR protocol do so in good faith and without malicious intent to corrupt the routing ability of the network.",
      "ja": "この文書では、特に安全保障上の懸念に対応していません。この文書では、DSRプロトコルに参加するすべてのノードが誠意を持って、ネットワークの腐敗したルーティング能力に悪意をせずにそれを行うことを前提としていません。"
    },
    {
      "indent": 3,
      "text": "Depending on the threat model, a number of different mechanisms can be used to secure DSR. For example, in an environment where node compromise is unrealistic and where all the nodes participating in the DSR protocol share a common goal that motivates their participation in the protocol, the communications between the nodes can be encrypted at the physical channel or link layer to prevent attack by outsiders. Cryptographic approaches, such as that provided by Ariadne [HU02] or Secure Routing Protocol (SRP) [PAPADIMITRATOS02], can resist stronger attacks.",
      "ja": "脅威のモデルに応じて、異なるメカニズムの数は、DSRを保護するために使用することができます。例えば、ノードの妥協が非現実的と場所DSRプロトコル共有にプロトコルへの参加の動機共通の目標に参加するすべてのノードである環境では、ノード間の通信を防止するために、物理チャネルまたはリンク層で暗号化することができます部外者による攻撃。そのようなアリアドネ[HU02]またはセキュアルーティングプロトコル（SRP）PAPADIMITRATOS02]、によって提供されるような暗号化のアプローチは、より強力な攻撃に耐えることができます。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Link-MaxLife Cache Description",
      "ja": "付録A.リンクMaxLifeキャッシュ説明"
    },
    {
      "indent": 3,
      "text": "As guidance to implementers of DSR, the description below outlines the operation of a possible implementation of a Route Cache for DSR that has been shown to outperform other caches studied in detailed simulations. Use of this design for the Route Cache is recommended in implementations of DSR.",
      "ja": "DSRの実装にガイダンスとして、以下の説明は、詳細なシミュレーションで検討他のキャッシュを上回ることが示されたDSRのルートキャッシュの可能な実装の動作を概説します。ルートキャッシュのためのこの設計の使用は、DSRの実装で推奨されます。"
    },
    {
      "indent": 3,
      "text": "This cache, called \"Link-MaxLife\" [HU00], is a link cache, in that each individual link (hop) in the routes returned in Route Reply packets (or otherwise learned from the header of overhead packets) is added to a unified graph data structure of this node's current view of the network topology, as described in Section 4.1. To search for a route in this cache to some destination node, the sending node uses a graph search algorithm, such as the well-known Dijkstra's shortest-path algorithm, to find the current best path through the graph to the destination node.",
      "ja": "「リンクMaxLife」と呼ばれるこのキャッシュ、[HU00]、経路内の個々のリンク（ホップ）という点で、リンクキャッシュであるがルートで返されるパケットを返信する（またはそうでなければオーバーヘッドパケットのヘッダから学習）を統一に添加しますセクション4.1で説明したように、ネットワークトポロジ、このノードの現在のビューのグラフデータ構造。いくつかの宛先ノードへのこのキャッシュでのルートを検索するには、送信ノードは、宛先ノードへのグラフを通る電流の最適なパスを見つけるために、そのようなよく知られているダイクストラの最短経路アルゴリズムとして、グラフ探索アルゴリズムを使用しています。"
    },
    {
      "indent": 3,
      "text": "The Link-MaxLife form of link cache is adaptive in that each link in the cache has a timeout that is determined dynamically by the caching node according to its observed past behavior of the two nodes at the ends of the link; in addition, when selecting a route for a packet being sent to some destination, among cached routes of equal length (number of hops) to that destination, Link-MaxLife selects the route with the longest expected lifetime (highest minimum timeout of any link in the route).",
      "ja": "リンク・キャッシュのリンクMaxLife形態は、キャッシュ内の各リンクは、リンクの両端における2つのノードのその観察過去の行動に応じてキャッシングノードによって動的に決定されたタイムアウトを有することで適応的です。パケットのルートを選択する際に加えて、その宛先に等しい長さ（ホップ数）のキャッシュされた経路のうち、いくつかの宛先に送信され、リンクmaxlifeが（任意のリンクで最高の最小タイムアウトを最長の予想寿命を有する経路を選択しますルート）。"
    },
    {
      "indent": 3,
      "text": "Specifically, in Link-MaxLife, a link's timeout in the Route Cache is chosen according to a \"Stability Table\" maintained by the caching node. Each entry in a node's Stability Table records the address of another node and a factor representing the perceived \"stability\" of this node. The stability of each other node in a node's Stability Table is initialized to InitStability. When a link from the Route Cache is used in routing a packet originated or salvaged by that node, the stability metric for each of the two endpoint nodes of that link is incremented by the amount of time since that link was last used, multiplied by StabilityIncrFactor (StabilityIncrFactor >= 1); when a link is observed to break and the link is thus removed from the Route Cache, the stability metric for each of the two endpoint nodes of that link is multiplied by StabilityDecrFactor (StabilityDecrFactor < 1).",
      "ja": "具体的には、リンクMaxLifeに、ルートキャッシュ内のリンクのタイムアウトがキャッシングノードによって維持される「安定表」に従って選択されます。ノードの安定性表の各エントリには、別のノードと、このノードの知覚「安定性」を表す係数のアドレスを記録します。ノードの安定テーブル内の各他のノードの安定性はInitStabilityに初期化されます。ルートキャッシュからのリンクは、パケットのルーティングに使用されるとき発信又はそのノードによって救済そのリンクが最後に使用されたので、そのリンクの2つの端点のノードのそれぞれの安定性メトリックは、時間の量だけインクリメントされ、StabilityIncrFactor乗じ（StabilityIncrFactor> = 1）。リンクが壊れることが観察され、リンクは、このようにルートキャッシュから削除された場合、そのリンクの2つの端点のノードのそれぞれの安定性メトリックはStabilityDecrFactor乗算され（StabilityDecrFactor <1）。"
    },
    {
      "indent": 3,
      "text": "When a node adds a new link to its Route Cache, the node assigns a lifetime for that link in the Cache equal to the stability of the less \"stable\" of the two endpoint nodes for the link, except that a link is not allowed to be given a lifetime less than MinLifetime. When a link is used in a route chosen for a packet originated or salvaged by this node, the link's lifetime is set to be at least",
      "ja": "ノードは、そのルートキャッシュに新しいリンクを追加すると、リンクをさせていないことを除いて、ノードは、リンクのための2つのエンドポイントノードの以下「安定」の安定性に等しいキャッシュ内のリンクの有効期間を割り当てますMinLifetime未満寿命を与えられます。リンクは、パケットのために選択された経路で使用される場合に発信するか、このノードによって救済、リンクの寿命は、少なくとも設定されています"
    },
    {
      "indent": 3,
      "text": "UseExtends into the future; if the lifetime of that link in the Route Cache is already further into the future, the lifetime remains unchanged.",
      "ja": "将来へのUseExtends。ルートキャッシュ内のリンクの有効期間は、将来へのさらなるすでにある場合、寿命は変わりません。"
    },
    {
      "indent": 3,
      "text": "When a node using Link-MaxLife selects a route from its Route Cache for a packet being originated or salvaged by this node, it selects the shortest-length route that has the longest expected lifetime (highest minimum timeout of any link in the route), as opposed to simply selecting an arbitrary route of shortest length.",
      "ja": "リンクMaxLifeを使用してノードがこのノードによって発信またはサルベージされるパケットのために、そのルートキャッシュからの経路を選択すると、それは、最長の予想寿命（経路内の任意のリンクの最高最低タイムアウト）が最短長さの経路を選択します単に最短長さの任意の経路を選択するのではなく。"
    },
    {
      "indent": 3,
      "text": "The following configuration variables are used in the description of Link-MaxLife above. The specific variable names are used for demonstration purposes only, and an implementation is not required to use these names for these configuration variables. For each configuration variable below, the default value is specified to simplify configuration. In particular, the default values given below are chosen for a DSR network where nodes move at relative velocities between 12 and 25 seconds per wireless transmission radius.",
      "ja": "次の構成変数は、上記のリンクMaxLifeの説明で使用されています。特定の変数名は唯一のデモの目的のために使用され、実装はこれらの構成変数のためにこれらの名前を使用する必要はありません。以下の各設定変数の場合、デフォルト値は、構成を簡素化するために指定されています。具体的には、下記のデフォルト値は、ノードが無線伝送半径当たり12と25秒との間の相対速度で移動DSRネットワークのために選択されます。"
    },
    {
      "indent": 6,
      "text": "InitStability 25 seconds StabilityIncrFactor 4 StabilityDecrFactor 0.5",
      "ja": "InitStability 25秒StabilityIncrFactor 4 StabilityDecrFactor 0.5"
    },
    {
      "indent": 6,
      "text": "MinLifetime 1 second UseExtends 120 seconds",
      "ja": "MinLifetime 1秒UseExtends 120秒"
    },
    {
      "indent": 0,
      "text": "Appendix B. Location of DSR in the ISO Network Reference Model",
      "ja": "ISOネットワークリファレンスモデルでDSRの付録B.場所"
    },
    {
      "indent": 3,
      "text": "When designing DSR, we had to determine at what layer within the protocol hierarchy to implement ad hoc network routing. We considered two different options: routing at the link layer (ISO layer 2) and routing at the network layer (ISO layer 3). Originally, we opted to route at the link layer for several reasons:",
      "ja": "DSRを設計するとき、私たちは、アドホックネットワークのルーティングを実装するためのプロトコル階層内のどの層で決定しなければなりませんでした。我々は2つの異なるオプションを検討し：ネットワーク層（ISO層3）のリンク層（ISO層2）とルーティングでルーティングします。もともと、私たちはいくつかの理由のためのリンク層でルーティングするように選択しました："
    },
    {
      "indent": 3,
      "text": "- Pragmatically, running the DSR protocol at the link layer maximizes the number of mobile nodes that can participate in ad hoc networks. For example, the protocol can route equally well between IPv4 [RFC791], IPv6 [RFC2460], and IPX [TURNER90] nodes.",
      "ja": " - 実践的、リンク層でDSRプロトコルを実行すると、アドホックネットワークに参加することができるモバイルノードの数を最大にします。例えば、プロトコルは、IPv4 [RFC791]のIPv6 [RFC2460]、およびIPXは[TURNER90】ノード間の等しく良好経路缶。"
    },
    {
      "indent": 3,
      "text": "- Historically [JOHNSON94, JOHNSON96a], DSR grew from our contemplation of a multi-hop propagating version of the Internet's Address Resolution Protocol (ARP) [RFC826], as well as from the routing mechanism used in IEEE 802 source routing bridges [PERLMAN92]. These are layer 2 protocols.",
      "ja": " -  DSRは、インターネットのアドレス解決プロトコル（ARP）[RFC826]、ならびにIEEE 802ソースルーティングブリッジに使用されるルーティング機構から[PERLMAN92]のマルチホップ伝搬バージョンの我々の熟考から成長した歴史[JOHNSON94、JOHNSON96a] 。これらは、レイヤ2つのプロトコルです。"
    },
    {
      "indent": 3,
      "text": "- Technically, we designed DSR to be simple enough that it could be implemented directly in the firmware inside wireless network interface cards [JOHNSON94, JOHNSON96a], well below the layer 3 software within a mobile node. We see great potential in this for DSR running inside a cloud of mobile nodes around a fixed base station, where DSR would act to transparently extend the coverage range to these nodes. Mobile nodes that would otherwise be unable to communicate with the base station due to factors such as distance, fading, or local interference sources could then reach the base station through their peers.",
      "ja": " - 技術的に、我々は、DSRは、それがモバイルノード内の井戸層3ソフトウェアの下に、無線ネットワークインターフェイスカード[JOHNSON94、JOHNSON96a]内部ファームウェアに直接実装することができることを十分に単純であるように設計しました。私たちは、DSRはDSRが透過的にこれらのノードへのカバレッジ範囲を拡張するために作用する固定基地局、周りの移動ノードのクラウド内で実行されているため、この中で大きな可能性を参照してください。そうでなければこのような距離などの要因に基地局と通信することができないモバイルノード、フェージング、またはローカル干渉源は、次いで、それらのピアを介して基地局に達する可能性があります。"
    },
    {
      "indent": 3,
      "text": "Ultimately, however, we decided to specify and to implement [MALTZ99b] DSR as a layer 3 protocol, since this is the only layer at which we could realistically support nodes with multiple network interfaces of different types forming an ad hoc network.",
      "ja": "最終的に、しかし、我々は、これは我々が現実的にアドホックネットワークを形成し、異なる種類の複数のネットワークインターフェイスとノードをサポートすることができるれる層のみであるので、レイヤ3プロトコルとしてDSRを指定し、[MALTZ99b】実装することを決定しました。"
    },
    {
      "indent": 0,
      "text": "Appendix C. Implementation and Evaluation Status",
      "ja": "付録C.の実装と評価状況"
    },
    {
      "indent": 3,
      "text": "The initial design of the DSR protocol, including DSR's basic Route Discovery and Route Maintenance mechanisms, was first published in December 1994 [JOHNSON94]; significant additional design details and initial simulation results were published in early 1996 [JOHNSON96a].",
      "ja": "DSRの基本的な経路探索やルートメンテナンスのメカニズムを含むDSRプロトコルの初期設計は、まず1994年12月に発表された[JOHNSON94]。大幅な追加の設計の詳細と初期のシミュレーション結果が早期に1996年に発表された[JOHNSON96a]。"
    },
    {
      "indent": 3,
      "text": "The DSR protocol has been extensively studied since then through additional detailed simulations. In particular, we have implemented DSR in the ns-2 network simulator [NS-2, BROCH98] and performed extensive simulations of DSR using ns-2 (e.g., [BROCH98, MALTZ99a]). We have also conducted evaluations of the different caching strategies in this document [HU00].",
      "ja": "DSRプロトコルは、広範囲に追加詳細なシミュレーションにより、それ以来研究されてきました。特に、我々は[BROCH98、NS-2〕NS-2のネットワークシミュレータでDSRを実装していると（例えば、[BROCH98、MALTZ99a]）NS-2を用いてDSRの広範なシミュレーションを行いました。また、このドキュメント[HU00]で異なるキャッシュ戦略の評価を行いました。"
    },
    {
      "indent": 3,
      "text": "We have also implemented the DSR protocol under the FreeBSD 2.2.7 operating system running on Intel x86 platforms. FreeBSD [FREEBSD] is based on a variety of free software, including 4.4 BSD Lite, from the University of California, Berkeley. For the environments in which we used it, this implementation is functionally equivalent to the version of the DSR protocol specified in this document.",
      "ja": "また、インテルのx86プラットフォーム上で実行されているFreeBSDの2.2.7オペレーティングシステムの下で、DSRプロトコルを実装しました。 FreeBSDの[FREEBSD]カリフォルニア大学バークレー校から4.4 BSD Liteと、を含む、フリーソフトウェアのさまざまな基づいています。我々はそれを使用している環境では、この実装は、この文書で指定されたDSRプロトコルのバージョンと機能的に同等です。"
    },
    {
      "indent": 3,
      "text": "During the 7 months from August 1998 to February 1999, we designed and implemented a full-scale physical testbed to enable the evaluation of ad hoc network performance in the field, in an actively mobile ad hoc network under realistic communication workloads. The last week of February and the first week of March of 1999 included demonstrations of this testbed to a number of our sponsors and partners, including Lucent Technologies, Bell Atlantic, and the Defense Advanced Research Projects Agency (DARPA). A complete description of the testbed is available [MALTZ99b, MALTZ00, MALTZ01].",
      "ja": "1999年2月から1998年8月から7ヶ月の間に、我々は設計されており、現実的なコミュニケーションのワークロードの下で積極的にモバイルアドホックネットワークでは、フィールドにアドホックネットワークパフォーマンスの評価を可能にするために、フルスケールの物理的なテストベッドを実装しました。 2月の最後の週と1999年3月の最初の週は、ルーセント・テクノロジーズ、ベル大西洋、および米国防総省の国防高等研究計画庁（DARPA）を含む、当社のスポンサーやパートナーの数、このテストベッドのデモンストレーションが含まれています。テストベッドの完全な記述は[MALTZ99b、MALTZ00、MALTZ01]利用可能です。"
    },
    {
      "indent": 3,
      "text": "We have since ported this implementation of DSR to FreeBSD 3.3, and we have also added a preliminary version of Quality of Service (QoS) support for DSR. A demonstration of this modified version of DSR was presented in July 2000. These QoS features are not included in this document and will be added later in a separate document on top of the base protocol specified here.",
      "ja": "私たちは、以降のFreeBSD 3.3にDSRのこの実装を移植している、と我々はまた、DSRのサービス（QoS）のサポートの質の暫定版を追加しました。 DSRのこの修正版のデモは、これらのQoS機能は、本文書に含まれていないと、ここで指定した基本プロトコルの上に、後に別の文書で追加されます2000年7月に発表されました。"
    },
    {
      "indent": 3,
      "text": "DSR has also been implemented under Linux by Alex Song at the University of Queensland, Australia [SONG01]. This implementation supports the Intel x86 PC platform and the Compaq iPAQ.",
      "ja": "DSRはまた、オーストラリア[SONG01]、クイーンズランド大学のアレクサンドル・ソングで、Linuxでは実装されています。この実装は、Intelのx86 PCプラットフォームとCompaqのiPAQをサポートしています。"
    },
    {
      "indent": 3,
      "text": "The Network and Telecommunications Research Group at Trinity College, Dublin, have implemented a version of DSR on Windows CE.",
      "ja": "トリニティカレッジでのネットワーク通信研究グループ、ダブリンは、Windows CEでDSRのバージョンを実装しています。"
    },
    {
      "indent": 3,
      "text": "Microsoft Research has implemented a version of DSR on Windows XP and has used it in testbeds of over 15 nodes. Several machines use this implementation as their primary means of accessing the Internet.",
      "ja": "マイクロソフトリサーチでは、Windows XP上のDSRのバージョンを実装しており、15以上のノードのテストベッドでそれを使用しています。いくつかのマシンがインターネットにアクセスするための彼らの主な手段として、この実装を使用します。"
    },
    {
      "indent": 3,
      "text": "Several other independent groups have also used DSR as a platform for their own research, or as a basis of comparison between ad hoc network routing protocols.",
      "ja": "他のいくつかの独立したグループは、独自の研究のためのプラットフォームとしてDSRを使用、またはアドホックネットワークルーティングプロトコル間の比較の基準としてしています。"
    },
    {
      "indent": 3,
      "text": "A preliminary version of the optional DSR flow state extension was implemented in FreeBSD 3.3. A demonstration of this modified version of DSR was presented in July 2000. The DSR flow state extension has also been extensively evaluated using simulation [HU01].",
      "ja": "任意DSRフロー状態の拡張の予備バージョンは、FreeBSD 3.3で実装されました。 DSRのこの修正版のデモは、DSRフロー状態の拡張も広範囲にシミュレーション[HU01]を使用して評価されている2000年7月に発表されました。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The protocol described in this document has been designed and developed within the Monarch Project, a long-term research project at Rice University (previously at Carnegie Mellon University) that is developing adaptive networking protocols and protocol interfaces to allow truly seamless wireless and mobile node networking [JOHNSON96b, MONARCH].",
      "ja": "この文書に記載されているプロトコルは、真にシームレスな無線およびモバイルノードのネットワークを許可するように設計されており、適応ネットワーキング・プロトコルとプロトコル・インターフェースを開発しているモナーク・プロジェクト、（以前にカーネギーメロン大学）ライス大学の長期的な研究プロジェクト内で開発されました[JOHNSON96b、MONARCH]。"
    },
    {
      "indent": 3,
      "text": "The authors would like to acknowledge the substantial contributions of Josh Broch in helping to design, simulate, and implement the DSR protocol. We thank him for his contributions to earlier versions of this document.",
      "ja": "著者は、設計するうえでジョシュ・ブロッホの実質的な貢献を認めるシミュレートし、DSRプロトコルを実装したいと思います。私たちは、この文書の以前のバージョンへの貢献のために彼に感謝します。"
    },
    {
      "indent": 3,
      "text": "We would also like to acknowledge the assistance of Robert V. Barron at Carnegie Mellon University. Bob ported our DSR implementation from FreeBSD 2.2.7 into FreeBSD 3.3.",
      "ja": "我々はまた、カーネギーメロン大学のロバート・V・バロンの支援を承認したいと思います。ボブは、FreeBSD 3.3にはFreeBSD 2.2.7から私たちのDSR実装を移植しました。"
    },
    {
      "indent": 3,
      "text": "Many valuable suggestions came from participants in the IETF process. We would particularly like to acknowledge Fred Baker, who provided extensive feedback on a previous version of this document, as well as the working group chairs, for their suggestions of previous versions of the document.",
      "ja": "多くの貴重な提案は、IETFプロセスの参加者から来ました。私たちは、特に文書の以前のバージョンの彼らの提案のために、このドキュメントの以前のバージョンと同様に、ワーキンググループチェアで大規模なフィードバックを提供フレッドベイカーを、承認したいと思います。"
    },
    {
      "indent": 0,
      "text": "Normative References",
      "ja": "引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC791] Postel, J., \"Internet Protocol\", STD 5, RFC 791, September 1981.",
      "ja": "[RFC791]ポステル、J.、 \"インターネットプロトコル\"、STD 5、RFC 791、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC792] Postel, J., \"Internet Control Message Protocol\", STD 5, RFC 792, September 1981.",
      "ja": "[RFC792]ポステル、J.、 \"インターネット制御メッセージプロトコル\"、STD 5、RFC 792、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC826] Plummer, David C., \"Ethernet Address Resolution Protocol: Or converting network protocol addresses to 48.bit Ethernet address for transmission on Ethernet hardware\", STD 37, RFC 826, November 1982.",
      "ja": "[RFC826]プラマー、デビッド・C.、 \"イーサネットアドレス解決プロトコル：またはEthernetハードウェア上での伝送のためのイーサネットアドレスを48ビットするネットワーク・プロトコル・アドレスを変換\"、STD 37、RFC 826、1982年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC1122] Braden, R., \"Requirements for Internet Hosts - Communication Layers\", STD 3, RFC 1122, October 1989.",
      "ja": "[RFC1122]ブレーデン、R.、 \"インターネットホストのための要件 - 通信層\"、STD 3、RFC 1122、1989年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC1700] Reynolds, J. and J. Postel, \"Assigned Numbers\", STD 2, RFC 1700, October 1994. See also http://www.iana.org/numbers.html.",
      "ja": "[RFC1700]レイノルズ、J.およびJ.ポステル、 \"割り当て番号\"、STD 2、RFC 1700、1994年10月も参照http://www.iana.org/numbers.html。"
    },
    {
      "indent": 3,
      "text": "[RFC2003] Perkins, C., \"IP Encapsulation within IP\", RFC 2003, October 1996. RFC 2003, October 1996.",
      "ja": "[RFC2003]パーキンス、C.、 \"IP内IPカプセル化\"、RFC 2003、1996年10月RFC 2003、1996年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2434] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 2434, October 1998.",
      "ja": "[RFC2434] Narten氏、T.とH. Alvestrand、 \"RFCsにIANA問題部に書くためのガイドライン\"、BCP 26、RFC 2434、1998年10月。"
    },
    {
      "indent": 0,
      "text": "Informative References",
      "ja": "参考文献"
    },
    {
      "indent": 3,
      "text": "[BANTZ94] David F. Bantz and Frederic J. Bauchot. Wireless LAN Design Alternatives. IEEE Network, 8(2):43-53, March/April 1994.",
      "ja": "【BANTZ94]デビッドF. BantzとフレデリックJ. Bauchot。無線LANの設計代替案。 IEEEネットワーク、8（2）：43-53、月/ 1994年4月。"
    },
    {
      "indent": 3,
      "text": "[BHARGHAVAN94] Vaduvur Bharghavan, Alan Demers, Scott Shenker, and Lixia Zhang. MACAW: A Media Access Protocol for Wireless LAN's. In Proceedings of the ACM SIGCOMM '94 Conference, pages 212-225. ACM, August 1994.",
      "ja": "[BHARGHAVAN94] Vaduvur Bharghavan、アラン・デマーズ、スコット・シェンカー、およびLixiaチャン。 MACAW：無線LANのためのメディアアクセスプロトコル。 ACM SIGCOMM '94会議の議事録には、ページ212から225。 ACM、1994年8月。"
    },
    {
      "indent": 3,
      "text": "[BROCH98] Josh Broch, David A. Maltz, David B. Johnson, Yih-Chun Hu, and Jorjeta Jetcheva. A Performance Comparison of Multi-Hop Wireless Ad Hoc Network Routing Protocols. In Proceedings of the Fourth Annual ACM/IEEE International Conference on Mobile Computing and Networking, pages 85-97. ACM/IEEE, October 1998.",
      "ja": "【BROCH98]ジョシュブロッホ、デビッドA.モルツ、デビッド・B・ジョンソン、儀 - チョンフー、およびJorjeta Jetcheva。マルチホップ無線アドホックネットワークルーティングプロトコルの性能比較。モバイルコンピューティングとネットワーキング、ページ85-97で第4回年次ACM / IEEE国際会議の議事録。 ACM / IEEE、1998年10月。"
    },
    {
      "indent": 3,
      "text": "[CLARK88] David D. Clark. The Design Philosophy of the DARPA Internet Protocols. In Proceedings of the ACM SIGCOMM '88 Conference, pages 106-114. ACM, August 1988.",
      "ja": "[CLARK88]デビッド・D.クラーク。 DARPAインターネットプロトコルの設計理念。 ACM SIGCOMM '88会議の議事録には、ページ106-114。 ACM、1988年8月。"
    },
    {
      "indent": 3,
      "text": "[FREEBSD] The FreeBSD Project. Project web page available at http://www.freebsd.org/.",
      "ja": "[FREEBSD] FreeBSDプロジェクト。 http://www.freebsd.org/で入手可能なプロジェクトのWebページ。"
    },
    {
      "indent": 3,
      "text": "[HU00] Yih-Chun Hu and David B. Johnson. Caching Strategies in On-Demand Routing Protocols for Wireless Ad Hoc Networks. In Proceedings of the Sixth Annual ACM International Conference on Mobile Computing and Networking. ACM, August 2000.",
      "ja": "[HU00]儀 - チョン胡主席とDavid B.ジョンソン。無線アドホックネットワークのためのオンデマンドルーティングプロトコルでのキャッシング戦略。モバイルコンピューティングとネットワーキングの第6回年次ACM国際会議の議事録。 ACM、2000年8月。"
    },
    {
      "indent": 3,
      "text": "[HU01] Yih-Chun Hu and David B. Johnson. Implicit Source Routing in On-Demand Ad Hoc Network Routing. In Proceedings of the Second Symposium on Mobile Ad Hoc Networking and Computing (MobiHoc 2001), pages 1-10, October 2001.",
      "ja": "[HU01]儀 - チョン胡主席とDavid B.ジョンソン。オンデマンドアドホックネットワークルーティングにおける暗黙のソースルーティング。モバイルアドホックネットワークとコンピューティングに関する第2回シンポジウム（MobiHoc 2001）、ページ1-10、2001年10月。"
    },
    {
      "indent": 3,
      "text": "[HU02] Yih-Chun Hu, Adrian Perrig, and David B. Johnson. Ariadne: A Secure On-Demand Routing Protocol for Ad Hoc Networks. In Proceedings of the Eighth Annual International Conference on Mobile Computing and Networking (MobiCom 2002), pages 12-23, September 2002.",
      "ja": "[HU02]儀 - チョン胡、エイドリアンPerrig、とデビッド・B・ジョンソン。アリアドネ：アドホックネットワークにおけるセキュアなオンデマンドルーティングプロトコル。モバイルコンピューティングとネットワーキングの第八回国際会議議事録（モビコム2002）、頁12-23、2002年9月。"
    },
    {
      "indent": 3,
      "text": "[IEEE80211] IEEE Computer Society LAN MAN Standards Committee. Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications, IEEE Std 802.11-1997. The Institute of Electrical and Electronics Engineers, New York, New York, 1997.",
      "ja": "[IEEE80211] IEEEコンピュータ社会のLAN MAN標準委員会。無線LAN媒体アクセス制御（MAC）および物理層（PHY）仕様、IEEE規格802.​​11から1997。電気電子学会、ニューヨーク、ニューヨーク、1997年。"
    },
    {
      "indent": 3,
      "text": "[JOHANSSON99] Per Johansson, Tony Larsson, Nicklas Hedman, Bartosz Mielczarek, and Mikael Degermark. Scenario-based Performance Analysis of Routing Protocols for Mobile Ad-hoc Networks. In Proceedings of the Fifth Annual ACM/IEEE International Conference on Mobile Computing and Networking, pages 195-206. ACM/IEEE, August 1999.",
      "ja": "[JOHANSSON99]パー・ヨハンソン、トニー・ラーション、ニクラスHedman、バルトシュMielczarek、そしてミカエルDegermark。モバイルアドホックネットワークのためのルーティングプロトコルのシナリオベースのパフォーマンス分析。モバイルコンピューティングとネットワーキング、ページ195-206の第5回ACM / IEEE国際会議の議事録。 ACM / IEEE、1999年8月。"
    },
    {
      "indent": 3,
      "text": "[JOHNSON94] David B. Johnson. Routing in Ad Hoc Networks of Mobile Hosts. In Proceedings of the IEEE Workshop on Mobile Computing Systems and Applications, pages 158- 163. IEEE Computer Society, December 1994.",
      "ja": "[JOHNSON94]デビッド・B・ジョンソン。モバイルホストのアドホックネットワークにおけるルーティング。モバイルコンピューティングシステムおよびアプリケーション上のIEEEワークショップ、ページ158- 163 IEEEコンピュータ学会、1994年12月の議事録。"
    },
    {
      "indent": 3,
      "text": "[JOHNSON96a] David B. Johnson and David A. Maltz. Dynamic Source Routing in Ad Hoc Wireless Networks. In Mobile Computing, edited by Tomasz Imielinski and Hank Korth, chapter 5, pages 153-181. Kluwer Academic Publishers, 1996.",
      "ja": "[JOHNSON96a]デビッド・B・ジョンソンとDavid A.モルツ。アドホック無線ネットワークにおける動的なソースルーティング。モバイルコンピューティングでは、トマスツ・イミーリンスキーとハンクKorth、第5章、頁153から181で編集。 Kluwerの学術出版、1996。"
    },
    {
      "indent": 3,
      "text": "[JOHNSON96b] David B. Johnson and David A. Maltz. Protocols for Adaptive Wireless and Mobile Networking. IEEE Personal Communications, 3(1):34-42, February 1996.",
      "ja": "[JOHNSON96b]デビッド・B・ジョンソンとDavid A.モルツ。適応型ワイヤレスおよびモバイルネットワークのためのプロトコル。 IEEEパーソナル・コミュニケーションズ、3（1）：34-42、1996年2月。"
    },
    {
      "indent": 3,
      "text": "[JUBIN87] John Jubin and Janet D. Tornow. The DARPA Packet Radio Network Protocols. Proceedings of the IEEE, 75(1):21-32, January 1987.",
      "ja": "[JUBIN87]ジョンJubinとジャネットD. Tornow。 DARPAパケット無線ネットワークプロトコル。 IEEEの会報、75（1）：21-32、1987年1月。"
    },
    {
      "indent": 3,
      "text": "[KARN90]       Phil Karn.  MACA---A New Channel Access Method for\n               Packet Radio.  In ARRL/CRRL Amateur Radio 9th Computer\n               Networking Conference, pages 134-140. American Radio\n               Relay League, September 1990.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "[LAUER95] Gregory S. Lauer. Packet-Radio Routing. In Routing in Communications Networks, edited by Martha E. Steenstrup, chapter 11, pages 351-396. Prentice-Hall, Englewood Cliffs, New Jersey, 1995.",
      "ja": "【LAUER95】グレゴリーS.ラウアー。パケット無線ルーティング。通信ネットワークにおけるルーティングでは、マーサE. Steenstrup、11章、頁351から396で編集。プレンティスホール、イングルウッドクリフ、ニュージャージー州、1995年。"
    },
    {
      "indent": 3,
      "text": "[MALTZ99a] David A. Maltz, Josh Broch, Jorjeta Jetcheva, and David B. Johnson. The Effects of On-Demand Behavior in Routing Protocols for Multi-Hop Wireless Ad Hoc Networks. IEEE Journal on Selected Areas of Communications, 17(8):1439-1453, August 1999.",
      "ja": "【MALTZ99a]デビッドA.モルツ、ジョシュブロッホ、Jorjeta Jetcheva、とDavid B.ジョンソン。マルチホップ無線アドホックネットワークのためのルーティングプロトコルでオンデマンドの行動に及ぼす影響。コミュニケーションの選択領域に関するIEEEジャーナル、17（8）：1439年から1453年、1999年8月。"
    },
    {
      "indent": 3,
      "text": "[MALTZ99b] David A. Maltz, Josh Broch, and David B. Johnson. Experiences Designing and Building a Multi-Hop Wireless Ad Hoc Network Testbed. Technical Report CMU-CS-99-116, School of Computer Science, Carnegie Mellon University, Pittsburgh, Pennsylvania, March 1999.",
      "ja": "[MALTZ99b]デビッド・A・モルツ、ジョシュブロッホ、とデビッド・B・ジョンソン。マルチホップ無線アドホックネットワークテストベッドの設計と構築の経験。テクニカルレポートCMU-CS-99から116、コンピュータ・サイエンス、カーネギーメロン大学、ピッツバーグ、ペンシルベニア州、1999年3月の学校。"
    },
    {
      "indent": 3,
      "text": "[MALTZ00] David A. Maltz, Josh Broch, and David B. Johnson. Quantitative Lessons From a Full-Scale Multi-Hop Wireless Ad Hoc Network Testbed. In Proceedings of the IEEE Wireless Communications and Networking Conference. IEEE, September 2000.",
      "ja": "[MALTZ00]デビッド・A・モルツ、ジョシュブロッホ、とデビッド・B・ジョンソン。フルスケールマルチホップ無線アドホックネットワークテストベッドから定量レッスン。 IEEE無線通信とネットワーク会議の議事録。 IEEE、2000年9月。"
    },
    {
      "indent": 3,
      "text": "[MALTZ01] David A. Maltz, Josh Broch, and David B. Johnson. Lessons From a Full-Scale MultiHop Wireless Ad Hoc Network Testbed. IEEE Personal Communications, 8(1):8-15, February 2001.",
      "ja": "[MALTZ01]デビッド・A・モルツ、ジョシュブロッホ、とデビッド・B・ジョンソン。フルスケールのマルチホップ無線アドホックネットワークテストベッドからの教訓。 IEEEパーソナル・コミュニケーションズ、8（1）：8-15、2001年2月。"
    },
    {
      "indent": 3,
      "text": "[MONARCH] Rice University Monarch Project. Monarch Project Home Page. Available at http://www.monarch.cs.rice.edu/.",
      "ja": "[MONARCH]ライス大学モナークプロジェクト。モナークプロジェクトのホームページ。 http://www.monarch.cs.rice.edu/で利用可能。"
    },
    {
      "indent": 3,
      "text": "[NS-2] The Network Simulator -- ns-2. Project web page available at http://www.isi.edu/nsnam/ns/.",
      "ja": "[NS-2〕ネットワークシミュレータ -  NS-2。 http://www.isi.edu/nsnam/ns/で入手可能なプロジェクトのWebページ。"
    },
    {
      "indent": 3,
      "text": "[PAPADIMITRATOS02] Panagiotis Papadimitratos and Zygmunt J. Haas. Secure Routing for Mobile Ad Hoc Networks. In SCS Communication Networks and Distributed Systems Modeling and Simulation Conference (CNDS 2002), January 2002.",
      "ja": "【PAPADIMITRATOS02]パナギオティスPapadimitratosとジグムントJ.ハース。モバイルアドホックネットワークのためのルーティングを固定します。 SCS通信ネットワークと分散システムのモデリングとシミュレーション会議（CNDS 2002）、2002年1月。"
    },
    {
      "indent": 3,
      "text": "[PERLMAN92] Radia Perlman. Interconnections: Bridges and Routers. Addison-Wesley, Reading, Massachusetts, 1992.",
      "ja": "【PERLMAN92]ラディア・パールマン。相互接続：ブリッジやルータ。アディソン・ウェズリー、読書、マサチューセッツ州、1992年。"
    },
    {
      "indent": 3,
      "text": "[RFC793] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, September 1981.",
      "ja": "[RFC793]ポステル、J.、 \"伝送制御プロトコル\"、STD 7、RFC 793、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC2131] Droms, R., \"Dynamic Host Configuration Protocol\", RFC 2131, March 1997.",
      "ja": "[RFC2131] Droms、R.、 \"動的ホスト構成プロトコル\"、RFC 2131、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2460] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", RFC 2460, December 1998.",
      "ja": "[RFC2460]デアリング、S.とR. Hindenと、 \"インターネットプロトコルバージョン6（IPv6）の仕様\"、RFC 2460、1998年12月。"
    },
    {
      "indent": 3,
      "text": "[SONG01] Alex Song. picoNet II: A Wireless Ad Hoc Network for Mobile Handheld Devices. Submitted for the degree of Bachelor of Engineering (Honours) in the division of Electrical Engineering, Department of Information Technology and Electrical Engineering, University of Queensland, Australia, October 2001. Available at http://piconet.sourceforge.net/thesis/index.html.",
      "ja": "【SONG01]アレクサンドル・ソング。ピコネットII：モバイルハンドヘルド機器向け無線アドホックネットワーク。 http://piconet.sourceforge.net/thesis/indexの利用可能な電気工学の部門のエンジニアリングの学士号（優等）、情報技術および電気工学科、クイーンズランド大学、オーストラリア、2001年10月度のために提出.htmlを。"
    },
    {
      "indent": 3,
      "text": "[TURNER90] Paul Turner. NetWare Communications Processes. NetWare Application Notes, Novell Research, pages 25- 91, September 1990.",
      "ja": "[TURNER90]ポール・ターナー。 NetWareのコミュニケーションのプロセス。 NetWareのアプリケーションノート、ノベルリサーチ、ページ25〜91、1990年9月。"
    },
    {
      "indent": 3,
      "text": "[WRIGHT95] Gary R. Wright and W. Richard Stevens. TCP/IP Illustrated, Volume 2: The Implementation. Addison-Wesley, Reading, Massachusetts, 1995.",
      "ja": "[WRIGHT95]ゲイリー・R.ライトとW.リチャードスティーヴンス。 TCP / IPイラスト、2巻：実装。アディソン・ウェズリー、読書、マサチューセッツ州、1995年。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "David B. Johnson Rice University Computer Science Department, MS 132 6100 Main Street Houston, TX 77005-1892 USA",
      "ja": "デビッド・B・ジョンソンライス大学コンピュータサイエンス学部、MS 132 6100メインストリートヒューストン、TX 77005-1892 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 713 348-3063 Fax: +1 713 348-5930 EMail: dbj@cs.rice.edu",
      "ja": "電話：+1 713 348-3063ファックス：+1 713 348-5930 Eメール：dbj@cs.rice.edu"
    },
    {
      "indent": 3,
      "text": "David A. Maltz Microsoft Research One Microsoft Way Redmond, WA 98052 USA",
      "ja": "デビッド・A・モルツマイクロソフトリサーチ1マイクロソフト道、レッドモンド、ワシントン98052 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425 706-7785 Fax: +1 425 936-7329 EMail: dmaltz@microsoft.com",
      "ja": "電話：+1 425 706-7785ファックス：+1 425 936-7329 Eメール：dmaltz@microsoft.com"
    },
    {
      "indent": 3,
      "text": "Yih-Chun Hu University of Illinois at Urbana-Champaign Coordinated Science Lab 1308 West Main St, MC 228 Urbana, IL 61801 USA",
      "ja": "アーバナ・シャンペーン校イリノイ州の儀 - チョン胡大学協定サイエンスラボ1308西MAIN ST、MC 228アーバナ、IL 61801 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 217 333-4220 EMail: yihchun@uiuc.edu",
      "ja": "電話：+1 217 333-4220 Eメール：yihchun@uiuc.edu"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2007).",
      "ja": "著作権（C）IETFトラスト（2007）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットSOCIETY、（もしあれば）を後援し、IETF TRUST ANDインターネットエンジニアリングタスクフォース放棄ALLに設けられています。保証は、明示または黙示、この情報の利用および特定目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証がこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "了承"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}