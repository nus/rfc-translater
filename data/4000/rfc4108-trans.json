{
  "title": {
    "text": "RFC 4108 - Using Cryptographic Message Syntax (CMS) to Protect Firmware Packages",
    "ja": "RFC 4108 - ファームウェアパッケージを保護するために暗号メッセージ構文（CMS）を使用して、"
  },
  "number": 4108,
  "created_at": "2019-10-19 21:15:34.928867+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         R. Housley\nRequest for Comments: 4108                                Vigil Security\nCategory: Standards Track                                    August 2005",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 1,
      "text": "Using Cryptographic Message Syntax (CMS) to Protect Firmware Packages",
      "ja": "ファームウェアパッケージを保護するために暗号メッセージ構文（CMS）を使用して、"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "著作権（C）インターネット協会（2005）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes the use of the Cryptographic Message Syntax (CMS) to protect firmware packages, which provide object code for one or more hardware module components. CMS is specified in RFC 3852. A digital signature is used to protect the firmware package from undetected modification and to provide data origin authentication. Encryption is optionally used to protect the firmware package from disclosure, and compression is optionally used to reduce the size of the protected firmware package. A firmware package loading receipt can optionally be generated to acknowledge the successful loading of a firmware package. Similarly, a firmware package load error report can optionally be generated to convey the failure to load a firmware package.",
      "ja": "この文書では、1つまたは複数のハードウェア・モジュール・コンポーネントのオブジェクトコードを提供するファームウェアパッケージを保護するための暗号メッセージ構文（CMS）の使用を記載しています。 CMSは、RFC 3852.で指定されたデジタル署名が検出されない改変からファームウェアパッケージを保護し、データ発信元認証を提供するために使用されます。暗号化は、任意に開示からファームウェアパッケージを保護するために使用され、そして圧縮は、必要に応じて保護されたファームウェアパッケージのサイズを縮小するために使用されます。ファームウェアパッケージローディングレシートは、必要に応じてファームウェアパッケージの成功したローディングを確認するために生成することができます。同様に、ファームウェアパッケージロードエラーレポートは、必要に応じてファームウェアパッケージのロードに失敗したことを伝えるために生成することができます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Terminology ................................................5\n   1.2. Architectural Elements .....................................5\n        1.2.1. Hardware Module Requirements ........................7\n        1.2.2. Firmware Package Requirements .......................8\n        1.2.3. Bootstrap Loader Requirements .......................9\n               1.2.3.1. Legacy Stale Version Processing ...........11\n               1.2.3.2. Preferred Stale Version Processing ........12\n        1.2.4. Trust Anchors ......................................12\n        1.2.5. Cryptographic and Compression Algorithm\n               Requirements .......................................13\n   1.3. Hardware Module Security Architecture .....................14\n   1.4. ASN.1 Encoding ............................................14\n   1.5. Protected Firmware Package Loading ........................15\n2. Firmware Package Protection ....................................15\n   2.1. Firmware Package Protection CMS Content Type Profile ......18\n        2.1.1. ContentInfo ........................................18\n        2.1.2. SignedData .........................................18\n               2.1.2.1. SignerInfo ................................19\n               2.1.2.2. EncapsulatedContentInfo ...................20\n        2.1.3. EncryptedData ......................................20\n               2.1.3.1. EncryptedContentInfo ......................21\n        2.1.4. CompressedData .....................................21\n               2.1.4.1. EncapsulatedContentInfo ...................22\n        2.1.5. FirmwarePkgData ....................................22\n   2.2. Signed Attributes .........................................22\n        2.2.1. Content Type .......................................23\n        2.2.2. Message Digest .....................................24\n        2.2.3. Firmware Package Identifier ........................24\n        2.2.4. Target Hardware Module Identifiers .................25\n        2.2.5. Decrypt Key Identifier .............................26\n        2.2.6. Implemented Crypto Algorithms ......................26\n        2.2.7. Implemented Compression Algorithms .................27\n        2.2.8. Community Identifiers ..............................27\n        2.2.9. Firmware Package Information .......................29\n        2.2.10. Firmware Package Message Digest ...................30\n        2.2.11. Signing Time ......................................30\n        2.2.12. Content Hints .....................................31\n        2.2.13. Signing Certificate ...............................31\n   2.3. Unsigned Attributes .......................................32\n        2.3.1. Wrapped Firmware Decryption Key ....................33\n3. Firmware Package Load Receipt ..................................34\n   3.1. Firmware Package Load Receipt CMS Content Type Profile ....36\n        3.1.1. ContentInfo ........................................36",
      "raw": true,
      "ja": "1.はじめに\n   1.1。用語\n   1.2。アーキテクチャル・エレメント\n        1.2.1。ハードウェアモジュールの要件\n        1.2.2。ファームウェアパッケージの要件\n        1.2.3。ブートストラップローダの要件\n               1.2.3.1。レガシー古いバージョン処理\n               1.2.3.2。好適古いバージョン処理\n        1.2.4。トラストアンカー\n        1.2.5。暗号化および圧縮アルゴリズム\n               必要条件\n   1.3。ハードウェアモジュールのセキュリティアーキテクチャ\n   1.4。 ASN.1エンコーディング\n   1.5。保護されたファームウェアパッケージの読み込み\n2.ファームウェアパッケージの保護\n   2.1。ファームウェアパッケージ保護のCMSコンテンツタイプのプロフィール\n        2.1.1。 ContentInfo\n        2.1.2。 SignedData\n               2.1.2.1。 SignerInfo\n               2.1.2.2。 EncapsulatedContentInfo\n        2.1.3。 EncryptedData\n               2.1.3.1。 EncryptedContentInfo\n        2.1.4。 CompressedData\n               2.1.4.1。 EncapsulatedContentInfo\n        2.1.5。 FirmwarePkgData\n   2.2。署名された属性\n        2.2.1。コンテンツの種類\n        2.2.2。メッセージダイジェスト\n        2.2.3。ファームウェアパッケージ識別子\n        2.2.4。ターゲットハードウェアモジュールの識別子\n        2.2.5。復号化キー識別子\n        2.2.6。実装暗号アルゴリズム\n        2.2.7。実装圧縮アルゴリズム\n        2.2.8。コミュニティ識別子\n        2.2.9。ファームウェアパッケージ情報\n        2.2.10。ファームウェアパッケージメッセージダイジェスト\n        2.2.11。時間の署名\n        2.2.12。コンテンツのヒント\n        2.2.13。署名証明書\n   2.3。署名属性\n        2.3.1。包まれたファームウェアの復号鍵\n3.ファームウェアパッケージのロード領収書\n   3.1。ファームウェアパッケージのロード領収書CMSコンテンツタイププロフィール.... 36\n        3.1.1。 ContentInfo"
    },
    {
      "indent": 3,
      "text": "        3.1.2. SignedData .........................................36\n               3.1.2.1. SignerInfo ................................37\n               3.1.2.2. EncapsulatedContentInfo ...................38\n        3.1.3. FirmwarePackageLoadReceipt .........................38\n   3.2. Signed Attributes .........................................40\n        3.2.1. Content Type .......................................40\n        3.2.2. Message Digest .....................................40\n        3.2.3. Signing Time .......................................40\n4. Firmware Package Load Error ....................................41\n   4.1. Firmware Package Load Error CMS Content Type Profile ......42\n        4.1.1. ContentInfo ........................................42\n        4.1.2. SignedData .........................................43\n               4.1.2.1. SignerInfo ................................43\n               4.1.2.2. EncapsulatedContentInfo ...................43\n        4.1.3. FirmwarePackageLoadError ...........................43\n   4.2. Signed Attributes .........................................49\n        4.2.1. Content Type .......................................49\n        4.2.2. Message Digest .....................................49\n        4.2.3. Signing Time .......................................50\n5. Hardware Module Name ...........................................50\n6. Security Considerations ........................................51\n   6.1. Cryptographic Keys and Algorithms .........................51\n   6.2. Random Number Generation ..................................51\n   6.3. Stale Firmware Package Version Number .....................52\n   6.4. Community Identifiers .....................................53\n7. References .....................................................54\n   7.1. Normative References ......................................54\n   7.2. Informative References ....................................54\nAppendix A: ASN.1 Module ..........................................56",
      "raw": true,
      "ja": "3.1.2。 SignedData\n               3.1.2.1。 SignerInfo\n               3.1.2.2。 EncapsulatedContentInfo\n        3.1.3。 FirmwarePackageLoadReceipt\n   3.2。署名された属性\n        3.2.1。コンテンツの種類\n        3.2.2。メッセージダイジェスト\n        3.2.3。時間の署名\n4.ファームウェアパッケージ読み込みエラー\n   4.1。ファームウェアパッケージの読み込みエラーCMSコンテンツタイプのプロフィール\n        4.1.1。 ContentInfo\n        4.1.2。 SignedData\n               4.1.2.1。 SignerInfo\n               4.1.2.2。 EncapsulatedContentInfo\n        4.1.3。 FirmwarePackageLoadError\n   4.2。署名された属性\n        4.2.1。コンテンツの種類\n        4.2.2。メッセージダイジェスト\n        4.2.3。時間の署名\n5.ハードウェア・モジュール名\n6.セキュリティの考慮事項\n   6.1。暗号化キーとアルゴリズム\n   6.2。乱数生成\n   6.3。古いファームウェアパッケージのバージョン番号\n   6.4。コミュニティ識別子\n7.参考\n   7.1。引用規格\n   7.2。参考文献\n付録A：ASN.1モジュール"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "This document describes the use of the Cryptographic Message Syntax (CMS) [CMS] to protect firmware packages. This document also describes the use of CMS for receipts and error reports for firmware package loading. The CMS is a data protection encapsulation syntax that makes use of ASN.1 [X.208-88, X.209-88]. The protected firmware package can be associated with any particular hardware module; however, this specification was written with the requirements of cryptographic hardware modules in mind, as these modules have strong security requirements.",
      "ja": "この文書では、ファームウェアパッケージを保護するために暗号メッセージ構文（CMS）[CMS]の使用を記載しています。また、このドキュメントでは、領収書やファームウェアパッケージの読み込みのためのエラーレポートのためのCMSの使用を記載しています。 CMSはASN.1 [X.208-88、X.209-88]を利用したデータ保護カプセル化構文です。保護されたファームウェアパッケージは、任意の特定のハードウェアモジュールに関連付けることができます。これらのモジュールは、強力なセキュリティ要件を持っているようしかし、この仕様は、心の中で暗号化ハードウェア・モジュールの要件に書かれていました。"
    },
    {
      "indent": 3,
      "text": "The firmware package contains object code for one or more programmable components that make up the hardware module. The firmware package, which is treated as an opaque binary object, is digitally signed. Optional encryption and compression are also supported. When all three are used, the firmware package is compressed, then encrypted, and then signed. Compression simply reduces the size of the firmware package, allowing more efficient processing and transmission. Encryption protects the firmware package from disclosure, which allows transmission of sensitive firmware packages over insecure links. The encryption algorithm and mode employed may also provide integrity, protecting the firmware package from undetected modification. The encryption protects proprietary algorithms, classified algorithms, trade secrets, and implementation techniques. The digital signature protects the firmware package from undetected modification and provides data origin authentication. The digital signature allows the hardware module to confirm that the firmware package comes from an acceptable source.",
      "ja": "ファームウェアパッケージには、ハードウェアモジュールを構成する1つのまたは複数のプログラム可能なコンポーネントのオブジェクト・コードが含まれています。不透明なバイナリオブジェクトとして扱われるファームウェアパッケージは、デジタル署名されています。オプションの暗号化と圧縮もサポートされています。すべての3つが使用されている場合は、ファームウェアパッケージはその後、圧縮、暗号化した後、署名されています。圧縮は、単に、より効率的な処理及び伝送を可能にする、ファームウェアパッケージのサイズを減少させます。暗号化は、安全でないリンク上の敏感なファームウェアパッケージの伝送を可能にする開示からファームウェアパッケージを、保護します。採用暗号化アルゴリズムとモードも検出されない修正からファームウェアパッケージを保護し、整合性を提供することができます。暗号化は独自のアルゴリズム、分類されたアルゴリズム、営業秘密、および実装技術を保護します。デジタル署名が検出されない改変からファームウェアパッケージを保護し、データ発信元認証を提供します。デジタル署名は、ハードウェアモジュールは、ファームウェアパッケージが許容可能なソースから来ることを確認することができます。"
    },
    {
      "indent": 3,
      "text": "If encryption is used, the firmware-decryption key must be made available to the hardware module via a secure path. The key might be delivered via physical media or via an independent electronic path. One optional mechanism for distributing the firmware-decryption key is specified in Section 2.3.1, but any secure key distribution mechanism is acceptable.",
      "ja": "暗号化が使用されている場合は、ファームウェア・復号鍵は、安全な経路を介して、ハードウェア・モジュールが利用できるようにする必要があります。キーは物理的なメディアを介して、または独立した電子パスを介して配信される場合があります。ファームウェア復号鍵を配布するための任意の一の機構はセクション2.3.1で指定されているが、任意の安全な鍵配布機構が許容可能です。"
    },
    {
      "indent": 3,
      "text": "The signature verification public key must be made available to the hardware module in a manner that preserves its integrity and confirms its source. CMS supports the transfer of certificates, and this facility can be used to transfer a certificate that contains the signature verification public key (a firmware-signing certificate). However, use of this facility introduces a level of indirection. Ultimately, a trust anchor public key must be made available to the hardware module. Section 1.2 establishes a requirement that the hardware module store one or more trust anchors.",
      "ja": "署名検証用公開鍵はその完全性を維持し、そのソースを確認するようにハードウェアモジュールに利用可能にされなければなりません。 CMSは、証明書の転送をサポートしており、この機能は署名検証公開鍵（ファームウェア署名証明書）を含む証明書を転送するために使用することができます。ただし、この機能を使用すると、間接的なレベルを紹介します。最終的には、トラストアンカーの公開鍵は、ハードウェアモジュールが利用できるようにする必要があります。セクション1.2は、要件ハードウェアモジュール店一つ以上のトラストアンカーを確立します。"
    },
    {
      "indent": 3,
      "text": "Hardware modules may not be capable of accessing certificate repositories or delegated path discovery (DPD) servers [DPD&DPV] to acquire certificates needed to complete a certification path. Thus, it is the responsibility of the firmware package signer to include sufficient certificates to enable each module to validate the firmware-signer certificate (see Section 2.1.2). Similarly, hardware modules may not be capable of accessing a certificate revocation list (CRL) repository, an OCSP responder [OCSP], or a delegated path validation (DPV) server [DPD&DPV] to acquire revocation status information. Thus, if the firmware package signature cannot be validated solely with the trust anchor public key and the hardware module is not capable of performing full certification path validation, then it is the responsibility of the entity loading a package into a hardware module to validate the firmware-signer certification path prior to loading the package into a hardware module. The means by which this external certificate revocation status checking is performed is beyond the scope of this specification.",
      "ja": "ハードウェアモジュールは、証明書パスを完了するために必要な証明書を取得する証明書リポジトリまたは委任パス検出（DPD）サーバ[DPD＆DPV]をアクセス可能ではないかもしれません。したがって、（2.1.2項を参照）ファームウェア署名者の証明書を検証するために、各モジュールを有効にするために十分な証明書が含まれるようにファームウェアパッケージの署名者の責任です。同様に、ハードウェアモジュールは、証明書失効リスト（CRL）のリポジトリにアクセス可能ではないかもしれない、OCSPレスポンダ[OCSP]、または委任パス検証（DPV）サーバが[DPD＆DPV]は失効状態情報を取得します。したがって、ファームウェアパッケージの署名が信頼アンカー公開鍵とハードウェアモジュールでのみ検証できない場合は、完全な認証パスの検証を行うことができない、それはファームウェアを検証するためにハードウェアモジュールにパッケージをロードするエンティティの責任であります-signer認証パスハードウェアモジュールにパッケージをロードする前に。この外部の証明書失効ステータスチェックが実行される手段は、本明細書の範囲外です。"
    },
    {
      "indent": 3,
      "text": "Hardware modules will only accept firmware packages with a valid digital signature. The signature is either validated directly using the trust anchor public key or using a firmware-signer certification path that is validated to the trust anchor public key. Thus, the trust anchors define the set of entities that can create firmware packages for the hardware module.",
      "ja": "ハードウェアモジュールは、唯一の有効なデジタル署名でのファームウェアパッケージを受け入れます。署名は直接トラストアンカーの公開鍵を使用するか、トラストアンカーの公開鍵に有効とされているファームウェア・署名者の証明書パスを使用して検証のいずれかです。このように、トラストアンカーは、ハードウェアモジュールのファームウェアパッケージを作成することができますエンティティのセットを定義します。"
    },
    {
      "indent": 3,
      "text": "The disposition of a previously loaded firmware package after the successful validation of another firmware package is beyond the scope of this specification. The amount of memory available to the hardware module will determine the range of alternatives.",
      "ja": "別のファームウェアパッケージの検証に成功した後、以前にロードされたファームウェアパッケージの配置は、この仕様の範囲を超えています。ハードウェアモジュールで使用可能なメモリの量は、選択肢の範囲を決定します。"
    },
    {
      "indent": 3,
      "text": "In some cases, hardware modules can generate receipts to acknowledge the loading of a particular firmware package. Such receipts can be used to determine which hardware modules need to receive an updated firmware package whenever a flaw in an earlier firmware package is discovered. Hardware modules can also generate error reports to indicate the unsuccessful firmware package loading. To implement either receipt or error report generation, the hardware module is required to have a unique permanent serial number. Receipts and error reports can be either signed or unsigned. To generate digitally signed receipts or error reports, a hardware module MUST be issued its own private signature key and a certificate that contains the corresponding signature validation public key. In order to save memory with the hardware module, the hardware module might store a certificate designator instead of the certificate itself. The private signature key requires secure storage.",
      "ja": "いくつかのケースでは、ハードウェアモジュールは、特定のファームウェアパッケージのローディングを確認するために領収書を生成することができます。このような領収書には、モジュールは、以前のファームウェアパッケージに欠陥が発見されるたびに更新されたファームウェアパッケージを受信する必要のあるハードウェアを決定するために使用することができます。ハードウェアモジュールも失敗したファームウェアパッケージの読み込みを示すためにエラーレポートを生成することができます。レシートまたはエラーレポート生成のいずれかを実装するには、ハードウェアモジュールは、独自の永久シリアル番号を持つことが必要です。領収書やエラーレポートは、いずれかの符号付きまたは符号なしすることができます。デジタル署名された領収書やエラーレポートを生成するには、ハードウェアモジュールは、自身の秘密署名鍵と対応する署名検証公開鍵を含む証明書を発行する必要があります。ハードウェアモジュールとメモリを節約するために、ハードウェアモジュールではなく、証明書自体の証明書の指示を保管することがあります。秘密署名鍵は、セキュアなストレージを必要とします。"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1。用語"
    },
    {
      "indent": 3,
      "text": "In this document, the key words MUST, MUST NOT, REQUIRED, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL are to be interpreted as described in [STDWORDS].",
      "ja": "この文書では、キーワードは、REQUIREDは、MAY、推奨すべきでないてはいけませんしなければならない、とOPTIONALは[STDWORDS]で説明されるように解釈されるべきです。"
    },
    {
      "indent": 0,
      "text": "1.2. Architectural Elements",
      "section_title": true,
      "ja": "1.2。アーキテクチャル・エレメント"
    },
    {
      "indent": 3,
      "text": "The architecture includes the hardware module, the firmware package, and a bootstrap loader. The bootstrap loader MUST have access to one or more trusted public keys, called trust anchors, to validate the signature on the firmware package. If a signed firmware package load receipt or error report is created on behalf of the hardware module, then the bootstrap loader MUST have access to a private signature key to generate the signature and the signer identifier for the corresponding signature validation certificate or its designator. A signature validation certificate MAY be included to aid signature validation. To implement this optional capability, the hardware module MUST have a unique serial number and a private signature key; the hardware module MAY also include a certificate that contains the corresponding signature validation public key. These items MUST be installed in the hardware module before it is deployed. The private key and certificate can be generated and installed as part of the hardware module manufacture process. Figure 1 illustrates these architectural elements.",
      "ja": "アーキテクチャは、ハードウェアモジュール、ファームウェアパッケージ、及びブートストラップローダを含みます。ブートストラップローダはファームウェアパッケージの署名を検証するために、トラストアンカーと呼ばれる1つまたは複数の信頼できる公開鍵へのアクセスを持たなければなりません。署名したファームウェアパッケージの負荷レシートまたはエラーレポートはハードウェアモジュールに代わって作成されている場合は、ブートストラップローダは、対応する署名検証証明書またはその指示のための署名と署名者識別子を生成するための秘密署名鍵にアクセスできなければなりません。署名検証証明書は、署名の検証を支援するために含まれるかもしれません。このオプションの機能を実装するには、ハードウェアモジュールは、固有のシリアル番号と秘密署名鍵を持っている必要があります。ハードウェアモジュールは、対応する署名検証公開鍵を含む証明書を含むかもしれません。それが展開される前に、これらの項目は、ハードウェアモジュールにインストールする必要があります。秘密鍵と証明書が生成され、ハードウェア・モジュールの製造プロセスの一部としてインストールすることができます。図1は、これらの建築要素を示します。"
    },
    {
      "indent": 3,
      "text": "ASN.1 object identifiers are the preferred means of naming the architectural elements.",
      "ja": "ASN.1オブジェクト識別子は建築要素を命名する好ましい手段です。"
    },
    {
      "indent": 3,
      "text": "Details of managing the trust anchors are beyond the scope of this specification. However, one or more trust anchors MUST be installed in the hardware module using a secure process before it is deployed. These trust anchors provide a means of controlling the acceptable sources of firmware packages. The hardware module vendor can include provisions for secure, remote management of trust anchors. One approach is to include trust anchors in the firmware packages themselves. This approach is analogous to the optional capability described later for updating the bootstrap loader.",
      "ja": "トラストアンカーの管理の詳細については、この仕様の範囲を超えています。しかし、一つ以上の信頼アンカーは、それが展開される前に、安全なプロセスを使用したハードウェアモジュールにインストールする必要があります。これらのトラストアンカーは、ファームウェアパッケージの許容源を制御する手段を提供します。ハードウェアモジュールベンダは、信頼アンカーの安全な、リモート管理のための規定を含めることができます。一つのアプローチは、ファームウェアパッケージそのものに信頼アンカーを含めることです。このアプローチは、ブートストラップローダを更新するために、後述のオプションの機能に似ています。"
    },
    {
      "indent": 3,
      "text": "In a cryptographic hardware module, the firmware package might implement many different cryptographic algorithms.",
      "ja": "暗号化ハードウェアモジュールでは、ファームウェアパッケージは、多くの異なる暗号化アルゴリズムを実装する場合があります。"
    },
    {
      "indent": 3,
      "text": "When the firmware package is encrypted, the firmware-decryption key and the firmware package MUST both be provided to the hardware module. The firmware-decryption key is necessary to use the associated firmware package. Generally, separate distribution mechanisms will be employed for the firmware-decryption key and the firmware package. An optional mechanism for securely distributing the firmware-decryption key with the firmware package is specified in Section 2.3.1.",
      "ja": "ファームウェアパッケージが暗号化されている場合、ファームウェア復号鍵とファームウェアパッケージは、両方のハードウェアモジュールに提供されなければなりません。ファームウェア・復号鍵は、関連するファームウェアパッケージを使用する必要があります。一般に、別の配布メカニズムは、ファームウェア復号鍵とファームウェアパッケージのために使用されるであろう。しっかりファームウェアパッケージとファームウェア・復号鍵を配布するためのオプションのメカニズムはセクション2.3.1で指定されています。"
    },
    {
      "indent": 12,
      "text": "+------------------------------------------------------+\n|  Hardware Module                                     |\n|                                                      |\n|   +---------------+   +--------------------------+   |\n|   |  Bootstrap    |   |  Firmware Package        |   |\n|   |  Loader       |   |                          |   |\n|   +---------------+   |   +------------------+   |   |\n|                       |   : Firmware Package :   |   |\n|   +---------------+   |   : Identifier and   :   |   |\n|   |  Trust        |   |   : Version Number   :   |   |\n|   |  Anchor(s)    |   |   +------------------+   |   |\n|   +---------------+   |                          |   |\n|                       |   +-------------+        |   |\n|   +---------------+   |   : Algorithm 1 :        |   |\n|   |  Serial Num.  |   |   +-+-----------+-+      |   |\n|   +---------------+   |     : Algorithm 2 :      |   |\n|                       |     +-+-----------+-+    |   |\n|   +---------------+   |       : Algorithm n :    |   |\n|   |  Hardware     |   |       +-------------+    |   |\n|   |  Module Type  |   |                          |   |\n|   +---------------+   +--------------------------+   |\n|                                                      |\n|        +------------------------------------+        |\n|        |  Optional Private Signature Key &  |        |\n|        |  Signature Validation Certificate  |        |\n|        |  or the Certificate Designator     |        |\n|        +------------------------------------+        |\n|                                                      |\n+------------------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 21,
      "text": "Figure 1. Architectural Elements",
      "ja": "図1.アーキテクチャル・エレメント"
    },
    {
      "indent": 0,
      "text": "1.2.1. Hardware Module Requirements",
      "section_title": true,
      "ja": "1.2.1。ハードウェアモジュールの要件"
    },
    {
      "indent": 3,
      "text": "Many different vendors develop hardware modules, and each vendor typically identifies its modules by product type (family) and revision level. A unique object identifier MUST name each hardware module type and revision.",
      "ja": "多くの異なるベンダーがハードウェアモジュールを開発し、各ベンダーは、典型的には、製品の種類（ファミリー）およびリビジョンレベルによってそのモジュールを識別する。一意のオブジェクト識別子は、各ハードウェアモジュールタイプとリビジョンに名前を付ける必要があります。"
    },
    {
      "indent": 3,
      "text": "Each hardware module within a hardware module family SHOULD have a unique permanent serial number. However, if the optional receipt or error report generation capability is implemented, then the hardware module MUST have a unique permanent serial number. If the optional receipt or error report signature capability is implemented, then the hardware module MUST have a private signature key and a certificate containing the corresponding public signature validation key or its designator. If a serial number is present, the bootstrap loader uses it for authorization decisions (see Section 2.2.8), receipt generation (see Section 3), and error report generation (see Section 4).",
      "ja": "ハードウェア・モジュール・ファミリ内の各ハードウェアモジュールは、固有の永続的なシリアル番号を持っているべきです。オプションの領収書やエラーレポートの生成機能が実装されている場合は、その後、ハードウェアモジュールは、固有の永続的なシリアル番号が必要です。オプションのレシートまたはエラー報告署名機能が実装されている場合は、ハードウェアモジュールは、秘密署名鍵と対応する公開署名検証キーまたはその指示を含む証明書を持っていなければなりません。シリアル番号が存在する場合は、ブートストラップローダは、認可の決定（2.2.8項を参照）、レシート世代（セクション3を参照）、およびエラーレポート生成（第4章を参照）のためにそれを使用しています。"
    },
    {
      "indent": 3,
      "text": "When the hardware module includes more than one firmware-programmable component, the bootstrap loader distributes components of the package to the appropriate components within the hardware module after the firmware package is validated. The bootstrap loader is discussed further in Section 1.2.3.",
      "ja": "ハードウェアモジュールは、複数のファームウェアプログラム可能な構成要素を含む場合、ファームウェアパッケージが検証された後、ブートストラップローダは、ハードウェアモジュール内の適切なコンポーネントにパッケージのコンポーネントを分配します。ブートストラップローダは1.2.3項で詳しく説明されています。"
    },
    {
      "indent": 0,
      "text": "1.2.2. Firmware Package Requirements",
      "section_title": true,
      "ja": "1.2.2。ファームウェアパッケージの要件"
    },
    {
      "indent": 3,
      "text": "Two approaches to naming firmware packages are supported: legacy and preferred. Firmware package names are placed in a CMS signed attribute, not in the firmware package itself.",
      "ja": "ファームウェアパッケージに名前を付けるには、2つの方法がサポートされています：レガシー、好ましいです。ファームウェアパッケージ名は、CMSに配置されていないファームウェアパッケージ自体に、属性に署名しました。"
    },
    {
      "indent": 3,
      "text": "Legacy firmware package names are simply octet strings, and no structure is assumed. This firmware package name form is supported in order to facilitate existing configuration management systems. We assume that the firmware signer and the bootstrap loader will understand any internal structure to the octet string. In particular, given two legacy firmware package names, we assume that the firmware signer and the bootstrap loader will be able to determine which one represents the newer version of the firmware package. This capability is necessary to implement the stale version feature. If a firmware package with a disastrous flaw is released, subsequent firmware package versions MAY designate a stale legacy firmware package name in order to prevent subsequent rollback to the stale version or versions earlier than the stale version.",
      "ja": "レガシーファームウェアパッケージ名は、単にオクテット文字列であり、何の構造が想定されていません。このファームウェアパッケージ名の形式は、既存の構成管理システムを容易にするためにサポートされています。私たちは、ファームウェアの署名者とブートストラップローダはオクテット文字列に任意の内部構造を理解することを想定しています。特に、2人のレガシーファームウェアパッケージ名を与えられ、私たちは、ファームウェアの署名者とブートストラップローダはファームウェアパッケージの新しいバージョンを表しているかを判断できるようになることを前提としています。この機能は、古いバージョンの機能を実装する必要があります。悲惨な欠陥とファームウェアパッケージがリリースされている場合は、以降のファームウェアパッケージのバージョンが古いバージョンまたは古いバージョンより前のバージョンの後にロールバックを防ぐために、古いレガシーファームウェアパッケージ名を指定することができます。"
    },
    {
      "indent": 3,
      "text": "Preferred firmware package names are a combination of the firmware package object identifier and a version number. A unique object identifier MUST identify the collection of features that characterize the firmware package. For example, firmware packages for a cable modem and a wireless LAN network interface card warrant distinct object identifiers. Similarly, firmware packages that implement distinct suites of cryptographic algorithms and modes of operation, or that emulate different (non-programmable) cryptographic devices warrant distinct object identifiers. The version number MUST identify a particular build or release of the firmware package. The version number MUST be a monotonically increasing non-negative integer. Generally, an earlier version is replaced with a later one. If a firmware package with a disastrous flaw is released, subsequent firmware package versions MAY designate a stale version number to prevent subsequent rollback to the stale version or versions earlier than the stale version.",
      "ja": "好適ファームウェアパッケージ名は、ファームウェアパッケージオブジェクト識別子とバージョン番号の組み合わせです。ユニークなオブジェクト識別子は、ファームウェアパッケージを特徴付ける機能の集合を特定しなければなりません。例えば、ケーブルモデムと無線LANのネットワークインターフェースカードワラント別個のオブジェクト識別子のためのファームウェアパッケージ。同様に、暗号化アルゴリズムおよび動作モードの異なるスイートを実装し、またはそれは異なる（非プログラマブル）をエミュレートするファームウェアパッケージ暗号化装置は、別個のオブジェクト識別子を保証します。バージョン番号は、ファームウェアパッケージの特定のビルドやリリースを特定しなければなりません。バージョン番号が単調増加非負整数でなければなりません。一般的には、以前のバージョンでは、後に置き換えられます。悲惨な欠陥とファームウェアパッケージがリリースされている場合は、以降のファームウェアパッケージのバージョンが古いバージョンまたは古いバージョンより前のバージョンの後にロールバックを防ぐために、古いバージョン番号を指定することができます。"
    },
    {
      "indent": 3,
      "text": "Firmware packages are developed to run on one or more hardware module type. The firmware package digital signature MUST bind the list of supported hardware module object identifiers to the firmware package.",
      "ja": "ファームウェアパッケージは、1つまたは複数のハードウェアモジュールタイプで実行するために開発されています。ファームウェアパッケージのデジタル署名は、ファームウェアパッケージにサポートされているハードウェアモジュールオブジェクト識別子のリストを結合しなければなりません。"
    },
    {
      "indent": 3,
      "text": "In many cases, the firmware package signature will be validated directly with the trust anchor public key, avoiding the need to construct certification paths. Alternatively, the trust anchor can delegate firmware package signing to another public key through a certification path. In the latter case, the firmware package SHOULD contain the certificates needed to construct the certification path that begins with a certificate issued by the trust anchors and ends with a certificate issued to the firmware package signer.",
      "ja": "多くの場合、ファームウェアパッケージの署名は、証明書パスを構築する必要性を回避、トラストアンカーの公開鍵で直接検証されます。また、トラストアンカーは、証明書パスを介して、他の公開鍵に署名するファームウェアパッケージを委任することができます。後者の場合、ファームウェアパッケージは、トラストアンカーによって発行された証明書で始まり、ファームウェアパッケージの署名者に発行された証明書で終わる証明書パスを構築するために必要な証明書を含むべきです。"
    },
    {
      "indent": 3,
      "text": "The firmware package MAY contain a list of community identifiers. These identifiers name the hardware modules that are authorized to load the firmware package. If the firmware package contains a list of community identifiers, then the bootstrap loader MUST reject the firmware package if the hardware module is not a member of one of the identified communities.",
      "ja": "ファームウェアパッケージは、コミュニティ識別子のリストを含むかもしれません。これらの識別子は、ファームウェアパッケージをロードするために許可されているハードウェアモジュールに名前を付けます。ファームウェアパッケージは、コミュニティ識別子のリストが含まれている場合は、ハードウェアモジュールが特定のコミュニティの1つのメンバーでない場合、ブートストラップローダは、ファームウェアパッケージを拒絶しなければなりません。"
    },
    {
      "indent": 3,
      "text": "When a hardware module includes multiple programmable components, the firmware package SHOULD contain executable code for all of the components. Internal tagging within the firmware package MUST tell the bootstrap loader which portion of the overall firmware package is intended for each component; however, this tagging is expected to be specific to each hardware module. Because this specification treats the firmware package as an opaque binary object, the format of the firmware package is beyond the scope of this specification.",
      "ja": "ハードウェアモジュールは、複数のプログラム可能な構成要素を含む場合、ファームウェアパッケージは、すべてのコンポーネントのために実行可能なコードを含むべきです。ファームウェアパッケージ内の内部タグは、全体的なファームウェアパッケージの部分は各コンポーネントに意図されているブートストラップローダに指示する必要があります。しかし、このタグは、各ハードウェアモジュールに対して特異的であることが期待されます。この仕様は、不透明なバイナリオブジェクトとしてファームウェアパッケージを扱うため、ファームウェアパッケージのフォーマットは、本明細書の範囲外です。"
    },
    {
      "indent": 0,
      "text": "1.2.3. Bootstrap Loader Requirements",
      "section_title": true,
      "ja": "1.2.3。ブートストラップローダの要件"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader MUST have access to a physical interface and any related driver or protocol software necessary to obtain a firmware package. The same interface SHOULD be used to deliver receipts and error reports. Details of the physical interface as well as the driver or protocol software are beyond the scope of this specification.",
      "ja": "ブートストラップローダは、物理インターフェースと、ファームウェアパッケージを得るために必要な任意の関連するドライバやプロトコルソフトウェアにアクセスしなければなりません。同じインターフェイスは、領収書やエラーレポートを配信するために使用されるべきです。物理インターフェイスならびにドライバやプロトコルソフトウェアの詳細は、本明細書の範囲外です。"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader can be a permanent part of the hardware module, or it can be replaced by loading a firmware package. In Figure 1, the bootstrap loader is implemented as separate logic within the hardware module. Not all hardware modules will include the ability to replace or update the bootstrap loader, and this specification does not mandate such support.",
      "ja": "ブートストラップローダは、ハードウェアモジュールの永久的な部分であることができる、またはそれはファームウェアパッケージをロードすることによって置き換えることができます。図1では、ブートストラップローダは、ハードウェア・モジュール内の別個の論理として実現されます。いないすべてのハードウェアモジュールは、ブートストラップ・ローダを交換したり、更新する機能が含まれますが、この仕様では、このようなサポートは必須ではありません。"
    },
    {
      "indent": 3,
      "text": "If the bootstrap loader can be loaded by a firmware package, an initial bootstrap loader MUST be installed in non-volatile memory prior to deployment. All bootstrap loaders, including an initial bootstrap loader if one is employed, MUST meet the requirements in this section. However, the firmware package containing the bootstrap loader MAY also contain other routines.",
      "ja": "ブートストラップローダは、ファームウェアパッケージによってロードすることができた場合は、初期ブートストラップローダは、展開前に、不揮発性メモリにインストールする必要があります。 1が採用されている場合、最初のブートストラップ・ローダを含むすべてのブートストラップローダーは、このセクションの要件を満たす必要があります。しかし、ブートストラップローダを含むファームウェアパッケージは、他のルーチンを含むかもしれません。"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader requires access to cryptographic routines. These routines can be implemented specifically for the bootstrap loader, or they can be shared with other hardware module features. The bootstrap loader MUST have access to a one-way hash function and digital signature verification routines to validate the digital signature on the firmware package and to validate the certification path for the firmware-signing certificate.",
      "ja": "ブートストラップローダは、暗号化ルーチンへのアクセスが必要です。これらのルーチンは、ブートストラップローダのために特別に実装することができ、またはそれらは他のハードウェアモジュールの機能を共有することができます。ブートストラップローダはファームウェアパッケージにデジタル署名を検証すると、ファームウェアの署名証明書のための証明書パスを検証するために、一方向ハッシュ関数とデジタル署名の検証ルーチンにアクセスできる必要があります。"
    },
    {
      "indent": 3,
      "text": "If firmware packages are encrypted, the bootstrap loader MUST have access to a decryption routine. Access to a corresponding encryption function is not required, since hardware modules need not be capable of generating firmware packages. Because some symmetric encryption algorithm implementations (such as AES [AES]) employ separate logic for encryption and decryption, some hardware module savings might result.",
      "ja": "ファームウェアパッケージが暗号化されている場合は、ブートストラップローダは、復号ルーチンにアクセスできる必要があります。ハードウェアモジュールは、ファームウェアパッケージを生成することが可能である必要はないので、対応する暗号化機能へのアクセスは、必要とされていません。 （例えばAES [AES]など）いくつかの対称暗号化アルゴリズムの実装は、暗号化および復号化のための別のロジックを採用しているので、いくつかのハードウェアモジュールの節約が生じるかもしれません。"
    },
    {
      "indent": 3,
      "text": "If firmware packages are compressed, the bootstrap loader MUST also have access to a decompression function. This function can be implemented specifically for the bootstrap loader, or it can be shared with other hardware module features. Access to a corresponding compression function is not required, since hardware modules need not be capable of generating firmware packages.",
      "ja": "ファームウェアパッケージが圧縮されている場合は、ブートストラップローダはまた、解凍機能にアクセスできる必要があります。この機能は、ブートストラップローダのために特別に実装することができ、またはそれは他のハードウェアモジュールの機能を共有することができます。ハードウェアモジュールは、ファームウェアパッケージを生成することが可能である必要はないので、対応する圧縮関数へのアクセスは、必要とされません。"
    },
    {
      "indent": 3,
      "text": "If the optional receipt generation or error report capability is supported, the bootstrap loader MUST have access to the hardware module serial number and the object identifier for the hardware module type. If the optional signed receipt generation or signed error report capability is supported, the bootstrap loader MUST also have access to a one-way hash function and digital signature routines, the hardware module private signing key, and the corresponding signature validation certificate or its designator.",
      "ja": "任意レシート発生またはエラーレポート機能がサポートされている場合、ブートストラップローダは、ハードウェアモジュールのシリアル番号とハードウェアモジュールの種類のオブジェクト識別子にアクセスしなければなりません。オプションの署名された領収書の生成または符号付きエラーレポート機能がサポートされている場合、ブートストラップローダはまた、一方向ハッシュ関数、デジタル署名ルーチン、ハードウェアモジュール秘密署名鍵、および対応する署名検証証明書またはその指示にアクセスしなければなりません。"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader requires access to one or more trusted public keys, called trust anchors, to validate the firmware package digital signature. One or more trust anchors MUST be installed in non-volatile memory prior to deployment. The bootstrap loader MUST reject a firmware package if it cannot validate the signature, which MAY require the construction of a valid certification path from the firmware-signing certificate to one of the trust anchors [PROFILE]. However, in many cases, the firmware package signature will be validated directly with the trust anchor public key, avoiding the need to construct certification paths.",
      "ja": "ブートストラップローダは、ファームウェアパッケージのデジタル署名を検証するために、トラストアンカーと呼ばれる1つまたは複数の信頼できる公開鍵、にアクセスする必要があります。一つまたは複数の信頼アンカーは、展開前に、不揮発性メモリにインストールする必要があります。それは信頼アンカー[PROFILE]のいずれかにファームウェア署名証明書から有効な証明書パスの構築を必要とするかもしれ署名を検証できない場合は、ブートストラップローダはファームウェアパッケージを拒絶しなければなりません。しかし、多くの場合、ファームウェアパッケージの署名は、証明書パスを構築する必要性を回避、トラストアンカーの公開鍵で直接検証されます。"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader MUST reject a firmware package if the list of supported hardware module type identifiers within the firmware package does not include the object identifier of the hardware module.",
      "ja": "ファームウェアパッケージ内のサポートされているハードウェアモジュールタイプ識別子のリストは、ハードウェア・モジュールのオブジェクト識別子を含まない場合、ブートストラップローダは、ファームウェアパッケージを拒絶しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader MUST reject a firmware package if the firmware package includes a list of community identifiers and the hardware module is not a member of one of the listed communities. The means of determining community membership is beyond the scope of this specification.",
      "ja": "ファームウェアパッケージは、コミュニティ識別子のリストが含まれており、ハードウェアモジュールが記載されているコミュニティの1つのメンバーでない場合は、ブートストラップローダはファームウェアパッケージを拒絶しなければなりません。コミュニティのメンバーシップを決定する手段は、この仕様の範囲を超えています。"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader MUST reject a firmware package if it cannot successfully decrypt the firmware package using the firmware-decryption key available to the hardware module. The firmware package contains an identifier of the firmware-decryption key needed for decryption.",
      "ja": "それが成功したハードウェアモジュールに使用可能なファームウェア・復号鍵を使用してファームウェアパッケージを復号化することができない場合は、ブートストラップローダはファームウェアパッケージを拒絶しなければなりません。ファームウェアパッケージは、復号化のために必要なファームウェア・復号鍵の識別子が含まれています。"
    },
    {
      "indent": 3,
      "text": "When an earlier version of a firmware package is replacing a later one, the bootstrap loader SHOULD generate a warning. The manner in which a warning is generated is highly dependent on the hardware module and the environment in which it is being used. If a firmware package with a disastrous flaw is released and subsequent firmware package versions designate a stale version, the bootstrap loader SHOULD prevent loading of the stale version and versions earlier than the stale version.",
      "ja": "ファームウェアパッケージの以前のバージョンが1を交換した場合、ブートストラップローダは警告を生成する必要があります。警告が生成される方法は、ハードウェアモジュール及びそれが使用されている環境に大きく依存しています。悲惨な傷付きファームウェアパッケージが放出され、その後のファームウェアパッケージのバージョンが古いバージョンを指定された場合、ブートストラップローダが古いバージョンと以前の失効バージョンよりもバージョンの読み込みを防止するはずです。"
    },
    {
      "indent": 0,
      "text": "1.2.3.1. Legacy Stale Version Processing",
      "section_title": true,
      "ja": "1.2.3.1。レガシー古いバージョン処理"
    },
    {
      "indent": 3,
      "text": "In case a firmware package with a disastrous flaw is released, subsequent firmware package versions that employ the legacy firmware package name form MAY include a stale legacy firmware package name to prevent subsequent rollback to the stale version or versions earlier than the stale version. As described in the Security Considerations section of this document, the inclusion of a stale legacy firmware package name in a firmware package cannot completely prevent subsequent use of the stale firmware package. However, many hardware modules are expected to have very few firmware packages written for them, allowing the stale firmware package version feature to provide important protections.",
      "ja": "場合には悲惨な欠陥とファームウェアパッケージがリリースされ、従来のファームウェアパッケージ名の形式を採用し、後続のファームウェアパッケージのバージョンが古いバージョンまたは古いバージョンより前のバージョンの後にロールバックを防ぐために、古いレガシーファームウェアパッケージ名を含むかもしれません。この文書のセキュリティについての考慮事項のセクションで説明したように、ファームウェアパッケージの古いレガシーファームウェアパッケージ名を含めることは、完全に古いファームウェアパッケージのその後の使用を防ぐことはできません。しかし、多くのハードウェアモジュールは、古いファームウェアパッケージのバージョン機能が重要な保護を提供することができ、彼らのために書かれた非常に少数のファームウェアパッケージを有することが期待されます。"
    },
    {
      "indent": 3,
      "text": "Non-volatile storage for stale version numbers is needed. The number of stale legacy firmware package names that can be stored depends on the amount of storage that is available. When a firmware package is loaded and it contains a stale legacy firmware package name, then it SHOULD be added to a list kept in non-volatile storage. When subsequent firmware packages are loaded, the legacy firmware package name of the new package is compared to the list in non-volatile storage. If the legacy firmware package name represents the same version or an older version of a member of the list, then the new firmware packages SHOULD be rejected.",
      "ja": "古いバージョン番号の不揮発性ストレージが必要とされています。保存することができ、古いレガシーファームウェアパッケージ名の数は、利用可能なストレージの量に依存します。ファームウェアパッケージがロードされ、それが古いレガシーファームウェアパッケージ名が含まれている場合、それは不揮発性ストレージに保存リストに追加する必要があります。それ以降のファームウェアパッケージがロードされている場合は、新しいパッケージの従来のファームウェアのパッケージ名は、不揮発性記憶装置内のリストと比較されます。従来のファームウェアのパッケージ名が同じバージョンまたはリストのメンバーの古いバージョンを表す場合は、新しいファームウェアパッケージは拒否されるべき。"
    },
    {
      "indent": 3,
      "text": "The amount of non-volatile storage that needs to be dedicated to saving legacy firmware package names and stale legacy firmware packages names depends on the number of firmware packages that are likely to be developed for the hardware module.",
      "ja": "従来のファームウェアパッケージ名と古いレガシーのファームウェアパッケージ名を保存専用にする必要があり、不揮発性ストレージの量は、ハードウェアモジュールのために開発される可能性があるファームウェアパッケージの数に依存します。"
    },
    {
      "indent": 0,
      "text": "1.2.3.2. Preferred Stale Version Processing",
      "section_title": true,
      "ja": "1.2.3.2。好適古いバージョン処理"
    },
    {
      "indent": 3,
      "text": "If a firmware package with a disastrous flaw is released, subsequent firmware package versions that employ preferred firmware package name form MAY include a stale version number to prevent subsequent rollback to the stale version or versions earlier than the stale version. As described in the Security Considerations section of this document, the inclusion of a stale version number in a firmware package cannot completely prevent subsequent use of the stale firmware package. However, many hardware modules are expected to have very few firmware packages written for them, allowing the stale firmware package version feature to provide important protections.",
      "ja": "悲惨な傷付きファームウェアパッケージが解放される場合、好適なファームウェアパッケージ名形式を採用し、後続のファームウェアパッケージのバージョンが古いバージョンまたは失効したバージョンよりも前のバージョンに続いてロールバックを防止するために失効バージョンを含むことができます。この文書のセキュリティの考慮事項のセクションで説明したように、ファームウェアパッケージの失効バージョン番号を含めることは、完全に失効ファームウェアパッケージのその後の使用を防ぐことができません。しかし、多くのハードウェアモジュールは、古いファームウェアパッケージのバージョン機能が重要な保護を提供することができ、彼らのために書かれた非常に少数のファームウェアパッケージを有することが期待されます。"
    },
    {
      "indent": 3,
      "text": "Non-volatile storage for stale version numbers is needed. The number of stale version numbers that can be stored depends on the amount of storage that is available. When a firmware package is loaded and it contains a stale version number, then the object identifier of the firmware package and the stale version number SHOULD be added to a list that is kept in non-volatile storage. When subsequent firmware packages are loaded, the object identifier and version number of the new package are compared to the list in non-volatile storage. If the object identifier matches and the version number is less than or equal to the stale version number, then the new firmware packages SHOULD be rejected.",
      "ja": "古いバージョン番号の不揮発性ストレージが必要とされています。格納できる失効バージョン番号の数は、利用可能なストレージの量に依存します。ファームウェアパッケージがロードされ、それが古くなったバージョン番号が含まれている場合、その後、ファームウェアパッケージのオブジェクト識別子と古くなったバージョン番号は、不揮発性記憶装置に保持されるリストに追加されるべきです。それ以降のファームウェアパッケージがロードされている場合は、新しいパッケージのオブジェクト識別子とバージョン番号は、不揮発性記憶装置内のリストと比較されています。オブジェクト識別子が一致し、バージョン番号がより小さいか古いバージョン番号に等しい場合は、新しいファームウェアパッケージは拒否されるべき。"
    },
    {
      "indent": 3,
      "text": "The amount of non-volatile storage that needs to be dedicated to saving firmware package identifiers and stale version numbers depends on the number of firmware packages that are likely to be developed for the hardware module.",
      "ja": "ファームウェアパッケージ識別子と古いバージョン番号を保存専用にする必要があり、不揮発性ストレージの量は、ハードウェアモジュールのために開発される可能性があるファームウェアパッケージの数に依存します。"
    },
    {
      "indent": 0,
      "text": "1.2.4. Trust Anchors",
      "section_title": true,
      "ja": "1.2.4。トラストアンカー"
    },
    {
      "indent": 3,
      "text": "A trust anchor MUST consist of a public key signature algorithm and an associated public key, which MAY optionally include parameters. A trust anchor MUST also include a public key identifier. A trust anchor MAY also include an X.500 distinguished name.",
      "ja": "トラストアンカーは、公開鍵署名アルゴリズムおよび任意パラメータを含むことができる関連した公開鍵、から構成されなければなりません。トラストアンカーはまた、公開鍵の識別子を含まなければなりません。トラストアンカーはまた、X.500識別名を含むかもしれません。"
    },
    {
      "indent": 3,
      "text": "The trust anchor public key is used in conjunction with the signature validation algorithm in two different ways. First, the trust anchor public key is used directly to validate the firmware package signature. Second, the trust anchor public key is used to validate an X.509 certification path, and then the subject public key in the final certificate in the certification path is used to validate the firmware package signature.",
      "ja": "トラストアンカーの公開鍵は、2つの異なる方法で、署名検証アルゴリズムと組み合わせて使用​​されます。まず、トラストアンカーの公開鍵は、ファームウェアパッケージの署名を検証するために直接使用されます。第二に、トラストアンカーの公開鍵は、X.509証明書パスを検証するために使用され、その後、認証パスの最後の証明書の対象の公開鍵は、ファームウェアパッケージの署名を検証するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The public key names the trust anchor, and each public key has a public key identifier. The public key identifier identifies the trust anchor as the signer when it is used directly to validate firmware package signatures. This key identifier can be stored with the trust anchor, or it can be computed from the public key whenever needed.",
      "ja": "公開鍵の名前トラストアンカー、及び各公開鍵は、公開鍵の識別子を持っています。ファームウェアパッケージの署名を検証するために直接使用されている場合、公開鍵識別子は、署名者として信頼アンカーを識別します。このキー識別子は、トラストアンカーで保存することができ、あるいは必要に応じていつでも、それは、公開鍵から計算することができます。"
    },
    {
      "indent": 3,
      "text": "The optional trusted X.500 distinguished name MUST be present in order for the trust anchor public key to be used to validate an X.509 certification path. Without an X.500 distinguished name, certification path construction cannot use the trust anchor.",
      "ja": "オプションの信頼されたX.500識別名は、X.509証明書パスを検証するために使用されるトラストアンカー公開鍵のために存在しなければなりません。 X.500識別名がなければ、証明書パスの構築は、トラストアンカーを使用することはできません。"
    },
    {
      "indent": 0,
      "text": "1.2.5. Cryptographic and Compression Algorithm Requirements",
      "section_title": true,
      "ja": "1.2.5。暗号化および圧縮アルゴリズムの要件"
    },
    {
      "indent": 3,
      "text": "A firmware package for a cryptographic hardware module includes cryptographic algorithm implementations. In addition, a firmware package for a non-cryptographic hardware module will likely include cryptographic algorithm implementations to support the bootstrap loader in the validation of firmware packages.",
      "ja": "暗号化ハードウェア・モジュールのファームウェアパッケージは、暗号アルゴリズムの実装を含みます。また、非暗号化ハードウェアモジュールのファームウェアパッケージは、おそらくファームウェアパッケージの検証でブートストラップローダをサポートするために、暗号アルゴリズムの実装が含まれます。"
    },
    {
      "indent": 3,
      "text": "A unique algorithm object identifier MUST be assigned for each cryptographic algorithm and mode implemented by a firmware package. A unique algorithm object identifier MUST also be assigned for each compression algorithm implemented by a firmware package. The algorithm object identifiers can be used to determine whether a particular firmware package satisfies the needs of a particular application. To facilitate the development of algorithm-agile applications, the cryptographic module interface SHOULD allow applications to query the cryptographic module for the object identifiers associated with each cryptographic algorithm contained in the currently loaded firmware package. Applications SHOULD also be able to query the cryptographic module to determine attributes associated with each algorithm. Such attributes might include the algorithm type (symmetric encryption, asymmetric encryption, key agreement, one-way hash function, digital signature, and so on), the algorithm block size or modulus size, and parameters for asymmetric algorithms. This specification does not establish the conventions for the retrieval of algorithm identifiers or algorithm attributes.",
      "ja": "独自のアルゴリズムのオブジェクト識別子は、ファームウェアパッケージで実装する暗号アルゴリズムおよびモードのために割り当てられなければなりません。独自のアルゴリズムのオブジェクト識別子はまた、ファームウェアパッケージによって実現各圧縮アルゴリズムのために割り当てられなければなりません。アルゴリズムのオブジェクト識別子は、特定のファームウェアパッケージは、特定のアプリケーションのニーズを満たしているか否かを決定するために使用することができます。アルゴリズムアジャイルアプリケーションの開発を容易にするために、暗号モジュールインタフェースは、アプリケーションが現在ロードされたファームウェアパッケージに含まれている各暗号アルゴリズムに関連付けられたオブジェクト識別子の暗号化モジュールを照会することを可能にするべきです。また、アプリケーションは、各アルゴリズムに関連付けられた属性を決定するために暗号モジュールを照会することができるべきです。このような属性は、アルゴリズムタイプ（対称暗号、非対称暗号化、鍵合意、一方向ハッシュ関数、デジタル署名など）、アルゴリズムのブロックサイズまたは係数サイズ、及び非対称アルゴリズムのためのパラメータを含み得ます。この仕様はアルゴリズム識別子またはアルゴリズムの属性を取得するための規則を確立しません。"
    },
    {
      "indent": 0,
      "text": "1.3. Hardware Module Security Architecture",
      "section_title": true,
      "ja": "1.3。ハードウェアモジュールのセキュリティアーキテクチャ"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader MAY be permanently stored in read-only memory or separately loaded into non-volatile memory as discussed above.",
      "ja": "ブートストラップローダは、永久的リードオンリーメモリ内に格納されるか、または別々に上述のような非揮発性メモリにロードすることができます。"
    },
    {
      "indent": 3,
      "text": "In most hardware module designs, the firmware package execution environment offers a single address space. If it does, the firmware package SHOULD contain a complete firmware package load for the hardware module. In this situation, the firmware package does not contain a partial or incremental set of functions. A complete firmware package load will minimize complexity and avoid potential security problems. From a complexity perspective, the incremental loading of packages makes it necessary for each package to identify any other packages that are required (its dependencies), and the bootstrap loader needs to verify that all of the dependencies are satisfied before attempting to execute the firmware package. When a hardware module is based on a general purpose processor or a digital signal processor, it is dangerous to allow arbitrary packages to be loaded simultaneously unless there is a reference monitor to ensure that independent portions of the code cannot interfere with one another. Also, it is difficult to evaluate arbitrary combinations of software modules [SECREQMTS]. For these reasons, a complete firmware package load is RECOMMENDED; however, this specification allows the firmware signer to identify dependencies between firmware packages in order to handle all situations.",
      "ja": "ほとんどのハードウェアモジュールの設計では、ファームウェアパッケージの実行環境は、単一のアドレス空間を提供しています。それがない場合は、ファームウェアパッケージには、ハードウェアモジュールのための完全なファームウェアパッケージの負荷を含むべきです。このような状況では、ファームウェアパッケージには、機能の一部または増分セットが含まれていません。完全なファームウェアパッケージの負荷が複雑さを最小限に抑え、潜在的なセキュリティ上の問題を回避します。複雑さの観点から、パッケージの増分ロードは、それが必要な各パッケージが必要とされている他のパッケージ（その依存関係）を識別できるようになり、ブートストラップローダは、すべての依存関係は、ファームウェアパッケージを実行しようとする前に満たされていることを確認する必要があります。ハードウェアモジュールは、汎用プロセッサ、デジタル信号プロセッサに基づいている場合は、コードの独立した部分が互いに干渉しないことを保証するために参照モニターがない限り、任意のパッケージが同時にロードされることを可能にするのは危険です。また、[SECREQMTS]ソフトウェアモジュールの任意の組み合わせを評価することは困難です。これらの理由から、完全なファームウェアパッケージの負荷が推奨されます。しかし、この仕様は、ファームウェアの署名者が、すべての状況を処理するために、ファームウェアパッケージ間の依存関係を特定することができます。"
    },
    {
      "indent": 3,
      "text": "The firmware packages MAY have dependencies on routines provided by other firmware packages. To minimize the security evaluation complexity of a hardware module employing such a design, the firmware package MUST identify the package identifiers (and the minimum version numbers when the preferred firmware package name form is used) of the packages upon which it depends. The bootstrap loader MUST reject a firmware package load if it contains a dependency on a firmware package that is not available.",
      "ja": "ファームウェアパッケージは、他のファームウェアパッケージが提供するルーチンの依存関係を持っているかもしれません。このような設計を採用したハードウェア・モジュールのセキュリティ評価の複雑さを最小限にするために、ファームウェアパッケージは、それが依存するパッケージのパッケージ識別子（及び好適ファームウェアパッケージ名形式が使用されている最小のバージョン番号）を識別しなければなりません。それは利用できないファームウェアパッケージへの依存関係が含まれている場合は、ブートストラップローダはファームウェアパッケージの負荷を拒絶しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Loading a firmware package can impact the satisfactory resolution of dependencies of other firmware packages that are already part of the hardware module configuration. For this reason, the bootstrap loader MUST reject the loading of a firmware package if the dependencies of any firmware package in the resulting configurations will be unsatisfied.",
      "ja": "ファームウェアパッケージをロードすると、既にハードウェアモジュール構成の一部である他のファームウェアパッケージの依存関係の良好な解像度に影響を与えることができます。得られた構成の任意のファームウェアパッケージの依存関係が満たされないであろう場合には、このような理由から、ブートストラップローダは、ファームウェアパッケージのロードを拒絶しなければなりません。"
    },
    {
      "indent": 0,
      "text": "1.4. ASN.1 Encoding",
      "section_title": true,
      "ja": "1.4。 ASN.1エンコーディング"
    },
    {
      "indent": 3,
      "text": "The CMS uses Abstract Syntax Notation One (ASN.1) [X.208-88, X.209-88]. ASN.1 is a formal notation used for describing data protocols, regardless of the programming language used by the implementation. Encoding rules describe how the values defined in",
      "ja": "CMSは、抽象構文記法1（ASN.1）[X.208-88、X.209-88]を使用しています。 ASN.1にかかわらず、実装によって使用されるプログラミング言語の、データプロトコルを説明するための正式な表記法です。符号化規則は、値がで定義された方法を説明します"
    },
    {
      "indent": 3,
      "text": "ASN.1 will be represented for transmission. The Basic Encoding Rules (BER) are the most widely employed rule set, but they offer more than one way to represent data structures. For example, definite length encoding and indefinite length encoding are supported. This flexibility is not desirable when digital signatures are used. As a result, the Distinguished Encoding Rules (DER) [X.509-88] were invented. DER is a subset of BER that ensures a single way to represent a given value. For example, DER always employs definite length encoding.",
      "ja": "ASN.1は、伝送のために表されます。基本符号化規則（BER）が最も広く採用ルールセットですが、彼らは、データ構造を表すために複数の方法を提供します。例えば、明確なレングス符号化及び不定長符号化がサポートされています。デジタル署名が使用される場合、この柔軟性は望ましくありません。その結果、識別符号化規則（DER）[X.509-88]を考案しました。 DERは、与えられた値を表すために単一の方法を確実にBERのサブセットです。例えば、DERは常に明確なレングス符号化を採用しています。"
    },
    {
      "indent": 3,
      "text": "In this specification, digitally signed structures MUST be encoded with DER. Other structures do not require DER, but the use of definite length encoding is strongly RECOMMENDED. By always using definite length encoding, the bootstrap loader will have fewer options to implement. In situations where there is very high confidence that only definite length encoding will be used, support for indefinite length decoding MAY be omitted.",
      "ja": "本明細書では、デジタル署名された構造は、DERで符号化されなければなりません。その他の構成は、DERを必要としませんが、明確な長さのエンコーディングを使用することを強くお勧めします。常に明確な長さのエンコーディングを使用することにより、ブートストラップローダは、実装するための少数のオプションがあります。唯一の明確な長さのエンコーディングが使用されることを非常に高い信頼性がある状況では、不定長の復号化のサポートは省略されるかもしれません。"
    },
    {
      "indent": 0,
      "text": "1.5. Protected Firmware Package Loading",
      "section_title": true,
      "ja": "1.5。保護されたファームウェアパッケージの読み込み"
    },
    {
      "indent": 3,
      "text": "This document does not attempt to specify a physical interface, any related driver software, or a protocol necessary for loading firmware packages. Many different delivery mechanisms are envisioned, including portable memory devices, file transfer, and web pages. Section 2 of this specification defines the format that MUST be presented to the hardware module regardless of the interface that is used. This specification also specifies the format of the response that MAY be generated by the hardware module. Section 3 of this specification defines the format that MAY be returned by the hardware module when a firmware package loads successfully. Section 4 of this specification defines the format that MAY be returned by the hardware module when a firmware package load is unsuccessful. The firmware package load receipts and firmware package load error reports can be either signed or unsigned.",
      "ja": "この文書では、物理インターフェイス、関連するすべてのドライバソフトウェア、またはロードするファームウェアパッケージのために必要なプロトコルを指定しようとしません。多くの異なる配信メカニズムは、ポータブルメモリ・デバイス、ファイル転送、およびウェブページなど、想定されます。本明細書のセクション2にかかわらず、使用されるインターフェイスのハードウェアモジュールに提示されなければならない形式を定義します。この仕様は、ハードウェア・モジュールによって生成され得る応答のフォーマットを指定します。本明細書のセクション3は、場合ファームウェアパッケージのロードに成功したハードウェアモジュールによって返されることがフォーマットを定義します。本明細書のセクション4は、ファームウェアパッケージのロードが失敗した場合、ハードウェアモジュールによって返されることがフォーマットを定義します。ファームウェアパッケージのロード領収書やファームウェアパッケージの読み込みエラーレポートは、符号付きまたは符号なしすることができます。"
    },
    {
      "indent": 0,
      "text": "2. Firmware Package Protection",
      "section_title": true,
      "ja": "2.ファームウェアパッケージの保護"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax (CMS) is used to protect a firmware package, which is treated as an opaque binary object. A digital signature is used to protect the firmware package from undetected modification and to provide data origin authentication. Encryption is optionally used to protect the firmware package from disclosure, and compression is optionally used to reduce the size of the protected firmware package. The CMS ContentInfo content type MUST always be present, and it MUST encapsulate the CMS SignedData content type. If the firmware package is encrypted, then the CMS SignedData content type MUST encapsulate the CMS EncryptedData content type. If the firmware package is compressed, then either the CMS SignedData content type (when encryption is not used) or the CMS EncryptedData content type (when encryption is used) MUST encapsulate the CMS CompressedData content type. Finally, (1) the CMS SignedData content type (when neither encryption nor compression is used), (2) the CMS EncryptedData content type (when encryption is used, but compression is not), or (3) the CMS CompressedData content type (when compression is used) MUST encapsulate the simple firmware package using the FirmwarePkgData content type defined in this specification (see Section 2.1.5).",
      "ja": "暗号メッセージ構文（CMS）は、不透明なバイナリオブジェクトとして扱われるファームウェアパッケージを保護するために使用されます。デジタル署名が検出されない改変からファームウェアパッケージを保護し、データ発信元認証を提供するために使用されます。暗号化は、任意に開示からファームウェアパッケージを保護するために使用され、そして圧縮は、必要に応じて保護されたファームウェアパッケージのサイズを縮小するために使用されます。 CMS ContentInfoコンテンツタイプは常に存在しなければならない、そしてそれは、CMSのSignedDataコンテンツタイプをカプセル化しなければなりません。ファームウェアパッケージが暗号化されている場合は、CMSのSignedDataコンテンツタイプは、CMSはEncryptedDataコンテンツタイプをカプセル化しなければなりません。ファームウェアパッケージが圧縮されている場合は、どちらか（暗号化が使用されていない）CMSのSignedDataコンテンツタイプまたは（暗号化が使用されている）CMSはEncryptedDataコンテンツタイプは、CMS CompressedDataコンテンツタイプをカプセル化しなければなりません。最後に、（1）CMSのSignedDataコンテンツタイプ（いずれも暗号化も圧縮が使用される場合）、（2）CMSはEncryptedDataコンテンツタイプ（暗号化が使用されるが、圧縮がない時）、または（3）CMS CompressedDataコンテンツタイプ（圧縮を使用する場合）（セクション2.1.5を参照）本明細書に定義されたFirmwarePkgDataコンテンツタイプを使用した単純なファームウェアパッケージをカプセル化しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The firmware package protection is summarized as follows (see [CMS] for the full syntax):",
      "ja": "次のようにファームウェアパッケージの保護は、（完全な構文については[CMS]を参照）に要約されています。"
    },
    {
      "indent": 6,
      "text": "ContentInfo { contentType id-signedData, -- (1.2.840.113549.1.7.2) content SignedData }",
      "ja": "ContentInfo {contentTypeのID-たsignedData、 - （1.2.840.113549.1.7.2）コンテンツのSignedData}"
    },
    {
      "indent": 6,
      "text": "SignedData { version CMSVersion, -- always set to 3 digestAlgorithms DigestAlgorithmIdentifiers, -- Only one encapContentInfo EncapsulatedContentInfo, certificates CertificateSet, -- Signer cert. path crls CertificateRevocationLists, -- Optional signerInfos SET OF SignerInfo -- Only one }",
      "ja": "SignedDataの{バージョンCMSVersion、 - つだけencapContentInfo EncapsulatedContentInfo、証明書の証明書群、 -   - 署名者の証明書は常に3 digestAlgorithmsのDigestAlgorithmIdentifiersに設定。パスのCRLのCertificateRevocationLists、 - のSignerInfoのセットオプションsignerInfos  - つだけ}"
    },
    {
      "indent": 6,
      "text": "SignerInfo { version CMSVersion, -- always set to 3 sid SignerIdentifier, digestAlgorithm DigestAlgorithmIdentifier, signedAttrs SignedAttributes, -- Required signatureAlgorithm SignatureAlgorithmIdentifier, signature SignatureValue, unsignedAttrs UnsignedAttributes -- Optional }",
      "ja": "SignerInfo {バージョンCMSVersion、 - 常に3のSID SignerIdentifier、digestAlgorithm DigestAlgorithmIdentifier、signedAttrs signedAttributesのに設定 - 必須のsignatureAlgorithm SignatureAlgorithmIdentifier、署名SignatureValue、unsignedAttrs UnsignedAttributes  - オプション}"
    },
    {
      "indent": 6,
      "text": "EncapsulatedContentInfo { eContentType id-encryptedData, -- (1.2.840.113549.1.7.6) -- OR -- id-ct-compressedData, -- (1.2.840.113549.1.9.16.1.9) -- OR -- id-ct-firmwarePackage, -- (1.2.840.113549.1.9.16.1.16) eContent OCTET STRING } -- Contains EncryptedData OR -- CompressedData OR -- FirmwarePkgData",
      "ja": "EncapsulatedContentInfo {のeContentType ID-はEncryptedData、 - （1.2.840.113549.1.7.6） - または -  ID-CT-compressedData、 - （1.2.840.113549.1.9.16.1.9） - または -  ID-CT -firmwarePackage、 - （1.2.840.113549.1.9.16.1.16）e-コンテンツオクテット文字列は}  -  CompressedData OR  -   -  FirmwarePkgDataはEncryptedData ORを含み"
    },
    {
      "indent": 6,
      "text": "EncryptedData { version CMSVersion, -- Always set to 0 encryptedContentInfo EncryptedContentInfo, unprotectedAttrs UnprotectedAttributes -- Omit }",
      "ja": "EncryptedData {バージョンCMSVersion、 - 除外 - 常に0 encryptedContentInfo EncryptedContentInfo、unprotectedAttrs UnprotectedAttributesに設定}"
    },
    {
      "indent": 6,
      "text": "EncryptedContentInfo { contentType id-ct-compressedData, -- (1.2.840.113549.1.9.16.1.9) -- OR -- id-ct-firmwarePackage, -- (1.2.840.113549.1.9.16.1.16) contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier, encryptedContent OCTET STRING } -- Contains CompressedData OR -- FirmwarePkgData",
      "ja": "EncryptedContentInfo {contentTypeのID-CT-compressedData、 - （1.2.840.113549.1.9.16.1.9） - または -  ID-CT-firmwarePackage、 - （1.2.840.113549.1.9.16.1.16）contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier、暗号化コンテンツOCTET STRINGが}  -  FirmwarePkgData  -  CompressedData ORが含まれています"
    },
    {
      "indent": 6,
      "text": "CompressedData { version CMSVersion, -- Always set to 0 compressionAlgorithm CompressionAlgorithmIdentifier, encapContentInfo EncapsulatedContentInfo }",
      "ja": "CompressedData {バージョンCMSVersion、 - 常に0 compressionAlgorithm CompressionAlgorithmIdentifier、encapContentInfo EncapsulatedContentInfoに設定}"
    },
    {
      "indent": 6,
      "text": "EncapsulatedContentInfo { eContentType id-ct-firmwarePackage, -- (1.2.840.113549.1.9.16.1.16) eContent OCTET STRING -- Contains FirmwarePkgData }",
      "ja": "EncapsulatedContentInfo {のeContentType ID-CT-firmwarePackage、 - （1.2.840.113549.1.9.16.1.16）e-コンテンツオクテットSTRING  -  FirmwarePkgDataを含み}"
    },
    {
      "indent": 6,
      "text": "FirmwarePkgData OCTET STRING -- Contains firmware package",
      "ja": "FirmwarePkgDataオクテットSTRINGは - ファームウェアパッケージが含まれています"
    },
    {
      "indent": 0,
      "text": "2.1. Firmware Package Protection CMS Content Type Profile",
      "section_title": true,
      "ja": "2.1。ファームウェアパッケージ保護のCMSコンテンツタイプのプロフィール"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions for using the CMS ContentInfo, SignedData, EncryptedData, and CompressedData content types. It also defines the FirmwarePkgData content type.",
      "ja": "このセクションでは、CMS ContentInfo、SignedDataの、はEncryptedData、およびCompressedDataコンテンツタイプを使用するための規則を指定します。また、FirmwarePkgDataコンテンツタイプを定義します。"
    },
    {
      "indent": 0,
      "text": "2.1.1. ContentInfo",
      "section_title": true,
      "ja": "2.1.1。 ContentInfo"
    },
    {
      "indent": 3,
      "text": "The CMS requires that the outermost encapsulation be ContentInfo [CMS]. The fields of ContentInfo are used as follows:",
      "ja": "CMSは、最も外側のカプセル化がContentInfo [CMS]である必要があります。次のようにContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 6,
      "text": "contentType indicates the type of the associated content, and in this case, the encapsulated type is always SignedData. The id-signedData (1.2.840.113549.1.7.2) object identifier MUST be present in this field.",
      "ja": "contentTypeのは、関連するコンテンツのタイプを示し、この場合、カプセル化タイプは常にのSignedDataあります。 ID-たsignedData（1.2.840.113549.1.7.2）オブジェクト識別子は、この分野で存在していなければなりません。"
    },
    {
      "indent": 6,
      "text": "content holds the associated content, and in this case, the content field MUST contain SignedData.",
      "ja": "コンテンツは、関連するコンテンツを保持し、この場合には、コンテンツ分野はSignedDataのを含まなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.1.2. SignedData",
      "section_title": true,
      "ja": "2.1.2。 SignedData"
    },
    {
      "indent": 3,
      "text": "The SignedData content type [CMS] contains the signed firmware package (which might be compressed, encrypted, or compressed and then encrypted prior to signature), the certificates needed to validate the signature, and one digital signature value. The fields of SignedData are used as follows:",
      "ja": "SignedDataコンテンツタイプ[CMSは（圧縮、暗号化、または圧縮された後、署名する前に暗号化されるかもしれない）署名されたファームウェアパッケージ、署名を検証するために必要な証明書、および一つのデジタル署名値を含みます。次のようにのSignedDataのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "version is the syntax version number, and in this case, it MUST be set to 3.",
      "ja": "バージョンは構文バージョン番号であり、この場合には、3に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "digestAlgorithms is a collection of message digest algorithm identifiers, and in this case, it MUST contain a single message digest algorithm identifier. The message digest algorithm employed by the firmware package signer MUST be present.",
      "ja": "digestAlgorithmsは、アルゴリズム識別子をメッセージダイジェストの集まりであり、この場合には、それが単一のメッセージダイジェストアルゴリズム識別子を含まなければなりません。ファームウェアパッケージの署名者によって使用されるメッセージダイジェストアルゴリズムが存在しなければなりません。"
    },
    {
      "indent": 3,
      "text": "encapContentInfo contains the signed content, consisting of a content type identifier and the content itself. The use of the EncapsulatedContentInfo type is discussed further in Section 2.1.2.2.",
      "ja": "encapContentInfoコンテンツタイプ識別子とコンテンツ自体からなる、署名されたコンテンツを含みます。 EncapsulatedContentInfo型の使用は、セクション2.1.2.2で詳しく説明されています。"
    },
    {
      "indent": 3,
      "text": "certificates is an optional collection of certificates. If the trust anchor signed the firmware package directly, then certificates SHOULD be omitted. If it did not, then certificates SHOULD include the X.509 certificate of the firmware package signer. The set of certificates SHOULD be sufficient for the bootstrap loader to construct a certification path from the trust anchor to the firmware-signer's certificate. PKCS#6 extended certificates",
      "ja": "証明書は、証明書のオプションのコレクションです。トラストアンカーが直接ファームウェアパッケージに署名した場合、証明書は省略されるべきです。それがなかった場合は、証明書はファームウェアパッケージの署名者のX.509証明書を含むべきです。証明書のセットは、ファームウェア・署名者の証明書を信頼点から証明書パスを構築するためのブートストラップローダのために十分なものでなければなりません。 PKCS＃6の拡張証明書"
    },
    {
      "indent": 6,
      "text": "[PKCS#6] and attribute certificates (either version 1 or version 2) [X.509-97, X.509-00, ACPROFILE] MUST NOT be included in the set of certificates.",
      "ja": "[PKCS＃6]及び証明書（バージョン1またはバージョン2のいずれか）属性[X.509-97をX.509-00、ACPROFILE]は、証明書のセットに含まれてはいけません。"
    },
    {
      "indent": 3,
      "text": "crls is an optional collection of certificate revocation lists (CRLs), and in this case, CRLs SHOULD NOT be included by the firmware package signer. It is anticipated that firmware packages may be generated, signed, and made available in repositories for downloading into hardware modules. In such contexts, it would be difficult for the firmware package signer to include timely CRLs in the firmware package. However, because the CRLs are not covered by the signature, timely CRLs MAY be inserted by some other party before the firmware package is delivered to the hardware module.",
      "ja": "CRLは証明書失効リスト（CRL）のオプションの集まりであり、この場合には、CRLがファームウェアパッケージの署名者が含まれるべきではありません。ファームウェアパッケージは、生成された署名された、ハードウェアモジュールにダウンロードするためのリポジトリで利用可能にされてもよいことが予想されます。ファームウェアパッケージの署名者は、ファームウェアパッケージでタイムリーなCRLを含めるようにするために、このような状況では、それは難しいだろう。 CRLは署名によってカバーされていないので、ファームウェアパッケージをハードウェアモジュールに配信される前に、タイムリーなCRLは、他のいくつかの当事者が挿入されてもよいです。"
    },
    {
      "indent": 3,
      "text": "signerInfos is a collection of per-signer information, and in this case, the collection MUST contain exactly one SignerInfo. The use of the SignerInfo type is discussed further in Section 2.1.2.1.",
      "ja": "signerInfosごとの署名者情報の収集であり、この場合には、コレクションには、正確に一つのSignerInfoを含まなければなりません。 SignerInfoタイプの使用は、セクション2.1.2.1で詳しく説明されています。"
    },
    {
      "indent": 0,
      "text": "2.1.2.1. SignerInfo",
      "section_title": true,
      "ja": "2.1.2.1。 SignerInfo"
    },
    {
      "indent": 3,
      "text": "The firmware package signer is represented in the SignerInfo type. The fields of SignerInfo are used as follows:",
      "ja": "ファームウェアパッケージの署名者は、のSignerInfoタイプで表されます。次のようにのSignerInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "version is the syntax version number, and it MUST be 3.",
      "ja": "バージョンは構文バージョン番号であり、それは3でなければなりません。"
    },
    {
      "indent": 3,
      "text": "sid identifies the signer's public key. CMS supports two alternatives: issuerAndSerialNumber and subjectKeyIdentifier. However, the bootstrap loader MUST support the subjectKeyIdentifier alternative, which identifies the signer's public key directly. When this public key is contained in a certificate, this identifier SHOULD appear in the X.509 subjectKeyIdentifier extension.",
      "ja": "SIDは、署名者の公開鍵を特定します。 issuerAndSerialNumberとsubjectKeyIdentifier：CMSには二つの選択肢をサポートしています。しかし、ブートストラップローダは直接署名者の公開鍵を特定するsubjectKeyIdentifier代替を、サポートしなければなりません。この公開鍵証明書に含まれている場合は、この識別子はX.509 subjectKeyIdentifier拡張に表示されます。"
    },
    {
      "indent": 3,
      "text": "digestAlgorithm identifies the message digest algorithm, and any associated parameters, used by the firmware package signer. It MUST contain the message digest algorithms employed by the firmware package signer. (Note that this message digest algorithm identifier MUST be the same as the one carried in the digestAlgorithms value in SignedData.)",
      "ja": "digestAlgorithmファームウェアパッケージ署名者によって使用されるメッセージダイジェストアルゴリズム、および任意の関連するパラメータを識別する。これは、ファームウェアパッケージの署名者が採用したメッセージダイジェストアルゴリズムを含まなければなりません。 （このメッセージは、アルゴリズム識別子のSignedDataでdigestAlgorithms値で運ばれたものと同じでなければなりませんダイジェストことに留意されたいです。）"
    },
    {
      "indent": 3,
      "text": "signedAttrs is an optional collection of attributes that are signed along with the content. The signedAttrs are optional in the CMS, but in this specification, signedAttrs are REQUIRED for the firmware package; however, implementations MUST ignore unrecognized signed attributes. The SET OF attributes MUST be DER encoded [X.509-88]. Section 2.2 of this document lists the attributes that MUST be included in the collection; other attributes MAY be included as well.",
      "ja": "signedAttrsは、コンテンツと一緒に署名されている属性のオプションのコレクションです。 signedAttrsは、CMSでのオプションですが、この仕様では、signedAttrsは、ファームウェアパッケージのために必要とされます。しかし、実装は認識されていない署名属性を無視しなければなりません。属性のセットは、DERは[X.509-88】符号化されなければなりません。このドキュメントのセクション2.2は、コレクションに含まれなければならない属性を示します。他の属性も同様に含まれるかもしれません。"
    },
    {
      "indent": 3,
      "text": "signatureAlgorithm identifies the signature algorithm, and any associated parameters, used by the firmware package signer to generate the digital signature.",
      "ja": "signatureAlgorithmは署名アルゴリズムを識別し、ファームウェアパッケージの署名者によって使用される任意の関連するパラメータは、デジタル署名を生成します。"
    },
    {
      "indent": 3,
      "text": "signature is the digital signature value.",
      "ja": "署名は、デジタル署名値です。"
    },
    {
      "indent": 3,
      "text": "unsignedAttrs is an optional SET of attributes that are not signed. As described in Section 2.3, this set can only contain a single instance of the wrapped-firmware-decryption-key attribute and no others.",
      "ja": "unsignedAttrsが署名されていない属性のオプションSETです。 2.3節で述べたように、このセットだけで包まれ、ファームウェア復号鍵属性なし他の単一のインスタンスを含めることができます。"
    },
    {
      "indent": 0,
      "text": "2.1.2.2. EncapsulatedContentInfo",
      "section_title": true,
      "ja": "2.1.2.2。 EncapsulatedContentInfo"
    },
    {
      "indent": 3,
      "text": "The EncapsulatedContentInfo content type encapsulates the firmware package, which might be compressed, encrypted, or compressed and then encrypted prior to signature. The firmware package, in any of these formats, is carried within the EncapsulatedContentInfo type. The fields of EncapsulatedContentInfo are used as follows:",
      "ja": "EncapsulatedContentInfoコンテンツタイプは、圧縮され暗号化された、または圧縮された後、署名する前に暗号化されるかもしれないファームウェアパッケージをカプセル化します。ファームウェアパッケージは、これらの形式のいずれかで、EncapsulatedContentInfo型内に搬送されます。次のようにEncapsulatedContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "eContentType is an object identifier that uniquely specifies the content type, and in this case, the value MUST be id-encryptedData (1.2.840.113549.1.7.6), id-ct-compressedData (1.2.840.113549.1.9.16.1.9), or id-ct-firmwarePackage (1.2.840.113549.1.9.16.1.16). When eContentType contains id-encryptedData, the firmware package was encrypted prior to signing, and may also have been compressed prior to encryption. When it contains id-ct-compressedData, the firmware package was compressed prior to signing, but was not encrypted. When it contains id-ct-firmwarePackage, the firmware package was not compressed or encrypted prior to signing.",
      "ja": "eContentType一意コンテンツタイプを指定するオブジェクト識別子であり、この場合には、値は、ID-はEncryptedData（1.2.840.113549.1.7.6）である必要があり、ID-CT-compressedData（1.2.840.113549.1.9.16.1.9） 、またはID-CT-firmwarePackage（1.2.840.113549.1.9.16.1.16）。 eContentTypeは、ID-はEncryptedDataが含まれている場合は、ファームウェアパッケージが署名する前に暗号化し、また、暗号化の前に圧縮された可能性があります。それは、ID-CT-compressedDataが含まれている場合は、ファームウェアパッケージが署名する前に圧縮されたが、暗号化されていませんでした。それは、ID-CT-firmwarePackageが含まれている場合は、ファームウェアパッケージは、圧縮や署名する前に暗号化されていませんでした。"
    },
    {
      "indent": 3,
      "text": "eContent contains the signed firmware package, which might also be encrypted, compressed, or compressed and then encrypted, prior to signing. The content is encoded as an octet string. The eContent octet string need not be DER encoded.",
      "ja": "e-コンテンツはまた、従来の署名に、暗号化された圧縮、または圧縮して、暗号化される可能性があります署名したファームウェアパッケージが含まれています。コンテンツは、オクテット文字列として符号化されます。 e-コンテンツのオクテット文字列は、DERエンコードである必要はありません。"
    },
    {
      "indent": 0,
      "text": "2.1.3. EncryptedData",
      "section_title": true,
      "ja": "2.1.3。 EncryptedData"
    },
    {
      "indent": 3,
      "text": "The EncryptedData content type [CMS] contains the encrypted firmware package (which might be compressed prior to encryption). However, if the firmware package was not encrypted, the EncryptedData content type is not present. The fields of EncryptedData are used as follows: version is the syntax version number, and in this case, version MUST be 0.",
      "ja": "EncryptedDataコンテンツタイプ[CMSは]（暗号化の前に圧縮される可能性があります）暗号化されたファームウェアパッケージが含まれています。ファームウェアパッケージが暗号化されていなかった場合は、はEncryptedDataコンテンツタイプが存在しません。次のようにはEncryptedDataのフィールドが使用される：バージョンは構文バージョン番号であり、この場合には、バージョンは0でなければなりません。"
    },
    {
      "indent": 3,
      "text": "encryptedContentInfo is the encrypted content information. The use of the EncryptedContentInfo type is discussed further in Section 2.1.3.1.",
      "ja": "encryptedContentInfoは暗号化されたコンテンツの情報です。 EncryptedContentInfo型の使用は、セクション2.1.3.1で詳しく説明されています。"
    },
    {
      "indent": 3,
      "text": "unprotectedAttrs is an optional collection of unencrypted attributes, and in this case, unprotectedAttrs MUST NOT be present.",
      "ja": "unprotectedAttrsは暗号化されていない属性のオプションの集まりであり、この場合には、unprotectedAttrsは存在してはなりません。"
    },
    {
      "indent": 0,
      "text": "2.1.3.1. EncryptedContentInfo",
      "section_title": true,
      "ja": "2.1.3.1。 EncryptedContentInfo"
    },
    {
      "indent": 3,
      "text": "The encrypted firmware package, which might be compressed prior to encryption, is encapsulated in the EncryptedContentInfo type. The fields of EncryptedContentInfo are used as follows:",
      "ja": "暗号化の前に圧縮される可能性があります暗号化されたファームウェアパッケージは、EncryptedContentInfoタイプにカプセル化されます。次のようにEncryptedContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "contentType indicates the type of content, and in this case, it MUST contain either id-ct-compressedData (1.2.840.113549.1.9.16.1.9) or id-ct-firmwarePackage (1.2.840.113549.1.9.16.1.16). When it contains id-ct-compressedData, then the firmware package was compressed prior to encryption. When it contains id-ct-firmwarePackage, then the firmware package was not compressed prior to encryption.",
      "ja": "contentTypeのコンテンツの種類を示しており、この場合には、ID-CT-compressedData（1.2.840.113549.1.9.16.1.9）またはID-CT-firmwarePackage（1.2.840.113549.1.9.16.1.16）のいずれかを含まなければなりません。それは、ID-CT-compressedDataが含まれている場合は、その後、ファームウェアパッケージは、暗号化の前に圧縮しました。それは、ID-CT-firmwarePackageが含まれている場合は、その後、ファームウェアパッケージは、暗号化の前に圧縮されていませんでした。"
    },
    {
      "indent": 3,
      "text": "contentEncryptionAlgorithm identifies the firmware-encryption algorithm, and any associated parameters, used to encrypt the firmware package.",
      "ja": "contentEncryptionAlgorithmファームウェア、暗号化アルゴリズムを識別し、任意の関連するパラメータは、ファームウェアパッケージを暗号化するために使用されます。"
    },
    {
      "indent": 3,
      "text": "encryptedContent is the result of encrypting the firmware package. The field is optional; however, in this case, it MUST be present.",
      "ja": "暗号化コンテンツは、ファームウェアパッケージを暗号化した結果です。フィールドはオプションです。ただし、この場合には、それが存在しなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.1.4. CompressedData",
      "section_title": true,
      "ja": "2.1.4。 CompressedData"
    },
    {
      "indent": 3,
      "text": "The CompressedData content type [COMPRESS] contains the compressed firmware package. If the firmware package was not compressed, then the CompressedData content type is not present. The fields of CompressedData are used as follows:",
      "ja": "CompressedDataコンテンツタイプ[COMPRESS]は圧縮されたファームウェアパッケージが含まれています。ファームウェアパッケージが圧縮されていなかった場合は、CompressedDataコンテンツタイプが存在しません。次のようにCompressedDataのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "version is the syntax version number; in this case, it MUST be 0.",
      "ja": "バージョンは構文バージョン番号です。この場合には、それが0でなければなりません。"
    },
    {
      "indent": 3,
      "text": "compressionAlgorithm identifies the compression algorithm, and any associated parameters, used to compress the firmware package.",
      "ja": "compressionAlgorithmは、圧縮アルゴリズムを識別し、任意の関連するパラメータは、ファームウェアパッケージを圧縮するために使用されます。"
    },
    {
      "indent": 3,
      "text": "encapContentInfo is the compressed content, consisting of a content type identifier and the content itself. The use of the EncapsulatedContentInfo type is discussed further in Section 2.1.4.1.",
      "ja": "encapContentInfoコンテンツタイプ識別子とコンテンツ自体からなる、圧縮されたコンテンツです。 EncapsulatedContentInfo型の使用は、セクション2.1.4.1で詳しく説明されています。"
    },
    {
      "indent": 0,
      "text": "2.1.4.1. EncapsulatedContentInfo",
      "section_title": true,
      "ja": "2.1.4.1。 EncapsulatedContentInfo"
    },
    {
      "indent": 3,
      "text": "The CompressedData content type encapsulates the compressed firmware package, and it is carried within the EncapsulatedContentInfo type. The fields of EncapsulatedContentInfo are used as follows:",
      "ja": "CompressedDataコンテンツタイプは、圧縮されたファームウェアパッケージをカプセル化し、それはEncapsulatedContentInfo型内に搬送されます。次のようにEncapsulatedContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "eContentType is an object identifier that uniquely specifies the content type, and in this case, it MUST be the value of id-ct-firmwarePackage (1.2.840.113549.1.9.16.1.16).",
      "ja": "eContentType一意コンテンツタイプを指定するオブジェクト識別子であり、この場合には、ID-CT-firmwarePackage（1.2.840.113549.1.9.16.1.16）の値でなければなりません。"
    },
    {
      "indent": 3,
      "text": "eContent is the compressed firmware package, encoded as an octet string. The eContent octet string need not be DER encoded.",
      "ja": "e-コンテンツは、オクテット文字列として符号化された圧縮ファームウェアパッケージ、です。 e-コンテンツのオクテット文字列は、DERエンコードである必要はありません。"
    },
    {
      "indent": 0,
      "text": "2.1.5. FirmwarePkgData",
      "section_title": true,
      "ja": "2.1.5。 FirmwarePkgData"
    },
    {
      "indent": 3,
      "text": "The FirmwarePkgData content type contains the firmware package. It is a straightforward encapsulation in an octet string, and it need not be DER encoded.",
      "ja": "FirmwarePkgDataコンテンツタイプは、ファームウェアパッケージが含まれています。これは、オクテット文字列で簡単なカプセル化であり、それはDERエンコードである必要はありません。"
    },
    {
      "indent": 3,
      "text": "The FirmwarePkgData content type is identified by the id-ct-firmwarePackage object identifier:",
      "ja": "FirmwarePkgDataコンテンツタイプは、ID-CT-firmwarePackageオブジェクト識別子によって識別されます。"
    },
    {
      "indent": 6,
      "text": "id-ct-firmwarePackage OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) ct(1) 16 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The FirmwarePkgData content type is a simple octet string:",
      "ja": "FirmwarePkgDataコンテンツタイプは、単純なオクテット文字列です。"
    },
    {
      "indent": 6,
      "text": "FirmwarePkgData ::= OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2. Signed Attributes",
      "section_title": true,
      "ja": "2.2。署名された属性"
    },
    {
      "indent": 3,
      "text": "The firmware package signer MUST digitally sign a collection of attributes along with the firmware package. Each attribute in the collection MUST be DER encoded [X.509-88]. The syntax for attributes is defined in [CMS], but it is repeated here for convenience:",
      "ja": "ファームウェアパッケージの署名者は、デジタルファームウェアパッケージと一緒に属性のコレクションに署名しなければなりません。コレクション内の各属性は、DERは、[X.509-88]符号化されなければなりません。属性の構文は、[CMS]で定義されているが、それは便宜のためにここで繰り返されます。"
    },
    {
      "indent": 6,
      "text": "Attribute ::= SEQUENCE {\n  attrType OBJECT IDENTIFIER,\n  attrValues SET OF AttributeValue }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "AttributeValue ::= ANY",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Each of the attributes used with this profile has a single attribute value, even though the syntax is defined as a SET OF AttributeValue. There MUST be exactly one instance of AttributeValue present.",
      "ja": "このプロファイルで使用される属性のそれぞれは、構文はAttributeValueの集合として定義されていても、単一の属性値を持っています。 AttributeValueの存在の正確に一つのインスタンスがあるに違いありません。"
    },
    {
      "indent": 3,
      "text": "The SignedAttributes syntax within signerInfo is defined as a SET OF Attribute. The SignedAttributes MUST include only one instance of any particular attribute.",
      "ja": "SignerInfo内のsignedAttributesの構文は、属性のセットとして定義されます。 signedAttributesのは、特定の属性のインスタンスを1つだけ含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "The firmware package signer MUST include the following four attributes: content-type, message-digest, firmware-package-identifier, and target-hardware-module-identifiers.",
      "ja": "コンテンツタイプ、メッセージダイジェスト、ファームウェアパッケージ識別子、およびターゲット・ハードウェア・モジュール識別子：ファームウェアパッケージの署名者は、以下の4つの属性を含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "If the firmware package is encrypted, then the firmware package signer MUST also include the decrypt-key-identifier attribute.",
      "ja": "ファームウェアパッケージが暗号化されている場合は、ファームウェアパッケージの署名者も、解読キー識別子属性を含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "If the firmware package implements cryptographic algorithms, then the firmware package signer MAY also include the implemented-crypto-algorithms attribute. Similarly, if the firmware package implements compression algorithms, then the firmware package signer MAY also include the implemented-compress-algorithms attribute.",
      "ja": "ファームウェアパッケージは、暗号化アルゴリズムを実装している場合、ファームウェアパッケージの署名者も実装-暗号アルゴリズムは属性を含むかもしれません。ファームウェアパッケージは、圧縮アルゴリズムを実装している場合も同様に、その後、ファームウェアパッケージの署名者も実装-圧縮・アルゴリズムの属性を含むかもしれません。"
    },
    {
      "indent": 3,
      "text": "If the firmware package is intended for use only by specific communities, then the firmware package signer MUST also include the community-identifiers attribute.",
      "ja": "ファームウェアパッケージは、特定のコミュニティでの使用を目的とされている場合は、ファームウェアパッケージの署名者はまた、コミュニティ識別子の属性を含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "If the firmware package depends on the presence of one or more other firmware packages to operate properly, then the firmware package signer SHOULD also include the firmware-package-info attribute. For example, the firmware-package-info attribute dependencies field might indicate that the firmware package contains a dependency on a particular bootstrap loader or separation kernel.",
      "ja": "ファームウェアパッケージが正常に動作するために、1つのまたは複数の他のファームウェアパッケージの存在に依存する場合は、ファームウェアパッケージの署名者は、ファームウェア・パッケージ・情報属性を含むべきです。例えば、ファームウェア・パッケージ情報の依存関係フィールドはファームウェアパッケージには、特定のブートストラップローダーまたは分離カーネルへの依存性が含まれていることを示している可能性があります属性。"
    },
    {
      "indent": 3,
      "text": "The firmware package signer SHOULD also include the three following attributes: firmware-package-message-digest, signing-time, and content-hints. Additionally, if the firmware package signer has a certificate (meaning that the firmware package signer is not always configured as a trust anchor), then the firmware package signer SHOULD also include the signing-certificate attribute.",
      "ja": "ファームウェア・パッケージ・メッセージ・ダイジェスト、署名・タイム、およびコンテンツのヒント：ファームウェアパッケージの署名者は、3次の属性をも含むべきです。ファームウェアパッケージの署名者証明書（ファームウェアパッケージの署名者は、常にトラストアンカーとして設定されていないことを意味する）を持っていればさらに、その後、ファームウェアパッケージの署名者も署名証明書の属性を含めるべきです。"
    },
    {
      "indent": 3,
      "text": "The firmware package signer MAY include any other attribute that it deems appropriate.",
      "ja": "ファームウェアパッケージの署名者は、それが適切と判断、他の属性を含むかもしれません。"
    },
    {
      "indent": 0,
      "text": "2.2.1. Content Type",
      "section_title": true,
      "ja": "2.2.1。コンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The firmware package signer MUST include a content-type attribute with the value of id-encryptedData (1.2.840.113549.1.7.6), id-ct-compressedData (1.2.840.113549.1.9.16.1.9), or id-ct-firmwarePackage (1.2.840.113549.1.9.16.1.16). When it contains id-encryptedData, the firmware package was encrypted prior to signing. When it contains id-ct-compressedData, the firmware package was compressed prior to signing, but was not encrypted. When it contains id-ct-firmwarePackage, the firmware package was not compressed or encrypted prior to signing. Section 11.1 of [CMS] defines the content-type attribute.",
      "ja": "ファームウェアパッケージの署名者は、ID-CT-compressedData（1.2.840.113549.1.9.16.1.9）、またはID-CT-、ID-はEncryptedData（1.2.840.113549.1.7.6）の値を持つコンテンツタイプ属性を含まなければなりませんfirmwarePackage（1.2.840.113549.1.9.16.1.16）。それは、ID-はEncryptedDataが含まれている場合は、ファームウェアパッケージが署名する前に暗号化されました。それは、ID-CT-compressedDataが含まれている場合は、ファームウェアパッケージが署名する前に圧縮されたが、暗号化されていませんでした。それは、ID-CT-firmwarePackageが含まれている場合は、ファームウェアパッケージは、圧縮や署名する前に暗号化されていませんでした。 [CMS]のセクション11.1には、コンテンツ・タイプの属性を定義します。"
    },
    {
      "indent": 0,
      "text": "2.2.2. Message Digest",
      "section_title": true,
      "ja": "2.2.2。メッセージダイジェスト"
    },
    {
      "indent": 3,
      "text": "The firmware package signer MUST include a message-digest attribute, having as its value the message digest computed on the encapContentInfo eContent octet string, as defined in Section 2.1.2.2. This octet string contains the firmware package, and it MAY be compressed, encrypted, or both compressed and encrypted. Section 11.2 of [CMS] defines the message-digest attribute.",
      "ja": "ファームウェアパッケージの署名者は、セクション2.1.2.2で定義されるように、encapContentInfo e-コンテンツオクテットストリングで計算メッセージダイジェスト値として有する、メッセージダイジェスト属性を含まなければなりません。このオクテット文字列は、ファームウェアパッケージが含まれている、そしてそれは、暗号化、圧縮、または両方の圧縮と暗号化されてもよいです。 [CMS]のセクション11.2はメッセージダイジェスト属性を定義します。"
    },
    {
      "indent": 0,
      "text": "2.2.3. Firmware Package Identifier",
      "section_title": true,
      "ja": "2.2.3。ファームウェアパッケージ識別子"
    },
    {
      "indent": 3,
      "text": "The firmware-package-identifier attribute names the protected firmware package. Two approaches to naming firmware packages are supported: legacy and preferred. The firmware package signer MUST include a firmware-package-identifier attribute using one of these name forms.",
      "ja": "ファームウェアパッケージ識別子は、名前に保護されたファームウェアパッケージを属性。ファームウェアパッケージに名前を付けるには、2つの方法がサポートされています：レガシー、好ましいです。ファームウェアパッケージの署名者は、これらの名前のいずれかの形式を使用してファームウェアパッケージ-identifier属性を含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "A legacy firmware package name is an octet string, and no structure within the octet string is assumed.",
      "ja": "従来のファームウェアパッケージ名は、オクテット文字列であり、オクテット文字列内には構造が想定されていません。"
    },
    {
      "indent": 3,
      "text": "A preferred firmware package name is a combination of an object identifier and a version number. The object identifier names a collection of functions implemented by the firmware package, and the version number is a non-negative integer that identifies a particular build or release of the firmware package.",
      "ja": "好ましいファームウェアパッケージの名前は、オブジェクト識別子とバージョン番号の組み合わせです。オブジェクト識別子名ファームウェアパッケージによって実現される機能の収集、およびバージョン番号ファームウェアパッケージの特定のビルドまたは放出を識別する非負の整数です。"
    },
    {
      "indent": 3,
      "text": "If a firmware package with a disastrous flaw is released, the firmware package that repairs the previously distributed flaw MAY designate a stale firmware package version to prevent the reloading of the flawed version. The hardware module bootstrap loader SHOULD prevent subsequent rollback to the stale version or versions earlier than the stale version. When the legacy firmware package name form is used, the stale version is indicated by a stale legacy firmware package name, which is an octet string. We assume that the firmware package signer and the bootstrap loader can determine whether a given legacy firmware package name represents a version that is more recent than the stale one. When the preferred firmware package name form is used, the stale version is indicated by a stale version number, which is an integer.",
      "ja": "悲惨な欠陥とファームウェアパッケージがリリースされている場合は、ファームウェアパッケージには、その修理以前に配布さ欠陥は欠陥のあるバージョンの再読み込みを防ぐために、古いファームウェアパッケージのバージョンを指定することができます。ハードウェア・モジュール、ブートストラップローダが古いバージョンまたは失効したバージョンよりも前のバージョンに続いてロールバックを防ぐべきです。レガシーファームウェアパッケージ名形式を使用した場合、失効したバージョンは、オクテットストリングである陳腐レガシーファームウェアパッケージ名によって示されます。私たちは、ファームウェアパッケージの署名者とブートストラップローダが与えられ、従来のファームウェアパッケージ名が古い1よりも新しいバージョンを表しているかどうかを判断できることを前提としています。好ましいファームウェアパッケージ名形式を使用した場合、失効バージョンは整数で失効バージョン番号で示されています。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the firmware-package-identifier attribute:",
      "ja": "以下のオブジェクト識別子は、ファームウェア・パッケージ識別子属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-aa-firmwarePackageID OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 35 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The firmware-package-identifier attribute values have ASN.1 type FirmwarePackageIdentifier:",
      "ja": "ファームウェアパッケージ-identifier属性値はASN.1タイプFirmwarePackageIdentifierがあります。"
    },
    {
      "indent": 6,
      "text": "FirmwarePackageIdentifier ::= SEQUENCE {\n  name PreferredOrLegacyPackageIdentifier,\n  stale PreferredOrLegacyStalePackageIdentifier OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "PreferredOrLegacyPackageIdentifier ::= CHOICE {\n  preferred PreferredPackageIdentifier,\n  legacy OCTET STRING }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "PreferredPackageIdentifier ::= SEQUENCE {\n  fwPkgID OBJECT IDENTIFIER,\n  verNum INTEGER (0..MAX) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "PreferredOrLegacyStalePackageIdentifier ::= CHOICE {\n  preferredStaleVerNum INTEGER (0..MAX),\n  legacyStaleVersion OCTET STRING }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.4. Target Hardware Module Identifiers",
      "section_title": true,
      "ja": "2.2.4。ターゲットハードウェアモジュールの識別子"
    },
    {
      "indent": 3,
      "text": "The target-hardware-module-identifiers attribute names the types of hardware modules that the firmware package supports. A unique object identifier names each supported hardware model type and revision.",
      "ja": "ターゲット・ハードウェア・モジュールの識別子は、名前にファームウェアパッケージがサポートするハードウェアモジュールの属性タイプ。一意のオブジェクト識別子名は、それぞれのハードウェアモデルのタイプとリビジョンをサポート。"
    },
    {
      "indent": 3,
      "text": "The bootstrap loader MUST reject the firmware package if its own hardware module type identifier is not listed in the target-hardware-module-identifiers attribute.",
      "ja": "独自のハードウェアモジュールタイプ識別子は、ターゲット・ハードウェア・モジュールの識別子属性にリストされていない場合は、ブートストラップローダはファームウェアパッケージを拒絶しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the target-hardware-module-identifiers attribute:",
      "ja": "以下のオブジェクト識別子は、ターゲット・ハードウェア・モジュールの識別子の属性を識別する。"
    },
    {
      "indent": 6,
      "text": "id-aa-targetHardwareIDs OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 36 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The target-hardware-module-identifiers attribute values have ASN.1 type TargetHardwareIdentifiers:",
      "ja": "ターゲット・ハードウェア・モジュールの識別子は、値がASN.1タイプTargetHardwareIdentifiersを持っている属性："
    },
    {
      "indent": 6,
      "text": "TargetHardwareIdentifiers ::= SEQUENCE OF OBJECT IDENTIFIER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.5. Decrypt Key Identifier",
      "section_title": true,
      "ja": "2.2.5。復号化キー識別子"
    },
    {
      "indent": 3,
      "text": "The decrypt-key-identifier attribute names the symmetric key needed to decrypt the encapsulated firmware package. The CMS EncryptedData content type is used when the firmware package is encrypted. The decrypt-key-identifier signed attribute is carried in the SignedData content type that encapsulates EncryptedData content type, naming the symmetric key needed to decrypt the firmware package. No particular structure is imposed on the key identifier. The means by which the firmware-decryption key is securely distributed to all modules that are authorized to use the associated firmware package is beyond the scope of this specification; however, an optional mechanism for securely distributing the firmware-decryption key with the firmware package is specified in Section 2.3.1.",
      "ja": "解読キー識別子は、名前にカプセル化されたファームウェアパッケージを解読するために必要な対称キー属性。ファームウェアパッケージが暗号化されたときCMSはEncryptedDataコンテンツタイプが使用されています。解読キー識別子署名している属性は、ファームウェアパッケージを解読するために必要な対称鍵を命名、はEncryptedDataコンテンツタイプをカプセル化するSignedDataのコンテンツタイプで運ばれます。いかなる特定の構造はキー識別子に課されていません。ファームウェア復号鍵を安全に関連したファームウェアパッケージを使用することを許可されたすべてのモジュールに分配する手段は、本明細書の範囲外です。しかし、確実ファームウェアパッケージとファームウェア復号鍵を配布するための任意のメカニズムはセクション2.3.1で指定されています。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the decrypt-key-identifier attribute:",
      "ja": "以下のオブジェクト識別子は、復号化鍵識別子属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-aa-decryptKeyID OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 37 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The decrypt-key-identifier attribute values have ASN.1 type DecryptKeyIdentifier:",
      "ja": "解読キー識別子の属性値はASN.1タイプDecryptKeyIdentifierがあります。"
    },
    {
      "indent": 6,
      "text": "DecryptKeyIdentifier ::= OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.6. Implemented Crypto Algorithms",
      "section_title": true,
      "ja": "2.2.6。実装暗号アルゴリズム"
    },
    {
      "indent": 3,
      "text": "The implemented-crypto-algorithms attribute MAY be present in the SignedAttributes, and it names the cryptographic algorithms that are implemented by the firmware package and available to applications. Only those algorithms that are made available at the interface of the cryptographic module are listed. Any cryptographic algorithm that is used internally and is not accessible via the cryptographic module interface MUST NOT be listed. For example, if the firmware package implements the decryption algorithm for future firmware package installations and this algorithm is not made available for other uses, then the firmware-decryption algorithm would not be listed.",
      "ja": "実装-暗号アルゴリズムがsignedAttributesの中に存在しても、それは名前ファームウェアパッケージやアプリケーションに利用可能で実装されている暗号化アルゴリズムMAY属性。暗号モジュールの界面で利用可能にされるだけアルゴリズムが記載されています。内部的に使用し、暗号モジュールインタフェースを介してアクセスすることはできませんされているすべての暗号アルゴリズムがリストされてはなりません。ファームウェアパッケージは、将来のファームウェアパッケージをインストールするための復号化アルゴリズムを実装しており、このアルゴリズムは、他の用途に利用できるようにされていない場合たとえば、その後、ファームウェア・復号アルゴリズムは表示されません。"
    },
    {
      "indent": 3,
      "text": "The object identifier portion of AlgorithmIdentifier identifies an algorithm and its mode of use. No algorithm parameters are included. Cryptographic algorithms include traffic-encryption algorithms, key-encryption algorithms, key transport algorithms, key agreement algorithms, one-way hash algorithms, and digital signature algorithms. Cryptographic algorithms do not include compression algorithms.",
      "ja": "AlgorithmIdentifierのオブジェクト識別子部分は、アルゴリズム及びその使用モードを識別する。いいえアルゴリズムパラメータが含まれていません。暗号化アルゴリズムは、トラフィックの暗号化アルゴリズム、鍵暗号化アルゴリズム、キートランスポート・アルゴリズム、キー合意アルゴリズム、一方向ハッシュアルゴリズム、およびデジタル署名アルゴリズムを含みます。暗号化アルゴリズムは、圧縮アルゴリズムが含まれていません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the implemented-crypto-algorithms attribute:",
      "ja": "以下のオブジェクト識別子は実装-暗号アルゴリズム属性を識別する。"
    },
    {
      "indent": 6,
      "text": "id-aa-implCryptoAlgs OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 38 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The implemented-crypto-algorithms attribute values have ASN.1 type ImplementedCryptoAlgorithms:",
      "ja": "実装-暗号アルゴリズムは、値はASN.1タイプImplementedCryptoAlgorithmsを持っている属性："
    },
    {
      "indent": 6,
      "text": "ImplementedCryptoAlgorithms ::= SEQUENCE OF OBJECT IDENTIFIER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.7. Implemented Compression Algorithms",
      "section_title": true,
      "ja": "2.2.7。実装圧縮アルゴリズム"
    },
    {
      "indent": 3,
      "text": "The implemented-compress-algorithms attribute MAY be present in the SignedAttributes, and it names the compression algorithms that are implemented by the firmware package and available to applications. Only those algorithms that are made available at the interface of the hardware module are listed. Any compression algorithm that is used internally and is not accessible via the hardware module interface MUST NOT be listed. For example, if the firmware package implements a decompression algorithm for future firmware package installations and this algorithm is not made available for other uses, then the firmware-decompression algorithm would not be listed.",
      "ja": "実装・圧縮・アルゴリズムは、属性signedAttributesの中に存在しても、それは名前ファームウェアパッケージやアプリケーションが利用できることにより、実装されている圧縮アルゴリズムMAY。ハードウェアモジュールのインタフェースで利用可能にされるだけアルゴリズムが記載されています。内部的に使用し、ハードウェアモジュールのインタフェースを介してアクセスすることはできませんされているすべての圧縮アルゴリズムがリストされてはなりません。ファームウェアパッケージは、将来のファームウェアパッケージのインストールのための解凍アルゴリズムを実装しており、このアルゴリズムは、他の用途に利用できるようにされていない場合たとえば、その後、ファームウェア・解凍アルゴリズムは表示されません。"
    },
    {
      "indent": 3,
      "text": "The object identifier portion of AlgorithmIdentifier identifies a compression algorithm. No algorithm parameters are included.",
      "ja": "AlgorithmIdentifierのオブジェクト識別子部分は、圧縮アルゴリズムを識別する。いいえアルゴリズムパラメータが含まれていません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the implemented-compress-algorithms attribute:",
      "ja": "以下のオブジェクト識別子は、実装・圧縮・アルゴリズムの属性を識別する。"
    },
    {
      "indent": 6,
      "text": "id-aa-implCompressAlgs OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 43 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The implemented-compress-algorithms attribute values have ASN.1 type ImplementedCompressAlgorithms:",
      "ja": "実装・圧縮・アルゴリズムは、値はASN.1タイプImplementedCompressAlgorithmsを持っている属性："
    },
    {
      "indent": 6,
      "text": "ImplementedCompressAlgorithms ::= SEQUENCE OF OBJECT IDENTIFIER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.8. Community Identifiers",
      "section_title": true,
      "ja": "2.2.8。コミュニティ識別子"
    },
    {
      "indent": 3,
      "text": "If present in the SignedAttributes, the community-identifiers attribute names the communities that are permitted to execute the firmware package. The bootstrap loader MUST reject the firmware package if the hardware module is not a member of one of the identified communities. The means of assigning community membership is beyond the scope of this specification.",
      "ja": "signedAttributesの中に存在する場合、コミュニティ識別子は、名前ファームウェアパッケージを実行することが許可されているコミュニティを属性。ハードウェアモジュールが特定のコミュニティの1つのメンバーでない場合は、ブートストラップローダはファームウェアパッケージを拒絶しなければなりません。コミュニティのメンバーシップを割り当てる手段は、この仕様の範囲を超えています。"
    },
    {
      "indent": 3,
      "text": "The community-identifiers attributes names the authorized communities by a list of community object identifiers, by a list of specific hardware modules, or by a combination of the two lists. A specific hardware module is specified by the combination of the hardware module identifier (as defined in Section 2.2.4) and a serial number. To facilitate compact representation of serial numbers, a contiguous block can be specified by the lowest authorized serial number and the highest authorized serial number. Alternatively, all of the serial numbers associated with a hardware module family identifier can be specified with the NULL value.",
      "ja": "コミュニティ識別子は、特定のハードウェアモジュールのリストで、コミュニティのオブジェクト識別子のリストで名前認可のコミュニティ属性、または二つのリストの組み合わせによる。特定のハードウェア・モジュール、ハードウェアモジュール識別子（セクション2.2.4で定義されるように）とシリアル番号の組み合わせで指定されています。シリアル番号のコンパクトな表現を容易にするために、連続したブロックは、最小承認シリアル番号と最高権限シリアル番号で指定することができます。あるいは、ハードウェアモジュールファミリー識別子に関連付けられたシリアル番号のすべてがNULL値で指定することができます。"
    },
    {
      "indent": 3,
      "text": "If the bootstrap loader does not have a mechanism for obtaining a list of object identifiers that identify the communities to which the hardware module is a member, then the bootstrap loader MUST behave as though the list is empty. Similarly, if the bootstrap loader does not have access to the hardware module serial number, then the bootstrap loader MUST behave as though the hardware module is not included on the list of authorized hardware modules.",
      "ja": "ブートストラップローダは、ハードウェアモジュールがメンバーであるにコミュニティを識別するオブジェクト識別子のリストを取得するためのメカニズムを持っていない場合、ブートストラップローダは、リストが空であるかのように動作しなければなりません。ブートストラップローダは、ハードウェアモジュールのシリアル番号へのアクセス権を持っていない場合、ハードウェアモジュールが許可ハードウェアモジュールのリストに含まれていないかのように同様に、その後、ブートストラップローダが振る舞うしなければなりません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the community-identifiers attribute:",
      "ja": "以下のオブジェクト識別子は、地域密着型の識別子属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-aa-communityIdentifiers OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 40 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The community-identifiers attribute values have ASN.1 type CommunityIdentifiers:",
      "ja": "コミュニティ識別子は、値がASN.1タイプCommunityIdentifiersを持っている属性："
    },
    {
      "indent": 6,
      "text": "CommunityIdentifiers ::= SEQUENCE OF CommunityIdentifier",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "CommunityIdentifier ::= CHOICE {\n  communityOID OBJECT IDENTIFIER,\n  hwModuleList HardwareModules }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "HardwareModules ::= SEQUENCE {\n  hwType OBJECT IDENTIFIER,\n  hwSerialEntries SEQUENCE OF HardwareSerialEntry }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "HardwareSerialEntry ::= CHOICE {\n  all NULL,\n  single OCTET STRING,\n  block SEQUENCE {\n    low OCTET STRING,\n    high OCTET STRING } }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.9. Firmware Package Information",
      "section_title": true,
      "ja": "2.2.9。ファームウェアパッケージ情報"
    },
    {
      "indent": 3,
      "text": "If a hardware module supports more than one type of firmware package, then the firmware package signer SHOULD include the firmware-package-info attribute with a populated fwPkgType field to identify the firmware package type. This value can aid the bootstrap loader in the correct placement of the firmware package within the hardware module. The firmware package type is an INTEGER, and the meaning of the integer value is specific to each hardware module. For example, a hardware module could assign different integer values for a bootstrap loader, a separation kernel, and an application.",
      "ja": "ハードウェアモジュールは、ファームウェアパッケージの複数のタイプをサポートしている場合は、ファームウェアパッケージの署名者は、ファームウェアパッケージ情報は、ファームウェアパッケージの種類を識別するために、人口fwPkgTypeフィールドに属性を含むべきです。この値は、ハードウェア・モジュール内のファームウェアパッケージの正しい配置にブートストラップローダを支援することができます。ファームウェアパッケージのタイプは整数であり、整数値の意味は、各ハードウェアモジュールに固有です。例えば、ハードウェアモジュールは、ブートストラップローダ、分離カーネル、およびアプリケーションのための異なる整数値を割り当てることができます。"
    },
    {
      "indent": 3,
      "text": "Some hardware module architectures permit one firmware package to use routines provided by another. If the firmware package contains a dependency on another, then the firmware package signer SHOULD also include the firmware-package-info attribute with a populated dependencies field. If the firmware package does not depend on any other firmware packages, then the firmware package signer MUST NOT include the firmware-package-info attribute with a populated dependencies field.",
      "ja": "一部のハードウェアモジュール・アーキテクチャは、他が提供するルーチンを使用する1つのファームウェアパッケージを許可します。ファームウェアパッケージが別の依存が含まれている場合、ファームウェアパッケージの署名者はまた、人口の依存関係の分野でのファームウェア・パッケージ・情報属性を含むべきです。ファームウェアパッケージは、他のファームウェアのパッケージに依存しない場合は、ファームウェアパッケージの署名者は人口の依存関係の分野でのファームウェア・パッケージ・情報属性を含んではいけません。"
    },
    {
      "indent": 3,
      "text": "Firmware package dependencies are identified by the firmware package identifier or by information contained in the firmware package itself, and in either case the bootstrap loader ensures that the dependencies are met. The bootstrap loader MUST reject a firmware package load if it identifies a dependency on a firmware package that is not already loaded. Also, the bootstrap loader MUST reject a firmware package load if the action will result in a configuration where the dependencies of an already loaded firmware package will no longer be satisfied. As described in Section 2.2.3, two approaches to naming firmware packages are supported: legacy and preferred. When the legacy firmware package name form is used, the dependency is indicated by a legacy firmware package name. We assume that the firmware package signer and the bootstrap loader can determine whether a given legacy firmware package name represents the named version of an acceptable newer version. When the preferred firmware package name form is used, an object identifier and an integer are provided. The object identifier MUST exactly match the object identifier portion of a preferred firmware package name associated with a firmware package that is already loaded, and the integer MUST be less than or equal to the integer portion of the preferred firmware package name associated with the same firmware package. That is, the dependency specifies the minimum value of the version that is acceptable.",
      "ja": "ファームウェアパッケージの依存関係は、ファームウェアパッケージ識別子によって、またはファームウェアパッケージ自体に含まれる情報によって識別され、いずれの場合も、ブートストラップローダは、依存関係が満たされていることを保証しています。それはまだロードされていないファームウェアパッケージへの依存関係を特定した場合、ブートストラップローダはファームウェアパッケージの負荷を拒絶しなければなりません。アクションがすでにロードされたファームウェアパッケージの依存関係がもはや満足される設定になります場合にも、ブートストラップローダはファームウェアパッケージの負荷を拒絶しなければなりません。 2.2.3項で述べたように、ファームウェアパッケージに名前を付けるには、2つの方法がサポートされています：レガシー、好ましいです。レガシーファームウェアパッケージ名の形式を使用する場合、依存関係は、従来のファームウェアパッケージ名で示されています。私たちは、ファームウェアパッケージの署名者とブートストラップローダが与えられ、従来のファームウェアのパッケージ名が許容できる新しいバージョンの名前のバージョンを表しているかどうかを判断できることを前提としています。好ましいファームウェアパッケージ名形式を使用した場合、オブジェクト識別子と、整数が設けられています。オブジェクト識別子は、正確に既にロードされているファームウェアパッケージに関連付けられた好ましいファームウェアパッケージの名前のオブジェクト識別子部分と一致しなければならない、と整数は、同じファームウェアに関連付けられた好ましいファームウェアパッケージ名の整数部分以下でなければなりませんパッケージ。つまり、依存性が許容されるバージョンの最小値を指定します。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the firmware-package-info attribute:",
      "ja": "以下のオブジェクト識別子は、ファームウェアパッケージ-info属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-aa-firmwarePackageInfo OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 42 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The firmware-package-info attribute values have ASN.1 type FirmwarePackageInfo:",
      "ja": "ファームウェアパッケージ情報は、値がASN.1タイプFirmwarePackageInfoを持っている属性："
    },
    {
      "indent": 6,
      "text": "FirmwarePackageInfo ::= SEQUENCE {\n  fwPkgType INTEGER OPTIONAL,\n  dependencies SEQUENCE OF\n    PreferredOrLegacyPackageIdentifier OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.10. Firmware Package Message Digest",
      "section_title": true,
      "ja": "2.2.10。ファームウェアパッケージメッセージダイジェスト"
    },
    {
      "indent": 3,
      "text": "The firmware package signer SHOULD include a firmware-package-message-digest attribute, which provides the message digest algorithm and the message digest value computed on the firmware package. The message digest is computed on the firmware package prior to any compression, encryption, or signature processing. The bootstrap loader MAY use this message digest to confirm that the intended firmware package has been recovered after all of the layers of encapsulation are removed.",
      "ja": "ファームウェアパッケージの署名者は、メッセージがファームウェアパッケージで計算アルゴリズムとメッセージダイジェスト値をダイジェスト提供ファームウェアパッケージメッセージダイジェスト属性を含むべきです。メッセージダイジェストは、従来の任意の圧縮、暗号化、または署名処理のファームウェアパッケージに計算されます。ブートストラップローダは、カプセル化の層の全てが除去された後、目的とするファームウェアパッケージが回復されたことを確認するために、このメッセージダイジェストを使用するかもしれません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the firmware-package-message-digest attribute:",
      "ja": "以下のオブジェクト識別子は、ファームウェア・パッケージ・メッセージダイジェスト属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-aa-fwPkgMessageDigest OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 41 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The firmware-package-message-digest attribute values have ASN.1 type FirmwarePackageMessageDigest:",
      "ja": "ファームウェア・パッケージ・メッセージダイジェスト属性値はASN.1タイプFirmwarePackageMes​​sageDigestがあります。"
    },
    {
      "indent": 6,
      "text": "FirmwarePackageMessageDigest ::= SEQUENCE {\n  algorithm AlgorithmIdentifier,\n  msgDigest OCTET STRING }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2.11. Signing Time",
      "section_title": true,
      "ja": "2.2.11。時間の署名"
    },
    {
      "indent": 3,
      "text": "The firmware package signer SHOULD include a signing-time attribute, specifying the time at which the signature was applied to the firmware package. Section 11.3 of [CMS] defines the signing-time attribute.",
      "ja": "ファームウェアパッケージの署名者は、署名がファームウェアパッケージに適用された時刻を指定して、署名時間属性を含むべきです。 [CMS]のセクション11.3は、署名時の属性を定義します。"
    },
    {
      "indent": 0,
      "text": "2.2.12. Content Hints",
      "section_title": true,
      "ja": "2.2.12。コンテンツのヒント"
    },
    {
      "indent": 3,
      "text": "The firmware package signer SHOULD include a content-hints attribute, including a brief text description of the firmware package. The text is encoded in UTF-8, which supports most of the world's writing systems [UTF-8]. Section 2.9 of [ESS] defines the content-hints attribute.",
      "ja": "ファームウェアパッケージの署名者は、コンテンツのヒントは、ファームウェアパッケージの簡単な説明文を含め、属性含めるべきです。テキストは、世界の書記体系[UTF-8]のほとんどをサポートしており、UTF-8でエンコードされます。 [ESS]のセクション2.9は、コンテンツのヒント属性を定義します。"
    },
    {
      "indent": 3,
      "text": "When multiple layers of encapsulation are employed, the content-hints attribute is included in the outermost SignedData to provide information about the innermost content. In this case, the content-hints attribute provides a brief text description of the firmware package, which can help a person select the correct firmware package when more than one is available.",
      "ja": "カプセルの複数の層が使用される場合、コンテンツのヒント属性は、最も内側のコンテンツに関する情報を提供するために、最も外側のSignedDataに含まれています。この場合、コンテンツのヒントは、属性の2つ以上が利用可能になったとき、人が正しいファームウェアパッケージを選択することができますファームウェアパッケージの簡単なテキスト説明を提供します。"
    },
    {
      "indent": 3,
      "text": "When the preferred firmware package name forms are used, the content-hints attribute can provide a linkage to a legacy firmware package name. This is especially helpful when an existing configuration management system is in use, but the features associated with the preferred firmware package name are deemed useful. A firmware package name associated with such a configuration management system might look something like \"R1234.C0(AJ11).D62.A02.11(b).\" Including these firmware package names in the text description may be helpful to developers by providing a clear linkage between the two name forms.",
      "ja": "優先ファームウェアパッケージの名前形式が使用されている場合は、コンテンツのヒント属性は、従来のファームウェアパッケージ名にリンクを提供することができます。既存の構成管理システムを使用している場合に特に便利ですが、好ましいファームウェアパッケージ名に関連付けられた機能が有用であると考えています。このような構成管理システムに関連したファームウェアパッケージ名は「.D62.A02.11をR1234.C0（AJ11）（b）に。」のように見えるかもしれませんテキストの説明ではこれらのファームウェアのパッケージ名を含めると2つの名前の形式との間に明確なリンクを提供することで、開発者に役立つかもしれません。"
    },
    {
      "indent": 3,
      "text": "The content-hints attribute contains two fields, and in this case, both fields MUST be present. The fields of ContentHints are used as follows:",
      "ja": "コンテンツのヒント属性は、2つのフィールドが含まれており、この場合には、両方のフィールドが存在しなければなりません。次のようにContentHintsのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "contentDescription provides a brief text description of the firmware package.",
      "ja": "contentDescriptionは、ファームウェアパッケージの簡単な説明テキストを提供します。"
    },
    {
      "indent": 3,
      "text": "contentType provides the content type of the inner most content type, and in this case, it MUST be id-ct-firmwarePackage (1.2.840.113549.1.9.16.1.16).",
      "ja": "contentTypeは、最も内側のコンテンツタイプのコンテンツタイプを提供し、この場合には、ID-CT-firmwarePackage（1.2.840.113549.1.9.16.1.16）でなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.2.13. Signing Certificate",
      "section_title": true,
      "ja": "2.2.13。署名証明書"
    },
    {
      "indent": 3,
      "text": "When the firmware-signer's public key is contained in a certificate, the firmware package signer SHOULD include a signing-certificate attribute to identify the certificate that was employed. However, if the firmware package signature does not have a certificate (meaning that the signature will only be validated with the trust anchor public key), then the firmware package signer is unable to include a signing-certificate attribute. Section 5.4 of [ESS] defines this attribute.",
      "ja": "ファームウェア署名者の公開鍵証明書に含まれている場合は、ファームウェアパッケージの署名者が採用した証明書を識別するために、署名証明書の属性を含めるべきです。ファームウェアパッケージの署名が証明書を持っていない場合は、（署名は唯一のトラストアンカーの公開鍵で検証されることを意味する）、その後、ファームウェアパッケージの署名者が署名証明書の属性を含めることができません。 [ESS]の5.4節には、この属性を定義します。"
    },
    {
      "indent": 3,
      "text": "The signing-certificate attribute contains two fields: certs and policies. The certs field MUST be present, and the policies field MAY be present. The fields of SigningCertificate are used as follows:",
      "ja": "証明書と政策：署名証明書属性は、2つのフィールドが含まれています。本命フィールドが存在しなければならない、との方針のフィールドが存在してもよいです。次のようにSigningCertificateのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "certs contains a sequence of certificate identifiers. In this case, sequence of certificate identifiers contains a single entry. The certs field MUST contain only the certificate identifier of the certificate that contains the public key used to verify the firmware package signature. The certs field uses the ESSCertID syntax specified in Section 5.4 of [ESS], and it is comprised of the SHA-1 hash [SHA1] of the entire ASN.1 DER encoded certificate and, optionally, the certificate issuer and the certificate serial number. The SHA-1 hash value MUST be present. The certificate issuer and the certificate serial number SHOULD be present.",
      "ja": "本命は、証明書識別子のシーケンスが含まれています。この場合、証明書識別子のシーケンスは、単一のエントリが含まれています。本命フィールドは、ファームウェアパッケージの署名を検証するために使用される公開鍵を含む証明書の証明書のみの識別子を含まなければなりません。本命フィールドは[ESS]のセクション5.4で指定さESSCertID構文を使用し、それは全体のASN.1 DER符号化された証明書と、必要に応じて、証明書発行者と証明書のシリアル番号のSHA1ハッシュ[SHA1]から構成されています。 SHA-1ハッシュ値が存在しなければなりません。証明書発行者と証明書のシリアル番号が存在しなければなりません。"
    },
    {
      "indent": 3,
      "text": "policies is optional; when it is present, it contains a sequence of policy information. The policies field, when present, MUST contain only one entry, and that entry MUST match one of the certificate policies in the certificate policies extension of the certificate that contains the public key used to verify the firmware package signature. The policies field uses the PolicyInformation syntax specified in Section 4.2.1.5 of [PROFILE], and it is comprised of the certificate policy object identifier and, optionally, certificate policy qualifiers. The certificate policy object identifier MUST be present. The certificate policy qualifiers SHOULD NOT be present.",
      "ja": "ポリシーはオプションです。それが存在する場合、それはポリシー情報の配列を含みます。ポリシーフィールド、存在、唯一つのエントリが含まれている必要があり、そのエントリは、ファームウェアパッケージの署名を検証するために使用される公開鍵を含む証明書の証明書ポリシー拡張の証明書ポリシーのいずれかと一致しなければなりません。ポリシーフィールドは、[プロファイル]のセクション4.2.1.5で指定PolicyInformation構文を使用し、それは証明書ポリシーオブジェクト識別子と、必要に応じて、証明書ポリシー修飾子で構成されています。証明書ポリシーオブジェクト識別子が存在しなければなりません。証明書ポリシー修飾子が存在してはなりません。"
    },
    {
      "indent": 0,
      "text": "2.3. Unsigned Attributes",
      "section_title": true,
      "ja": "2.3。署名属性"
    },
    {
      "indent": 3,
      "text": "CMS allows a SET of unsigned attributes to be included; however, in this specification, the set MUST be absent or include a single instance of the wrapped-firmware-decryption-key attribute. Because the digital signature does not cover this attribute, it can be altered at any point in the delivery path from the firmware package signer to the hardware module. This property can be employed to distribute the firmware-decryption key along with an encrypted and signed firmware package, allowing the firmware-decryption key to be wrapped with a different key-encryption key for each link in the distribution chain.",
      "ja": "CMSは、未署名の属性のセットを含めることができます。しかしながら、本明細書では、セットが存在しない、またはラップファームウェア復号鍵属性の単一のインスタンスを含まなければなりません。デジタル署名は、この属性をカバーしていないので、ハードウェアモジュールにファームウェアパッケージの署名者からの配信経路の任意の点で変更することができます。このプロパティは、ファームウェア復号鍵が流通チェーンの各リンクに異なる鍵暗号鍵でラップできるように、暗号化および署名されたファームウェアパッケージと共にファームウェア復号鍵を配布するために使用することができます。"
    },
    {
      "indent": 3,
      "text": "The syntax for attributes is defined in [CMS], and it is repeated at the beginning of Section 2.2 of this document for convenience. Each of the attributes used with this profile has a single attribute value, even though the syntax is defined as a SET OF AttributeValue. There MUST be exactly one instance of AttributeValue present.",
      "ja": "属性の構文は、[CMS]で定義され、それは利便性のため、このドキュメントのセクション2.2の最初に繰り返されます。このプロファイルで使用される属性のそれぞれは、構文はAttributeValueの集合として定義されていても、単一の属性値を持っています。 AttributeValueの存在の正確に一つのインスタンスがあるに違いありません。"
    },
    {
      "indent": 3,
      "text": "The UnsignedAttributes syntax within signerInfo is defined as a SET OF Attribute. The UnsignedAttributes MUST include only one instance of any particular attribute.",
      "ja": "SignerInfo内UnsignedAttributes構文は、属性のセットとして定義されます。 UnsignedAttributesは、特定の属性のインスタンスを1つだけ含まなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.3.1. Wrapped Firmware Decryption Key",
      "section_title": true,
      "ja": "2.3.1。包まれたファームウェアの復号鍵"
    },
    {
      "indent": 3,
      "text": "The firmware package signer, or any other party in the distribution chain, MAY include a wrapped-firmware-decryption-key attribute.",
      "ja": "ファームウェアパッケージの署名者、または流通チェーン内の他の当事者は、ラップ・ファームウェア・復号化キー属性を含むかもしれません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the wrapped-firmware-decryption-key attribute:",
      "ja": "以下のオブジェクト識別子は、ラップ・ファームウェア・復号化キー属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-aa-wrappedFirmwareKey OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 39 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The wrapped-firmware-decryption-key attribute values have ASN.1 type of EnvelopedData. Section 6 of [CMS] defines the EnvelopedData content type, which is used to construct the value of the attribute. EnvelopedData permits the firmware-decryption key to be protected using symmetric or asymmetric techniques. The EnvelopedData does not include an encrypted content; rather, the EnvelopedData feature of having the encrypted content in another location is employed. The encrypted content is found in the eContent field of the EncryptedData structure. The firmware-decryption key is contained in the recipientInfos field. Section 6 of [CMS] refers to this key as the content-encryption key.",
      "ja": "ラップ・ファームウェア・復号鍵属性値がEnvelopedDataののASN.1タイプを持っています。 [CMS]のセクション6は、属性の値を構築するために使用されるEnvelopedDataのコンテンツタイプを定義します。 EnvelopedDataのは、対称または非対称の技術を使用して保護されるべきファームウェア・復号鍵を許可します。 EnvelopedDataのは、暗号化されたコンテンツが含まれていません。むしろ、別の場所で暗号化されたコンテンツを有するEnvelopedDataの機能が採用されています。暗号化されたコンテンツは、はEncryptedData構造のe-コンテンツ分野で発見されました。ファームウェア・復号鍵がのrecipientInfosフィールドに含まれています。 [CMS]のセクション6は、コンテンツ暗号化キーとしてこのキーを指します。"
    },
    {
      "indent": 3,
      "text": "The EnvelopedData syntax supports many different key management algorithms. Four general techniques are supported: key transport, key agreement, symmetric key-encryption keys, and passwords.",
      "ja": "EnvelopedDataの構文は、多くの異なった鍵管理アルゴリズムをサポートしています。 4つの一般的な技術はサポートされています：キー輸送、鍵合意、対称鍵暗号化キー、およびパスワードを。"
    },
    {
      "indent": 3,
      "text": "The EnvelopedData content type is profiled for the wrapped-firmware-decryption-key attribute. The EnvelopedData fields are described fully in Section 6 of [CMS]. Additional rules apply when EnvelopedData is used as a wrapped-firmware-decryption-key attribute.",
      "ja": "EnvelopedDataのコンテンツタイプは、ラップ・ファームウェア・復号鍵属性のためにプロファイルされています。 EnvelopedDataのフィールドは[CMS]のセクション6に完全に記載されています。 EnvelopedDataのがラップ・ファームウェア・復号鍵属性として使用されている場合は、追加の規則が適用されます。"
    },
    {
      "indent": 3,
      "text": "Within the EnvelopedData structure, the following apply:",
      "ja": "EnvelopedDataの構造の中で、以下が適用されます。"
    },
    {
      "indent": 3,
      "text": "- The set of certificates included in OriginatorInfo MUST NOT include certificates with a type of extendedCertificate, v1AttrCert, or v2AttrCert [X.509-97, X.509-00, ACPROFILE]. The optional crls field MAY be present.",
      "ja": " -  OriginatorInfoに含まれる証明書のセットはextendedCertificate、v1AttrCert、又はv2AttrCert [X.509-97、X.509-00、ACPROFILE]のタイプの証明書を含んではいけません。オプションのCRLのフィールドが存在してもよいです。"
    },
    {
      "indent": 3,
      "text": "- The optional unprotectedAttrs field MUST NOT be present.",
      "ja": " - オプションのunprotectedAttrsフィールドが存在してはなりません。"
    },
    {
      "indent": 3,
      "text": "Within the EncryptedContentInfo structure, the following apply:",
      "ja": "EncryptedContentInfo構造の中で、以下が適用されます。"
    },
    {
      "indent": 3,
      "text": "- contentType MUST match the content type object identifier carried in the contentType field within the EncryptedContentInfo structure of EncryptedData as described in Section 2.1.3.1.",
      "ja": " - セクション2.1.3.1に記載されるようにのcontentTypeははEncryptedDataのEncryptedContentInfo構造内のcontentTypeフィールドで搬送されるコンテンツ・タイプ・オブジェクト識別子と一致しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- contentEncryptionAlgorithm identifies the firmware-encryption algorithm, and any associated parameters, used to encrypt the firmware package carried in the encryptedContent field of the EncryptedContentInfo structure of EncryptedData. Therefore, it MUST exactly match the value of the EncryptedContentInfo structure of EncryptedData as described in Section 2.1.3.1.",
      "ja": " -  contentEncryptionAlgorithmファームウェア、暗号化アルゴリズムを識別し、任意の関連するパラメータは、はEncryptedDataのEncryptedContentInfo構造の暗号化コンテンツフィールド内で運ばファームウェアパッケージを暗号化するために使用されます。セクション2.1.3.1に記載されるように、したがって、それは正確にはEncryptedDataのEncryptedContentInfo構造の値と一致しなければなりません。"
    },
    {
      "indent": 3,
      "text": "- encryptedContent is optional, and in this case, it MUST NOT be present.",
      "ja": " - 暗号化コンテンツはオプションであり、この場合には、それが存在してはなりません。"
    },
    {
      "indent": 0,
      "text": "3. Firmware Package Load Receipt",
      "section_title": true,
      "ja": "3.ファームウェアパッケージのロード領収書"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax (CMS) is used to indicate that a firmware package loaded successfully. Support for firmware package load receipts is OPTIONAL. However, those hardware modules that choose to generate such receipts MUST follow the conventions specified in this section. Because not all hardware modules will have private signature keys, the firmware package load receipt can be either signed or unsigned. Use of the signed firmware package load receipt is RECOMMENDED.",
      "ja": "暗号メッセージ構文（CMS）は、ファームウェアパッケージが正常にロードされたことを示すために使用されます。ファームウェアパッケージのロードの領収書のためのサポートはオプションです。しかし、そのような領収書を生成することを選択し、それらのハードウェアモジュールは、このセクションで指定された規則に従わなければなりません。いないすべてのハードウェアモジュールは、秘密署名鍵を持っていますので、ファームウェアパッケージのロードの領収書は、いずれかの符号付きまたは符号なしすることができます。署名したファームウェアパッケージの負荷領収書の使用を推奨します。"
    },
    {
      "indent": 3,
      "text": "Hardware modules that support receipt generation MUST have a unique serial number. Hardware modules that support signed receipt generation MUST have a private signature key to sign the receipt and the corresponding signature validation certificate or its designator. The designator is the certificate issuer name and the certificate serial number, or it is the public key identifier. Memory-constrained hardware modules will generally store the public key identifier since it requires less storage.",
      "ja": "領収書の生成をサポートするハードウェアモジュールは、固有のシリアル番号を持たなければなりません。署名された領収書の生成をサポートするハードウェアモジュールが受信し、対応する署名検証証明書またはその指示に署名する秘密署名鍵を持たなければなりません。指定子は、証明書発行者名と証明書のシリアル番号である、またはそれは、公開鍵識別子です。それはより少ないストレージを必要とするため、メモリに制約のあるハードウェアモジュールは、一般的に、公開鍵の識別子を格納します。"
    },
    {
      "indent": 3,
      "text": "The unsigned firmware package load receipt is encapsulated by ContentInfo. Alternatively, the signed firmware package load receipt is encapsulated by SignedData, which is in turn encapsulated by ContentInfo.",
      "ja": "符号なしファームウェアパッケージの負荷領収書はContentInfoによってカプセル化されます。あるいは、署名されたファームウェアパッケージ積載レシートはContentInfoによってカプセル化順番にあるのSignedData、によってカプセル化されます。"
    },
    {
      "indent": 3,
      "text": "The firmware package load receipt is summarized as follows (see [CMS] for the full syntax):",
      "ja": "次のようにファームウェアパッケージのロードの領収書は、（完全な構文については[CMS]を参照）に要約されています。"
    },
    {
      "indent": 3,
      "text": "ContentInfo { contentType id-signedData, -- (1.2.840.113549.1.7.2) -- OR -- id-ct-firmwareLoadReceipt, -- (1.2.840.113549.1.9.16.1.17) content SignedData -- OR -- FirmwarePackageLoadReceipt }",
      "ja": "ContentInfo {contentTypeのID-たsignedData、 - （1.2.840.113549.1.7.2） - または -  ID-CT-firmwareLoadReceipt、 - （1.2.840.113549.1.9.16.1.17）コンテンツのSignedData  - または -  FirmwarePackageLoadReceipt }"
    },
    {
      "indent": 3,
      "text": "SignedData { version CMSVersion, -- always set to 3 digestAlgorithms DigestAlgorithmIdentifiers, -- Only one encapContentInfo EncapsulatedContentInfo, certificates CertificateSet, -- Optional Module certificate crls CertificateRevocationLists, -- Optional signerInfos SET OF SignerInfo -- Only one }",
      "ja": "SignedData {バージョンCMSVersion、 - つのみencapContentInfo EncapsulatedContentInfo、証明書の証明書群、 -   - オプションモジュールの証明書のCRLのCertificateRevocationLists、 - のSignerInfoの随意signerInfos SET  - つのみ常に3 digestAlgorithmsのDigestAlgorithmIdentifiersに設定}"
    },
    {
      "indent": 3,
      "text": "SignerInfo { version CMSVersion, -- either set to 1 or 3 sid SignerIdentifier, digestAlgorithm DigestAlgorithmIdentifier, signedAttrs SignedAttributes, -- Required signatureAlgorithm SignatureAlgorithmIdentifier, signature SignatureValue, unsignedAttrs UnsignedAttributes -- Omit }",
      "ja": "SignerInfo {バージョンCMSVersionは、 -  1または3のSID SignerIdentifierに設定し、digestAlgorithm DigestAlgorithmIdentifier、signedAttrs signedAttributesの、 - 必須のsignatureAlgorithm SignatureAlgorithmIdentifier、署名SignatureValue、unsignedAttrs UnsignedAttributes  - 省略}"
    },
    {
      "indent": 3,
      "text": "EncapsulatedContentInfo { eContentType id-ct-firmwareLoadReceipt, -- (1.2.840.113549.1.9.16.1.17) eContent OCTET STRING -- Contains receipt }",
      "ja": "EncapsulatedContentInfo {のeContentType ID-CT-firmwareLoadReceipt、 - （1.2.840.113549.1.9.16.1.17）e-コンテンツオクテットSTRING  - 領収書が含まれてい}"
    },
    {
      "indent": 3,
      "text": "FirmwarePackageLoadReceipt { version INTEGER, -- The DEFAULT is always used hwType OBJECT IDENTIFIER, -- Hardware module type hwSerialNum OCTET STRING, -- H/W module serial number fwPkgName PreferredOrLegacyPackageIdentifier, trustAnchorKeyID OCTET STRING, -- Optional decryptKeyID OCTET STRING -- Optional }",
      "ja": "FirmwarePackageLoadReceipt {バージョンINTEGER、 - デフォルトは常にhwTypeオブジェクト識別子を使用し、 - ハードウェアモジュール型hwSerialNumオクテットSTRING、 -  H / Wモジュールのシリアル番号fwPkgName PreferredOrLegacyPackageIdentifier、trustAnchorKeyIDオクテットSTRING、 - オプションdecryptKeyIDオクテットSTRING  - オプション}"
    },
    {
      "indent": 0,
      "text": "3.1. Firmware Package Load Receipt CMS Content Type Profile",
      "section_title": true,
      "ja": "3.1。ファームウェアパッケージの読み込み領収CMSコンテンツタイプのプロフィール"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions for using the CMS ContentInfo and SignedData content types for firmware package load receipts. It also defines the firmware package load receipt content type.",
      "ja": "このセクションでは、ファームウェアパッケージのロードの領収書のためのCMS ContentInfoとのSignedDataコンテンツタイプを使用するための規則を指定します。また、ファームウェアパッケージロードレシートコンテンツタイプを定義します。"
    },
    {
      "indent": 0,
      "text": "3.1.1. ContentInfo",
      "section_title": true,
      "ja": "3.1.1。 ContentInfo"
    },
    {
      "indent": 3,
      "text": "The CMS requires that the outermost encapsulation be ContentInfo [CMS]. The fields of ContentInfo are used as follows:",
      "ja": "CMSは、最も外側のカプセル化がContentInfo [CMS]である必要があります。次のようにContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "contentType indicates the type of the associated content. If the firmware package load receipt is signed, then the encapsulated type MUST be SignedData, and the id-signedData (1.2.840.113549.1.7.2) object identifier MUST be present in this field. If the receipt is not signed, then the encapsulated type MUST be FirmwarePackageLoadReceipt, and the id-ct-firmwareLoadReceipt (1.2.840.113549.1.9.16.1.17) object identifier MUST be present in this field.",
      "ja": "contentTypeのは、関連するコンテンツのタイプを示します。ファームウェアパッケージ積載レシートが署名されている場合、カプセル化タイプはSignedDataのでなければなりません、及びID-たsignedData（1.2.840.113549.1.7.2）オブジェクト識別子は、このフィールドに存在しなければなりません。領収書が署名されていない場合、カプセル化タイプはFirmwarePackageLoadReceiptでなければなりません、及びID-CT-firmwareLoadReceipt（1.2.840.113549.1.9.16.1.17）オブジェクト識別子は、この分野で存在していなければなりません。"
    },
    {
      "indent": 3,
      "text": "content holds the associated content. If the firmware package load receipt is signed, then this field MUST contain the SignedData. If the receipt is not signed, then this field MUST contain the FirmwarePackageLoadReceipt.",
      "ja": "コンテンツは、関連するコンテンツを保持しています。ファームウェアパッケージの負荷領収書が署名されている場合、このフィールドはSignedDataのを含まなければなりません。領収書が署名されていない場合、このフィールドはFirmwarePackageLoadReceiptを含まなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.1.2. SignedData",
      "section_title": true,
      "ja": "3.1.2。 SignedData"
    },
    {
      "indent": 3,
      "text": "The SignedData content type contains the firmware package load receipt and one digital signature. If the hardware module locally stores its certificate, then the certificate can be included as well. The fields of SignedData are used as follows:",
      "ja": "SignedDataコンテンツタイプは、ファームウェアパッケージ積載受信および一つのデジタル署名を含みます。ハードウェアモジュールは、ローカル証明書を格納した場合、証明書は同様に含めることができます。次のようにのSignedDataのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "version is the syntax version number, and in this case, it MUST be set to 3.",
      "ja": "バージョンは構文バージョン番号であり、この場合には、3に設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "digestAlgorithms is a collection of message digest algorithm identifiers, and in this case, it MUST contain a single message digest algorithm identifier. The message digest algorithms employed by the hardware module MUST be present.",
      "ja": "digestAlgorithmsは、アルゴリズム識別子をメッセージダイジェストの集まりであり、この場合には、それが単一のメッセージダイジェストアルゴリズム識別子を含まなければなりません。ハードウェアモジュールによって使用されるメッセージダイジェストアルゴリズムが存在しなければなりません。"
    },
    {
      "indent": 3,
      "text": "encapContentInfo is the signed content, consisting of a content type identifier and the content itself. The use of the EncapsulatedContentInfo type is discussed further in Section 3.1.2.2.",
      "ja": "encapContentInfoコンテンツタイプ識別子とコンテンツ自体からなる、署名されたコンテンツです。 EncapsulatedContentInfo型の使用は、セクション3.1.2.2で詳しく説明されています。"
    },
    {
      "indent": 3,
      "text": "certificates is an optional collection of certificates. If the hardware module locally stores its certificate, then the X.509 certificate of the hardware module SHOULD be included. If the hardware module does not, then the certificates field is omitted. PKCS#6 extended certificates [PKCS#6] and attribute certificates (either version 1 or version 2) [X.509-97, X.509-00, ACPROFILE] MUST NOT be included in the set of certificates.",
      "ja": "証明書は、証明書のオプションのコレクションです。ハードウェアモジュールは、ローカル証明書を格納した場合、ハードウェア・モジュールのX.509証明書が含まれるべきです。ハードウェアモジュールがない場合には、証明書フィールドが省略されています。 PKCS＃6は、[PKCS＃6]証明書を拡張し、証明書（バージョン1またはバージョン2のいずれか）属性[X.509-97をX.509-00、ACPROFILE]は、証明書のセットに含まれてはいけません。"
    },
    {
      "indent": 3,
      "text": "crls is an optional collection of certificate revocation lists (CRLs). CRLs MAY be included, but they will normally be omitted since hardware modules will not generally have access to the most recent CRL. Signed receipt recipients SHOULD be able to handle the presence of the optional crls field.",
      "ja": "CRLは証明書失効リスト（CRL）のオプションのコレクションです。 CRLは含まれてもよいが、ハードウェアモジュールは、一般的に、最新のCRLにアクセスすることはできませんので、彼らは通常省略されます。署名された領収書の受信者は、オプションのCRLフィールドの存在を処理できる必要があります。"
    },
    {
      "indent": 3,
      "text": "signerInfos is a collection of per-signer information, and in this case, the collection MUST contain exactly one SignerInfo. The use of the SignerInfo type is discussed further in Section 3.1.2.1.",
      "ja": "signerInfosごとの署名者情報の収集であり、この場合には、コレクションには、正確に一つのSignerInfoを含まなければなりません。 SignerInfoタイプの使用は、セクション3.1.2.1で詳しく説明されています。"
    },
    {
      "indent": 0,
      "text": "3.1.2.1. SignerInfo",
      "section_title": true,
      "ja": "3.1.2.1。 SignerInfo"
    },
    {
      "indent": 3,
      "text": "The hardware module is represented in the SignerInfo type. The fields of SignerInfo are used as follows:",
      "ja": "ハードウェアモジュールは、のSignerInfo型で表現されます。次のようにのSignerInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "version is the syntax version number, and it MUST be either 1 or 3, depending on the method used to identify the hardware module's public key. The use of the subjectKeyIdentifier is RECOMMENDED, which results in the use of version 3.",
      "ja": "バージョンは構文バージョン番号であり、ハードウェア・モジュールの公開鍵を識別するために使用される方法に応じて、1または3のいずれかでなければなりません。 subjectKeyIdentifierの使用は、バージョン3の使用をもたらす、推奨されています。"
    },
    {
      "indent": 3,
      "text": "sid specifies the hardware module's certificate (and thereby the hardware module's public key). CMS supports two alternatives: issuerAndSerialNumber and subjectKeyIdentifier. The hardware module MUST support one or both of the alternatives for receipt generation; however, the support of subjectKeyIdentifier is RECOMMENDED. The issuerAndSerialNumber alternative identifies the hardware module's certificate by the issuer's distinguished name and the certificate serial number. The identified certificate, in turn, contains the hardware module's public key. The subjectKeyIdentifier alternative identifies the hardware module's public key directly. When this public key is contained in a certificate, this identifier SHOULD appear in the X.509 subjectKeyIdentifier extension.",
      "ja": "SIDは、ハードウェアモジュールの証明書（およびそれによって、ハードウェアモジュールの公開鍵）を指定します。 issuerAndSerialNumberとsubjectKeyIdentifier：CMSには二つの選択肢をサポートしています。ハードウェアモジュールは、1つまたはレシートを生成するための代替の両方をサポートしなければなりません。しかし、subjectKeyIdentifierのサポートが推奨されます。 issuerAndSerialNumberの代替は、発行者の識別名と証明書のシリアル番号によって、ハードウェアモジュールの証明書を識別します。特定された証明書は、今度は、ハードウェアモジュールの公開鍵が含まれています。 subjectKeyIdentifier代替は、直接ハードウェアモジュールの公開鍵を特定します。この公開鍵証明書に含まれている場合は、この識別子はX.509 subjectKeyIdentifier拡張に表示されます。"
    },
    {
      "indent": 3,
      "text": "digestAlgorithm identifies the message digest algorithm, and any associated parameters, used by the hardware module. It MUST contain the message digest algorithms employed to sign the receipt. (Note that this message digest algorithm identifier MUST be the same as the one carried in the digestAlgorithms value in SignedData.)",
      "ja": "digestAlgorithmは、ハードウェアモジュールによって使用されるメッセージダイジェストアルゴリズム、および任意の関連するパラメータを識別する。これは、領収書に署名するために使用されるメッセージダイジェストアルゴリズムを含まなければなりません。 （このメッセージは、アルゴリズム識別子のSignedDataでdigestAlgorithms値で運ばれたものと同じでなければなりませんダイジェストことに留意されたいです。）"
    },
    {
      "indent": 3,
      "text": "signedAttrs is an optional collection of attributes that are signed along with the content. The signedAttrs are optional in the CMS, but in this specification, signedAttrs are REQUIRED for use with the firmware package load receipt content. The SET OF attributes MUST be DER encoded [X.509-88]. Section 3.2 of this document lists the attributes that MUST be included in the collection. Other attributes MAY be included, but the recipient will ignore any unrecognized signed attributes.",
      "ja": "signedAttrsは、コンテンツと一緒に署名されている属性のオプションのコレクションです。 signedAttrsは、CMSでのオプションですが、この仕様では、signedAttrsは、ファームウェアパッケージロードレシート内容で使用するために必要とされます。属性のセットは、DERは[X.509-88】符号化されなければなりません。このドキュメントのセクション3.2は、コレクションに含まれなければならない属性を示します。他の属性は含まれてもよいが、受信者が認識されない署名属性を無視します。"
    },
    {
      "indent": 3,
      "text": "signatureAlgorithm identifies the signature algorithm, and any associated parameters, used to sign the receipt.",
      "ja": "signatureAlgorithmは署名アルゴリズムを識別し、任意の関連するパラメータは、領収書に署名するために使用されます。"
    },
    {
      "indent": 3,
      "text": "signature is the digital signature.",
      "ja": "署名は、デジタル署名です。"
    },
    {
      "indent": 3,
      "text": "unsignedAttrs is an optional collection of attributes that are not signed, and in this case, there MUST NOT be any unsigned attributes present.",
      "ja": "unsignedAttrsが署名されていない属性のオプションの集まりであり、この場合には、存在する任意の署名属性があってはなりません。"
    },
    {
      "indent": 0,
      "text": "3.1.2.2. EncapsulatedContentInfo",
      "section_title": true,
      "ja": "3.1.2.2。 EncapsulatedContentInfo"
    },
    {
      "indent": 3,
      "text": "The FirmwarePackageLoadReceipt is encapsulated in an OCTET STRING, and it is carried within the EncapsulatedContentInfo type. The fields of EncapsulatedContentInfo are used as follows:",
      "ja": "FirmwarePackageLoadReceiptはOCTET STRINGの中にカプセル化され、それはEncapsulatedContentInfo型内に搬送されます。次のようにEncapsulatedContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "eContentType is an object identifier that uniquely specifies the content type, and in this case, it MUST be the value of id-ct-firmwareLoadReceipt (1.2.840.113549.1.9.16.1.17).",
      "ja": "eContentType一意コンテンツタイプを指定するオブジェクト識別子であり、この場合には、ID-CT-firmwareLoadReceipt（1.2.840.113549.1.9.16.1.17）の値でなければなりません。"
    },
    {
      "indent": 3,
      "text": "eContent is the firmware package load receipt, encapsulated in an OCTET STRING. The eContent octet string need not be DER encoded.",
      "ja": "e-コンテンツは、オクテット文字列の中にカプセル化ファームウェアパッケージの負荷領収書、です。 e-コンテンツのオクテット文字列は、DERエンコードである必要はありません。"
    },
    {
      "indent": 0,
      "text": "3.1.3. FirmwarePackageLoadReceipt",
      "section_title": true,
      "ja": "3.1.3。 FirmwarePackageLoadReceipt"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the firmware package load receipt content type:",
      "ja": "以下のオブジェクト識別子は、ファームウェアパッケージ負荷レシートコンテンツタイプを識別する。"
    },
    {
      "indent": 6,
      "text": "id-ct-firmwareLoadReceipt OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) ct(1) 17 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The firmware package load receipt content type has the ASN.1 type FirmwarePackageLoadReceipt:",
      "ja": "ファームウェアパッケージの負荷レシートコンテンツタイプは、ASN.1タイプFirmwarePackageLoadReceiptがあります。"
    },
    {
      "indent": 6,
      "text": "FirmwarePackageLoadReceipt ::= SEQUENCE {\n  version FWReceiptVersion DEFAULT v1,\n  hwType OBJECT IDENTIFIER,\n  hwSerialNum OCTET STRING,\n  fwPkgName PreferredOrLegacyPackageIdentifier,\n  trustAnchorKeyID OCTET STRING OPTIONAL,\n  decryptKeyID [1] OCTET STRING OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "FWReceiptVersion ::= INTEGER { v1(1) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The fields of the FirmwarePackageLoadReceipt type have the following meanings:",
      "ja": "FirmwarePackageLoadReceiptタイプのフィールドは以下の意味があります。"
    },
    {
      "indent": 3,
      "text": "version is an integer that provides the syntax version number for compatibility with future revisions of this specification. Implementations that conform to this specification MUST set the version to the default value, which is v1.",
      "ja": "バージョンは、本明細書の今後の改正との互換性の構文バージョン番号を提供する整数です。この仕様に準拠する実装がV1であるデフォルト値にバージョンを設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "hwType is an object identifier that identifies the type of hardware module on which the firmware package was loaded.",
      "ja": "hwTypeファームウェアパッケージがロードされたハードウェア・モジュールのタイプを識別するオブジェクト識別子です。"
    },
    {
      "indent": 3,
      "text": "hwSerialNum is the serial number of the hardware module on which the firmware package was loaded. No particular structure is imposed on the serial number; it need not be an integer. However, the combination of the hwType and hwSerialNum uniquely identifies the hardware module.",
      "ja": "hwSerialNumファームウェアパッケージがロードされたハードウェアモジュールのシリアル番号です。特に構造はシリアル番号に課されていません。それは、整数である必要はありません。しかし、hwTypeとhwSerialNumの組み合わせが一意のハードウェアモジュールを識別する。"
    },
    {
      "indent": 3,
      "text": "fwPkgName identifies the firmware package that was loaded. As described in Section 2.2.3, two approaches to naming firmware packages are supported: legacy and preferred. A legacy firmware package name is an octet string. A preferred firmware package name is a combination of the firmware package object identifier and an integer version number.",
      "ja": "fwPkgNameは、ロードされたファームウェアパッケージを識別します。 2.2.3項で述べたように、ファームウェアパッケージに名前を付けるには、2つの方法がサポートされています：レガシー、好ましいです。従来のファームウェアパッケージ名は、オクテット文字列です。好ましいファームウェアパッケージ名は、ファームウェアパッケージオブジェクト識別子と、整数バージョン番号の組み合わせです。"
    },
    {
      "indent": 3,
      "text": "trustAnchorKeyID is optional, and when it is present, it identifies the trust anchor that was used to validate the firmware package signature.",
      "ja": "trustAnchorKeyIDはオプションで、それが存在する場合、それはファームウェアパッケージの署名を検証するために使用されたトラストアンカーを識別する。"
    },
    {
      "indent": 3,
      "text": "decryptKeyID is optional, and when it is present, it identifies the firmware-decryption key that was used to decrypt the firmware package.",
      "ja": "decryptKeyIDはオプションで、それが存在する場合、それはファームウェアパッケージを解読するために使用されたファームウェア復号鍵を識別する。"
    },
    {
      "indent": 3,
      "text": "The firmware package load receipt MUST include the version, hwType, hwSerialNum, and fwPkgName fields, and it SHOULD include the trustAnchorKeyID field. The firmware package load receipt MUST NOT include the decryptKeyID, unless the firmware package associated with the receipt is encrypted, the firmware-decryption key is available to the hardware module, and the firmware package was successfully decrypted.",
      "ja": "ファームウェアパッケージのロード・領収書はバージョン、hwType、hwSerialNum、およびfwPkgNameフィールドを含まなければならない、そしてそれはtrustAnchorKeyIDフィールドを含むべきです。ファームウェアパッケージのロード・領収書は、領収書に関連したファームウェアパッケージが暗号化されていない限り、ファームウェア・復号鍵は、ハードウェアモジュールに利用可能で、ファームウェアパッケージが正常に復号化された、decryptKeyIDを含んではいけません。"
    },
    {
      "indent": 0,
      "text": "3.2. Signed Attributes",
      "section_title": true,
      "ja": "3.2。署名された属性"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST digitally sign a collection of attributes along with the firmware package load receipt. Each attribute in the collection MUST be DER encoded [X.509-88]. The syntax for attributes is defined in [CMS], and it was repeated in Section 2.2 for convenience.",
      "ja": "ハードウェアモジュールは、デジタルファームウェアパッケージのロードの領収書と一緒に属性のコレクションに署名しなければなりません。コレクション内の各属性は、DERは、[X.509-88]符号化されなければなりません。属性の構文は、[CMS]で定義され、それは利便性のために、2.2節で繰り返しました。"
    },
    {
      "indent": 3,
      "text": "Each of the attributes used with this profile has a single attribute value, even though the syntax is defined as a SET OF AttributeValue. There MUST be exactly one instance of AttributeValue present.",
      "ja": "このプロファイルで使用される属性のそれぞれは、構文はAttributeValueの集合として定義されていても、単一の属性値を持っています。 AttributeValueの存在の正確に一つのインスタンスがあるに違いありません。"
    },
    {
      "indent": 3,
      "text": "The SignedAttributes syntax within signerInfo is defined as a SET OF Attributes. The SignedAttributes MUST include only one instance of any particular attribute.",
      "ja": "SignerInfo内signedAttributesの構文は、属性の集合として定義されます。 signedAttributesのは、特定の属性のインスタンスを1つだけ含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST include the content-type and message-digest attributes. If the hardware module includes a real-time clock, then the hardware module SHOULD also include the signing-time attribute. The hardware module MAY include any other attribute that it deems appropriate.",
      "ja": "ハードウェアモジュールは、コンテンツタイプとメッセージダイジェスト属性を含まなければなりません。ハードウェアモジュールは、リアルタイムクロックが含まれている場合は、ハードウェアモジュールはまた、署名時の属性を含むべきです。ハードウェアモジュールは、それが適切と判断、他の属性を含むかもしれません。"
    },
    {
      "indent": 0,
      "text": "3.2.1. Content Type",
      "section_title": true,
      "ja": "3.2.1。コンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST include a content-type attribute with the value of id-ct-firmwareLoadReceipt (1.2.840.113549.1.9.16.1.17). Section 11.1 of [CMS] defines the content-type attribute.",
      "ja": "ハードウェアモジュールは、ID-CT-firmwareLoadReceipt（1.2.840.113549.1.9.16.1.17）の値を持つコンテンツタイプ属性を含まなければなりません。 [CMS]のセクション11.1には、コンテンツ・タイプの属性を定義します。"
    },
    {
      "indent": 0,
      "text": "3.2.2. Message Digest",
      "section_title": true,
      "ja": "3.2.2。メッセージダイジェスト"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST include a message-digest attribute, having as its value the message digest of the FirmwarePackageLoadReceipt content. Section 11.2 of [CMS] defines the message-digest attribute.",
      "ja": "ハードウェアモジュールは、その値としてFirmwarePackageLoadReceiptコンテンツのメッセージダイジェストを有する、メッセージダイジェスト属性を含まなければなりません。 [CMS]のセクション11.2はメッセージダイジェスト属性を定義します。"
    },
    {
      "indent": 0,
      "text": "3.2.3. Signing Time",
      "section_title": true,
      "ja": "3.2.3。時間の署名"
    },
    {
      "indent": 3,
      "text": "If the hardware module includes a real-time clock, then the hardware module SHOULD include a signing-time attribute, specifying the time at which the receipt was generated. Section 11.3 of [CMS] defines the signing-time attribute.",
      "ja": "ハードウェアモジュールは、リアルタイムクロックを含む場合、ハードウェアモジュールは、領収書が生成された時刻を指定し、署名時間属性を含むべきです。 [CMS]のセクション11.3は、署名時の属性を定義します。"
    },
    {
      "indent": 0,
      "text": "4. Firmware Package Load Error",
      "section_title": true,
      "ja": "4.ファームウェアパッケージ読み込みエラー"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax (CMS) is used to indicate that an error has occurred while attempting to load a protected firmware package. Support for firmware package load error reports is OPTIONAL. However, those hardware modules that choose to generate such error reports MUST follow the conventions specified in this section. Not all hardware modules have private signature keys; therefore the firmware package load error report can be either signed or unsigned. Use of the signed firmware package error report is RECOMMENDED.",
      "ja": "暗号メッセージ構文（CMS）は、保護されたファームウェアパッケージをロードしようとしたときにエラーが発生したことを示すために使用されます。ファームウェアパッケージロードエラー報告のためのサポートはオプションです。しかし、このようなエラーレポートを生成することを選択し、それらのハードウェアモジュールは、このセクションで指定された規則に従わなければなりません。すべてのハードウェアモジュールは、秘密署名鍵を持っているわけではありません。したがって、ファームウェアパッケージの読み込みエラーレポートは、いずれかの符号付きまたは符号なしすることができます。署名したファームウェアパッケージのエラーレポートの使用を推奨します。"
    },
    {
      "indent": 3,
      "text": "Hardware modules that support error report generation MUST have a unique serial number. Hardware modules that support signed error report generation MUST also have a private signature key to sign the error report and the corresponding signature validation certificate or its designator. The designator is the certificate issuer name and the certificate serial number, or it is the public key identifier. Memory-constrained hardware modules will generally store the public key identifier since it requires less storage.",
      "ja": "エラーレポートの生成をサポートするハードウェアモジュールは、固有のシリアル番号を持たなければなりません。署名エラーレポートの生成をサポートするハードウェアモジュールは、エラー報告と対応する署名検証証明書またはその指示に署名する秘密署名鍵を持たなければなりません。指定子は、証明書発行者名と証明書のシリアル番号である、またはそれは、公開鍵識別子です。それはより少ないストレージを必要とするため、メモリに制約のあるハードウェアモジュールは、一般的に、公開鍵の識別子を格納します。"
    },
    {
      "indent": 3,
      "text": "The unsigned firmware package load error report is encapsulated by ContentInfo. Alternatively, the signed firmware package load error report is encapsulated by SignedData, which is in turn encapsulated by ContentInfo.",
      "ja": "符号なしファームウェアパッケージロードエラーレポートがContentInfoによってカプセル化されます。また、署名したファームウェアパッケージの読み込みエラーレポートがContentInfoによってカプセル化された順番にあるのSignedData、によってカプセル化されます。"
    },
    {
      "indent": 3,
      "text": "The firmware package load error report is summarized as follows (see [CMS] for the full syntax):",
      "ja": "（完全な構文を参照[CMS]）を次のようにファームウェアパッケージロードエラーレポートが要約されます。"
    },
    {
      "indent": 3,
      "text": "ContentInfo { contentType id-signedData, -- (1.2.840.113549.1.7.2) -- OR -- id-ct-firmwareLoadError, -- (1.2.840.113549.1.9.16.1.18) content SignedData -- OR -- FirmwarePackageLoadError }",
      "ja": "ContentInfo {contentTypeのID-たsignedData、 - （1.2.840.113549.1.7.2） - または -  ID-CT-firmwareLoadError、 - （1.2.840.113549.1.9.16.1.18）コンテンツのSignedData  - または -  FirmwarePackageLoadError }"
    },
    {
      "indent": 3,
      "text": "SignedData { version CMSVersion, -- Always set to 3 digestAlgorithms DigestAlgorithmIdentifiers, -- Only one encapContentInfo EncapsulatedContentInfo, certificates CertificateSet, -- Optional Module certificate crls CertificateRevocationLists, -- Optional signerInfos SET OF SignerInfo -- Only one }",
      "ja": "SignedData {バージョンCMSVersion、 - つのみencapContentInfo EncapsulatedContentInfo、証明書の証明書群、 -   - オプションモジュールの証明書のCRLのCertificateRevocationLists、 - のSignerInfoの随意signerInfos SET  - つのみ必ず3 digestAlgorithmsのDigestAlgorithmIdentifiersに設定}"
    },
    {
      "indent": 3,
      "text": "SignerInfo { version CMSVersion, -- either set to 1 or 3 sid SignerIdentifier, digestAlgorithm DigestAlgorithmIdentifier, signedAttrs SignedAttributes, -- Required signatureAlgorithm SignatureAlgorithmIdentifier, signature SignatureValue, unsignedAttrs UnsignedAttributes -- Omit }",
      "ja": "SignerInfo {バージョンCMSVersionは、 -  1または3のSID SignerIdentifierに設定し、digestAlgorithm DigestAlgorithmIdentifier、signedAttrs signedAttributesの、 - 必須のsignatureAlgorithm SignatureAlgorithmIdentifier、署名SignatureValue、unsignedAttrs UnsignedAttributes  - 省略}"
    },
    {
      "indent": 3,
      "text": "EncapsulatedContentInfo { eContentType id-ct-firmwareLoadError, -- (1.2.840.113549.1.9.16.1.18) eContent OCTET STRING -- Contains error report }",
      "ja": "EncapsulatedContentInfo {のeContentType ID-CT-firmwareLoadError、 - （1.2.840.113549.1.9.16.1.18）e-コンテンツオクテットSTRING  - エラーレポートを含みます}"
    },
    {
      "indent": 3,
      "text": "FirmwarePackageLoadError { version INTEGER, -- The DEFAULT is always used hwType OBJECT IDENTIFIER, -- Hardware module type hwSerialNum OCTET STRING, -- H/W module serial number errorCode FirmwarePackageLoadErrorCode -- Error identifier vendorErrorCode VendorErrorCode, -- Optional fwPkgName PreferredOrLegacyPackageIdentifier, -- Optional config SEQUENCE OF CurrentFWConfig, -- Optional }",
      "ja": "FirmwarePackageLoadError {バージョンINTEGER、 - ハードウェアモジュール型hwSerialNumオクテットSTRING、 -   -  H / Wモジュールのシリアル番号のerrorCode FirmwarePackageLoadErrorCode  - エラー識別子vendorErrorCode VendorErrorCode、 - オプションfwPkgName PreferredOrLegacyPackageIdentifier、 - デフォルトは常にhwTypeオブジェクト識別子を、使用されていますオプションの設定CurrentFWConfig OF SEQUENCE、 - オプション}"
    },
    {
      "indent": 3,
      "text": "CurrentFWConfig { -- Repeated for each package in configuration fwPkgType INTEGER, -- Firmware package type; Optional fwPkgName PreferredOrLegacyPackageIdentifier }",
      "ja": "CurrentFWConfig { - 、構成fwPkgType INTEGERに各パッケージごとに繰り返さ - ファームウェアパッケージタイプ、オプションfwPkgName PreferredOrLegacyPackageIdentifier}"
    },
    {
      "indent": 0,
      "text": "4.1. Firmware Package Load Error CMS Content Type Profile",
      "section_title": true,
      "ja": "4.1。ファームウェアパッケージの読み込みエラーCMSコンテンツタイプのプロフィール"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions for using the CMS ContentInfo and SignedData content types for firmware package load error reports. It also defines the firmware package load error content type.",
      "ja": "このセクションでは、ファームウェアパッケージロードエラー報告のためのCMS ContentInfoとのSignedDataコンテンツタイプを使用するための規則を指定します。また、ファームウェアパッケージロードエラーコンテンツタイプを定義します。"
    },
    {
      "indent": 0,
      "text": "4.1.1. ContentInfo",
      "section_title": true,
      "ja": "4.1.1。 ContentInfo"
    },
    {
      "indent": 3,
      "text": "The CMS requires that the outermost encapsulation be ContentInfo [CMS]. The fields of ContentInfo are used as follows:",
      "ja": "CMSは、最も外側のカプセル化がContentInfo [CMS]である必要があります。次のようにContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "contentType indicates the type of the associated content. If the firmware package load error report is signed, then the encapsulated type MUST be SignedData, and the id-signedData (1.2.840.113549.1.7.2) object identifier MUST be present in this field. If the report is not signed, then the encapsulated type",
      "ja": "contentTypeのは、関連するコンテンツのタイプを示します。ファームウェアパッケージロードエラーレポートが署名されている場合、カプセル化タイプはSignedDataのでなければなりません、及びID-たsignedData（1.2.840.113549.1.7.2）オブジェクト識別子は、このフィールドに存在しなければなりません。報告書が署名されていない場合には、カプセル化タイプ"
    },
    {
      "indent": 6,
      "text": "MUST be FirmwarePackageLoadError, and the id-ct-firmwareLoadError (1.2.840.113549.1.9.16.1.18) object identifier MUST be present in this field.",
      "ja": "FirmwarePackageLoadErrorなければなりません、及びID-CT-firmwareLoadError（1.2.840.113549.1.9.16.1.18）オブジェクト識別子は、この分野で存在していなければなりません。"
    },
    {
      "indent": 3,
      "text": "content holds the associated content. If the firmware package load error report is signed, then this field MUST contain the SignedData. If the report is not signed, then this field MUST contain the FirmwarePackageLoadError.",
      "ja": "コンテンツは、関連するコンテンツを保持しています。ファームウェアパッケージロードエラー報告が署名されている場合、このフィールドはSignedDataのを含まなければなりません。報告書が署名されていない場合、このフィールドはFirmwarePackageLoadErrorを含まなければなりません。"
    },
    {
      "indent": 0,
      "text": "4.1.2. SignedData",
      "section_title": true,
      "ja": "4.1.2。 SignedData"
    },
    {
      "indent": 3,
      "text": "The SignedData content type contains the firmware package load error report and one digital signature. If the hardware module locally stores its certificate, then the certificate can be included as well. The fields of SignedData are used exactly as described in Section 3.1.2.",
      "ja": "SignedDataのコンテンツタイプは、ファームウェアパッケージロードエラーレポートと1人のデジタル署名が含まれています。ハードウェアモジュールは、ローカル証明書を格納した場合、証明書は同様に含めることができます。 3.1.2項で説明したようにのSignedDataのフィールドが正確に使用されています。"
    },
    {
      "indent": 0,
      "text": "4.1.2.1. SignerInfo",
      "section_title": true,
      "ja": "4.1.2.1。 SignerInfo"
    },
    {
      "indent": 3,
      "text": "The hardware module is represented in the SignerInfo type. The fields of SignerInfo are used exactly as described in Section 3.1.2.1.",
      "ja": "ハードウェアモジュールは、のSignerInfo型で表現されます。 3.1.2.1項で説明したようにのSignerInfoの分野は正確に使用されています。"
    },
    {
      "indent": 0,
      "text": "4.1.2.2. EncapsulatedContentInfo",
      "section_title": true,
      "ja": "4.1.2.2。 EncapsulatedContentInfo"
    },
    {
      "indent": 3,
      "text": "The FirmwarePackageLoadError is encapsulated in an OCTET STRING, and it is carried within the EncapsulatedContentInfo type. The fields of EncapsulatedContentInfo are used as follows:",
      "ja": "FirmwarePackageLoadErrorはOCTET STRINGの中にカプセル化され、それはEncapsulatedContentInfo型内に搬送されます。次のようにEncapsulatedContentInfoのフィールドが使用されます。"
    },
    {
      "indent": 3,
      "text": "eContentType is an object identifier that uniquely specifies the content type, and in this case, it MUST be the value of id-ct-firmwareLoadError (1.2.840.113549.1.9.16.1.18).",
      "ja": "eContentType一意コンテンツタイプを指定するオブジェクト識別子であり、この場合には、ID-CT-firmwareLoadError（1.2.840.113549.1.9.16.1.18）の値でなければなりません。"
    },
    {
      "indent": 3,
      "text": "eContent is the firmware package load error report, encapsulated in an OCTET STRING. The eContent octet string need not be DER encoded.",
      "ja": "e-コンテンツは、オクテット文字列の中にカプセル化ファームウェアパッケージロードエラー報告、です。 e-コンテンツのオクテット文字列は、DERエンコードである必要はありません。"
    },
    {
      "indent": 0,
      "text": "4.1.3. FirmwarePackageLoadError",
      "section_title": true,
      "ja": "4.1.3。 FirmwarePackageLoadError"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the firmware package load error report content type:",
      "ja": "以下のオブジェクト識別子は、ファームウェアパッケージロードエラーレポートのコンテンツタイプを識別します。"
    },
    {
      "indent": 6,
      "text": "id-ct-firmwareLoadError OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) ct(1) 18 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The firmware package load error report content type has the ASN.1 type FirmwarePackageLoadError:",
      "ja": "ファームウェアパッケージロードエラーレポートのコンテンツタイプは、ASN.1タイプFirmwarePackageLoadErrorがあります。"
    },
    {
      "indent": 6,
      "text": "FirmwarePackageLoadError ::= SEQUENCE {\n  version FWErrorVersion DEFAULT v1,\n  hwType OBJECT IDENTIFIER,\n  hwSerialNum OCTET STRING,\n  errorCode FirmwarePackageLoadErrorCode,\n  vendorErrorCode VendorLoadErrorCode OPTIONAL,\n  fwPkgName PreferredOrLegacyPackageIdentifier OPTIONAL,\n  config [1] SEQUENCE OF CurrentFWConfig OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "FWErrorVersion ::= INTEGER { v1(1) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "CurrentFWConfig ::= SEQUENCE {\n  fwPkgType INTEGER OPTIONAL,\n  fwPkgName PreferredOrLegacyPackageIdentifier }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "FirmwarePackageLoadErrorCode ::= ENUMERATED {\n  decodeFailure                (1),\n  badContentInfo               (2),\n  badSignedData                (3),\n  badEncapContent              (4),\n  badCertificate               (5),\n  badSignerInfo                (6),\n  badSignedAttrs               (7),\n  badUnsignedAttrs             (8),\n  missingContent               (9),\n  noTrustAnchor               (10),\n  notAuthorized               (11),\n  badDigestAlgorithm          (12),\n  badSignatureAlgorithm       (13),\n  unsupportedKeySize          (14),\n  signatureFailure            (15),\n  contentTypeMismatch         (16),\n  badEncryptedData            (17),\n  unprotectedAttrsPresent     (18),\n  badEncryptContent           (19),\n  badEncryptAlgorithm         (20),\n  missingCiphertext           (21),\n  noDecryptKey                (22),\n  decryptFailure              (23),\n  badCompressAlgorithm        (24),\n  missingCompressedContent    (25),\n  decompressFailure           (26),\n  wrongHardware               (27),\n  stalePackage                (28),\n  notInCommunity              (29), unsupportedPackageType      (30),\n  missingDependency           (31),\n  wrongDependencyVersion      (32),\n  insufficientMemory          (33),\n  badFirmware                 (34),\n  unsupportedParameters       (35),\n  breaksDependency            (36),\n  otherError                  (99) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "VendorLoadErrorCode ::= INTEGER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The fields of the FirmwarePackageLoadError type have the following meanings:",
      "ja": "FirmwarePackageLoadErrorタイプのフィールドは以下の意味があります。"
    },
    {
      "indent": 3,
      "text": "version is an integer, and it provides the syntax version number for compatibility with future revisions of this specification. Implementations that conform to this specification MUST set the version to the default value, which is v1.",
      "ja": "バージョンは整数であり、そしてそれは、本明細書の今後の改正との互換性を保つための構文バージョン番号を提供します。この仕様に準拠する実装がV1であるデフォルト値にバージョンを設定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "hwType is an object identifier that identifies the type of hardware module on which the firmware package load was attempted.",
      "ja": "hwTypeファームウェアパッケージロードが試行されたハードウェア・モジュールのタイプを識別するオブジェクト識別子です。"
    },
    {
      "indent": 3,
      "text": "hwSerialNum is the serial number of the hardware module on which the firmware package load was attempted. No particular structure is imposed on the serial number; it need not be an integer. However, the combination of the hwType and hwSerialNum uniquely identifies the hardware module.",
      "ja": "hwSerialNumファームウェアパッケージロードが試行されたハードウェアモジュールのシリアル番号です。特に構造はシリアル番号に課されていません。それは、整数である必要はありません。しかし、hwTypeとhwSerialNumの組み合わせが一意のハードウェアモジュールを識別する。"
    },
    {
      "indent": 3,
      "text": "errorCode identifies the error that occurred.",
      "ja": "errorCodeは、発生したエラーを識別します。"
    },
    {
      "indent": 3,
      "text": "vendorErrorCode is optional; however, it MUST be present if the errorCode contains a value of otherError. When errorCode contains a value other than otherError, the vendorErrorCode can provide vendor-specific supplemental information.",
      "ja": "vendorErrorCodeはオプションです。 ErrorCodeがotherErrorの値が含まれている場合しかし、それが存在しなければなりません。 ErrorCodeがotherError以外の値を含む場合、vendorErrorCodeは、ベンダー固有の補足情報を提供することができます。"
    },
    {
      "indent": 3,
      "text": "fwPkgName is optional. When it is present, it identifies the firmware package that was being loaded when the error occurred. As described in Section 2.2.3, two approaches to naming firmware packages are supported: legacy and preferred. A legacy firmware package name is an octet string. A preferred firmware package name is a combination of the firmware package object identifier and an integer version number.",
      "ja": "fwPkgNameはオプションです。それが存在する場合、それはエラーが発生したときにロードされたファームウェアパッケージを識別します。 2.2.3項で述べたように、ファームウェアパッケージに名前を付けるには、2つの方法がサポートされています：レガシー、好ましいです。従来のファームウェアパッケージ名は、オクテット文字列です。好ましいファームウェアパッケージ名は、ファームウェアパッケージオブジェクト識別子と、整数バージョン番号の組み合わせです。"
    },
    {
      "indent": 3,
      "text": "config identifies the current firmware configuration. The field is OPTIONAL, but support for this field is RECOMMENDED for hardware modules that permit the loading of more than one firmware package. One instance of CurrentFWConfig is used to provide information about each firmware package in hardware module.",
      "ja": "config現在のファームウェア構成を示しています。フィールドはオプションですが、このフィールドのサポートは、複数のファームウェアパッケージの読み込みを許可するハードウェアモジュールをお勧めします。 CurrentFWConfigの1つのインスタンスは、ハードウェア・モジュール内の各ファームウェアパッケージに関する情報を提供するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The fields of the CurrentFWConfig type have the following meanings:",
      "ja": "CurrentFWConfigタイプのフィールドは以下の意味があります。"
    },
    {
      "indent": 3,
      "text": "fwPkgType identifies the firmware package type. The firmware package type is an INTEGER, and the meaning of the integer value is specific to each hardware module.",
      "ja": "fwPkgTypeは、ファームウェアパッケージの種類を識別します。ファームウェアパッケージのタイプは整数であり、整数値の意味は、各ハードウェアモジュールに固有です。"
    },
    {
      "indent": 3,
      "text": "fwPkgName identifies the firmware package. As described in Section 2.2.3, two approaches to naming firmware packages are supported: legacy and preferred. A legacy firmware package name is an octet string. A preferred firmware package name is a combination of the firmware package object identifier and an integer version number.",
      "ja": "fwPkgNameは、ファームウェアパッケージを識別します。 2.2.3項で述べたように、ファームウェアパッケージに名前を付けるには、2つの方法がサポートされています：レガシー、好ましいです。従来のファームウェアパッケージ名は、オクテット文字列です。好ましいファームウェアパッケージ名は、ファームウェアパッケージオブジェクト識別子と、整数バージョン番号の組み合わせです。"
    },
    {
      "indent": 3,
      "text": "The errorCode values have the following meanings:",
      "ja": "errorCode値は以下の意味があります。"
    },
    {
      "indent": 3,
      "text": "decodeFailure: The ASN.1 decode of the firmware package load failed. The provided input did not conform to BER, or it was not ASN.1 at all.",
      "ja": "decodeFailure：ファームウェアパッケージの負荷のASN.1デコードに失敗しました。提供された入力は、BERに適合していなかった、またはそれがすべてではASN.1いませんでした。"
    },
    {
      "indent": 3,
      "text": "badContentInfo: Invalid ContentInfo syntax, or the contentType carried within the ContentInfo is unknown or unsupported.",
      "ja": "badContentInfo：無効ContentInfo構文、またはContentInfo以内に実施のcontentTypeが不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "badSignedData: Invalid SignedData syntax, the version is unknown or unsupported, or more than one entry is present in digestAlgorithms.",
      "ja": "badSignedData：無効のSignedData構文、バージョンが不明またはサポートされていない、または複数のエントリはdigestAlgorithmsに存在しています。"
    },
    {
      "indent": 3,
      "text": "badEncapContent: Invalid EncapsulatedContentInfo syntax, or the contentType carried within the eContentType is unknown or unsupported. This error can be generated due to problems located in SignedData or CompressedData.",
      "ja": "badEncapContent：無効EncapsulatedContentInfo構文、またはcontentTypeのはのeContentType内に担持さが不明またはサポートされていません。このエラーが原因のSignedDataかCompressedDataにある問題を発生させることができます。"
    },
    {
      "indent": 3,
      "text": "badCertificate: Invalid syntax for one or more certificates in CertificateSet.",
      "ja": "badCertificate：証明書群内の1つのまたは複数の証明書の無効な構文。"
    },
    {
      "indent": 3,
      "text": "badSignerInfo: Invalid SignerInfo syntax, or the version is unknown or unsupported.",
      "ja": "badSignerInfo：無効のSignerInfo構文、またはバージョンが不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "badSignedAttrs: Invalid signedAttrs syntax within SignerInfo.",
      "ja": "badSignedAttrs：無効signedAttrsのSignerInfo内の構文。"
    },
    {
      "indent": 3,
      "text": "badUnsignedAttrs: The unsignedAttrs within SignerInfo contains an attribute other than the wrapped-firmware-decryption-key attribute, which is the only unsigned attribute supported by this specification.",
      "ja": "badUnsignedAttrs：のSignerInfo内unsignedAttrsはこの仕様でサポートされている唯一の未署名の属性です包まれ、ファームウェア復号鍵属性以外の属性が含まれています。"
    },
    {
      "indent": 3,
      "text": "missingContent: The optional eContent is missing in EncapsulatedContentInfo, which is required in this specification. This error can be generated due to problems located in SignedData or CompressedData.",
      "ja": "missingContent：オプションのe-コンテンツは、この仕様で要求されるEncapsulatedContentInfo、にありません。このエラーが原因のSignedDataかCompressedDataにある問題を発生させることができます。"
    },
    {
      "indent": 3,
      "text": "noTrustAnchor: Two situations can lead to this error. In one case, the subjectKeyIdentifier does not identify the public key of a trust anchor or a certification path that terminates with an installed trust anchor. In the other case, the issuerAndSerialNumber does not identify the public key of a trust anchor or a certification path that terminates with an installed trust anchor.",
      "ja": "noTrustAnchor：2つの状況では、このエラーにつながることができます。あるケースでは、subjectKeyIdentifierは、トラストアンカーまたはインストールトラストアンカーで終了証明書パスの公開鍵を識別しません。他のケースでは、issuerAndSerialNumberは、トラストアンカーまたはインストールトラストアンカーで終了証明書パスの公開鍵を識別しません。"
    },
    {
      "indent": 3,
      "text": "notAuthorized: The sid within SignerInfo leads to an installed trust anchor, but that trust anchor is not an authorized firmware package signer.",
      "ja": "notAuthorized：のSignerInfo内のsidはインストールトラストアンカーにつながるが、そのトラストアンカーが正規のファームウェアパッケージの署名者ではありません。"
    },
    {
      "indent": 3,
      "text": "badDigestAlgorithm: The digestAlgorithm in either SignerInfo or SignedData is unknown or unsupported.",
      "ja": "badDigestAlgorithm：のSignerInfoのいずれかでdigestAlgorithmかのSignedDataが不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "badSignatureAlgorithm: The signatureAlgorithm in SignerInfo is unknown or unsupported.",
      "ja": "badSignatureAlgorithm：のSignerInfo中のsignatureAlgorithmが不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "unsupportedKeySize: The signatureAlgorithm in SignerInfo is known and supported, but the firmware package signature could not be validated because an unsupported key size was employed by the signer.",
      "ja": "unsupportedKeySize：のSignerInfo中のsignatureAlgorithmは知られており、サポートされていますが、サポートされていないキーサイズは署名者によって採用されたため、ファームウェアパッケージの署名が検証できませんでした。"
    },
    {
      "indent": 3,
      "text": "signatureFailure: The signatureAlgorithm in SignerInfo is known and supported, but the signature in signature in SignerInfo could not be validated.",
      "ja": "signatureFailure：のSignerInfo中のsignatureAlgorithmが知られており、サポートされていますが、のSignerInfo内の署名で署名が検証できませんでした。"
    },
    {
      "indent": 3,
      "text": "contentTypeMismatch: The contentType carried within the eContentType does not match the content type carried in the signed attribute.",
      "ja": "contentTypeMismatch：contentTypeのはのeContentType以内に運ばは署名している属性で運ばれたコンテンツの種類と一致していません。"
    },
    {
      "indent": 3,
      "text": "badEncryptedData: Invalid EncryptedData syntax; the version is unknown or unsupported.",
      "ja": "badEncryptedData：無効はEncryptedData構文。バージョンが不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "unprotectedAttrsPresent: EncryptedData contains unprotectedAttrs, which are not permitted in this specification.",
      "ja": "unprotectedAttrsPresent：はEncryptedDataは、この仕様では許可されませんunprotectedAttrsが含まれています。"
    },
    {
      "indent": 3,
      "text": "badEncryptContent: Invalid EncryptedContentInfo syntax, or the contentType carried within the contentType is unknown or unsupported.",
      "ja": "badEncryptContent：無効EncryptedContentInfo構文、またはcontentTypeのはcontentTypeの中に運ばは不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "badEncryptAlgorithm: The firmware-encryption algorithm identified by contentEncryptionAlgorithm in EncryptedContentInfo is unknown or unsupported.",
      "ja": "badEncryptAlgorithm：EncryptedContentInfoにcontentEncryptionAlgorithmで識別されるファームウェアの暗号化アルゴリズムが不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "missingCiphertext: The optional encryptedContent is missing in EncryptedContentInfo, which is required in this specification.",
      "ja": "missingCiphertext：オプションの暗号化コンテンツは、この仕様で要求されるEncryptedContentInfo、にありません。"
    },
    {
      "indent": 3,
      "text": "noDecryptKey: The hardware module does not have the firmware-decryption key named in the decrypt key identifier signed attribute.",
      "ja": "noDecryptKey：ハードウェアモジュールは、解読キー識別子署名している属性で指定されたファームウェア・復号鍵を持っていません。"
    },
    {
      "indent": 3,
      "text": "decryptFailure: The firmware package did not decrypt properly.",
      "ja": "decryptFailure：ファームウェアパッケージが正常に復号化できませんでした。"
    },
    {
      "indent": 3,
      "text": "badCompressAlgorithm: The compression algorithm identified by compressionAlgorithm in CompressedData is unknown or unsupported.",
      "ja": "badCompressAlgorithm：CompressedDataにcompressionAlgorithmで識別される圧縮アルゴリズムが不明またはサポートされていません。"
    },
    {
      "indent": 3,
      "text": "missingCompressedContent: The optional eContent is missing in EncapsulatedContentInfo, which is required in this specification.",
      "ja": "missingCompressedContent：オプションのe-コンテンツは、この仕様で要求されるEncapsulatedContentInfo、にありません。"
    },
    {
      "indent": 3,
      "text": "decompressFailure: The firmware package did not decompress properly.",
      "ja": "decompressFailure：ファームウェアパッケージが正常に解凍しませんでした。"
    },
    {
      "indent": 3,
      "text": "wrongHardware: The processing hardware module is not listed in the target hardware module identifiers signed attribute.",
      "ja": "wrongHardware：処理ハードウェアモジュールは、属性に署名したターゲットハードウェアモジュール識別子に記載されていません。"
    },
    {
      "indent": 3,
      "text": "stalePackage: The firmware package is rejected because it is stale.",
      "ja": "stalePackage：それは古くなっているので、ファームウェアパッケージは拒否されます。"
    },
    {
      "indent": 3,
      "text": "notInCommunity: The hardware module is not a member of the community described in the community identifiers signed attribute.",
      "ja": "notInCommunity：ハードウェアモジュールは、属性に署名したコミュニティ識別子で説明コミュニティのメンバーではありません。"
    },
    {
      "indent": 3,
      "text": "unsupportedPackageType: The firmware package type identified in the firmware package information signed attribute is not supported by the combination of the hardware module and the bootstrap loader.",
      "ja": "unsupportedPackageTypeは：ファームウェアパッケージ情報署名している属性で特定されたファームウェアパッケージタイプは、ハードウェアモジュールとブートストラップローダの組み合わせによってサポートされていません。"
    },
    {
      "indent": 3,
      "text": "missingDependency: The firmware package being loaded depends on routines that are part of another firmware package, but that firmware package is not available.",
      "ja": "missingDependency：ファームウェアパッケージがロードされているが、別のファームウェアパッケージの一部であるルーチンに依存するが、そのファームウェアパッケージは利用できません。"
    },
    {
      "indent": 3,
      "text": "wrongDependencyVersion: The firmware package being loaded depends on routines that are part of the another firmware package, and the available version of that package has an older version number than is required. The available firmware package does not fulfill the dependencies.",
      "ja": "wrongDependencyVersion：ファームウェアパッケージがロードされているが、別のファームウェアパッケージの一部であるルーチンに依存し、そのパッケージの利用できるバージョンが必要とされるよりも古いバージョン番号を持ちます。可能なファームウェアパッケージは、依存関係を満たしていません。"
    },
    {
      "indent": 3,
      "text": "insufficientMemory: The firmware package could not be loaded because the hardware module did not have sufficient memory.",
      "ja": "insufficientMemory：ハードウェアモジュールは、十分なメモリを持っていなかったので、ファームウェアパッケージをロードできませんでした。"
    },
    {
      "indent": 3,
      "text": "badFirmware: The signature on the firmware package was validated, but the firmware package itself was not in an acceptable format. The details will be specific to each hardware module. For example, a hardware module that is composed of multiple firmware-programmable components could not find the internal tagging within the firmware package to distribute executable code to each of the components.",
      "ja": "badFirmware：ファームウェアパッケージの署名を検証するが、ファームウェアパッケージ自体は許容される形式ではなかったです。詳細は、各ハードウェアモジュールに固有のものになります。例えば、複数のファームウェアプログラマブルコンポーネントで構成されたハードウェアモジュールは、コンポーネントの各々に実行可能コードを配布するファームウェアパッケージ内の内部タギングを見つけることができませんでした。"
    },
    {
      "indent": 3,
      "text": "unsupportedParameters: The signature on the firmware package could not be validated because the signer used signature algorithm parameters that are not supported by the hardware module signature verification routines.",
      "ja": "unsupportedParameters：署名者がハードウェアモジュールの署名検証ルーチンでサポートされていない署名アルゴリズムパラメータを使用しているため、ファームウェアパッケージの署名が検証できませんでした。"
    },
    {
      "indent": 3,
      "text": "breaksDependency: Another firmware package has a dependency that can no longer be satisfied if the firmware package being loaded is accepted.",
      "ja": "breaksDependency：別のファームウェアパッケージがロードされているファームウェアパッケージが受け入れられた場合、もはや満足させることができるの依存関係を持っています。"
    },
    {
      "indent": 3,
      "text": "otherError: An error occurred that does not fit any of the previous error codes.",
      "ja": "otherError：エラーは、それは前のエラーコードのいずれかに適合していませんが発生しました。"
    },
    {
      "indent": 0,
      "text": "4.2. Signed Attributes",
      "section_title": true,
      "ja": "4.2。署名された属性"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST digitally sign a collection of attributes along with the firmware package load error report. Each attribute in the collection MUST be DER encoded [X.509-88]. The syntax for attributes is defined in [CMS], and it was repeated in Section 2.2 for convenience.",
      "ja": "ハードウェアモジュールは、デジタルファームウェアパッケージロードエラーレポートと一緒に属性のコレクションに署名しなければなりません。コレクション内の各属性は、DERは、[X.509-88]符号化されなければなりません。属性の構文は、[CMS]で定義され、それは利便性のために、2.2節で繰り返しました。"
    },
    {
      "indent": 3,
      "text": "Each of the attributes used with this profile has a single attribute value, even though the syntax is defined as a SET OF AttributeValue. There MUST be exactly one instance of AttributeValue present.",
      "ja": "このプロファイルで使用される属性のそれぞれは、構文はAttributeValueの集合として定義されていても、単一の属性値を持っています。 AttributeValueの存在の正確に一つのインスタンスがあるに違いありません。"
    },
    {
      "indent": 3,
      "text": "The SignedAttributes syntax within signerInfo is defined as a SET OF Attributes. The SignedAttributes MUST include only one instance of any particular attribute.",
      "ja": "SignerInfo内signedAttributesの構文は、属性の集合として定義されます。 signedAttributesのは、特定の属性のインスタンスを1つだけ含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST include the content-type and message-digest attributes. If the hardware module includes a real-time clock, then the hardware module SHOULD also include the signing-time attribute. The hardware module MAY include any other attribute that it deems appropriate.",
      "ja": "ハードウェアモジュールは、コンテンツタイプとメッセージダイジェスト属性を含まなければなりません。ハードウェアモジュールは、リアルタイムクロックが含まれている場合は、ハードウェアモジュールはまた、署名時の属性を含むべきです。ハードウェアモジュールは、それが適切と判断、他の属性を含むかもしれません。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Content Type",
      "section_title": true,
      "ja": "4.2.1。コンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST include a content-type attribute with the value of id-ct-firmwareLoadError (1.2.840.113549.1.9.16.1.18). Section 11.1 of [CMS] defines the content-type attribute.",
      "ja": "ハードウェアモジュールは、ID-CT-firmwareLoadError（1.2.840.113549.1.9.16.1.18）の値を持つコンテンツタイプ属性を含まなければなりません。 [CMS]のセクション11.1には、コンテンツ・タイプの属性を定義します。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Message Digest",
      "section_title": true,
      "ja": "4.2.2。メッセージダイジェスト"
    },
    {
      "indent": 3,
      "text": "The hardware module MUST include a message-digest attribute, having as its value the message digest of the FirmwarePackageLoadError content. Section 11.2 of [CMS] defines the message-digest attribute.",
      "ja": "ハードウェアモジュールは、その値としてFirmwarePackageLoadErrorコンテンツのメッセージダイジェストを有する、メッセージダイジェスト属性を含まなければなりません。 [CMS]のセクション11.2はメッセージダイジェスト属性を定義します。"
    },
    {
      "indent": 0,
      "text": "4.2.3. Signing Time",
      "section_title": true,
      "ja": "4.2.3。時間の署名"
    },
    {
      "indent": 3,
      "text": "If the hardware module includes a real-time clock, then hardware module SHOULD include a signing-time attribute, specifying the time at which the firmware package load error report was generated. Section 11.3 of [CMS] defines the signing-time attribute.",
      "ja": "ハードウェアモジュールは、リアルタイムクロックが含まれている場合は、ハードウェアモジュールは、ファームウェアパッケージロードエラーレポートが生成された時刻を指定して、署名時の属性を含むべきです。 [CMS]のセクション11.3は、署名時の属性を定義します。"
    },
    {
      "indent": 0,
      "text": "5. Hardware Module Name",
      "section_title": true,
      "ja": "5.ハードウェア・モジュール名"
    },
    {
      "indent": 3,
      "text": "Support for firmware package load receipts, as discussed in Section 3, is OPTIONAL, and support for the firmware package load error reports, as discussed in Section 4, is OPTIONAL. Hardware modules that support receipt or error report generation MUST have unique serial numbers. Further, hardware modules that support signed receipt or error report generation MUST have private signature keys and corresponding signature validation certificates [PROFILE] or their designators. The conventions for hardware module naming in the signature validation certificates are specified in this section.",
      "ja": "第4節で説明したようにファームウェアパッケージのロードの領収書のサポート、第3節で述べたように、オプションで、ファームウェアパッケージの読み込みエラーレポートのサポートは、任意です。領収書やエラーレポートの生成をサポートするハードウェアモジュールには一意のシリアル番号を持たなければなりません。さらに、サポートするハードウェアモジュールは、署名された領収書やエラーレポートの生成には、秘密署名鍵と対応する署名検証証明書[PROFILE]またはその指定子を持たなければなりません。署名検証証明書内のハードウェアモジュールの命名の規則は、このセクションで指定されています。"
    },
    {
      "indent": 3,
      "text": "The hardware module vendor or a trusted third party MUST issue the signature validation certificate prior to deployment of the hardware module. The certificate is likely to be issued at the time of manufacture. The subject alternative name in this certificate identifies the hardware module. The subject distinguished name is empty, but a critical subject alternative name extension contains the hardware module name, using the otherName choice within the GeneralName structure.",
      "ja": "ハードウェアモジュールベンダまたは信頼できるサードパーティは、ハードウェアモジュールの展開に先立って、署名の検証証明書を発行しなければなりません。証明書は、製造時に発行される可能性があります。この証明書のサブジェクト代替名は、ハードウェア・モジュールを識別する。サブジェクト識別名は空ですが、重要なサブジェクト代替名の拡張子はいるGeneralName構造内otherName選択肢を使用して、ハードウェアモジュールの名前が含まれています。"
    },
    {
      "indent": 3,
      "text": "The hardware module name form is identified by the id-on-hardwareModuleName object identifier:",
      "ja": "ハードウェアモジュール名形式は、IDオンhardwareModuleNameオブジェクト識別子によって識別されます。"
    },
    {
      "indent": 6,
      "text": "id-on-hardwareModuleName OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) dod(6) internet(1) security(5)\n  mechanisms(5) pkix(7) on(8) 4 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "A HardwareModuleName is composed of an object identifier and an octet string:",
      "ja": "HardwareModuleNameは、オブジェクト識別子とオクテットストリングで構成されています。"
    },
    {
      "indent": 6,
      "text": "HardwareModuleName ::= SEQUENCE {\n  hwType OBJECT IDENTIFIER,\n  hwSerialNum OCTET STRING }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The fields of the HardwareModuleName type have the following meanings:",
      "ja": "HardwareModuleNameタイプのフィールドは以下の意味があります。"
    },
    {
      "indent": 3,
      "text": "hwType is an object identifier that identifies the type of hardware module. A unique object identifier names a hardware model and revision.",
      "ja": "hwTypeは、ハードウェアモジュールのタイプを識別するオブジェクト識別子です。一意のオブジェクト識別子名ハードウェアモデルとリビジョン。"
    },
    {
      "indent": 3,
      "text": "hwSerialNum is the serial number of the hardware module. No particular structure is imposed on the serial number; it need not be an integer. However, the combination of the hwType and hwSerialNum uniquely identifies the hardware module.",
      "ja": "hwSerialNumは、ハードウェアモジュールのシリアル番号です。特に構造はシリアル番号に課されていません。それは、整数である必要はありません。しかし、hwTypeとhwSerialNumの組み合わせが一意のハードウェアモジュールを識別する。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document describes the use of the Cryptographic Message Syntax (CMS) to protect firmware packages; therefore, the security considerations discussed in [CMS] apply to this specification as well.",
      "ja": "この文書では、ファームウェアパッケージを保護するために暗号メッセージ構文（CMS）の使用が記載されています。従って、[CMS]で説明したセキュリティ上の考慮事項が同様に本明細書に適用されます。"
    },
    {
      "indent": 3,
      "text": "The conventions specified in this document raise a few security considerations of their own.",
      "ja": "この文書で指定された規則は、自分自身のいくつかのセキュリティ上の考慮事項を上げます。"
    },
    {
      "indent": 0,
      "text": "6.1. Cryptographic Keys and Algorithms",
      "section_title": true,
      "ja": "6.1。暗号化キーとアルゴリズム"
    },
    {
      "indent": 3,
      "text": "Private signature keys must be protected. Compromise of the private key used to sign firmware packages permits unauthorized parties to generate firmware packages that are acceptable to hardware modules. Compromise of the hardware module private key allows unauthorized parties to generate signed firmware package load receipts and error reports.",
      "ja": "秘密署名鍵は保護されなければなりません。ファームウェアパッケージに署名するために使用する秘密鍵の危殆は、ハードウェアモジュールに許容されるファームウェアパッケージを生成するために、権限のない者を許可します。ハードウェアモジュールの秘密鍵の危殆は、権限のない者が署名したファームウェアパッケージのロードの領収書とエラーレポートを生成することができます。"
    },
    {
      "indent": 3,
      "text": "The firmware-decryption key must be protected. Compromise of the key may result in the disclosure of the firmware package to unauthorized parties.",
      "ja": "ファームウェア・復号鍵は保護されなければなりません。キーの妥協は、権限のない者へのファームウェアパッケージの開示をもたらすことができます。"
    },
    {
      "indent": 3,
      "text": "Cryptographic algorithms become weaker with time. As new cryptanalysis techniques are developed and computing performance improves, the work factor to break a particular cryptographic algorithm will be reduced. The ability to change the firmware package provides an opportunity to update or replace cryptographic algorithms. Although this capability is desirable, cryptographic algorithm replacement can lead to interoperability failures. Therefore, the rollout of new cryptographic algorithms must be managed. Generally, the previous generation of cryptographic algorithms and their replacements need to be supported at the same time in order to facilitate an orderly transition.",
      "ja": "暗号化アルゴリズムは、時間とともに弱くなります。新しい暗号解読技術が開発され、コンピューティング性能が向上しているように、特定の暗号アルゴリズムを破る仕事率が低下します。ファームウェアパッケージを変更する機能は、暗号化アルゴリズムを更新または交換する機会を提供します。この機能は望ましいが、暗号アルゴリズムの交換は、相互運用性の障害につながることができます。そのため、新しい暗号アルゴリズムの展開を管理する必要があります。一般に、暗号化アルゴリズムおよびそれらの置換の前の世代は、秩序ある移行を容易にするために、同時にサポートする必要があります。"
    },
    {
      "indent": 0,
      "text": "6.2. Random Number Generation",
      "section_title": true,
      "ja": "6.2。乱数生成"
    },
    {
      "indent": 3,
      "text": "When firmware packages are encrypted, the source of the firmware package must randomly generate firmware-encryption keys. Also, the generation of public/private signature key pairs relies on a random numbers. The use of inadequate pseudo-random number generators (PRNGs) to generate cryptographic keys can result in little or no security. An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute-force searching the whole key space. The generation of quality random numbers is difficult. RFC 4086 [RANDOM] offers important guidance in this area.",
      "ja": "ファームウェアパッケージが暗号化されている場合は、ファームウェアパッケージのソースは、ランダムにファームウェアの暗号化キーを生成する必要があります。また、パブリック/プライベート署名鍵ペアの生成は、乱数に依存しています。暗号鍵を生成するために不十分な疑似乱数発生器（のPRNG）の使用は、ほとんどまたは全くセキュリティをもたらすことができます。攻撃者はそれをはるかに簡単に全体のキースペースを検索結果の小さな可能性の集合ではなく、ブルートフォースを探し、キーを生成PRNG環境を再現するかもしれません。品質の乱数の生成が困難です。 RFC 4086 [RANDOM]はこの領域で重要な指導を提供しています。"
    },
    {
      "indent": 0,
      "text": "6.3. Stale Firmware Package Version Number",
      "section_title": true,
      "ja": "6.3。古いファームウェアパッケージのバージョン番号"
    },
    {
      "indent": 3,
      "text": "The firmware signer determines whether a stale version number is included. The policy of the firmware signer needs to consider many factors. Consider the flaw found by Ian Goldberg and David Wagner in the random number generator of the Netscape browser in 1996 [DDJ]. This flaw completely undermines confidentiality protection. A firmware signer might use the stale version number to ensure that upgraded hardware modules do not resume use of the flawed firmware. However, another firmware signer may not consider this an appropriate situation to employ the stale version number, preferring to delegate this decision to someone closer to the operation of the hardware module. Such a person is likely to be in a better position to evaluate whether other bugs introduced in the newer firmware package impose worse operational concerns than the confidentiality concern caused by the flawed random number generator. For example, a user who never uses the encryption feature of the flawed Netscape browser will determine the most appropriate version to use without considering the random number flaw or its fix.",
      "ja": "ファームウェアの署名者が古いバージョン番号が含まれているか否かを判断します。ファームウェアの署名者の政策は、多くの要因を考慮する必要があります。 [DDJ] 1996年にNetscapeブラウザの乱数生成器にイアン・ゴールドバーグとデヴィッド・ワグナーによって発見欠陥を考えてみましょう。この欠陥は、完全に機密保護を損ないます。ファームウェアの署名者は、アップグレードされたハードウェアモジュールは、欠陥のあるファームウェアの使用を再開していないことを確認するために、古いバージョン番号を使用する場合があります。しかし、別のファームウェアの署名者は、ハードウェアモジュールの動作に近い誰かにこの決定を委任することを好む、古いバージョン番号を使用することが、この適切な状況を考慮しない場合があります。そのような人は、新しいファームウェアパッケージで導入された他のバグは、欠陥のある乱数生成器によって引き起こされる機密性の懸念よりも悪い運用の懸念を課すかどうかを評価するためのより良い位置にある可能性が高いです。例えば、欠陥のあるNetscapeブラウザの暗号化機能を使用したことがないユーザーは、乱数の欠陥やその修正を考慮せずに使用するための最も適切なバージョンを確認します。"
    },
    {
      "indent": 3,
      "text": "The stale version number is especially useful when the security interests of the person choosing which firmware package version to load into a particular hardware module do not align with the security interests of the firmware package signer. For example, stale version numbers may be useful in hardware modules that provide digital rights management (DRM). Also, stale version numbers will be useful when the deployment organization (as opposed to the firmware package vendor) is the firmware signer. Further, stale version numbers will be useful for firmware packages that need to be trusted to implement organizational (as opposed to the deployment organization) security policy, regardless of whether the firmware signer is the deployment organization or the vendor. For example, hardware devices employed by the military will probably make use of stale version numbers.",
      "ja": "古いバージョン番号は、特定のハードウェアモジュールにロードする人が選択したファームウェアパッケージのバージョンの安全保障上の利益は、ファームウェアパッケージの署名者の安全保障上の利益と整合していない場合に特に便利です。例えば、古くなったバージョン番号は、デジタル著作権管理（DRM）を提供するハードウェアモジュールに有用であり得ます。展開組織が（ファームウェアパッケージのベンダーではなく）、ファームウェアの署名者である場合にも、古いバージョン番号は有用であろう。さらに、古いバージョン番号に関係なく、ファームウェアの署名者が展開組織やベンダーであるかどうかの、セキュリティポリシー（展開組織ではなく）組織を実装するために、信頼される必要があるファームウェアパッケージのために有用であろう。例えば、軍によって使用されるハードウェア・デバイスは、おそらく古いバージョン番号を利用します。"
    },
    {
      "indent": 3,
      "text": "The use of a stale version number in a firmware package that employs the preferred firmware package name form cannot completely prevent subsequent use of the stale firmware package. Despite this shortcoming, the feature is included since it is useful in some important situations. By loading different types of firmware packages, each with its own stale firmware package version number until the internal storage for the stale version number is exceeded, the user can circumvent the mechanism. Consider a hardware module that has storage for two stale version numbers. Suppose that FWPKG-A version 3 is loaded, indicating that FWPKG-A version 2 is stale. The user can sequentially load the following:",
      "ja": "好ましいファームウェアパッケージ名形式を採用したファームウェアパッケージの失効バージョン番号の使用は、完全に失効ファームウェアパッケージのその後の使用を防ぐことができません。それはいくつかの重要な状況で有用であるので、この欠点にもかかわらず、機能が含まれています。古くなったバージョン番号の内部ストレージを超えるまでファームウェアパッケージの異なる種類の、それ自体の陳腐ファームウェアパッケージのバージョン番号とそれぞれをロードすることにより、ユーザが機構を回避することができます。 2つの古いバージョン番号のストレージを持っているハードウェアモジュールを考えてみましょう。 FWPKGバージョン2が失効していることを示す、FWPKGバージョン3がロードされると仮定する。ユーザーは、順次、以下をロードすることができます。"
    },
    {
      "indent": 6,
      "text": "- FWPKG-B version 8, indicating that FWPKG-B version 4 is stale. (Note: The internal storage indicates that FWPKG-A version 2 and FWPKG-B version 4 are stale.)",
      "ja": " -  FWPKG-Bバージョン8、FWPKG-Bバージョン4が失効していることを示します。 （注：内部ストレージがFWPKGバージョン2及びFWPKG-Bバージョン4が失効していることを示しています。）"
    },
    {
      "indent": 6,
      "text": "- FWPKG-C version 5, indicating that FWPKG-C version 3 is stale. (Note: The internal storage indicates that FWPKG-B version 4 and FWPKG-C version 3 are stale.)",
      "ja": " -  FWPKG-Cバージョン3が失効していることを示すFWPKG-Cバージョン5、。 （注：内部記憶FWPKG-Bバージョン4とFWPKG-Cバージョン3が失効していることを示しています。）"
    },
    {
      "indent": 6,
      "text": "- FWPKG-A version 2.",
      "ja": " -  FWPKG-バージョン2。"
    },
    {
      "indent": 3,
      "text": "Because many hardware modules are expected to have very few firmware packages written for them, the stale firmware package version feature provides important protections. The amount of non-volatile storage that needs to be dedicated to saving firmware package identifiers and version numbers depends on the number of firmware packages that are likely to be developed for the hardware module.",
      "ja": "多くのハードウェアモジュールは、彼らのために書かれた非常に少数のファームウェアパッケージを持っていることが予想されるため、古いファームウェアパッケージのバージョン機能は、重要な保護を提供します。ファームウェアパッケージ識別子とバージョン番号を保存専用にする必要があり、不揮発性ストレージの量は、ハードウェアモジュールのために開発される可能性があるファームウェアパッケージの数に依存します。"
    },
    {
      "indent": 3,
      "text": "The use of legacy firmware package name form does not improve this situation. In fact, the legacy firmware package names are usually larger than an object identifier. Thus, comparable stale version protection requires more memory.",
      "ja": "従来のファームウェアパッケージ名形式の使用は、このような状況を改善しません。実際には、従来のファームウェアパッケージ名は、通常、オブジェクト識別子よりも大きくなっています。このように、同等の古いバージョンの保護は、より多くのメモリを必要とします。"
    },
    {
      "indent": 3,
      "text": "A firmware signer can ensure that stale version numbers are honored by limiting the number of different types of firmware packages that are signed. If all of the hardware modules are able to store a stale version number for each of the different types of firmware package, then the hardware module will be able to provide the desired protection. This requires the firmware signer to have a deep understanding of all of the hardware modules that might accept the firmware package.",
      "ja": "ファームウェアの署名者は古いバージョン番号が署名されているファームウェアパッケージの異なるタイプの数を制限することで光栄されていることを確認することができます。ハードウェアモジュールの全てがファームウェアパッケージの異なるタイプごとに失効バージョン番号を格納することができる場合、ハードウェアモジュールは、所望の保護を提供することができるであろう。これは、ファームウェアパッケージを受け入れる可能性があるハードウェアモジュールのすべての深い理解を持っているファームウェアの署名者が必要です。"
    },
    {
      "indent": 0,
      "text": "6.4. Community Identifiers",
      "section_title": true,
      "ja": "6.4。コミュニティ識別子"
    },
    {
      "indent": 3,
      "text": "When a firmware package includes a community identifier, the confidence that the package is only used by the intended community depends on the mechanism used to configure community membership. This document does not specify a mechanism for the assignment of community membership to hardware modules, and the various alternatives have different security properties. Also, the authority that makes community identifier assignments to hardware modules might be different than the authority that generates firmware packages.",
      "ja": "ファームウェアパッケージは、パッケージが意図したコミュニティでのみ使用されていることをコミュニティ識別子、自信が含まれている場合、コミュニティのメンバーシップを設定するために使用されるメカニズムに依存します。この文書では、ハードウェアモジュールへのコミュニティメンバーシップの割り当てのためのメカニズムを指定していない、と様々な選択肢が異なるセキュリティ特性を有しています。また、ハードウェアモジュールにコミュニティ識別子の割り当てを行う権限は、ファームウェアパッケージを作成する権限とは異なる場合があります。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7.参考"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[COMPRESS] Gutmann, P., \"Compressed Data Content Type for Cryptographic Message Syntax (CMS)\", RFC 3274, June 2002.",
      "ja": "[COMPRESS] Gutmann氏、P.、 \"暗号メッセージ構文（CMS）のための圧縮されたデータcontent type\"、RFC 3274、2002年6月。"
    },
    {
      "indent": 3,
      "text": "[CMS] Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC 3852, July 2004.",
      "ja": "[CMS] Housley氏、R.、 \"暗号メッセージ構文（CMS）\"、RFC 3852、2004年7月。"
    },
    {
      "indent": 3,
      "text": "[ESS] Hoffman, P., \"Enhanced Security Services for S/MIME\", RFC 2634, June 1999.",
      "ja": "[ESS]ホフマン、P.、 \"S / MIMEのためのセキュリティサービスの強化\"、RFC 2634、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[PROFILE] Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 3280, April 2002.",
      "ja": "[PROFILE] Housley氏、R.、ポーク、W.、フォード、W.、およびD.ソロ、 \"インターネットX.509公開鍵暗号基盤証明書と証明書失効リスト（CRL）プロフィール\"、RFC 3280、2002年4月。"
    },
    {
      "indent": 3,
      "text": "[SHA1] National Institute of Standards and Technology. FIPS Pub 180-1: Secure Hash Standard. 17 April 1995.",
      "ja": "[SHA1]アメリカ国立標準技術研究所。 FIPSパブ180-1：セキュアハッシュ標準。 1995年4月17日。"
    },
    {
      "indent": 3,
      "text": "[STDWORDS] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[STDWORDS]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[UTF-8] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD 63, RFC 3629, November 2003.",
      "ja": "[UTF-8] Yergeau、F.、 \"UTF-8、ISO 10646の変換フォーマット\"、STD 63、RFC 3629、2003年11月。"
    },
    {
      "indent": 3,
      "text": "[X.208-88] CCITT. Recommendation X.208: Specification of Abstract Syntax Notation One (ASN.1). 1988.",
      "ja": "【X.208-88] CCITT。勧告X.208：抽象構文記法1（ASN.1）の仕様。 1988。"
    },
    {
      "indent": 3,
      "text": "[X.209-88] CCITT. Recommendation X.209: Specification of Basic Encoding Rules for Abstract Syntax Notation One (ASN.1). 1988.",
      "ja": "【X.209-88] CCITT。勧告X. 209：抽象構文記法1（ASN.1）のための基本的な符号化規則の仕様。 1988。"
    },
    {
      "indent": 3,
      "text": "[X.509-88] CCITT. Recommendation X.509: The Directory - Authentication Framework. 1988.",
      "ja": "【X.509-88] CCITT。勧告X.509：ディレクトリ - 認証フレームワーク。 1988。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[ACPROFILE] Farrell, S. and R. Housley, \"An Internet Attribute Certificate Profile for Authorization\", RFC 3281, April 2002.",
      "ja": "[ACPROFILE]ファレル、S.とR. Housley氏、 \"認可のためのインターネット属性証明書プロフィール\"、RFC 3281、2002年4月。"
    },
    {
      "indent": 3,
      "text": "[AES] National Institute of Standards and Technology. FIPS Pub 197: Advanced Encryption Standard (AES). 26 November 2001.",
      "ja": "[AES]アメリカ国立標準技術研究所。 FIPSパブ197：高度暗号化標準（AES）。 2001年11月26日。"
    },
    {
      "indent": 3,
      "text": "[DDJ] Goldberg, I. and D. Wagner. \"Randomness and the Netscape Browser.\" Dr. Dobb's Journal, January 1996.",
      "ja": "[DDJ]ゴールドバーグ、I.およびD.ワグナー。 「ランダムネスとNetscapeブラウザ。」博士ドッブのジャーナル、1996年1月。"
    },
    {
      "indent": 3,
      "text": "[DPD&DPV] Pinkas, D. and R. Housley, \"Delegated Path Validation and Delegated Path Discovery Protocol Requirements\", RFC 3379, September 2002.",
      "ja": "[DPD＆DPV]ピンカス、D.とR. Housley氏、 \"委任パス検証と委任パス発見プロトコル要件\"、RFC 3379、2002年9月。"
    },
    {
      "indent": 3,
      "text": "[OCSP] Myers, M., Ankney, R., Malpani, A., Galperin, S., and C. Adams, \"X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP\", RFC 2560, June 1999.",
      "ja": "[OCSP]マイヤーズ、M.、Ankney、R.、Malpani、A.、Galperin、S.、およびC.アダムス、 \"X.509のインターネット公開鍵暗号基盤のオンライン証明書状態プロトコル -  OCSP\"、RFC 2560、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[PKCS#6] RSA Laboratories. PKCS #6: Extended-Certificate Syntax Standard, Version 1.5. November 1993.",
      "ja": "[PKCS＃6] RSA研究所。 PKCS＃6：構文規格、バージョン1.5の証明書を拡張。 1993年11月。"
    },
    {
      "indent": 3,
      "text": "[RANDOM] Eastlake, D., 3rd, Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, June 2005.",
      "ja": "[ランダム]イーストレーク、D.、3、シラー、J.、およびS.クロッカー、 \"セキュリティのためのランダム要件\"、BCP 106、RFC 4086、2005年6月。"
    },
    {
      "indent": 3,
      "text": "[SECREQMTS] National Institute of Standards and Technology. FIPS Pub 140-2: Security Requirements for Cryptographic Modules. 25 May 2001.",
      "ja": "[SECREQMTS]アメリカ国立標準技術研究所。暗号モジュールのセキュリティ要件：FIPS 140-2をパブ。 2001年5月25日。"
    },
    {
      "indent": 3,
      "text": "[X.509-97] ITU-T. Recommendation X.509: The Directory - Authentication Framework. 1997.",
      "ja": "【X.509-97] ITU-T。勧告X.509：ディレクトリ - 認証フレームワーク。 1997。"
    },
    {
      "indent": 3,
      "text": "[X.509-00] ITU-T. Recommendation X.509: The Directory - Authentication Framework. 2000.",
      "ja": "【X.509-00] ITU-T。勧告X.509：ディレクトリ - 認証フレームワーク。 2000。"
    },
    {
      "indent": 0,
      "text": "Appendix A: ASN.1 Module",
      "ja": "付録A：ASN.1モジュール"
    },
    {
      "indent": 3,
      "text": "The ASN.1 module contained in this appendix defines the structures that are needed to implement the CMS-based firmware package wrapper. It is expected to be used in conjunction with the ASN.1 modules in [CMS], [COMPRESS], and [PROFILE].",
      "ja": "この付録に含まれているASN.1モジュールは、CMSベースのファームウェアパッケージラッパーを実装するために必要な構造を定義します。 ASN.1の中にモジュール[CMS]、[COMPRESS]、および[PROFILE]と組み合わせて使用​​されることが期待されます。"
    },
    {
      "indent": 3,
      "text": "CMSFirmwareWrapper { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0) cms-firmware-wrap(22) }",
      "ja": "CMSFirmwareWrapper {ISO（1）部材本体（2）米国（840）RSADSI（113549）PKCS（1）PKCS-9（9）SMIME（16）モジュール（0）CMS-ファームウェアラップ（22）}"
    },
    {
      "indent": 3,
      "text": "DEFINITIONS IMPLICIT TAGS ::= BEGIN",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "IMPORTS EnvelopedData FROM CryptographicMessageSyntax -- [CMS] { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0) cms-2004(24) };",
      "ja": "暗号メッセージ構文からの輸入EnvelopedDataの -  [CMS] {ISO（1）部材本体（2）米国（840）RSADSI（113549）PKCS（1）PKCS-9（9）SMIME（16）モジュール（0）CMS-2004（ 24）}。"
    },
    {
      "indent": 3,
      "text": "-- Firmware Package Content Type and Object Identifier",
      "ja": " - ファームウェアパッケージコンテンツタイプとオブジェクト識別子"
    },
    {
      "indent": 3,
      "text": "id-ct-firmwarePackage OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) ct(1) 16 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FirmwarePkgData ::= OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Firmware Package Signed Attributes and Object Identifiers",
      "ja": " - ファームウェアパッケージ署名属性とオブジェクト識別子"
    },
    {
      "indent": 3,
      "text": "id-aa-firmwarePackageID OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 35 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FirmwarePackageIdentifier ::= SEQUENCE {\n  name PreferredOrLegacyPackageIdentifier,\n  stale PreferredOrLegacyStalePackageIdentifier OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "PreferredOrLegacyPackageIdentifier ::= CHOICE {\n  preferred PreferredPackageIdentifier,\n  legacy OCTET STRING }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "PreferredPackageIdentifier ::= SEQUENCE {\n  fwPkgID OBJECT IDENTIFIER,\n  verNum INTEGER (0..MAX) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "PreferredOrLegacyStalePackageIdentifier ::= CHOICE {\n  preferredStaleVerNum INTEGER (0..MAX),\n  legacyStaleVersion OCTET STRING }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-aa-targetHardwareIDs OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 36 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "TargetHardwareIdentifiers ::= SEQUENCE OF OBJECT IDENTIFIER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-aa-decryptKeyID OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 37 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "DecryptKeyIdentifier ::= OCTET STRING",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-aa-implCryptoAlgs OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 38 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ImplementedCryptoAlgorithms ::= SEQUENCE OF OBJECT IDENTIFIER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-aa-implCompressAlgs OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 43 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "ImplementedCompressAlgorithms ::= SEQUENCE OF OBJECT IDENTIFIER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-aa-communityIdentifiers OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 40 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "CommunityIdentifiers ::= SEQUENCE OF CommunityIdentifier",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "CommunityIdentifier ::= CHOICE {\n  communityOID OBJECT IDENTIFIER,\n  hwModuleList HardwareModules }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "HardwareModules ::= SEQUENCE {\n  hwType OBJECT IDENTIFIER,\n  hwSerialEntries SEQUENCE OF HardwareSerialEntry }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "HardwareSerialEntry ::= CHOICE {\n  all NULL,\n  single OCTET STRING,\n  block SEQUENCE {\n    low OCTET STRING,\n    high OCTET STRING } }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "id-aa-firmwarePackageInfo OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 42 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FirmwarePackageInfo ::= SEQUENCE {\n  fwPkgType INTEGER OPTIONAL,\n  dependencies SEQUENCE OF\n    PreferredOrLegacyPackageIdentifier OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Firmware Package Unsigned Attributes and Object Identifiers",
      "ja": " - ファームウェアパッケージ符号なし属性とオブジェクト識別子"
    },
    {
      "indent": 3,
      "text": "id-aa-wrappedFirmwareKey OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) aa(2) 39 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "WrappedFirmwareKey ::= EnvelopedData",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Firmware Package Load Receipt Content Type and Object Identifier",
      "ja": " - ファームウェアパッケージの読み込み領収書コンテンツタイプとオブジェクト識別子"
    },
    {
      "indent": 3,
      "text": "id-ct-firmwareLoadReceipt OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) ct(1) 17 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FirmwarePackageLoadReceipt ::= SEQUENCE {\n  version FWReceiptVersion DEFAULT v1,\n  hwType OBJECT IDENTIFIER,\n  hwSerialNum OCTET STRING,\n  fwPkgName PreferredOrLegacyPackageIdentifier,\n  trustAnchorKeyID OCTET STRING OPTIONAL,\n  decryptKeyID [1] OCTET STRING OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FWReceiptVersion ::= INTEGER { v1(1) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Firmware Package Load Error Report Content Type -- and Object Identifier",
      "ja": " - ファームウェアパッケージの読み込みエラーレポートコンテンツタイプ - とオブジェクト識別子"
    },
    {
      "indent": 3,
      "text": "id-ct-firmwareLoadError OBJECT IDENTIFIER ::= {\n  iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n  smime(16) ct(1) 18 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FirmwarePackageLoadError ::= SEQUENCE {\n  version FWErrorVersion DEFAULT v1,\n  hwType OBJECT IDENTIFIER,\n  hwSerialNum OCTET STRING,\n  errorCode FirmwarePackageLoadErrorCode,\n  vendorErrorCode VendorLoadErrorCode OPTIONAL,\n  fwPkgName PreferredOrLegacyPackageIdentifier OPTIONAL,\n  config [1] SEQUENCE OF CurrentFWConfig OPTIONAL }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FWErrorVersion ::= INTEGER { v1(1) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "CurrentFWConfig ::= SEQUENCE {\n  fwPkgType INTEGER OPTIONAL,\n  fwPkgName PreferredOrLegacyPackageIdentifier }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "FirmwarePackageLoadErrorCode ::= ENUMERATED {\n  decodeFailure                (1),\n  badContentInfo               (2),\n  badSignedData                (3),\n  badEncapContent              (4),\n  badCertificate               (5),\n  badSignerInfo                (6),\n  badSignedAttrs               (7),\n  badUnsignedAttrs             (8),\n  missingContent               (9),\n  noTrustAnchor               (10),\n  notAuthorized               (11),\n  badDigestAlgorithm          (12),\n  badSignatureAlgorithm       (13),\n  unsupportedKeySize          (14),\n  signatureFailure            (15),\n  contentTypeMismatch         (16),\n  badEncryptedData            (17),\n  unprotectedAttrsPresent     (18),\n  badEncryptContent           (19),\n  badEncryptAlgorithm         (20),\n  missingCiphertext           (21),\n  noDecryptKey                (22),\n  decryptFailure              (23),\n  badCompressAlgorithm        (24),\n  missingCompressedContent    (25), decompressFailure           (26),\n  wrongHardware               (27),\n  stalePackage                (28),\n  notInCommunity              (29),\n  unsupportedPackageType      (30),\n  missingDependency           (31),\n  wrongDependencyVersion      (32),\n  insufficientMemory          (33),\n  badFirmware                 (34),\n  unsupportedParameters       (35),\n  breaksDependency            (36),\n  otherError                  (99) }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "VendorLoadErrorCode ::= INTEGER",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "-- Other Name syntax for Hardware Module Name",
      "ja": " - ハードウェア・モジュール名のための他の名前の構文"
    },
    {
      "indent": 3,
      "text": "id-on-hardwareModuleName OBJECT IDENTIFIER ::= {\n  iso(1) identified-organization(3) dod(6) internet(1) security(5)\n  mechanisms(5) pkix(7) on(8) 4 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "HardwareModuleName ::= SEQUENCE {\n  hwType OBJECT IDENTIFIER,\n  hwSerialNum OCTET STRING }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "END",
      "ja": "終わり"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Russell Housley Vigil Security, LLC 918 Spring Knoll Drive Herndon, VA 20170 USA",
      "ja": "ラッセルHousley氏ビジルセキュリティ、LLC 918春小山Driveハーンドン、VA 20170 USA"
    },
    {
      "indent": 3,
      "text": "EMail: housley@vigilsec.com",
      "ja": "メールアドレス：housley@vigilsec.com"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "著作権（C）インターネット協会（2005）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットソサエティおよびインターネット・エンジニアリング・タスク・フォース放棄すべての保証、明示または、（もしあれば）後援ISに設けられています。黙示、情報の利用は、特定の目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証含むがこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}