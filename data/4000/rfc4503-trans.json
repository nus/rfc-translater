{
  "title": {
    "text": "RFC 4503 - A Description of the Rabbit Stream Cipher Algorithm",
    "ja": "RFC 4503 - ウサギのストリーム暗号アルゴリズムの説明"
  },
  "number": 4503,
  "created_at": "2019-10-21 21:24:38.554669+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                       M. Boesgaard\nRequest for Comments: 4503                                 M. Vesterager\nCategory: Informational                                        E. Zenner\n                                                            Cryptico A/S\n                                                                May 2006",
      "raw": true
    },
    {
      "indent": 10,
      "text": "A Description of the Rabbit Stream Cipher Algorithm",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。それはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes the encryption algorithm Rabbit. It is a stream cipher algorithm with a 128-bit key and 64-bit initialization vector (IV). The method was published in 2003 and has been subject to public security and performance revision. Its high performance makes it particularly suited for the use with Internet protocols where large amounts of data have to be processed.",
      "ja": "この文書では、暗号化アルゴリズムのウサギを説明します。これは、128ビットキーと64ビットの初期化ベクトル（IV）を持つストリーム暗号アルゴリズムです。この方法は、2003年に出版され、公共のセキュリティとパフォーマンスの改正の対象となっています。その高いパフォーマンスは、大量のデータを処理しなければならないのインターネットプロトコルで使用するために特に適しています。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n2. Algorithm Description ...........................................2\n   2.1. Notation ...................................................2\n   2.2. Inner State ................................................3\n   2.3. Key Setup Scheme ...........................................3\n   2.4. IV Setup Scheme ............................................3\n   2.5. Counter System .............................................4\n   2.6. Next-State Function ........................................4\n   2.7. Extraction Scheme ..........................................5\n   2.8. Encryption/Decryption Scheme ...............................5\n3. Security Considerations .........................................6\n   3.1. Message Length .............................................6\n   3.2. Initialization Vector ......................................6\n4. Informative References ..........................................7\nAppendix A: Test Vectors ...........................................8\n   A.1. Testing without IV Setup ...................................8\n   A.2. Testing with IV Setup ......................................8\nAppendix B: Debugging Vectors ......................................9",
      "raw": true
    },
    {
      "indent": 6,
      "text": "B.1. Testing Round Function and Key Setup .......................9\nB.2. Testing the IV setup ......................................10",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "Rabbit is a stream cipher algorithm that has been designed for high performance in software implementations. Both key setup and encryption are very fast, making the algorithm particularly suited for all applications where large amounts of data or large numbers of data packages have to be encrypted. Examples include, but are not limited to, server-side encryption, multimedia encryption, hard-disk encryption, and encryption on limited-resource devices.",
      "ja": "ウサギは、ソフトウェア実装で高いパフォーマンスを実現するように設計されたストリーム暗号アルゴリズムです。キー設定と暗号化の両方が、データやデータパッケージの大量大量の暗号化する必要があるすべてのアプリケーションのためのアルゴリズムは、特に適した作り、非常に高速です。例としては、サーバ側の暗号化、マルチメディアの暗号化、ハード・ディスク暗号化、および限られたリソースデバイス上の暗号化が、これらに限定されません。"
    },
    {
      "indent": 3,
      "text": "The cipher is based on ideas derived from the behavior of certain chaotic maps. These maps have been carefully discretized, resulting in a compact stream cipher. Rabbit has been openly published in 2003 [1] and has not displayed any weaknesses as of the time of this writing. To ensure ongoing security evaluation, it was also submitted to the ECRYPT eSTREAM project[2].",
      "ja": "暗号は、特定のカオス写像の振る舞い由来のアイデアに基づいています。これらのマップは、慎重にコンパクトなストリーム暗号で、その結果、離散化されています。ウサギは公然と2003年に公開されている[1]と、この記事の執筆時点のように任意の弱点を表示していません。継続的なセキュリティ評価を確保するために、それはまたECRYPTあり、eSTREAMプロジェクトに提出された[2]。"
    },
    {
      "indent": 3,
      "text": "Technically, Rabbit consists of a pseudorandom bitstream generator that takes a 128-bit key and a 64-bit initialization vector (IV) as input and generates a stream of 128-bit blocks. Encryption is performed by combining this output with the message, using the exclusive-OR operation. Decryption is performed in exactly the same way as encryption.",
      "ja": "技術的に、ウサギは、入力として128ビットキーと64ビットの初期化ベクトル（IV）を受け取り、128ビットブロックのストリームを生成する擬似ランダムビットストリーム生成器から成ります。暗号化は、排他的論理和演算を使用して、メッセージをこの出力を組み合わせることによって行われます。復号化は、暗号化と全く同じ方法で行われます。"
    },
    {
      "indent": 3,
      "text": "Further information about Rabbit, including reference implementation, test vectors, performance figures, and security white papers, is available from http://www.cryptico.com/.",
      "ja": "リファレンス実装、テストベクトル、パフォーマンスの数値、及びセキュリティホワイトペーパーを含むウサギの詳細は、http://www.cryptico.com/から入手可能です。"
    },
    {
      "indent": 0,
      "text": "2. Algorithm Description",
      "section_title": true,
      "ja": "2.アルゴリズム記述"
    },
    {
      "indent": 0,
      "text": "2.1. Notation",
      "section_title": true,
      "ja": "2.1。表記法"
    },
    {
      "indent": 3,
      "text": "This document uses the following elementary operators:",
      "ja": "このドキュメントでは、次の基本演算子を使用しています。"
    },
    {
      "indent": 3,
      "text": " + integer addition. * integer multiplication. div integer division. mod integer modulus. ^ bitwise exclusive-OR operation. <<< left rotation operator. || concatenation operator.",
      "ja": "+整数加算。 *整数乗算。 div整数除算。 MOD整数モジュラス。 ^ビット単位の排他的論理和演算。 <<<左回転演算子。 ||連結演算子。"
    },
    {
      "indent": 3,
      "text": "When labeling bits of a variable, A, the least significant bit is denoted by A[0]. The notation A[h..g] represents bits h through g of variable A, where h is more significant than g. Similar variables are labeled by A0,A1,... with the notation A(0),A(1),... being used to denote those same variables if this improves readability.",
      "ja": "変数のビットを標識する場合、Aは、最下位ビットが[0]で示されています。表記は、Aは、[h..g] hがGよりも重要である変数AのGを介してビットHを表します。同様の変数は表記A（0）とA0、A1、...によって標識され、Aは、（1）、...、これは読みやすさを向上させることができるならば、同じ変数を示すために使用されています。"
    },
    {
      "indent": 3,
      "text": "Given a 64-bit word, the function MSW extracts the most significant 32 bits, whereas the function LSW extracts the least significant 32 bits.",
      "ja": "64ビット・ワードを与え、機能MSWは、下位32ビットを抽出LSW機能一方、最上位32ビットを抽出します。"
    },
    {
      "indent": 3,
      "text": "Constants prefixed with 0x are in hexadecimal notation. In particular, the constant WORDSIZE is defined to be 0x100000000.",
      "ja": "0xを接頭定数は16進数です。具体的には、一定のワードサイズは0x100000000であると定義されます。"
    },
    {
      "indent": 0,
      "text": "2.2. Inner State",
      "section_title": true,
      "ja": "2.2。内部状態"
    },
    {
      "indent": 3,
      "text": "The internal state of the stream cipher consists of 513 bits. 512 bits are divided between eight 32-bit state variables, X0,...,X7 and eight 32-bit counter variables, C0,...,C7. In addition, there is one counter carry bit, b.",
      "ja": "ストリーム暗号の内部状態は、513ビットからなります。 512ビットは、8つの32ビットの状態変数、X0、...、X7および8個の32ビットカウンタ変数、C0、...、C7の間で分割されます。さらに、1つのカウンタのキャリービット、Bがあります。"
    },
    {
      "indent": 0,
      "text": "2.3. Key Setup Scheme",
      "section_title": true,
      "ja": "2.3。キー設定方式"
    },
    {
      "indent": 3,
      "text": "The counter carry bit b is initialized to zero. The state and counter words are derived from the key K[127..0].",
      "ja": "カウンタのキャリービットbはゼロに初期化されます。状態カウンタワードはキーK [127..0]から誘導されます。"
    },
    {
      "indent": 3,
      "text": "The key is divided into subkeys K0 = K[15..0], K1 = K[31..16], ... K7 = K[127..112]. The initial state is initialized as follows:",
      "ja": "キーはサブキーK0 = K [15..0]、K1 = K [31..16]、... K7 = K [127..112]に分割されています。次のように初期状態に初期化されます："
    },
    {
      "indent": 5,
      "text": "for j=0 to 7: if j is even: Xj = K(j+1 mod 8) || Kj Cj = K(j+4 mod 8) || K(j+5 mod 8) else: Xj = K(j+5 mod 8) || K(j+4 mod 8) Cj = Kj || K(j+1 mod 8)",
      "ja": "J = 0〜7の場合：jが偶数の場合：XjのK =（J + 1 MOD 8）|| KJ CjのK =（J + 4 MOD 8）||他K（J + 5 MOD 8）：XjのK =（J + 5 MOD 8）|| K（J + 4 MOD 8）CjとのK i = || K（J + 1 MOD 8）"
    },
    {
      "indent": 3,
      "text": "The system is then iterated four times, each iteration consisting of counter update (Section 2.5) and next-state function (Section 2.6). After that, the counter variables are reinitialized to",
      "ja": "システムは、次に、カウンタ更新（セクション2.5）と、次の状態の関数（セクション2.6）からなる各反復を4回繰り返されます。その後、カウンタ変数はに再初期化されています"
    },
    {
      "indent": 5,
      "text": "for j=0 to 7: Cj = Cj ^ X(j+4 mod 8)",
      "ja": "ただしj = 0~7：Cjの= Cjは^ X（j + 4 MOD 8）"
    },
    {
      "indent": 0,
      "text": "2.4. IV Setup Scheme",
      "section_title": true,
      "ja": "2.4。 IV設定方式"
    },
    {
      "indent": 3,
      "text": "If an IV is used for encryption, the counter variables are modified after the key setup. Denoting the IV bits by IV[63..0], the setup proceeds as follows:",
      "ja": "IVは、暗号化に使用されている場合は、カウンタ変数は、キーセットアップ後に変更されています。 [63..0]、設定は以下のように進行するIVによるIVビットを表します。"
    },
    {
      "indent": 5,
      "text": "C0 = C0 ^ IV[31..0] C1 = C1 ^ (IV[63..48] || IV[31..16]) C2 = C2 ^ IV[63..32] C3 = C3 ^ (IV[47..32] || IV[15..0])",
      "ja": "C0 = C0 ^ IV [31..0] C1 = C1 ^（IV [63..48] || IV [31..16]）C2 = C2 ^ IV [63..32] C3 = C3 ^（IV [47..32] || IV [15..0]）"
    },
    {
      "indent": 5,
      "text": "C4 = C4 ^ IV[31..0] C5 = C5 ^ (IV[63..48] || IV[31..16]) C6 = C6 ^ IV[63..32] C7 = C7 ^ (IV[47..32] || IV[15..0])",
      "ja": "4 ^ 4 = IV [31..0] 5 = ^（IVが[63..48] || IV [31..16]）= 6 ^ 6 IV [63..32] C7 C7 = ^（IV [47..32] || IV [15..0]）"
    },
    {
      "indent": 3,
      "text": "The system is then iterated another 4 times, each iteration consisting of counter update (Section 2.5) and next-state function (Section 2.6).",
      "ja": "次に、システムは、別の4回、カウンタ更新（セクション2.5）と、次の状態の関数（セクション2.6）からなる各反復が繰り返されます。"
    },
    {
      "indent": 3,
      "text": "The relationship between key and IV setup is as follows:",
      "ja": "次のようにキーとIVのセットアップの関係は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "- After the key setup, the resulting inner state is saved as a master state. Then the IV setup is run to obtain the first encryption starting state.",
      "ja": " - キー設定した後、得られた内部状態は、マスタ状態として保存されます。そして、IVのセットアップは、最初の暗号化開始状態を取得するために実行されます。"
    },
    {
      "indent": 3,
      "text": "- Whenever re-initialization under a new IV is necessary, the IV setup is run on the master state again to derive the next encryption starting state.",
      "ja": " - 必要なときはいつでも再初期化新しいIVの下で、IVのセットアップは、次の暗号化の開始状態を導き出すために、再びマスタ状態で実行されます。"
    },
    {
      "indent": 0,
      "text": "2.5. Counter System",
      "section_title": true,
      "ja": "2.5。カウンターシステム"
    },
    {
      "indent": 3,
      "text": "Before each execution of the next-state function (Section 2.6), the counter system has to be updated. This system uses constants A1,...,A7, as follows:",
      "ja": "次の状態の関数（セクション2.6）の各実行の前に、カウンタシステムが更新されなければなりません。このシステムは、定数A1を使用しています...、A7を、次のように："
    },
    {
      "indent": 5,
      "text": "A0 = 0x4D34D34D A1 = 0xD34D34D3 A2 = 0x34D34D34 A3 = 0x4D34D34D A4 = 0xD34D34D3 A5 = 0x34D34D34 A6 = 0x4D34D34D A7 = 0xD34D34D3",
      "ja": "0 = 0x4D34D34D A1 = A2 = 0xD34D34D3 0x34D34D34 A3 = 0x4D34D34D A4 = 0xD34D34D3 A5 = 0x34D34D34 A6 = 0x4D34D34D A7 = 0ましょうKSDA 4 4レッツ"
    },
    {
      "indent": 3,
      "text": "It also uses the counter carry bit b to update the counter system, as follows:",
      "ja": "次のようにそれはまた、カウンタ・システムを更新するために、カウンタのキャリービットBを使用しています。"
    },
    {
      "indent": 5,
      "text": "for j=0 to 7: temp = Cj + Aj + b b = temp div WORDSIZE Cj = temp mod WORDSIZE",
      "ja": "温度= Cjの+ Ajと+ B、B =一時のdivワードサイズCjを=一時MODワードサイズ：J = 0〜7のために"
    },
    {
      "indent": 3,
      "text": "Note that on exiting this loop, the variable b has to be preserved for the next iteration of the system.",
      "ja": "このループを出るに、変数bは、システムの次の反復のために保存しなければならないことに留意されたいです。"
    },
    {
      "indent": 0,
      "text": "2.6. Next-State Function",
      "section_title": true,
      "ja": "2.6。次ステート機能"
    },
    {
      "indent": 3,
      "text": "The core of the Rabbit algorithm is the next-state function. It is based on the function g, which transforms two 32-bit inputs into one 32-bit output, as follows:",
      "ja": "ウサギアルゴリズムのコアは、次の状態関数です。それは次のように、1つの32ビット出力に2つの32ビット入力を変換関数gに基づいています。"
    },
    {
      "indent": 5,
      "text": "g(u,v) = LSW(square(u+v)) ^ MSW(square(u+v))",
      "ja": "G（U、V）LSW（正方形（U + V））= ^ MSW（正方形（U + V））"
    },
    {
      "indent": 3,
      "text": "where square(u+v) = ((u+v mod WORDSIZE) * (u+v mod WORDSIZE)).",
      "ja": "ここで、正方形（U + V）=（（U + V MODワードサイズ）*（U + V MODワードサイズ））。"
    },
    {
      "indent": 3,
      "text": "Using this function, the algorithm updates the inner state as follows:",
      "ja": "次のようにこの機能を使用して、アルゴリズムは、内部状態を更新します。"
    },
    {
      "indent": 5,
      "text": "for j=0 to 7: Gj = g(Xj,Cj)",
      "ja": "J = 0〜7：Gjの= G（Xjの、Cjの）"
    },
    {
      "indent": 5,
      "text": "X0 = G0 + (G7 <<< 16) + (G6 <<< 16) mod WORDSIZE X1 = G1 + (G0 <<< 8) + G7 mod WORDSIZE X2 = G2 + (G1 <<< 16) + (G0 <<< 16) mod WORDSIZE X3 = G3 + (G2 <<< 8) + G1 mod WORDSIZE X4 = G4 + (G3 <<< 16) + (G2 <<< 16) mod WORDSIZE X5 = G5 + (G4 <<< 8) + G3 mod WORDSIZE X6 = G6 + (G5 <<< 16) + (G4 <<< 16) mod WORDSIZE X7 = G7 + (G6 <<< 8) + G5 mod WORDSIZE",
      "ja": "X0 = G0 +（G7 <<< 16）+（G6 <<< 16）MODワードサイズのX1 = G1 +（G0 <<< 8）+ G7 MODワードサイズのX2 = G2 +（G1 <<< 16）+（G0 <<< 16）MODワードサイズのX3 = G3 +（G2 <<< 8）+ G1 MODワードサイズのX4 = G4 +（G3 <<< 16）+（G2 <<< 16）MODワードサイズのX5 = G5 +（G4 < << 8）+ G3 MODワードサイズのX6 = G6 +（G5 <<< 16）+（G4 <<< 16）MODワードサイズのX7 = G7 +（G6 <<< 8）+ G5 MODワードサイズ"
    },
    {
      "indent": 0,
      "text": "2.7. Extraction Scheme",
      "section_title": true,
      "ja": "2.7。抽出法"
    },
    {
      "indent": 3,
      "text": "After the key and IV setup are concluded, the algorithm is iterated in order to produce one 128-bit output block, S, per round. Each round consists of executing steps 2.5 and 2.6 and then extracting an output S[127..0] as follows:",
      "ja": "鍵およびIVのセットアップが終了した後、アルゴリズムは、ラウンドごとに、1つの128ビット出力ブロック、Sを生成するために繰り返されます。各ラウンドは、ステップ2.5および2.6を実行した後、次のように[127..0]出力Sを取り出す構成されます。"
    },
    {
      "indent": 5,
      "text": "S[15..0] = X0[15..0] ^ X5[31..16] S[31..16] = X0[31..16] ^ X3[15..0] S[47..32] = X2[15..0] ^ X7[31..16] S[63..48] = X2[31..16] ^ X5[15..0] S[79..64] = X4[15..0] ^ X1[31..16] S[95..80] = X4[31..16] ^ X7[15..0] S[111..96] = X6[15..0] ^ X3[31..16] S[127..112] = X6[31..16] ^ X1[15..0]",
      "ja": "S [15..0] = X0 [15..0] ^ X5 [31..16] S [31..16] = X0 [31..16] ^ X3 [15..0] S [47。 0.32] = X2 [15..0] ^ X7 [31..16] S [63..48] = X2 [31..16] ^ X5 [15..0] S [79..64] = X4 [15..0] ^ X1 [31..16] S [95..80] = X4 [31..16] ^ X7 [15..0] S [111..96] = X6 [15。 .0] ^ X3 [31..16] S [127..112] = X6 [31..16] ^ X1 [15..0]"
    },
    {
      "indent": 0,
      "text": "2.8. Encryption/Decryption Scheme",
      "section_title": true,
      "ja": "2.8。暗号化/復号化スキーム"
    },
    {
      "indent": 3,
      "text": "Given a 128-bit message block, M, encryption E and decryption M' are computed via",
      "ja": "128ビットのメッセージブロックが与えられると、M、暗号化Eと復号M」を介して計算されます"
    },
    {
      "indent": 5,
      "text": "E = M ^ S and M' = E ^ S.",
      "ja": "E = M ^ SとM」= E ^ S."
    },
    {
      "indent": 3,
      "text": "If S is the same in both operations (as it should be if the same key and IV are used), then M = M'.",
      "ja": "Sは、（同じキーとIVが使用される場合、それがなければならないように）両方の操作に同じである場合、M = M」。"
    },
    {
      "indent": 3,
      "text": "The encryption/decryption scheme is repeated until all blocks in the message have been encrypted/decrypted. If the message size is not a multiple of 128 bits, only the needed amount of least significant bits from the last output block S is used for the last message block M.",
      "ja": "メッセージ内のすべてのブロックを暗号化/復号化されるまで、暗号化/復号化方式が繰り返されます。メッセージサイズが128ビットの倍数でない場合、最後の出力ブロックSから最下位ビットのみ必要とされる量は、最後のメッセージブロックMのために使用されます"
    },
    {
      "indent": 3,
      "text": "If the application requires the encryption of smaller blocks (or even individual bits), a 128-bit buffer is used. The buffer is initialized by generating a new value, S, and copying it into the buffer. After that, all data blocks are encrypted using the least significant bits in this buffer. Whenever the buffer is empty, a new value S is generated and copied into the buffer.",
      "ja": "アプリケーションは、より小さなブロック（または個々のビット）の暗号化を必要とする場合、128ビットのバッファが使用されます。バッファは、新しい値、Sを生成し、バッファにコピーすることによって初期化されます。その後、全てのデータブロックは、この緩衝液中で最下位ビットを使用して暗号化されています。バッファが空であるときはいつでも、新しい値Sが生成され、バッファにコピーされます。"
    },
    {
      "indent": 0,
      "text": "3. Security Considerations",
      "section_title": true,
      "ja": "3.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "For an encryption algorithm, the security provided is, of course, the most important issue. No security weaknesses have been found to date, neither by the designers nor by independent cryptographers scrutinizing the algorithms after its publication in [1]. Note that a full discussion of Rabbit's security against known cryptanalytic techniques is provided in [3].",
      "ja": "暗号化アルゴリズムのために、提供されるセキュリティは、当然のことながら、最も重要な課題です。いいえ、セキュリティ上の弱点は、現在までの、どちらのデザイナーでも[1]で、発行後のアルゴリズムを精査独立した暗号技術者によって見出されていません。既知の暗号解読技術に対するウサギのセキュリティの完全な議論は[3]で提供されていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "In the following, we restrict ourselves to some rules on how to use the Rabbit algorithm properly.",
      "ja": "以下では、我々は適切にウサギのアルゴリズムを使用する方法のいくつかのルールに自分自身を制限します。"
    },
    {
      "indent": 0,
      "text": "3.1. Message Length",
      "section_title": true,
      "ja": "3.1。メッセージの長さ"
    },
    {
      "indent": 3,
      "text": "Rabbit was designed to encrypt up to 2 to the power of 64 128-bit message blocks under the same the key. Should this amount of data ever be exceeded, the key has to be replaced. It is recommended to follow this rule even when the IV is changed on a regular basis.",
      "ja": "ウサギは、同じキーの下64 128ビットのメッセージブロックのパワーを2まで暗号化するように設計されました。このデータ量がこれまでに超過しなければならない、キーを交換する必要があります。 IVが定期的に変更されても、このルールに従うことをお勧めします。"
    },
    {
      "indent": 0,
      "text": "3.2. Initialization Vector",
      "section_title": true,
      "ja": "3.2。初期化ベクトル"
    },
    {
      "indent": 3,
      "text": "It is possible to run Rabbit without the IV setup. However, in this case, the generator must never be reset under the same key, since this would destroy its security (for a recent example, see [4]). However, in order to guarantee synchronization between sender and receiver, ciphers are frequently reset in practice. This means that both sender and receiver set the inner state of the cipher back to a known value and then derive the new encryption state using an IV. If this is done, it is important to make sure that no IV is ever reused under the same key.",
      "ja": "IVのセットアップなしでウサギを実行することが可能です。これは、セキュリティを破壊するので、この場合には、発電機は、（最近の例では、[4]を参照）、同じキーの下にリセットしてはなりません。しかし、送信者と受信者の間の同期を保証するために、暗号はしばしば、実際にリセットされます。これは、送信者と受信者の両方が戻って既知の値に暗号の内部状態を設定し、IVを使用して新しい暗号化状態を導き出すことを意味します。これが行われる場合、何のIVは、これまでと同じキーの下に再利用されていないことを確認することが重要です。"
    },
    {
      "indent": 0,
      "text": "4. Informative References",
      "section_title": true,
      "ja": "4.有益な参考文献"
    },
    {
      "indent": 3,
      "text": "[1] M. Boesgaard, M. Vesterager, T. Pedersen, J. Christiansen, O. Scavenius. \"Rabbit: A New High-Performance Stream Cipher\". Proc. Fast Software Encryption 2003, Lecture Notes in Computer Science 2887, p. 307-329. Springer, 2003.",
      "ja": "[1] M. Boesgaard、M. Vesterager、T.ペダーセン、J. Christiansenの、O. Scavenius。 「うさぎ：新しい高性能ストリーム暗号」。 PROC。コンピュータサイエンス2887、Pにおける高速ソフトウェア暗号化2003年、講義ノート。 307から329まで。スプリンガー、2003。"
    },
    {
      "indent": 3,
      "text": "[2] ECRYPT eSTREAM project, available from http://www.ecrypt.eu.org/stream/",
      "ja": "[2] ECRYPTあり、eSTREAMプロジェクト、http://www.ecrypt.eu.org/stream/から入手可能"
    },
    {
      "indent": 3,
      "text": "[3] M. Boesgaard, T. Pedersen, M. Vesterager, E. Zenner. \"The Rabbit Stream Cipher - Design and Security Analysis\". Proc. SASC Workshop 2004, available from http://www.isg.rhul.ac.uk/research/ projects/ecrypt/stvl/sasc.html.",
      "ja": "[3] M. Boesgaard、T.ペダーセン、M. Vesterager、E.ツェナー。 「うさぎストリーム暗号 - 設計とセキュリティ分析」。 PROC。 http://www.isg.rhul.ac.uk/research/プロジェクト/ ECRYPT / STVL / sasc.htmlから入手SASCワークショップ2004、。"
    },
    {
      "indent": 3,
      "text": "[4] H. Wu. \"The Misuse of RC4 in Microsoft Word and Excel\". IACR eprint archive 2005/007, available from http://eprint.iacr.org/2005/007.pdf.",
      "ja": "[4] H.ウー。 「Microsoft WordおよびExcelでRC4の誤用」。 http://eprint.iacr.org/2005/007.pdfから入手IACRのイープリントアーカイブ2005/007、。"
    },
    {
      "indent": 3,
      "text": "[5] Jonsson, J. and B. Kaliski, \"Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1\", RFC 3447, February 2003.",
      "ja": "[5]ジョンソン、J.とB. Kaliski、 \"公開鍵暗号規格（PKCS）＃1：RSA暗号仕様バージョン2.1\"、RFC 3447、2003年2月。"
    },
    {
      "indent": 0,
      "text": "Appendix A: Test Vectors",
      "ja": "付録A：テストベクトル"
    },
    {
      "indent": 3,
      "text": "This is a set of test vectors for conformance testing, given in octet form. For use with Rabbit, they have to be transformed into integers by the conversion primitives OS2IP and I2OSP, as described in [5].",
      "ja": "これはオクテットの形で与えられる適合性試験のためのテストベクトルの集合です。ウサギで使用するために、それらは、[5]に記載されているように、変換プリミティブOS2IPとI2OSPによって整数に変換されなければなりません。"
    },
    {
      "indent": 0,
      "text": "A.1. Testing without IV Setup",
      "ja": "A.1。 IV設定なしテスト"
    },
    {
      "indent": 5,
      "text": "key  = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]\nS[0] = [B1 57 54 F0 36 A5 D6 EC F5 6B 45 26 1C 4A F7 02]\nS[1] = [88 E8 D8 15 C5 9C 0C 39 7B 69 6C 47 89 C6 8A A7]\nS[2] = [F4 16 A1 C3 70 0C D4 51 DA 68 D1 88 16 73 D6 96]",
      "raw": true
    },
    {
      "indent": 5,
      "text": "key = [91 28 13 29 2E 3D 36 FE 3B FC 62 F1 DC 51 C3 AC] S[0] = [3D 2D F3 C8 3E F6 27 A1 E9 7F C3 84 87 E2 51 9C] S[1] = [F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19] S[2] = [E5 54 74 73 FB DB 43 50 8A E5 3B 20 20 4D 4C 5E]",
      "ja": "キー= [91 28 13 29 2E 3D 36 FE 3B FC 62 F1 DC 51 C3 AC] S [0] = [3D 2D F3 C8 3E F6 27 A1 E9 7F C3 84 87 E2 51（c）] S [1] = [F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19] S [2] = [E5 54 74 73 FB DB 43 50（a）E5 3B 20 20 4D 4C 5E]"
    },
    {
      "indent": 5,
      "text": "key = [83 95 74 15 87 E0 C7 33 E9 E9 AB 01 C0 9B 00 43] S[0] = [0C B1 0D CD A0 41 CD AC 32 EB 5C FD 02 D0 60 9B] S[1] = [95 FC 9F CA 0F 17 01 5A 7B 70 92 11 4C FF 3E AD] S[2] = [96 49 E5 DE 8B FC 7F 3F 92 41 47 AD 3A 94 74 28]",
      "ja": "キー= [83 95 74 15 87 E0 C7 33 E9 E9 AB 01 C0 9B 00 43] S [0] = [0C B1 0D CD A0 41 CD AC 32 EB 5C FD 02 D0 60（b）] S [1] = [95 FC 9F CA 0F 17 01（a）（b）70 92 11 4C FF 3E AD] S [2] = [96 49 E5 DE 8B FC 7F 3F 92 41 47 ADの3A 94 74 28]"
    },
    {
      "indent": 0,
      "text": "A.2. Testing with IV Setup",
      "ja": "A.2。 IVのセットアップとテスト"
    },
    {
      "indent": 5,
      "text": "mkey = [00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00]\niv   = [00 00 00 00 00 00 00 00]\nS[0] = [C6 A7 27 5E F8 54 95 D8 7C CD 5D 37 67 05 B7 ED]\nS[1] = [5F 29 A6 AC 04 F5 EF D4 7B 8F 29 32 70 DC 4A 8D]\nS[2] = [2A DE 82 2B 29 DE 6C 1E E5 2B DB 8A 47 BF 8F 66]",
      "raw": true
    },
    {
      "indent": 5,
      "text": "iv = [C3 73 F5 75 C1 26 7E 59] S[0] = [1F CD 4E B9 58 00 12 E2 E0 DC CC 92 22 01 7D 6D] S[1] = [A7 5F 4E 10 D1 21 25 01 7B 24 99 FF ED 93 6F 2E] S[2] = [EB C1 12 C3 93 E7 38 39 23 56 BD D0 12 02 9B A7]",
      "ja": "IV = [C3 73 F5 75 C1 26 7E 59] S [0] = [1F CD 4E B9 58 00 12 E2 E0 DC CC 92 22 01 7D 6D] S [1] = [A7 5F 4E 10 D1 21 25 01 7B 24 99 FF ED 93 6F 2E] S [2] = [EB C1 12 C3 93 E7 38 39 23 56 BD D0 12 02 9B A7]"
    },
    {
      "indent": 5,
      "text": "iv = [A6 EB 56 1A D2 F4 17 27] S[0] = [44 5A D8 C8 05 85 8D BF 70 B6 AF 23 A1 51 10 4D] S[1] = [96 C8 F2 79 47 F4 2C 5B AE AE 67 C6 AC C3 5B 03] S[2] = [9F CB FC 89 5F A7 1C 17 31 3D F0 34 F0 15 51 CB]",
      "ja": "IV = [A6 EB 56 1A D2 F4 17 27] S [0] = [44 5A D8 C8 05 85 8D BF 70 B6 AF 23 A1 51 10 4D] S [1] = [96 C8 F2 79 47 F4 2C 5B AE AE 67 C6 AC C3 5B 03] S [2] = [9F CB FC 89 5F A7 1C 17 31 3D F0 34 F0 15 51 CB]"
    },
    {
      "indent": 0,
      "text": "Appendix B: Debugging Vectors",
      "ja": "付録B：デバッグのベクトル"
    },
    {
      "indent": 3,
      "text": "The following set of vectors describes the inner state of Rabbit during key and iv setup. It is meant mainly for debugging purposes. Octet strings are written according to I2OSP conventions.",
      "ja": "ベクトルの次のセットは、キーとIVのセットアップ中にウサギの内部状態を記述する。これは、デバッグ目的のために主に意味します。オクテット文字列はI2OSP規則に従って記述されています。"
    },
    {
      "indent": 0,
      "text": "B.1. Testing Round Function and Key Setup",
      "ja": "B.1。テストラウンド関数およびキーのセットアップ"
    },
    {
      "indent": 5,
      "text": "key = [91 28 13 29 2E ED 36 FE 3B FC 62 F1 DC 51 C3 AC]",
      "ja": "キー= [91 28 13 29 2E ED 36 FE 3B FC 62 F1 DC 51 C3 AC]"
    },
    {
      "indent": 5,
      "text": "Inner state after key expansion: b = 0 X0 = 0xDC51C3AC, X1 = 0x13292E3D, X2 = 0x3BFC62F1, X3 = 0xC3AC9128, X4 = 0x2E3D36FE, X5 = 0x62F1DC51, X6 = 0x91281329, X7 = 0x36FE3BFC, C0 = 0x36FE2E3D, C1 = 0xDC5162F1, C2 = 0x13299128, C3 = 0x3BFC36FE, C4 = 0xC3ACDC51, C5 = 0x2E3D1329, C6 = 0x62F13BFC, C7 = 0x9128C3AC",
      "ja": "鍵拡張後の内部状態：= 0 X0 = 0xDC51C3AC、X1 = 0x13292E3D、X2 = 0x3BFC62F1、X3 = 0xC3AC9128、X4 = 0x2E3D36FE、X5 = 0x62F1DC51、X6 = 0x91281329、X7 = 0x36FE3BFC、C0 = 0x36FE2E3D、C1 = 0xDC5162F1、C2 B = 0x13299128、C3 = 0x3BFC36FE、C4 = 0xC3ACDC51、C5 = 0x2E3D1329、C6 = 0x62F13BFC、C7 = 0x9128C3AC"
    },
    {
      "indent": 5,
      "text": "Inner state after first key setup iteration: b = 1 X0 = 0xF2E8C8B1, X1 = 0x38E06FA7, X2 = 0x9A0D72C0, X3 = 0xF21F5334, X4 = 0xCACDCCC3, X5 = 0x4B239CBE, X6 = 0x0565DCCC, X7 = 0xB1587C8D, C0 = 0x8433018A, C1 = 0xAF9E97C4, C2 = 0x47FCDE5D, C3 = 0x89310A4B, C4 = 0x96FA1124, C5 = 0x6310605E, C6 = 0xB0260F49, C7 = 0x6475F87F",
      "ja": "最初のキー設定の反復後の内部状態：B = 1 X0 = 0xF2E8C8B1、X1 = 0x38E06FA7、X2 = 0x9A0D72C0、X3 = 0xF21F5334、X4 = 0xCACDCCC3、X5 = 0x4B239CBE、X6 = 0x0565DCCC、X7 = 0xB1587C8D、C0 = 0x8433018A、C1 = 0xAF9E97C4 、C2 = 0x47FCDE5D、C3 = 0x89310A4B、C4 = 0x96FA1124、C5 = 0x6310605E、C6 = 0xB0260F49、C7 = 0x6475F87F"
    },
    {
      "indent": 5,
      "text": "Inner state after fourth key setup iteration: b = 0 X0 = 0x1D059312, X1 = 0xBDDC3E45, X2 = 0xF440927D, X3 = 0x50CBB553, X4 = 0x36709423, X5 = 0x0B6F0711, X6 = 0x3ADA3A7B, X7 = 0xEB9800C8, C0 = 0x6BD17B74, C1 = 0x2986363E, C2 = 0xE676C5FC, C3 = 0x70CF8432, C4 = 0x10E1AF9E, C5 = 0x018A47FD, C6 = 0x97C48931, C7 = 0xDE5D96F9",
      "ja": "第四のキー設定の反復後の内部状態：B = 0 X0 = 0x1D059312、X1 = 0xBDDC3E45、X2 = 0xF440927D、X3 = 0x50CBB553、X4 = 0x36709423、X5 = 0x0B6F0711、X6 = 0x3ADA3A7B、X7 = 0xEB9800C8、C0 = 0x6BD17B74、C1 = 0x2986363E 、C2 = 0xE676C5FC、C3 = 0x70CF8432、C4 = 0x10E1AF9E、C5 = 0x018A47FD、C6 = 0x97C48931、C7 = 0xDE5D96F9"
    },
    {
      "indent": 5,
      "text": "Inner state after final key setup xor: b = 0 X0 = 0x1D059312, X1 = 0xBDDC3E45, X2 = 0xF440927D, X3 = 0x50CBB553, X4 = 0x36709423, X5 = 0x0B6F0711, X6 = 0x3ADA3A7B, X7 = 0xEB9800C8, C0 = 0x5DA1EF57, C1 = 0x22E9312F, C2 = 0xDCACFF87, C3 = 0x9B5784FA, C4 = 0x0DE43C8C, C5 = 0xBC5679B8, C6 = 0x63841B4C, C7 = 0x8E9623AA",
      "ja": "最終鍵設定XOR後の内部状態：B = 0 X0 = 0x1D059312、X1 = 0xBDDC3E45、X2 = 0xF440927D、X3 = 0x50CBB553、X4 = 0x36709423、X5 = 0x0B6F0711、X6 = 0x3ADA3A7B、X7 = 0xEB9800C8、C0 = 0x5DA1EF57、C1 = 0x22E9312F 、C2 = 0xDCACFF87、C3 = 0x9B5784FA、C4 = 0x0DE43C8C、C5 = 0xBC5679B8、C6 = 0x63841B4C、C7 = 0x8E9623AA"
    },
    {
      "indent": 5,
      "text": "Inner state after generation of 48 bytes of output: b = 1 X0 = 0xB5428566, X1 = 0xA2593617, X2 = 0xFF5578DE, X3 = 0x7293950F, X4 = 0x145CE109, X5 = 0xC93875B0, X6 = 0xD34306E0, X7 = 0x43FEEF87, C0 = 0x45406940, C1 = 0x9CD0CFA9, C2 = 0x7B26E725, C3 = 0x82F5FEE2, C4 = 0x87CBDB06, C5 = 0x5AD06156, C6 = 0x4B229534, C7 = 0x087DC224",
      "ja": "出力の48バイトの発生後の内部状態：= 1 X0 = 0xB5428566、X1 = 0xA2593617、X2 = 0xFF5578DE、X3 = 0x7293950F、X4 = 0x145CE109、X5 = 0xC93875B0、X6 = 0xD34306E0、X7 = 0x43FEEF87、C0 = 0x45406940、C1 B = 0x9CD0CFA9、C2 = 0x7B26E725、C3 = 0x82F5FEE2、C4 = 0x87CBDB06、C5 = 0x5AD06156、C6 = 0x4B229534、C7 = 0x087DC224"
    },
    {
      "indent": 5,
      "text": "The 48 output bytes: S[0] = [3D 2D F3 C8 3E F6 27 A1 E9 7F C3 84 87 E2 51 9C] S[1] = [F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19] S[2] = [E5 54 74 73 FB DB 43 50 8A E5 3B 20 20 4D 4C 5E]",
      "ja": "48出力バイト：S [0] = [3D 2D F3 C8 3E F6 27 A1 E9 7F C3 84 87 E2 51（c）] S [1] = [F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19 ] S [2] = [E5 54 74 73 FB DB 43 50（a）E5 3B 20 20 4D 4C 5E]"
    },
    {
      "indent": 0,
      "text": "B.2. Testing the IV Setup",
      "ja": "B.2。 IVのセットアップをテストします"
    },
    {
      "indent": 5,
      "text": "key  = [91 28 13 29 2E ED 36 FE 3B FC 62 F1 DC 51 C3 AC]\niv   = [C3 73 F5 75 C1 26 7E 59]",
      "raw": true
    },
    {
      "indent": 5,
      "text": "Inner state during key setup: as above",
      "ja": "キー設定中の内部状態：上記のように"
    },
    {
      "indent": 5,
      "text": "Inner state after IV expansion: b = 0 X0 = 0x1D059312, X1 = 0xBDDC3E45, X2 = 0xF440927D, X3 = 0x50CBB553, X4 = 0x36709423, X5 = 0x0B6F0711, X6 = 0x3ADA3A7B, X7 = 0xEB9800C8, C0 = 0x9C87910E, C1 = 0xE19AF009, C2 = 0x1FDF0AF2, C3 = 0x6E22FAA3, C4 = 0xCCC242D5, C5 = 0x7F25B89E, C6 = 0xA0F7EE39, C7 = 0x7BE35DF3",
      "ja": "IV拡張後の内部状態：= 0 X0 = 0x1D059312、X1 = 0xBDDC3E45、X2 = 0xF440927D、X3 = 0x50CBB553、X4 = 0x36709423、X5 = 0x0B6F0711、X6 = 0x3ADA3A7B、X7 = 0xEB9800C8、C0 = 0x9C87910E、C1 = 0xE19AF009、C2 B = 0x1FDF0AF2、C3 = 0x6E22FAA3、C4 = 0xCCC242D5、C5 = 0x7F25B89E、C6 = 0xA0F7EE39、C7 = 0x7BE35DF3"
    },
    {
      "indent": 5,
      "text": "Inner state after first IV setup iteration: b = 1 X0 = 0xC4FF831A, X1 = 0xEF5CD094, X2 = 0xC5933855, X3 = 0xC05A5C03, X4 = 0x4A50522F, X5 = 0xDF487BE4, X6 = 0xA45FA013, X7 = 0x05531179, C0 = 0xE9BC645B, C1 = 0xB4E824DC, C2 = 0x54B25827, C3 = 0xBB57CDF0, C4 = 0xA00F77A8, C5 = 0xB3F905D3, C6 = 0xEE2CC186, C7 = 0x4F3092C6",
      "ja": "第IVセットアップ反復後の内部状態：B = 1 X0 = 0xC4FF831A、X1 = 0xEF5CD094、X2 = 0xC5933855、X3 = 0xC05A5C03、X4 = 0x4A50522F、X5 = 0xDF487BE4、X6 = 0xA45FA013、X7 = 0x05531179、C0 = 0xE9BC645B、C1 = 0xB4E824DC 、C2 = 0x54B25827、C3 = 0xBB57CDF0、C4 = 0xA00F77A8、C5 = 0xB3F905D3、C6 = 0xEE2CC186、C7 = 0x4F3092C6"
    },
    {
      "indent": 5,
      "text": "Inner state after fourth IV setup iteration: b = 1 X0 = 0x6274E424, X1 = 0xE14CE120, X2 = 0xDA8739D9, X3 = 0x65E0402D, X4 = 0xD1281D10, X5 = 0xBD435BAA, X6 = 0x4E9E7A02, X7 = 0x9B467ABD, C0 = 0xD15ADE44, C1 = 0x2ECFC356, C2 = 0xF32C3FC6, C3 = 0xA2F647D7, C4 = 0x19F71622, C5 = 0x5272ED72, C6 = 0xD5CB3B6E, C7 = 0xC9183140",
      "ja": "第IVセットアップ反復後の内部状態：B = 1 X0 = 0x6274E424、X1 = 0xE14CE120、X2 = 0xDA8739D9、X3 = 0x65E0402D、X4 = 0xD1281D10、X5 = 0xBD435BAA、X6 = 0x4E9E7A02、X7 = 0x9B467ABD、C0 = 0xD15ADE44、C1 = 0x2ECFC356 、C2 = 0xF32C3FC6、C3 = 0xA2F647D7、C4 = 0x19F71622、C5 = 0x5272ED72、C6 = 0xD5CB3B6E、C7 = 0xC9183140"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Martin Boesgaard Cryptico A/S Fruebjergvej 3 2100 Copenhagen Denmark",
      "ja": "マーティンBoesgaard Cryptico A / S Fruebjergvej 3 2100コペンハーゲンデンマーク"
    },
    {
      "indent": 3,
      "text": "Phone: +45 39 17 96 06 EMail: mab@cryptico.com URL: http://www.cryptico.com",
      "ja": "電話：+45 39 17 96 06 Eメール：mab@cryptico.com URL：http://www.cryptico.com"
    },
    {
      "indent": 3,
      "text": "Mette Vesterager Cryptico A/S Fruebjergvej 3 2100 Copenhagen Denmark",
      "ja": "メッテVesterager Cryptico A / S Fruebjergvej 3 DK-2100デンマークコペンハーゲン"
    },
    {
      "indent": 3,
      "text": "Phone: +45 39 17 96 06 EMail: mvp@cryptico.com URL: http://www.cryptico.com",
      "ja": "電話：+45 39 17 96 06 Eメール：mvp@cryptico.com URL：http://www.cryptico.com"
    },
    {
      "indent": 3,
      "text": "Erik Zenner Cryptico A/S Fruebjergvej 3 2100 Copenhagen Denmark",
      "ja": "エリックツェナーCryptico A / S Fruebjergvej 3 2100コペンハーゲンデンマーク"
    },
    {
      "indent": 3,
      "text": "Phone: +45 39 17 96 06 EMail: ez@cryptico.com URL: http://www.cryptico.com",
      "ja": "電話：+45 39 17 96 06 Eメール：ez@cryptico.com URL：http://www.cryptico.com"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットソサエティおよびインターネット・エンジニアリング・タスク・フォース放棄すべての保証、明示または、（もしあれば）後援ISに設けられています。黙示、情報の利用は、特定の目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証含むがこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is provided by the IETF Administrative Support Activity (IASA).",
      "ja": "RFCエディタ機能のための資金は、IETF管理サポート活動（IASA）によって提供されます。"
    }
  ]
}