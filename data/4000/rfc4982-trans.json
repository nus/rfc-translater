{
  "title": {
    "text": "RFC 4982 - Support for Multiple Hash Algorithms in Cryptographically Generated Addresses (CGAs)",
    "ja": "RFC 4982 - 暗号的に生成されたアドレスに複数のハッシュアルゴリズムのサポート（CGAs）"
  },
  "number": 4982,
  "created_at": "2019-10-30 11:53:23.386614+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         M. Bagnulo\nRequest for Comments: 4982                                          UC3M\nUpdates: 3972                                                   J. Arkko\nCategory: Standards Track                                       Ericsson\n                                                               July 2007",
      "raw": true
    },
    {
      "indent": 14,
      "text": "  Support for Multiple Hash Algorithms in\nCryptographically Generated Addresses (CGAs)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2007).",
      "ja": "著作権（C）IETFトラスト（2007）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document analyzes the implications of recent attacks on commonly used hash functions on Cryptographically Generated Addresses (CGAs) and updates the CGA specification to support multiple hash algorithms.",
      "ja": "この文書は、暗号的に生成されたアドレス（CGAs）に一般的に使用されるハッシュ関数に関する最近の攻撃の影響を分析し、複数のハッシュアルゴリズムをサポートするために、CGA仕様を更新します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 2\n2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n3.  Impact of Collision Attacks in CGAs . . . . . . . . . . . . . . 2\n4.  Options for Multiple Hash Algorithm Support in CGAs . . . . . . 3\n  4.1.  Where to Encode the Hash Function?  . . . . . . . . . . . . 4\n5.  CGA Generation Procedure  . . . . . . . . . . . . . . . . . . . 6\n6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 6\n7.  Security Considerations . . . . . . . . . . . . . . . . . . . . 7\n8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 7\n9.  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n  9.1.  Normative References  . . . . . . . . . . . . . . . . . . . 7\n  9.2.  Informative References  . . . . . . . . . . . . . . . . . . 7",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "Recent attacks to currently used hash functions have motivated a considerable amount of concern in the Internet community. The recommended approach [6] [10] to deal with this issue is first to analyze the impact of these attacks on the different Internet protocols that use hash functions and second to make sure that the different Internet protocols that use hash functions are capable of migrating to an alternative (more secure) hash function without a major disruption in the Internet operation.",
      "ja": "現在、ハッシュ関数を使用する最近の攻撃は、インターネットコミュニティに関心のかなりの量を動機としています。 [6] [10]この問題に対処するために推奨されるアプローチは、ハッシュ関数を使用して、異なるインターネット・プロトコルが移行することが可能であることを確認するために、ハッシュ関数及び第二を使用し、異なるインターネット・プロトコル上のこれらの攻撃の影響を分析する最初のものですインターネット操作で大きな混乱なしに代替（より安全な）ハッシュ関数へ。"
    },
    {
      "indent": 3,
      "text": "This document performs such analysis for the Cryptographically Generated Addresses (CGAs) defined in [2]. The first conclusion of the analysis is that the security of the protocols using CGAs is not affected by the recently available attacks against hash functions. The second conclusion of the analysis is that the hash function used is hard coded in the CGA specification. This document updates the CGA specification [2] to enable the support of alternative hash functions. In order to do so, this document creates a new registry managed by IANA to register the different hash algorithms used in CGAs.",
      "ja": "この文書では、[2]で定義された暗号化生成アドレス（CGAs）のためにそのような分析を行います。分析の最初の結論はCGAsを使用してプロトコルのセキュリティは、ハッシュ関数に対する最近利用可能な攻撃の影響を受けないということです。分析の第二の結論は、使用されるハッシュ関数は、ハードCGA規格で符号化されることです。この文書では、[2]別のハッシュ関数のサポートを可能にするために、CGAの仕様を更新します。そうするためには、この文書はCGAsで使用される様々なハッシュアルゴリズムを登録するにはIANAによって管理され、新しいレジストリを作成します。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [1].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はありますRFC 2119に記載されるように解釈される[1]。"
    },
    {
      "indent": 0,
      "text": "3. Impact of Collision Attacks in CGAs",
      "section_title": true,
      "ja": "CGAsで衝突攻撃の3インパクト"
    },
    {
      "indent": 3,
      "text": "Recent advances in cryptography have resulted in simplified attacks against the collision-free property of certain commonly used hash functions [6] [10], including SHA-1 that is the hash function used by CGAs [2]. The result is that it is possible to obtain two messages, M1 and M2, that have the same hash value with much less than 2^(L/2) attempts. We will next analyze the impact of such attacks in the currently proposed usages of CGAs.",
      "ja": "CGAsによって使用されるハッシュ関数であるSHA-1などの暗号における最近の進歩特定の一般的に使用されるハッシュ関数の衝突のないプロパティに対する簡略攻撃をもたらしている[6] [10]、[2]。結果は、2 ^（L / 2）よりもはるかに少ないと同じハッシュ値を持つ2つのメッセージ、M1及びM2、試みを得ることが可能であるということです。私たちは、次のCGAsの現在提案されている用法では、このような攻撃の影響を分析します。"
    },
    {
      "indent": 3,
      "text": "As we understand it, the attacks against the collision-free property of a hash function mostly challenge the application of such hash functions, for the provision of non-repudiation capabilities. This is because an attacker would be capable to create two different messages that result in the same hash value and it can then present any of the messages interchangeably (for example after one of them has been signed by the other party involved in the transaction). However, it must be noted that both messages must be generated by the same party.",
      "ja": "我々はそれを理解したように、ハッシュ関数の衝突フリー性に対する攻撃は、ほとんど否認防止機能を提供するため、そのようなハッシュ関数の応用に挑戦します。攻撃者が同じハッシュ値をもたらし、それが、その後（例えばそのうちの一つは、トランザクションに関係する他の当事者によって署名された後）は交換可能メッセージのいずれかを提示することができる2つの異なるメッセージを作成することができるであろうからです。しかし、両方のメッセージは、同じパーティによって生成されなければならないことに注意しなければなりません。"
    },
    {
      "indent": 3,
      "text": "As far as we understand, current usages of CGAs does not include the provision of non-repudiation capabilities, so attacks against the collision-free property of the hash function do not enable any useful attack against CGA-based protocols.",
      "ja": "ハッシュ関数の衝突のない財産に対する攻撃はCGAベースのプロトコルに対する任意の有用な攻撃を有効にしないように、限り、我々は理解し、CGAsの現在の使用法は、否認防止機能の提供が含まれていません。"
    },
    {
      "indent": 3,
      "text": "Current usages of the CGAs are basically oriented to prove the ownership of a CGA and then bind it to alternative addresses that can be used to reach the original CGA. This type of application of the CGA include:",
      "ja": "CGAsの現在の使用法は、基本的には、CGAの所有権を証明し、元のCGAに到達するために使用できる代替アドレスにバインドするように配向されています。 CGAのこのタイプのアプリケーションは、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The application of CGAs to protect the shim6 protocol [7]. In this case, CGAs are used as identifiers for the established communications. CGA features are used to prove that the owner of the identifier is the one that is providing the alternative addresses that can be used to reach the initial identifier. This is achieved by signing the list of alternative addresses available in the multihomed host with the private key of the CGA.",
      "ja": "SHIM6プロトコルを保護するためCGAsのアプリケーションO [7]。この場合、CGAsは、確立された通信用の識別子として使用されます。 CGA機能は、識別子の所有者は、最初の識別子に到達するために使用できる代替アドレスを提供するものであることを証明するために使用されています。これは、CGAの秘密鍵でマルチホームホストで利用可能な代替アドレスのリストに署名することによって達成されます。"
    },
    {
      "indent": 3,
      "text": "o The application of CGAs to secure the IPv6 mobility support protocol [8] as proposed in [9]. In this case, the CGAs are used as Home Addresses and they are used to prove that the owner of the Home Address is the one creating the binding with the new Care-off Address. Similarly to the previous case, this is achieved by signing the Binding Update message carrying the Care-off Address with the private key of the CGA.",
      "ja": "IPv6のモビリティ・サポート・プロトコルを確保するCGAsのアプリケーションO [8] [9]で提案されているように。この場合、CGAsはホームアドレスとして使用され、それらはホームアドレスの所有者は、新たなケアオフアドレスとの結合を作る1であることを証明するために使用されています。同様に、前のケースに、これは、CGAの秘密鍵でケアオフアドレスを運ぶBinding Updateメッセージに署名することによって達成されます。"
    },
    {
      "indent": 3,
      "text": "o The application of CGA to Secure Neighbour Discovery [4]. In this case, the CGA features are used to prove the address ownership, so that it is possible to verify that the owner of the IP address is the one that is providing the layer 2 address information. This is achieved by signing the layer 2 address information with the private key of the CGA.",
      "ja": "近隣探索を確保するCGAのアプリケーションO [4]。この場合、CGA機能は、IPアドレスの所有者は、レイヤ2アドレス情報を提供しているものであることを検証することができるように、アドレスの所有権を証明するために使用されます。これは、CGAの秘密鍵でレイヤ2アドレス情報に署名することによって達成されます。"
    },
    {
      "indent": 3,
      "text": "Essentially, all the current applications of CGAs rely on CGAs to protect a communication between two peers from third party attacks and not to provide protection from the peer itself. Attacks against the collision-free property of the hash functions suppose that one of the parties is generating two messages with the same hash value in order to launch an attack against its communicating peer. Since CGAs are not currently used to providing this type of protection, it is then natural that no additional attacks are enabled by a weaker collision resistance of the hash function.",
      "ja": "基本的に、CGAsのすべての現在のアプリケーションはサードパーティの攻撃から2つのピア間の通信を保護するために、ピア自体からの保護を提供しないCGAsに依存しています。ハッシュ関数の衝突フリー性に対する攻撃は、当事者の一方がその通信相手に対して攻撃を開始するために、同じハッシュ値を持つ2つのメッセージを生成していることとします。 CGAsは現在、このタイプの保護を提供するために使用されていないので、追加の攻撃は、ハッシュ関数の弱い衝突抵抗によって有効にされていないこと、その後自然です。"
    },
    {
      "indent": 0,
      "text": "4. Options for Multiple Hash Algorithm Support in CGAs",
      "section_title": true,
      "ja": "CGAs内の複数のハッシュアルゴリズムのサポートのために4.オプション"
    },
    {
      "indent": 3,
      "text": "CGAs, as currently defined in [2], are intrinsically bound to the SHA-1 hash algorithm and no other hash function is supported.",
      "ja": "CGAsは、現在[2]は、本質的にSHA-1ハッシュアルゴリズムに結合され、他のハッシュ関数がサポートされていないで定義されています。"
    },
    {
      "indent": 3,
      "text": "Even though the attacks against the collision-free property of the hash functions do not result in new vulnerabilities in the current applications of CGAs, it seems wise to enable multiple hash function support in CGAs. This is mainly for two reasons: first, potential future applications of the CGA technology may be susceptible to attacks against the collision-free property of SHA-1. Supporting alternative hash functions would allow applications that have stricter requirements on the collision-free property to use CGAs. Second, one lesson learned from the recent attacks against hash functions is that it is possible that one day we need to start using alternative hash functions because of successful attacks against other properties of the commonly used hash functions. Therefore, it seems wise to modify protocols in general and the CGAs in particular to support this transition to alternative hash functions as easy as possible.",
      "ja": "ハッシュ関数の衝突のない財産に対する攻撃はCGAsの現在の用途における新たな脆弱性にはなりませんが、CGAsで複数のハッシュ関数のサポートを有効にするために賢明なようです。これは二つの理由から、主に次のとおりです。最初、CGA技術の潜在的な将来のアプリケーションは、SHA-1の衝突フリー性に対する攻撃を受ける可能性があります。代替ハッシュ関数をサポートする衝突のない財産上の厳しい要件を持つアプリケーションがCGAsを使用することができるようになります。第二に、ハッシュ関数に対する最近の攻撃から学んだ教訓1は、原因で一般的に使用されるハッシュ関数の他のプロパティに対する攻撃が成功の一日私たちは、代替ハッシュ関数を使用して起動する必要があることが可能であるということです。そのため、できるだけ簡単に代替のハッシュ関数への移行をサポートするために、一般的なプロトコル、特にCGAsを変更することが賢明と思われます。"
    },
    {
      "indent": 0,
      "text": "4.1. Where to Encode the Hash Function?",
      "section_title": true,
      "ja": "4.1. どこにハッシュ関数をエンコードするには？"
    },
    {
      "indent": 3,
      "text": "The next question we need to answer is where to encode the hash function that is being used. There are several options that can be considered:",
      "ja": "私たちは答える必要が次の質問には、使用されているハッシュ関数をエンコードする場所です。考えることができるいくつかのオプションがあります。"
    },
    {
      "indent": 3,
      "text": "One option would be to include the hash function used as an input to the hash function. This basically means to create an extension to the CGA Parameter Data Structure, as defined in [3], that codifies the hash function used. The problem is that this approach is vulnerable to bidding down attacks or downgrading attacks as defined in [10]. This means that even if a strong hash function is used, an attacker could find a CGA Parameter Data Structure that uses a weaker function but results in an equal hash value. This happens when the original hash function H1 and CGA Parameters Data Structure indicating H1 result in value X, and another hash function H2 and CGA Parameters Data Structure indicating H2 also result in the same value X.",
      "ja": "1つのオプションは、ハッシュ関数への入力として使用されるハッシュ関数を含めることであろう。これは、基本的に[3]、すなわち、使用されるハッシュ関数を成文化で定義されるように、CGAパラメータデータ構造への拡張を作成することを意味します。問題は、このアプローチは攻撃をダウン入札または[10]で定義されるような攻撃をダウングレードに対して脆弱であることです。これは、強力なハッシュ関数を用いた場合でも、攻撃者が弱い機能を使用していますが、同じハッシュ値になりCGAパラメータデータ構造を見つけることができることを意味します。元のハッシュ関数H1及びCGAパラメータデータ構造値XにH1の結果を示す、別のハッシュ関数H2及びCGAパラメータデータ構造はH2も同じ値Xをもたらす示す場合に発生します"
    },
    {
      "indent": 3,
      "text": "In other words, the downgrading attack would work as follows: suppose that Alice generates a CGA CGA_A using the strong hash function HashStrong and using a CGA Parameter Data Structure CGA_PDS_A. The selected hash function HashStrong is encoded as an extension field in the CGA_PDS_A. Suppose that by using a brute force attack, an attacker X finds an alternative CGA Parameter Data Structure CGA_PDS_X whose hash value, by using a weaker hash function, is CGA_A. At this point, the attacker can pretend to be the owner of CGA_A and the stronger hash function has not provided additional protection.",
      "ja": "言い換えれば、次のように動作します格下げ攻撃は：アリスはCGA CGA_Aが強いハッシュ関数HashStrongを使用し、CGAパラメータデータ構造CGA_PDS_Aを使用して発生したとします。選択されたハッシュ関数HashStrongはCGA_PDS_Aに拡張フィールドとして符号化されます。ブルートフォース攻撃、Xは、ハッシュ値代替CGAパラメータデータ構造CGA_PDS_Xを見つけ攻撃を使用することによって、より弱いハッシュ関数を用いて、CGA_Aあること。想定この時点で、攻撃者はCGA_Aの所有者のふりをすることができますし、より強力なハッシュ関数は、追加の保護を提供していません。"
    },
    {
      "indent": 3,
      "text": "The conclusion from the previous analysis is that the hash function used in the CGA generation must be encoded in the address itself.",
      "ja": "以前の分析からの結論は、CGAの生成に使用されるハッシュ関数は、アドレス自体に符号化しなければならないことです。"
    },
    {
      "indent": 3,
      "text": "Since we want to support several hash functions, we will likely need at least 2 or 3 bits for this.",
      "ja": "我々はいくつかのハッシュ関数をサポートしたいので、私たちは、おそらく、このために少なくとも2または3ビットが必要になります。"
    },
    {
      "indent": 3,
      "text": "One option would be to use more bits from the hash bits of the interface identifier. However, the problem with this approach is that the resulting CGA is weaker because less hash information is encoded in the address. In addition, since those bits are currently used as hash bits, it is impossible to make this approach backward compatible with existent implementations.",
      "ja": "1つのオプションは、インタフェース識別子のハッシュビットから複数のビットを使用することであろう。しかし、このアプローチの問題は、より少ないハッシュ情報がアドレスに符号化されるので、得られたCGAが弱いことです。これらのビットは、現在ハッシュビットとして使用されているので、また、既存の実装と、このアプローチは、後方互換性を持たせることは不可能です。"
    },
    {
      "indent": 3,
      "text": "Another option would be to use the \"u\" and the \"g\" bits to encode this information, but this is probably not such a good idea since those bits have been honoured so far in all interface identifier generation mechanisms, which allow them to be used for the original purpose (for instance we can still create a global registry for unique interface identifiers). Finally, another option is to encode the hash value used in the Sec bits. The Sec bits are used to artificially introduce additional difficulty in the CGA generation process in order to provide additional protection against brute force attacks. The Sec bits have been designed in a way that the lifetime of CGAs are extended, when it is feasible to attack 59-bits long hash values. However, this is not the case today, so in general CGA will have a Sec value of 000. The proposal is to encode in the Sec bits, not only information about brute force attack protection but also to encode the hash function used to generate the hash. So for instance, the Sec value 000 would mean that the hash function used is SHA-1 and the 0 bits of hash2 (as defined in RFC 3972) must be 0. Sec value of 001 could be that the hash function used is SHA-1 and the 16 bits of hash2 (as defined in RFC 3972) must be zero. However, the other values of Sec could mean that an alternative hash function needs to be used and that a certain amount of bits of hash2 must be zero. The proposal is not to define any concrete hash function to be used for other Sec values, since it is not yet clear that we need to do so nor is it clear which hash function should be selected.",
      "ja": "別のオプションは、この情報を符号化する「U」と「G」のビットを使用することですが、これはおそらく、これらのビットは、彼らがすることができ、すべてのインタフェース識別子の生成メカニズム、でこれまでに受賞しているので、このような良いアイデアではありません本来の目的のために使用される（例えば、我々はまだユニークなインタフェース識別子のグローバルなレジストリを作成することができます）。最後に、別のオプションは、SECビットで使用されるハッシュ値を符号化することです。秒ビットが人為的にブルートフォース攻撃に対する追加の保護を提供するために、CGA生成プロセスにおける追加の困難を導入するために使用されています。 59ビット長のハッシュ値を攻撃することが可能であるとき秒ビットは、CGAsの寿命が延長されているように設計されています。しかし、これではありませんが000の秒の値を持つことになり、一般的なCGAにおけるよう提案は、秒のビットでブルートフォース攻撃からの保護についてだけでなく、情報を符号化するだけでなく、生成するために使用されるハッシュ関数を符号化することである、ケース今日ハッシュ。だから、例えば、秒値000は、使用されるハッシュ関数は、SHA-1およびHASH2の0ビット（RFC 3972で定義されている）001の0秒の値が使用されるハッシュ関数であることが考えられなければならないであることを意味するSHA- （RFC 3972で定義されるように）HASH2の1と16ビットがゼロでなければなりません。しかし、秒の他の値は、別のハッシュ関数を使用する必要があることを意味する可能性があり、HASH2のビットの特定の量はゼロでなければならないこと。我々がそうする必要があることはまだ明らかではないが、またそれが選択されるべきハッシュ関数で明確であるため、提案は、他の秒値のために使用される任意の具体的なハッシュ関数を定義することではありません。"
    },
    {
      "indent": 3,
      "text": "Note that since there are only 8 Sec values, it may be necessary to reuse Sec values when we run out of unused Sec values. The scenario where such an approach makes sense is where there are some Sec values that are no longer being used because the resulting security has become weak. In this case, where the usage of the Sec value has long been abandoned, it would be possible to reassign the Sec values. However, this must be a last resource option, since it may affect interoperability. This is because two implementations using different meanings of a given Sec value would not be able to interoperate properly (i.e., if an old implementation receives a CGA generated with the new meaning of the Sec value, it will fail and the same for a new implementation receiving a CGA generated with the old meaning of the Sec value). In case the approach of reassigning a Sec value is followed, a long time is required between the deprecation of the old value and the reassignment in order to prevent misinterpretation of the value by old implementations.",
      "ja": "わずか8秒値があるので、我々が未使用の秒値を使い果たしたときに秒の値を再利用する必要があるかもしれないことに注意してください。得られたセキュリティが弱くなっているため、もはや使用されているいくつかの秒の値が存在する場合、このようなアプローチは理にかなっているシナリオがあります。秒値の使用は、長い間放棄されている。この場合において、SEC値を再割り当てすることも可能です。それは、相互運用性に影響を与える可能性があるためしかし、これは、最後のリソースのオプションでなければなりません。古い実装は、秒値の新しい意味で生成されたCGAを受けた場合、これは与えられた秒値の異なる意味を使用して2つの実装が適切に相互運用することはできないためである（すなわち、それは新しい実装のための失敗と同じになります秒値の古い意味で生成されたCGA）を受けます。秒の値を再割り当てのアプローチが続いている場合には、長い時間が古い実装によって値の誤解を防止するために、古い値の非推奨と再割り当ての間に必要とされます。"
    },
    {
      "indent": 3,
      "text": "An erroneous interpretation of a reused Sec value, both on the CGA owner's side and the CGA verifier's side, would have the following result, CGA verification would fail in the worst case and both nodes would have to revert to unprotected IPv6 addresses. This can happen only with obsolete CGA parameter sets, which would be considered insecure anyway. In any case, an implementation must not simultaneously support two different meanings of a Sec value.",
      "ja": "再利用秒値の誤った解釈、CGA所有者側とCGA検証者側の両方が、次の結果を持っているでしょう、CGA検証は、最悪の場合には失敗し、両方のノードは、保護されていないIPv6アドレスに戻す必要があります。これはとにかく安全でないと考えられる時代遅れCGAパラメータセットでのみ発生することができます。いずれの場合においても、実装が同時に秒値の二つの異なる意味をサポートしてはなりません。"
    },
    {
      "indent": 0,
      "text": "5. CGA Generation Procedure",
      "section_title": true,
      "ja": "5. CGA生成手順"
    },
    {
      "indent": 3,
      "text": "The SEC registry defined in the IANA considerations section of this document contains entries for the different Sec values. Each of these entries points to an RFC that defines the CGA generation procedure that MUST be used when generating CGAs with the associated Sec value.",
      "ja": "このドキュメントのIANAの考慮セクションで定義されたSECのレジストリは異なる秒値のエントリが含まれています。これらのエントリの各々は、関連秒値とCGAsを生成する際に使用しなければならないCGAの生成手順を規定するRFCを指します。"
    },
    {
      "indent": 3,
      "text": "It should be noted that the CGA generation procedure may be changed by the new procedure not only in terms of the hash function used but also in other aspects, e.g., longer Modifier values may be required if the number of 0s required in hash2 exceed the currently defined bound of 112 bits. The new procedure (which potentially involves a longer Modifier value) would be described in the RFC pointed to by the corresponding Sec registry entry.",
      "ja": "CGA生成手順は例えば、使用されるハッシュ関数の観点からだけでなく、他の側面だけでなく、新たな手順で変更することができることに留意すべきであるHASH2に必要な0の数が現在超えた場合、長い修飾子の値が必要になることがあります112ビットのバインド定義。 RFCに記載される（潜在的に長い修飾値を含む）は、新しいプロシージャは、対応する秒レジストリエントリによって指し示さ。"
    },
    {
      "indent": 3,
      "text": "In addition, the RFC that defines the CGA generation procedure for a Sec value MUST explicitly define the minimum key length acceptable for CGAs with that Sec value. This is to provide a coherent protection both in the hash and the public key techniques.",
      "ja": "また、秒の値をCGAの生成手順を規定するRFCは、明示的にその秒値でCGAsの許容最小の鍵長を定義しなければなりません。これは、コヒーレント保護の両方のハッシュにし、公開鍵技術を提供することです。"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document defines a new registry entitled \"CGA SEC\" for the Sec field defined in RFC 3972 [2] that has been created and is maintained by IANA. The values in this name space are 3-bit unsigned integers.",
      "ja": "この文書は、IANAによって作成され、維持されているRFC 3972で定義された秒フィールドの「CGA SEC」という新しいレジストリ[2]を定義します。この名前空間の値は、3ビットの符号なし整数です。"
    },
    {
      "indent": 3,
      "text": "Initial values for the CGA Extension Type field are given below; future assignments are to be made through Standards Action [5]. Assignments consist of a name, the value, and the RFC number where the CGA generation procedure is defined.",
      "ja": "CGA拡張タイプフィールドの初期値は以下の通りです。将来の割り当ては標準アクション[5]を介して行われるべきです。割り当ては、名前、値、およびCGA生成手順が定義されているRFC番号から成ります。"
    },
    {
      "indent": 3,
      "text": "The following initial values are assigned in this document:",
      "ja": "以下の初期値は、この文書に割り当てられます。"
    },
    {
      "indent": 3,
      "text": "       Name        | Value |  RFCs\n-------------------+-------+------------\nSHA-1_0hash2bits   |   000 | 3972, 4982\nSHA-1_16hash2bits  |   001 | 3972, 4982\nSHA-1_32hash2bits  |   010 | 3972, 4982",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document is about security issues and, in particular, about protection against potential attacks against hash functions.",
      "ja": "この文書では、ハッシュ関数に対する潜在的な攻撃からの保護については、具体的には、セキュリティ上の問題についてです。"
    },
    {
      "indent": 0,
      "text": "8. Acknowledgements",
      "section_title": true,
      "ja": "8.謝辞"
    },
    {
      "indent": 3,
      "text": "Russ Housley, James Kempf, Christian Vogt, Pekka Nikander, and Henrik Levkowetz reviewed and provided comments about this document.",
      "ja": "ラスHousley、ジェームズ・ケンプ、クリスチャン・フォークト、ペッカNikander、とヘンリクLevkowetzを見直し、このドキュメントに関するコメントを提供しました。"
    },
    {
      "indent": 3,
      "text": "Marcelo Bagnulo worked on this document while visiting Ericsson Research Laboratory Nomadiclab.",
      "ja": "エリクソン研究所Nomadiclabを訪問している間マルセロBagnuloは、この文書に取り組みました。"
    },
    {
      "indent": 0,
      "text": "9. References",
      "section_title": true,
      "ja": "9.参考文献"
    },
    {
      "indent": 0,
      "text": "9.1. Normative References",
      "section_title": true,
      "ja": "9.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[1] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[1]ブラドナーのは、S.は、BCP 14、RFC 2119、1997年3月の \"RFCsにおける使用のためのレベルを示すために\"。"
    },
    {
      "indent": 3,
      "text": "[2] Aura, T., \"Cryptographically Generated Addresses (CGA)\", RFC 3972, March 2005.",
      "ja": "[2]オーラ、T.、 \"暗号化生成アドレス（CGA）\"、RFC 3972、2005年3月。"
    },
    {
      "indent": 3,
      "text": "[3] Bagnulo, M. and J. Arkko, \"Cryptographically Generated Addresses (CGA) Extension Field Format\", RFC 4581, October 2006.",
      "ja": "[3] Bagnulo、M.及びJ. Arkko、 \"暗号化生成アドレス（CGA）の拡張フィールドのフォーマット\"、RFC 4581、2006年10月。"
    },
    {
      "indent": 3,
      "text": "[4] Arkko, J., Kempf, J., Zill, B., and P. Nikander, \"SEcure Neighbor Discovery (SEND)\", RFC 3971, March 2005.",
      "ja": "[4] Arkko、J.、ケンプ、J.、Zill、B.、およびP. Nikanderを、 \"セキュア近隣探索（SEND）\"、RFC 3971、2005年3月。"
    },
    {
      "indent": 0,
      "text": "9.2. Informative References",
      "section_title": true,
      "ja": "9.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[5] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 2434, October 1998.",
      "ja": "[5] Narten氏、T.とH. Alvestrand、 \"RFCsにIANA問題部に書くためのガイドライン\"、BCP 26、RFC 2434、1998年10月。"
    },
    {
      "indent": 3,
      "text": "[6] Hoffman, P. and B. Schneier, \"Attacks on Cryptographic Hashes in Internet Protocols\", RFC 4270, November 2005.",
      "ja": "[6]ホフマン、P.とB.シュナイアー、RFC 4270 \"インターネットプロトコルで暗号化ハッシュに対する攻撃\"、2005年11月。"
    },
    {
      "indent": 3,
      "text": "[7] Nordmark, E. and M. Bagnulo, \"Multihoming L3 Shim Approach\", Work in Progress, July 2005.",
      "ja": "[7] Nordmarkと、E.およびM. Bagnuloは、 \"マルチホーミングL3シムアプローチ\"、進歩、2005年7月に作業します。"
    },
    {
      "indent": 3,
      "text": "[8] Johnson, D., Perkins, C., and J. Arkko, \"Mobility Support in IPv6\", RFC 3775, June 2004.",
      "ja": "[8]ジョンソン、D.、パーキンス、C.、およびJ. Arkko、 \"IPv6におけるモビリティサポート\"、RFC 3775、2004年6月。"
    },
    {
      "indent": 3,
      "text": "[9] Arkko, J., \"Applying Cryptographically Generated Addresses and Credit-Based Authorization to Mobile IPv6\", Work in Progress, June 2006.",
      "ja": "[9] Arkko、J.、「モバイルIPv6への暗号的に生成されたアドレスと適用クレジットベースの許可」、進歩、2006年6月での作業。"
    },
    {
      "indent": 3,
      "text": "[10] Bellovin, S. and E. Rescorla, \"Deploying a New Hash Algorithm\", NDSS '06, February 2006.",
      "ja": "[10] Bellovin氏、S.およびE.レスコラ、NDSS '06、2006年2月 \"新しいハッシュアルゴリズムを展開します\"。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Marcelo Bagnulo Universidad Carlos III de Madrid Av. Universidad 30 Leganes, Madrid 28911 SPAIN",
      "ja": "マドリードのマルセロBagnuloチャールズIII大学のAv。大学30レガネス、マドリード28911スペイン"
    },
    {
      "indent": 3,
      "text": "Phone: 34 91 6249500 EMail: marcelo@it.uc3m.es URI: http://www.it.uc3m.es",
      "ja": "電話：34 91 6249500 Eメール：marcelo@it.uc3m.es URI：http://www.it.uc3m.es"
    },
    {
      "indent": 3,
      "text": "Jari Arkko Ericsson Jorvas 02420 Finland",
      "ja": "ヤリArkkoエリクソン02420 Jorvasフィンランド"
    },
    {
      "indent": 3,
      "text": "EMail: jari.arkko@ericsson.com",
      "ja": "メールアドレス：jari.arkko@ericsson.com"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2007).",
      "ja": "著作権（C）IETFトラスト（2007）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットSOCIETY、（もしあれば）を後援し、IETF TRUST ANDインターネットエンジニアリングタスクフォース放棄ALLに設けられています。保証は、明示または黙示、この情報の利用および特定目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証がこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}