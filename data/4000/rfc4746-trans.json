{
  "title": {
    "text": "RFC 4746 - Extensible Authentication Protocol (EAP) Password Authenticated Exchange",
    "ja": "RFC 4746 - 拡張認証プロトコル（EAP）パスワード認証交換"
  },
  "number": 4746,
  "created_at": "2019-10-25 23:14:27.283427+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                          T. Clancy\nRequest for Comments: 4746                                           LTS\nCategory: Informational                                       W. Arbaugh\n                                                                     UMD\n                                                           November 2006",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Extensible Authentication Protocol (EAP)\n     Password Authenticated Exchange",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。それはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2006).",
      "ja": "著作権（C）IETFトラスト（2006）。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document defines an Extensible Authentication Protocol (EAP) method called EAP-PAX (Password Authenticated eXchange). This method is a lightweight shared-key authentication protocol with optional support for key provisioning, key management, identity protection, and authenticated data exchange.",
      "ja": "この文書では、EAP-PAX（パスワード認証取引所）と呼ばれる拡張認証プロトコル（EAP）メソッドを定義します。この方法は、キーのプロビジョニング、キー管理、アイデンティティ保護、および認証されたデータ交換のためのオプションをサポートする軽量共有鍵認証プロトコルです。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n   1.1. Language Requirements ......................................3\n   1.2. Terminology ................................................3\n2. Overview ........................................................5\n   2.1. PAX_STD Protocol ...........................................6\n   2.2. PAX_SEC Protocol ...........................................7\n   2.3. Authenticated Data Exchange ................................9\n   2.4. Key Derivation ............................................10\n   2.5. Verification Requirements .................................11\n   2.6. PAX Key Derivation Function ...............................12\n3. Protocol Specification .........................................13\n   3.1. Header Specification ......................................13\n        3.1.1. Op-Code ............................................13\n        3.1.2. Flags ..............................................14",
      "raw": true
    },
    {
      "indent": 3,
      "text": "        3.1.3. MAC ID .............................................14\n        3.1.4. DH Group ID ........................................14\n        3.1.5. Public Key ID ......................................15\n        3.1.6. Mandatory to Implement .............................15\n   3.2. Payload Formatting ........................................16\n   3.3. Authenticated Data Exchange (ADE) .........................18\n   3.4. Integrity Check Value (ICV) ...............................19\n4. Security Considerations ........................................19\n   4.1. Server Certificates .......................................20\n   4.2. Server Security ...........................................20\n   4.3. EAP Security Claims .......................................21\n        4.3.1. Protected Ciphersuite Negotiation ..................21\n        4.3.2. Mutual Authentication ..............................21\n        4.3.3. Integrity Protection ...............................21\n        4.3.4. Replay Protection ..................................21\n        4.3.5. Confidentiality ....................................21\n        4.3.6. Key Derivation .....................................21\n        4.3.7. Key Strength .......................................22\n        4.3.8. Dictionary Attack Resistance .......................22\n        4.3.9. Fast Reconnect .....................................22\n        4.3.10. Session Independence ..............................22\n        4.3.11. Fragmentation .....................................23\n        4.3.12. Channel Binding ...................................23\n        4.3.13. Cryptographic Binding .............................23\n        4.3.14. Negotiation Attack Prevention .....................23\n5. IANA Considerations ............................................23\n6. Acknowledgments ................................................24\n7. References .....................................................24\n   7.1. Normative References ......................................24\n   7.2. Informative References ....................................25\nAppendix A. Key Generation from Passwords ........................ 27\nAppendix B. Implementation Suggestions ........................... 27\n  B.1. WiFi Enterprise Network ................................... 27\n  B.2. Mobile Phone Network ...................................... 28",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "EAP-PAX (Password Authenticated eXchange) is an Extensible Authentication Protocol (EAP) method [RFC3748] designed for authentication using a shared key. It makes use of two separate subprotocols, PAX_STD and PAX_SEC. PAX_STD is a simple, lightweight protocol for mutual authentication using a shared key, supporting Authenticated Data Exchange (ADE). PAX_SEC complements PAX_STD by providing support for shared-key provisioning and identity protection using a server-side public key.",
      "ja": "EAP-PAX（パスワード認証交換は）共有鍵を用いて認証のために設計された拡張認証プロトコル（EAP）メソッド[RFC3748]です。これは、2つの別々のサブプロトコル、PAX_STDとPAX_SECを使用しています。 PAX_STDは、認証されたデータ交換（ADE）をサポートする共有キーを使用して、相互認証のためのシンプルで軽量なプロトコルです。 PAX_SECは、サーバ側の公開鍵を使用して共有キーのプロビジョニングとアイデンティティ保護のためのサポートを提供することにより、PAX_STDを補完します。"
    },
    {
      "indent": 3,
      "text": "The idea motivating EAP-PAX is a desire for device authentication bootstrapped by a simple Personal Identification Number (PIN). If a weak key is used or a expiration period has elapsed, the authentication server forces a key update. Rather than using a symmetric key exchange, the client and server perform a Diffie-Hellman key exchange, which provides forward secrecy.",
      "ja": "EAP-PAXの動機アイデアは、単純な個人識別番号（PIN）によるブートストラップデバイス認証のための欲求です。弱い鍵が使用されているか、有効期限が経過した場合、認証サーバは、鍵の更新を強制します。むしろ、対称鍵交換を使用するよりも、クライアントとサーバは、前進の秘密保持を提供したDiffie-Hellman鍵交換を行います。"
    },
    {
      "indent": 3,
      "text": "Since implementing a Public Key Infrastructure (PKI) can be cumbersome, PAX_SEC defines multiple client security policies, selectable based on one's threat model. In the weakest mode, PAX_SEC allows the use of raw public keys completely eliminating the need for a PKI. In the strongest mode, PAX_SEC requires that EAP servers use certificates signed by a trusted Certification Authority (CA). In the weaker modes, during provisioning PAX_SEC is vulnerable to a man-in-the-middle dictionary attack. In the strongest mode, EAP-PAX is provably secure under the Random Oracle model.",
      "ja": "煩雑になる可能性があり、公開鍵インフラストラクチャ（PKI）を導入して以来、PAX_SEC一の脅威モデルに基づいて、複数のクライアントのセキュリティポリシー、選択を定義します。最も弱いモードでは、PAX_SECは、生の公開鍵の使用が完全にPKIの必要性を排除することができます。最強モードでは、PAX_SECは、EAPサーバは、信頼できる認証局（CA）によって署名された証明書を使用する必要があります。弱いモードでは、プロビジョニング中にPAX_SECはなman-in-the-middle辞書攻撃に対して脆弱です。最強モードでは、EAP-PAXは、ランダムオラクルモデルの下で証明可能安全です。"
    },
    {
      "indent": 3,
      "text": "EAP-PAX supports the generation of strong key material; mutual authentication; resistance to desynchronization, dictionary, and man-in-the-middle attacks; ciphersuite extensibility with protected negotiation; identity protection; and the authenticated exchange of data, useful for implementing channel binding. These features satisfy the EAP method requirements for wireless LANs [RFC4017], making EAP-PAX ideal for wireless environments such as IEEE 802.11 [IEEE.80211].",
      "ja": "EAP-PAXは、強力なキーマテリアルの生成をサポートしています。相互認証;非同期化、辞書、およびman-in-the-middle攻撃への耐性;保護された交渉での暗号スイートの拡張。アイデンティティ保護。そして、データのやり取り、認証、結合チャネルを実装するために有用。これらの機能は、IEEE 802.11 [IEEE.80211]などの無線環境のためにEAP-PAXの理想を行う、無線LAN [RFC4017]のためのEAPメソッド要件を満たします。"
    },
    {
      "indent": 0,
      "text": "1.1. Language Requirements",
      "section_title": true,
      "ja": "1.1. 言語要件"
    },
    {
      "indent": 3,
      "text": "In this document, several words are used to signify the requirements of the specification. The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "このドキュメントでは、いくつかの単語は、仕様の要件を意味するために使用されています。この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "1.2. Terminology",
      "section_title": true,
      "ja": "1.2. 用語"
    },
    {
      "indent": 3,
      "text": "This section describes the various variables and functions used in the EAP-PAX protocol. They will be referenced frequently in later sections.",
      "ja": "このセクションでは、EAP-PAXプロトコルで使用される各種変数や機能を説明しています。彼らは、後のセクションで頻繁に参照されます。"
    },
    {
      "indent": 3,
      "text": "Variables:",
      "ja": "変数："
    },
    {
      "indent": 3,
      "text": "CID User-supplied client ID, specified as a Network Access Identifier (NAI) [RFC4282], restricted to 65535 octets",
      "ja": "65535個のオクテットに制限されたネットワークアクセス識別子（NAI）[RFC4282]として指定されたCIDユーザー指定のクライアントID、"
    },
    {
      "indent": 3,
      "text": "g public Diffie-Hellman generator, typically the integer 2 [RFC2631]",
      "ja": "G公共のDiffie-Hellmanジェネレータ、典型的には整数2 [RFC2631]"
    },
    {
      "indent": 3,
      "text": "M 128-bit random integer generated by the server",
      "ja": "サーバによって生成されたM 128ビットのランダムな整数"
    },
    {
      "indent": 3,
      "text": "N 128-bit random integer generated by the client",
      "ja": "Nクライアントによって生成された128ビットのランダムな整数"
    },
    {
      "indent": 3,
      "text": "X 256-bit random integer generated by the server",
      "ja": "サーバによって生成されたX 256ビットのランダムな整数"
    },
    {
      "indent": 3,
      "text": "Y 256-bit random integer generated by the client",
      "ja": "クライアントによって生成されたY 256ビットのランダムな整数"
    },
    {
      "indent": 3,
      "text": "Keys:",
      "ja": "キー："
    },
    {
      "indent": 3,
      "text": "AK authentication key shared between the client and EAP server",
      "ja": "AK認証キーは、クライアントとEAPサーバの間で共有しました"
    },
    {
      "indent": 3,
      "text": "AK' new authentication key generated during a key update",
      "ja": "AKの新しい認証キーは、キーの更新中に発生しました"
    },
    {
      "indent": 3,
      "text": "CertPK EAP server's certificate containing public key PK",
      "ja": "公開鍵PKを含むCertPK EAPサーバの証明書"
    },
    {
      "indent": 3,
      "text": "CK Confirmation Key generated from the MK and used during authentication to prove knowledge of AK",
      "ja": "CK確認キーMKから生成され、AKの知識を証明するために認証時に使用"
    },
    {
      "indent": 3,
      "text": "EMSK Extended Master Session Key also generated from the MK and containing additional keying material",
      "ja": "EMSKはMKから生成され、追加のキーイング材料を含むものマスターセッションキーを拡張します"
    },
    {
      "indent": 3,
      "text": "IV Initialization Vector used to seed ciphers; exported to the authenticator",
      "ja": "IV初期化ベクトルは、暗号をシードするために使用しました。オーセンティケータにエクスポート"
    },
    {
      "indent": 3,
      "text": "MID Method ID used to construct the EAP Session ID and consequently name all the exported keys [IETF.KEY]",
      "ja": "MIDメソッドIDは、EAPセッションIDを構築するために使用され、その結果、すべてのエクスポートされたキー[IETF.KEY]を名前"
    },
    {
      "indent": 3,
      "text": "MK Master Key between the client and EAP server from which all other EAP method session keys are derived",
      "ja": "他のすべてのEAPメソッドのセッションキーが導出されるクライアントとEAPサーバ間のMKマスターキー"
    },
    {
      "indent": 3,
      "text": "MSK Master Session Key generated from the MK and exported by the EAP method to the authenticator",
      "ja": "MSKマスターセッションキーMKから生成され、オーセンティケータにEAP方式によってエクスポート"
    },
    {
      "indent": 3,
      "text": "PK EAP server's public key",
      "ja": "PK EAPサーバの公開鍵"
    },
    {
      "indent": 3,
      "text": "Operations:",
      "ja": "オペレーション："
    },
    {
      "indent": 3,
      "text": "enc_X(Y) encryption of message Y with public key X",
      "ja": "enc_X（Y）は、公開鍵XとYのメッセージの暗号化"
    },
    {
      "indent": 3,
      "text": "MAC_X(Y) keyed message authentication code computed over message Y with symmetric key X",
      "ja": "対称鍵XとメッセージYにわたって計算MAC_X（Y）キー付きメッセージ認証コード"
    },
    {
      "indent": 3,
      "text": "PAX-KDF-W(X, Y, Z) PAX Key Derivation Function computed using secret X, identifier Y, and seed Z, and producing W octets of output",
      "ja": "PAX-KDF-W（X、Y、Z）秘密Xを使用して計算PAX鍵導出関数、識別子Y、及び種子Z、及び出力のWオクテットの製造"
    },
    {
      "indent": 3,
      "text": "|| string or binary data concatenation",
      "ja": "||文字列またはバイナリデータの連結"
    },
    {
      "indent": 0,
      "text": "2. Overview",
      "section_title": true,
      "ja": "2.概要"
    },
    {
      "indent": 3,
      "text": "The EAP framework [RFC3748] defines four basic steps that occur during the execution of an EAP conversation between client and server. The first phase, discovery, is handled by the underlying link-layer protocol. The authentication phase is defined here. The key distribution and secure association phases are handled differently depending on the underlying protocol, and are not discussed in this document.",
      "ja": "EAPフレームワーク[RFC3748]は、クライアントとサーバとの間のEAP対話の実行中に発生する四つの基本的な手順を定義します。第一相、発見は、下層のリンク層プロトコルによって処理されます。認証フェーズはここで定義されています。鍵配布および安全な関連相は、基礎となるプロトコルに応じて異なる方法で処理され、この文書で説明していません。"
    },
    {
      "indent": 8,
      "text": "+--------+                                     +--------+\n|        |                EAP-Request/Identity |        |\n| CLIENT |<------------------------------------| SERVER |\n|        |                                     |        |\n|        | EAP-Response/Identity               |        |\n|        |------------------------------------>|        |\n|        |                                     |        |\n|        |        EAP-PAX (STD or SEC)         |        |\n|        |<----------------------------------->|        |\n|        | ...                             ... |        |\n|        |<----------------------------------->|        |\n|        |                                     |        |\n|        |          EAP-Success or EAP-Failure |        |\n|        |<------------------------------------|        |\n+--------+                                     +--------+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 1: EAP-PAX Packet Exchanges",
      "ja": "図1：EAP-PAXパケット交換"
    },
    {
      "indent": 3,
      "text": "There are two distinct subprotocols that can be executed. The first, PAX_STD, is used during typical authentications. The second, PAX_SEC, provides more secure features such as key provisioning and identity protection.",
      "ja": "実行可能な2つの異なるサブプロトコルがあります。まず、PAX_STDは、一般的な認証中に使用されます。二、PAX_SECは、そのようなキーのプロビジョニングとアイデンティティ保護など、よりセキュアな機能を提供します。"
    },
    {
      "indent": 3,
      "text": "PAX_STD and PAX_SEC have two modes of operation. When an AK update is being performed, the client and server exchange Diffie-Hellman exponents g^X and g^Y, which are computed modulo prime P or over an elliptic curve multiplicative group. When no update is being performed, and only session keys are being derived, X and Y are exchanged. Using Diffie-Hellman during the key update provides forward secrecy, and secure key derivation when a weak provisioned key is used.",
      "ja": "PAX_STDとPAX_SECは、2つの動作モードがあります。 AK更新が行われているとき、クライアントとサーバ交換のDiffie-Hellmanはモジュロ素数Pを計算または楕円曲線乗法群上れるG ^ Xとg ^ Yを指数部。全く更新が実行されていない、とだけセッションキーが導出されているとき、XとYが交換されます。鍵更新時にディフィー - ヘルマンを使用する弱プロビジョニングキーが使用されている転送秘密、および安全な鍵導出を提供します。"
    },
    {
      "indent": 3,
      "text": "The main deployment difference between PAX_STD and PAX_SEC is that PAX_SEC requires a server-side public key. More specifically, that means a private key known only to the server with corresponding public key being transmitted to the client during each PAX_SEC session. For every authentication, the client is required to compute computationally intensive public-key operations. PAX_STD, on the other hand, uses purely symmetric operations, other than a possible Diffie-Hellman exchange.",
      "ja": "PAX_STDとPAX_SECの間の主な展開の差がPAX_SECは、サーバー側の公開鍵を必要とすることです。具体的には、それは各PAX_SECセッション中にクライアントに送信された公開鍵に対応して、サーバーにのみ知られている秘密鍵を意味します。すべての認証の場合、クライアントは、計算集約的な公開鍵操作を計算するために必要とされます。 PAX_STDは、他方、可能のDiffie-Hellman交換以外の純粋に対称的な動作を、使用します。"
    },
    {
      "indent": 3,
      "text": "Each of the protocols is now defined.",
      "ja": "プロトコルのそれぞれについて定義されます。"
    },
    {
      "indent": 0,
      "text": "2.1. PAX_STD Protocol",
      "section_title": true,
      "ja": "2.1.  PAX_STDプロトコル"
    },
    {
      "indent": 3,
      "text": "PAX_STD is a simple nonce-based authentication using the strong long-term key. The client and server each exchange 256 bits of random data, which is used to seed the PAX-KDF for generation of session keys. The randomly exchanged data in the protocol differs depending on whether a key update is being performed. If no key update is being performed, then let:",
      "ja": "PAX_STDは強い長期キーを使用して、簡単なナンスベースの認証です。クライアントとサーバの各交換セッション鍵を生成するためにPAX-KDFを播種するために使用されるランダムデータの256ビット。プロトコルにおけるランダム交換されるデータは、鍵更新が行われているかに応じて異なります。何のキー更新が実行されていない場合は、してみましょう："
    },
    {
      "indent": 3,
      "text": "o A = X o B = Y o E = X || Y",
      "ja": "又はA = B = X又はY又はE = X ||と"
    },
    {
      "indent": 3,
      "text": "Thus, A and B are 256-bit values and E is their 512-bit concatenation. To provide forward secrecy and security, let the following be true when a key update is being performed:",
      "ja": "したがって、A及びBは、256ビットの値であり、Eは、それらの512ビット連結です。前進の秘密保持とセキュリティを提供するために、鍵の更新が行われているときに次のことが真でみましょう："
    },
    {
      "indent": 3,
      "text": "o A = g^X o B = g^Y o E = g^(XY)",
      "ja": "O = G ^ X B Y = G ^ E = G ^（XY）"
    },
    {
      "indent": 3,
      "text": "Here A and B are Diffie-Hellman exponents whose length is determined by the Diffie-Hellman group size. The value A is data transmitted from the server to the client, and B is data transmitted from the client to the server. The value E is the entropy computed by each that is used in Section 2.4 to perform key derivation.",
      "ja": "ここでAとBは、その長さのDiffie-Hellmanグループのサイズによって決定されるのDiffie-Hellman指数です。値Aは、サーバからクライアントに送信されるデータであり、Bは、クライアントからサーバへ送信されるデータです。値Eは、鍵導出を実行するために、セクション2.4で使用される各によって計算エントロピーです。"
    },
    {
      "indent": 3,
      "text": "The full protocol is as follows:",
      "ja": "次のように完全なプロトコルは以下のとおりです。"
    },
    {
      "indent": 3,
      "text": "o PAX_STD-1 : client <- server : A o PAX_STD-2 : client -> server : B, CID, MAC_CK(A, B, CID), [optional ADE] o PAX_STD-3 : client <- server : MAC_CK(B, CID), [optional ADE] o PAX-ACK : client -> server : [optional ADE]",
      "ja": "O PAX_STD-1：クライアント< - サーバー：PAX_STD-2 O A：クライアント - >サーバ：B、CID、MAC_CK（A、B、CID）、PAX_STD-3 O [オプションADE]：クライアント< - サーバ：MAC_CK（ PAX-ACK O B、CID）、[オプションADE]：クライアント - >サーバ：[オプションADE]"
    },
    {
      "indent": 3,
      "text": "See Section 2.3 for more information on the ADE component, and Section 2.4 for the key derivation process, including derivation of CK.",
      "ja": "CKの派生を含むADEコンポーネントの詳細については、セクション2.3、およびキー導出過程については、セクション2.4を参照してください。"
    },
    {
      "indent": 0,
      "text": "2.2. PAX_SEC Protocol",
      "section_title": true,
      "ja": "2.2.  PAX_SECプロト​​コル"
    },
    {
      "indent": 3,
      "text": "PAX_SEC is the high-security protocol designed to provide identity protection and support for provisioning. PAX_SEC requires a server-side public key, and public-key operations for every authentication.",
      "ja": "PAX_SECは、プロビジョニングのためのアイデンティティの保護とサポートを提供するように設計された高セキュリティプロトコルです。 PAX_SECは、すべての認証のためのサーバ側の公開鍵、および公開鍵の操作が必要です。"
    },
    {
      "indent": 3,
      "text": "PAX_SEC can be performed with and without key update. Let A, B, and E be defined as in the previous section.",
      "ja": "PAX_SECはで、キー更新せずに行うことができます。 A、B、及びEは、前のセクションのように定義することができます。"
    },
    {
      "indent": 3,
      "text": "The exchanges for PAX_SEC are as follows:",
      "ja": "次のようにPAX_SECのための交換は、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o PAX_SEC-1 : client <- server : M, PK or CertPK o PAX_SEC-2 : client -> server : Enc_PK(M, N, CID) o PAX_SEC-3 : client <- server : A, MAC_N(A, CID) o PAX_SEC-4 : client -> server : B, MAC_CK(A, B, CID), [optional ADE] o PAX_SEC-5 : client <- server : MAC_CK(B, CID), [optional ADE] o PAX-ACK : client -> server : [optional ADE]",
      "ja": "O PAX_SEC-1：クライアント< - サーバー：PAX_SEC-2 O M、PKまたはCertPK：クライアント - >サーバ：PAX_SEC-3 O Enc_PK（M、N、CID）：クライアント< - サーバ：A、MAC_N（A、CID ）PAX_SEC-4 O：クライアント - >サーバ：B、MAC_CK（A、B、CID）、[オプションADE] O PAX_SEC-5：クライアント< - サーバ：MAC_CK（B、CID）、[オプションADE] O PAX- ACK：クライアント - >サーバー：[オプションADE]"
    },
    {
      "indent": 3,
      "text": "See Section 2.3 for more information on the ADE component, and Section 2.4 for the key derivation process, including derivation of CK.",
      "ja": "CKの派生を含むADEコンポーネントの詳細については、セクション2.3、およびキー導出過程については、セクション2.4を参照してください。"
    },
    {
      "indent": 3,
      "text": "Use of CertPK is optional in PAX_SEC; however, careful consideration should be given before omitting the CertPK. The following table describes the risks involved when using PAX_SEC without a certificate.",
      "ja": "CertPKの使用はPAX_SECにオプションです。しかし、慎重な検討がCertPKを省略する前に与えられるべきです。次の表は、証明書なしPAX_SECを使用するときに伴うリスクについて説明します。"
    },
    {
      "indent": 5,
      "text": "   Certificate    |    Provisioning     |       Identity\n       Mode       |                     |      Protection\n==================+=====================+======================\n  No Certificate  |    MiTM offline     |   ID reveal attack\n                  |  dictionary attack  |\n------------------+---------------------+---------------------\n   Self-Signed    |    MiTM offline     |   ID reveal attack\n   Certificate    |  dictionary attack  |\n------------------+---------------------+---------------------\n  Certificate/PK  |    MiTM offline     |   ID reveal attack\n     Caching      |  dictionary attack  |  during first auth\n------------------+---------------------+---------------------\n    CA-Signed     |   secure mutual     |   secure mutual\n   Certificate    |   authentication    |   authentication",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 2: Table of Different Security Modes",
      "ja": "図2：異なるセキュリティモードの表"
    },
    {
      "indent": 3,
      "text": "When using PAX_SEC to support provisioning with a weak key, use of a CA-signed certificate is RECOMMENDED. When not using a CA-signed certificate, the initial authentication is vulnerable to an offline man-in-the-middle (MiTM) dictionary attack.",
      "ja": "弱いキーでプロビジョニングをサポートするためにPAX_SECを使用する場合、CA署名付き証明書の使用が推奨されます。 CA署名証明書を使用しない場合は、最初の認証は、オフラインのman-in-the-middle（MITM）辞書攻撃に対して脆弱です。"
    },
    {
      "indent": 3,
      "text": "When using PAX_SEC to support identity protection, use of either a CA-signed certificate or key caching is RECOMMENDED. Caching involves a client recording the public key of the EAP server and verifying its consistency between sessions, similar to Secure SHell (SSH) Protocol [RFC4252]. Otherwise, an attacker can spoof an EAP server during a session and gain knowledge of a client's identity.",
      "ja": "アイデンティティ保護をサポートするためにPAX_SECを使用する場合は、CA署名証明書またはキーのキャッシングのいずれかを使用することが推奨されます。キャッシングは、クライアントEAPサーバの公開鍵を記録し、シェル（SSH）プロトコル[RFC4252]を確保するために同様のセッション、間の整合性を検証することを含みます。そうしないと、攻撃者はセッション中にEAPサーバを偽装して、クライアントのアイデンティティの知識を得ることができます。"
    },
    {
      "indent": 3,
      "text": "Whenever certificates are used, clients MUST validate that the certificate's extended key usage, KeyPurposeID, is either \"eapOverPPP\" or \"eapOverLAN\" [RFC3280][RFC4334]. If the underlying EAP transport protocol is known, then the client MUST differentiate between these values. For example, an IEEE 802.11 supplicant SHOULD require KeyPurposeID == eapOverLAN. By not distinguishing, a client could accept as valid an unauthorized server certificate.",
      "ja": "証明書が使用されているときはいつでも、クライアントは証明書の拡張キー使用法、KeyPurposeIDは、いずれかの「eapOverPPP」または「eapOverLAN」[RFC3280] [RFC4334]であることを検証しなければなりません。基本的なEAPトランスポートプロトコルが知られている場合、クライアントはこれらの値を区別しなければなりません。例えば、IEEE 802.11サプリカントはKeyPurposeID == eapOverLANを要求すべきです。区別しないことにより、クライアントは有効なものとして、不正サーバ証明書を受け入れることができます。"
    },
    {
      "indent": 3,
      "text": "When using EAP-PAX with Wireless LAN, clients SHOULD validate that the certificate's wlanSSID extension matches the SSID of the network to which it is currently authenticating.",
      "ja": "無線LANでEAP-PAXを使用する場合、クライアントは、証明書のwlanSSID拡張子が現在認証されているネットワークのSSIDと一致することを検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "In order to facilitate discussion of packet validations, three client security policies for PAX_SEC are defined.",
      "ja": "パケットの検証の議論を容易にするために、PAX_SECのための3つのクライアントのセキュリティポリシーが定義されています。"
    },
    {
      "indent": 3,
      "text": "open Clients support both use of PK and CertPK. If CertPK is used, the client MUST validate the KeyPurposeID.",
      "ja": "オープンクライアントは、PKとCertPKの両方の使用をサポートしています。 CertPKを使用する場合、クライアントはKeyPurposeIDを検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "caching Clients save PK for each EAP server the first time it encounters the server, and SHOULD NOT authenticate to EAP servers whose public key has been changed. If CertPK is used, the client MUST validate the KeyPurposeID.",
      "ja": "キャッシュクライアントは、各EAPサーバは、サーバに遭遇した初めてのPKをセーブし、その公開鍵が変更されたEAPサーバへの認証をすべきではありません。 CertPKを使用する場合、クライアントはKeyPurposeIDを検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "strict In strict mode, clients require servers to present a valid certificate signed by a trusted CA. As with the other modes, the KeyPurposeID MUST be validated.",
      "ja": "strictモードで厳しい、クライアントは信頼できるCAによって署名された有効な証明書を提示するサーバーが必要他のモードと同様に、KeyPurposeIDを検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "Servers SHOULD support the PAX_SEC mode of operation, and SHOULD support both the use of PK and CertPK with PAX_SEC. Clients MUST support PAX_SEC, and MUST be capable of accepting both raw public keys and certificates from the server. Local security policy will define which forms of key or certificate authentications are permissible. Default configurations SHOULD require a minimum of the caching security policy, and MAY require strict.",
      "ja": "サーバーは操作のPAX_SECモードをサポートすべきである、とPAX_SECとのPKとCertPKの使用の両方をサポートする必要があります。クライアントはPAX_SECをサポートしなければならないし、サーバからの生公開鍵と証明書の両方を受け入れることができなければなりません。ローカルセキュリティポリシーは、鍵や証明書認証の形式が許容されるかを定義します。デフォルトの設定は、キャッシングのセキュリティポリシーの最小値を必要とすべきである、と厳格な必要な場合があります。"
    },
    {
      "indent": 3,
      "text": "The ability to perform key management on the AK is built in to EAP-PAX through the use of AK'. However, key management of the server public key is beyond the scope of this document. If self-signed certificates are used, the deployers should be aware that expired certificates may be difficult to replace when the caching security mode is used.",
      "ja": "AKに鍵管理を実行する機能を「AKを使用してEAP-PAXに内蔵されています。ただし、サーバーの公開鍵の鍵管理は、このドキュメントの範囲を超えています。自己署名証明書が使用されている場合、デプロイヤは、期限切れの証明書は、キャッシュセキュリティモードを使用する場合に置き換えることは困難であり得ることを認識すべきです。"
    },
    {
      "indent": 3,
      "text": "See Section 4 for further discussion on security considerations.",
      "ja": "セキュリティの考慮事項についてさらなる議論については、セクション4を参照してください。"
    },
    {
      "indent": 0,
      "text": "2.3. Authenticated Data Exchange",
      "section_title": true,
      "ja": "2.3. 認証されたデータ交換"
    },
    {
      "indent": 3,
      "text": "Messages PAX_STD-2, PAX_STD-3, PAX_SEC-4, PAX_SEC-5, and PAX_ACK contain optional component ADE. This component is used to convey authenticated data between the client and server during the authentication.",
      "ja": "メッセージPAX_STD-2、PAX_STD-3、PAX_SEC-4、PAX_SEC-5、及びPAX_ACKは任意成分のADEを含みます。このコンポーネントは、認証時に、クライアントとサーバの間で認証されたデータを伝達するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The Authenticated Data Exchanged (ADE) can be used in a variety of ways, including the implementation of channel bindings. Channel bindings allow link-layer network properties to be securely validated by the EAP client and server during the authentication session.",
      "ja": "交換し認証されたデータ（ADE）は、チャネルバインディングの実装を含む様々な方法で使用することができます。チャネルバインディングは、リンク層ネットワークのプロパティがしっかり認証セッション中にEAPクライアントとサーバによって検証することができます。"
    },
    {
      "indent": 3,
      "text": "It is important to note that ADE is not encrypted, so any data included will not be confidential. However, since these packets are all protected by the Integrity Check Value (ICV), authenticity is guaranteed.",
      "ja": "ADEが暗号化されていないため、含まれるすべてのデータが機密ではないことに注意することが重要です。これらのパケットはすべて完全性により保護されているので、値（ICV）を確認し、信頼性が保証されています。"
    },
    {
      "indent": 3,
      "text": "The ADE element consists of an arbitrary number of subelements, each with length and type specified. If the number and size of subelements is too large, packet fragmentation will be necessary. Vendor-specific options are supported. See Section 3.3.",
      "ja": "ADE要素は、サブ要素、指定された長さおよびタイプを有するそれぞれの任意の数で構成されています。サブ要素の数とサイズが大きすぎる場合は、パケットの断片化が必要となります。ベンダー固有のオプションがサポートされています。 3.3節を参照してください。"
    },
    {
      "indent": 3,
      "text": "Note that more than 1.5 round-trips may be necessary to execute a particular authenticated protocol within EAP-PAX. In this case, instead of sending an EAP-Success after receiving the PAX_ACK, the server can continue sending PAX_ACK messages with attached elements. The client responds to these PAX_ACK messages with PAX_ACK messages possibly containing more ADE elements. Such an execution could look something like the following:",
      "ja": "以上1.5ラウンドトリップがEAP-PAX内の特定の認証プロトコルを実行する必要があるかもしれないことに留意されたいです。この場合は、代わりにPAX_ACKを受けた後にEAP-成功を送信すると、サーバーは接続要素とPAX_ACKメッセージを送り続けることができます。クライアントは、おそらくより多くのADE要素を含むPAX_ACKメッセージでこれらPAX_ACKメッセージに応答します。このような実行は、次のようになります："
    },
    {
      "indent": 8,
      "text": "+--------+                                     +--------+\n|        |                           PAX_STD-1 |        |\n|        |<------------------------------------|        |\n|        | PAX_STD-2(ADE[1])                   |        |\n|        |------------------------------------>|        |\n|        |                   PAX_STD-3(ADE[2]) |        |\n|        |<------------------------------------|        |\n|        | PAX_ACK(ADE[3])                     |        |\n|        |------------------------------------>|        |\n|        |                     PAX_ACK(ADE[4]) |        |\n|        |<------------------------------------|        |\n|        |                                     |        |\n|        |                 ...                 |        |\n|        |                                     |        |\n|        | PAX_ACK(ADE[i])                     |        |\n|        |------------------------------------>|        |\n|        |                   PAX_ACK(ADE[i+1]) |        |\n|        |<------------------------------------|        |\n|        |                                     |        |\n|        |                 ...                 |        |\n|        |                                     |        |\n|        |          EAP-Success or EAP-Failure |        |\n|        |<------------------------------------|        |\n+--------+                                     +--------+",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 3: Extended Diagram of EAP-PAX Packet Exchanges",
      "ja": "図3：EAP-PAXパケット交換の拡張ダイアグラム"
    },
    {
      "indent": 0,
      "text": "2.4. Key Derivation",
      "section_title": true,
      "ja": "2.4. 鍵の導出"
    },
    {
      "indent": 3,
      "text": "Keys are derived independently of which authentication mechanism was used. The process uses the entropy value E computed as described above. Session and authentication keys are computed as follows:",
      "ja": "キーは、独立して使用した認証メカニズムの誘導されます。プロセスは、上記のように計算されたエントロピー値Eを使用します。次のようにセッションと認証キーが計算されます。"
    },
    {
      "indent": 3,
      "text": "o AK' = PAX-KDF-16(AK, \"Authentication Key\", E) o MK = PAX-KDF-16(AK, \"Master Key\", E) o CK = PAX-KDF-16(MK, \"Confirmation Key\", E) o ICK = PAX-KDF-16(MK, \"Integrity Check Key\", E) o MID = PAX-KDF-16(MK, \"Method ID\", E) o MSK = PAX-KDF-64(MK, \"Master Session Key\", E) o EMSK = PAX-KDF-64(MK, \"Extended Master Session Key\", E) o IV = PAX-KDF-64(0x00^16, \"Initialization Vector\", E)",
      "ja": "O AK」= PAX-KDF-16（AK、 \"認証キー\"、E）O MK = PAX-KDF-16（AK、 \"マスターキー\"、E）O CK = PAX-KDF-16（MK、「確認MSK = PAX-KDF-64 OメソッドID \"E） \"MID = PAX-KDF-16（MK、O、E）を\" キー」、E）O ICK = PAX-KDF-16（MK、\" 整合性がキーをチェック（MK、 \"マスターセッションキー\"、E）O EMSK = PAX-KDF-64（MK、 \"拡張マスターセッションキー\"、Eは）IV 0 = PAX-KDF-64（$ 00 ^ 16、 \"初期化ベクトル\"、E ）"
    },
    {
      "indent": 3,
      "text": "The IV is computed using a 16-octet NULL key. The value of AK' is only used to replace AK if a key update is being performed. The EAP Method ID is represented in ASCII as 32 hexadecimal characters without any octet delimiters such as colons or dashes.",
      "ja": "IVは、16オクテットのNULLキーを使用して計算されます。 AK」の値は唯一の鍵の更新が実行されている場合はAKを置き換えるために使用されます。 EAPメソッドIDは、コロンまたはダッシュなどの任意のオクテットの区切り文字なしの32進数文字としてASCIIで表されています。"
    },
    {
      "indent": 3,
      "text": "The EAP Key Management Framework [IETF.KEY] recommends specification of key names and scope. The EAP-PAX Method-ID is the MID value computed as described above. The EAP peer name is the CID value exchanged in PAX_STD-2 and PAX_SEC-2. The EAP server name is an empty string.",
      "ja": "EAP鍵管理フレームワーク[IETF.KEY]キーの名前と範囲の仕様を推奨しています。 EAP-PAX方法-IDは、上述したように計算されたMID値です。 EAPピア名PAX_STD-2及びPAX_SEC-2で交換CID値です。 EAPサーバ名が空の文字列です。"
    },
    {
      "indent": 0,
      "text": "2.5. Verification Requirements",
      "section_title": true,
      "ja": "2.5. 検証の要件"
    },
    {
      "indent": 3,
      "text": "In order for EAP-PAX to be secure, MACs must be properly verified each step of the way. Any packet with an ICV (see Section 3.4) that fails validation must be silently discarded. After ICV validation, the following checks must be performed:",
      "ja": "EAP-PAXは安全であるために、MACは適切な方法の各ステップを検証しなければなりません。検証は黙って廃棄しなければならない障害が発生したICVと任意のパケット（セクション3.4を参照してください）。 ICV検証した後、以下のチェックを実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "PAX_STD-2 The server MUST validate the included MAC, as it serves to authenticate the client to the server. If this validation fails, the server MUST send an EAP-Failure message.",
      "ja": "それは、サーバーへのクライアントを認証するのに役立つようPAX_STD-2サーバは、含まれるMACを検証する必要があります。この検証が失敗した場合、サーバーは、EAP失敗メッセージを送らなければなりません。"
    },
    {
      "indent": 3,
      "text": "PAX_STD-3 The client MUST validate the included MAC, as it serves to authenticate the server to the client. If this validation fails, the client MUST send an EAP-Failure message.",
      "ja": "それはクライアントにサーバを認証するのに役立つようPAX_STD-3クライアントは、含まれるMACを検証する必要があります。この検証が失敗した場合、クライアントは、EAP失敗メッセージを送らなければなりません。"
    },
    {
      "indent": 3,
      "text": "PAX_SEC-1 The client MUST validate PK or CertPK in a manner specified by its local security policy (see Section 2.2). If this validation fails, the client MUST send an EAP-Failure message.",
      "ja": "PAX_SEC-1のローカルセキュリティポリシーで指定された方法で、PKやCertPKを検証しなければならないクライアント（2.2節を参照してください）。この検証が失敗した場合、クライアントは、EAP失敗メッセージを送らなければなりません。"
    },
    {
      "indent": 3,
      "text": "PAX_SEC-2 The server MUST verify that the decrypted value of M matches the value transmitted in PAX_SEC-1. If this validation fails, the server MUST send an EAP-Failure message.",
      "ja": "PAX_SEC-2サーバは、M個の復号化された値はPAX_SEC-1で送信された値と一致することを確認しなければなりません。この検証が失敗した場合、サーバーは、EAP失敗メッセージを送らなければなりません。"
    },
    {
      "indent": 3,
      "text": "PAX_SEC-3 The client MUST validate the included MAC, as it serves to prevent replay attacks. If this validation fails, the client MUST send an EAP-Failure message.",
      "ja": "それはリプレイ攻撃を防ぐのに役立つようPAX_SEC-3クライアントは、含まれるMACを検証する必要があります。この検証が失敗した場合、クライアントは、EAP失敗メッセージを送らなければなりません。"
    },
    {
      "indent": 3,
      "text": "PAX_SEC-4 The server MUST validate the included MAC, as it serves to authenticate the client to the server. If this validation fails, the server MUST send an EAP-Failure message.",
      "ja": "それは、サーバーへのクライアントを認証するのに役立つようPAX_SEC-4サーバーは、含まれるMACを検証する必要があります。この検証が失敗した場合、サーバーは、EAP失敗メッセージを送らなければなりません。"
    },
    {
      "indent": 3,
      "text": "PAX_SEC-5 The client MUST validate the included MAC, as it serves to authenticate the server to the client. If this validation fails, the client MUST send an EAP-Failure message.",
      "ja": "それはクライアントにサーバを認証するのに役立つようPAX_SEC-5クライアントは、含まれるMACを検証する必要があります。この検証が失敗した場合、クライアントは、EAP失敗メッセージを送らなければなりません。"
    },
    {
      "indent": 3,
      "text": "PAX-ACK If PAX-ACK is received in response to a message fragment, the receiver continues the protocol execution. If PAX-ACK is received in response to PAX_STD-3 or PAX_SEC-5, then the server MUST send an EAP-Success message. This indicates a successful execution of PAX.",
      "ja": "PAX-ACKメッセージフラグメントに応答して受信されるPAX-ACK場合、受信機はプロトコルの実行を継続します。 PAX-ACKがPAX_STD-3またはPAX_SEC-5に応答して受信された場合、サーバーは、EAP-Successメッセージを送らなければなりません。これはPAXの実行が成功を示しています。"
    },
    {
      "indent": 0,
      "text": "2.6. PAX Key Derivation Function",
      "section_title": true,
      "ja": "2.6.  PAX鍵導出関数"
    },
    {
      "indent": 3,
      "text": "The PAX-KDF is a secure key derivation function used to generate various keys from the provided entropy and shared key.",
      "ja": "PAX-KDFを提供エントロピーと共有鍵からの各種キーを生成するために使用される安全な鍵導出関数です。"
    },
    {
      "indent": 3,
      "text": "PAX-KDF-W(X, Y, Z)",
      "ja": "PAX-KDF-W（X、Y、Z）"
    },
    {
      "indent": 3,
      "text": "W length, in octets, of the desired output X secret key used to protect the computation Y public identifier for the key being derived Z exchanged entropy used to seed the KDF",
      "ja": "Wの長さは、オクテット単位で、所望の出力のX秘密鍵はKDFを播種するために使用Z交換エントロピーを導出される鍵の計算Y公開識別子を保護するために使用します"
    },
    {
      "indent": 3,
      "text": "Let's define some variables and functions:",
      "ja": "のは、いくつかの変数と関数を定義してみましょう："
    },
    {
      "indent": 3,
      "text": "o M_i = MAC_X(Y || Z || i), where i is an 8-bit unsigned integer o L = ceiling(W/16) o F(A, B) = first A octets of binary data B",
      "ja": "iがL O 8ビットの符号なし整数である= F（A、B）O天井（W / 16）第1の2値データBのオクテット= O M_I = MAC_X（Y || Z || I）、"
    },
    {
      "indent": 3,
      "text": "We define PAX-KDF-W(X, Y, Z) = F(W, M_1 || M_2 || ... || M_L).",
      "ja": "我々は、PAX-KDF-W（X、Y、Z）= Fを（W、M_1 || M_2 || ... || M_L）を定義します。"
    },
    {
      "indent": 3,
      "text": "Consequently for the two values of W used in this document, we have:",
      "ja": "結果的にこの文書で使用さWの二つの値のために、我々は持っています："
    },
    {
      "indent": 3,
      "text": "o PAX-KDF-16(X, Y, Z) = MAC_X(Y || Z || 0x01) o PAX-KDF-64(X, Y, Z) = MAC_X(Y || Z || 0x01) || MAC_X(Y || Z || 0x02) || MAC_X(Y || Z || 0x03) || MAC_X(Y || Z || 0x04)",
      "ja": "O PAX-KDF-16（X、Y、Z）= MAC_X（Y || Z || 0x01の）PAX-KDF-64（X、Y、Z）= MAC_X O（Y || Z || 0x01の）|| MAC_X（Y || Z || 0x02の）|| MAC_X（Y || Z || 0x03の）|| MAC_X（Y || Z || 0x04の）"
    },
    {
      "indent": 3,
      "text": "The MAC used in the PRF is extensible and is the same MAC used in the rest of the protocol. It is specified in the EAP-PAX header.",
      "ja": "PRFで使用されるMACは、拡張可能であり、同じMACプロトコルの残りの部分に使用されます。これはEAP-PAXヘッダで指定されています。"
    },
    {
      "indent": 0,
      "text": "3. Protocol Specification",
      "section_title": true,
      "ja": "3.プロトコル仕様"
    },
    {
      "indent": 3,
      "text": "In this section, the packet format and content for the EAP-PAX messages are defined.",
      "ja": "このセクションでは、EAP-PAXメッセージのパケットフォーマットと内容が定義されています。"
    },
    {
      "indent": 3,
      "text": "EAP-PAX packets have the following structure:",
      "ja": "EAP-PAXパケットは、以下の構造を有します："
    },
    {
      "indent": 4,
      "text": "--- bit offset --->\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     Code      |  Identifier   |            Length             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     Type      |    OP-Code    |     Flags     |    MAC ID     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  DH Group ID  | Public Key ID |                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n|                                                               |\n...                         Payload                           ...\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n...                           ICV                             ...\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 4: EAP-PAX Packet Structure",
      "ja": "図4：EAP-PAXのパケット構造"
    },
    {
      "indent": 0,
      "text": "3.1. Header Specification",
      "section_title": true,
      "ja": "3.1. ヘッダーの仕様"
    },
    {
      "indent": 3,
      "text": "The Code, Identifier, Length, and Type fields are all part of the EAP header, and defined in [RFC3748]. IANA has allocated EAP Method Type 46 for EAP-PAX; thus, the Type field in the EAP header MUST be 46.",
      "ja": "コード、識別子、長さ、タイプフィールドはEAPヘッダーのすべての部分であり、[RFC3748]で定義されます。 IANAはEAP-PAXのためにEAPメソッドタイプ46を割り当てました。従って、EAPヘッダーのタイプフィールドが46でなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.1.1. Op-Code",
      "section_title": true,
      "ja": "3.1.1. オンコード"
    },
    {
      "indent": 3,
      "text": "The OP-Code field is one of the following values:",
      "ja": "OP-Codeフィールドには、次のいずれかの値です。"
    },
    {
      "indent": 3,
      "text": "o 0x01 : PAX_STD-1 o 0x02 : PAX_STD-2 o 0x03 : PAX_STD-3 o 0x11 : PAX_SEC-1 o 0x12 : PAX_SEC-2 o 0x13 : PAX_SEC-3 o 0x14 : PAX_SEC-4 o 0x15 : PAX_SEC-5 o 0x21 : PAX-ACK",
      "ja": "Oは0x01：PAX_STD-1 O 0×02：PAX_STD-2 O 0×03：PAX_STD-3 O 0x11を：PAX_SEC-1 O 0x12を：PAX_SEC-2 O 0x13に：PAX_SEC-3 O 0x14の：PAX_SEC-4 O 0x15の：PAX_SEC-5 O 0x21で：PAX-ACK"
    },
    {
      "indent": 0,
      "text": "3.1.2. Flags",
      "section_title": true,
      "ja": "3.1.2. 国旗"
    },
    {
      "indent": 3,
      "text": "The flags field is broken up into 8 bits each representing a binary flag. The field is defined as the Logical OR of the following values:",
      "ja": "フラグフィールドは、バイナリフラグを表す8ビットずつに分割されています。フィールドは論理としてOR以下の値で定義されています。"
    },
    {
      "indent": 3,
      "text": "o 0x01 : more fragments (MF) o 0x02 : certificate enabled (CE) o 0x04 : ADE Included (AI) o 0x08 - 0x80 : reserved",
      "ja": "0x01のO：複数の断片0x02のO（MF）：証明書（CE）が有効O 0x04の：ADEが含まれて（AI）は、O 0x08に -  0x80から：予約します"
    },
    {
      "indent": 3,
      "text": "The MF flag is set if the current packet required fragmentation, and further fragments need to be transmitted. If a packet does not require fragmentation, the MF flag is not set.",
      "ja": "現在のパケットが断片化を必要に応じて、MFフラグがセットされ、さらにフラグメントが送信される必要があります。パケットが断片化を必要としない場合は、MFフラグが設定されていません。"
    },
    {
      "indent": 3,
      "text": "When a payload requires fragmentation, each fragment is transmitted, and the receiving party responds with a PAX-ACK packet for each received fragment.",
      "ja": "ペイロードがフラグメント化を必要とするとき、各フラグメントが送信され、受信側は受信した各断片用PAX-ACKパケットで応答します。"
    },
    {
      "indent": 3,
      "text": "When using PAX_STD, the CE flag MUST be zero. When using PAX_SEC, the CE flag MUST be set if PAX_SEC-1 includes CertPK. It MUST NOT be set if PAX_SEC-1 includes PK. If CE is set in PAX_SEC-1, it MUST be set in PAX_SEC-2, PAX_SEC-3, PAX_SEC-4, and PAX_SEC-5. If either party detects an inconsistent value of the CE flag, he MUST send an EAP-Failure message and discontinue the session.",
      "ja": "PAX_STDを使用する場合、CEフラグがゼロでなければなりません。 PAX_SECを使用する場合PAX_SEC-1はCertPKを含む場合、CEフラグを設定しなければなりません。 PAX_SEC-1は、PKが含まれている場合は設定してはいけません。 CEはPAX_SEC-1に設定されている場合、それはPAX_SEC-2、PAX_SEC-3、PAX_SEC-4、およびPAX_SEC-5に設定されなければなりません。いずれかの当事者は、CEフラグの一貫性のない値を検出した場合、彼はEAP失敗メッセージを送信し、セッションを中止しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The AI flag indicates the presence of an ADE element. AI MUST only be set on packets PAX_STD-2, PAX_STD-3, PAX_SEC-4, PAX_SEC-5, and PAX_ACK if an ADE element is included. On packets of other types, ADE elements MUST be silently discarded as they cannot be authenticated.",
      "ja": "AIフラグがADE要素の存在を示します。 ADE要素が含まれている場合AIのみパケットPAX_STD-2、PAX_STD-3、PAX_SEC-4、PAX_SEC-5、及びPAX_ACKに設定しなければなりません。彼らは認証できないように、他のタイプのパケットには、ADE要素は黙って捨てなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.1.3. MAC ID",
      "section_title": true,
      "ja": "3.1.3.  MAC ID"
    },
    {
      "indent": 3,
      "text": "The MAC field specifies the cryptographic hash used to generate the keyed hash value. The following are currently supported:",
      "ja": "MACフィールドは、鍵付きハッシュ値を生成するために使用される暗号化ハッシュを指定します。以下は、現在サポートされています。"
    },
    {
      "indent": 3,
      "text": "o 0x01 : HMAC_SHA1_128 [FIPS198] [FIPS180] o 0x02 : HMAC_SHA256_128 [FIPS180]",
      "ja": "Oは0x01：0x02のO HMAC_SHA1_128 [FIPS198] [FIPS180]：HMAC_SHA256_128 [FIPS180]"
    },
    {
      "indent": 0,
      "text": "3.1.4. DH Group ID",
      "section_title": true,
      "ja": "3.1.4.  DHグループID"
    },
    {
      "indent": 3,
      "text": "The Diffie-Hellman group field specifies the group used in the Diffie-Hellman computations. The following are currently supported: o 0x00 : NONE (iff not performing a key update) o 0x01 : 2048-bit MODP Group (IANA DH Group 14) [RFC3526] o 0x02 : 3072-bit MODP Group (IANA DH Group 15) [RFC3526] o 0x03 : NIST ECC Group P-256 [FIPS186]",
      "ja": "Diffie-Hellmanグループフィールドは、のDiffie-Hellman計算に使用されるグループを特定します。現在サポートされている以下：0x00のO：NONE 0x01のO（鍵更新を行っていないIFF）：2048ビットMODPグループ（IANA DHグループ14）[RFC3526] O 0×02：3072ビットMODPグループ（IANA DHグループ15）[ RFC3526] 0x03のO：NIST ECCグループP-256 [FIPS186]"
    },
    {
      "indent": 3,
      "text": "If no key update is being performed, the DH Group ID field MUST be zero. Otherwise, the DH Group ID field MUST NOT be zero.",
      "ja": "何のキー更新が実行されていない場合は、DHグループIDフィールドはゼロでなければなりません。それ以外の場合は、DHグループIDフィールドはゼロであるはずがありません。"
    },
    {
      "indent": 0,
      "text": "3.1.5. Public Key ID",
      "section_title": true,
      "ja": "3.1.5. 公開鍵ID"
    },
    {
      "indent": 3,
      "text": "The Public Key ID field specifies the cipher used to encrypt the client's EAP-Response in PAX_SEC-2.",
      "ja": "公開鍵IDフィールドはPAX_SEC-2で、クライアントのEAP-応答を暗号化するために使用される暗号を指定します。"
    },
    {
      "indent": 3,
      "text": "The following are currently supported:",
      "ja": "以下は、現在サポートされています。"
    },
    {
      "indent": 3,
      "text": "o 0x00 : NONE (if using PAX_STD) o 0x01 : RSAES-OAEP [RFC3447] o 0x02 : RSA-PKCS1-V1_5 [RFC3447] o 0x03 : El-Gamal Over NIST ECC Group P-256 [FIPS186]",
      "ja": "Oは0x00：NONE（PAX_STDを使用している場合）Oが0x01：RSAES-OAEP [RFC3447] 0x02のO：RSA-PKCS1-v1_5の[RFC3447] O 0×03：エル・ガマル以上NIST ECCグループP-256 [FIPS186]"
    },
    {
      "indent": 3,
      "text": "If PAX_STD is being executed, the Public Key ID field MUST be zero. If PAX_SEC is being executed, the Public Key ID field MUST NOT be zero.",
      "ja": "PAX_STDが実行されている場合は、公開鍵IDフィールドはゼロでなければなりません。 PAX_SECが実行されている場合は、公開鍵IDフィールドはゼロであるはずがありません。"
    },
    {
      "indent": 3,
      "text": "When using RSAES-OAEP, the hash algorithm and mask generation algorithm used SHALL be the MAC specified by the MAC ID, keyed using an all-zero key. The label SHALL be null.",
      "ja": "RSAES-OAEPを使用する場合、使用されるハッシュアルゴリズムとマスク生成アルゴリズムは、すべてゼロのキーを使用してキー入力MAC IDによって指定されたMACでなければなりません。ラベルはnullにされなければなりません。"
    },
    {
      "indent": 3,
      "text": "The RSA-based schemes specified here do not dictate the length of the public keys. DER encoding rules will specify the key size in the key or certificate [X.690]. Key sizes SHOULD be used that reflect the desired level of security.",
      "ja": "ここで指定したRSAベースのスキームは、公開鍵の長さを決定していません。 DERエンコーディング規則は、キーまたは証明書[X.690]にキーサイズを指定します。キーサイズは、セキュリティの所望のレベルを反映している、使用されてください。"
    },
    {
      "indent": 0,
      "text": "3.1.6. Mandatory to Implement",
      "section_title": true,
      "ja": "3.1.6. 実装するには必須"
    },
    {
      "indent": 3,
      "text": "The following ciphersuite is mandatory to implement and achieves roughly 112 bits of security:",
      "ja": "次の暗号スイートを実装するために必須であり、セキュリティの約112ビットを達成します。"
    },
    {
      "indent": 3,
      "text": "o HMAC_SHA1_128 o IANA DH Group 14 (2048 bits) o RSA-PKCS1-V1_5 (RECOMMEND 2048-bit public key)",
      "ja": "O HMAC_SHA1_128 O IANA DHグループRSA-PKCS1-v1_5のO 14（2048ビット）（2048ビットの公開鍵を勧め）"
    },
    {
      "indent": 3,
      "text": "The following ciphersuite is RECOMMENDED and achieves 128 bits of security:",
      "ja": "次の暗号スイートが推奨およびセキュリティの128ビットを達成しています。"
    },
    {
      "indent": 3,
      "text": "o HMAC_SHA256_128 o IANA DH Group 15 (3072 bits) o RSAES-OAEP (RECOMMEND 3072-bit public key)",
      "ja": "RSAES-OAEP（3072ビットの公開鍵を勧め）O O IANA DH O群HMAC_SHA256_128 15（3072ビット）"
    },
    {
      "indent": 0,
      "text": "3.2. Payload Formatting",
      "section_title": true,
      "ja": "3.2. ペイロードのフォーマット"
    },
    {
      "indent": 3,
      "text": "This section describes how to format the payload field. Depending on the packet type, different values are transmitted. Sections 2.1 and 2.2 define the fields, and in what order they are to be concatenated. For simplicity and since many field lengths can vary with the ciphersuite, each value is prepended with a 2-octet length value encoded as an integer as described below. This length field MUST equal the length in octets of the subsequent value field.",
      "ja": "このセクションでは、ペイロードフィールドの書式を設定する方法について説明します。パケットの種類に応じて、異なる値が送信されます。セクション2.1と2.2は、フィールドを定義し、どのような順序でそれらを連結することになっています。簡単にするために、多くのフィールド長は、暗号スイートを用いて変えることができるので、各値は、以下に記載されるように整数としてエンコード2オクテットの長さの値と付加されています。この長さフィールドは、後続の値フィールドのオクテットの長さを等しくなければなりません。"
    },
    {
      "indent": 14,
      "text": "--- octet offset --->\n 0                   1\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n+---+---------------------\n|len|  value ....\n+---+--------",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 5: Length Encoding for Data Elements",
      "ja": "図5：データ要素のためのレングス符号化"
    },
    {
      "indent": 3,
      "text": "All integer values are stored as octet arrays in network-byte order, with the most significant octet first. Integers are padded on the most significant end to reach octet boundaries.",
      "ja": "すべての整数値は、最初の最も重要なオクテットと、ネットワークバイト順のオクテット配列として格納されています。整数はオクテット境界に到達するために最も重要な先端に埋め込まれます。"
    },
    {
      "indent": 3,
      "text": "Public keys and certificates SHALL be in X.509 format [RFC3280] encoded using the Distinguished Encoding Rules (DER) format [X.690].",
      "ja": "公開鍵および証明書は、識別符号化規則（DER）フォーマット[X.690]を使用して符号化X.509形式[RFC3280]でなければなりません。"
    },
    {
      "indent": 3,
      "text": "Strings are not null-terminated and are encoded using UTF-8. Binary data, such as message authentication codes, are transmitted as-is.",
      "ja": "文字列は、NULLで終了ではなく、UTF-8を使用してエンコードされています。そのようなメッセージ認証コードなどのバイナリデータは、そのままで送信されます。"
    },
    {
      "indent": 3,
      "text": "MACs are computed by concatenating the specified values in the specified order. Note that for MACs, length fields are not included, though the resulting MAC will itself have a length field. Values are encoded as described above, except that no length field is specified.",
      "ja": "MACは、指定された順序で指定された値を連結することによって計算されます。結果としてMAC自体が長さフィールドを持っているでしょうが、Mac用、長さフィールドが含まれていないことに注意してください。いかなる長さフィールドが指定されていないことを除いて、上記のように値が符号化されます。"
    },
    {
      "indent": 3,
      "text": "To illustrate this process, an example is presented. What follows is the encoding of the payload for PAX_STD-2. The three basic steps will be computing the MAC, forming the payload, and encrypting the payload.",
      "ja": "このプロセスを説明するために、例が提示されます。以下はPAX_STD-2のペイロードのエンコーディングです。三つの基本的な手順は、MACを計算するペイロードを形成し、ペイロードを暗号化します。"
    },
    {
      "indent": 3,
      "text": "To create the MAC, we first need to form the buffer that will be MACed. For this example, assume that no key update is being done and HMAC_SHA1_128 is used such that the result will be a 16-octet value.",
      "ja": "MACを作成するには、まずMACedされるバッファを形成する必要があります。この例では、何の鍵更新が行わされていないとHMAC_SHA1_128結果は、16オクテットの値となるように使用されると仮定する。"
    },
    {
      "indent": 3,
      "text": "--- octet offset --->\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       32-octet integer A                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       32-octet integer B                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n...                    variable length CID                    ...\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 11,
      "text": "       ||\n       ||\nCK --> MAC\n       ||\n       \\/",
      "raw": true
    },
    {
      "indent": 3,
      "text": "--- octet offset --->\n 0                   1\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|      16-octet MAC output      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 6: Example Encoding of PAX_STD-2 MAC Data",
      "ja": "図6：PAX_STD-2 MACデータの例エンコード"
    },
    {
      "indent": 3,
      "text": "With this, we can now create the encoded payload:",
      "ja": "これにより、我々は今、エンコードされたペイロードを作成することができます。"
    },
    {
      "indent": 3,
      "text": "--- octet offset --->\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|32 |                     32-octet integer B\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    | L |                                                       |\n+-+-+-+-+                                                       +\n|                                                               |\n...                        L-octet CID                        ...\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|16 |       MAC computed above      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 7: Example Encoding of PAX_STD-2 Packet",
      "ja": "図7：PAX_STD-2パケットの例エンコード"
    },
    {
      "indent": 3,
      "text": "These 52+L octets are then attached to the packet as the payload. The ICV is then computed by MACing the packet headers and payload, and appended after the payload (see Section 3.4).",
      "ja": "これら52個の+ Lオクテットは、その後、ペイロードとしてパケットに付与されています。 ICVは、パケットヘッダとペイロードをMACingによって計算され、ペイロードの後に​​添付される（セクション3.4参照）。"
    },
    {
      "indent": 0,
      "text": "3.3. Authenticated Data Exchange (ADE)",
      "section_title": true,
      "ja": "3.3. 認証されたデータ交換（ADE）"
    },
    {
      "indent": 3,
      "text": "This section describes the formatting of the ADE elements. ADE elements can only occur on packets of type PAX_STD-2, PAX_STD-3, PAX_SEC-4, PAX_SEC-5, and PAX_ACK. Values included in other packets MUST be silently ignored.",
      "ja": "このセクションでは、ADE要素の書式設定を説明します。 ADE要素は、型PAX_STD-2、PAX_STD-3、PAX_SEC-4、PAX_SEC-5、及びPAX_ACKのパケットで発生することができます。他のパケットに含まれる値は黙って無視しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The ADE element is preceded by its 2-octet length L. Each subelement has first a 2-octet length Li followed by a 2-octet type Ti. The entire ADE element looks as follows:",
      "ja": "ADE要素は、各サブエレメントは、Li 2オクテットのタイプのTi、続いて第2オクテットの長さを有し、その2オクテットの長さLが先行します。次のように全体ADE要素が見えます："
    },
    {
      "indent": 3,
      "text": "--- octet offset --->\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| L |L1 |T1 |                                                   |\n+-+-+-+-+-+-+                                                   +\n|                                                               |\n...                 subADE-1, type T1, length L1              ...\n|                                                               |\n+                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                   |L2 |T2 |                                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                                   +\n|                                                               |\n...                 subADE-2, type T2, length L2              ...\n|                                                               |\n+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|         | more subADE elements...                           ...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 8: Encoding of ADE Components",
      "ja": "図8：ADEコンポーネントのエンコード"
    },
    {
      "indent": 3,
      "text": "The following type values have been allocated:",
      "ja": "以下のタイプの値が割り当てられています："
    },
    {
      "indent": 3,
      "text": "o 0x01 : Vendor Specific o 0x02 : Client Channel Binding Data o 0x03 : Server Channel Binding Data",
      "ja": "Oが0x01：0x02のOベンダー固有：クライアントチャンネルが0x03のOデータバインディング：サーバーチャンネルのデータのバインド"
    },
    {
      "indent": 3,
      "text": "The first three octets of a subADE utilizing type code 0x01 must be the vendor's Enterprise Number [RFC3232] as registered with IANA. The format for such a subADE is as follows:",
      "ja": "IANAに登録されているようなタイプのコードは0x01を利用subADEの最初の3つのオクテットは、ベンダーのエンタープライズ番号[RFC3232]でなければなりません。以下のようなsubADEの形式は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "--- octet offset --->\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Li | 1 | ENi |                                                 |\n+-+-+-+-+-+-+-+                                                 +\n|                                                               |\n...   subADE-i, type Vendor Specific, length Li, vendor ENi  ...\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 9: Encoding of Vendor-specific ADE",
      "ja": "図9：ベンダー固有ADEのエンコーディング"
    },
    {
      "indent": 3,
      "text": "Channel binding subADEs have yet to be defined. Future IETF documents will specify the format for these subADE fields.",
      "ja": "チャネル結合subADEsが定義されていません。今後のIETF文書は、これらのsubADEフィールドの形式を指定します。"
    },
    {
      "indent": 0,
      "text": "3.4. Integrity Check Value (ICV)",
      "section_title": true,
      "ja": "3.4. 整合性チェック値（ICV）"
    },
    {
      "indent": 3,
      "text": "The ICV is computed as the MAC over the entire EAP packet, including the EAP header, the EAP-PAX header, and the EAP-PAX payload. The MAC is keyed using the 16-octet ICK, using the MAC type specified by the MAC ID in the EAP-PAX header. For packets of type PAX_STD-1, PAX_SEC-1, PAX_SEC-2, and PAX_SEC-3, where the MK has not yet been derived, the MAC is keyed using a zero-octet NULL key.",
      "ja": "ICVは、EAPヘッダ、EAP-PAXヘッダ、及びEAP-PAXのペイロードを含む全体のEAPパケット上MACとして計算されます。 MACはEAP-PAXヘッダ内のMAC IDによって指定されたMACタイプを使用して、16オクテットICKを使用してキー止めされています。 MKはまだ得られていないタイプPAX_STD-1、PAX_SEC-1、PAX_SEC-2、及びPAX_SEC-3のパケットのために、MACは、ゼロオクテットNULLキーを用いてキー止めされています。"
    },
    {
      "indent": 3,
      "text": "If the ICV field is incorrect, the receiver MUST silently discard the packet.",
      "ja": "ICVフィールドが正しくない場合、受信機は静かにパケットを捨てなければなりません。"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "Any authentication protocol, especially one geared for wireless environments, must assume that adversaries have many capabilities. In general, one must assume that all messages between the client and server are delivered via the adversary. This allows passive attackers to eavesdrop on all traffic, while active attackers can modify data in any way before delivery.",
      "ja": "任意の認証プロトコル、ワイヤレス環境のために連動特に1は、敵は、多くの機能を持っていることを前提としなければなりません。一般的に、1は、クライアントとサーバー間のすべてのメッセージが敵を介して配信されていることを前提としなければなりません。これは、アクティブな攻撃者が出荷前にどのような方法でデータを変更することができますが、受動攻撃者は、すべてのトラフィックを盗聴することができます。"
    },
    {
      "indent": 3,
      "text": "In this section, we discuss the security properties and requirements of EAP-PAX with respect to this threat model. Also note that the security of PAX can be proved using under the Random Oracle model.",
      "ja": "このセクションでは、この脅威モデルに対するセキュリティプロパティおよびEAP-PAXの要件を議論します。また、PAXのセキュリティはランダムオラクルモデルの下で使用して証明することができることに注意してください。"
    },
    {
      "indent": 0,
      "text": "4.1. Server Certificates",
      "section_title": true,
      "ja": "4.1. サーバー証明書"
    },
    {
      "indent": 3,
      "text": "PAX_SEC can be used in several configurations. It can be used with or without a server-side certificate. Section 2.2 details the possible modes and the resulting security risk.",
      "ja": "PAX_SECは、いくつかの構成で使用することができます。これは、サーバー側の証明書の有無にかかわらず使用することができます。 2.2節は、可能なモードと結果のセキュリティリスクを詳述します。"
    },
    {
      "indent": 3,
      "text": "When using PAX_SEC for identity protection and not using a CA-signed certificate, an attacker can convince a client to reveal his username. To achieve this, an attacker can simply forge a PAX_SEC-1 message and send it to the client. The client would respond with a PAX_SEC-2 message containing his encrypted username. The attacker can then use his associated private key to decrypt the client's username. Use of key caching can reduce the risk of identity revelation by allowing clients to detect when the EAP server to which they are accustom has a different public key.",
      "ja": "CA署名証明書を使用して、ID保護のためPAX_SECを使用していない場合は、攻撃者が彼の名を明らかにし、クライアントを説得することができます。これを実現するために、攻撃者は単にPAX_SEC-1のメッセージを偽造し、それをクライアントに送信することができます。クライアントは自分の暗号化されたユーザー名を含むPAX_SEC-2メッセージで応答することになります。攻撃者は、その後、クライアントのユーザー名を復号化するために彼の関連する秘密鍵を使用することができます。キーキャッシュの使用は、彼らが慣らすであるにEAPサーバが異なる公開鍵を持っている場合、クライアントが検出できるようにすることで、アイデンティティの啓示のリスクを減らすことができます。"
    },
    {
      "indent": 3,
      "text": "When provisioning with PAX_SEC and not using a CA-signed certificate, an attacker could first forge a PAX_SEC-1 message and send it to the client. The client would respond with a PAX_SEC-2 message. Using the decrypted value of N, an attacker could forge a PAX_SEC-3 message. Once the client responds with a PAX_SEC-4 message, an attacker can guess values of the weak AK and compute CK = PAX-KDF(AK, \"Confirmation Key\", g^XY). Given enough time, the attacker can obtain both the old AK and new AK' and forge a responding PAX_SEC-5.",
      "ja": "PAX_SECでプロビジョニングおよびCA署名付き証明書を使用しない場合、攻撃者はまずPAX_SEC-1のメッセージを偽造し、それをクライアントに送信することができます。クライアントはPAX_SEC-2メッセージで応答することになります。 Nの復号化された値を使用して、攻撃者はPAX_SEC-3メッセージを偽造することができました。クライアントはPAX_SEC-4メッセージで応答すると、攻撃者が弱いAKの値を推測し、CK = PAX-KDF（AK、「確定キー」、G ^ XY）を計算することができます。十分な時間を考えると、攻撃者は古いAKと新しいAKの両方を得る」と応答PAX_SEC-5を偽造することができます。"
    },
    {
      "indent": 0,
      "text": "4.2. Server Security",
      "section_title": true,
      "ja": "4.2. サーバーセキュリティ"
    },
    {
      "indent": 3,
      "text": "In order to maintain a reasonable security policy, the server should manage five pieces of information concerning each user, most obviously, the username and current key. In addition, the server must keep a bit that indicates whether the current key is weak. Weak keys must be updated prior to key derivation. Also, the server should track the date of last key update. To implement the coarse-grained forward secrecy, the authentication key must be updated on a regular basis, and this field can be used to expire keys. Last, the server should track the previous key, to prevent attacks where an adversary desynchronizes the key state by interfering with PAX-ACK packets. See Appendix B for more suggested implementation strategies that prevent key desynchronization attacks.",
      "ja": "合理的なセキュリティポリシーを維持するために、サーバーはほとんど明らかに、各ユーザに関する5つの情報、ユーザ名と現在の鍵を管理する必要があります。また、サーバは、現在のキーが弱いかどうかを示すビットを保持する必要があります。弱い鍵は鍵導出する前に更新する必要があります。また、サーバは、最後のキーの更新の日付を追跡する必要があります。粒度の粗い転送秘密を実装するには、認証キーは定期的に更新する必要があり、このフィールドは、キーを期限切れにするために使用することができます。敵対者がPAX-ACKパケットを妨害することにより、キーの状態をdesynchronizesどこ最後に、サーバが攻撃を防ぐために、前のキーを追跡する必要があります。キー非同期化攻撃を防ぐ複数の推奨実装戦略については、付録Bを参照してください。"
    },
    {
      "indent": 3,
      "text": "Since the client keys are stored in plaintext on the server, special care should be given to the overall security of the authentication server. An operating system-level attack yielding root access to an intruder would result in the compromise of all client credentials.",
      "ja": "クライアントキーがサーバー上に平文で保存されているので、特別なケアは、認証サーバのセキュリティ全体に与えられるべきです。侵入者へのrootアクセスをもたらすオペレーティングシステムレベルの攻撃は、すべてのクライアントの資格情報の妥協につながります。"
    },
    {
      "indent": 0,
      "text": "4.3. EAP Security Claims",
      "section_title": true,
      "ja": "4.3.  EAPセキュリティクレーム"
    },
    {
      "indent": 3,
      "text": "This section describes EAP-PAX in terms of specific security terminology as required by [RFC3748].",
      "ja": "このセクションでは、[RFC3748]によって必要とされる特定のセキュリティ用語の点でEAP-PAXを記載しています。"
    },
    {
      "indent": 0,
      "text": "4.3.1. Protected Ciphersuite Negotiation",
      "section_title": true,
      "ja": "4.3.1. 保護されたciphersuite交渉"
    },
    {
      "indent": 3,
      "text": "In the initial packet from the server, the server specifies the ciphersuite in the packet header. The server is in total control of the ciphersuite; thus, a client not supporting the specified ciphersuite will not be able to authenticate. In addition, each client's local security policy should specify secure ciphersuites the client will accept. The ciphersuite specified in PAX_STD-1 and PAX_SEC-1 MUST remain the same in successive packets within the same authentication session. Since later packets are covered by an ICV keyed with the ICK, the server can verify that the originally transmitted ciphersuite was not altered by an adversary.",
      "ja": "サーバからの最初のパケットでは、サーバは、パケットヘッダ内の暗号スイートを指定します。サーバは、暗号スイートの総制御です。このように、指定された暗号スイートをサポートしていないクライアントは認証できません。また、各クライアントのローカルセキュリティポリシーでは、クライアントが受け入れる安全な暗号スイートを指定する必要があります。 PAX_STD-1及びPAX_SEC-1で指定された暗号スイートは、同じ認証セッション内の連続するパケットにおいて同じままでなければなりません。後でパケットはICKとキーイングICVで覆われているので、サーバは、最初に送信さ暗号スイートは、敵によって変化しなかったことを確認することができます。"
    },
    {
      "indent": 0,
      "text": "4.3.2. Mutual Authentication",
      "section_title": true,
      "ja": "4.3.2. 相互認証"
    },
    {
      "indent": 3,
      "text": "Both PAX_STD and PAX_SEC authenticate the client and the server, and consequently achieve explicit mutual authentication.",
      "ja": "PAX_STDとPAX_SECの両方が、クライアントとサーバーを認証し、その結果、明示的な相互認証を実現します。"
    },
    {
      "indent": 0,
      "text": "4.3.3. Integrity Protection",
      "section_title": true,
      "ja": "4.3.3. 完全性保護"
    },
    {
      "indent": 3,
      "text": "The ICV described in Section 3.4 provides integrity protection once the integrity check key has been derived. The header values in the unprotected packets can be verified when an ICV is received later in the session.",
      "ja": "整合性チェックキーが導出された後、3.4節で説明したICVは、完全性保護を提供します。 ICVは、セッションの後半で受信されたときに保護されていないパケットのヘッダ値を検証することができます。"
    },
    {
      "indent": 0,
      "text": "4.3.4. Replay Protection",
      "section_title": true,
      "ja": "4.3.4. リプレイ保護"
    },
    {
      "indent": 3,
      "text": "EAP-PAX is inherently designed to avoid replay attacks by cryptographically binding each packet to the previous one. Also the EAP sequence number is covered by the ICV to further strengthen resistance to replay attacks.",
      "ja": "EAP-PAXは、本質的に、暗号前の1に各パケットを結合することにより、リプレイ攻撃を回避するように設計されています。また、EAPシーケンス番号はさらにリプレイ攻撃に対する耐性を強化するためにICVで覆われています。"
    },
    {
      "indent": 0,
      "text": "4.3.5. Confidentiality",
      "section_title": true,
      "ja": "4.3.5. 機密性"
    },
    {
      "indent": 3,
      "text": "With identity protection enabled, PAX_SEC provides full confidentiality.",
      "ja": "アイデンティティ保護を有効にすると、PAX_SECは完全な機密性を提供します。"
    },
    {
      "indent": 0,
      "text": "4.3.6. Key Derivation",
      "section_title": true,
      "ja": "4.3.6. 鍵の導出"
    },
    {
      "indent": 3,
      "text": "Session keys are derived using the PAX-KDF and fresh entropy supplied by both the client and the server. Since the key hierarchy is derived from the shared password, only someone with knowledge of that password or the capability of guessing it is capable of deriving the session keys. One of the main benefits of PAX_SEC is that it allows you to bootstrap a strong shared secret using a weak password while preventing offline dictionary attacks.",
      "ja": "セッションキーは、PAX-KDFと、クライアントとサーバの両方から供給される新鮮なエントロピーを使用して導出されています。キー階層は共有パスワードから導出されているので、そのパスワードを知ったり、それを推測する能力を持つ唯一の誰かがセッションキーを導出することが可能です。 PAX_SECの主な利点の1つは、それはあなたがオフライン辞書攻撃を防ぎながら、弱いパスワードを使用して強力な共有秘密をブートストラップすることを可能にするということです。"
    },
    {
      "indent": 0,
      "text": "4.3.7. Key Strength",
      "section_title": true,
      "ja": "4.3.7. 強み"
    },
    {
      "indent": 3,
      "text": "Authentication keys are 128 bits. The key generation is protected by a Diffie-Hellman key exchange. It is believed that a 3000-bit MODP public-key scheme is roughly equivalent [RFC3766] to a 128-bit symmetric-key scheme. Consequently, EAP-PAX requires the use of a Diffie-Hellman group with modulus larger than 3000. Also, the exponent used as the private DH parameter must be at least twice as large as the key eventually generated. Consequently, EAP-PAX uses 256-bit DH exponents. Thus, the authentication keys contain the full 128 bits of security.",
      "ja": "認証キーは128ビットです。鍵生成はのDiffie-Hellman鍵交換によって保護されています。 3000ビットのMODP公開鍵方式は、128ビット対称キー方式と[RFC3766]とほぼ同等であると考えられます。したがって、EAP-PAXはまた、3000よりも大きい弾性率を有するのDiffie-Hellmanグループを使用する必要があり、プライベートDHパラメータとして使用される指数は、最終的に生成された鍵と少なくとも2倍でなければなりません。したがって、EAP-PAXは、256ビットのDH指数を使用します。このように、認証キーは、セキュリティの完全な128ビットを含みます。"
    },
    {
      "indent": 3,
      "text": "Future ciphersuites defined for EAP-PAX MUST contain a minimum of 128 bits of security.",
      "ja": "EAP-PAXのために定義された将来の暗号スイートは、セキュリティの128ビットの最小値を含まなければなりません。"
    },
    {
      "indent": 0,
      "text": "4.3.8. Dictionary Attack Resistance",
      "section_title": true,
      "ja": "4.3.8. 辞書攻撃耐性"
    },
    {
      "indent": 3,
      "text": "EAP-PAX is resistant to dictionary attacks, except for the case where a weak password is initially used and the server is not using a certificate for authentication. See Section 4.1 for more information on resistance to dictionary attacks.",
      "ja": "EAP-PAXは、脆弱なパスワードが最初に使用され、サーバが認証用の証明書を使用していない場合を除いて、辞書攻撃に耐性があります。辞書攻撃への耐性についての詳細は、4.1節を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.3.9. Fast Reconnect",
      "section_title": true,
      "ja": "4.3.9. すばやい再接続"
    },
    {
      "indent": 3,
      "text": "Although a specific fast reconnection option is not included, execution of PAX_STD requires very little computation time and is therefore bound primarily by the latency of the Authentication, Authorization, and Accounting (AAA) server.",
      "ja": "特定の高速再接続オプションが含まれていないが、PAX_STDの実行は非常に少ない計算時間を要するため、認証、認可、アカウンティング（AAA）サーバーのレイテンシーによって主にバインドされています。"
    },
    {
      "indent": 0,
      "text": "4.3.10. Session Independence",
      "section_title": true,
      "ja": "4.3.10. セッションの独立性"
    },
    {
      "indent": 3,
      "text": "This protocol easily achieves backward secrecy through, among other things, use of the PAX-KDF. Given a current session key, attackers can discover neither the entropy used to generate it nor the key used to encrypt that entropy as it was transmitted across the network.",
      "ja": "このプロトコルは、簡単に、とりわけ、通過PAX-KDFの使用を後方秘密を実現しています。現在のセッションキーを考えると、攻撃者はそれを生成するために使用されるエントロピーまたそれがネットワーク経由で送信されたように、そのエントロピーを暗号化するために使用されるキーのいずれを発見することができます。"
    },
    {
      "indent": 3,
      "text": "This protocol has coarse-grained forward secrecy. Compromised session keys are only useful on data for that session, and one cannot derive AK from them. If an attacker can discover AK, that value can only be used to compromise session keys derived using that AK. Reasonably frequent password updates will help mitigate such attacks.",
      "ja": "このプロトコルは、粗粒度の転送秘密を持っています。妥協セッションキーはそのセッションのためのデータでのみ有用であり、一つは彼らからAKを導き出すことはできません。攻撃者はAKを発見することができた場合は、その値は、それだけでAKを使用して得られたセッション鍵を侵害するために使用することができます。合理的に頻繁にパスワードの更新は、このような攻撃を緩和するのに役立ちます。"
    },
    {
      "indent": 3,
      "text": "Session keys are independently generated using fresh nonces for each session, and therefore the sessions are independent.",
      "ja": "セッションキーが独立して、セッションごとに新鮮なナンスを使用して生成されているので、セッションは独立しています。"
    },
    {
      "indent": 0,
      "text": "4.3.11. Fragmentation",
      "section_title": true,
      "ja": "4.3.11. フラグメンテーション"
    },
    {
      "indent": 3,
      "text": "Fragmentation and reassembly is supported through the fragmentation flag in the header.",
      "ja": "断片化と再アセンブリは、ヘッダ内のフラグメント化フラグを介して支持されています。"
    },
    {
      "indent": 0,
      "text": "4.3.12. Channel Binding",
      "section_title": true,
      "ja": "4.3.12. チャネルバインディング"
    },
    {
      "indent": 3,
      "text": "EAP-PAX can be extended to support channel bindings through the use of its subADE fields.",
      "ja": "EAP-PAXは、そのsubADEフィールドを使用してチャネルバインディングをサポートするように拡張することができます。"
    },
    {
      "indent": 0,
      "text": "4.3.13. Cryptographic Binding",
      "section_title": true,
      "ja": "4.3.13. 暗号バインディング"
    },
    {
      "indent": 3,
      "text": "EAP-PAX does not include any cryptographic binding. This is relevant only for tunneled methods.",
      "ja": "EAP-PAXは、任意の暗号の結合が含まれていません。これは、トンネル化方法に関連しています。"
    },
    {
      "indent": 0,
      "text": "4.3.14. Negotiation Attack Prevention",
      "section_title": true,
      "ja": "4.3.14. 交渉攻撃防止"
    },
    {
      "indent": 3,
      "text": "EAP is susceptible to an attack where an attacker uses NAKs to convince an EAP client and server to use a less secure method, and can be prevented using method-specific integrity protection on NAK messages. Since EAP-PAX does not have suitable keys derived for this integrity protection at the beginning of a PAX conversation, this is not included.",
      "ja": "EAPは、攻撃者が安全性の低いメソッドを使用するEAPクライアントとサーバを納得させるためにNAKを使用する攻撃を受けやすい、とNAKメッセージにメソッド固有の完全性保護を使用して防止することができます。 EAP-PAXがPAXの会話の初めに、この完全性保護のために由来する適切なキーを持っていないので、これは含まれていません。"
    },
    {
      "indent": 0,
      "text": "5. IANA Considerations",
      "section_title": true,
      "ja": "5. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document requires IANA to maintain the namespace for the following header fields: MAC ID, DH Group ID, Public Key ID, and ADE type. The initial namespace populations are as follows.",
      "ja": "このドキュメントは以下のヘッダフィールドの名前空間を維持するために、IANAが必要です：MAC ID、DHグループID、公開鍵ID、およびADEタイプを。次のように最初の名前空間の集団です。"
    },
    {
      "indent": 3,
      "text": "MAC ID Namespace:",
      "ja": "MAC ID名前空間："
    },
    {
      "indent": 3,
      "text": "o 0x01 : HMAC_SHA1_128 o 0x02 : HMAC_SHA256_128",
      "ja": "Oが0x01：0x02のO HMAC_SHA1_128：HMAC_SHA256_128"
    },
    {
      "indent": 3,
      "text": "DH Group ID Namespace:",
      "ja": "DHグループID名前空間："
    },
    {
      "indent": 3,
      "text": "o 0x00 : NONE o 0x01 : IANA DH Group 14 o 0x02 : IANA DH Group 15 o 0x03 : NIST ECC Group P-256",
      "ja": "Oは0x00：0x01のO NONE：IANA DHグループ14 O 0×02：IANA DHグループ15 O 0x03の：NIST ECCグループP-256"
    },
    {
      "indent": 3,
      "text": "Public Key ID Namespace:",
      "ja": "公開鍵IDの名前空間："
    },
    {
      "indent": 3,
      "text": "o 0x00 : NONE o 0x01 : RSAES-OAEP o 0x02 : RSA-PKCS1-V1_5 o 0x03 : El-Gamal Over NIST ECC Group P-256",
      "ja": "Oは0x00：NONE Oは0x01：RSAES-OAEP 0x02のO：RSA-PKCS1-v1_5の0x03のO：エル・ガマルオーバーNIST ECCグループP-256"
    },
    {
      "indent": 3,
      "text": "ADE Type Namespace:",
      "ja": "ADEタイプの名前空間："
    },
    {
      "indent": 3,
      "text": "o 0x01 : Vendor Specific o 0x02 : Client Channel Binding Data o 0x03 : Server Channel Binding Data",
      "ja": "Oが0x01：0x02のOベンダー固有：クライアントチャンネルが0x03のOデータバインディング：サーバーチャンネルのデータのバインド"
    },
    {
      "indent": 3,
      "text": "Allocation of values for these namespaces shall be reviewed by a Designated Expert appointed by the IESG. The Designated Expert will post a request to the EAP WG mailing list (or a successor designated by the Designated Expert) for comment and review, including an Internet-Draft. Before a period of 30 days has passed, the Designated Expert will either approve or deny the registration request and publish a notice of the decision to the EAP WG mailing list or its successor, as well as informing IANA. A denial notice must be justified by an explanation and, in the cases where it is possible, concrete suggestions on how the request can be modified so as to become acceptable.",
      "ja": "これらの名前空間の値の配分はIESGによって任命指名専門家によって審査されなければなりません。指定専門家は、インターネットドラフトを含め、コメントやレビューのためのEAP WGメーリングリストへの要求（または指定エキスパートによって指定された後継）を掲載します。 30日間の期間が経過する前に、指定Expertは承認または登録要求を拒否し、EAP WGメーリングリストやその後継者に決定の通知を発行するだけでなく、IANAに通知しますか。拒否通知は説明によって正当化や、許容なるように要求を変更することができますどのようにそれが可能である場合に、具体的な提案されなければなりません。"
    },
    {
      "indent": 0,
      "text": "6. Acknowledgments",
      "section_title": true,
      "ja": "6.謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Jonathan Katz for discussion with respect to provable security, Bernard Aboba for technical guidance, Jari Arkko for his expert review, and Florent Bersani for feedback and suggestions. Finally, the authors would like to thank the Defense Information Systems Agency for initially funding this work.",
      "ja": "著者は、フィードバックや提案のための彼の専門家レビューのための証明可能安全性、技術指導のためのバーナードAboba、ヤリArkkoに関して議論のためのジョナサン・カッツに感謝したい、とフロランBersaniでしょう。最後に、筆者は当初、この作品に資金を供給するために国防情報システム局に感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7.参考"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[FIPS180] National Institute for Standards and Technology, \"Secure Hash Standard\", Federal Information Processing Standard 180-2, August 2002.",
      "ja": "[FIPS180]標準技術研究所、「セキュアハッシュ標準」、連邦情報処理規格180-2、2002年8月。"
    },
    {
      "indent": 3,
      "text": "[FIPS186] National Institute for Standards and Technology, \"Digital Signature Standard (DSS)\", Federal Information Processing Standard 186, May 1994.",
      "ja": "[FIPS186]標準技術研究所、「デジタル署名標準（DSS）」、連邦情報処理標準186、1994年5月。"
    },
    {
      "indent": 3,
      "text": "[FIPS198] National Institute for Standards and Technology, \"The Keyed-Hash Message Authentication Code (HMAC)\", Federal Information Processing Standard 198, March 2002.",
      "ja": "[FIPS198]標準技術研究所、「鍵付きハッシュメッセージ認証コード（HMAC）」、連邦情報処理標準198、2002年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC3232] Reynolds, J., \"Assigned Numbers: RFC 1700 is Replaced by an On-line Database\", RFC 3232, January 2002.",
      "ja": "[RFC3232]レイノルズ、J.、 \"番号が割り当てられ：RFC 1700は、オンラインデータベースで置き換えられる\"、RFC 3232、2002年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC3280] Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 3280, April 2002.",
      "ja": "[RFC3280] Housley氏、R.、ポーク、W.、フォード、W.、およびD.ソロ、 \"インターネットX.509公開鍵暗号基盤証明書と証明書失効リスト（CRL）プロフィール\"、RFC 3280、2002年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC3447] Jonsson, J. and B. Kaliski, \"Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1\", RFC 3447, February 2003.",
      "ja": "[RFC3447]ジョンソン、J.とB. Kaliski、 \"公開鍵暗号規格（PKCS）＃1：RSA暗号仕様バージョン2.1\"、RFC 3447、2003年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC3526] Kivinen, T. and M. Kojo, \"More Modular Exponential (MODP) Diffie-Hellman groups for Internet Key Exchange (IKE)\", RFC 3526, May 2003.",
      "ja": "[RFC3526] Kivinen、T.およびM.古城、 \"インターネット鍵交換のためのより多くのモジュラー指数（MODP）のDiffie-Hellmanグループ（IKE）\"、RFC 3526、2003年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC3748] Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H. Levkowetz, \"Extensible Authentication Protocol (EAP)\", RFC 3748, June 2004.",
      "ja": "[RFC3748] Aboba、B.、ブルンク、L.、Vollbrecht、J.、カールソン、J.、およびH. Levkowetz、 \"拡張認証プロトコル（EAP）\"、RFC 3748、2004年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC4282] Aboba, B., Beadles, M., Arkko, J., and P. Eronen, \"The Network Access Identifier\", RFC 4282, December 2005.",
      "ja": "[RFC4282] Aboba、B.、Beadles、M.、Arkko、J.、およびP. Eronen、 \"ネットワークアクセス識別子\"、RFC 4282、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC4334] Housley, R. and T. Moore, \"Certificate Extensions and Attributes Supporting Authentication in Point-to-Point Protocol (PPP) and Wireless Local Area Networks (WLAN)\", RFC 4334, February 2006.",
      "ja": "[RFC4334] Housley氏、R.とT.ムーア、「証明書の拡張機能と属性で認証のサポートポイントツーポイントプロトコル（PPP）とワイヤレスローカルエリアネットワーク（WLAN）」、RFC 4334、2006年2月。"
    },
    {
      "indent": 3,
      "text": "[X.690] International Telecommunications Union, \"Information technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)\", Data Networks and Open System Communication Recommendation X.690, July 2002.",
      "ja": "[X.690]国際電気通信連合、「情報技術 -  ASN.1エンコーディング規則：基本符号化規則（BER）の仕様、Canonicalの符号化規則（CER）、および顕著な符号化規則（DER）」、データネットワークとオープンシステムコミュニケーション勧告X.690、2002年7月。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[IETF.KEY] Aboba, B., Simon, D., Arkko, J., Eronen, P., and H. Levkowetz, \"Extensible Authentication Protocol (EAP) Key Management Framework\", Work in Progress.",
      "ja": "【IETF.KEY] Aboba、B.、サイモン、D.、Arkko、J.、Eronen、P.、およびH. Levkowetz、 \"拡張認証プロトコル（EAP）鍵管理フレームワーク\"、ProgressのWork。"
    },
    {
      "indent": 3,
      "text": "[IEEE.80211] Institute of Electrical and Electronics Engineers, \"Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific Requirements Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications\", IEEE Standard 802.11-1997, 1997.",
      "ja": "[IEEE.80211]電気電子技術者協会、「情報技術 - 電気通信及びシステム間の情報交換 - 地方とメトロポリタンエリアネットワーク - 固有の要件パート11：無線LAN媒体アクセス制御（MAC）および物理層（PHY）仕様」 、IEEE規格802.​​11から1997、1997。"
    },
    {
      "indent": 3,
      "text": "[RFC2631] Rescorla, E., \"Diffie-Hellman Key Agreement Method\", RFC 2631, June 1999.",
      "ja": "[RFC2631]レスコラ、E.、 \"ディフィー・ヘルマン鍵共有方式\"、RFC 2631、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC3766] Orman, H. and P. Hoffman, \"Determining Strengths For Public Keys Used For Exchanging Symmetric Keys\", BCP 86, RFC 3766, April 2004.",
      "ja": "[RFC3766]オーマン、H.、およびP.ホフマン、 \"対称鍵を交換するために使用公開鍵の強さを測定\"、BCP 86、RFC 3766、2004年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC4017] Stanley, D., Walker, J., and B. Aboba, \"Extensible Authentication Protocol (EAP) Method Requirements for Wireless LANs\", RFC 4017, March 2005.",
      "ja": "[RFC4017]スタンレー、D.、ウォーカー、J.、およびB. Aboba、 \"無線LANのための拡張認証プロトコル（EAP）メソッド要件\"、RFC 4017、2005年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4252] Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH) Authentication Protocol\", RFC 4252, January 2006.",
      "ja": "[RFC4252] Ylonenと、T.とC. Lonvick、 \"セキュアシェル（SSH）認証プロトコル\"、RFC 4252、2006年1月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Key Generation from Passwords",
      "ja": "パスワードの付録A.鍵生成"
    },
    {
      "indent": 3,
      "text": "If a 128-bit key is not available to bootstrap the authentication process, then one must be generated from some sort of weak preshared key. Note that the security of the hashing process is unimportant, as long as it does not significantly decrease the password's entropy. Resistance to dictionary attacks is provided by PAX_SEC. Consequently, computing the SHA-1 of the password and truncating the output to 128 bits is RECOMMENDED as a means of converting a weak password to a key for provisioning.",
      "ja": "128ビットの鍵は、認証プロセスをブートストラップするために利用できない場合、1は弱い事前共有キーのいくつかの並べ替えから生成されなければなりません。それが大幅にパスワードのエントロピーを減少させない限り、ハッシュプロセスのセキュリティが重要でないことに注意してください。辞書攻撃への抵抗はPAX_SECによって提供されます。結果として、SHA-1パスワードを計算し、128ビットの出力を切り捨てるが、プロビジョニングのためのキーに弱いパスワードを変換する手段として推奨されています。"
    },
    {
      "indent": 3,
      "text": "When using other preshared credentials, such as a Kerberos Data Encryption Standard (DES) key, or an MD4-hashed Microsoft Challenge Handshake Authentication Protocol (MSCHAP) password, to provision clients, these keys SHOULD still be put through SHA-1 before being used. This serves to protect the credentials from possible compromise, and also keeps things uniform. As an example, consider provisioning using an existing Kerberos credential. The initial key computation could be SHA1_128(string2key(password)). The KDC, storing string2key(password), would also be able to compute this initial key value.",
      "ja": "このようKerberosのデータ暗号化規格（DES）キー、またはMD4ハッシュMicrosoftチャレンジハンドシェイク認証プロトコル（MSCHAP）パスワードなどの他の事前共有の資格情報を使用する場合、プロビジョニングクライアントに、これらのキーは、まだ使用される前に、SHA-1によって配置する必要があります。これは、可能な妥協案から資格情報を保護するためのものであり、また、均一なものを保持します。例として、既存のKerberos資格情報を使用してプロビジョニングを検討してください。最初の鍵計算はSHA1_128（string2key（パスワード））である可能性があります。 KDCは、string2key（パスワード）を格納し、また、この初期キー値を計算することができるだろう。"
    },
    {
      "indent": 0,
      "text": "Appendix B. Implementation Suggestions",
      "ja": "付録B.実装の提案"
    },
    {
      "indent": 3,
      "text": "In this section, two implementation strategies are discussed. The first describes how best to implement and deploy EAP-PAX in an enterprise network for IEEE 802.11i authentication. The second describes how to use EAP-PAX for device authentication in a 3G-style mobile phone network.",
      "ja": "このセクションでは、2つの実装戦略が議論されています。最初は、実装したIEEE 802.11i認証のための企業ネットワークでEAP-PAXを展開する最善の方法について説明します。第二は、3G-スタイルの携帯電話ネットワーク内のデバイス認証にEAP-PAXを使用する方法について説明します。"
    },
    {
      "indent": 0,
      "text": "B.1. WiFi Enterprise Network",
      "ja": "B.1。 WiFiのエンタープライズネットワーク"
    },
    {
      "indent": 3,
      "text": "For the purposes of this section, a wireless enterprise network is defined to have the following characteristics:",
      "ja": "このセクションの目的のために、無線企業ネットワークは、以下の特性を有するように定義されます。"
    },
    {
      "indent": 3,
      "text": "o Users wish to obtain network access through IEEE 802.11 access points.",
      "ja": "Oユーザーは、IEEE 802.11アクセスポイントを介してネットワークアクセスを取得したいです。"
    },
    {
      "indent": 3,
      "text": "o Users can possibly have multiple devices (laptops, PDAs, etc.) they wish to authenticate.",
      "ja": "Oユーザーは、おそらく、彼らが認証を希望する複数のデバイス（ラップトップ、PDAなど）を持つことができます。"
    },
    {
      "indent": 3,
      "text": "o A preexisting authentication framework already exists, for example, a Microsoft Active Directory domain or a Kerberos realm.",
      "ja": "O既存の認証フレームワークは、すでにマイクロソフトのActive DirectoryドメインまたはKerberosレルム、例えば、存在します。"
    },
    {
      "indent": 3,
      "text": "Two of the biggest challenges in an enterprise WiFi network is key provisioning and support for multiple devices. Consequently, it is recommended that the client's Network Access Identifier (NAI) have the format username/KID@realm, where KID is a key ID that can be used to distinguish between different devices.",
      "ja": "企業WiFiネットワークにおける最大の課題の二つは、複数のデバイスのためのキーのプロビジョニングとサポートです。したがって、クライアントのネットワークアクセス識別子（NAI）はKIDが異なるデバイスを区別するために使用することができ、キーIDである形式のユーザー名/ KID @ realmのを、持っていることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "The client's supplicant can use a variety of sources to automatically generate the KID. Two of the better choices would likely be the computer's NETBIOS name, or local Ethernet adapter's MAC address. The wireless adapter's address may be a suboptimal choice, as the user may only have one PCCARD adapter for multiple systems.",
      "ja": "クライアントのサプリカントは自動的にKIDを生成するために、さまざまなソースを使用することができます。より良い選択の二つは、おそらくコンピュータのNETBIOS名、またはローカル・イーサネットアダプタのMACアドレスになります。ユーザーは唯一の複数のシステムに1つのPCCARDアダプタを有することができるよう、ワイヤレスアダプタのアドレスは、次善の選択かもしれません。"
    },
    {
      "indent": 3,
      "text": "With an authentication system already in place, there is a natural choice for the provisioned key. Clients can authenticate using their preexisting password. When the server is presented with a new KID, it can create a new key record on the server and use the user's current password as the provisioned key. For example, for Active Directory, the supplicant could use Microsoft's NtPasswordHash function to generate a key verifiable by the server. It is suggested that this key then be fed through SHA1_128 before being used in a non-Microsoft authentication protocol.",
      "ja": "すでに場所での認証システムでは、プロビジョニングされたキーのための自然な選択があります。クライアントは、既存のパスワードを使用して認証することができます。サーバが新しいKIDを提示しているときは、サーバー上で新しいキーレコードを作成し、プロビジョニングキーとして、ユーザの現在のパスワードを使用することができます。たとえば、Active Directoryのために、サプリカントは、サーバがキー検証を生成するために、MicrosoftのNtPasswordHash機能を使用することができます。このキーは、その後、マイクロソフト以外の認証プロトコルで使用される前にSHA1_128を介して供給することが示唆されます。"
    },
    {
      "indent": 3,
      "text": "After a key update, the server should keep track of both the old and new authentication keys. When two keys exist, the server should attempt to use both to validate the MACs on transmitted packets. Once a client successfully authenticates using the new key, the server should discard the old key. This prevents desynchronization attacks.",
      "ja": "鍵の更新後、サーバーは、新旧両方の認証キーを追跡する必要があります。 2つのキーが存在する場合、サーバが送信するパケットにMACを検証するために、両方を使用しようとする必要があります。クライアントが正常に新しいキーを使用して認証すると、サーバは古い鍵を破棄しなければなりません。これは、非同期化攻撃を防ぐことができます。"
    },
    {
      "indent": 0,
      "text": "B.2. Mobile Phone Network",
      "ja": "B.2。携帯電話ネットワーク"
    },
    {
      "indent": 3,
      "text": "In a mobile phone system, we no longer need to worry about supporting multiple keys per identity. Presumably, each mobile device has a unique identity. However, if multiple devices per identity are desired, a method similar to that presented in Section B.1 could be used.",
      "ja": "携帯電話システムでは、我々はもはやアイデンティティごとに複数のキーをサポートする心配する必要はありません。おそらく、各モバイルデバイスは、独自のアイデンティティを持っています。アイデンティティごとに複数のデバイスが所望される場合は、セクションB.1に提示したのと同様の方法を使用することができます。"
    },
    {
      "indent": 3,
      "text": "Provisioning could easily be accomplished by issuing customers a 6- digit PIN they could type into their phone's keypad.",
      "ja": "プロビジョニングは、簡単に顧客に、彼らは自分の携帯電話のキーパッドに入力することができ、6-桁のPINを発行することによって達成することができます。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "T. Charles Clancy DoD Laboratory for Telecommunications Sciences 8080 Greenmeade Drive College Park, MD 20740 USA",
      "ja": "テレコミュニケーション科学T.チャールズ・クランシー国防総省研究所8080 Greenmeadeドライブカレッジパーク、MD 20740 USA"
    },
    {
      "indent": 3,
      "text": "EMail: clancy@ltsnet.net",
      "ja": "メールアドレス：clancy@ltsnet.net"
    },
    {
      "indent": 3,
      "text": "William A. Arbaugh University of Maryland Department of Computer Science College Park, MD 20742 USA",
      "ja": "コンピュータサイエンスカレッジパークのメリーランド州省のウィリアムA. Arbaugh大学、MD 20742 USA"
    },
    {
      "indent": 3,
      "text": "EMail: waa@cs.umd.edu",
      "ja": "メールアドレス：waa@cs.umd.edu"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The IETF Trust (2006).",
      "ja": "著作権（C）IETFトラスト（2006）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST, AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書およびここに含まれる情報は、上に提供される基礎とCONTRIBUTOR、ORGANIZATION彼/彼女が表すOR（もしあれば）後援が「そのまま」、インターネット学会、IETFトラスト、インターネットエンジニアリングタスクフォース放棄情報の利用は、特定の目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証含むがこれらに限定されないすべての保証、明示または黙示、。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}