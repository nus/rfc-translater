{
  "title": {
    "text": "RFC 4122 - A Universally Unique IDentifier (UUID) URN Namespace",
    "ja": "RFC 4122 - 汎用一意識別子（UUID）URN名前空間"
  },
  "number": 4122,
  "created_at": "2019-10-20 03:39:44.441834+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                           P. Leach\nRequest for Comments: 4122                                     Microsoft\nCategory: Standards Track                                    M. Mealling\n                                                Refactored Networks, LLC\n                                                                 R. Salz\n                                              DataPower Technology, Inc.\n                                                               July 2005",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "A Universally Unique IDentifier (UUID) URN Namespace",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "著作権（C）インターネット協会（2005）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation's (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.",
      "ja": "また、この仕様はのGUID（グローバル一意識別子）として知られているのUUIDのためのUniform Resource名の名前空間（汎用一意識別子）を定義しています。 UUIDは128ビット長であり、空間と時間を越え一意性を保証することができます。 UUIDがもともとアポロネットワークコンピューティングシステムでは、後にオープンSoftware Foundationの（OSF）分散コンピューティング環境（DCE）、にし、Microsoft Windowsプラットフォームで使用されました。"
    },
    {
      "indent": 3,
      "text": "This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document.",
      "ja": "この仕様は、（現在はOpen Group）のOSFの親切な許可を得てDCE仕様から導出されます。 DCE仕様の以前のバージョンからの情報は、この文書に組み込まれています。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  2\n2. Motivation . . . . . . . . . . . . . . . . . . . . . . . . . .  3\n3. Namespace Registration Template  . . . . . . . . . . . . . . .  3\n4. Specification  . . . . . . . . . . . . . . . . . . . . . . . .  5\n   4.1. Format. . . . . . . . . . . . . . . . . . . . . . . . . .  5\n        4.1.1. Variant. . . . . . . . . . . . . . . . . . . . . .  6\n        4.1.2. Layout and Byte Order. . . . . . . . . . . . . . .  6\n        4.1.3. Version. . . . . . . . . . . . . . . . . . . . . .  7\n        4.1.4. Timestamp. . . . . . . . . . . . . . . . . . . . .  8\n        4.1.5. Clock Sequence . . . . . . . . . . . . . . . . . .  8\n        4.1.6. Node . . . . . . . . . . . . . . . . . . . . . . .  9\n        4.1.7. Nil UUID . . . . . . . . . . . . . . . . . . . . .  9\n   4.2. Algorithms for Creating a Time-Based UUID . . . . . . . .  9\n        4.2.1. Basic Algorithm. . . . . . . . . . . . . . . . . . 10\n        4.2.2. Generation Details . . . . . . . . . . . . . . . . 12\n   4.3. Algorithm for Creating a Name-Based UUID. . . . . . . . . 13\n   4.4. Algorithms for Creating a UUID from Truly Random or\n        Pseudo-Random Numbers . . . . . . . . . . . . . . . . . . 14\n   4.5. Node IDs that Do Not Identify the Host. . . . . . . . . . 15\n5. Community Considerations . . . . . . . . . . . . . . . . . . . 15\n6. Security Considerations  . . . . . . . . . . . . . . . . . . . 16\n7. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 16\n8. Normative References . . . . . . . . . . . . . . . . . . . . . 16\nA. Appendix A - Sample Implementation . . . . . . . . . . . . . . 18\nB. Appendix B - Sample Output of utest  . . . . . . . . . . . . . 29\nC. Appendix C - Some Name Space IDs . . . . . . . . . . . . . . . 30",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and requires no central registration process.",
      "ja": "また、この仕様はのGUID（グローバル一意識別子）として知られているのUUIDのためのUniform Resource名の名前空間（汎用一意識別子）を定義しています。 UUIDは128ビット長であり、そして何の中央登録処理を必要としません。"
    },
    {
      "indent": 3,
      "text": "The information here is meant to be a concise guide for those wishing to implement services using UUIDs as URNs. Nothing in this document should be construed to override the DCE standards that defined UUIDs.",
      "ja": "ここでの情報は、のURNとしてUUIDを使用してサービスを実現したい方のための簡潔なガイドであることを意味します。本書の内容は、UUIDを定義したDCE基準を上書きするように解釈されるべきではありません。"
    },
    {
      "indent": 3,
      "text": "There is an ITU-T Recommendation and ISO/IEC Standard [3] that are derived from earlier versions of this document. Both sets of specifications have been aligned, and are fully technically compatible. In addition, a global registration function is being provided by the Telecommunications Standardisation Bureau of ITU-T; for details see <http://www.itu.int/ITU-T/asn1/uuid.html>.",
      "ja": "ITU-T勧告及びISO / IEC規格[3]この文書の以前のバージョンに由来することがあります。仕様の両方のセットを揃え、完全に技術的に互換性がありますされています。加えて、グローバル登録機能は、ITU-Tの通信標準局によって提供されています。詳細については、<http://www.itu.int/ITU-T/asn1/uuid.html>参照してください。"
    },
    {
      "indent": 0,
      "text": "2. Motivation",
      "section_title": true,
      "ja": "2.動機"
    },
    {
      "indent": 3,
      "text": "One of the main reasons for using UUIDs is that no centralized authority is required to administer them (although one format uses IEEE 802 node identifiers, others do not). As a result, generation on demand can be completely automated, and used for a variety of purposes. The UUID generation algorithm described here supports very high allocation rates of up to 10 million per second per machine if necessary, so that they could even be used as transaction IDs.",
      "ja": "UUIDを使用する主な理由の一つは全く集中権限は、それらを管理するために必要とされないことである（一つのフォーマットは、IEEE 802ノード識別子を使用するが、他のものはそうではありません）。その結果、オンデマンドで生成は完全に自動化することができ、様々な目的のために使用されます。必要であれば、彼らもトランザクションIDとして使用することができるように、ここで説明UUID生成アルゴリズムは、マシンごとに毎秒最大10万ドルの非常に高い割り当てレートをサポートしています。"
    },
    {
      "indent": 3,
      "text": "UUIDs are of a fixed size (128 bits) which is reasonably small compared to other alternatives. This lends itself well to sorting, ordering, and hashing of all sorts, storing in databases, simple allocation, and ease of programming in general.",
      "ja": "UUIDが他の選択肢に比べて適度に小さい固定サイズ（128ビット）です。これは、ソート注文、およびあらゆる種類のハッシング、データベースに格納し、簡単な配分、および一般的なプログラミングの容易さにも向いています。"
    },
    {
      "indent": 3,
      "text": "Since UUIDs are unique and persistent, they make excellent Uniform Resource Names. The unique ability to generate a new UUID without a registration process allows for UUIDs to be one of the URNs with the lowest minting cost.",
      "ja": "UUIDは、ユニークかつ永続的なので、彼らは優れたユニフォームリソース名を作ります。 UUIDが最低鋳造コストでのURNの一つであるために、登録処理せずに新しいUUIDを生成する独自の機能ができます。"
    },
    {
      "indent": 0,
      "text": "3. Namespace Registration Template",
      "section_title": true,
      "ja": "3.名前空間の登録テンプレート"
    },
    {
      "indent": 3,
      "text": "Namespace ID: UUID Registration Information: Registration date: 2003-10-01",
      "ja": "名前空間ID：UUID登録情報：登録日：2003-10-01"
    },
    {
      "indent": 3,
      "text": "Declared registrant of the namespace: JTC 1/SC6 (ASN.1 Rapporteur Group)",
      "ja": "名前空間の宣言された登録者：JTC 1 / SC6（ASN.1報告者グループ）"
    },
    {
      "indent": 3,
      "text": "Declaration of syntactic structure: A UUID is an identifier that is unique across both space and time, with respect to the space of all UUIDs. Since a UUID is a fixed size and contains a time field, it is possible for values to rollover (around A.D. 3400, depending on the specific algorithm used). A UUID can be used for multiple purposes, from tagging objects with an extremely short lifetime, to reliably identifying very persistent objects across a network.",
      "ja": "統語構造の宣言：UUIDはすべてのUUIDのスペースに対して、空間と時間の両方にわたって一意である識別子です。 UUIDは、固定サイズであり、時間のフィールドが含まれているため値が（使用される特定のアルゴリズムに依存して、西暦3400の周りに）ロールオーバーすることが可能です。 UUIDは、非常に短い寿命を持つオブジェクトにタグ付けを確実にネットワークを介して非常に永続オブジェクトを識別するために、複数の目的に使用することができます。"
    },
    {
      "indent": 6,
      "text": "The internal representation of a UUID is a specific sequence of bits in memory, as described in Section 4. To accurately represent a UUID as a URN, it is necessary to convert the bit sequence to a string representation.",
      "ja": "UUIDの内部表現を正確URNとして、UUIDを表すために、セクション4で説明したように、文字列表現にビットシーケンスを変換する必要がある、メモリ内のビットの特定の配列です。"
    },
    {
      "indent": 6,
      "text": "Each field is treated as an integer and has its value printed as a zero-filled hexadecimal digit string with the most significant digit first. The hexadecimal values \"a\" through \"f\" are output as lower case characters and are case insensitive on input.",
      "ja": "各フィールドは整数として扱われ、その値は、最初の最上位桁ゼロ充填進数字列として印刷しました。 16進値は「」「F」を介して小文字文字として出力され、入力に大文字と小文字を区別しません。"
    },
    {
      "indent": 6,
      "text": "The formal definition of the UUID string representation is provided by the following ABNF [7]:",
      "ja": "UUID文字列表現の形式的な定義は、以下のABNFによって提供されている[7]。"
    },
    {
      "indent": 6,
      "text": "UUID = time-low \"-\" time-mid \"-\" time-high-and-version \"-\" clock-seq-and-reserved clock-seq-low \"-\" node time-low = 4hexOctet time-mid = 2hexOctet time-high-and-version = 2hexOctet clock-seq-and-reserved = hexOctet clock-seq-low = hexOctet node = 6hexOctet hexOctet = hexDigit hexDigit hexDigit = \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\" / \"9\" / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"",
      "ja": "UUID =時間低 - 時間-MID \"\" \" - \" 時間ハイ・アンド・バージョン \" - \" \" - \" クロック-配列低いクロック-SEQ-と予約ノード時間低= 4hexOctet時間-MID = 2hexOctet時間ハイ・アンド・バージョン= 2hexOctetクロック-SEQ-および予約= hexOctetクロック-SEQ-ロー= hexOctetノード= 6hexOctet hexOctet = hexDigit hexDigit hexDigit = \"0\" / \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\" / \"9\" / \"\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" /「A \"/ \"B\"/ \"C\"/ \"D\"/ \"E\"/ \"F\""
    },
    {
      "indent": 3,
      "text": "The following is an example of the string representation of a UUID as a URN:",
      "ja": "以下はURNとして、UUIDのストリング表現の一例です。"
    },
    {
      "indent": 3,
      "text": "urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6",
      "ja": "URN：UUID：f81d4fae-7dec-11D0-a765-00a0c91e6bf6"
    },
    {
      "indent": 3,
      "text": "Relevant ancillary documentation: [1][2] Identifier uniqueness considerations: This document specifies three algorithms to generate UUIDs: the first leverages the unique values of 802 MAC addresses to guarantee uniqueness, the second uses pseudo-random number generators, and the third uses cryptographic hashing and application-provided text strings. As a result, the UUIDs generated according to the mechanisms here will be unique from all other UUIDs that have been or will be assigned.",
      "ja": "関連する補助文書：[1] [2]識別子の一意性の考慮事項：この文書は、UUIDを生成するために、3つのアルゴリズムを指定する：最初は、MACが一意性を保証するためにアドレス802の一意の値を利用し、第二は、擬似乱数発生器を使用し、第三の用途暗号ハッシュとアプリケーションが提供するテキスト文字列。その結果、メカニズムに応じて生成されたUUIDがここにいたかが割り当てられます他のすべてのUUIDからユニークになります。"
    },
    {
      "indent": 3,
      "text": "Identifier persistence considerations: UUIDs are inherently very difficult to resolve in a global sense. This, coupled with the fact that UUIDs are temporally unique within their spatial context, ensures that UUIDs will remain as persistent as possible.",
      "ja": "識別子の永続性の考慮事項：のUUIDは、本質的にグローバルな意味で解決するのが非常に困難です。これは、UUIDには、それらの空間的文脈の中で一時的にユニークであるという事実と相まって、UUIDには可能な限り永続的なままであることを保証します。"
    },
    {
      "indent": 3,
      "text": "Process of identifier assignment: Generating a UUID does not require that a registration authority be contacted. One algorithm requires a unique value over space for each generator. This value is typically an IEEE 802 MAC address, usually already available on network-connected hosts. The address can be assigned from an address block obtained from the IEEE registration authority. If no such address is available, or privacy concerns make its use undesirable, Section 4.5 specifies two alternatives. Another approach is to use version 3 or version 4 UUIDs as defined below.",
      "ja": "識別子の割り当てのプロセス：UUIDを生成すると、登録機関に連絡する必要はありません。一つのアルゴリズムは、各発電機のためのスペース以上のユニークな値が必要です。この値は、ネットワーク接続されたホスト上で、典型的には通常既に利用可能なIEEE 802 MACアドレスです。アドレスは、IEEE登録機関から取得したアドレスブロックから割り当てることができます。そのようなアドレスが利用できない、またはプライバシーの問題は、その使用は望ましくないものにした場合、4.5節には二つの選択肢を指定します。別のアプローチは、以下に定義されるようなバージョン3またはバージョン4つのUUIDを使用することです。"
    },
    {
      "indent": 3,
      "text": "Process for identifier resolution: Since UUIDs are not globally resolvable, this is not applicable.",
      "ja": "識別子の解決のためのプロセス：のUUIDはグローバル解決されないので、これは適用されません。"
    },
    {
      "indent": 3,
      "text": "Rules for Lexical Equivalence: Consider each field of the UUID to be an unsigned integer as shown in the table in section Section 4.1.2. Then, to compare a pair of UUIDs, arithmetically compare the corresponding fields from each UUID in order of significance and according to their data type. Two UUIDs are equal if and only if all the corresponding fields are equal.",
      "ja": "語彙等価ための規則：セクション4.1.2の表に示すように、符号なし整数であることがUUIDの各フィールドを考えます。次に、のUUIDのペアを比較するために、算術的有意性のために、各UUIDに対応するフィールドを比較し、それらのデータ・タイプに応じ。そして、すべての対応するフィールドが等しい場合にのみ場合、2つのUUIDが等しいです。"
    },
    {
      "indent": 6,
      "text": "As an implementation note, equality comparison can be performed on many systems by doing the appropriate byte-order canonicalization, and then treating the two UUIDs as 128-bit unsigned integers.",
      "ja": "実装注意点としては、等価比較は適切なバイト順の正規化を行うことによって、多くのシステム上で実行することができ、その後、128ビットの符号なし整数として2つのUUIDを処理します。"
    },
    {
      "indent": 6,
      "text": "UUIDs, as defined in this document, can also be ordered lexicographically. For a pair of UUIDs, the first one follows the second if the most significant field in which the UUIDs differ is greater for the first UUID. The second precedes the first if the most significant field in which the UUIDs differ is greater for the second UUID.",
      "ja": "UUIDが、この文書で定義されるように、また、辞書式に注文することができます。 UUIDが異なっている最も重要なフィールドは、最初のUUIDのために大きい場合のUUIDのペアについて、最初のものは、第二に続きます。 UUIDが異なっている最も重要なフィールドは、第UUIDのために大きい場合には、第2は、最初に先行します。"
    },
    {
      "indent": 3,
      "text": "Conformance with URN Syntax: The string representation of a UUID is fully compatible with the URN syntax. When converting from a bit-oriented, in-memory representation of a UUID into a URN, care must be taken to strictly adhere to the byte order issues mentioned in the string representation section.",
      "ja": "URN構文に準拠：UUIDの文字列表現は、URN構文と完全に互換性があります。 URNにUUIDのビット指向の、インメモリ表現から変換する場合、注意が厳密に文字列表現の項で述べたバイト順の問題に付着するように注意しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Validation mechanism: Apart from determining whether the timestamp portion of the UUID is in the future and therefore not yet assignable, there is no mechanism for determining whether a UUID is 'valid'.",
      "ja": "検証機構：別にUUIDのタイムスタンプ部分が将来であるため、まだ割り当て可能かどうかを判定するから、UUIDが「有効」であるかどうかを決定するためのメカニズムはありません。"
    },
    {
      "indent": 3,
      "text": "Scope: UUIDs are global in scope.",
      "ja": "スコープ：UUIDがスコープ内にグローバルです。"
    },
    {
      "indent": 0,
      "text": "4. Specification",
      "section_title": true,
      "ja": "4.仕様"
    },
    {
      "indent": 0,
      "text": "4.1. Format",
      "section_title": true,
      "ja": "4.1。フォーマット"
    },
    {
      "indent": 3,
      "text": "The UUID format is 16 octets; some bits of the eight octet variant field specified below determine finer structure.",
      "ja": "UUIDの形式は16オクテットです。以下に指定8つのオクテットのバリアントフィールドの一部のビットは、より細かい構造を決定します。"
    },
    {
      "indent": 0,
      "text": "4.1.1. Variant",
      "section_title": true,
      "ja": "4.1.1。バリアント"
    },
    {
      "indent": 3,
      "text": "The variant field determines the layout of the UUID. That is, the interpretation of all other bits in the UUID depends on the setting of the bits in the variant field. As such, it could more accurately be called a type field; we retain the original term for compatibility. The variant field consists of a variable number of the most significant bits of octet 8 of the UUID.",
      "ja": "バリアントフィールドは、UUIDのレイアウトを決定します。それはUUID内の他のすべてのビットの解釈は、変種フィールド内のビットの設定に依存しています。このように、それはより正確にタイプフィールドと呼ばれることができ;私たちは、互換性のため、元の用語を保持します。バリアントフィールドは、UUIDのオクテット8の最上位ビットの可変数から成ります。"
    },
    {
      "indent": 3,
      "text": "The following table lists the contents of the variant field, where the letter \"x\" indicates a \"don't-care\" value.",
      "ja": "次の表は、文字が「ドント・ケア」の値を示し、「×」は、変異体フィールドの内容を示しています。"
    },
    {
      "indent": 3,
      "text": "Msb0 Msb1 Msb2 Description",
      "ja": "MSB0 MSB1 MSB2説明"
    },
    {
      "indent": 4,
      "text": "0 x x Reserved, NCS backward compatibility.",
      "ja": "0 X X予約、NCS下位互換性。"
    },
    {
      "indent": 4,
      "text": "1 0 x The variant specified in this document.",
      "ja": "1 0は、この文書で指定されたバリアントをxは。"
    },
    {
      "indent": 4,
      "text": "1 1 0 Reserved, Microsoft Corporation backward compatibility",
      "ja": "1 1 0予約、米国Microsoft Corporationの下位互換性"
    },
    {
      "indent": 4,
      "text": "1 1 1 Reserved for future definition.",
      "ja": "1 1 1将来の定義のために予約されています。"
    },
    {
      "indent": 3,
      "text": "Interoperability, in any form, with variants other than the one defined here is not guaranteed, and is not likely to be an issue in practice.",
      "ja": "相互運用性は、任意の形式で、ここで定義されたもの以外のバリエーションで保証されませんし、実際に問題になりそうではありません。"
    },
    {
      "indent": 0,
      "text": "4.1.2. Layout and Byte Order",
      "section_title": true,
      "ja": "4.1.2。レイアウトとバイト順"
    },
    {
      "indent": 3,
      "text": "To minimize confusion about bit assignments within octets, the UUID record definition is defined only in terms of fields that are integral numbers of octets. The fields are presented with the most significant one first.",
      "ja": "オクテット内のビット割り当てについての混乱を最小限に抑えるために、UUIDレコード定義だけオクテットの整数ある分野の用語で定義されています。フィールドには、最初に最も重要なものとされています。"
    },
    {
      "indent": 3,
      "text": "Field Data Type Octet Note #",
      "ja": "フィールドデータ型オクテットノート＃"
    },
    {
      "indent": 3,
      "text": "time_low unsigned 32 0-3 The low field of the bit integer timestamp",
      "ja": "ビット整数のタイムスタンプの符号なし32 0-3低いフィールドをtime_low"
    },
    {
      "indent": 3,
      "text": "time_mid unsigned 16 4-5 The middle field of the bit integer timestamp",
      "ja": "ビット整数のタイムスタンプの中間フィールドは符号なし16 4-5 time_mid"
    },
    {
      "indent": 3,
      "text": "time_hi_and_version unsigned 16 6-7 The high field of the bit integer timestamp multiplexed with the version number",
      "ja": "16 6-7バージョン番号と多重化ビット整数のタイムスタンプの高いフィールド符号なしtime_hi_and_version"
    },
    {
      "indent": 3,
      "text": "clock_seq_hi_and_rese unsigned 8 8 The high field of the rved bit integer clock sequence multiplexed with the variant",
      "ja": "clock_seq_hi_and_rese符号なし8 8バリアントと多重rvedビット整数クロック配列の高い分野"
    },
    {
      "indent": 3,
      "text": "clock_seq_low unsigned 8 9 The low field of the bit integer clock sequence",
      "ja": "ビット整数クロック・シーケンスのclock_seq_low符号なし8 9低磁場"
    },
    {
      "indent": 3,
      "text": "node unsigned 48 10-15 The spatially unique bit integer node identifier",
      "ja": "符号なしのノード48 10-15空間的にユニークなビット整数ノード識別子"
    },
    {
      "indent": 3,
      "text": "In the absence of explicit application or presentation protocol specification to the contrary, a UUID is encoded as a 128-bit object, as follows:",
      "ja": "次のように逆に明示的アプリケーションまたはプレゼンテーションプロトコル仕様の非存在下で、UUIDは、128ビットのオブジェクトとして符号化されます。"
    },
    {
      "indent": 3,
      "text": "The fields are encoded as 16 octets, with the sizes and order of the fields defined above, and with each field encoded with the Most Significant Byte first (known as network byte order). Note that the field names, particularly for multiplexed fields, follow historical practice.",
      "ja": "フィールドは、上記で定義されたフィールドのサイズや順序で、16個のオクテットとして符号化され、各フィールドで最初の（ネットワークバイト順としても知られる）、最上位バイトで符号化されます。特に多重フィールドのフィールド名は、歴史的な慣行に従うことに注意してください。"
    },
    {
      "indent": 3,
      "text": "0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                          time_low                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|       time_mid                |         time_hi_and_version   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|clk_seq_hi_res |  clk_seq_low  |         node (0-1)            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                         node (2-5)                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4.1.3. Version",
      "section_title": true,
      "ja": "4.1.3。版"
    },
    {
      "indent": 3,
      "text": "The version number is in the most significant 4 bits of the time stamp (bits 4 through 7 of the time_hi_and_version field).",
      "ja": "バージョン番号は、タイムスタンプの最上位4ビット（ビットtime_hi_and_versionフィールドの4〜7）です。"
    },
    {
      "indent": 3,
      "text": "The following table lists the currently-defined versions for this UUID variant.",
      "ja": "次の表は、このUUIDバリアントの現在定義されているバージョンを示します。"
    },
    {
      "indent": 3,
      "text": "Msb0 Msb1 Msb2 Msb3 Version Description",
      "ja": "MSB0 MSB1 MSB2 MSB3バージョン説明"
    },
    {
      "indent": 4,
      "text": "0 0 0 1 1 The time-based version specified in this document.",
      "ja": "0 0 0 1 1この文書で指定された時間ベースのバージョン。"
    },
    {
      "indent": 4,
      "text": "0 0 1 0 2 DCE Security version, with embedded POSIX UIDs.",
      "ja": "埋め込まれたPOSIX UIDを持つ0 0 1 0 2 DCEセキュリティバージョン、。"
    },
    {
      "indent": 4,
      "text": "0 0 1 1 3 The name-based version specified in this document that uses MD5 hashing.",
      "ja": "0 0 1 1 3 MD5ハッシュを使用して、この文書で指定された名前ベースのバージョン。"
    },
    {
      "indent": 4,
      "text": "0 1 0 0 4 The randomly or pseudo-randomly generated version specified in this document.",
      "ja": "0 1 0 0 4本書で指定されたランダムまたは擬似ランダムに生成されたバージョン。"
    },
    {
      "indent": 4,
      "text": "0 1 0 1 5 The name-based version specified in this document that uses SHA-1 hashing.",
      "ja": "0 1 0 1 5 SHA-1ハッシュを使用して、この文書で指定された名前ベースのバージョン。"
    },
    {
      "indent": 3,
      "text": "The version is more accurately a sub-type; again, we retain the term for compatibility.",
      "ja": "バージョンは、より正確に、サブタイプです。再び、我々は互換性のための用語を保持しています。"
    },
    {
      "indent": 0,
      "text": "4.1.4. Timestamp",
      "section_title": true,
      "ja": "4.1.4。タイムスタンプ"
    },
    {
      "indent": 3,
      "text": "The timestamp is a 60-bit value. For UUID version 1, this is represented by Coordinated Universal Time (UTC) as a count of 100- nanosecond intervals since 00:00:00.00, 15 October 1582 (the date of Gregorian reform to the Christian calendar).",
      "ja": "タイムスタンプは60ビット値です。 00：：UUIDバージョン1の場合、これは、00から100  - ナノ秒間隔の数として協定世界時（UTC）で表され、00.00、1582年10月15日（キリスト教の暦にグレゴリオ改革の日付）。"
    },
    {
      "indent": 3,
      "text": "For systems that do not have UTC available, but do have the local time, they may use that instead of UTC, as long as they do so consistently throughout the system. However, this is not recommended since generating the UTC from local time only needs a time zone offset.",
      "ja": "UTCが利用可能持っていますが、現地時間を持っているしていないシステムでは、彼らがいる限り、彼らはシステム全体にとても一貫しそうであるように、UTCの代わりにこれを使用することができます。しかし、これが唯一のタイムゾーンオフセットを必要とするローカルタイムからUTCを生成するのでお勧めしません。"
    },
    {
      "indent": 3,
      "text": "For UUID version 3 or 5, the timestamp is a 60-bit value constructed from a name as described in Section 4.3.",
      "ja": "UUIDバージョン3または5のために、タイムスタンプは、第4.3節で説明したように名前から構成60ビット値です。"
    },
    {
      "indent": 3,
      "text": "For UUID version 4, the timestamp is a randomly or pseudo-randomly generated 60-bit value, as described in Section 4.4.",
      "ja": "セクション4.4で説明したようにUUIDバージョン4のために、タイムスタンプは、ランダムにまたは擬似ランダムに生成された60ビットの値です。"
    },
    {
      "indent": 0,
      "text": "4.1.5. Clock Sequence",
      "section_title": true,
      "ja": "4.1.5。クロックシーケンス"
    },
    {
      "indent": 3,
      "text": "For UUID version 1, the clock sequence is used to help avoid duplicates that could arise when the clock is set backwards in time or if the node ID changes.",
      "ja": "UUIDバージョン1の場合、クロックシーケンスは、クロックが時間内またはノードIDが変化した場合に後方に設定された場合に発生する可能性があり、重複を避けるために使用されています。"
    },
    {
      "indent": 3,
      "text": "If the clock is set backwards, or might have been set backwards (e.g., while the system was powered off), and the UUID generator can not be sure that no UUIDs were generated with timestamps larger than the value to which the clock was set, then the clock sequence has to be changed. If the previous value of the clock sequence is known, it can just be incremented; otherwise it should be set to a random or high-quality pseudo-random value.",
      "ja": "クロックが逆方向に設定されている、または後方に設定されている可能性がある場合（例えば、システムの電源がオフしている間）、およびUUIDジェネレータは何のUUIDは、クロックが設定されている値より大きいタイムスタンプで生成されなかったことを確認することができません、その後、クロック・シーケンスを変更する必要があります。クロックシーケンスの前の値がわかっている場合は、それだけインクリメントすることができます。そうでない場合は、ランダムまたは高品質の擬似ランダム値に設定されるべきです。"
    },
    {
      "indent": 3,
      "text": "Similarly, if the node ID changes (e.g., because a network card has been moved between machines), setting the clock sequence to a random number minimizes the probability of a duplicate due to slight differences in the clock settings of the machines. If the value of clock sequence associated with the changed node ID were known, then the clock sequence could just be incremented, but that is unlikely.",
      "ja": "同様に、ノードIDが変化する（例えば、ネットワークカードがマシン間で移動されたため）場合、乱数にクロックシーケンスを設定することにより、マシンのクロック設定のわずかな違いに重複の確率を最小限に抑えます。変更されたノードのIDに関連付けられたクロックシーケンスの値が知られていた場合には、クロックシーケンスは、単にインクリメントすることができ、それはそうです。"
    },
    {
      "indent": 3,
      "text": "The clock sequence MUST be originally (i.e., once in the lifetime of a system) initialized to a random number to minimize the correlation across systems. This provides maximum protection against node identifiers that may move or switch from system to system rapidly. The initial value MUST NOT be correlated to the node identifier.",
      "ja": "クロックシーケンスは、元々（即ち、一度システムの寿命の）システム間の相関を最小にするために、乱数に初期化されなければなりません。これは、急速にシステムにシステムから移動したり切り替えることができるノード識別子に対する最大限の保護を提供します。初期値は、ノード識別子と相関してはいけません。"
    },
    {
      "indent": 3,
      "text": "For UUID version 3 or 5, the clock sequence is a 14-bit value constructed from a name as described in Section 4.3.",
      "ja": "UUIDバージョン3または5のために、クロックシーケンスは、セクション4.3で説明したように名前から構成され、14ビットの値です。"
    },
    {
      "indent": 3,
      "text": "For UUID version 4, clock sequence is a randomly or pseudo-randomly generated 14-bit value as described in Section 4.4.",
      "ja": "UUIDバージョン4のために、クロックシーケンスは、セクション4.4で説明したように、ランダムまたは疑似ランダムに生成された14ビットの値です。"
    },
    {
      "indent": 0,
      "text": "4.1.6. Node",
      "section_title": true,
      "ja": "４。１。６。 ので"
    },
    {
      "indent": 3,
      "text": "For UUID version 1, the node field consists of an IEEE 802 MAC address, usually the host address. For systems with multiple IEEE 802 addresses, any available one can be used. The lowest addressed octet (octet number 10) contains the global/local bit and the unicast/multicast bit, and is the first octet of the address transmitted on an 802.3 LAN.",
      "ja": "UUIDバージョン1の場合、ノードフィールドは、IEEE 802 MACアドレス、通常ホストアドレスで構成されています。複数のIEEE 802アドレスを持つシステムでは、使用可能な任意のものを用いることができます。最低アドレス指定オクテット（オクテット番号10）は、ローカル/グローバルビットおよびユニキャスト/マルチキャストビットを含み、802.3 LAN上で送信されたアドレスの最初のオクテットです。"
    },
    {
      "indent": 3,
      "text": "For systems with no IEEE address, a randomly or pseudo-randomly generated value may be used; see Section 4.5. The multicast bit must be set in such addresses, in order that they will never conflict with addresses obtained from network cards.",
      "ja": "無IEEEアドレスを持つシステムのために、ランダムに、または擬似ランダムに生成された値を使用することができます。 4.5節を参照してください。マルチキャストビットは、それらがネットワークカードから取得したアドレスと競合しないことをために、そのようなアドレスに設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "For UUID version 3 or 5, the node field is a 48-bit value constructed from a name as described in Section 4.3.",
      "ja": "UUIDバージョン3または5のために、ノードフィールドは、セクション4.3で説明したように名前から構成され、48ビット値です。"
    },
    {
      "indent": 3,
      "text": "For UUID version 4, the node field is a randomly or pseudo-randomly generated 48-bit value as described in Section 4.4.",
      "ja": "UUIDバージョン4のために、ノードフィールドは、セクション4.4で説明したように、ランダムまたは疑似ランダムに生成された48ビットの値です。"
    },
    {
      "indent": 0,
      "text": "4.1.7. Nil UUID",
      "section_title": true,
      "ja": "4.1.7。無記号UUID"
    },
    {
      "indent": 3,
      "text": "The nil UUID is special form of UUID that is specified to have all 128 bits set to zero.",
      "ja": "nilのUUIDはゼロに設定されているすべての128ビットを有するように指定されたUUIDの特別な形態です。"
    },
    {
      "indent": 0,
      "text": "4.2. Algorithms for Creating a Time-Based UUID",
      "section_title": true,
      "ja": "4.2。時間ベースのUUIDを作成するためのアルゴリズム"
    },
    {
      "indent": 3,
      "text": "Various aspects of the algorithm for creating a version 1 UUID are discussed in the following sections.",
      "ja": "バージョン1 UUIDを作成するためのアルゴリズムの様々な態様は、以下のセクションで議論されています。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Basic Algorithm",
      "section_title": true,
      "ja": "4.2.1。基本的なアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The following algorithm is simple, correct, and inefficient:",
      "ja": "次のアルゴリズムは、簡単で正確、かつ非効率的です："
    },
    {
      "indent": 3,
      "text": "o Obtain a system-wide global lock",
      "ja": "Oシステム全体のグローバルロックを取得"
    },
    {
      "indent": 3,
      "text": "o From a system-wide shared stable store (e.g., a file), read the UUID generator state: the values of the timestamp, clock sequence, and node ID used to generate the last UUID.",
      "ja": "最後のUUIDを生成するために使用されるタイムスタンプ、クロック・シーケンスの値、およびノー​​ドID：Oシステム全体の共有安定ストア（例えば、ファイル）から、UUIDジェネレータ状態を読み出します。"
    },
    {
      "indent": 3,
      "text": "o Get the current time as a 60-bit count of 100-nanosecond intervals since 00:00:00.00, 15 October 1582.",
      "ja": "1582年10月00.00、15：00：O 00から100ナノ秒間隔の60ビット数として現在の時刻を取得します。"
    },
    {
      "indent": 3,
      "text": "o Get the current node ID.",
      "ja": "O現在のノードのIDを取得します。"
    },
    {
      "indent": 3,
      "text": "o If the state was unavailable (e.g., non-existent or corrupted), or the saved node ID is different than the current node ID, generate a random clock sequence value.",
      "ja": "O状態（例えば、存在しないまたは破損）利用できなかった、または保存されたノードIDは、現在のノードIDとは異なる、ランダムクロックシーケンス値を生成する場合。"
    },
    {
      "indent": 3,
      "text": "o If the state was available, but the saved timestamp is later than the current timestamp, increment the clock sequence value.",
      "ja": "状態は利用可能でしたが、保存されたタイムスタンプは、現在のタイムスタンプより後であればO、クロックシーケンス値をインクリメントします。"
    },
    {
      "indent": 3,
      "text": "o Save the state (current timestamp, clock sequence, and node ID) back to the stable store.",
      "ja": "Oバック安定した店舗への状態（現在のタイムスタンプ、クロックシーケンス、およびノー​​ドID）を保存します。"
    },
    {
      "indent": 3,
      "text": "o Release the global lock.",
      "ja": "Oグローバルロックを解除してください。"
    },
    {
      "indent": 3,
      "text": "o Format a UUID from the current timestamp, clock sequence, and node ID values according to the steps in Section 4.2.2.",
      "ja": "O 4.2.2の手順に従って現在のタイムスタンプ、クロックシーケンス、およびノー​​ドID値からUUIDをフォーマット。"
    },
    {
      "indent": 3,
      "text": "If UUIDs do not need to be frequently generated, the above algorithm may be perfectly adequate. For higher performance requirements, however, issues with the basic algorithm include:",
      "ja": "UUIDが頻繁に生成する必要がない場合は、上記のアルゴリズムは完全に十分であります。より高いパフォーマンスの要件については、しかし、基本的なアルゴリズムの問​​題は、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Reading the state from stable storage each time is inefficient.",
      "ja": "O安定した記憶装置からその都度状態を読み出すことは非効率的です。"
    },
    {
      "indent": 3,
      "text": "o The resolution of the system clock may not be 100-nanoseconds.",
      "ja": "Oシステム・クロックの分解能が100ナノ秒でなくてもよいです。"
    },
    {
      "indent": 3,
      "text": "o Writing the state to stable storage each time is inefficient.",
      "ja": "安定したストレージに状態を書き込むoを各時間が非効率的です。"
    },
    {
      "indent": 3,
      "text": "o Sharing the state across process boundaries may be inefficient.",
      "ja": "Oプロセスの境界を越えて状態を共有することは効率的ではありません。"
    },
    {
      "indent": 3,
      "text": "Each of these issues can be addressed in a modular fashion by local improvements in the functions that read and write the state and read the clock. We address each of them in turn in the following sections.",
      "ja": "これらの問題のそれぞれは、読みと状態を書き込み、読み出しクロックを関数内で局所的な改善により、モジュール方式で対処することができます。私たちは、次のセクションで順番にそれらのそれぞれに対応しています。"
    },
    {
      "indent": 0,
      "text": "4.2.1.1. Reading Stable Storage",
      "section_title": true,
      "ja": "4.2.1.1。安定記憶を読みます"
    },
    {
      "indent": 3,
      "text": "The state only needs to be read from stable storage once at boot time, if it is read into a system-wide shared volatile store (and updated whenever the stable store is updated).",
      "ja": "状態は、それがシステム全体で共有揮発性ストアに読み込まれ（かつ安定ストアが更新されるたびに更新）されている場合、一度起動時に安定した記憶装置から読み出される必要があります。"
    },
    {
      "indent": 3,
      "text": "If an implementation does not have any stable store available, then it can always say that the values were unavailable. This is the least desirable implementation because it will increase the frequency of creation of new clock sequence numbers, which increases the probability of duplicates.",
      "ja": "実装は任意の安定ストアが利用できていない場合、それは常に値が入手できなかったと言うことができます。それは、重複の可能性を増加させる、新しいクロックシーケンス番号の作成の頻度が増加しますので、これは最も望ましい実装です。"
    },
    {
      "indent": 3,
      "text": "If the node ID can never change (e.g., the net card is inseparable from the system), or if any change also reinitializes the clock sequence to a random value, then instead of keeping it in stable store, the current node ID may be returned.",
      "ja": "ノードIDは変更しないことができる場合（例えば、ネットカードは、システムと不可分である）、または任意の変更はまた、ランダムな値にクロックシーケンスを再初期化した場合に代わりに安定した店で、それを維持する、その後、現在のノードのIDが返されることがあります。"
    },
    {
      "indent": 0,
      "text": "4.2.1.2. System Clock Resolution",
      "section_title": true,
      "ja": "4.2.1.2。システムクロックの分解能"
    },
    {
      "indent": 3,
      "text": "The timestamp is generated from the system time, whose resolution may be less than the resolution of the UUID timestamp.",
      "ja": "タイムスタンプは、その解像度UUIDタイムスタンプの解像度未満とすることができるシステム時間から生成されます。"
    },
    {
      "indent": 3,
      "text": "If UUIDs do not need to be frequently generated, the timestamp can simply be the system time multiplied by the number of 100-nanosecond intervals per system time interval.",
      "ja": "UUIDが頻繁に生成する必要がない場合は、タイムスタンプは、単にシステムの時間間隔あたり100ナノ秒間隔の数を乗じたシステム時刻することができます。"
    },
    {
      "indent": 3,
      "text": "If a system overruns the generator by requesting too many UUIDs within a single system time interval, the UUID service MUST either return an error, or stall the UUID generator until the system clock catches up.",
      "ja": "システムは、単一のシステム時間間隔内にあまりにも多くのUUIDを要求することにより、発電機をオーバーランした場合は、UUIDのサービスはエラーを返さなければならないのいずれか、またはシステムクロックが追いつくまでUUIDジェネレータを失速します。"
    },
    {
      "indent": 3,
      "text": "A high resolution timestamp can be simulated by keeping a count of the number of UUIDs that have been generated with the same value of the system time, and using it to construct the low order bits of the timestamp. The count will range between zero and the number of 100-nanosecond intervals per system time interval.",
      "ja": "高分解能タイムスタンプはシステム時刻の同じ値を用いて生成されていたUUIDの数のカウントを維持し、タイムスタンプの下位ビットを構築するためにそれを使用してシミュレートすることができます。カウントがゼロとシステム時間間隔当たり100ナノ秒間隔の数との間の範囲であろう。"
    },
    {
      "indent": 3,
      "text": "Note: If the processors overrun the UUID generation frequently, additional node identifiers can be allocated to the system, which will permit higher speed allocation by making multiple UUIDs potentially available for each time stamp value.",
      "ja": "注意：プロセッサは頻繁UUID生成をオーバーランした場合、追加のノード識別子は、各タイムスタンプ値の複数のUUIDが潜在的に利用可能にすることにより、高速の割り当てを可能にするシステムに割り当てることができます。"
    },
    {
      "indent": 0,
      "text": "4.2.1.3. Writing Stable Storage",
      "section_title": true,
      "ja": "4.2.1.3。安定記憶を書きます"
    },
    {
      "indent": 3,
      "text": "The state does not always need to be written to stable store every time a UUID is generated. The timestamp in the stable store can be periodically set to a value larger than any yet used in a UUID. As long as the generated UUIDs have timestamps less than that value, and the clock sequence and node ID remain unchanged, only the shared volatile copy of the state needs to be updated. Furthermore, if the timestamp value in stable store is in the future by less than the typical time it takes the system to reboot, a crash will not cause a reinitialization of the clock sequence.",
      "ja": "状態は常に安定したストアにUUIDが生成されるたびに書き込まれる必要はありません。安定した店舗内のタイムスタンプは、定期的にまだUUIDに使用される任意のより大きな値に設定することができます。限り、生成されたUUIDがその値よりも小さいタイムスタンプを持っている、とクロックシーケンスとノードIDは状態の唯一の共有揮発性のコピーを更新する必要があり、変わらないとして。安定した店舗でのタイムスタンプ値は、それが再起動するシステムを要する典型的な時間未満で、将来的にであればさらに、クラッシュはクロックシーケンスの再初期化が発生することはありません。"
    },
    {
      "indent": 0,
      "text": "4.2.1.4. Sharing State Across Processes",
      "section_title": true,
      "ja": "4.2.1.4。プロセス間で状態を共有"
    },
    {
      "indent": 3,
      "text": "If it is too expensive to access shared state each time a UUID is generated, then the system-wide generator can be implemented to allocate a block of time stamps each time it is called; a per-process generator can allocate from that block until it is exhausted.",
      "ja": "それは共有状態にUUIDが生成されるたびにアクセスするためにあまりにも高価である場合には、システム全体の発電機は、タイムスタンプが呼び出されるたびにブロックを割り当てるように実装することができます。それが使い果たされるまで、プロセスごとのジェネレータは、そのブロックから割り当てることができます。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Generation Details",
      "section_title": true,
      "ja": "4.2.2。ジェネレーション詳細"
    },
    {
      "indent": 3,
      "text": "Version 1 UUIDs are generated according to the following algorithm:",
      "ja": "バージョン1つのUUIDは、次のアルゴリズムに従って生成されます。"
    },
    {
      "indent": 3,
      "text": "o Determine the values for the UTC-based timestamp and clock sequence to be used in the UUID, as described in Section 4.2.1.",
      "ja": "セクション4.2.1で説明したように、O、UUIDで使用されるUTCベースのタイムスタンプとクロックシーケンスの値を決定します。"
    },
    {
      "indent": 3,
      "text": "o For the purposes of this algorithm, consider the timestamp to be a 60-bit unsigned integer and the clock sequence to be a 14-bit unsigned integer. Sequentially number the bits in a field, starting with zero for the least significant bit.",
      "ja": "このアルゴリズムの目的のためにO、60ビットの符号なし整数とクロックシーケンスは14ビットの符号なし整数になるようにタイムスタンプを考えます。順次番号フィールドのビット、最下位ビットのためにゼロから始まります。"
    },
    {
      "indent": 3,
      "text": "o Set the time_low field equal to the least significant 32 bits (bits zero through 31) of the timestamp in the same order of significance.",
      "ja": "O意義のと同じ順序でのタイムスタンプの最下位32ビット（ビット31を通るゼロ）に等しいtime_lowフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the time_mid field equal to bits 32 through 47 from the timestamp in the same order of significance.",
      "ja": "O意義のと同じ順序でタイムスタンプからのビット47を介して32に等しいtime_midフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the 12 least significant bits (bits zero through 11) of the time_hi_and_version field equal to bits 48 through 59 from the timestamp in the same order of significance.",
      "ja": "O意義のと同じ順序でタイムスタンプから59を介してビット48に等しいtime_hi_and_versionフィールドの12個の最下位ビット（ビット11を通るゼロ）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the 4-bit version number corresponding to the UUID version being created, as shown in the table above.",
      "ja": "O上の表に示すように、作成されたUUIDのバージョンに対応する4ビットのバージョン番号にtime_hi_and_versionフィールドの4つの最上位ビット（ビット12〜15）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the clock_seq_low field to the eight least significant bits (bits zero through 7) of the clock sequence in the same order of significance.",
      "ja": "O意義のと同じ順序で、クロックシーケンスの8つの最下位ビット（ビット7を介してゼロ）にclock_seq_lowフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the 6 least significant bits (bits zero through 5) of the clock_seq_hi_and_reserved field to the 6 most significant bits (bits 8 through 13) of the clock sequence in the same order of significance.",
      "ja": "O意義のと同じ順序でクロック配列の6つの最上位ビット（ビット13を介して8）にclock_seq_hi_and_reservedフィールドの6つの最下位ビット（ビット5を介してゼロ）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.",
      "ja": "O、それぞれ0と1にclock_seq_hi_and_reservedの2つの最上位ビット（ビット6及び7）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the node field to the 48-bit IEEE address in the same order of significance as the address.",
      "ja": "Oアドレスとしての意義と同じ順序に48ビットIEEEアドレスにノード・フィールドを設定します。"
    },
    {
      "indent": 0,
      "text": "4.3. Algorithm for Creating a Name-Based UUID",
      "section_title": true,
      "ja": "4.3。名前ベースのUUIDを作成するためのアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The version 3 or 5 UUID is meant for generating UUIDs from \"names\" that are drawn from, and unique within, some \"name space\". The concept of name and name space should be broadly construed, and not limited to textual names. For example, some name spaces are the domain name system, URLs, ISO Object IDs (OIDs), X.500 Distinguished Names (DNs), and reserved words in a programming language. The mechanisms or conventions used for allocating names and ensuring their uniqueness within their name spaces are beyond the scope of this specification.",
      "ja": "バージョン3または5 UUIDは内から引き出され、そしてユニークされている「名前」、いくつかの「名前空間」からUUIDを生成するためのものです。名前と名前空間の概念は広く解釈し、テキスト名に限定されないべきです。例えば、いくつかの名前空間は、ドメインネームシステム、URLを、ISOのオブジェクトID（OIDの）X.500識別名（DN）、およびプログラミング言語の予約語です。名前を割り当て、その名前空間内のそれらの一意性を確保するために使用されるメカニズム又は規則は、本明細書の範囲外です。"
    },
    {
      "indent": 3,
      "text": "The requirements for these types of UUIDs are as follows:",
      "ja": "次のようにUUIDがこれらのタイプのための要件は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The UUIDs generated at different times from the same name in the same namespace MUST be equal.",
      "ja": "O同じ名前空間内に同じ名前から異なる時間に生成されたUUIDが等しくなければなりません。"
    },
    {
      "indent": 3,
      "text": "o The UUIDs generated from two different names in the same namespace should be different (with very high probability).",
      "ja": "O同じ名前空間内の2人の異なる名前から生成されたUUIDが（非常に高い確率で）異なるべきです。"
    },
    {
      "indent": 3,
      "text": "o The UUIDs generated from the same name in two different namespaces should be different with (very high probability).",
      "ja": "Oつの異なる名前空間に同じ名前から生成されたUUIDが（非常に高い確率）と異なるべきです。"
    },
    {
      "indent": 3,
      "text": "o If two UUIDs that were generated from names are equal, then they were generated from the same name in the same namespace (with very high probability).",
      "ja": "名前から生成された2つのUUIDが等しい場合、それらは、（非常に高い確率で）同じ名前空間に同じ名前から生成されたoを。"
    },
    {
      "indent": 3,
      "text": "The algorithm for generating a UUID from a name and a name space are as follows:",
      "ja": "次のように名前と名前空間からUUIDを生成するためのアルゴリズムは以下のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Allocate a UUID to use as a \"name space ID\" for all UUIDs generated from names in that name space; see Appendix C for some pre-defined values.",
      "ja": "Oその名前空間内の名前から生成されたすべてのUUIDのための「名前空間ID」として使用するUUIDを割り当てます。いくつかの事前定義された値については、付録Cを参照してください。"
    },
    {
      "indent": 3,
      "text": "o Choose either MD5 [4] or SHA-1 [8] as the hash algorithm; If backward compatibility is not an issue, SHA-1 is preferred.",
      "ja": "O MD5 [4]またはSHA-1 [8]ハッシュアルゴリズムなどのいずれかを選択し、下位互換性が問題でない場合は、SHA-1が好ましいです。"
    },
    {
      "indent": 3,
      "text": "o Convert the name to a canonical sequence of octets (as defined by the standards or conventions of its name space); put the name space ID in network byte order.",
      "ja": "O（標準またはその名前空間の規則によって定義される）オクテットの正規のシーケンスに名前を変換します。ネットワークバイトオーダーに名前空間のIDを入れます。"
    },
    {
      "indent": 3,
      "text": "o Compute the hash of the name space ID concatenated with the name.",
      "ja": "O名と連結ネームスペースIDのハッシュを計算します。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero through 3 of the time_low field to octets zero through 3 of the hash.",
      "ja": "O設定は、ハッシュの3によるオクテットゼロにtime_lowフィールドの3によるゼロオクテット。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero and one of the time_mid field to octets 4 and 5 of the hash.",
      "ja": "Oオクテットゼロセットとハッシュのオクテット4にtime_midフィールドの一方と5。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero and one of the time_hi_and_version field to octets 6 and 7 of the hash.",
      "ja": "Oセットゼロオクテット6にtime_hi_and_versionフィールドのハッシュの7オクテット。"
    },
    {
      "indent": 3,
      "text": "o Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the appropriate 4-bit version number from Section 4.1.3.",
      "ja": "O 4.1.3項から適切な4ビットのバージョン番号にtime_hi_and_versionフィールドの4つの最上位ビット（ビット12〜15）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the clock_seq_hi_and_reserved field to octet 8 of the hash.",
      "ja": "Oハッシュの8オクテットするclock_seq_hi_and_reservedフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.",
      "ja": "O、それぞれ0と1にclock_seq_hi_and_reservedの2つの最上位ビット（ビット6及び7）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the clock_seq_low field to octet 9 of the hash.",
      "ja": "Oハッシュの9オクテットするclock_seq_lowフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "o Set octets zero through five of the node field to octets 10 through 15 of the hash.",
      "ja": "Oセットは、ハッシュの15を介してオクテット10にノードフィールドの5を介してゼロオクテット。"
    },
    {
      "indent": 3,
      "text": "o Convert the resulting UUID to local byte order.",
      "ja": "Oローカルバイト順に結果のUUIDを変換します。"
    },
    {
      "indent": 0,
      "text": "4.4. Algorithms for Creating a UUID from Truly Random or Pseudo-Random Numbers",
      "ja": "4.4。真にランダムまたは擬似乱数からUUIDを作成するためのアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.",
      "ja": "バージョン4 UUIDは、真にランダムまたは疑似乱数からUUIDを生成することを意味します。"
    },
    {
      "indent": 3,
      "text": "The algorithm is as follows:",
      "ja": "次のようなアルゴリズムは次のようになります。"
    },
    {
      "indent": 3,
      "text": "o Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.",
      "ja": "O、それぞれ0と1にclock_seq_hi_and_reservedの2つの最上位ビット（ビット6及び7）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set the four most significant bits (bits 12 through 15) of the time_hi_and_version field to the 4-bit version number from Section 4.1.3.",
      "ja": "O 4.1.3項から4ビットのバージョン番号にtime_hi_and_versionフィールドの4つの最上位ビット（ビット12〜15）を設定します。"
    },
    {
      "indent": 3,
      "text": "o Set all the other bits to randomly (or pseudo-randomly) chosen values.",
      "ja": "Oすべての他のビットにランダム（又は擬似ランダムに）選択された値を設定します。"
    },
    {
      "indent": 3,
      "text": "See Section 4.5 for a discussion on random numbers.",
      "ja": "乱数についての議論については、セクション4.5を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.5. Node IDs that Do Not Identify the Host",
      "section_title": true,
      "ja": "4.5。ホストを識別しないノードID"
    },
    {
      "indent": 3,
      "text": "This section describes how to generate a version 1 UUID if an IEEE 802 address is not available, or its use is not desired.",
      "ja": "ここでは、IEEE 802個のアドレスが利用できない、または使用したくない場合はバージョン1 UUIDを生成する方法について説明します。"
    },
    {
      "indent": 3,
      "text": "One approach is to contact the IEEE and get a separate block of addresses. At the time of writing, the application could be found at <http://standards.ieee.org/regauth/oui/pilot-ind.html>, and the cost was US$550.",
      "ja": "一つのアプローチは、IEEEに連絡して、アドレスの別々のブロックを取得することです。執筆時点では、アプリケーションは、<http://standards.ieee.org/regauth/oui/pilot-ind.html>で見つけることができ、かつコストは、米国$ 550でした。"
    },
    {
      "indent": 3,
      "text": "A better solution is to obtain a 47-bit cryptographic quality random number and use it as the low 47 bits of the node ID, with the least significant bit of the first octet of the node ID set to one. This bit is the unicast/multicast bit, which will never be set in IEEE 802 addresses obtained from network cards. Hence, there can never be a conflict between UUIDs generated by machines with and without network cards. (Recall that the IEEE 802 spec talks about transmission order, which is the opposite of the in-memory representation that is discussed in this document.)",
      "ja": "よりよい解決策は、47ビットの暗号化品質の乱数を取得し、いずれかに設定されたノードIDの最初のオクテットの最下位ビットと、ノードIDの下位47ビットとしてそれを使用することです。このビットは、ネットワークカードから取得したIEEE 802アドレスに設定されることはありませんユニキャスト/マルチキャストビット、です。したがって、ネットワークカードとないマシンで生成されたUUIDとの間に矛盾があることはありません。 （この文書に記載されているメモリ内表現の反対側の送信順序に関するIEEE 802規格交渉ことを思い出してください。）"
    },
    {
      "indent": 3,
      "text": "For compatibility with earlier specifications, note that this document uses the unicast/multicast bit, instead of the arguably more correct local/global bit.",
      "ja": "以前の仕様との互換性のために、このドキュメントではなく、間違いなく、より正確なグローバル/ローカルビットで、ユニキャスト/マルチキャストビットを使用することに注意してください。"
    },
    {
      "indent": 3,
      "text": "Advice on generating cryptographic-quality random numbers can be found in RFC1750 [5].",
      "ja": "暗号品質の乱数を生成するのアドバイスは、RFC1750に記載されています[5]。"
    },
    {
      "indent": 3,
      "text": "In addition, items such as the computer's name and the name of the operating system, while not strictly speaking random, will help differentiate the results from those obtained by other systems.",
      "ja": "また、このようなコンピュータ名とオペレーティングシステムの名前などの項目は、厳密に言えばランダムではないが、他のシステムによって得られたものの中から結果を区別するのに役立ちます。"
    },
    {
      "indent": 3,
      "text": "The exact algorithm to generate a node ID using these data is system specific, because both the data available and the functions to obtain them are often very system specific. A generic approach, however, is to accumulate as many sources as possible into a buffer, use a message digest such as MD5 [4] or SHA-1 [8], take an arbitrary 6 bytes from the hash value, and set the multicast bit as described above.",
      "ja": "これらのデータを用いて、ノードIDを生成するための正確なアルゴリズムは、利用可能なデータおよび機能の両方を得ることがので、それらはしばしば非常にシステムに特異的であり、システム固有です。一般的なアプローチは、しかし、[4]またはSHA-1 [8]、ハッシュ値から任意の6つのバイトを取り、マルチキャストを設定MD5などダイジェスト、バッファ内にできるだけ多くの情報源を蓄積メッセージを使用することです上記のようにビット。"
    },
    {
      "indent": 0,
      "text": "5. Community Considerations",
      "section_title": true,
      "ja": "5.コミュニティの考慮事項"
    },
    {
      "indent": 3,
      "text": "The use of UUIDs is extremely pervasive in computing. They comprise the core identifier infrastructure for many operating systems (Microsoft Windows) and applications (the Mozilla browser) and in many cases, become exposed to the Web in many non-standard ways.",
      "ja": "UUIDの使用は、コンピューティングでは非常に普及しています。彼らは、多くのオペレーティングシステム（Microsoft Windowsの）とアプリケーション（Mozillaブラウザ）のコア識別子インフラストラクチャを含み、多くの場合、多くの非標準的な方法でWebに公開になります。"
    },
    {
      "indent": 3,
      "text": "This specification attempts to standardize that practice as openly as possible and in a way that attempts to benefit the entire Internet.",
      "ja": "この仕様は、できるだけとインターネット全体の利益のためにしようとした方法でのように公然とその実践を標準化しようとします。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Do not assume that UUIDs are hard to guess; they should not be used as security capabilities (identifiers whose mere possession grants access), for example. A predictable random number source will exacerbate the situation.",
      "ja": "UUIDが推測しにくいことを前提としないでください。彼らは、たとえば、セキュリティ機能（その単なる所持のアクセスを許可する識別子）として使用すべきではありません。予測可能な乱数源は、状況を悪化させるだろう。"
    },
    {
      "indent": 3,
      "text": "Do not assume that it is easy to determine if a UUID has been slightly transposed in order to redirect a reference to another object. Humans do not have the ability to easily check the integrity of a UUID by simply glancing at it.",
      "ja": "UUIDが少し別のオブジェクトへの参照をリダイレクトするために転置されているかどうかを判断するのは簡単であることを前提としないでください。人間は簡単に、単純にそれをちらっと見によってUUIDの整合性をチェックする機能を持っていません。"
    },
    {
      "indent": 3,
      "text": "Distributed applications generating UUIDs at a variety of hosts must be willing to rely on the random number source at all hosts. If this is not feasible, the namespace variant should be used.",
      "ja": "様々な宿主でUUIDを生成する分散アプリケーションは、すべてのホストで乱数源に頼ることをいとわなければなりません。これが不可能な場合は、名前空間のバリアントを使用する必要があります。"
    },
    {
      "indent": 0,
      "text": "7. Acknowledgments",
      "section_title": true,
      "ja": "7.謝辞"
    },
    {
      "indent": 3,
      "text": "This document draws heavily on the OSF DCE specification for UUIDs. Ted Ts'o provided helpful comments, especially on the byte ordering section which we mostly plagiarized from a proposed wording he supplied (all errors in that section are our responsibility, however).",
      "ja": "この文書では、UUIDのためのOSF DCE仕様に大きく描画します。テッドTs'oさんは、特に私たちは、主に彼が（そのセクション内のすべてのエラーがしかし、私たちの責任である）供給提案文言から盗用バイト順序部に、役に立つコメントを提供しました。"
    },
    {
      "indent": 3,
      "text": "We are also grateful to the careful reading and bit-twiddling of Ralf S. Engelschall, John Larmouth, and Paul Thorpe. Professor Larmouth was also invaluable in achieving coordination with ISO/IEC.",
      "ja": "我々はまた、ラルフS. Engelschall氏、ジョン・Larmouth、そしてポール・ソープを注意深く読むと、ビットいじるに感謝しています。教授Larmouthまた、ISO / IECとの連携を実現する上で非常に貴重でした。"
    },
    {
      "indent": 0,
      "text": "8. Normative References",
      "section_title": true,
      "ja": "8.引用規格"
    },
    {
      "indent": 3,
      "text": "[1] Zahn, L., Dineen, T., and P. Leach, \"Network Computing Architecture\", ISBN 0-13-611674-4, January 1990.",
      "ja": "[1]ザーン、L.、Dineen、T.、およびP.リーチ、 \"ネットワーク・コンピューティング・アーキテクチャ\"、ISBN 0-13-611674-4、1990年1月。"
    },
    {
      "indent": 3,
      "text": "[2] \"DCE: Remote Procedure Call\", Open Group CAE Specification C309, ISBN 1-85912-041-5, August 1994.",
      "ja": "[2] \"DCE：リモートプロシージャコール\"、Open GroupのCAE仕様C309、ISBN 1-85912-041-5、1994年8月。"
    },
    {
      "indent": 3,
      "text": "[3] ISO/IEC 9834-8:2004 Information Technology, \"Procedures for the operation of OSI Registration Authorities: Generation and registration of Universally Unique Identifiers (UUIDs) and their use as ASN.1 Object Identifier components\" ITU-T Rec. X.667, 2004.",
      "ja": "[3] ISO / IEC 9834から8：2004情報技術を、「OSI登録機関の運転のための手順：生成と登録の汎用一意識別子（UUIDに）のとASN.1オブジェクト識別子の部品としての使用」ITU-T勧告。 X.667、2004。"
    },
    {
      "indent": 3,
      "text": "[4] Rivest, R., \"The MD5 Message-Digest Algorithm \", RFC 1321, April 1992.",
      "ja": "[4]リベスト、R.、 \"MD5メッセージダイジェストアルゴリズム\"、RFC 1321、1992年4月。"
    },
    {
      "indent": 3,
      "text": "[5] Eastlake, D., 3rd, Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, June 2005.",
      "ja": "[5]イーストレーク、D.、3、シラー、J.、およびS.クロッカー、BCP 106、RFC 4086、2005年6月 \"セキュリティのためにランダム要件\"。"
    },
    {
      "indent": 3,
      "text": "[6] Moats, R., \"URN Syntax\", RFC 2141, May 1997.",
      "ja": "[6]堀、R.、 \"URN構文\"、RFC 2141、1997月。"
    },
    {
      "indent": 3,
      "text": "[7] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", RFC 2234, November 1997.",
      "ja": "[7]クロッカー、D.、およびP. Overell、 \"構文仕様のための増大しているBNF：ABNF\"、RFC 2234、1997年11月。"
    },
    {
      "indent": 3,
      "text": "[8] National Institute of Standards and Technology, \"Secure Hash Standard\", FIPS PUB 180-1, April 1995, <http://www.itl.nist.gov/fipspubs/fip180-1.htm>.",
      "ja": "[8]アメリカ国立標準技術研究所、 \"セキュアハッシュ標準\"、FIPS PUB 180-1の、1995年4月、<http://www.itl.nist.gov/fipspubs/fip180-1.htm>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. - Sample Implementation",
      "ja": "付録A.  - サンプル実装"
    },
    {
      "indent": 3,
      "text": "This implementation consists of 5 files: uuid.h, uuid.c, sysdep.h, sysdep.c and utest.c. The uuid.* files are the system independent implementation of the UUID generation algorithms described above, with all the optimizations described above except efficient state sharing across processes included. The code has been tested on Linux (Red Hat 4.0) with GCC (2.7.2), and Windows NT 4.0 with VC++ 5.0. The code assumes 64-bit integer support, which makes it much clearer.",
      "ja": "uuid.h、uuid.c、sysdep.h、sysdep.cとutest.c：この実装では、5つのファイルで構成されています。プロセス間で効率的な状態の共有以外は、上記すべての最適化が含まとUUID。*ファイルは、上述したUUID生成アルゴリズムのシステムに依存しない実装されています。コードはVC ++ 5.0とGCC（2.7.2）、およびWindows NT 4.0でのLinux（Red Hatの4.0）でテストされています。コードは、それがより明確になり、64ビット整数のサポートを、前提としています。"
    },
    {
      "indent": 3,
      "text": "All the following source files should have the following copyright notice included:",
      "ja": "以下のすべてのソースファイルは、以下の著作権表示が含まれている必要があります。"
    },
    {
      "indent": 0,
      "text": "copyrt.h",
      "ja": "copyrt.h"
    },
    {
      "indent": 0,
      "text": "/*\n** Copyright (c) 1990- 1993, 1996 Open Software Foundation, Inc.\n** Copyright (c) 1989 by Hewlett-Packard Company, Palo Alto, Ca. &\n** Digital Equipment Corporation, Maynard, Mass.\n** Copyright (c) 1998 Microsoft.\n** To anyone who acknowledges that this file is provided \"AS IS\"\n** without any express or implied warranty: permission to use, copy,\n** modify, and distribute this file for any purpose is hereby\n** granted without fee, provided that the above copyright notices and\n** this notice appears in all source code copies, and that none of\n** the names of Open Software Foundation, Inc., Hewlett-Packard\n** Company, Microsoft, or Digital Equipment Corporation be used in\n** advertising or publicity pertaining to distribution of the software\n** without specific, written prior permission. Neither Open Software\n** Foundation, Inc., Hewlett-Packard Company, Microsoft, nor Digital\n** Equipment Corporation makes any representations about the\n** suitability of this software for any purpose.\n*/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "uuid.h",
      "ja": "uuid.h"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n#undef uuid_t\ntypedef struct {\n    unsigned32  time_low;\n    unsigned16  time_mid;\n    unsigned16  time_hi_and_version;\n    unsigned8   clock_seq_hi_and_reserved;\n    unsigned8   clock_seq_low;\n    byte        node[6];\n} uuid_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create -- generate a UUID */\nint uuid_create(uuid_t * uuid);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create_md5_from_name -- create a version 3 (MD5) UUID using a\n   \"name\" from a \"name space\" */\nvoid uuid_create_md5_from_name(\n    uuid_t *uuid,         /* resulting UUID */\n    uuid_t nsid,          /* UUID of the namespace */\n    void *name,           /* the name from which to generate a UUID */\n    int namelen           /* the length of the name */\n);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create_sha1_from_name -- create a version 5 (SHA-1) UUID\n   using a \"name\" from a \"name space\" */\nvoid uuid_create_sha1_from_name(",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    uuid_t *uuid,         /* resulting UUID */\n    uuid_t nsid,          /* UUID of the namespace */\n    void *name,           /* the name from which to generate a UUID */\n    int namelen           /* the length of the name */\n);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_compare --  Compare two UUID's \"lexically\" and return\n        -1   u1 is lexically before u2\n         0   u1 is equal to u2\n         1   u1 is lexically after u2\n   Note that lexical ordering is not temporal ordering!\n*/\nint uuid_compare(uuid_t *u1, uuid_t *u2);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "uuid.c",
      "ja": "uuid.c"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\" #include <string.h> #include <stdio.h> #include <stdlib.h> #include <time.h> #include \"sysdep.h\" #include \"uuid.h\"",
      "ja": "#include \"copyrt.h\" の#include <string.hの>書式#include <stdio.hに>する#include <stdlib.h>に含まする#include <TIME.H>の#include \"sysdep.h\" の#include \"uuid.h\""
    },
    {
      "indent": 0,
      "text": "/* various forward declarations */\nstatic int read_state(unsigned16 *clockseq, uuid_time_t *timestamp,\n    uuid_node_t *node);\nstatic void write_state(unsigned16 clockseq, uuid_time_t timestamp,\n    uuid_node_t node);\nstatic void format_uuid_v1(uuid_t *uuid, unsigned16 clockseq,\n    uuid_time_t timestamp, uuid_node_t node);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "static void format_uuid_v3or5(uuid_t *uuid, unsigned char hash[16],\n    int v);\nstatic void get_current_time(uuid_time_t *timestamp);\nstatic unsigned16 true_random(void);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_create -- generator a UUID */\nint uuid_create(uuid_t *uuid)\n{\n     uuid_time_t timestamp, last_time;\n     unsigned16 clockseq;\n     uuid_node_t node;\n     uuid_node_t last_node;\n     int f;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "/* acquire system-wide lock so we're alone */\nLOCK;\n/* get time, node ID, saved state from non-volatile storage */\nget_current_time(&timestamp);\nget_ieee_node_identifier(&node);\nf = read_state(&clockseq, &last_time, &last_node);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "/* if no NV state, or if clock went backwards, or node ID\n   changed (e.g., new network card) change clockseq */\nif (!f || memcmp(&node, &last_node, sizeof node))\n    clockseq = true_random();\nelse if (timestamp < last_time)\n    clockseq++;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "/* save the state for next time */\nwrite_state(clockseq, timestamp, node);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 5,
      "text": "UNLOCK;",
      "ja": "UNLOCK;"
    },
    {
      "indent": 0,
      "text": "     /* stuff fields into the UUID */\n     format_uuid_v1(uuid, clockseq, timestamp, node);\n     return 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* format_uuid_v1 -- make a UUID from the timestamp, clockseq,\n                     and node ID */\nvoid format_uuid_v1(uuid_t* uuid, unsigned16 clock_seq,\n                    uuid_time_t timestamp, uuid_node_t node)\n{\n    /* Construct a version 1 uuid with the information we've gathered\n       plus a few constants. */\n    uuid->time_low = (unsigned long)(timestamp & 0xFFFFFFFF);\n    uuid->time_mid = (unsigned short)((timestamp >> 32) & 0xFFFF);\n    uuid->time_hi_and_version =",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "        (unsigned short)((timestamp >> 48) & 0x0FFF);\n    uuid->time_hi_and_version |= (1 << 12);\n    uuid->clock_seq_low = clock_seq & 0xFF;\n    uuid->clock_seq_hi_and_reserved = (clock_seq & 0x3F00) >> 8;\n    uuid->clock_seq_hi_and_reserved |= 0x80;\n    memcpy(&uuid->node, &node, sizeof uuid->node);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* data type for UUID generator persistent state */\ntypedef struct {\n    uuid_time_t  ts;       /* saved timestamp */\n    uuid_node_t  node;     /* saved node ID */\n    unsigned16   cs;       /* saved clock sequence */\n} uuid_state;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "static uuid_state st;",
      "ja": "静的uuid_state ST;"
    },
    {
      "indent": 0,
      "text": "/* read_state -- read UUID generator state from non-volatile store */\nint read_state(unsigned16 *clockseq, uuid_time_t *timestamp,\n               uuid_node_t *node)\n{\n    static int inited = 0;\n    FILE *fp;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* only need to read state once per boot */\n    if (!inited) {\n        fp = fopen(\"state\", \"rb\");\n        if (fp == NULL)\n            return 0;\n        fread(&st, sizeof st, 1, fp);\n        fclose(fp);\n        inited = 1;\n    }\n    *clockseq = st.cs;\n    *timestamp = st.ts;\n    *node = st.node;\n    return 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* write_state -- save UUID generator state back to non-volatile\n   storage */\nvoid write_state(unsigned16 clockseq, uuid_time_t timestamp,\n                 uuid_node_t node)\n{\n    static int inited = 0;\n    static uuid_time_t next_save;\n    FILE* fp; if (!inited) {\n        next_save = timestamp;\n        inited = 1;\n    }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* always save state to volatile shared state */\n    st.cs = clockseq;\n    st.ts = timestamp;\n    st.node = node;\n    if (timestamp >= next_save) {\n        fp = fopen(\"state\", \"wb\");\n        fwrite(&st, sizeof st, 1, fp);\n        fclose(fp);\n        /* schedule next save for 10 seconds from now */\n        next_save = timestamp + (10 * 10 * 1000 * 1000);\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* get-current_time -- get time as 60-bit 100ns ticks since UUID epoch.\n   Compensate for the fact that real clock resolution is\n   less than 100ns. */\nvoid get_current_time(uuid_time_t *timestamp)\n{\n    static int inited = 0;\n    static uuid_time_t time_last;\n    static unsigned16 uuids_this_tick;\n    uuid_time_t time_now;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "if (!inited) {\n    get_system_time(&time_now);\n    uuids_this_tick = UUIDS_PER_TICK;\n    inited = 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "for ( ; ; ) { get_system_time(&time_now);",
      "ja": "用（;）{get_system_time（＆TIME_NOW）。"
    },
    {
      "indent": 8,
      "text": "/* if clock reading changed since last UUID generated, */\nif (time_last != time_now) {\n    /* reset count of uuids gen'd with this clock reading */\n    uuids_this_tick = 0;\n    time_last = time_now;\n    break;\n}\nif (uuids_this_tick < UUIDS_PER_TICK) {\n    uuids_this_tick++;\n    break;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "        /* going too fast for our clock; spin */\n    }\n    /* add the count of uuids to low order bits of the clock reading */\n    *timestamp = time_now + uuids_this_tick;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* true_random -- generate a crypto-quality random number.\n   **This sample doesn't do that.** */\nstatic unsigned16 true_random(void)\n{\n    static int inited = 0;\n    uuid_time_t time_now;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "if (!inited) {\n    get_system_time(&time_now);\n    time_now = time_now / UUIDS_PER_TICK;\n    srand((unsigned int)\n           (((time_now >> 32) ^ time_now) & 0xffffffff));\n    inited = 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " return rand(); }",
      "ja": "リターンのrand（）; }"
    },
    {
      "indent": 0,
      "text": "/* uuid_create_md5_from_name -- create a version 3 (MD5) UUID using a\n   \"name\" from a \"name space\" */\nvoid uuid_create_md5_from_name(uuid_t *uuid, uuid_t nsid, void *name,\n                               int namelen)\n{\n    MD5_CTX c;\n    unsigned char hash[16];\n    uuid_t net_nsid;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "/* put name space ID in network byte order so it hashes the same\n   no matter what endian machine we're on */\nnet_nsid = nsid;\nnet_nsid.time_low = htonl(net_nsid.time_low);\nnet_nsid.time_mid = htons(net_nsid.time_mid);\nnet_nsid.time_hi_and_version = htons(net_nsid.time_hi_and_version);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "MD5Init(&c);\nMD5Update(&c, &net_nsid, sizeof net_nsid);\nMD5Update(&c, name, namelen);\nMD5Final(hash, &c);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* the hash is in network byte order at this point */\n    format_uuid_v3or5(uuid, hash, 3);\n} void uuid_create_sha1_from_name(uuid_t *uuid, uuid_t nsid, void *name,\n                                int namelen)\n{\n    SHA_CTX c;\n    unsigned char hash[20];\n    uuid_t net_nsid;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "/* put name space ID in network byte order so it hashes the same\n   no matter what endian machine we're on */\nnet_nsid = nsid;\nnet_nsid.time_low = htonl(net_nsid.time_low);\nnet_nsid.time_mid = htons(net_nsid.time_mid);\nnet_nsid.time_hi_and_version = htons(net_nsid.time_hi_and_version);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "SHA1_Init(&c);\nSHA1_Update(&c, &net_nsid, sizeof net_nsid);\nSHA1_Update(&c, name, namelen);\nSHA1_Final(hash, &c);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* the hash is in network byte order at this point */\n    format_uuid_v3or5(uuid, hash, 5);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* format_uuid_v3or5 -- make a UUID from a (pseudo)random 128-bit\n   number */\nvoid format_uuid_v3or5(uuid_t *uuid, unsigned char hash[16], int v)\n{\n    /* convert UUID to local byte order */\n    memcpy(uuid, hash, sizeof *uuid);\n    uuid->time_low = ntohl(uuid->time_low);\n    uuid->time_mid = ntohs(uuid->time_mid);\n    uuid->time_hi_and_version = ntohs(uuid->time_hi_and_version);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    /* put in the variant and version bits */\n    uuid->time_hi_and_version &= 0x0FFF;\n    uuid->time_hi_and_version |= (v << 12);\n    uuid->clock_seq_hi_and_reserved &= 0x3F;\n    uuid->clock_seq_hi_and_reserved |= 0x80;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* uuid_compare --  Compare two UUID's \"lexically\" and return */\n#define CHECK(f1, f2) if (f1 != f2) return f1 < f2 ? -1 : 1;\nint uuid_compare(uuid_t *u1, uuid_t *u2)\n{\n    int i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "CHECK(u1->time_low, u2->time_low);\nCHECK(u1->time_mid, u2->time_mid);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    CHECK(u1->time_hi_and_version, u2->time_hi_and_version);\n    CHECK(u1->clock_seq_hi_and_reserved, u2->clock_seq_hi_and_reserved);\n    CHECK(u1->clock_seq_low, u2->clock_seq_low)\n    for (i = 0; i < 6; i++) {\n        if (u1->node[i] < u2->node[i])\n            return -1;\n        if (u1->node[i] > u2->node[i])\n            return 1;\n    }\n    return 0;\n}\n#undef CHECK",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "sysdep.h",
      "ja": "sysdep.h"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n/* remove the following define if you aren't running WIN32 */\n#define WININC 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#ifdef WININC #include <windows.h> #else #include <sys/types.h> #include <sys/time.h> #include <sys/sysinfo.h> #endif",
      "ja": "#ifdefのWININCの#include <WINDOWS.H>の#elseの#includeは<sys / types.h>にする#include <SYS / TIME.H>の#include <SYS / sysinfo.h> #endifの"
    },
    {
      "indent": 0,
      "text": "#include \"global.h\"\n/* change to point to where MD5 .h's live; RFC 1321 has sample\n   implementation */\n#include \"md5.h\"",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* set the following to the number of 100ns ticks of the actual\n   resolution of your system's clock */\n#define UUIDS_PER_TICK 1024",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Set the following to a calls to get and release a global lock */\n#define LOCK\n#define UNLOCK",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "typedef unsigned long   unsigned32;\ntypedef unsigned short  unsigned16;\ntypedef unsigned char   unsigned8;\ntypedef unsigned char   byte;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Set this to what your compiler uses for 64-bit data type */\n#ifdef WININC",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#define unsigned64_t unsigned __int64 #define I64(C) C #else #define unsigned64_t unsigned long long #define I64(C) C##LL #endif",
      "ja": "#define unsigned64_t符号なし__int64用の#define I64（C）Cの#elseの#define unsigned64_t符号なし長い長の#define I64（C）C ## LL #ENDIF"
    },
    {
      "indent": 0,
      "text": "typedef unsigned64_t uuid_time_t;\ntypedef struct {\n    char nodeID[6];\n} uuid_node_t;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "void get_ieee_node_identifier(uuid_node_t *node);\nvoid get_system_time(uuid_time_t *uuid_time);\nvoid get_random_info(char seed[16]);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "sysdep.c",
      "ja": "sysdep.c"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\" #include <stdio.h> #include \"sysdep.h\"",
      "ja": "#include \"copyrt.h\" の#include <stdio.hに>の#include \"sysdep.h\""
    },
    {
      "indent": 0,
      "text": "/* system dependent call to get IEEE node ID.\n   This sample implementation generates a random node ID. */\nvoid get_ieee_node_identifier(uuid_node_t *node)\n{\n    static inited = 0;\n    static uuid_node_t saved_node;\n    char seed[16];\n    FILE *fp;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "if (!inited) {\n    fp = fopen(\"nodeid\", \"rb\");\n    if (fp) {\n        fread(&saved_node, sizeof saved_node, 1, fp);\n        fclose(fp);\n    }\n    else {\n        get_random_info(seed);\n        seed[0] |= 0x01;\n        memcpy(&saved_node, seed, sizeof saved_node);\n        fp = fopen(\"nodeid\", \"wb\");\n        if (fp) {\n            fwrite(&saved_node, sizeof saved_node, 1, fp);\n            fclose(fp);\n        }\n    } inited = 1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " *node = saved_node; }",
      "ja": "*ノード= saved_node。 }"
    },
    {
      "indent": 0,
      "text": "/* system dependent call to get the current system time. Returned as\n   100ns ticks since UUID epoch, but resolution may be less than\n   100ns. */\n#ifdef _WINDOWS_",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "void get_system_time(uuid_time_t *uuid_time) { ULARGE_INTEGER time;",
      "ja": "ボイドget_system_time（uuid_time_t * uuid_time）{ULARGE_INTEGER時間。"
    },
    {
      "indent": 4,
      "text": "/* NT keeps time in FILETIME format which is 100ns ticks since\n   Jan 1, 1601. UUIDs use time in 100ns ticks since Oct 15, 1582.\n   The difference is 17 Days in Oct + 30 (Nov) + 31 (Dec)\n   + 18 years and 5 leap days. */\nGetSystemTimeAsFileTime((FILETIME *)&time);\ntime.QuadPart +=",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " (unsigned __int64) (1000*1000*10) // seconds * (unsigned __int64) (60 * 60 * 24) // days * (unsigned __int64) (17+30+31+365*18+5); // # of days *uuid_time = time.QuadPart; }",
      "ja": "（符号なし__int64）（* 10〜1000 * 1000）//秒*（符号なし__int64）（60 * 60 * 24）//日*（符号なし__int64）（17 + 30 + 31 + 365 * 18 + 5）。 //日間の＃* uuid_time = time.QuadPart。 }"
    },
    {
      "indent": 0,
      "text": "/* Sample code, not for use in production; see RFC 1750 */\nvoid get_random_info(char seed[16])\n{\n    MD5_CTX c;\n    struct {\n        MEMORYSTATUS m;\n        SYSTEM_INFO s;\n        FILETIME t;\n        LARGE_INTEGER pc;\n        DWORD tc;\n        DWORD l;\n        char hostname[MAX_COMPUTERNAME_LENGTH + 1];\n    } r;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    MD5Init(&c);\n    GlobalMemoryStatus(&r.m);\n    GetSystemInfo(&r.s);\n    GetSystemTimeAsFileTime(&r.t);\n    QueryPerformanceCounter(&r.pc);\n    r.tc = GetTickCount(); r.l = MAX_COMPUTERNAME_LENGTH + 1;\n    GetComputerName(r.hostname, &r.l);\n    MD5Update(&c, &r, sizeof r);\n    MD5Final(seed, &c);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#else",
      "ja": "#else"
    },
    {
      "indent": 0,
      "text": "void get_system_time(uuid_time_t *uuid_time) { struct timeval tp;",
      "ja": "ボイドget_system_time（uuid_time_t * uuid_time）{構造体体timeval TP。"
    },
    {
      "indent": 4,
      "text": "gettimeofday(&tp, (struct timezone *)0);",
      "ja": "gettimeofday（＆TP、（構造体のタイムゾーン*）0）;"
    },
    {
      "indent": 0,
      "text": "    /* Offset between UUID formatted times and Unix formatted times.\n       UUID UTC base time is October 15, 1582.\n       Unix base time is January 1, 1970.*/\n    *uuid_time = ((unsigned64)tp.tv_sec * 10000000)\n        + ((unsigned64)tp.tv_usec * 10)\n        + I64(0x01B21DD213814000);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Sample code, not for use in production; see RFC 1750 */\nvoid get_random_info(char seed[16])\n{\n    MD5_CTX c;\n    struct {\n        struct sysinfo s;\n        struct timeval t;\n        char hostname[257];\n    } r;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    MD5Init(&c);\n    sysinfo(&r.s);\n    gettimeofday(&r.t, (struct timezone *)0);\n    gethostname(r.hostname, 256);\n    MD5Update(&c, &r, sizeof r);\n    MD5Final(seed, &c);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "#endif",
      "ja": "#endifの"
    },
    {
      "indent": 0,
      "text": "utest.c",
      "ja": "utest.c"
    },
    {
      "indent": 0,
      "text": "#include \"copyrt.h\"\n#include \"sysdep.h\"\n#include <stdio.h>\n#include \"uuid.h\" uuid_t NameSpace_DNS = { /* 6ba7b810-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b810,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* puid -- print a UUID */\nvoid puid(uuid_t u)\n{\n    int i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    printf(\"%8.8x-%4.4x-%4.4x-%2.2x%2.2x-\", u.time_low, u.time_mid,\n    u.time_hi_and_version, u.clock_seq_hi_and_reserved,\n    u.clock_seq_low);\n    for (i = 0; i < 6; i++)\n        printf(\"%2.2x\", u.node[i]);\n    printf(\"\\n\");\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "/* Simple driver for UUID generator */\nvoid main(int argc, char **argv)\n{\n    uuid_t u;\n    int f;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "uuid_create(&u);\nprintf(\"uuid_create(): \"); puid(u);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "    f = uuid_compare(&u, &u);\n    printf(\"uuid_compare(u,u): %d\\n\", f);     /* should be 0 */\n    f = uuid_compare(&u, &NameSpace_DNS);\n    printf(\"uuid_compare(u, NameSpace_DNS): %d\\n\", f); /* s.b. 1 */\n    f = uuid_compare(&NameSpace_DNS, &u);\n    printf(\"uuid_compare(NameSpace_DNS, u): %d\\n\", f); /* s.b. -1 */\n    uuid_create_md5_from_name(&u, NameSpace_DNS, \"www.widgets.com\", 15);\n    printf(\"uuid_create_md5_from_name(): \"); puid(u);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix B. - Sample Output of utest",
      "ja": "付録B.  -  UTESTのサンプル出力"
    },
    {
      "indent": 5,
      "text": "uuid_create(): 7d444840-9dc0-11d1-b245-5ffdce74fad2\nuuid_compare(u,u): 0\nuuid_compare(u, NameSpace_DNS): 1\nuuid_compare(NameSpace_DNS, u): -1\nuuid_create_md5_from_name(): e902893a-9d22-3c7e-a7b8-d6e313b71d9f",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix C. - Some Name Space IDs",
      "ja": "付録C.  - いくつかのネームスペースのID"
    },
    {
      "indent": 3,
      "text": "This appendix lists the name space IDs for some potentially interesting name spaces, as initialized C structures and in the string representation defined above.",
      "ja": "この付録では、初期化され、C構造体として、および上記で定義された文字列表現に、いくつかの潜在的に興味深いの名前空間の名前空間のIDを示しています。"
    },
    {
      "indent": 3,
      "text": "/* Name string is a fully-qualified domain name */\nuuid_t NameSpace_DNS = { /* 6ba7b810-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b810,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/* Name string is a URL */\nuuid_t NameSpace_URL = { /* 6ba7b811-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b811,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/* Name string is an ISO OID */\nuuid_t NameSpace_OID = { /* 6ba7b812-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b812,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "/* Name string is an X.500 DN (in DER or a text output format) */\nuuid_t NameSpace_X500 = { /* 6ba7b814-9dad-11d1-80b4-00c04fd430c8 */\n    0x6ba7b814,\n    0x9dad,\n    0x11d1,\n    0x80, 0xb4, 0x00, 0xc0, 0x4f, 0xd4, 0x30, 0xc8\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Paul J. Leach Microsoft 1 Microsoft Way Redmond, WA 98052 US",
      "ja": "ポール・J.リーチマイクロソフト1マイクロソフト道レドモンド、WA 98052米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425-882-8080 EMail: paulle@microsoft.com",
      "ja": "電話：+1 425-882-8080電子メール：paulle@microsoft.com"
    },
    {
      "indent": 3,
      "text": "Michael Mealling Refactored Networks, LLC 1635 Old Hwy 41 Suite 112, Box 138 Kennesaw, GA 30152 US",
      "ja": "マイケル・メオーリングリファクタリングネットワーク、LLC 1635旧ハイウェイ41スイート112、ボックス138ケネソー、ジョージア州30152米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1-678-581-9656 EMail: michael@refactored-networks.com URI: http://www.refactored-networks.com",
      "ja": "電話：+ 1-678-581-9656 Eメール：michael@refactored-networks.com URI：http://www.refactored-networks.com"
    },
    {
      "indent": 3,
      "text": "Rich Salz DataPower Technology, Inc. 1 Alewife Center Cambridge, MA 02142 US",
      "ja": "リッチ・サルズのDataPower Technology、Inc.の1 Alewifeセンターケンブリッジ、MA 02142米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 617-864-0455 EMail: rsalz@datapower.com URI: http://www.datapower.com",
      "ja": "電話：+1 617-864-0455電子メール：rsalz@datapower.com URI：http://www.datapower.com"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2005).",
      "ja": "著作権（C）インターネット協会（2005）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットソサエティおよびインターネット・エンジニアリング・タスク・フォース放棄すべての保証、明示または、（もしあれば）後援ISに設けられています。黙示、情報の利用は、特定の目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証含むがこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "了承"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}