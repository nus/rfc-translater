{
  "title": {
    "text": "RFC 4353 - A Framework for Conferencing with the Session Initiation Protocol (SIP)",
    "ja": "RFC 4353 - セッション開始プロトコル（SIP）との会議のためのフレームワーク"
  },
  "number": 4353,
  "created_at": "2019-10-24 00:29:01.875630+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                       J. Rosenberg\nRequest for Comments: 4353                                 Cisco Systems\nCategory: Informational                                    February 2006",
      "raw": true
    },
    {
      "indent": 17,
      "text": "A Framework for Conferencing with the\n  Session Initiation Protocol (SIP)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。それはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The Session Initiation Protocol (SIP) supports the initiation, modification, and termination of media sessions between user agents. These sessions are managed by SIP dialogs, which represent a SIP relationship between a pair of user agents. Because dialogs are between pairs of user agents, SIP's usage for two-party communications (such as a phone call), is obvious. Communications sessions with multiple participants, generally known as conferencing, are more complicated. This document defines a framework for how such conferencing can occur. This framework describes the overall architecture, terminology, and protocol components needed for multi-party conferencing.",
      "ja": "セッション開始プロトコル（SIP）は、ユーザエージェント間のメディアセッションの開始、変更、終了をサポートしています。これらのセッションは、ユーザエージェントのペアの間のSIP関係を表すSIPダイアログによって管理されています。ダイアログは、ユーザーエージェントのペアの間にあるので、（例えば電話など）の二者の通信のためのSIPの使用量は、明らかです。一般的に会議として知られている複数の参加者との通信セッションは、より複雑です。この文書では、このような会議が発生する可能性がありますどのようにするためのフレームワークを定義します。このフレームワークは、マルチパーティ会議のために必要な全体的なアーキテクチャ、専門用語、およびプロトコルコンポーネントについて説明します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n2. Terminology .....................................................3\n3. Overview of Conferencing Architecture ...........................6\n   3.1. Usage of URIs ..............................................9\n4. Functions of the Elements ......................................10\n   4.1. Focus .....................................................10\n   4.2. Conference Policy Server ..................................11\n   4.3. Mixers ....................................................11\n   4.4. Conference Notification Service ...........................12\n   4.5. Participants ..............................................13\n   4.6. Conference Policy .........................................13\n5. Common Operations ..............................................13\n   5.1. Creating Conferences ......................................13\n   5.2. Adding Participants .......................................14",
      "raw": true
    },
    {
      "indent": 3,
      "text": "   5.3. Removing Participants .....................................15\n   5.4. Destroying Conferences ....................................15\n   5.5. Obtaining Membership Information ..........................16\n   5.6. Adding and Removing Media .................................16\n   5.7. Conference Announcements and Recordings ...................16\n6. Physical Realization ...........................................18\n   6.1. Centralized Server ........................................18\n   6.2. Endpoint Server ...........................................19\n   6.3. Media Server Component ....................................21\n   6.4. Distributed Mixing ........................................22\n   6.5. Cascaded Mixers ...........................................24\n7. Security Considerations ........................................26\n8. Contributors ...................................................26\n9. Acknowledgements ...............................................26\n10. Informative References ........................................27",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "The Session Initiation Protocol (SIP) [1] supports the initiation, modification, and termination of media sessions between user agents. These sessions are managed by SIP dialogs, which represent a SIP relationship between a pair of user agents. Because dialogs are between pairs of user agents, SIP's usage for two-party communications (such as a phone call), is obvious. Communications sessions with multiple participants, however, are more complicated. SIP can support many models of multi-party communications. One, referred to as loosely coupled conferences, makes use of multicast media groups. In the loosely coupled model, there is no signaling relationship between participants in the conference. There is no central point of control or conference server. Participation is gradually learned through control information that is passed as part of the conference (using the Real Time Control Protocol (RTCP) [2], for example). Loosely coupled conferences are easily supported in SIP by using multicast addresses within its session descriptions.",
      "ja": "セッション開始プロトコル（SIP）は、[1]ユーザエージェントとの間のメディアセッションの開始、変更、終了をサポートします。これらのセッションは、ユーザエージェントのペアの間のSIP関係を表すSIPダイアログによって管理されています。ダイアログは、ユーザーエージェントのペアの間にあるので、（例えば電話など）の二者の通信のためのSIPの使用量は、明らかです。複数の参加者との通信セッションは、しかし、より複雑です。 SIPは、マルチパーティ通信の多くのモデルをサポートすることができます。疎結合会議に呼ば一つは、マルチキャストメディアグループを使用しています。疎結合モデルでは、会議の参加者との間にシグナリング関係はありません。コントロールまたは会議サーバのない中心点はありません。参加は、徐々に（例えば、[2]リアルタイム制御プロトコル（RTCP）を使用して）会議の一部として渡される制御情報を介して学習されます。疎結合会議を容易に、そのセッション記述内のマルチキャストアドレスを使用して、SIPに支持されています。"
    },
    {
      "indent": 3,
      "text": "In another model, referred to as fully distributed multiparty conferencing, each participant maintains a signaling relationship with the other participants, using SIP. There is no central point of control; it is completely distributed amongst the participants. This model is outside the scope of this document.",
      "ja": "完全分散型マルチパーティ会議呼ぶ別のモデルでは、各参加者は、SIPを使用して、他の参加者とのシグナリング関係を維持します。制御のない中心点はありません。それは完全に、参加者間で分配されます。このモデルは、このドキュメントの範囲外です。"
    },
    {
      "indent": 3,
      "text": "In another model, sometimes referred to as the tightly coupled conference, there is a central point of control. Each participant connects to this central point. It provides a variety of conference functions, and may possibly perform media mixing functions as well. Tightly coupled conferences are not directly addressed by RFC 3261, although basic participation is possible without any additional protocol support.",
      "ja": "時々密結合会議と呼ばれる別のモデルでは、制御の中心点があります。各参加者は、この中心点に接続します。これは会議のさまざまな機能を提供し、そしておそらく同様にメディアミキシング機能を実行することができます。基本的な参加は、任意の追加のプロトコルをサポートすることなく可能であるが密結合会議は直接、RFC 3261によって対処されていません。"
    },
    {
      "indent": 3,
      "text": "This document presents the overall framework for tightly coupled SIP conferencing, referred to simply as \"conferencing\" from this point forward. This framework presents a general architectural model for these conferences and presents terminology used to discuss such conferences. It also discusses the ways in which SIP itself is involved in conferencing. The aim of the framework is to meet the general requirements for conferencing that are outlined in [3]. This specification alludes to non-SIP-specific mechanisms for achieving several conferencing functions. Those mechanisms are outside the scope of this specification.",
      "ja": "この文書では、密結合SIP会議の全体的な枠組みを提示し、単にこの時点から、「会議」という。このフレームワークは、これらの会議のための一般的な建築モデルを提示し、このような会議を議論するために使用される用語を提示します。また、SIP自体が会議に関与する方法について説明します。フレームワークの目的は、[3]に概説されている会議のための一般的な要件を満たすことです。この仕様は、いくつかの会議機能を実現するための非SIP固有のメカニズムを暗示します。これらの機構は、本明細書の範囲外です。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "Conference: Conference is an overused term, which has different meanings in different contexts. In SIP, a conference is an instance of a multi-party conversation. Within the context of this specification, a conference is always a tightly coupled conference.",
      "ja": "会議：会議は異なる文脈で異なる意味を持っている使い古さ用語、です。 SIPでは、会議は、マルチパーティの会話のインスタンスです。本明細書の文脈の中で、会議は常に密結合会議です。"
    },
    {
      "indent": 3,
      "text": "Loosely Coupled Conference: A loosely coupled conference is a conference without coordinated signaling relationships amongst participants. Loosely coupled conferences frequently use multicast for distribution of conference memberships.",
      "ja": "疎結合会議を結合：疎結合会議は、参加者間の調整のシグナリング関係のない会議です。疎結合会議が頻繁に会議メンバーシップの配布にマルチキャストを使用しています。"
    },
    {
      "indent": 3,
      "text": "Tightly Coupled Conference: A tightly coupled conference is a conference in which a single user agent, referred to as a focus, maintains a dialog with each participant. The focus plays the role of the centralized manager of the conference, and is addressed by a conference URI.",
      "ja": "しっかり会議を結合：密結合会議フォーカスと呼ばれる単一ユーザエージェント、会議で、各参加者との対話を維持します。フォーカスは、会議の一元管理者の役割を果たし、会議URIによって対処されます。"
    },
    {
      "indent": 3,
      "text": "Focus: The focus is a SIP user agent that is addressed by a conference URI and identifies a conference (recall that a conference is a unique instance of a multi-party conversation). The focus maintains a SIP signaling relationship with each participant in the conference. The focus is responsible for ensuring, in some way, that each participant receives the media that make up the conference. The focus also implements conference policies. The focus is a logical role.",
      "ja": "フォーカス：フォーカスは、カンファレンスURIによって対処されるSIPユーザエージェントであると会議（会議は、マルチパーティ会話の一意のインスタンスであることをリコール）を識別します。フォーカスは、会議の各参加者とのSIPシグナリング関係を維持しています。焦点は、各参加者が会議を構成しているメディアを受け取ることを、何らかの方法で、確実にする責任があります。焦点は、また、会議ポリシーを実装します。焦点は、論理的な役割です。"
    },
    {
      "indent": 3,
      "text": "Conference URI: A URI, usually a SIP URI, that identifies the focus of a conference.",
      "ja": "会議URI：会議の焦点を識別するURI、通常SIP URI、。"
    },
    {
      "indent": 3,
      "text": "Participant: The software element that connects a user or automata to a conference. It implements, at a minimum, a SIP user agent, but may also implement non-SIP-specific mechanisms for additional functionality.",
      "ja": "参加者：会議にユーザーまたはオートマトンを接続するソフトウェア要素。これは、最低でも、SIPユーザエージェントを実装するだけでなく、追加機能のための非SIP固有のメカニズムを実装することができます。"
    },
    {
      "indent": 3,
      "text": "Conference State: The state of the conference includes the state of the focus, the set of participants connected to the conference, and the state of their respective dialogs.",
      "ja": "会議状態：会議の様子は、フォーカスの状態、会議に接続されている参加者のセット、およびそれぞれのダイアログの状態を含みます。"
    },
    {
      "indent": 3,
      "text": "Conference Notification Service: A conference notification service is a logical function provided by the focus. The focus can act as a notifier [4], accepting subscriptions to the conference state, and notifying subscribers about changes to that state.",
      "ja": "会議通知サービス：会議通知サービスは、フォーカスが提供する論理的な機能です。フォーカスは、会議状態へのサブスクリプションを受け入れ、その状態の変更についての加入者に通知する、通知[4]のように作用することができます。"
    },
    {
      "indent": 3,
      "text": "Conference Policy Server: A conference policy server is a logical function that can store and manipulate the conference policy. This logical function is not specific to SIP, and may not physically exist. It refers to the component that interfaces a protocol to the conference policy.",
      "ja": "会議ポリシーサーバは：会議ポリシーサーバは、会議ポリシーを格納および操作することができます論理的な機能です。この論理機能は、SIPに固有ではなく、物理的には存在しないかもしれません。これは、会議ポリシーにプロトコルをインタフェースコンポーネントを指します。"
    },
    {
      "indent": 3,
      "text": "Conference Policy: The complete set of rules governing a particular conference.",
      "ja": "会議ポリシー：特定の会議を管理する規則の完全なセット。"
    },
    {
      "indent": 3,
      "text": "Mixer: A mixer receives a set of media streams of the same type, and combines their media in a type-specific manner, redistributing the result to each participant. This includes media transported using RTP [2]. As a result, the term defined here is a superset of the mixer concept defined in RFC 3550, since it allows for non-RTP-based media such as instant messaging sessions [5].",
      "ja": "ミキサー：ミキサーは、同じタイプのメディアストリームのセットを受信し、型特異的な様式でそれらのメディアを組み合わせ、各参加者に結果を再分配します。これは、RTPを使用して搬送媒体を含む[2]。結果として、ここで定義された用語は、そのようなインスタントメッセージングセッションなどの非RTPベースのメディアを可能にするため、RFC 3550で定義されたミキサの概念のスーパーセットである[5]。"
    },
    {
      "indent": 3,
      "text": "Conference-Unaware Participant: A conference-unaware participant is a participant in a conference that is not aware that it is actually in a conference. As far as the UA is concerned, it is a point-to-point call.",
      "ja": "会議を意識しない参加者：会議を意識しない参加者は、それが会議に実際にあることを認識していない会議の参加です。限りUAが懸念しているとして、それは、ポイントツーポイントコールです。"
    },
    {
      "indent": 3,
      "text": "Cascaded Conferencing: A mechanism for group communications in which a set of conferences are linked by having their focuses interact in some fashion.",
      "ja": "カスケード会議：会議のセットは彼らの焦点は、何らかの方法で対話することによって連結されたグループ通信のためのメカニズム。"
    },
    {
      "indent": 3,
      "text": "Simplex Cascaded Conferences: a group of conferences that are linked such that the user agent that represents the focus of one conference is a conference-unaware participant in another conference.",
      "ja": "シンプレックスカスケード会議一回の会議の焦点を表すユーザエージェントが別の会議で会議を意識しない参加者であるように連結されている会議のグループ。"
    },
    {
      "indent": 3,
      "text": "Conference-Aware Participant: A conference-aware participant is a participant in a conference that has learned, through automated means, that it is in a conference. A conference-aware participant can use the conference notification service or additional non-SIP-specific mechanisms for additional functionality.",
      "ja": "カンファレンスを意識する参加者：カンファレンスを意識する参加者は、それが会議中であることを、自動化された手段を通じて、学習している会議に参加しています。カンファレンスを意識する参加者は、追加機能のための会議通知サービスまたは追加の非SIP固有のメカニズムを使用することができます。"
    },
    {
      "indent": 3,
      "text": "Conference Server: A conference server is a physical server that contains, at a minimum, the focus. It may also include a conference policy server and mixers.",
      "ja": "会議サーバ：会議サーバは、最低でも、フォーカスが含まれている物理サーバです。また、会議ポリシーサーバとミキサーを含むことができます。"
    },
    {
      "indent": 3,
      "text": "Mass Invitation: An attempt to add a large number of users into a conference.",
      "ja": "マス招待：会議に多数のユーザーを追加しよう。"
    },
    {
      "indent": 3,
      "text": "Mass Ejection: An attempt to remove a large number of users from a conference.",
      "ja": "マスイジェク：会議から多数のユーザーを削除しようとする試み。"
    },
    {
      "indent": 3,
      "text": "Sidebar: A sidebar appears to the users within the sidebar as a \"conference within the conference\". It is a conversation amongst a subset of the participants to which the remaining participants are not privy.",
      "ja": "サイドバー：サイドバーには、「会議中の会議」としてサイドバー内のユーザーに表示されます。これは、残りの参加者が関与していない先の参加者のサブセットの中の会話です。"
    },
    {
      "indent": 3,
      "text": "Anonymous Participant: An anonymous participant is one that is known to other participants through the conference notification service, but whose identity is being withheld.",
      "ja": "匿名参加者：匿名の参加者は、会議通知サービスを介して他の参加者にはよく知られている1が、そのアイデンティティ差し控えされています。"
    },
    {
      "indent": 0,
      "text": "3. Overview of Conferencing Architecture",
      "section_title": true,
      "ja": "会議アーキテクチャの概要3。"
    },
    {
      "indent": 9,
      "text": "                        +-----------+\n                        |           |\n                        |           |\n                        |Participant|\n                        |     4     |\n                        |           |\n                        +-----------+\n                              |\n                              |SIP\n                              |Dialog\n                              |4\n                              |\n+-----------+           +-----------+            +-----------+\n|           |           |           |            |           |\n|           |           |           |            |           |\n|Participant|-----------|   Focus   |------------|Participant|\n|     1     |  SIP      |           |   SIP      |     3     |\n|           |  Dialog   |           |   Dialog   |           |\n+-----------+  1        +-----------+   3        +-----------+\n                              |\n                              |\n                              |SIP\n                              |Dialog\n                              |2\n                              |\n                        +-----------+\n                        |           |\n                        |           |\n                        |Participant|\n                        |    2      |\n                        |           |\n                        +-----------+",
      "raw": true
    },
    {
      "indent": 36,
      "text": "Figure 1",
      "ja": "図1"
    },
    {
      "indent": 3,
      "text": "The central component (literally) in a SIP conference is the focus. The focus maintains a SIP signaling relationship with each participant in the conference. The result is a star topology, as shown in Figure 1.",
      "ja": "SIP会議における中心的なコンポーネントは、（文字通り）の焦点です。フォーカスは、会議の各参加者とのSIPシグナリング関係を維持しています。図1に示すように、結果は、スター型トポロジです。"
    },
    {
      "indent": 3,
      "text": "The focus is responsible for making sure that the media streams that constitute the conference are available to the participants in the conference. It does that through the use of one or more mixers, each of which combines a number of input media streams to produce one or more output media streams. The focus uses the media policy to determine the proper configuration of the mixers.",
      "ja": "フォーカスは、会議を構成するメディアストリームは、会議の参加者に利用可能であることを確認する責任があります。これは、1つのまたは複数の出力メディアストリームを生成するために入力メディアストリームの数を組み合わせ、それぞれが1つの以上のミキサーを使用することによってそれを行います。焦点はミキサーの適切な構成を決定するためにメディアポリシーを使用しています。"
    },
    {
      "indent": 3,
      "text": "The focus has access to the conference policy, an instance of which exists for each conference. Effectively, the conference policy can be thought of as a database that describes the way that the conference should operate. It is the responsibility of the focus to enforce those policies. Not only does the focus need read access to the database, but it needs to know when it has changed. Such changes might result in SIP signaling (for example, the ejection of a user from the conference using BYE), and those changes that affect the conference state will require a notification to be sent to subscribers using the conference notification service.",
      "ja": "フォーカスは、会議ポリシーへのアクセス、各会議のために存在するのインスタンスを有します。事実上、会議ポリシーは、会議が動作すること方法を説明したデータベースと考えることができます。これらのポリシーを施行する焦点の責任です。焦点は、データベースへの読み取りアクセスを必要とするが、それが変更されたとき、それは知っている必要がないだけでなく。このような変化は、（例えば、BYE使用して会議からユーザーの排出）、および会議状態が通知が必要になります影響を与えるそれらの変更は、会議通知サービスを利用して加入者に送信されるSIPシグナリングになる可能性があります。"
    },
    {
      "indent": 3,
      "text": "The conference is represented by a URI that identifies the focus. Each conference has a unique focus and a unique URI identifying that focus. Requests to the conference URI are routed to the focus for that specific conference.",
      "ja": "会議フォーカスを識別するURIで表されます。各会議は独特の焦点とその焦点を識別する一意のURIを持っています。会議URIへの要求は、その特定の会議の焦点にルーティングされます。"
    },
    {
      "indent": 3,
      "text": "Users usually join the conference by sending an INVITE to the conference URI. As long as the conference policy allows, the INVITE is accepted by the focus and the user is brought into the conference. Users can leave the conference by sending a BYE, as they would in a normal call.",
      "ja": "ユーザーは通常、会議URIにINVITEを送信することにより、会議に参加します。限り会議ポリシーが許す限り、INVITEは、フォーカスによって受け入れられ、使用者は、会議に持ち込まれます。ユーザーは、通常の通話と同じように、BYEを送信することによって、会議を残すことができます。"
    },
    {
      "indent": 3,
      "text": "Similarly, the focus can terminate a dialog with a participant, should the conference policy change to indicate that the participant is no longer allowed in the conference. A focus can also initiate an INVITE to bring a participant into the conference.",
      "ja": "同様に、焦点は会議ポリシーの変更は、参加者がもはや会議で許可されていないことを示すようにする必要があり、参加者との対話を終了することができます。焦点は、また、会議に参加者をもたらすためにINVITEを開始することができます。"
    },
    {
      "indent": 3,
      "text": "The notion of a conference-unaware participant is important in this framework. A conference-unaware participant does not even know that the UA it is communicating with happens to be a focus. As far as it's concerned, the UA appears like any other UA. The focus, of course, knows that it's a focus, and it performs the tasks needed for the conference to operate.",
      "ja": "会議を意識しない参加者の概念は、この枠組みの中で重要です。会議を意識しない参加者もそれが通信しているUAが焦点であることを起こることを知りません。限りそれは懸念していますように、UAは他のUAのように表示されます。焦点は、当然のことながら、それが焦点だということを知っている、それが動作するために会議のために必要なタスクを実行します。"
    },
    {
      "indent": 3,
      "text": "Conference-unaware participants have access to a good deal of functionality. They can join and leave conferences using SIP, and obtain more advanced features through stimulus signaling, as discussed in [6]. However, if the participant wishes to explicitly control aspects of the conference using functional signaling protocols, the participant must be conference-aware.",
      "ja": "会議を意識しない参加者は、機能性の良い取引へのアクセス権を持っています。 [6]で説明したように、それらは、参加してSIPを使用して会議を離れ、そして刺激シグナリングを介して、より高度な機能を得ることができます。参加者が明示的に機能的なシグナリングプロトコルを使用して会議の側面を制御することを希望する場合は、参加者が会議を意識する必要があります。"
    },
    {
      "indent": 9,
      "text": "                      .....................................\n                      .                                   .\n                      .                                   .\n                      .                                   .\n                      .                                   .\n                      .                                   .\n                      .                                   .\n                      .                                   .\n                      . +-----------+        //-----\\\\    .\n                      . |           |      ||         ||  .\n             non-SIP  . | Conference|        \\\\-----//    .\n      +---------------->|  Policy   |       |          |  .\n      |               . |  Server   |---->  |          |  .\n      |               . |           |       |Conference|  .\n      |               . +-----------+       |  Policy  |  .\n      |               .                     |          |  .\n      |               .                     |          |  .\n+-----------+         . +-----------+       |          |  .\n|           |         . |           |        \\       //   .\n|           |         . |           |         \\-----/     .\n|Participant|<--------->|   Focus   |            |        .\n|           |  SIP    . |           |            |        .\n|           |  Dialog . |           |<-----------+        .\n+-----------+         . |...........|                     .\n          ^           . | Conference|                     .\n          |           . |Notification                     .\n          +------------>|  Service  |                     .\n          Subscription. +-----------+                     .\n                      .                                   .\n                      .                                   .\n                      .                                   .\n                      .                                   .\n                      .....................................",
      "raw": true
    },
    {
      "indent": 43,
      "text": "Conference\n Functions",
      "raw": true
    },
    {
      "indent": 36,
      "text": "Figure 2",
      "ja": "図2"
    },
    {
      "indent": 3,
      "text": "A conference-aware participant is one that has access to advanced functionality through additional protocol interfaces, which may include access to the conference policy through non-SIP-specific mechanisms. A model for this interaction is shown in Figure 2. The participant can interact with the focus using extensions, such as REFER, in order to access enhanced call control functions [7]. The participant can SUBSCRIBE to the conference URI, and be connected to the conference notification service provided by the focus. Through this mechanism, it can learn about changes in participants - effectively, the state of the dialogs and the media.",
      "ja": "会議対応参加者は、非SIP固有のメカニズムを介して会議ポリシーへのアクセスを含むことができる追加のプロトコルインタフェースを介して高度な機能へのアクセスを有するものです。この相互作用のモデルは、参加者が強化呼制御機能にアクセスするために、そのようなREFERなどの拡張機能を使用して焦点と相互作用することができる図2に示されている[7]。参加者は、会議URIを購読することができ、フォーカスが提供する会議通知サービスに接続すること。効果的に、ダイアログの状態とメディア - このメカニズムを介して、それは参加者の変化について学ぶことができます。"
    },
    {
      "indent": 3,
      "text": "The participant can communicate with the conference policy server using some kind of non-SIP-specific mechanism by which it can affect the conference policy. The conference policy server need not be available in any particular conference, although there is always a conference policy.",
      "ja": "参加者は、会議の方針に影響を与えることが可能な非SIP固有のメカニズムのいくつかの種類を使用して会議ポリシーサーバと通信することができます。会議ポリシーサーバは、会議ポリシーは常にありますが、いずれかの特定の会議に利用可能である必要はありません。"
    },
    {
      "indent": 3,
      "text": "The interfaces between the focus and the conference policy, and between the conference policy server and the conference policy are non-SIP-specific. For the purposes of SIP-based conferencing, they serve as logical roles involved in a conference, as opposed to representing a physical decomposition. The separation of these functions is documented here to encourage clarity in the requirements. This approach provides individual SIP implementations the flexibility to compose a conferencing system in a scalable and robust manner without requiring the complete development of these interfaces.",
      "ja": "フォーカス会議ポリシー、および会議ポリシーサーバーと会議ポリシーとの間の界面は、非SIP固有です。物理的な分解を表すとは対照的に、SIPベースの会議の目的のために、彼らは、会議に関与し、論理の役割を果たします。これらの機能の分離は、要件の明確性を奨励するためにここに記載されています。このアプローチは、個々のSIP実装にこれらのインタフェースの完全な開発を必要とせず、スケーラブルかつ堅牢な方法で会議システムを構成するための柔軟性を提供します。"
    },
    {
      "indent": 0,
      "text": "3.1. Usage of URIs",
      "section_title": true,
      "ja": "3.1。 URIの使い方"
    },
    {
      "indent": 3,
      "text": "It is fundamental to this framework that a conference is uniquely identified by a URI, and that this URI identifies the focus that is responsible for the conference. The conference URI is unique, such that no two conferences have the same conference URI. A conference URI is always a SIP or SIPS URI.",
      "ja": "これは、会議を一意にURIによって識別され、このフレームワークの基本であり、このURIは、会議のために責任があるフォーカスを識別していること。会議URIには2つの会議が同じ会議URIを持たないように、ユニークです。会議URIは常にSIPであるか、URIをSIPS。"
    },
    {
      "indent": 3,
      "text": "The conference URI is opaque to any participants that might use it. There is no way to look at the URI and know for certain whether it identifies a focus, as opposed to a user or an interface on a PSTN gateway. This is in line with the general philosophy of URI usage [8]. However, contextual information surrounding the URI (for example, SIP header parameters) may indicate that the URI represents a conference.",
      "ja": "カンファレンスURIは、それを使用する可能性のある参加者には不透明です。 URIを見て、ユーザまたはPSTNゲートウェイのインターフェースとは対照的に、それがフォーカスを識別するかどうかを確実に知る方法はありません。これは、URIの使用[8]の一般的な考え方に沿ったものです。しかし、URIを取り囲むコンテキスト情報（例えば、SIPヘッダパラメータ）URIは、会議を表すことを示すことができます。"
    },
    {
      "indent": 3,
      "text": "When a SIP request is sent to the conference URI, that request is routed to the focus, and only to the focus. The element or system that creates the conference URI is responsible for guaranteeing this property.",
      "ja": "SIPリクエストが会議URIに送信されると、その要求は、焦点に、そして唯一の焦点にルーティングされます。会議URIを作成する要素やシステムは、このプロパティを保証する責任があります。"
    },
    {
      "indent": 3,
      "text": "The conference URI can represent a long-lived conference or interest group, such as \"sip:discussion-on-dogs@example.com\". The focus identified by this URI would always exist, and always be managing the conference for whatever participants are currently joined. Other conference URIs can represent short-lived conferences, such as an ad-hoc conference.",
      "ja": "会議では、URIは、そのような「：discussion-on-dogs@example.com一口」として、寿命の長い会議や金利基を表すことができます。このURIによって識別される焦点が常に存在することになる、と常に参加者は、現在参加しているものは何でものための会議を管理すること。他の会議URIは、このようなアドホック会議として短命会議を表すことができます。"
    },
    {
      "indent": 3,
      "text": "Ideally, a conference URI is never constructed or guessed by a user. Rather, conference URIs are learned through many mechanisms. A conference URI can be emailed or sent in an instant message. A conference URI can be linked on a web page. A conference URI can also be obtained from some non-SIP mechanism.",
      "ja": "理想的には、カンファレンスURIを構築したり、ユーザが推測ありません。むしろ、会議URIは多くのメカニズムを通じて学習されています。カンファレンスURIは、電子メールで送信またはインスタントメッセージで送信することができます。カンファレンスURIは、Webページ上でリンクすることができます。カンファレンスURIはまた、いくつかの非SIPメカニズムから取得することができます。"
    },
    {
      "indent": 3,
      "text": "To determine that a SIP URI does represent a focus, standard techniques for URI capability discovery can be used. Specifically, the callee capabilities specification [9] provides the \"isfocus\" feature tag to indicate that the UA is acting as focus in this dialog. Callee capability parameters are also used to indicate that a focus supports the conference notification service. This is done by declaring support for the SUBSCRIBE method and the relevant package(s) in the caller preferences feature parameters associated with the conference URI.",
      "ja": "SIP URIがフォーカスを表しないことを決定するために、URI能力発見のための標準的な技術を使用することができます。具体的には、被呼機能仕様[9] UAはこのダイアログのフォーカスとして動作していることを示すために「isfocus」フィーチャータグを提供します。呼び出し先の能力パラメータも焦点が会議通知サービスをサポートしていることを示すために使用されています。これは、会議URIに関連付けられたパラメータを備え、発信者の好みにSUBSCRIBE方法および関連するパッケージ（複数可）のサポートを宣言することによって行われます。"
    },
    {
      "indent": 3,
      "text": "Other functions in a conference may be represented by URIs. If the conference policy is exposed through a web application, it is identified by an HTTP URI. If it is accessed using an explicit protocol, it is a URI defined for that protocol.",
      "ja": "会議の他の機能は、URIをで表すことができます。会議ポリシーは、Webアプリケーションを介して公開されている場合は、HTTP URIによって識別されます。それは、明示的なプロトコルを使用してアクセスされる場合は、URIがそのプロトコルに対して定義されています。"
    },
    {
      "indent": 3,
      "text": "Starting with the conference URI, the URIs for the other logical entities in the conference can be learned using the conference notification service.",
      "ja": "会議URIをはじめ、会議中の他の論理エンティティのURIは、会議通知サービスを利用して学習することができます。"
    },
    {
      "indent": 0,
      "text": "4. Functions of the Elements",
      "section_title": true,
      "ja": "要素の4機能"
    },
    {
      "indent": 3,
      "text": "This section gives a more detailed description of the functions typically implemented in each of the elements.",
      "ja": "このセクションでは、典型的には、各要素において実現される機能のより詳細な説明を与えます。"
    },
    {
      "indent": 0,
      "text": "4.1. Focus",
      "section_title": true,
      "ja": "4.1。フォーカス"
    },
    {
      "indent": 3,
      "text": "As its name implies, the focus is the center of the conference. All participants in the conference are connected to it by a SIP dialog. The focus is responsible for maintaining the dialogs connected to it. It ensures that the dialogs are connected to a set of participants who are allowed to participate in the conference, as defined by the membership policy. The focus also uses SIP to manipulate the media sessions, in order to make sure each participant obtains all the media for the conference. To do that, the focus makes use of mixers.",
      "ja": "その名前が示すように、フォーカスは、会議の中心です。会議のすべての参加者は、SIPダイアログによってそれに接続されています。焦点は、それに接続されたダイアログを維持する責任があります。これは、メンバーシップ・ポリシーで定義されたダイアログは、会議に参加することを許可されている参加者のセットに接続されていることを保証します。焦点は、また、各参加者が会議のためにすべてのメディアを取得し、確認するためにために、メディアセッションを操作するためにSIPを使用しています。そのためには、焦点はミキサーを使用しています。"
    },
    {
      "indent": 3,
      "text": "When a focus receives an INVITE, it checks the conference policy. The policy might indicate that this participant is not allowed to join, in which case the call can be rejected. It might indicate that another participant, acting as a moderator, needs to approve this new participant. In that case, the INVITE might be parked on a music-on-hold server, or a 183 response might be sent to indicate progress. A notification, using the conference notification service, would be sent to the moderator. The moderator could then allow this new participant to join, and the focus could then accept the INVITE (or unpark it from the music-on-hold server). The interpretation of policy by the focus is, itself, a matter of local policy, and not subject to standardization.",
      "ja": "焦点はINVITEを受信すると、それは会議ポリシーをチェックします。ポリシーは、呼び出しを拒否することができ、その場合には、この参加者は、参加することを許可されていないことを示している可能性があります。これは、他の参加者が、モデレータとして機能する、この新しい参加者を承認する必要があることを示している可能性があります。その場合には、INVITEは、保留音サーバ上に駐車される可能性があります、または183応答は、進行状況を示すために送信される可能性があります。通知は、会議通知サービスを利用して、モデレータに送信されます。モデレータは、この新しい参加者が参加する可能性があり、かつ焦点は、その後、INVITE（または保留音サーバからパークを解除）を受け入れることができます。フォーカスによって政策の解釈は、それ自身、ローカルポリシーの問題、および標準化の対象ではありません。"
    },
    {
      "indent": 3,
      "text": "When it is necessary to remove a SIP participant (with a confirmed dialog) from a conference, the focus would send a BYE to that participant to remove the participant. This is often referred to as \"ejecting\" a user from the conference, and is called \"mass ejection\" when done for many users. Similarly, if it is necessary to add a new SIP participant to a conference, the focus would send an INVITE request to that participant. When done for a large number of users, this is called mass invitation. Finally, if it is necessary to change the properties of the media of a session (for example to remove video) for a SIP participant, the focus can update the session description for that participant by sending a re-INVITE or UPDATE [15] request with a new offer to that participant.",
      "ja": "それは会議から（確認ダイアログで）SIP参加者を除去する必要があるときに、焦点は参加者を削除するには、その参加者にBYEを送信します。これは、しばしば「イジェクト」会議からのユーザーと呼ばれ、多くのユーザーのために行われたときに、「質量放出」と呼ばれています。それは会議に新しいSIP参加者を追加する必要がある場合は同様に、フォーカスは、その参加者にINVITEリクエストを送信します。多数のユーザーのために行われた場合、これは質量招待状と呼ばれています。それがSIP参加者のセッションのメディアの特性（例えば、ビデオを除去するために）変更する必要がある場合、最終的に、フォーカスは、再INVITEまたはUPDATE [15]要求を送信することによって、その参加者のためにセッション記述を更新することができますその参加者への新たなオファーを含みます。"
    },
    {
      "indent": 3,
      "text": "In many cases, the signaling actions performed by the focus, such as ejection or addition of a participant, will change the media composition of the conference. To affect these changes, the focus interacts with the mixer. Through that interaction, it makes sure that all valid participants received a copy of the media streams, and that each participant sends media to an IP address and port on the mixer that cause it to be appropriately mixed with the other media in the conference. The means by which the focus interacts with the mixer are outside the scope of this specification.",
      "ja": "多くの場合、このような排出や参加者の追加など焦点によって行われるシグナルアクションは、会議の培地組成を変更します。これらの変化に影響を与えるために、焦点はミキサーと対話します。その相互作用を介して、それが有効なすべての参加者がメディアストリームのコピーを受信し、各参加者は、それが適切会議内の他の媒体と混合させ、ミキサー上のIPアドレスとポートにメディアを送信することを確認します。焦点はミキサと相互作用する手段は、本明細書の範囲外です。"
    },
    {
      "indent": 0,
      "text": "4.2. Conference Policy Server",
      "section_title": true,
      "ja": "4.2。会議ポリシーサーバー"
    },
    {
      "indent": 3,
      "text": "The conference policy server is a logical component of the system. It represents the interface between clients and the conference policy that governs the operation of the conference. Clients communicate with the conference policy server using a non-SIP-specific mechanism.",
      "ja": "会議ポリシーサーバは、システムの論理的な構成要素です。これは、クライアントとの会議の動作を管理する会議ポリシーの間のインタフェースを表します。クライアントは、非SIP固有のメカニズムを使用して会議ポリシーサーバと通信します。"
    },
    {
      "indent": 0,
      "text": "4.3. Mixers",
      "section_title": true,
      "ja": "4.3。ミキサー"
    },
    {
      "indent": 3,
      "text": "A mixer is responsible for combining the media streams that make up the conference, and generating one or more output streams that are distributed to recipients (which could be participants or other mixers). The process of combining media is specific to the media type, and is directed by the focus, under the guidance of the rules described in the media policy.",
      "ja": "ミキサは、会議を構成するメディアストリームを組み合わせること、及び（参加者または他のミキサーとすることができる）受信者に配信される1つのまたは複数の出力ストリームを生成する責任があります。メディアを組み合わせるプロセスは、メディアタイプに特異的であり、メディアポリシーに記載されたルールの指導の下、フォーカスによって指示されます。"
    },
    {
      "indent": 3,
      "text": "A mixer is not aware of a \"conference\" as an entity, per se. A mixer receives media streams as inputs, and based on directions provided by the focus, generates media streams as outputs. There is no grouping of media streams beyond the policies that describe the ways in which the streams are mixed.",
      "ja": "ミキサーはそれ自体が、実体として「会議」を認識していません。ミキサーは、入力としてメディアストリームを受信して​​、フォーカスが提供する指示に基づいて、出力としてメディアストリームを生成します。ストリームが混合された方法を記述したポリシーを超えたメディアストリームのないグループ化はありません。"
    },
    {
      "indent": 3,
      "text": "A mixer is always under the control of a focus, either directly or indirectly. The focus is responsible for interpreting the media policy, and then installing the appropriate rules in the mixer. If the focus is directly controlling a mixer, the mixer can either be co-resident with the focus, or can be controlled through some kind of protocol. If the focus is indirectly controlling a mixer, it delegates the mixing to the participants, each of which has its own mixer. This is described in Section 6.4.",
      "ja": "ミキサーは、直接または間接的に、フォーカスの制御下に常にあります。焦点は、メディアポリシーを解釈し、そして次にミキサー中で適切なルールをインストールする責任があります。フォーカスが直接ミキサーを制御している場合、ミキサは、フォーカスと共存することができるか、プロトコルのいくつかの種類によって制御することができます。フォーカスが間接的ミキサーを制御している場合、参加者は、自身のミキサをそれぞれ有する者にミキシング。これは、セクション6.4に記載されています。"
    },
    {
      "indent": 0,
      "text": "4.4. Conference Notification Service",
      "section_title": true,
      "ja": "4.4。会議通知サービス"
    },
    {
      "indent": 3,
      "text": "The focus can provide a conference notification service. In this role, it acts as a notifier, as defined in RFC 3265 [4]. It accepts subscriptions from clients for the conference URI, and generates notifications to them as the state of the conference changes.",
      "ja": "フォーカスは、会議通知サービスを提供することができます。この役割では、RFC 3265で定義されるように、通知として作用する[4]。これは、会議のURIのためのクライアントからのサブスクリプションを受け付け、会議の状態が変化したとして、それらに通知を生成します。"
    },
    {
      "indent": 3,
      "text": "The state of the conference includes the participants connected to the focus, and also information about the dialogs associated with them. As new participants join, this state changes, and is reported through the notification service. Similarly, when someone leaves, this state also changes, allowing subscribers to learn about this fact.",
      "ja": "会議の状態が焦点に接続され、参加者、そしてまた、それらに関連したダイアログに関する情報が含まれています。新しい参加者が参加するように、この状態の変化は、通知サービスを通じて報告されます。同様に、誰かが離れたときに、この状態はまた、加入者は、この事実を知るすることができ、変更されます。"
    },
    {
      "indent": 3,
      "text": "If a participant is anonymous, the conference notification service will either withhold the identity of a new participant from other conference participants, or will neglect to inform other conference participants about the presence of the anonymous participant. The choice of approach depends on the level of anonymity provided to the anonymous participant.",
      "ja": "参加者が匿名である場合は、会議通知サービスは、他の会議参加者からの新しい参加者の身元を遠慮するか、または匿名の参加者の存在について他の会議参加者に通知するために無視されます。アプローチの選択は、匿名の参加者に提供する匿名性のレベルに依存します。"
    },
    {
      "indent": 0,
      "text": "4.5. Participants",
      "section_title": true,
      "ja": "4.5。参加者"
    },
    {
      "indent": 3,
      "text": "A participant in a conference is any SIP user agent that has a dialog with the focus. This SIP user agent can be a PC application, a SIP hardphone, or a PSTN gateway. It can also be another focus. A conference that has a participant that is the focus of another conference is called a simplex cascaded conference. They can also be used to provide scalable conferences where there are regional sub-conferences, each of which is connected to the main conference.",
      "ja": "会議の参加者は、フォーカスを持つダイアログを持つ任意のSIPユーザエージェントです。このSIPユーザエージェントは、PCアプリケーション、SIPのハードフォン、またはPSTNゲートウェイとすることができます。それはまた別の焦点になることができます。別の会議の焦点である参加者を持っている会議は単純カスケード接続会議と呼ばれています。彼らはまた、メイン会議に接続され、それぞれが地域のサブ会議、あるスケーラブルな会議を提供するために使用することができます。"
    },
    {
      "indent": 0,
      "text": "4.6. Conference Policy",
      "section_title": true,
      "ja": "4.6。会議の方針"
    },
    {
      "indent": 3,
      "text": "The conference policy contains the rules that guide the operation of the focus. The rules can be simple, such as an access list that defines the set of allowed participants in a conference. The rules can also be incredibly complex, specifying time-of-day-based rules on participation, conditional on the presence of other participants. It is important to understand that there is no restriction on the type of rules that can be encapsulated in a conference policy.",
      "ja": "会議ポリシーは、フォーカスの操作をガイドするルールが含まれています。ルールは、このような会議で許可される参加者の集合を定義するアクセスリストとして、シンプルにすることができます。ルールはまた、他の参加者の存在を条件に参加、上の時刻ベースのルールを指定して、信じられないほど複雑になることがあります。会議の方針にカプセル化することができるルールの種類に制限がないことを理解することが重要です。"
    },
    {
      "indent": 3,
      "text": "The conference policy can be manipulated using web applications or voice applications. It can also be manipulated with non-SIP-specific standard or proprietary protocols.",
      "ja": "会議ポリシーは、Webアプリケーションや音声アプリケーションを使用して操作することができます。また、非SIP固有の標準または独自のプロトコルで操作することができます。"
    },
    {
      "indent": 0,
      "text": "5. Common Operations",
      "section_title": true,
      "ja": "5.共通操作"
    },
    {
      "indent": 3,
      "text": "There are a large number of ways in which users can interact with a conference. They can join, leave, set policies, approve members, and so on. This section is meant as an overview of the major conferencing operations, summarizing how they operate. More detailed examples of the SIP mechanisms can be found in [7].",
      "ja": "ユーザーが会議と対話できる方法が多数あります。彼らはとても上、参加まま、ポリシーを設定し、メンバーを承認し、することができます。このセクションでは、それらがどのように動作するかを要約し、主要な会議運営の概要として意図されています。 SIPメカニズムのより詳細な例は、[7]に見出すことができます。"
    },
    {
      "indent": 3,
      "text": "As well as providing an overview of the common conferencing operations, each of the subsections in this section of the document provides a description of the SIP mechanism for supporting the operation. Non-SIP mechanisms are also possible, but not discussed here.",
      "ja": "同様に、共通の会議操作の概要を提供するものとして、文書のこのセクションのサブセクションのそれぞれは、動作をサポートするためのSIPメカニズムの説明を提供します。非SIPの仕組みも可能ですが、ここでは説明しません。"
    },
    {
      "indent": 0,
      "text": "5.1. Creating Conferences",
      "section_title": true,
      "ja": "5.1。会議の作成"
    },
    {
      "indent": 3,
      "text": "There are many ways in which a conference can be created. The creation of a conference actually constructs several elements all at the same time. It results in the creation of a focus and a conference policy. It also results in the construction of a conference URI, which uniquely identifies the focus. Since the conference URI needs to be unique, the element that creates conferences is responsible for guaranteeing that uniqueness. This can be accomplished deterministically (by keeping records of conference URIs, or by generating URIs algorithmically), or probabilistically, (by creating a random URI with sufficiently low probabilities of collision).",
      "ja": "会議が作成することができる多くの方法があります。会議の作成は、実際には、すべて同じ時刻に複数の要素を構築します。これは、フォーカスと会議ポリシーの作成になります。それはまた、一意に焦点を識別する会議URIの構築をもたらします。 URIは一意である必要が会見ので、会議を作成する要素は、その一意性を保証する責任があります。これは、（衝突の十分に低い確率でランダムなURIを作成することによって）、確率（会議URIのレコードを保持することによって、またはアルゴリズムのURIを生成することにより）決定論的に達成、またはすることができます。"
    },
    {
      "indent": 3,
      "text": "When conference policy is created, it is established with default rules that are implementation-dependent. If the creator of the conference wishes to change those rules, they would do so using a non-SIP mechanism.",
      "ja": "会議ポリシーが作成されると、それは実装に依存しているデフォルトのルールを確立しています。会議の作成者は、これらのルールを変更したい場合は、非SIPメカニズムを使用して、そうでしょう。"
    },
    {
      "indent": 3,
      "text": "SIP can be used to create conferences hosted in a central server by sending an INVITE to a conferencing application that would automatically create a new conference and then place a user into it.",
      "ja": "SIPは、自動的に新しい会議を作成し、それにユーザーを置くだろう会議アプリケーションにINVITEを送信することにより、中央のサーバにホストされている会議を作成するために使用することができます。"
    },
    {
      "indent": 3,
      "text": "Creation of conferences where the focus resides in an endpoint operates differently. There, the endpoint itself creates the conference URI, and hands it out to other endpoints that will be the participants. What differs from case to case is how the endpoint decides to create a conference.",
      "ja": "フォーカスがエンドポイントに存在する会議の作成は、動作が異なります。そこでは、エンドポイント自体は、会議URIを作成し、参加者となり、他のエンドポイントにそれを渡します。どのようなケースにケースから異なるのエンドポイントが会議を作成することを決定する方法です。"
    },
    {
      "indent": 3,
      "text": "One important case is the ad-hoc conference described in Section 6.2. There, an endpoint unilaterally decides to create the conference based on local policy. The dialogs that were connected to the UA are migrated to the endpoint-hosted focus, using a re-INVITE or UPDATE to pass the conference URI to the newly joined participants.",
      "ja": "一つの重要な場合は、セクション6.2で説明したアドホック会議です。そこでは、エンドポイントは、一方的にローカルポリシーに基づいて会議を作成することを決定します。 UAに接続されたダイアログが新たに参加し、参加者に会議URIを渡すために再INVITEまたはUPDATEを使用して、エンドポイントがホストするフォーカスに移行されます。"
    },
    {
      "indent": 3,
      "text": "Alternatively, one UA can ask another UA to create an endpoint-hosted conference. This is accomplished with the SIP Join header [10]. The UA that receives the Join header in an invitation may need to create a new conference URI (a new one is not needed if the dialog that is being joined is already part of a conference). The conference URI is then handed to the recently joined participants through a re-INVITE or UPDATE.",
      "ja": "あるいは、UAは、エンドポイントがホストする会議を作成するために、別のUAを求めることができます。これは、SIPを用いて達成される[10]ヘッダーに参加。招待状に参加ヘッダを受信UAは、（参加されているダイアログが既に会議の一部である場合、新しいものが必要とされていない）新しい会議URIを作成する必要があります。カンファレンスURIは、その後再INVITEまたはUPDATEを通じて最近参加し、参加者に手渡されます。"
    },
    {
      "indent": 0,
      "text": "5.2. Adding Participants",
      "section_title": true,
      "ja": "5.2。参加者を追加します"
    },
    {
      "indent": 3,
      "text": "There are many mechanisms for adding participants to a conference. In all cases, participant additions can be first party (a user adds themself) or third party (a user adds another user).",
      "ja": "会議に参加者を追加するための多くのメカニズムがあります。すべての場合において、参加者の追加が最初の当事者（ユーザーがその人自身を追加します）または第三者（ユーザーが別のユーザーを追加する）ことができます。"
    },
    {
      "indent": 3,
      "text": "First person additions using SIP are trivially accomplished with a standard INVITE. A participant can send an INVITE request to the conference URI, and if the conference policy allows them to join, they are added to the conference.",
      "ja": "SIPを使用した最初の人の追加は自明の規格にINVITEを達成しています。参加者は、会議URIにINVITEリクエストを送信することができ、会議の方針は彼らが参加することを許可する場合、それらは会議に追加されます。"
    },
    {
      "indent": 3,
      "text": "If a UA does not know the conference URI, but has learned about a dialog which is connected to a conference (by using the dialog event package, for example [11]), the UA can join the conference by using the Join header to join the dialog.",
      "ja": "UAが会議URIを知っていませんが、会議に接続されるダイアログについて学習している場合（例えば、ダイアログイベントパッケージを使用して、[11]）、UAが参加する参加ヘッダーを使用して会議に参加することができますダイアログ。"
    },
    {
      "indent": 3,
      "text": "Third party additions with SIP are done using REFER [12]. The client can send a REFER request to the participant, asking them to send an INVITE request to the conference URI. Additionally, the client can send a REFER request to the focus, asking it to send an INVITE to the participant. The latter technique has the benefit of allowing a client to add a conference-unaware participant that does not support the REFER method.",
      "ja": "SIPとサードパーティの追加はREFER使用して行われ[12]。クライアントは、会議URIにINVITEリクエストを送信するためにそれらを求めて、参加者にREFERリクエストを送信することができます。さらに、クライアントは、参加者にINVITEを送信するためにそれを求めて、フォーカスを参照する要求を送信することができます。後者の技術は、クライアントがREFERメソッドをサポートしていない会議を意識しない参加者を追加することを可能にするという利点があります。"
    },
    {
      "indent": 0,
      "text": "5.3. Removing Participants",
      "section_title": true,
      "ja": "5.3。参加者を削除します"
    },
    {
      "indent": 3,
      "text": "As with additions, there are several mechanisms for departures. Removals can also be first person or third person.",
      "ja": "追加と同様に、出発のためのいくつかのメカニズムがあります。引越も、最初の人または第三者することができます。"
    },
    {
      "indent": 3,
      "text": "First person departures are trivially accomplished by sending a BYE request to the focus. This terminates the dialog with the focus and removes the participant from the conference. The focus can also remove a participant from the conference by sending it a BYE. In either case, the focus interacts with the mixer to make sure that the departed participant ceases receiving conference media, and that media from that participant are no longer mixed into the conference.",
      "ja": "まず人物の出発は自明焦点にBYE要求を送信することにより達成されます。これは、フォーカスを持つダイアログを終了し、会議から参加者を削除します。焦点は、また、それにBYEを送信することにより、会議から参加者を削除することができます。いずれの場合も、焦点は出発し、参加者が会議メディアを受けていない停止し、その参加者からそのメディアは、もはや会議に混入されていることを確認するミキサーと対話します。"
    },
    {
      "indent": 3,
      "text": "Third person departures can also be done using SIP, through the REFER method.",
      "ja": "第三者の出発もREFERメソッドを介して、SIPを使用して行うことができます。"
    },
    {
      "indent": 0,
      "text": "5.4. Destroying Conferences",
      "section_title": true,
      "ja": "5.4。会議の破棄"
    },
    {
      "indent": 3,
      "text": "Conferences can be destroyed in several ways. Generally, whether those means are applicable for any particular conference is a component of the conference policy.",
      "ja": "会議は、いくつかの方法で破壊することができます。一般に、これらの手段は、任意の特定の会議のために適用されるかどうかを会議ポリシーの構成要素です。"
    },
    {
      "indent": 3,
      "text": "When a conference is destroyed, the conference policy associated with it is destroyed. Any attempts to read or write the policy results in a protocol error. Furthermore, the conference URI becomes invalid. Any attempts to send an INVITE to it, or SUBSCRIBE to it, would result in a SIP error response.",
      "ja": "会議が破壊されると、それに関連する会議ポリシーが破壊されます。プロトコルエラーのポリシー結果を読み書きするための任意の試み。さらに、会議URIは無効になります。送信するための任意の試みはそれにINVITE、またはそれを購読し、SIPエラー応答をもたらすであろう。"
    },
    {
      "indent": 3,
      "text": "Typically, if a conference is destroyed while there are still participants, the focus would send a BYE to those participants before actually destroying the conference. Similarly, if there were any users subscribed to the conference notification service, those subscriptions would be terminated by the server before the actual destruction.",
      "ja": "参加者が残っている間、会議が破壊された場合、通常、焦点は実際に会議を破壊する前に、これらの参加者にBYEを送信します。会議通知サービスに加入して任意のユーザーがあった場合も同様に、これらのサブスクリプションは、実際の破壊前にサーバによって終了されるだろう。"
    },
    {
      "indent": 3,
      "text": "There is no explicit means in SIP to destroy a conference. However, a conference may be destroyed as a by-product of a user leaving the conference, which can be done with BYE. In particular, if the conference policy states that the conference is destroyed once the last user or a specific user leaves, when that user does leave (using a SIP BYE request), the conference is destroyed.",
      "ja": "会議を破壊するSIPには明示的な手段がありません。しかし、会議はBYEで行うことができる会議を残すユーザの副産物として破壊されてもよいです。会議ポリシーは、（SIP BYE要求を使用して）、ユーザが去るない場合、会議が最後のユーザまたは特定のユーザ葉一旦破壊されると述べた場合、特に、会議が破壊されます。"
    },
    {
      "indent": 0,
      "text": "5.5. Obtaining Membership Information",
      "section_title": true,
      "ja": "5.5。会員情報の取得"
    },
    {
      "indent": 3,
      "text": "A participant in a conference will frequently wish to know the set of other users in the conference. This information can be obtained in many ways.",
      "ja": "会議の参加者は、頻繁に会議内の他のユーザーのセットを知りたいでしょう。この情報は多くの方法で得ることができます。"
    },
    {
      "indent": 3,
      "text": "The conference notification service allows a conference-aware participant to subscribe to it, and receive notifications that contain the list of participants. When a new participant joins or leaves, subscribers are notified. The conference notification service also allows a user to do a \"fetch\" [4] to obtain the current listing.",
      "ja": "会議通知サービスは、カンファレンスを意識する参加者がそれに加入し、参加者のリストを含む通知を受け取ることができます。新しい参加者が参加するか、離れるとき、加入者に通知されます。会議通知サービスは、ユーザーが「フェッチ」[4]を得るために、現在のリストを行うことができます。"
    },
    {
      "indent": 0,
      "text": "5.6. Adding and Removing Media",
      "section_title": true,
      "ja": "5.6。メディアの追加と削除"
    },
    {
      "indent": 3,
      "text": "Each conference is composed of a particular set of media that the focus is managing. For example, a conference might contain a video stream and an audio stream. The set of media streams that constitute the conference can be changed by participants. When the set of media in the conference change, the focus will need to generate a re-INVITE to each participant in order to add or remove the media stream to each participant. When a media stream is being added, a participant can reject the offered media stream, in which case it will not receive or contribute to that stream. Rejection of a stream by a participant does not imply that the stream is no longer part of the conference, only that the participant is not involved in it.",
      "ja": "各会議は焦点が管理しているメディアの特定のセットで構成されています。例えば、会議では、ビデオストリームとオーディオストリームを含まれている場合があります。会議を構成するメディアストリームのセットは、参加者が変更することができます。ときに会議の変化におけるメディアのセットは、フォーカスが各参加者にメディアストリームを追加または削除するために、各参加者に再INVITEを生成する必要があります。メディアストリームが追加されている場合は、参加者はそれを受け取るか、その流れには寄与しません、その場合に提供されたメディアストリームを、拒否することができます。参加者によるストリームの拒否は、ストリームは、参加者がそれに関与していないだけで、会議の一部ではなくなったことを意味するものではありません。"
    },
    {
      "indent": 3,
      "text": "A SIP re-INVITE can be used by a participant to add or remove a media stream. This is accomplished using the standard offer/answer techniques for adding media streams to a session [13]. This will trigger the focus to generate its own re-INVITEs.",
      "ja": "SIP再INVITEメディアストリームを追加または削除するために参加者によって使用することができます。これは、[13]のセッションにメディアストリームを追加するための標準的なオファー/アンサー技術を用いて達成されます。これは、独自の再のINVITEを生成するためにフォーカスをトリガします。"
    },
    {
      "indent": 0,
      "text": "5.7. Conference Announcements and Recordings",
      "section_title": true,
      "ja": "5.7。会議アナウンスと録音"
    },
    {
      "indent": 3,
      "text": "Conference announcements and recordings play a key role in many real conferencing systems. Examples of such features include:",
      "ja": "会議の発表と録音が多く、実際の会議システムにおいて重要な役割を果たしています。そのような特徴の例としては、"
    },
    {
      "indent": 3,
      "text": "o Asking a user to state their name before joining the conference, in order to support a roll call",
      "ja": "ロールコールをサポートするために、会議に参加する前に自分の名前を述べることをユーザーに尋ねるO"
    },
    {
      "indent": 3,
      "text": "o Allowing a user to request a roll call, so they can hear who else is in the conference",
      "ja": "ユーザーが点呼を要求するために許可Oので、彼らは会議にある他の誰を聞くことができます"
    },
    {
      "indent": 3,
      "text": "o Allowing a user to press some keys on their keypad to record the conference",
      "ja": "ユーザーが会議を記録するために彼らのキーパッド上のいくつかのキーを押して許可O"
    },
    {
      "indent": 3,
      "text": "o Allowing a user to press some keys on their keypad to be connected with a human operator",
      "ja": "ユーザーは、人間のオペレータに接続するために彼らのキーパッド上のいくつかのキーを押して許可O"
    },
    {
      "indent": 3,
      "text": "o Allowing a user to press some keys on their keypad to mute or unmute their line",
      "ja": "ユーザーは自分のラインをミュートまたはミュート解除するために彼らのキーパッド上のいくつかのキーを押して許可O"
    },
    {
      "indent": 6,
      "text": "                           User 1\n                        +-----------+\n                        |           |\n                        |           |\n                        |Participant|\n                        |     1     |\n                        |           |\n                        +-----------+\n                              |SIP\n                              |Dialog\n                   Conference |1\n                   Policy +---|--------+\n   User 2          Server |   |        |          Application\n+-----------+           +-----------+  | non-SIP *************\n|           |           |           |  |-------- *           *\n|           |           |           |  |         *           *\n|Participant|-----------|   Focus   |------------*Participant*\n|     2     |  SIP      |           |  |  SIP    *     4     *\n|           |  Dialog   |           |--+  Dialog *           *\n+-----------+  2        +-----------+     4      *************\n                              |\n                              |\n                              |SIP\n                              |Dialog\n                              |3\n                              |\n                        +-----------+\n                        |           |\n                        |           |\n                        |Participant|\n                        |    3      |\n                        |           |\n                        +-----------+\n                           User 3",
      "raw": true
    },
    {
      "indent": 33,
      "text": "Figure 3",
      "ja": "図3"
    },
    {
      "indent": 3,
      "text": "In this framework, these capabilities are modeled as an application that acts as a participant in the conference. This is shown pictorially in Figure 3. The conference has four participants. Three of these participants are end users, and the fourth is the announcement application.",
      "ja": "このフレームワークでは、これらの機能は、会議の参加者として動作するアプリケーションとしてモデル化されています。これは、会議は4人の参加者があり、図3に模式的に示されています。これらの参加者のうち3つは、エンドユーザーである、そして第四は、アナウンスアプリケーションです。"
    },
    {
      "indent": 3,
      "text": "If the announcement application wishes to play an announcement to all the conference members (for example, to announce a join), it merely sends media to the mixer as would any other participant. The announcement is mixed in with the conversation and played to the participants.",
      "ja": "アナウンスアプリケーションは、すべての会議のメンバーに告知を再生したい場合、それは単に、他の参加者と同じように、ミキサーにメディアを送信する（例えば、加入が発表します）。発表は、会話で混合し、参加者に再生されます。"
    },
    {
      "indent": 3,
      "text": "Similarly, the announcement application can play an announcement to a specific user by configuring the conference policy so that the media it generates is only heard by the target user. The application then generates the desired announcement, and it will be heard only by the selected recipient.",
      "ja": "同様に、アナウンスアプリケーションは、それが生成するメディアのみを対象ユーザによって聞かれるように会議ポリシーを構成することにより、特定のユーザーに告知を再生することができます。アプリケーションは、所望の発表を生成し、それが選択された受信者のみ聞くことができます。"
    },
    {
      "indent": 3,
      "text": "The announcement application can also receive input from a specific user through the conference. To do this, it can use the application interaction framework [6]. This allows it to collect user input, possibly through keypad stimulus, and to take actions.",
      "ja": "アナウンスアプリケーションは、会議を通じて、特定のユーザからの入力を受け取ることができます。これを行うには、それがアプリケーション対話フレームワークを使用することができる[6]。これは、おそらくキーパッドの刺激を通じて、ユーザーの入力を収集するために、そして行動を取ることができます。"
    },
    {
      "indent": 0,
      "text": "6. Physical Realization",
      "section_title": true,
      "ja": "6.物理的に実現"
    },
    {
      "indent": 3,
      "text": "In this section, we present several physical instantiations of these components, to show how these basic functions can be combined to solve a variety of problems.",
      "ja": "このセクションでは、これらの基本的な機能は、様々な問題を解決するために組み合わせることができる方法を示すために、これらの構成要素のいくつかの物理的なインスタンス化を提示します。"
    },
    {
      "indent": 0,
      "text": "6.1. Centralized Server",
      "section_title": true,
      "ja": "6.1。中央サーバ"
    },
    {
      "indent": 3,
      "text": "In the most simplistic realization of this framework, there is a single physical server in the network, which implements the focus, the conference policy server, and the mixers. This is the classic \"one box\" solution, shown in Figure 4.",
      "ja": "この枠組みの中で最も単純な実現において、フォーカスを実現し、ネットワーク内の単一の物理サーバ、会議ポリシーサーバ、およびミキサーがあります。これは、図4に示されている古典的な「ワンボックス」ソリューションです。"
    },
    {
      "indent": 23,
      "text": "           Conference Server\n  ...................................\n  .                                 .\n  .                 +------------+  .\n  .                 | Conference |  .\n  .                 |Notification|  .\n  .                 |   Server   |  .\n  .                 +------------+  .\n  . +----------+                    .\n  . |Conference|            +-----+ .\n  . |  Policy  | +-------+ +-----+| .\n  . |  Server  | | Focus | |Mixer|+ .\n  . +----------+ +-------+ +-----+  .\n  ................//.\\.....***.......\n                //    \\ ***  *\n              //     ***      * RTP\n      SIP   //    ***  \\      *\n          //   ***      \\SIP   *\n        //  *** RTP      \\     *\n       /  **              \\     *\n+-----------+         +-----------+\n|Participant|         |Participant|\n+-----------+         +-----------+",
      "raw": true
    },
    {
      "indent": 36,
      "text": "Figure 4",
      "ja": "図4"
    },
    {
      "indent": 0,
      "text": "6.2. Endpoint Server",
      "section_title": true,
      "ja": "6.2。エンドポイントサーバー"
    },
    {
      "indent": 3,
      "text": "Another important model is that of a locally-mixed ad-hoc conference. In this scenario, two users (A and B) are in a regular point-to-point call. One of the participants (A) decides to conference-in a third participant, C. To do this, A begins acting as a focus. Its existing dialog with B becomes the first dialog attached to the focus. A would re-INVITE B on that dialog, changing its Contact URI to a new value that identifies the focus. In essence, A \"mutates\" from a single-user UA to a focus plus a single user UA, and in the process of such a mutation, its URI changes. Then, the focus makes an outbound INVITE to C. When C accepts, it mixes the media from B and C together, redistributing the results. The mixed media is also played locally. Figure 5 shows a diagram of this transition.",
      "ja": "もう一つの重要なモデルは、局所的に混合アドホック会議のことです。このシナリオでは、二人のユーザ（A及びB）は、定期的なポイントツーポイントコールです。参加者（A）の一つは、会議-にするために第三の参加者を決定し、Cでこれを行うには、Aは、フォーカスとして動作を開始します。 Bとの既存のダイアログが焦点に取り付けられた第1のダイアログになります。フォーカスを識別し、新しい値にその連絡先のURIを変更し、そのダイアログ上でBを再INVITEでしょう。本質的に、焦点にシングルユーザーUAから「変異する」プラスシングルユーザUA、及びそのような突然変異の過程において、そのURIが変化します。次に、焦点はアウトバウンドCにINVITEを行うCが受け入れる場合は、結果を再配布、共にB及びCからのメディアを混合します。ミクストメディアはローカルでも再生されます。図5は、この遷移を示す図です。"
    },
    {
      "indent": 8,
      "text": "    B                              B\n +------+                       +------+\n |      |                       |      |\n |  UA  |                       |  UA  |\n |      |                       |      |\n +------+                       +------+\n   |  .                           |  .\n   |  .                           |  .\n   |  .                           |  .\n   |  .         Transition        |  .\n   |  .        ------------>      |  .\nSIP|  .RTP                     SIP|  .RTP\n   |  .                           |  .\n   |  .                           |  .\n   |  .                           |  .\n   |  .                           |  .\n   |  .                       +----------+\n +------+                     | +------+ |   SIP    +------+\n |      |                     | |Focus | |----------|      |\n |  UA  |                     | |C.Pol.| |          |  UA  |\n |      |                     | |Mixers| |..........|      |\n +------+                     | |      | |   RTP    +------+\n                              | +------+ |\n    A                         |     +    |             C\n                              |     + <..|.......\n                              |     +    |      .\n                              | +------+ |      .\n                              | |Parti-| |      .\n                              | |cipant| |      .\n                              | |      | |      .\n                              | +------+ |      .\n                              +----------+      .\n                                   A            .\n                                                .",
      "raw": true
    },
    {
      "indent": 54,
      "text": "Internal\nInterface",
      "raw": true
    },
    {
      "indent": 33,
      "text": "Figure 5",
      "ja": "図5"
    },
    {
      "indent": 3,
      "text": "It is important to note that the external interfaces in this model, between A and B, and between B and C, are exactly the same to those that would be used in a centralized server model. User A could also implement a conference policy and a conference notification service, allowing the participants to have access to them if they so desired. Just because the focus is co-resident with a participant does not mean any aspect of the behaviors and external interfaces will change.",
      "ja": "このモデルでは、AとBとの間、及びBとCの間の外部インターフェースは、正確に集中型サーバモデルで使用されるものと同じであることに留意することが重要です。ユーザーAはまた、彼らは必要に応じて参加者はそれらへのアクセスを持つことができるように、会議ポリシーおよび会議通知サービスを実装することができます。焦点は、参加者と共存しているという理由だけで行動のあらゆる側面を意味するものではありませんし、外部インタフェースは変更されます。"
    },
    {
      "indent": 0,
      "text": "6.3. Media Server Component",
      "section_title": true,
      "ja": "6.3。メディアサーバーコンポーネント"
    },
    {
      "indent": 24,
      "text": " +------------+             +------------+\n | App  Server|     SIP     |Conf. Cmpnt.|\n |            |-------------|            |\n |   Focus    |    non-SIP  |   Focus    |\n |   C.Pol    |-------------|   C.Pol    |\n |            |             |   Mixers   |\n |Notification|             |            |\n |            |             |            |\n +------------+             +------------+\n     |      \\                    .. .\n     |       \\\\            RTP...   .\n     |         \\\\           ..      .\n     |     SIP   \\\\      ...        .\n SIP |             \\\\ ...           .RTP\n     |              ..\\             .\n     |           ...   \\\\           .\n     |        ...        \\\\         .\n     |      ..             \\\\       .\n     |   ...                 \\\\     .\n     | ..                      \\    .\n+-----------+              +-----------+\n|Participant|              |Participant|\n+-----------+              +-----------+",
      "raw": true
    },
    {
      "indent": 36,
      "text": "Figure 6",
      "ja": "図6"
    },
    {
      "indent": 3,
      "text": "In this model, shown in Figure 6, each conference involves two centralized servers. One of these servers, referred to as the \"application server\" owns and manages the membership and media policies, and maintains a dialog with each participant. As a result, it represents the focus seen by all participants in a conference. However, this server doesn't provide any media support. To perform the actual media mixing function, it makes use of a second server, called the \"mixing server\". This server includes a focus, and implements a conference policy, but has no conference notification service. Its conference policy tells it to accept all invitations from the top-level focus. The focus in the application server uses third party call control to connect the media streams of each user to the mixing server, as needed. If the focus in the application server receives a conference policy control command from a client, it delegates that to the media server by making the same media policy control command to it.",
      "ja": "このモデルでは、図6に示すように、各会議は、二つの中央サーバを含みます。これらのサーバーの一つが、「アプリケーションサーバー」は所有し、メンバーシップおよびメディアポリシーを管理し、各参加者との対話を維持してと呼ばれます。その結果、会議のすべての参加者から見た焦点を表しています。しかし、このサーバは、任意のメディアのサポートを提供していません。実際のメディアミキシング機能を実行するために、それは第二のサーバを利用し、「ミキシングサーバ」と呼ばれます。このサーバは、フォーカスを備えており、会議ポリシーを実装していますが、何の会議通知サービスを持っていません。その会議の方針は、トップレベルの焦点からすべての招待を受け入れるように指示します。アプリケーションサーバにおける焦点は、必要に応じて、混合サーバに各ユーザのメディアストリームを接続するために、第三者呼制御を使用します。アプリケーションサーバでの焦点は、クライアントからの会議ポリシー制御コマンドを受信した場合、その代表者ということに同じメディアポリシー制御コマンドを行うことにより、メディアサーバへ。"
    },
    {
      "indent": 3,
      "text": "This model allows for the mixing server to be used as a resource for a variety of different conferencing applications. This is because it is unaware of conference policy; it is merely a \"slave\" to the top-level server, doing whatever it asks.",
      "ja": "このモデルは、異なる会議種々の用途のためのリソースとして使用する混合サーバーを可能にします。それは会議ポリシーを認識していないためです。それは頼むものは何でもやって、単にトップレベルのサーバーに「奴隷」です。"
    },
    {
      "indent": 0,
      "text": "6.4. Distributed Mixing",
      "section_title": true,
      "ja": "6.4。分散混合"
    },
    {
      "indent": 3,
      "text": "In a distributed mixed conference, there is still a centralized server that implements the focus, conference policy server, and media policy server. However, there are no centralized mixers. Rather, there are mixers in each endpoint, along with a conference policy server. The focus distributes the media by using third party call control [14] to move a media stream between each participant and each other participant. As a result, if there are N participants in the conference, there will be a single dialog between each participant and the focus, but the session description associated with that dialog will be constructed to allow media to be distributed amongst the participants. This is shown in Figure 7.",
      "ja": "分散混合会議では、フォーカス、会議ポリシーサーバ、およびメディア・ポリシーサーバを実装して中央サーバが依然として存在します。しかし、中央集中型のミキサーはありません。むしろ、会議ポリシーサーバと一緒に各エンドポイントでのミキサーは、があります。焦点は、各参加者及び各他の参加者との間のメディアストリームを移動させるように[14]、第三者呼制御を使用してメディアを配信します。会議におけるN個の参加者が存在する場合その結果、そこに各参加者と焦点との間の単一のダイアログであろうが、そのダイアログに関連付けられたセッション記述は、メディアは、参加者間で分散されるように構築されます。これは、図7に示されています。"
    },
    {
      "indent": 17,
      "text": "                  +---------+\n                  |Partcpnt |\n      media       |         |      media\n   ...............|         |..................\n   .              |  Mixers |                 .\n   .              |C.Pol.Srv|                 .\n   .              +---------+                 .\n   .                   |                      .\n   .                   |                      .\n   .                   |                      .\n   .            dialog |                      .\n   .                   |                      .\n   .                   |                      .\n   .                   |                      .\n   .              +---------+                 .\n   .              |Cnf.Srvr.|                 .\n  .               |         |                 .\n  .               |  Focus  |                 .\n  .               |C.Pol.Srv|                 .\n  .             / |         |  \\              .\n  .            /  +---------+   \\             .\n  .           /                  \\            .\n  .          /                    \\           .\n  .         /               dialog \\          .\n  .        /                        \\         .\n  .       /dialog                    \\        .\n  .      /                            \\       .\n  .     /                              \\      .\n  .    /                                \\     .\n  .                                           .\n+---------+                           +---------+\n|Partcpnt |                           |Partcpnt |\n|         |                           |         |\n|         | ......................... |         |\n|  Mixers |                           |  Mixers |\n|C.Pol.Srv|          media            |C.Pol.Srv|\n+---------+                           +---------+",
      "raw": true
    },
    {
      "indent": 36,
      "text": "Figure 7",
      "ja": "図7"
    },
    {
      "indent": 3,
      "text": "There are several ways in which the media can be distributed to each participant for mixing. In a multi-unicast model, each participant sends a copy of its media to each other participant. In this case, the session description manages N-1 media streams. In a multicast model, each participant joins a common multicast group, and each participant sends a single copy of its media stream to that group. The underlying multicast infrastructure then distributes the media, so that each participant gets a copy. In a single-source multicast model (SSM), each participant sends its media stream to a central point, using unicast. The central point then redistributes the media to all participants using multicast. The focus is responsible for selecting the modality of media distribution, and for handling any hybrids that would be necessitated from clients with mixed capabilities.",
      "ja": "メディアが混合するため、各参加者に配布することができるいくつかの方法があります。マルチユニキャストモデルでは、各参加者は互いに参加者にそのメディアのコピーを送信します。この場合、セッション記述は、N-1のメディアストリームを管理します。マルチキャストモデルでは、各参加者は、共通のマルチキャストグループに参加し、各参加者は、そのグループにそのメディアストリームの単一のコピーを送信します。各参加者がコピーを取得するように基本的なマルチキャストインフラストラクチャは、その後、メディアを配布しています。シングルソースマルチキャストモデル（SSM）で、各参加者は、ユニキャストを使用して、中心点へのメディアストリームを送信します。中心点は、マルチキャストを使用して、すべての参加者にメディアを再分配します。焦点は、メディア配信のモダリティを選択するための、および混合機能を備えたクライアントから必要とされるだろう任意のハイブリッドを処理するための責任があります。"
    },
    {
      "indent": 3,
      "text": "When a new participant joins or is added, the focus will perform the necessary third party call control to distribute the media from the new participant to all the other participants, and vice versa.",
      "ja": "新しい参加者が参加するか追加されると、フォーカスが新しい他のすべての参加者への参加、およびその逆からメディアを配布するために必要なサードパーティの呼制御を実行します。"
    },
    {
      "indent": 3,
      "text": "The central conference server also exposes an interface to the conference policy. Of course, the central conference server cannot implement any of the media operations or policies directly. Rather, it would delegate the implementation to each participant. As an example, if a participant decides to switch the overall conference mode from \"voice activated\" to \"continuous presence\", they would communicate with the central conference policy server. The conference policy server, in turn, would communicate with the conference policy servers that are co-resident with each participant, using some non-SIP-specific mechanism, and instruct them to use \"continuous presence\".",
      "ja": "中央会議サーバはまた、会議の方針へのインタフェースを公開します。もちろん、中央会議サーバは、直接メディア操作やポリシーのいずれかを実装することはできません。むしろ、それは各参加者に実施を委任します。参加者は「継続的プレゼンス」に「活性化の声」からの全体的な会議モードを切り替えることを決定した場合の例として、彼らは中央の会議ポリシーサーバーと通信します。会議ポリシーサーバは、順番に、いくつかの非SIP固有のメカニズムを使用して、各参加者と共存している会議ポリシーサーバと通信し、「継続的プレゼンス」を使用するように指示します。"
    },
    {
      "indent": 3,
      "text": "This model requires additional functionality in user agents, which may or may not be present. The participants, therefore, must be able to advertise this capability to the focus.",
      "ja": "このモデルは、あってもなくてもよいユーザエージェント、に追加の機能を必要とします。参加者は、それゆえ、焦点にこの能力を宣伝することができなければなりません。"
    },
    {
      "indent": 0,
      "text": "6.5. Cascaded Mixers",
      "section_title": true,
      "ja": "6.5。カスケード接続ミキサー"
    },
    {
      "indent": 3,
      "text": "In very large conferences, it may not be possible to have a single mixer that can handle all of the media. A solution to this is to use cascaded mixers. In this architecture, there is a centralized focus, but the mixing function is implemented by a multiplicity of mixers, scattered throughout the network. Each participant is connected to one, and only one of the mixers. The focus uses some kind of control protocol to connect the mixers together, so that all of the participants can hear each other.",
      "ja": "非常に大規模な会議では、すべてのメディアを扱うことができる単一のミキサーを持つことができない場合があります。これを解決するには、カスケード接続されたミキサーを使用することです。このアーキテクチャでは、集中フォーカスがあるが、ミキシング機能は、ネットワーク全体に分散ミキサー多数の、によって実現されます。各参加者は1、とミキサーの一つだけに接続されています。焦点は、参加者全員が互いを聞くことができるように、一緒にミキサーを接続するための制御プロトコルのいくつかの種類を使用しています。"
    },
    {
      "indent": 3,
      "text": "This architecture is shown in Figure 8.",
      "ja": "このアーキテクチャは、図8に示されています。"
    },
    {
      "indent": 6,
      "text": "                         +---------+\n +-----------------------|         |------------------------+\n |   ++++++++++++++++++++|         |++++++++++++++++++      |\n |   +            +------|  Focus  |---------+       +      |\n |   +            |      |         |         |       +      |\n |   +            |    +-|         |--+      |       +      |\n |   +            |    | +---------+  |      |       +      |\n |   +            |    |      +       |      |       +      |\n |   +            |    |      +       |      |       +      |\n |   +            |    |      +       |      |       +      |\n |   +            |    | +---------+  |      |       +      |\n |   +            |    | |         |  |      |       +      |\n |   +            |    | | Mixer 2 |  |      |       +      |\n |   +            |    | |         |  |      |       +      |\n |   +            |    | +---------+  |      |       +      |\n |   +            |    |...   .  .... |      |       +      |\n |   +           .|....|      .      .|....  |       +      |\n |   +     ...... |    |      .       |    ..|...    +      |\n |   +  ...       |    |      .       |      |   ....+      |\n | +---------+    |    | +---------+  |      |  +---------+ |\n | |         |    |    | |         |  |      |  |         | |\n | | Mixer 2 |    |    | | Mixer 3 |  |      |  | Mixer 4 | |\n | |         |    |    | |         |  |      |  |         | |\n | +---------+    |    | +---------+  |      |  +---------+ |\n |    .    .      |    |      .  .    |      |     .   .    |\n |   .      .     |    |    ..   .    |      |   ..    .    |\n |  .       .     |    |   .      .   |      |  .       .   |\n+---------+  .    |  +---------+  .   |    +---------+  .   |\n| Prtcpnt |   .   |  | Prtcpnt |   .  |    | Prtcpnt |  .   |\n|    1    |    .  |  |    3    |   .  |    |    5    |  .   |\n+---------+    .  |  +---------+    . |    +---------+   .  |\n                . |                 . |                  .  |\n         +---------+         +---------+           +---------+\n         | Prtcpnt |         | Prtcpnt |           | Prtcpnt |\n         |    2    |         |    4    |           |    6    |\n         +---------+         +---------+           +---------+",
      "raw": true
    },
    {
      "indent": 9,
      "text": "-------  SIP Dialog\n.......  Media Flow\n+++++++  Control Protocol",
      "raw": true
    },
    {
      "indent": 34,
      "text": "Figure 8",
      "ja": "図8"
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Conferences frequently require security features in order to properly operate. The conference policy may dictate that only certain participants can join, or that certain participants can create new policies. Generally speaking, conference applications are very concerned about authorization decisions. Having mechanisms for establishing and enforcing such authorization rules is a central concept throughout this document.",
      "ja": "会議は頻繁に正しく動作するために、セキュリティ機能が必要です。会議ポリシーは、特定の参加者が参加できることを指示することができる、またはその特定の参加者が新しいポリシーを作成することができます。一般的に言って、会議アプリケーションは、認可の決定について非常に懸念しています。こうした認証ルールを確立し、実施するためのメカニズムを持つことは、この文書全体で中心的な概念です。"
    },
    {
      "indent": 3,
      "text": "Of course, authorization rules require authentication. Normal SIP authentication mechanisms should suffice for the conference authorization mechanisms described here.",
      "ja": "もちろん、認可規則は、認証を必要とします。通常のSIP認証メカニズムは、ここで説明した会議の承認メカニズムのために十分です。"
    },
    {
      "indent": 3,
      "text": "Privacy is an important aspect of conferencing. Users may wish to join a conference without anyone knowing that they have joined, in order to silently listen in. In other applications, a participant may wish to hide only their identity from other participants, but otherwise let them know of their presence. These functions need to be provided by the conferencing system.",
      "ja": "プライバシーは、会議の重要な側面です。ユーザーは静かに耳を傾けるためには、彼らが参加していることを知っている誰もせずに会議に参加することを望むかもしれない。他のアプリケーションでは、参加者が他の参加者からだけで自分の身元を隠すことを望むが、それ以外、彼らの存在を知っていることがあります。これらの機能は、会議システムによって提供される必要があります。"
    },
    {
      "indent": 0,
      "text": "8. Contributors",
      "section_title": true,
      "ja": "8.協力者"
    },
    {
      "indent": 3,
      "text": "This document is the result of discussions amongst the conferencing design team. The members of this team include:",
      "ja": "この文書は会議デザインチームの中での議論の結果です。このチームのメンバーは以下のとおりです。"
    },
    {
      "indent": 3,
      "text": "Alan Johnston Brian Rosen Rohan Mahy Henning Schulzrinne Orit Levin Roni Even Tom Taylor Petri Koskelainen Nermeen Ismail Andy Zmolek Joerg Ott Dan Petrie",
      "ja": "アラン・ジョンストン、ブライアン・ローゼンローハンマーイヘニングSchulzrinneとのoriTレヴィンロニでもトム・テイラーペトリKoskelainen NermeenイスマイルアンディZmolekイェルク・オットダン・ペトリー"
    },
    {
      "indent": 0,
      "text": "9. Acknowledgements",
      "section_title": true,
      "ja": "9.謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Mary Barnes, Chris Boulton and Rohan Mahy for their comments. Thanks to Allison Mankin for her comments and support of this work.",
      "ja": "作者は彼らのコメントのためにメアリー・バーンズ、クリスボールトンとローハンマーイに感謝したいと思います。彼女のコメントや、この作業の支援のためのアリソンマンキンに感謝します。"
    },
    {
      "indent": 0,
      "text": "10. Informative References",
      "section_title": true,
      "ja": "10.参考文献"
    },
    {
      "indent": 3,
      "text": "[1] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A., Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP: Session Initiation Protocol\", RFC 3261, June 2002.",
      "ja": "[1]ローゼンバーグ、J.、Schulzrinneと、H.、カマリロ、G.、ジョンストン、A.、ピーターソン、J.、スパークス、R.、ハンドレー、M.、およびE.学生、 \"SIP：セッション開始プロトコル\" 、RFC 3261、2002年6月。"
    },
    {
      "indent": 3,
      "text": "[2] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson, \"RTP: A Transport Protocol for Real-Time Applications\", STD 64, RFC 3550, July 2003.",
      "ja": "[2] Schulzrinneと、H.、Casner、S.、フレデリック、R.、およびV.ヤコブソン、 \"RTP：リアルタイムアプリケーションのためのトランスポートプロトコル\"、STD 64、RFC 3550、2003年7月。"
    },
    {
      "indent": 3,
      "text": "[3] Levin, O. and R. Even, \"High-Level Requirements for Tightly Coupled SIP Conferencing\", RFC 4245, November 2005.",
      "ja": "[3]でもレビン、O.とR.、 \"密結合SIP会議のための高レベルの要件\"、RFC 4245、2005年11月。"
    },
    {
      "indent": 3,
      "text": "[4] Roach, A., \"Session Initiation Protocol (SIP)-Specific Event Notification\", RFC 3265, June 2002.",
      "ja": "[4]ローチ、A.、 \"セッション開始プロトコル（SIP）特異的イベント通知\"、RFC 3265、2002年6月。"
    },
    {
      "indent": 3,
      "text": "[5] Campbell, B., \"The Message Session Relay Protocol\", Work In Progress, October 2004.",
      "ja": "[5]キャンベル、B.、「メッセージセッションリレープロトコル」、進歩、2004年10月で働いています。"
    },
    {
      "indent": 3,
      "text": "[6] Rosenberg, J., \"A Framework for Application Interaction in the Session Initiation Protocol (SIP)\", Work In Progress, February 2005.",
      "ja": "[6]ローゼンバーグ、J.、進歩、2005年2月ワーク「セッション開始プロトコル（SIP）でのアプリケーションの相互作用のためのフレームワーク」。"
    },
    {
      "indent": 3,
      "text": "[7] Johnston, A. and O. Levin, \"Session Initiation Protocol (SIP) Call Control - Conferencing for User Agents\", Work in Progress, February 2005.",
      "ja": "[7]ジョンストン、A.、およびO.レヴィン、「セッション開始プロトコル（SIP）呼制御 - ユーザエージェントのための会議」、進歩、2005年2月に作業を。"
    },
    {
      "indent": 3,
      "text": "[8] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, January 2005.",
      "ja": "[8]バーナーズ - リー、T.、フィールディング、R.、およびL. Masinter、 \"ユニフォームリソース識別子（URI）：汎用構文\"、STD 66、RFC 3986、2005年1月。"
    },
    {
      "indent": 3,
      "text": "[9] Rosenberg, J., Schulzrinne, H., and P. Kyzivat, \"Indicating User Agent Capabilities in the Session Initiation Protocol (SIP)\", RFC 3840, August 2004.",
      "ja": "[9]ローゼンバーグ、J.、Schulzrinneと、H.、およびP. Kyzivatを、RFC 3840、2004年8月 \"セッション開始プロトコル（SIP）におけるユーザエージェント能力を示します\"。"
    },
    {
      "indent": 3,
      "text": "[10] Mahy, R. and D. Petrie, \"The Session Initiation Protocol (SIP) \"Join\" Header\", RFC 3911, October 2004.",
      "ja": "[10]マーイ、R.とD.ペトリー、 \"セッション開始プロトコル（SIP）は、 \"\" ヘッダ\"、RFC 3911、2004年10月に参加しましょう。"
    },
    {
      "indent": 3,
      "text": "[11] Rosenberg, J., Schulzrinne, H., and R. Mahy, \"An INVITE-Initiated Dialog Event Package for the Session Initiation Protocol (SIP)\", RFC 4235, November 2005.",
      "ja": "[11] RFC 4235 \"セッション開始プロトコル（SIP）のためのINVITEが開始ダイアログイベントパッケージ\" ローゼンバーグ、J.、Schulzrinneと、H.、およびR.マーイ、2005年11月。"
    },
    {
      "indent": 3,
      "text": "[12] Sparks, R., \"The Session Initiation Protocol (SIP) Refer Method\", RFC 3515, April 2003.",
      "ja": "[12]スパークス、R.、 \"セッション開始プロトコル（SIP）メソッドを参照してください\"、RFC 3515、2003年4月。"
    },
    {
      "indent": 3,
      "text": "[13] Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with Session Description Protocol (SDP)\", RFC 3264, June 2002.",
      "ja": "[13]ローゼンバーグ、J.、およびH. Schulzrinneと、RFC 3264、2002年6月 \"セッション記述プロトコル（SDP）とのオファー/アンサーモデル\"。"
    },
    {
      "indent": 3,
      "text": "[14] Rosenberg, J., Peterson, J., Schulzrinne, H., and G. Camarillo, \"Best Current Practices for Third Party Call Control (3pcc) in the Session Initiation Protocol (SIP)\", BCP 85, RFC 3725, April 2004.",
      "ja": "[14]ローゼンバーグ、J.、ピーターソン、J.、Schulzrinneと、H.、およびG.カマリロを、BCP 85、RFC 3725 \"セッション開始プロトコル（SIP）における第三者呼制御（3PCC）のベスト・プラクティスの現在\" 、2004年4月。"
    },
    {
      "indent": 3,
      "text": "[15] Rosenberg, J., \"The Session Initiation Protocol (SIP) UPDATE Method\", RFC 3311, October 2002.",
      "ja": "[15]ローゼンバーグ、J.、 \"セッション開始プロトコル（SIP）更新方法\"、RFC 3311、2002年10月。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Jonathan Rosenberg Cisco Systems 600 Lanidex Plaza Parsippany, NJ 07054 US",
      "ja": "ジョナサン・ローゼンバーグシスコシステムズ600 Lanidexプラザパーシッパニー、NJ 07054米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 973 952-5000 EMail: jdrosen@cisco.com URI: http://www.jdrosen.net",
      "ja": "電話：+1 973 952-5000 Eメール：jdrosen@cisco.com URI：http://www.jdrosen.net"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットソサエティおよびインターネット・エンジニアリング・タスク・フォース放棄すべての保証、明示または、（もしあれば）後援ISに設けられています。黙示、情報の利用は、特定の目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証含むがこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is provided by the IETF Administrative Support Activity (IASA).",
      "ja": "RFCエディタ機能のための資金は、IETF管理サポート活動（IASA）によって提供されます。"
    }
  ]
}