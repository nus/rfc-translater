{
  "title": {
    "text": "RFC 4251 - The Secure Shell (SSH) Protocol Architecture",
    "ja": "RFC 4251 - セキュアシェル（SSH）プロトコルアーキテクチャ"
  },
  "number": 4251,
  "created_at": "2019-10-22 13:21:05.105553+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                          T. Ylonen\nRequest for Comments: 4251              SSH Communications Security Corp\nCategory: Standards Track                                C. Lonvick, Ed.\n                                                     Cisco Systems, Inc.\n                                                            January 2006",
      "raw": true
    },
    {
      "indent": 14,
      "text": "The Secure Shell (SSH) Protocol Architecture",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The Secure Shell (SSH) Protocol is a protocol for secure remote login and other secure network services over an insecure network. This document describes the architecture of the SSH protocol, as well as the notation and terminology used in SSH protocol documents. It also discusses the SSH algorithm naming system that allows local extensions. The SSH protocol consists of three major components: The Transport Layer Protocol provides server authentication, confidentiality, and integrity with perfect forward secrecy. The User Authentication Protocol authenticates the client to the server. The Connection Protocol multiplexes the encrypted tunnel into several logical channels. Details of these protocols are described in separate documents.",
      "ja": "セキュアシェル（SSH）プロトコルは、安全でないネットワーク上の安全なリモートログインおよびその他のセキュアなネットワークサービスのためのプロトコルです。この文書では、SSHプロトコルのアーキテクチャ、ならびにSSHプロトコル文書で使用される表記法及び用語を説明しています。また、ローカルの拡張を可能にするSSHアルゴリズムのネーミングシステムについて説明します。 SSHプロトコルは、3つの主要コンポーネントで構成されています：トランスポート層プロトコルは、完全転送秘密でサーバ認証、機密性、および完全性を提供します。ユーザー認証プロトコルは、クライアントをサーバに認証します。接続プロトコルは、いくつかの論理チャネルへの暗号化トンネルを多重化します。これらのプロトコルの詳細については、別の文献に記載されています。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n2. Contributors ....................................................3\n3. Conventions Used in This Document ...............................4\n4. Architecture ....................................................4\n   4.1. Host Keys ..................................................4\n   4.2. Extensibility ..............................................6\n   4.3. Policy Issues ..............................................6\n   4.4. Security Properties ........................................7\n   4.5. Localization and Character Set Support .....................7\n5. Data Type Representations Used in the SSH Protocols .............8\n6. Algorithm and Method Naming ....................................10\n7. Message Numbers ................................................11\n8. IANA Considerations ............................................12\n9. Security Considerations ........................................13\n   9.1. Pseudo-Random Number Generation ...........................13\n   9.2. Control Character Filtering ...............................14\n   9.3. Transport .................................................14\n        9.3.1. Confidentiality ....................................14\n        9.3.2. Data Integrity .....................................16\n        9.3.3. Replay .............................................16\n        9.3.4. Man-in-the-middle ..................................17\n        9.3.5. Denial of Service ..................................19\n        9.3.6. Covert Channels ....................................20\n        9.3.7. Forward Secrecy ....................................20\n        9.3.8. Ordering of Key Exchange Methods ...................20\n        9.3.9. Traffic Analysis ...................................21\n   9.4. Authentication Protocol ...................................21\n        9.4.1. Weak Transport .....................................21\n        9.4.2. Debug Messages .....................................22\n        9.4.3. Local Security Policy ..............................22\n        9.4.4. Public Key Authentication ..........................23\n        9.4.5. Password Authentication ............................23\n        9.4.6. Host-Based Authentication ..........................23\n   9.5. Connection Protocol .......................................24\n        9.5.1. End Point Security .................................24\n        9.5.2. Proxy Forwarding ...................................24\n        9.5.3. X11 Forwarding .....................................24\n10. References ....................................................26\n   10.1. Normative References .....................................26\n   10.2. Informative References ...................................26\nAuthors' Addresses ................................................29\nTrademark Notice ..................................................29",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "Secure Shell (SSH) is a protocol for secure remote login and other secure network services over an insecure network. It consists of three major components:",
      "ja": "セキュアシェル（SSH）は、安全でないネットワーク上の安全なリモートログイン及び他の安全なネットワークサービスのためのプロトコルです。これは、3つの主要コンポーネントで構成されています。"
    },
    {
      "indent": 3,
      "text": "o The Transport Layer Protocol [SSH-TRANS] provides server authentication, confidentiality, and integrity. It may optionally also provide compression. The transport layer will typically be run over a TCP/IP connection, but might also be used on top of any other reliable data stream.",
      "ja": "トランスポート層プロトコルO [SSH-TRANS]は、サーバ認証、機密性、および完全性を提供します。それはまた、必要に応じて圧縮を提供することができます。トランスポート層は、典型的には、TCP / IP接続を介して実行されますが、また、他の信頼性の高いデータストリームの上で使用される可能性があります。"
    },
    {
      "indent": 3,
      "text": "o The User Authentication Protocol [SSH-USERAUTH] authenticates the client-side user to the server. It runs over the transport layer protocol.",
      "ja": "Oユーザー認証プロトコル[SSH-USERAUTH]サーバーにクライアント側のユーザを認証します。これは、トランスポート層プロトコル上で動作します。"
    },
    {
      "indent": 3,
      "text": "o The Connection Protocol [SSH-CONNECT] multiplexes the encrypted tunnel into several logical channels. It runs over the user authentication protocol.",
      "ja": "O接続プロトコル[SSH-CONNECTは、いくつかの論理チャネルへの暗号化トンネルを多重化します。これは、ユーザ認証プロトコル上で動作します。"
    },
    {
      "indent": 3,
      "text": "The client sends a service request once a secure transport layer connection has been established. A second service request is sent after user authentication is complete. This allows new protocols to be defined and coexist with the protocols listed above.",
      "ja": "クライアントは、一度セキュアなトランスポート層接続が確立されたサービス要求を送信します。ユーザ認証が完了した後に、第2のサービス要求が送信されます。これは、新しいプロトコルが定義されており、上記のプロトコルと共存することができます。"
    },
    {
      "indent": 3,
      "text": "The connection protocol provides channels that can be used for a wide range of purposes. Standard methods are provided for setting up secure interactive shell sessions and for forwarding (\"tunneling\") arbitrary TCP/IP ports and X11 connections.",
      "ja": "接続プロトコルは、目的の広い範囲のために使用することができるチャネルを提供します。標準的な方法は、安全な対話型シェルのセッションを設定すると（「トンネリング」）、任意のTCP / IPポートとX11接続を転送するために設けられています。"
    },
    {
      "indent": 0,
      "text": "2. Contributors",
      "section_title": true,
      "ja": "2.協力者"
    },
    {
      "indent": 3,
      "text": "The major original contributors of this set of documents have been: Tatu Ylonen, Tero Kivinen, Timo J. Rinne, Sami Lehtinen (all of SSH Communications Security Corp), and Markku-Juhani O. Saarinen (University of Jyvaskyla). Darren Moffat was the original editor of this set of documents and also made very substantial contributions.",
      "ja": "文書のこのセットの主要な元貢献はされている：タトゥYlonenと、TERO Kivinen、ティモJ.リンネ、サミLehtinenの（SSHコミュニケーションズ・セキュリティ社の全て）、およびマルック・Juhani O.サーリネン（ユヴァスキュラ大学）。ダレン・モファットは、文書のこのセットの元編集者だったとも非常に実質的な貢献をしました。"
    },
    {
      "indent": 3,
      "text": "Many people contributed to the development of this document over the years. People who should be acknowledged include Mats Andersson, Ben Harris, Bill Sommerfeld, Brent McClure, Niels Moller, Damien Miller, Derek Fawcus, Frank Cusack, Heikki Nousiainen, Jakob Schlyter, Jeff Van Dyke, Jeffrey Altman, Jeffrey Hutzelman, Jon Bright, Joseph Galbraith, Ken Hornstein, Markus Friedl, Martin Forssen, Nicolas Williams, Niels Provos, Perry Metzger, Peter Gutmann, Simon Josefsson, Simon Tatham, Wei Dai, Denis Bider, der Mouse, and Tadayoshi Kohno. Listing their names here does not mean that they endorse this document, but that they have contributed to it.",
      "ja": "多くの人々が長年にわたってこのドキュメントの発展に貢献しました。承認される必要がある人々は、マット・アンダーソン、ベン・ハリス、ビルゾンマーフェルト、ブレントマクルーア、ニールス・モーラー、ダミアン・ミラー、デレクFawcus、フランク・キューザック、ハイッキ・ヌジアイナン、ヤコブSchlyter、ジェフ・ヴァン・ダイク、ジェフリー・アルトマン、ジェフリーHutzelman、ジョン明るい、ジョセフが含まれますガルブレイス、ケンHornstein、マルクスFriedlの、マーティンForssen、ニコラス・ウィリアムズ、ニールス・プロボス、ペリーメッツガー、ピーター・ガットマン、サイモンJosefsson氏、サイモンTatham氏、魏大、デニスBider、DERマウス、および忠義河野。ここに自分の名前をリスト彼らはこの文書を承認することを意味するものではありませんが、彼らはそれに貢献してきたこと。"
    },
    {
      "indent": 0,
      "text": "3. Conventions Used in This Document",
      "section_title": true,
      "ja": "この文書で使用される3表記"
    },
    {
      "indent": 3,
      "text": "All documents related to the SSH protocols shall use the keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" to describe requirements. These keywords are to be interpreted as described in [RFC2119].",
      "ja": "SSHプロトコルに関連するすべての文書は、 \"MAY\"、 \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、 \"SHALL\"、 \"SHOULD\" \"ないもの\"、 \"推奨\" \"NOTべきである\" キーワードを使用しなければなりません、要件を記述すると「オプション」。これらのキーワードは、[RFC2119]に記載されているように解釈されるべきです。"
    },
    {
      "indent": 3,
      "text": "The keywords \"PRIVATE USE\", \"HIERARCHICAL ALLOCATION\", \"FIRST COME FIRST SERVED\", \"EXPERT REVIEW\", \"SPECIFICATION REQUIRED\", \"IESG APPROVAL\", \"IETF CONSENSUS\", and \"STANDARDS ACTION\" that appear in this document when used to describe namespace allocation are to be interpreted as described in [RFC2434].",
      "ja": "キーワード「私的使用」、「階層割り当ては」、「先着順」この文書に表示される「EXPERT REVIEW」、「仕様REQUIRED」、「IESGの承認」、「IETFコンセンサス」、および「STANDARDS ACTION」、名前空間の割り当てを記述するために使用される[RFC2434]に記載されているように解釈されるべきです。"
    },
    {
      "indent": 3,
      "text": "Protocol fields and possible values to fill them are defined in this set of documents. Protocol fields will be defined in the message definitions. As an example, SSH_MSG_CHANNEL_DATA is defined as follows.",
      "ja": "プロトコルフィールドとそれを埋めるために可能な値は、文書のこのセットで定義されています。プロトコルフィールドは、メッセージ定義で定義されます。次のように、一例として、SSH_MSG_CHANNEL_DATAが定義されています。"
    },
    {
      "indent": 6,
      "text": "byte SSH_MSG_CHANNEL_DATA uint32 recipient channel string data",
      "ja": "バイトSSH_MSG_CHANNEL_DATA UINT32受信者チャネル列データ"
    },
    {
      "indent": 3,
      "text": "Throughout these documents, when the fields are referenced, they will appear within single quotes. When values to fill those fields are referenced, they will appear within double quotes. Using the above example, possible values for 'data' are \"foo\" and \"bar\".",
      "ja": "フィールドが参照されたとき、これらの文書を通じて、彼らは、単一引用符で囲んで表示されます。これらのフィールドを埋めるために値が参照されているとき、彼らは二重引用符で表示されます。上記の例を使用して、「データ」のための可能な値は、「foo」と「bar」です。"
    },
    {
      "indent": 0,
      "text": "4. Architecture",
      "section_title": true,
      "ja": "4.アーキテクチャ"
    },
    {
      "indent": 0,
      "text": "4.1. Host Keys",
      "section_title": true,
      "ja": "4.1。ホスト鍵"
    },
    {
      "indent": 3,
      "text": "Each server host SHOULD have a host key. Hosts MAY have multiple host keys using multiple different algorithms. Multiple hosts MAY share the same host key. If a host has keys at all, it MUST have at least one key that uses each REQUIRED public key algorithm (DSS [FIPS-186-2]).",
      "ja": "各サーバのホストは、ホストキーを持っているべきです。ホストは、複数の異なるアルゴリズムを使用して複数のホスト鍵を持っているかもしれません。複数のホストが同じホスト鍵を共有することがあります。ホストはですべてのキーを持っている場合は、それが必要な各公開鍵アルゴリズムを使用して少なくとも1つのキーを持っている必要があります（DSS [FIPS-186-2]）。"
    },
    {
      "indent": 3,
      "text": "The server host key is used during key exchange to verify that the client is really talking to the correct server. For this to be possible, the client must have a priori knowledge of the server's public host key.",
      "ja": "サーバーのホスト鍵は、クライアントが本当に正しいサーバと話していることを確認するために、キーの交換の際に使用されます。これを可能にするためには、クライアントは、サーバの公開ホスト鍵の事前知識を持っている必要があります。"
    },
    {
      "indent": 3,
      "text": "Two different trust models can be used:",
      "ja": "二つの異なる信頼モデルを使用することができます。"
    },
    {
      "indent": 3,
      "text": "o The client has a local database that associates each host name (as typed by the user) with the corresponding public host key. This method requires no centrally administered infrastructure, and no third-party coordination. The downside is that the database of name-to-key associations may become burdensome to maintain.",
      "ja": "Oクライアントは、対応する公開ホストキーで（ユーザーが入力した通り）各ホスト名を関連付けるローカルデータベースを持っています。このメソッドは集中管理インフラストラクチャ、および無サードパーティの調整を必要としません。欠点は、名前とキー関連のデータベースを維持するために負担になるかもしれないということです。"
    },
    {
      "indent": 3,
      "text": "o The host name-to-key association is certified by a trusted certification authority (CA). The client only knows the CA root key, and can verify the validity of all host keys certified by accepted CAs.",
      "ja": "Oホスト名からキーへの関連付けは、信頼できる認証局（CA）によって認定されています。クライアントは、CAルート鍵を知って、そして受け入れられたCAによって認定され、すべてのホスト鍵の有効性を確認することができます。"
    },
    {
      "indent": 3,
      "text": "The second alternative eases the maintenance problem, since ideally only a single CA key needs to be securely stored on the client. On the other hand, each host key must be appropriately certified by a central authority before authorization is possible. Also, a lot of trust is placed on the central infrastructure.",
      "ja": "理想的にのみ、単一のCA鍵が安全にクライアントに格納する必要があるため第二の代替は、メンテナンスの問題を容易にします。一方、各ホストキーが適切に認可が可能である前に、中央機関によって認定されなければなりません。また、信頼の多くは、中央インフラ上に置かれています。"
    },
    {
      "indent": 3,
      "text": "The protocol provides the option that the server name - host key association is not checked when connecting to the host for the first time. This allows communication without prior communication of host keys or certification. The connection still provides protection against passive listening; however, it becomes vulnerable to active man-in-the-middle attacks. Implementations SHOULD NOT normally allow such connections by default, as they pose a potential security problem. However, as there is no widely deployed key infrastructure available on the Internet at the time of this writing, this option makes the protocol much more usable during the transition time until such an infrastructure emerges, while still providing a much higher level of security than that offered by older solutions (e.g., telnet [RFC0854] and rlogin [RFC1282]).",
      "ja": "初めてホストに接続するときにチェックされていないキーの関連をホストする - プロトコルは、サーバー名はオプションを提供します。これは、ホスト鍵や証明書の事前の連絡なしに通信することができます。接続がまだパッシブリスニングに対する保護を提供します。しかし、それはアクティブman-in-the-middle攻撃に対して脆弱になります。彼らは潜在的なセキュリティ上の問題を提起として実装は、通常、デフォルトでは、このような接続を許可しません。これを書いている時点で、インターネット上で利用可能な広く展開されている鍵インフラストラクチャがないのでしかし、このオプションは、まだそれよりも高いレベルのセキュリティを提供しながら、このようなインフラが、出てくるまで、プロトコルはるかに使用可能な遷移時間の間になります古い溶液（例えば、telnetの[RFC0854]とrloginの[RFC1282]）によって提供されます。"
    },
    {
      "indent": 3,
      "text": "Implementations SHOULD try to make the best effort to check host keys. An example of a possible strategy is to only accept a host key without checking the first time a host is connected, save the key in a local database, and compare against that key on all future connections to that host.",
      "ja": "実装はホスト鍵を確認する最善の努力をしてみてください。可能な戦略の一例は、ホストが接続された第1の時間をチェックせずにホストキーを受け入れるローカルデータベースにキーを保存し、そのホストへのすべての将来の接続にそのキーと比較することです。"
    },
    {
      "indent": 3,
      "text": "Implementations MAY provide additional methods for verifying the correctness of host keys, e.g., a hexadecimal fingerprint derived from the SHA-1 hash [FIPS-180-2] of the public key. Such fingerprints can easily be verified by using telephone or other external communication channels.",
      "ja": "実装は、例えば、公開鍵のSHA-1ハッシュ[FIPS-180-2]に由来進フィンガープリントをホスト鍵の正当性を検証するためのさらなる方法を提供することができます。そのような指紋が容易電話または他の外部の通信チャネルを使用して検証することができます。"
    },
    {
      "indent": 3,
      "text": "All implementations SHOULD provide an option not to accept host keys that cannot be verified.",
      "ja": "すべての実装が検証できないホスト鍵を受け入れないオプションを提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "The members of this Working Group believe that 'ease of use' is critical to end-user acceptance of security solutions, and no improvement in security is gained if the new solutions are not used. Thus, providing the option not to check the server host key is believed to improve the overall security of the Internet, even though it reduces the security of the protocol in configurations where it is allowed.",
      "ja": "このワーキンググループのメンバーは、「使いやすさ」はセキュリティソリューションのエンドユーザーの受け入れに不可欠であると信じて、そして新しいソリューションが使用されていない場合は、セキュリティには改善が得られません。このように、サーバーのホスト鍵を確認していないオプションを提供することは、それが許可されている構成で、プロトコルのセキュリティが低下していても、インターネット全体のセキュリティを向上させると考えられています。"
    },
    {
      "indent": 0,
      "text": "4.2. Extensibility",
      "section_title": true,
      "ja": "4.2。拡張性"
    },
    {
      "indent": 3,
      "text": "We believe that the protocol will evolve over time, and some organizations will want to use their own encryption, authentication, and/or key exchange methods. Central registration of all extensions is cumbersome, especially for experimental or classified features. On the other hand, having no central registration leads to conflicts in method identifiers, making interoperability difficult.",
      "ja": "私たちは、プロトコルは、時間をかけて進化していくと信じている、といくつかの組織は、独自の暗号化、認証、および/または鍵交換の方法を使用したいと思うでしょう。すべての拡張機能の中央登録は、特に、実験や分類機能のため、面倒です。一方、何の中央登録を有していないことは、相互運用性を困難にする、方法識別子で紛争につながります。"
    },
    {
      "indent": 3,
      "text": "We have chosen to identify algorithms, methods, formats, and extension protocols with textual names that are of a specific format. DNS names are used to create local namespaces where experimental or classified extensions can be defined without fear of conflicts with other implementations.",
      "ja": "私たちは、特定の形式であるテキストの名前とアルゴリズム、方法、フォーマット、拡張プロトコルを識別することを選択しました。 DNS名は、実験や分類の拡張機能は他の実装との衝突の恐れなしで定義することができますローカルの名前空間を作成するために使用されています。"
    },
    {
      "indent": 3,
      "text": "One design goal has been to keep the base protocol as simple as possible, and to require as few algorithms as possible. However, all implementations MUST support a minimal set of algorithms to ensure interoperability (this does not imply that the local policy on all hosts would necessarily allow these algorithms). The mandatory algorithms are specified in the relevant protocol documents.",
      "ja": "一つの設計目標は、できるだけ簡単な基本プロトコルを維持するために、可能な限り少数のアルゴリズムを必要とするようになっています。ただし、すべての実装は、（これはすべてのホスト上のローカルポリシーは、必ずしもこれらのアルゴリズムを可能にすることを意味するものではない）の相互運用性を確保するためのアルゴリズムの最小セットをサポートしなければなりません。必須のアルゴリズムは、関連するプロトコルドキュメントで指定されています。"
    },
    {
      "indent": 3,
      "text": "Additional algorithms, methods, formats, and extension protocols can be defined in separate documents. See Section 6, Algorithm Naming, for more information.",
      "ja": "さらなるアルゴリズム、方法、フォーマット、拡張プロトコルは、別の文書で定義することができます。詳細については、第6章、アルゴリズムの命名を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.3. Policy Issues",
      "section_title": true,
      "ja": "4.3。ポリシーの問題"
    },
    {
      "indent": 3,
      "text": "The protocol allows full negotiation of encryption, integrity, key exchange, compression, and public key algorithms and formats. Encryption, integrity, public key, and compression algorithms can be different for each direction.",
      "ja": "プロトコルは、暗号化、完全性、鍵交換、圧縮、および公開鍵アルゴリズムとフォーマットのフル交渉することができます。暗号化、完全性、公開鍵、および圧縮アルゴリズムは、各方向に異なる可能性があります。"
    },
    {
      "indent": 3,
      "text": "The following policy issues SHOULD be addressed in the configuration mechanisms of each implementation:",
      "ja": "以下の政策課題は、各実装の設定メカニズムで対処する必要があります。"
    },
    {
      "indent": 3,
      "text": "o Encryption, integrity, and compression algorithms, separately for each direction. The policy MUST specify which is the preferred algorithm (e.g., the first algorithm listed in each category).",
      "ja": "個別に各方向にOの暗号化、整合性、および圧縮アルゴリズム、。ポリシーは、好適なアルゴリズム（例えば、各カテゴリにリストされた最初のアルゴリズム）であるかを指定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "o Public key algorithms and key exchange method to be used for host authentication. The existence of trusted host keys for different public key algorithms also affects this choice.",
      "ja": "公開鍵アルゴリズムとホストの認証に使用する鍵交換方法O。異なる公開鍵アルゴリズムのための信頼されたホスト鍵の存在もこの選択に影響を与えます。"
    },
    {
      "indent": 3,
      "text": "o The authentication methods that are to be required by the server for each user. The server's policy MAY require multiple authentication for some or all users. The required algorithms MAY depend on the location from where the user is trying to gain access.",
      "ja": "ユーザ毎にサーバによって必要とされる認証方式O。サーバーの方針は、一部またはすべてのユーザーに対して複数の認証が必要な場合があります。必要なアルゴリズムは、ユーザがアクセス権を取得しようとしている場所から場所に依存してもよいです。"
    },
    {
      "indent": 3,
      "text": "o The operations that the user is allowed to perform using the connection protocol. Some issues are related to security; for example, the policy SHOULD NOT allow the server to start sessions or run commands on the client machine, and MUST NOT allow connections to the authentication agent unless forwarding such connections has been requested. Other issues, such as which TCP/IP ports can be forwarded and by whom, are clearly issues of local policy. Many of these issues may involve traversing or bypassing firewalls, and are interrelated with the local security policy.",
      "ja": "ユーザは、接続プロトコルを使用して実行することが許可されている動作O。いくつかの問題は、セキュリティに関連しています。例えば、ポリシーサーバがセッションを開始するか、クライアントマシン上でコマンドを実行することができません。また、このような接続を転送要求されていない限り、認証エージェントへの接続を許可してはなりません。 TCP / IPポートが転送され、誰によって、はっきりとローカルポリシーの問題であることができるかなどの他の問題、。これらの問題の多くは、ファイアウォールを通過するか、バイパス伴うこと、およびローカルセキュリティポリシーで相互に関連しています。"
    },
    {
      "indent": 0,
      "text": "4.4. Security Properties",
      "section_title": true,
      "ja": "4.4。セキュリティのプロパティ"
    },
    {
      "indent": 3,
      "text": "The primary goal of the SSH protocol is to improve security on the Internet. It attempts to do this in a way that is easy to deploy, even at the cost of absolute security.",
      "ja": "SSHプロトコルの主な目的は、インターネット上のセキュリティを向上させることです。それも、絶対的な安全保障の費用で、導入が容易な方法でこれを実行しようとします。"
    },
    {
      "indent": 3,
      "text": "o All encryption, integrity, and public key algorithms used are well-known, well-established algorithms.",
      "ja": "Oすべての暗号化、整合性、および公開鍵アルゴリズムが使用され、十分に確立されたアルゴリズムはよく知られています。"
    },
    {
      "indent": 3,
      "text": "o All algorithms are used with cryptographically sound key sizes that are believed to provide protection against even the strongest cryptanalytic attacks for decades.",
      "ja": "Oすべてのアルゴリズムは、数十年のためにも、最強の暗号解読攻撃に対する保護を提供すると考えられている、暗号サウンドキーサイズで使用されています。"
    },
    {
      "indent": 3,
      "text": "o All algorithms are negotiated, and in case some algorithm is broken, it is easy to switch to some other algorithm without modifying the base protocol.",
      "ja": "Oすべてのアルゴリズムがネゴシエートされ、そして場合、いくつかのアルゴリズムが破壊され、基本プロトコルを変更することなく、他のいくつかのアルゴリズムに切り替えることが容易です。"
    },
    {
      "indent": 3,
      "text": "Specific concessions were made to make widespread, fast deployment easier. The particular case where this comes up is verifying that the server host key really belongs to the desired host; the protocol allows the verification to be left out, but this is NOT RECOMMENDED. This is believed to significantly improve usability in the short term, until widespread Internet public key infrastructures emerge.",
      "ja": "具体的な譲歩は広範、迅速な導入を容易にするために行われました。これが起動する特定のケースでは、サーバーのホスト鍵が本当に目的のホストに属していることを確認しています。プロトコルは、検証が取り残さすることができますが、これは推奨されません。広範囲のインターネット公開鍵インフラストラクチャが出現するまで、これは、非常に短期的にユーザビリティを改善すると考えられています。"
    },
    {
      "indent": 0,
      "text": "4.5. Localization and Character Set Support",
      "section_title": true,
      "ja": "4.5。ローカライズおよび文字セットのサポート"
    },
    {
      "indent": 3,
      "text": "For the most part, the SSH protocols do not directly pass text that would be displayed to the user. However, there are some places where such data might be passed. When applicable, the character set for the data MUST be explicitly specified. In most places, ISO-10646 UTF-8 encoding is used [RFC3629]. When applicable, a field is also provided for a language tag [RFC3066].",
      "ja": "ほとんどの部分については、SSHプロトコルは、直接ユーザーに表示されるテキストを渡しません。しかし、そのようなデータが渡されるかもしれないいくつかの場所があります。該当する場合、データの文字セットを明示的に指定しなければなりません。ほとんどの場所では、ISO-10646 UTF-8エンコーディングは、[RFC3629]を使用します。適用可能な場合、フィールドは、言語タグ[RFC3066]のために提供されます。"
    },
    {
      "indent": 3,
      "text": "One big issue is the character set of the interactive session. There is no clear solution, as different applications may display data in different formats. Different types of terminal emulation may also be employed in the client, and the character set to be used is effectively determined by the terminal emulation. Thus, no place is provided for directly specifying the character set or encoding for terminal session data. However, the terminal emulation type (e.g., \"vt100\") is transmitted to the remote site, and it implicitly specifies the character set and encoding. Applications typically use the terminal type to determine what character set they use, or the character set is determined using some external means. The terminal emulation may also allow configuring the default character set. In any case, the character set for the terminal session is considered primarily a client local issue.",
      "ja": "一つの大きな問題は、対話型セッションのキャラクタ・セットです。異なるアプリケーションは、異なるフォーマットでデータを表示するように明確な解決策はありません。端末エミュレーションの異なる種類のは、クライアントで使用することができる、および使用する文字セットを効果的に端末エミュレーションによって決定されます。このように、何の場所は、直接ターミナルセッションデータの文字セットやエンコーディングを指定するために提供されていません。しかし、ターミナルエミュレーションタイプ（例えば、「VT100」）は、リモートサイトに送信され、それは暗黙的に文字セットとエンコーディングを指定します。アプリケーションは通常、彼らが使用しているものの文字セットを決定するための端末タイプを使用するか、または文字セットは、いくつかの外部手段を用いて決定されます。端末エミュレーションは、デフォルトの文字セットを設定することが可能になります。いずれの場合も、ターミナルセッションの文字セットは、主にクライアントのローカルな問題と考えられています。"
    },
    {
      "indent": 3,
      "text": "Internal names used to identify algorithms or protocols are normally never displayed to users, and must be in US-ASCII.",
      "ja": "アルゴリズムやプロトコルを識別するために使用される内部名は、通常、ユーザーに表示されることはありません、そしてUS-ASCIIでなければなりません。"
    },
    {
      "indent": 3,
      "text": "The client and server user names are inherently constrained by what the server is prepared to accept. They might, however, occasionally be displayed in logs, reports, etc. They MUST be encoded using ISO 10646 UTF-8, but other encodings may be required in some cases. It is up to the server to decide how to map user names to accepted user names. Straight bit-wise, binary comparison is RECOMMENDED.",
      "ja": "クライアントとサーバーのユーザー名は、本質的に、サーバーが受け入れる準備が何であるかによって制約されています。彼らは、しかし、時折など、ログ、レポートに表示されることがあります彼らは、ISO 10646 UTF-8を使用して符号化されなければならないが、他のエンコーディングが必要になる場合があります。これは、受け付けたユーザ名にユーザ名をマップする方法を決定するためにサーバー次第です。ストレートビット単位、バイナリ比較をお勧めします。"
    },
    {
      "indent": 3,
      "text": "For localization purposes, the protocol attempts to minimize the number of textual messages transmitted. When present, such messages typically relate to errors, debugging information, or some externally configured data. For data that is normally displayed, it SHOULD be possible to fetch a localized message instead of the transmitted message by using a numerical code. The remaining messages SHOULD be configurable.",
      "ja": "ローカリゼーションのために、プロトコルが送信されたテキストメッセージの数を最小限にしようとします。存在する場合、そのようなメッセージは、典型的には、情報、またはいくつかの外部構成データをデバッグ、エラーに関連します。正常に表示されるデータのために、数値コードを使用して代わりに送信されるメッセージのローカライズされたメッセージを取得することが可能であるべきです。残りのメッセージは設定すべきである（SHOULD）。"
    },
    {
      "indent": 0,
      "text": "5. Data Type Representations Used in the SSH Protocols",
      "section_title": true,
      "ja": "SSHプロトコルで使用される5.データタイプ表現"
    },
    {
      "indent": 3,
      "text": "byte",
      "ja": "バイト"
    },
    {
      "indent": 6,
      "text": "A byte represents an arbitrary 8-bit value (octet). Fixed length data is sometimes represented as an array of bytes, written byte[n], where n is the number of bytes in the array.",
      "ja": "バイトは、任意の8ビット値（オクテット）を表します。固定長データは、時々、書かれたバイト[N]を、nはアレイ内のバイトの数であり、バイトの配列として表されます。"
    },
    {
      "indent": 3,
      "text": "boolean",
      "ja": "ブーリアン"
    },
    {
      "indent": 6,
      "text": "A boolean value is stored as a single byte. The value 0 represents FALSE, and the value 1 represents TRUE. All non-zero values MUST be interpreted as TRUE; however, applications MUST NOT store values other than 0 and 1.",
      "ja": "ブール値は、単一バイトとして記憶されます。値0はFALSEを表し、値1がTRUE表します。すべての非ゼロ値は、TRUEとして解釈されなければなりません。ただし、アプリケーションは、0と1以外の値を格納してはなりません。"
    },
    {
      "indent": 3,
      "text": "uint32",
      "ja": "UINT32"
    },
    {
      "indent": 6,
      "text": "Represents a 32-bit unsigned integer. Stored as four bytes in the order of decreasing significance (network byte order). For example: the value 699921578 (0x29b7f4aa) is stored as 29 b7 f4 aa.",
      "ja": "32ビット符号なし整数を表します。有意（ネットワークバイト順）を減少させるために4つのバイトとして記憶されます。たとえば、次の値699921578（0x29b7f4aa）は29のB7 F4のAAとして記憶されます。"
    },
    {
      "indent": 3,
      "text": "uint64",
      "ja": "uintshch"
    },
    {
      "indent": 6,
      "text": "Represents a 64-bit unsigned integer. Stored as eight bytes in the order of decreasing significance (network byte order).",
      "ja": "64ビット符号なし整数を表します。有意（ネットワークバイト順）を減少させるために8つのバイトとして記憶されます。"
    },
    {
      "indent": 3,
      "text": "string",
      "ja": "弦"
    },
    {
      "indent": 6,
      "text": "Arbitrary length binary string. Strings are allowed to contain arbitrary binary data, including null characters and 8-bit characters. They are stored as a uint32 containing its length (number of bytes that follow) and zero (= empty string) or more bytes that are the value of the string. Terminating null characters are not used.",
      "ja": "任意の長さのバイナリ文字列。文字列はヌル文字と8ビット文字を含む任意のバイナリデータを含むことが許されます。彼らは、その長さ（追従バイトの数）とゼロを含むUINT32（=空の文字列）または文字列の値である複数のバイトとして格納されています。終端のnull文字は使用されません。"
    },
    {
      "indent": 6,
      "text": "Strings are also used to store text. In that case, US-ASCII is used for internal names, and ISO-10646 UTF-8 for text that might be displayed to the user. The terminating null character SHOULD NOT normally be stored in the string. For example: the US-ASCII string \"testing\" is represented as 00 00 00 07 t e s t i n g. The UTF-8 mapping does not alter the encoding of US-ASCII characters.",
      "ja": "文字列は、テキストを格納するために使用されています。その場合には、US-ASCIIは内部名、およびISO-10646 UTF-8のテキストのためにユーザに表示される場合がありますのために使用されています。ヌル文字は通常の文字列に保存しないでください。例えば：US-ASCII文字列は、 \"テスト\" が00 00 00 07トンのE S T I N Gとして表されます。 UTF-8マッピングは、US-ASCII文字のエンコーディングを変更しません。"
    },
    {
      "indent": 3,
      "text": "mpint",
      "ja": "mpint"
    },
    {
      "indent": 6,
      "text": "Represents multiple precision integers in two's complement format, stored as a string, 8 bits per byte, MSB first. Negative numbers have the value 1 as the most significant bit of the first byte of the data partition. If the most significant bit would be set for a positive number, the number MUST be preceded by a zero byte. Unnecessary leading bytes with the value 0 or 255 MUST NOT be included. The value zero MUST be stored as a string with zero bytes of data.",
      "ja": "複数精度文字列として格納された2の補数形式の整数、バイト当たり8ビット、MSBファーストを表します。負の数は、データ・パーティションの最初のバイトの最上位ビットとして値1を持っています。最上位ビットが正の数に設定するならば、数はゼロバイトが先行しなければなりません。値が0または255との不要なリードバイトを含んではいけません。値ゼロは、データのゼロバイトの文字列として格納されなければなりません。"
    },
    {
      "indent": 6,
      "text": "By convention, a number that is used in modular computations in Z_n SHOULD be represented in the range 0 <= x < n.",
      "ja": "慣例により、Z_Nにモジュラ計算に使用される数は、範囲0 <= xの<Nで表現されるべきです。"
    },
    {
      "indent": 9,
      "text": "Examples:",
      "ja": "例："
    },
    {
      "indent": 9,
      "text": "value (hex)        representation (hex)\n-----------        --------------------\n0                  00 00 00 00\n9a378f9b2e332a7    00 00 00 08 09 a3 78 f9 b2 e3 32 a7\n80                 00 00 00 02 00 80\n-1234              00 00 00 02 ed cc\n-deadbeef          00 00 00 05 ff 21 52 41 11",
      "raw": true
    },
    {
      "indent": 3,
      "text": "name-list",
      "ja": "名前リスト"
    },
    {
      "indent": 6,
      "text": "A string containing a comma-separated list of names. A name-list is represented as a uint32 containing its length (number of bytes that follow) followed by a comma-separated list of zero or more names. A name MUST have a non-zero length, and it MUST NOT contain a comma (\",\"). As this is a list of names, all of the elements contained are names and MUST be in US-ASCII. Context may impose additional restrictions on the names. For example, the names in a name-list may have to be a list of valid algorithm identifiers (see Section 6 below), or a list of [RFC3066] language tags. The order of the names in a name-list may or may not be significant. Again, this depends on the context in which the list is used. Terminating null characters MUST NOT be used, neither for the individual names, nor for the list as a whole.",
      "ja": "名のカンマ区切りリストを含む文字列。名前リストはゼロまたは複数名のカンマ区切りリスト、続いて、その長さ（追従バイトの数）を含むUINT32として表されます。 （「」）の名前は、非ゼロの長さを持たなければならない、そしてそれはカンマを含めることはできません。これは名前のリストであるため、含まれるすべての要素は名前であり、US-ASCIIでなければなりません。コンテキスト名の追加の制限を課すことができます。例えば、名前、リスト内の名前は、有効なアルゴリズム識別子（以下のセクション6を参照）、または[RFC3066]言語タグのリストのリストでなければならないことがあります。名前リストの名前の順序が重要か、あってもなくてもよいです。繰り返しますが、これはリストが使用される文脈に依存します。終端のnull文字は、個々の名前のために、また全体としてリストについては、どちらも、使用してはいけません。"
    },
    {
      "indent": 7,
      "text": "Examples:",
      "ja": "例："
    },
    {
      "indent": 7,
      "text": "value                      representation (hex)\n-----                      --------------------\n(), the empty name-list    00 00 00 00\n(\"zlib\")                   00 00 00 04 7a 6c 69 62\n(\"zlib,none\")              00 00 00 09 7a 6c 69 62 2c 6e 6f 6e 65",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6. Algorithm and Method Naming",
      "section_title": true,
      "ja": "前記アルゴリズムおよび方法ネーミング"
    },
    {
      "indent": 3,
      "text": "The SSH protocols refer to particular hash, encryption, integrity, compression, and key exchange algorithms or methods by name. There are some standard algorithms and methods that all implementations MUST support. There are also algorithms and methods that are defined in the protocol specification, but are OPTIONAL. Furthermore, it is expected that some organizations will want to use their own algorithms or methods.",
      "ja": "SSHプロトコルは名前で特定のハッシュ、暗号化、整合性、圧縮、および鍵交換アルゴリズムまたは方法を参照してください。すべての実装がサポートしなければならないいくつかの標準的なアルゴリズムや方法があります。そこプロトコル仕様で定義されているアルゴリズムおよび方法もあるが、任意です。さらに、いくつかの組織が独自のアルゴリズムやメソッドを使用することが期待されます。"
    },
    {
      "indent": 3,
      "text": "In this protocol, all algorithm and method identifiers MUST be printable US-ASCII, non-empty strings no longer than 64 characters. Names MUST be case-sensitive.",
      "ja": "このプロトコルでは、すべてのアルゴリズムおよび方法識別子は、もはや64文字を超える印刷可能なUS-ASCII、非空の文字列である必要があります。名前は大文字と小文字を区別しなければなりません。"
    },
    {
      "indent": 3,
      "text": "There are two formats for algorithm and method names:",
      "ja": "アルゴリズムとメソッド名の2つの形式があります。"
    },
    {
      "indent": 3,
      "text": "o Names that do not contain an at-sign (\"@\") are reserved to be assigned by IETF CONSENSUS. Examples include \"3des-cbc\", \"sha-1\", \"hmac-sha1\", and \"zlib\" (the doublequotes are not part of the name). Names of this format are only valid if they are first registered with the IANA. Registered names MUST NOT contain an at-sign (\"@\"), comma (\",\"), whitespace, control characters (ASCII codes 32 or less), or the ASCII code 127 (DEL). Names are case-sensitive, and MUST NOT be longer than 64 characters.",
      "ja": "Oアットマーク（「@」）が含まれていない名前はIETFコンセンサスによって割り当てられるように予約されています。例としては、 \"3DES-CBC\"、 \"SHA1\"、 \"HMAC-SHA1\"、および \"ZLIBを\"（ダブルクォートは、名前の一部ではない）が挙げられます。この形式の名前は、彼らが最初にIANAに登録されている場合にのみ有効です。登録された名前は、カンマ（ \"\"）、空白、制御文字（ASCIIコード32以下）、またはASCIIコード127（DEL）をアットマーク（ \"@\"）を含んではいけません。名前は大文字と小文字が区別され、64文字以上にすることはできません。"
    },
    {
      "indent": 3,
      "text": "o Anyone can define additional algorithms or methods by using names in the format name@domainname, e.g., \"ourcipher-cbc@example.com\". The format of the part preceding the at-sign is not specified; however, these names MUST be printable US-ASCII strings, and MUST NOT contain the comma character (\",\"), whitespace, control characters (ASCII codes 32 or less), or the ASCII code 127 (DEL). They MUST have only a single at-sign in them. The part following the at-sign MUST be a valid, fully qualified domain name [RFC1034] controlled by the person or organization defining the name. Names are case-sensitive, and MUST NOT be longer than 64 characters. It is up to each domain how it manages its local namespace. It should be noted that these names resemble STD 11 [RFC0822] email addresses. This is purely coincidental and has nothing to do with STD 11 [RFC0822].",
      "ja": "O誰もが、例えば、「ourcipher-cbc@example.com」、形式名@ドメイン内の名前を使用して、追加のアルゴリズムやメソッドを定義することができます。アットマークの前部分のフォーマットが指定されていません。しかし、これらの名前は、印刷可能なUS-ASCII文字列でなければならない、とコンマ文字（「」）、空白、制御文字（ASCIIコード32以下）、またはASCIIコード127（DEL）を含めることはできません。彼らは、アットマーク彼らの唯一のシングルを持たなければなりません。アットマーク以下の部分は、名前を定義する個人または組織によって制御される有効な、完全修飾ドメイン名[RFC1034]でなければなりません。名前は大文字と小文字が区別され、64文字以上にすることはできません。それはそのローカル名前空間をどのように管理するか、各ドメインに任されています。これらの名前は、STD 11 [RFC0822]のメールアドレスに似ていることに留意すべきです。これは純粋な偶然で、STD 11 [RFC0822]とは何の関係もありません。"
    },
    {
      "indent": 0,
      "text": "7. Message Numbers",
      "section_title": true,
      "ja": "7.メッセージ番号"
    },
    {
      "indent": 3,
      "text": "SSH packets have message numbers in the range 1 to 255. These numbers have been allocated as follows:",
      "ja": "SSHパケットは次のように1〜255これらの番号が割り当てられた範囲内のメッセージ番号を持っています。"
    },
    {
      "indent": 3,
      "text": "Transport layer protocol:",
      "ja": "トランスポート層プロトコル："
    },
    {
      "indent": 6,
      "text": "1 to 19 Transport layer generic (e.g., disconnect, ignore, debug, etc.) 20 to 29 Algorithm negotiation 30 to 49 Key exchange method specific (numbers can be reused for different authentication methods)",
      "ja": "（等例えば、切断、無視し、デバッグ、）一般的な1〜19トランスポート層20〜29のアルゴリズムネゴシエーション30 49の鍵交換方法の特定の（数字は異なる認証方法のために再利用することができます）"
    },
    {
      "indent": 3,
      "text": "User authentication protocol:",
      "ja": "ユーザー認証プロトコル："
    },
    {
      "indent": 6,
      "text": "50 to 59 User authentication generic 60 to 79 User authentication method specific (numbers can be reused for different authentication methods)",
      "ja": "50〜59ユーザ認証ジェネリック60 79へのユーザ認証方式固有の（数字は異なる認証方法のために再利用することができます）"
    },
    {
      "indent": 3,
      "text": "Connection protocol:",
      "ja": "接続プロトコル："
    },
    {
      "indent": 6,
      "text": "80 to 89 Connection protocol generic 90 to 127 Channel related messages",
      "ja": "80から89の接続プロトコルの一般的な90から127件のチャンネルに関連するメッセージ"
    },
    {
      "indent": 3,
      "text": "Reserved for client protocols:",
      "ja": "クライアントプロトコルのために予約。"
    },
    {
      "indent": 6,
      "text": "128 to 191 Reserved",
      "ja": "予約191から128"
    },
    {
      "indent": 3,
      "text": "Local extensions:",
      "ja": "ローカルの拡張子："
    },
    {
      "indent": 6,
      "text": "192 to 255 Local extensions",
      "ja": "192から255のローカルの拡張機能"
    },
    {
      "indent": 0,
      "text": "8. IANA Considerations",
      "section_title": true,
      "ja": "8. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document is part of a set. The instructions for the IANA for the SSH protocol, as defined in this document, [SSH-USERAUTH], [SSH-TRANS], and [SSH-CONNECT], are detailed in [SSH-NUMBERS]. The following is a brief summary for convenience, but note well that [SSH-NUMBERS] contains the actual instructions to the IANA, which may be superseded in the future.",
      "ja": "この文書では、セットの一部です。 SSHプロトコルのIANAのための命令は、本文書で定義されるように、[SSH-USERAUTH]、[SSH-TRANS]、および[SSH-CONNECT]は、[SSH-NUMBERS]に詳述されています。以下では便宜上簡単な要約ですが、[SSH-NUMBERS]ことにも注意して、将来的に無効とされることがありIANAに実際の命令が含まれています。"
    },
    {
      "indent": 3,
      "text": "Allocation of the following types of names in the SSH protocols is assigned by IETF consensus:",
      "ja": "SSHプロトコルの名前の次の種類の配分は、IETFの合意によって割り当てられます。"
    },
    {
      "indent": 3,
      "text": "o Service Names * Authentication Methods * Connection Protocol Channel Names * Connection Protocol Global Request Names * Connection Protocol Channel Request Names",
      "ja": "O・サービス名*認証方法*接続プロトコルチャネル名*接続プロトコルグローバル要求名*接続プロトコルチャネル要求名"
    },
    {
      "indent": 3,
      "text": "o Key Exchange Method Names",
      "ja": "O鍵交換メソッド名"
    },
    {
      "indent": 3,
      "text": "o Assigned Algorithm Names * Encryption Algorithm Names * MAC Algorithm Names * Public Key Algorithm Names * Compression Algorithm Names",
      "ja": "Oアルゴリズム名*暗号化アルゴリズム名* MACアルゴリズム割り当てられた名前*公開鍵アルゴリズムの名前*圧縮アルゴリズムの名前"
    },
    {
      "indent": 3,
      "text": "These names MUST be printable US-ASCII strings, and MUST NOT contain the characters at-sign (\"@\"), comma (\",\"), whitespace, control characters (ASCII codes 32 or less), or the ASCII code 127 (DEL). Names are case-sensitive, and MUST NOT be longer than 64 characters.",
      "ja": "これらの名前は、（印刷可能なUS-ASCII文字列でなければならない、とアットマーク（「@」）文字を含めることはできません、カンマ（「」）、空白、制御文字（ASCIIコード32以下）、またはASCIIコード127 DEL）。名前は大文字と小文字が区別され、64文字以上にすることはできません。"
    },
    {
      "indent": 3,
      "text": "Names with the at-sign (\"@\") are locally defined extensions and are not controlled by the IANA.",
      "ja": "アットマーク（「@」）との名前は、ローカルに定義された拡張され、IANAによって制御されていません。"
    },
    {
      "indent": 3,
      "text": "Each category of names listed above has a separate namespace. However, using the same name in multiple categories SHOULD be avoided to minimize confusion.",
      "ja": "上記の名前の各カテゴリには別の名前空間を持っています。しかし、複数のカテゴリに同じ名前を使用して混乱を最小限に抑えるために避けるべきです。"
    },
    {
      "indent": 3,
      "text": "Message numbers (see Section 7) in the range of 0 to 191 are allocated via IETF CONSENSUS, as described in [RFC2434]. Message numbers in the 192 to 255 range (local extensions) are reserved for PRIVATE USE, also as described in [RFC2434].",
      "ja": "[RFC2434]に記載されているように0〜191の範囲内のメッセージ番号は、（セクション7参照）、IETF CONSENSUSを介して割り当てられています。 [RFC2434]に記載されているように192〜255の範囲（ローカル拡張）内のメッセージ番号はまた、私的使用のために予約されています。"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "In order to make the entire body of Security Considerations more accessible, Security Considerations for the transport, authentication, and connection documents have been gathered here.",
      "ja": "セキュリティの考慮事項の体全体にアクセスしやすくするためには、交通機関、認証、および接続文書のセキュリティに関する注意点はここに集まってきました。"
    },
    {
      "indent": 3,
      "text": "The transport protocol [SSH-TRANS] provides a confidential channel over an insecure network. It performs server host authentication, key exchange, encryption, and integrity protection. It also derives a unique session id that may be used by higher-level protocols.",
      "ja": "トランスポートプロトコル[SSH-TRANS]はセキュアでないネットワーク上で機密チャネルを提供します。これは、サーバーのホスト認証、鍵交換、暗号化、および整合性保護を行います。それはまた、より高いレベルのプロトコルによって使用することができる一意のセッションIDを導出します。"
    },
    {
      "indent": 3,
      "text": "The authentication protocol [SSH-USERAUTH] provides a suite of mechanisms that can be used to authenticate the client user to the server. Individual mechanisms specified in the authentication protocol use the session id provided by the transport protocol and/or depend on the security and integrity guarantees of the transport protocol.",
      "ja": "認証プロトコル[SSH-USERAUTH]サーバーにクライアントのユーザを認証するために使用することができる機構のスイートを提供します。認証プロトコルで指定された個々のメカニズムは、トランスポート・プロトコルによって提供されるセッションIDを使用し、および/またはトランスポートプロトコルのセキュリティと完全性保証に依存します。"
    },
    {
      "indent": 3,
      "text": "The connection protocol [SSH-CONNECT] specifies a mechanism to multiplex multiple streams (channels) of data over the confidential and authenticated transport. It also specifies channels for accessing an interactive shell, for proxy-forwarding various external protocols over the secure transport (including arbitrary TCP/IP protocols), and for accessing secure subsystems on the server host.",
      "ja": "接続プロトコル[SSH-CONNECT]は機密上のデータの複数のストリーム（チャネル）を多重化およびトランスポートを認証するためのメカニズムを指定します。また、（任意のTCP / IPプロトコルを含む）セキュアなトランスポート上のプロキシ転送する様々な外部のプロトコルのために、対話型シェルにアクセスするため、サーバーのホスト上でセキュアなサブシステムにアクセスするためのチャネルを指定します。"
    },
    {
      "indent": 0,
      "text": "9.1. Pseudo-Random Number Generation",
      "section_title": true,
      "ja": "9.1。疑似乱数の生成"
    },
    {
      "indent": 3,
      "text": "This protocol binds each session key to the session by including random, session specific data in the hash used to produce session keys. Special care should be taken to ensure that all of the random numbers are of good quality. If the random data here (e.g., Diffie-Hellman (DH) parameters) are pseudo-random, then the pseudo-random number generator should be cryptographically secure (i.e., its next output not easily guessed even when knowing all previous outputs) and, furthermore, proper entropy needs to be added to the pseudo-random number generator. [RFC4086] offers suggestions for sources of random numbers and entropy. Implementers should note the importance of entropy and the well-meant, anecdotal warning about the difficulty in properly implementing pseudo-random number generating functions.",
      "ja": "このプロトコルは、セッション鍵を生成するために使用されるハッシュにランダム、セッション固有のデータを含むことにより、セッションへの各セッション鍵を結合します。特別なケアは、ランダムな数字のすべてが良い品質であることを保証するために取られるべきです。ここでは、ランダムなデータ（例えば、ディフィー・ヘルマン（DH）パラメータ）が擬似ランダムである場合には、擬似乱数生成器は、暗号的に安全である（以前のすべての出力を知っている場合でも、すなわち、その次の出力が容易に推測ではない）とすべきですさらに、適切なエントロピーは、擬似乱数発生器に追加する必要があります。 [RFC4086]は、ランダムな数字とエントロピーの源のための提案を提供しています。実装者は、エントロピーの重要性と適切擬似乱数生成機能を実現することの困難について、よく意味、逸話的な警告に注意してください。"
    },
    {
      "indent": 3,
      "text": "The amount of entropy available to a given client or server may sometimes be less than what is required. In this case, one must either resort to pseudo-random number generation regardless of insufficient entropy or refuse to run the protocol. The latter is preferable.",
      "ja": "特定のクライアントまたはサーバで使用可能なエントロピーの量は時々必要とされるものよりも小さくすることができます。この場合、一つは関係なく、不十分エントロピーの擬似乱数生成に頼るまたはプロトコルを実行することを拒否しなければならないのいずれか。後者が好ましいです。"
    },
    {
      "indent": 0,
      "text": "9.2. Control Character Filtering",
      "section_title": true,
      "ja": "9.2。制御文字のフィルタリング"
    },
    {
      "indent": 3,
      "text": "When displaying text to a user, such as error or debug messages, the client software SHOULD replace any control characters (except tab, carriage return, and newline) with safe sequences to avoid attacks by sending terminal control characters.",
      "ja": "このようなエラーやデバッグメッセージとしてユーザにテキストを表示する場合、クライアントソフトウェアは、端末制御文字を送信することによって、攻撃を避けるために、安全な配列を持つ（タブ、改行、改行を除く）任意の制御文字を置き換える必要があります。"
    },
    {
      "indent": 0,
      "text": "9.3. Transport",
      "section_title": true,
      "ja": "9.3。輸送"
    },
    {
      "indent": 0,
      "text": "9.3.1. Confidentiality",
      "section_title": true,
      "ja": "9.3.1。機密性"
    },
    {
      "indent": 3,
      "text": "It is beyond the scope of this document and the Secure Shell Working Group to analyze or recommend specific ciphers other than the ones that have been established and accepted within the industry. At the time of this writing, commonly used ciphers include 3DES, ARCFOUR, twofish, serpent, and blowfish. AES has been published by The US Federal Information Processing Standards as [FIPS-197], and the cryptographic community has accepted AES as well. As always, implementers and users should check current literature to ensure that no recent vulnerabilities have been found in ciphers used within products. Implementers should also check to see which ciphers are considered to be relatively stronger than others and should recommend their use to users over relatively weaker ciphers. It would be considered good form for an implementation to politely and unobtrusively notify a user that a stronger cipher is available and should be used when a weaker one is actively chosen.",
      "ja": "これは、分析したり確立し、業界内で受け入れられているもの以外の特定の暗号をお勧めするには、この文書とセキュアシェルワーキンググループの範囲を超えています。この記事の執筆時点では、一般的に使用される暗号は3DES、ARCFOUR、twofishです、蛇、およびフグが含まれます。 AESは、[FIPS-197]として、米国連邦情報処理規格によって公開されている、暗号コミュニティは、同様にAESを受け入れました。いつものように、実装者とユーザーには、最近の脆弱性が製品内で使用される暗号に見出されていないことを確認するために、現在の文献を確認してください。実装者はまた、他の人よりも相対的に強いことが考えられていると、比較的弱い暗号を介してユーザーにその使用を推奨すべき暗号を確認しなければなりません。それは丁寧と控えめ強い暗号が使用可能であり、より弱いものが積極的に選択されたときに使用されるべきであることをユーザに通知するために実装するための良い形であると考えられます。"
    },
    {
      "indent": 3,
      "text": "The \"none\" cipher is provided for debugging and SHOULD NOT be used except for that purpose. Its cryptographic properties are sufficiently described in [RFC2410], which will show that its use does not meet the intent of this protocol.",
      "ja": "「なし」の暗号は、デバッグのために提供されており、その目的以外に使用されるべきではありません。その暗号化特性が十分にその使用がこのプロトコルの目的を満たしていないことを示します[RFC2410]に記載されています。"
    },
    {
      "indent": 3,
      "text": "The relative merits of these and other ciphers may also be found in current literature. Two references that may provide information on the subject are [SCHNEIER] and [KAUFMAN]. Both of these describe the CBC mode of operation of certain ciphers and the weakness of this scheme. Essentially, this mode is theoretically vulnerable to chosen cipher-text attacks because of the high predictability of the start of packet sequence. However, this attack is deemed difficult and not considered fully practicable, especially if relatively long block sizes are used.",
      "ja": "これらおよび他の暗号の優劣は、現在の文献に見出すことができます。主題についての情報を提供することができる2つの参照は[シュナイアー]であり、[KAUFMAN]。これらの両方は、特定の暗号の操作のCBCモードとこの方式の弱点を記述する。基本的に、このモードがあるため、パケットシーケンスの開始の高い予測の選択暗号文攻撃に対して理論的に脆弱です。しかし、この攻撃は、比較的長いブロックサイズが使用されている場合は特に、困難と認められるものと完全には実用的とはみなされません。"
    },
    {
      "indent": 3,
      "text": "Additionally, another CBC mode attack may be mitigated through the insertion of packets containing SSH_MSG_IGNORE. Without this technique, a specific attack may be successful. For this attack (commonly known as the Rogaway attack [ROGAWAY], [DAI], [BELLARE]) to work, the attacker would need to know the Initialization Vector (IV) of the next block that is going to be encrypted. In CBC mode that is the output of the encryption of the previous block. If the attacker does not have any way to see the packet yet (i.e., it is in the internal buffers of the SSH implementation or even in the kernel), then this attack will not work. If the last packet has been sent out to the network (i.e., the attacker has access to it), then he can use the attack.",
      "ja": "また、別のCBCモード攻撃はSSH_MSG_IGNOREを含むパケットの挿入によって緩和することができます。この技術がなければ、特定の攻撃が成功することがあります。この攻撃（一般Rogaway攻撃として知られている[ROGAWAY]、[DAI]、[ベラー]）機能するためには、攻撃者が暗号化されようとしている次のブロックの初期化ベクトル（IV）を知っている必要があります。前のブロックの暗号化の出力であるCBCモードで。攻撃者は（すなわち、それはSSHの実装の内部バッファに、あるいはカーネルにある）まだパケットを参照するにはどのような方法を持っていない場合、この攻撃は動作しません。最後のパケットがネットワークに送出された場合は、その後、彼は攻撃を使用することができます（つまり、攻撃者はそれへのアクセスを持っています）。"
    },
    {
      "indent": 3,
      "text": "In the optimal case, an implementer would need to add an extra packet only if the packet has been sent out onto the network and there are no other packets waiting for transmission. Implementers may wish to check if there are any unsent packets awaiting transmission; unfortunately, it is not normally easy to obtain this information from the kernel or buffers. If there are no unsent packets, then a packet containing SSH_MSG_IGNORE SHOULD be sent. If a new packet is added to the stream every time the attacker knows the IV that is supposed to be used for the next packet, then the attacker will not be able to guess the correct IV, thus the attack will never be successful.",
      "ja": "最適な場合には、実装者は、パケットがネットワーク上に送り出されており、送信するために待っている他のパケットが存在しない場合にのみ、余分なパケットを追加する必要があります。実装者は、送信を待っている未送信パケットがあるかどうかを確認することを望むかもしれません。残念ながら、カーネルやバッファからこの情報を取得するために、通常は容易ではありません。未送信パケットが存在しない場合は、SSH_MSG_IGNOREを含むパケットを送ってください。新しいパケットがストリームに、攻撃者が次のパケットのために使用されることを想定しているIVを知っているたびに追加された場合、攻撃者は、このような攻撃が成功することはありません、正しいIVを推測することはできません。"
    },
    {
      "indent": 3,
      "text": "As an example, consider the following case:",
      "ja": "例として、以下のケースを考えてみます。"
    },
    {
      "indent": 6,
      "text": "Client                                                  Server\n------                                                  ------\nTCP(seq=x, len=500)             ---->\n contains Record 1",
      "raw": true
    },
    {
      "indent": 26,
      "text": "[500 ms passes, no ACK]",
      "ja": "[500ミリ秒が経過し、無ACK]"
    },
    {
      "indent": 6,
      "text": "TCP(seq=x, len=1000)            ---->\n contains Records 1,2",
      "raw": true
    },
    {
      "indent": 64,
      "text": "ACK",
      "ja": "ACK"
    },
    {
      "indent": 3,
      "text": "1. The Nagle algorithm + TCP retransmits mean that the two records get coalesced into a single TCP segment.",
      "ja": "1. Nagleアルゴリズム+ TCPは2つのレコードが単一のTCPセグメントに合体得ることを意味し再送信します。"
    },
    {
      "indent": 3,
      "text": "2. Record 2 is not at the beginning of the TCP segment and never will be because it gets ACKed.",
      "ja": "2.レコード2は、TCPセグメントの先頭にない、決してそれがACKされますので、となります。"
    },
    {
      "indent": 3,
      "text": "3. Yet, the attack is possible because Record 1 has already been seen.",
      "ja": "レコード1は、すでに見てきたので3.しかし、攻撃が可能です。"
    },
    {
      "indent": 3,
      "text": "As this example indicates, it is unsafe to use the existence of unflushed data in the TCP buffers proper as a guide to whether an empty packet is needed, since when the second write() is performed the buffers will contain the un-ACKed Record 1.",
      "ja": "この例が示すように、第2の書き込み（）が実行されたときので、バッファが含まれています空のパケットが必要であるかどうかのガイドとして適切なTCPバッファにunflushedデータの存在を使用する非ACKさレコード1安全でありません。"
    },
    {
      "indent": 3,
      "text": "On the other hand, it is perfectly safe to have the following situation:",
      "ja": "一方、次のような状況を持っていることは完全に安全です。"
    },
    {
      "indent": 6,
      "text": "Client                                                  Server\n------                                                  ------\nTCP(seq=x, len=500)             ---->\n   contains SSH_MSG_IGNORE",
      "raw": true
    },
    {
      "indent": 6,
      "text": "TCP(seq=y, len=500)             ---->\n   contains Data",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Provided that the IV for the second SSH Record is fixed after the data for the Data packet is determined, then the following should be performed:",
      "ja": "第SSHレコードのIVは、データパケットのデータが決定された後、次が実行されるべき固定されていることを条件とします。"
    },
    {
      "indent": 9,
      "text": "read from user encrypt null packet encrypt data packet",
      "ja": "ユーザーの暗号化、ヌルパケットを暗号化データパケットから読み取ります"
    },
    {
      "indent": 0,
      "text": "9.3.2. Data Integrity",
      "section_title": true,
      "ja": "9.3.2。データの整合性"
    },
    {
      "indent": 3,
      "text": "This protocol does allow the Data Integrity mechanism to be disabled. Implementers SHOULD be wary of exposing this feature for any purpose other than debugging. Users and administrators SHOULD be explicitly warned anytime the \"none\" MAC is enabled.",
      "ja": "このプロトコルは、データ整合性のメカニズムを無効にすることができません。実装者は、デバッグ以外の目的のために、この機能をさらすのを警戒するべきです。ユーザーおよび管理者が明示的に「なし」MACが有効になっているいつでも警告されるべきです。"
    },
    {
      "indent": 3,
      "text": "So long as the \"none\" MAC is not used, this protocol provides data integrity.",
      "ja": "だから、長い「なし」MACが使用されていないとして、このプロトコルは、データの整合性を提供します。"
    },
    {
      "indent": 3,
      "text": "Because MACs use a 32-bit sequence number, they might start to leak information after 2**32 packets have been sent. However, following the rekeying recommendations should prevent this attack. The transport protocol [SSH-TRANS] recommends rekeying after one gigabyte of data, and the smallest possible packet is 16 bytes. Therefore, rekeying SHOULD happen after 2**28 packets at the very most.",
      "ja": "MACが32ビットのシーケンス番号を使用しているため、彼らは2つの** 32パケットが送信された後に情報をリークし始めるかもしれません。しかし、鍵の変更の推奨事項に従うことは、この攻撃を防ぐ必要があります。トランスポートプロトコル[SSH-TRANS]はデータの1ギガバイトの後にキー更新を推奨し、そして可能な最小パケットが16バイトです。そのため、鍵の再生成は、非常に多くても2つの** 28パケットの後に起こるべき。"
    },
    {
      "indent": 0,
      "text": "9.3.3. Replay",
      "section_title": true,
      "ja": "9.3.3。リプレイ"
    },
    {
      "indent": 3,
      "text": "The use of a MAC other than \"none\" provides integrity and authentication. In addition, the transport protocol provides a unique session identifier (bound in part to pseudo-random data that is part of the algorithm and key exchange process) that can be used by higher level protocols to bind data to a given session and prevent replay of data from prior sessions. For example, the authentication protocol ([SSH-USERAUTH]) uses this to prevent replay of signatures from previous sessions. Because public key authentication exchanges are cryptographically bound to the session (i.e., to the initial key exchange), they cannot be successfully replayed in other sessions. Note that the session id can be made public without harming the security of the protocol.",
      "ja": "「なし」以外のMACの使用は、整合性と認証を提供します。また、トランスポート・プロトコルは、所定のセッションにデータを結合しての再生を防止するために、より高いレベルのプロトコルによって使用することができる（アルゴリズムと鍵交換プロセスの一部である擬似ランダムデータに部分的に結合した）一意のセッション識別子を提供します前のセッションからのデータ。例えば、認証プロトコル（[SSH-USERAUTH]）は、前のセッションからの署名のリプレイを防ぐためにこれを使用します。公開鍵認証交換は、暗号（すなわち、最初の鍵交換に）セッションにバインドされているので、彼らは成功し、他のセッションで再生することはできません。セッションIDは、プロトコルのセキュリティを損なうことなく公表されることに注意してください。"
    },
    {
      "indent": 3,
      "text": "If two sessions have the same session id (hash of key exchanges), then packets from one can be replayed against the other. It must be stressed that the chances of such an occurrence are, needless to say, minimal when using modern cryptographic methods. This is all the more true when specifying larger hash function outputs and DH parameters.",
      "ja": "2つのセッションが同じセッションID（鍵交換のハッシュ）を有する場合、一方からのパケットは、他に対して再生することができます。現代の暗号方式を使用している場合には、最小限、言うまでもなく、このような事態が生じる可能性があることを強調しなければなりません。より大きなハッシュ関数の出力とDHパラメータを指定するとき、これは、すべてのより多くの真実です。"
    },
    {
      "indent": 3,
      "text": "Replay detection using monotonically increasing sequence numbers as input to the MAC, or HMAC in some cases, is described in [RFC2085], [RFC2246], [RFC2743], [RFC1964], [RFC2025], and [RFC4120]. The underlying construct is discussed in [RFC2104]. Essentially, a different sequence number in each packet ensures that at least this one input to the MAC function will be unique and will provide a nonrecurring MAC output that is not predictable to an attacker. If the session stays active long enough, however, this sequence number will wrap. This event may provide an attacker an opportunity to replay a previously recorded packet with an identical sequence number but only if the peers have not rekeyed since the transmission of the first packet with that sequence number. If the peers have rekeyed, then the replay will be detected since the MAC check will fail. For this reason, it must be emphasized that peers MUST rekey before a wrap of the sequence numbers. Naturally, if an attacker does attempt to replay a captured packet before the peers have rekeyed, then the receiver of the duplicate packet will not be able to validate the MAC and it will be discarded. The reason that the MAC will fail is because the receiver will formulate a MAC based upon the packet contents, the shared secret, and the expected sequence number. Since the replayed packet will not be using that expected sequence number (the sequence number of the replayed packet will have already been passed by the receiver), the calculated MAC will not match the MAC received with the packet.",
      "ja": "いくつかの場合にはMACまたはHMACへの入力として単調に増加するシーケンス番号を使用して、リプレイ検出は、[RFC2085]、[RFC2246]、[RFC2743]、[RFC1964]、[RFC2025]及び[RFC4120]に記載されています。基礎となる構築物は、[RFC2104]に記載されています。本質的に、各パケット内の異なるシーケンス番号はMAC機能に、少なくともこの一方の入力が一意になり、攻撃者に予測できない臨時MAC出力を提供することを保証します。セッションが十分に有効長期滞在する場合は、しかし、このシーケンス番号がラップします。このイベントは、攻撃者が、ピアがそのシーケンス番号の最初のパケットの送信からリキーされていない場合にのみ、同一のシーケンス番号と、以前に記録されたパケットを再生するための機会を提供することができます。ピアがリキーしている場合はMACチェックが失敗することから、その後、リプレイが検出されます。このため、ピアは、シーケンス番号のラップの前にキー更新しなければならないことを強調しなければなりません。攻撃者はピアがリキーする前にキャプチャしたパケットを再生しようとしないならば当然、重複したパケットの受信機は、MACを検証することができなくなり、それが破棄されます。受信機は、パケットの内容に基づいてMAC、共有秘密、および予想されるシーケンス番号を策定するため、MACが失敗する理由はあります。再生パケットが期待シーケンス番号（再生パケットのシーケンス番号が既に受信機によって渡されたであろう）ことは使用されないので、計算されたMACは、MACパケットで受信一致しません。"
    },
    {
      "indent": 0,
      "text": "9.3.4. Man-in-the-middle",
      "section_title": true,
      "ja": "9.3.4。真ん中の男"
    },
    {
      "indent": 3,
      "text": "This protocol makes no assumptions or provisions for an infrastructure or means for distributing the public keys of hosts. It is expected that this protocol will sometimes be used without first verifying the association between the server host key and the server host name. Such usage is vulnerable to man-in-the-middle attacks. This section describes this and encourages administrators and users to understand the importance of verifying this association before any session is initiated.",
      "ja": "このプロトコルは、ホストの公開鍵を配布するためのインフラや手段のための仮定や規定を行うものではありません。このプロトコルは時々最初のサーバーのホスト鍵とサーバのホスト名との関連を検証せずに使用されることが期待されます。このような使い方はman-in-the-middle攻撃に対して脆弱です。このセクションでは、このことを説明し、すべてのセッションが開始される前に、この関連付けを検証することの重要性を理解するために、管理者とユーザーを奨励しています。"
    },
    {
      "indent": 3,
      "text": "There are three cases of man-in-the-middle attacks to consider. The first is where an attacker places a device between the client and the server before the session is initiated. In this case, the attack device is trying to mimic the legitimate server and will offer its public key to the client when the client initiates a session. If it were to offer the public key of the server, then it would not be able to decrypt or sign the transmissions between the legitimate server and the client unless it also had access to the private key of the host. The attack device will also, simultaneously to this, initiate a session to the legitimate server, masquerading itself as the client. If the public key of the server had been securely distributed to the client prior to that session initiation, the key offered to the client by the attack device will not match the key stored on the client. In that case, the user SHOULD be given a warning that the offered host key does not match the host key cached on the client. As described in Section 4.1, the user may be free to accept the new key and continue the session. It is RECOMMENDED that the warning provide sufficient information to the user of the client device so the user may make an informed decision. If the user chooses to continue the session with the stored public key of the server (not the public key offered at the start of the session), then the session-specific data between the attacker and server will be different between the client-to-attacker session and the attacker-to-server sessions due to the randomness discussed above. From this, the attacker will not be able to make this attack work since the attacker will not be able to correctly sign packets containing this session-specific data from the server, since he does not have the private key of that server.",
      "ja": "考慮すべきman-in-the-middle攻撃の3つのケースがあります。セッションが開始される前に、攻撃者がクライアントとサーバ間のデバイスを配置する場所最初です。この場合、攻撃デバイスは、正当なサーバーを模倣しようとしていると、クライアントがセッションを開始するときにクライアントに公開鍵を提供します。それは、サーバの公開鍵を提供した場合、それはまた、ホストの秘密鍵へのアクセスを持っていない限り、正当なサーバとクライアントの間の伝送を復号化または署名することはできません。攻撃デバイスはまた、同時にこれまで、クライアントとしての地位をマスカレード、正当なサーバにセッションを開始します。サーバの公開鍵が確実にそのセッションの開始前にクライアントに配布されていた場合、攻撃デバイスによってクライアントに提供されるキーは、クライアントに保存されているキーと一致しません。その場合には、ユーザーが提供したホスト鍵がクライアント上にキャッシュされたホストキーと一致しないという警告を与えられるべきです。 4.1節で述べたように、ユーザーは新しい鍵を受け入れ、セッションを継続していなくてもよいです。ユーザーが情報に基づいた意思決定を行うことができるので、警告は、クライアントデバイスのユーザに十分な情報を提供することを推奨しています。ユーザーがサーバー（セッションの開始時に提供されていない公開鍵）の保存された公開鍵でセッションを継続することを選択した場合、攻撃者とサーバ間のセッション固有のデータは、クライアント・ツーの間で異なることになります攻撃者はセッションと、上述のランダム性による攻撃からサーバーへのセッション。このことから、攻撃者は、攻撃者は、彼がそのサーバーの秘密鍵を持っていないので、正しく、サーバーからこのセッション固有のデータを含むパケットに署名することはできませんので、この攻撃の作業を行うことはできません。"
    },
    {
      "indent": 3,
      "text": "The second case that should be considered is similar to the first case in that it also happens at the time of connection, but this case points out the need for the secure distribution of server public keys. If the server public keys are not securely distributed, then the client cannot know if it is talking to the intended server. An attacker may use social engineering techniques to pass off server keys to unsuspecting users and may then place a man-in-the-middle attack device between the legitimate server and the clients. If this is allowed to happen, then the clients will form client-to-attacker sessions, and the attacker will form attacker-to-server sessions and will be able to monitor and manipulate all of the traffic between the clients and the legitimate servers. Server administrators are encouraged to make host key fingerprints available for checking by some means whose security does not rely on the integrity of the actual host keys. Possible mechanisms are discussed in Section 4.1 and may also include secured Web pages, physical pieces of paper, etc. Implementers SHOULD provide recommendations on how best to do this with their implementation. Because the protocol is extensible, future extensions to the protocol may provide better mechanisms for dealing with the need to know the server's host key before connecting. For example, making the host key fingerprint available through a secure DNS lookup, or using Kerberos ([RFC4120]) over GSS-API ([RFC1964]) during key exchange to authenticate the server are possibilities.",
      "ja": "考慮すべき第二のケースでは、それはまた、接続時に起こることで最初の場合と同様であるが、この場合は、サーバの公開鍵を安全に配布する必要性を指摘しています。サーバーの公開鍵を安全に配布されていない場合、それは意図したサーバに話している場合、クライアントは知ることができません。攻撃者は、疑いを持たないユーザーにサーバーキーをオフに渡すためにソーシャルエンジニアリング技術を使用することができるし、その後、正規のサーバとクライアントの間でman-in-the-middle攻撃デバイスを配置することがあります。これが起こるのを許されている場合、クライアントは、クライアントと攻撃者のセッションを形成することになる、と攻撃者は、攻撃者からサーバへのセッションを形成すると、クライアントと正当なサーバ間のすべてのトラフィックを監視し、操作することができるようになります。サーバー管理者は、そのセキュリティ実際のホスト鍵の整合性に依存しない何らかの手段でチェックするためのホストキーのフィンガープリントを利用できるようにすることが奨励されています。可能なメカニズムは、4.1節で議論されており、最高のは、彼らの実装でこれを行う方法に関する推奨事項を提供すべきで保護されたWebページ、紙の物理的な作品など実装者を含むこともできます。プロトコルは拡張可能なので、プロトコルへの将来の拡張には、接続する前に、サーバーのホスト鍵を知る必要に対処するための優れたメカニズムを提供することができます。例えば、セキュアなDNSルックアップを介してホストキーのフィンガープリントを利用可能にする、または可能性があるサーバーを認証するために鍵交換の際にGSS-API（[RFC1964]）を超えるKerberosを（[RFC4120]）を使用。"
    },
    {
      "indent": 3,
      "text": "In the third man-in-the-middle case, attackers may attempt to manipulate packets in transit between peers after the session has been established. As described in Section 9.3.3, a successful attack of this nature is very improbable. As in Section 9.3.3, this reasoning does assume that the MAC is secure and that it is infeasible to construct inputs to a MAC algorithm to give a known output. This is discussed in much greater detail in Section 6 of [RFC2104]. If the MAC algorithm has a vulnerability or is weak enough, then the attacker may be able to specify certain inputs to yield a known MAC. With that, they may be able to alter the contents of a packet in transit. Alternatively, the attacker may be able to exploit the algorithm vulnerability or weakness to find the shared secret by reviewing the MACs from captured packets. In either of those cases, an attacker could construct a packet or packets that could be inserted into an SSH stream. To prevent this, implementers are encouraged to utilize commonly accepted MAC algorithms, and administrators are encouraged to watch current literature and discussions of cryptography to ensure that they are not using a MAC algorithm that has a recently found vulnerability or weakness.",
      "ja": "第三のman-in-the-middle場合、攻撃者は、セッションが確立された後、ピア間のトランジットでパケットを操作しようと試みることができます。 9.3.3項で述べたように、この種の攻撃が成功すると、非常にありそうです。 9.3.3項と同様に、この推論は、MACが安全であり、既知の出力を与えるためにMACアルゴリズムへの入力を構築するために実行不可能であると仮定ありません。これは、[RFC2104]のセクション6にはるかに詳細に説明されています。 MACアルゴリズムは、脆弱性を有するか、または十分に弱い場合、攻撃者は、既知のMACを生成するために特定の入力を指定することができてもよいです。そのことを、彼らは輸送中のパケットの内容を変更することができるかもしれません。あるいは、攻撃者は、キャプチャされたパケットからMACを検討することによって共有秘密を見つけるためのアルゴリズムの脆弱性や弱点を利用することができるかもしれません。これらの場合のいずれにおいても、攻撃者は、SSHストリームに挿入することができるパケットまたはパケットを構築することができました。これを防ぐために、実装者は、一般的に受け入れられたMACアルゴリズムを利用することが奨励されており、管理者は、彼らが最近見つかった脆弱性や弱点を持っているMACアルゴリズムを使用していないことを確認するために、現在の文献および暗号化の議論を見ることが奨励されています。"
    },
    {
      "indent": 3,
      "text": "In summary, the use of this protocol without a reliable association of the binding between a host and its host keys is inherently insecure and is NOT RECOMMENDED. However, it may be necessary in non-security-critical environments, and will still provide protection against passive attacks. Implementers of protocols and applications running on top of this protocol should keep this possibility in mind.",
      "ja": "要約すると、ホストとそのホスト鍵の間の結合の信頼性の高い関連性のないこのプロトコルの使用は本質的に安全であると推奨されません。しかし、それは非セキュリティ・クリティカルな環境で必要になることがあり、まだ受動的攻撃に対する保護を提供します。このプロトコルの上で実行されているプロトコルやアプリケーションの実装者は、心の中で、この可能性を維持する必要があります。"
    },
    {
      "indent": 0,
      "text": "9.3.5. Denial of Service",
      "section_title": true,
      "ja": "9.3.5。サービス拒否"
    },
    {
      "indent": 3,
      "text": "This protocol is designed to be used over a reliable transport. If transmission errors or message manipulation occur, the connection is closed. The connection SHOULD be re-established if this occurs. Denial of service attacks of this type (wire cutter) are almost impossible to avoid.",
      "ja": "このプロトコルは、信頼性の高いトランスポート上で使用するように設計されています。伝送エラー又はメッセージの操作が発生した場合、接続が閉じられています。これが発生した場合、接続が再確立されるべきです。このタイプ（ワイヤーカッター）のサービス拒否攻撃を避けることはほとんど不可能です。"
    },
    {
      "indent": 3,
      "text": "In addition, this protocol is vulnerable to denial of service attacks because an attacker can force the server to go through the CPU and memory intensive tasks of connection setup and key exchange without authenticating. Implementers SHOULD provide features that make this more difficult, for example, only allowing connections from a subset of clients known to have valid users.",
      "ja": "攻撃者が認証なしで接続設定と鍵交換のCPUとメモリ集中型のタスクを通過するようにサーバを強制することができますので、また、このプロトコルは、サービス拒否攻撃に対して脆弱です。実装者は、唯一の有効なユーザーを持つことが知られているクライアントのサブセットからの接続を許可する、例えば、これをより困難にする機能を提供する必要があります。"
    },
    {
      "indent": 0,
      "text": "9.3.6. Covert Channels",
      "section_title": true,
      "ja": "9.3.6。隠れチャネル"
    },
    {
      "indent": 3,
      "text": "The protocol was not designed to eliminate covert channels. For example, the padding, SSH_MSG_IGNORE messages, and several other places in the protocol can be used to pass covert information, and the recipient has no reliable way of verifying whether such information is being sent.",
      "ja": "プロトコルは、隠れチャネルを排除するように設計されていません。例えば、プロトコルにパディング、SSH_MSG_IGNOREメッセージ、および他のいくつかの場所は、秘密情報を渡すために使用することができ、受信者は、そのような情報が送信されているか否かを検証する信頼できる方法がありません。"
    },
    {
      "indent": 0,
      "text": "9.3.7. Forward Secrecy",
      "section_title": true,
      "ja": "9.3.7。転送秘密"
    },
    {
      "indent": 3,
      "text": "It should be noted that the Diffie-Hellman key exchanges may provide perfect forward secrecy (PFS). PFS is essentially defined as the cryptographic property of a key-establishment protocol in which the compromise of a session key or long-term private key after a given session does not cause the compromise of any earlier session [ANSI-T1.523-2001]. SSH sessions resulting from a key exchange using the diffie-hellman methods described in the section Diffie-Hellman Key Exchange of [SSH-TRANS] (including \"diffie-hellman-group1-sha1\" and \"diffie-hellman-group14-sha1\") are secure even if private keying/authentication material is later revealed, but not if the session keys are revealed. So, given this definition of PFS, SSH does have PFS. However, this property is not commuted to any of the applications or protocols using SSH as a transport. The transport layer of SSH provides confidentiality for password authentication and other methods that rely on secret data.",
      "ja": "のDiffie-Hellman鍵交換が完全転送秘密（PFS）を提供することができることに留意すべきです。 PFSは、本質的に与えられたセッションの後、セッション鍵や長期秘密鍵の妥協が以前のセッションの妥協を起こさないようなキー確立プロトコルの暗号化プロパティとして定義されている[ANSI-T1.523-2001] 。 （ \"ディフィー・ヘルマン-GROUP1-SHA1\" と \"ディフィー・ヘルマン-group14-SHA1\" を含む）[SSH-TRANS]のセクションのDiffie-Hellmanキー交換に記載のディフィー - ヘルマンの方法を使用して鍵交換に起因するSSHセッションプライベートキー/認証材が、後に明らかにされている場合でも、しかし、セッション鍵は、セキュア明らかにされていない場合。だから、PFSのこの定義を考えると、SSHは、PFSを持っていません。ただし、このプロパティは、トランスポートとしてSSHを使用してアプリケーションやプロトコルのいずれかに減刑されていません。 SSHのトランスポート層は、パスワード認証と秘密のデータに依存する他の方法のための機密性を提供します。"
    },
    {
      "indent": 3,
      "text": "Of course, if the DH private parameters for the client and server are revealed, then the session key is revealed, but these items can be thrown away after the key exchange completes. It's worth pointing out that these items should not be allowed to end up on swap space and that they should be erased from memory as soon as the key exchange completes.",
      "ja": "もちろん、クライアントとサーバのDHプライベート・パラメータが明らかにされている場合は、その後、セッション鍵が明らかにされますが、鍵交換が完了した後にこれらの項目を捨てることができます。これは、これらの項目は、スワップ領域に終わるさせ、彼らはすぐに鍵交換が完了すると、メモリから消去されなければならないことをしてはならないことを指摘する価値があります。"
    },
    {
      "indent": 0,
      "text": "9.3.8. Ordering of Key Exchange Methods",
      "section_title": true,
      "ja": "9.3.8。鍵交換方式の発注"
    },
    {
      "indent": 3,
      "text": "As stated in the section on Algorithm Negotiation of [SSH-TRANS], each device will send a list of preferred methods for key exchange. The most-preferred method is the first in the list. It is RECOMMENDED that the algorithms be sorted by cryptographic strength, strongest first. Some additional guidance for this is given in [RFC3766].",
      "ja": "[SSH-TRANS]のアルゴリズムネゴシエーションの項で述べたように、各デバイスは、鍵交換のための好ましい方法のリストを送信します。最も好ましい方法は、リストの最初のです。最強まず、アルゴリズムは、暗号強度によってソートすることが推奨されます。このためのいくつかの追加のガイダンスは、[RFC3766]で与えられています。"
    },
    {
      "indent": 0,
      "text": "9.3.9. Traffic Analysis",
      "section_title": true,
      "ja": "9.3.9。トラフィック分析"
    },
    {
      "indent": 3,
      "text": "Passive monitoring of any protocol may give an attacker some information about the session, the user, or protocol specific information that they would otherwise not be able to garner. For example, it has been shown that traffic analysis of an SSH session can yield information about the length of the password - [Openwall] and [USENIX]. Implementers should use the SSH_MSG_IGNORE packet, along with the inclusion of random lengths of padding, to thwart attempts at traffic analysis. Other methods may also be found and implemented.",
      "ja": "任意のプロトコルの受動的モニタリングは、攻撃者に彼らがそうでなければ集めることができないであろうセッション、ユーザ、またはプロトコル固有の情報に関するいくつかの情報を与えることができます。 [USENIX] [のOpenwall]と - 例えば、SSHセッションのトラフィック分析は、パスワードの長さに関する情報を得ることができることが示されています。実装は、トラフィック分析の試みを阻止するために、パディングのランダムな長さの包含とともに、SSH_MSG_IGNOREパケットを使用しなければなりません。他の方法も発見し、実施することができます。"
    },
    {
      "indent": 0,
      "text": "9.4. Authentication Protocol",
      "section_title": true,
      "ja": "9.4。認証プロトコル"
    },
    {
      "indent": 3,
      "text": "The purpose of this protocol is to perform client user authentication. It assumes that this runs over a secure transport layer protocol, which has already authenticated the server machine, established an encrypted communications channel, and computed a unique session identifier for this session.",
      "ja": "このプロトコルの目的は、クライアントのユーザ認証を実行することです。これは、既に暗号化された通信チャネルを確立し、サーバマシンを認証し、このセッションの一意のセッション識別子を計算したセキュアなトランスポート層プロトコル上で実行されることを前提としています。"
    },
    {
      "indent": 3,
      "text": "Several authentication methods with different security characteristics are allowed. It is up to the server's local policy to decide which methods (or combinations of methods) it is willing to accept for each user. Authentication is no stronger than the weakest combination allowed.",
      "ja": "異なるセキュリティ特性を有するいくつかの認証方法が許可されています。ユーザごとに受け入れようとしている方法（または方法の組み合わせ）を決定するために、サーバのローカルポリシー次第です。認証が許可される最も弱い組み合わせよりも強くありません。"
    },
    {
      "indent": 3,
      "text": "The server may go into a sleep period after repeated unsuccessful authentication attempts to make key search more difficult for attackers. Care should be taken so that this doesn't become a self-denial of service vector.",
      "ja": "サーバが攻撃者のためのキー検索をより困難にするために、不成功認証試行の繰返し後にスリープ期間に入ることがあります。これはサービスベクトルの自己否定にならないように注意が必要です。"
    },
    {
      "indent": 0,
      "text": "9.4.1. Weak Transport",
      "section_title": true,
      "ja": "9.4.1。弱い交通"
    },
    {
      "indent": 3,
      "text": "If the transport layer does not provide confidentiality, authentication methods that rely on secret data SHOULD be disabled. If it does not provide strong integrity protection, requests to change authentication data (e.g., a password change) SHOULD be disabled to prevent an attacker from modifying the ciphertext without being noticed, or rendering the new authentication data unusable (denial of service).",
      "ja": "トランスポート層は、機密性を提供していない場合は、秘密データに依存している認証方法を無効にする必要があります。それは、強力な完全性保護を提供しない場合、要求は認証データを変更する（例えば、パスワードの変更は）気付かれずに暗号文を修正すること、または使用できない新しい認証データ（サービス拒否）のレンダリングからの攻撃を防ぐために無効にする必要があります。"
    },
    {
      "indent": 3,
      "text": "The assumption stated above, that the Authentication Protocol only runs over a secure transport that has previously authenticated the server, is very important to note. People deploying SSH are reminded of the consequences of man-in-the-middle attacks if the client does not have a very strong a priori association of the server with the host key of that server. Specifically, for the case of the Authentication Protocol, the client may form a session to a man-in- the-middle attack device and divulge user credentials such as their username and password. Even in the cases of authentication where no user credentials are divulged, an attacker may still gain information they shouldn't have by capturing key-strokes in much the same way that a honeypot works.",
      "ja": "認証プロトコルのみが以前のサーバーを認証したセキュアなトランスポート上で実行されることを上記の仮定は、注意することが非常に重要です。クライアントは、そのサーバーのホスト鍵とサーバーの非常に強いアプリオリ関連性を持っていない場合は、SSHを展開人々は、man-in-the-middle攻撃の結果を思い出しています。具体的には、認証プロトコルの場合のために、クライアントは、男・イン・ミドル攻撃デバイスへのセッションを形成し、そのようなユーザー名やパスワードなどのユーザー資格情報を漏らすことがあります。でも、何もユーザーの資格情報が明かされていない認証の例では、攻撃者はまだ彼らはハニーポットが機能することをほとんど同じように、キーストロークをキャプチャして持つべきではない情報を得てもよいです。"
    },
    {
      "indent": 0,
      "text": "9.4.2. Debug Messages",
      "section_title": true,
      "ja": "9.4.2。デバッグメッセージ"
    },
    {
      "indent": 3,
      "text": "Special care should be taken when designing debug messages. These messages may reveal surprising amounts of information about the host if not properly designed. Debug messages can be disabled (during user authentication phase) if high security is required. Administrators of host machines should make all attempts to compartmentalize all event notification messages and protect them from unwarranted observation. Developers should be aware of the sensitive nature of some of the normal event and debug messages, and may want to provide guidance to administrators on ways to keep this information away from unauthorized people. Developers should consider minimizing the amount of sensitive information obtainable by users during the authentication phase, in accordance with the local policies. For this reason, it is RECOMMENDED that debug messages be initially disabled at the time of deployment and require an active decision by an administrator to allow them to be enabled. It is also RECOMMENDED that a message expressing this concern be presented to the administrator of a system when the action is taken to enable debugging messages.",
      "ja": "デバッグメッセージを設計する際に特別な注意が必要です。適切に設計されていない場合は、これらのメッセージは、ホストに関する情報の驚くべき量を明らかにすることができます。高いセキュリティが必要な場合は、デバッグメッセージは、（ユーザーの認証フェーズ）無効にすることができます。ホストマシンの管理者は、すべてのイベント通知メッセージを区分し、不当な観察からそれらを保護するために、すべての試行をする必要があります。開発者は、通常のイベントとデバッグメッセージのいくつかの機密性を認識しておく必要があり、不正な人々から離れて、この情報を保持する方法で管理者に指針を提供することをお勧めします。開発者は、ローカルポリシーに従って、認証フェーズ中にユーザーによって得られる機密情報の量を最小限に抑えることを検討すべきです。このため、デバッグメッセージが最初に導入の時点で無効になって、それらを有効にすることを可能にするために、管理者が能動的判断を必要とすることが推奨されます。また、アクションがデバッグメッセージを有効にするために取られたときに、この懸念を表明メッセージは、システムの管理者に提示することが推奨されます。"
    },
    {
      "indent": 0,
      "text": "9.4.3. Local Security Policy",
      "section_title": true,
      "ja": "9.4.3。ローカルセキュリティポリシー"
    },
    {
      "indent": 3,
      "text": "The implementer MUST ensure that the credentials provided validate the professed user and also MUST ensure that the local policy of the server permits the user the access requested. In particular, because of the flexible nature of the SSH connection protocol, it may not be possible to determine the local security policy, if any, that should apply at the time of authentication because the kind of service being requested is not clear at that instant. For example, local policy might allow a user to access files on the server, but not start an interactive shell. However, during the authentication protocol, it is not known whether the user will be accessing files, attempting to use an interactive shell, or even both. In any event, where local security policy for the server host exists, it MUST be applied and enforced correctly.",
      "ja": "実装者は、提供された資格情報が公言ユーザーを検証することを確実にしなければならないし、また、サーバのローカルポリシーは、アクセスが要求されたユーザーを許可することを保証しなければなりません。要求されたサービスの種類は、その時点では明らかではないので、特にためSSH接続プロトコルの柔軟な性質のため、それが認証時に適用されるべきであれば、ローカルセキュリティポリシーを決定することが可能ではないかもしれません。たとえば、ローカルポリシーは、ユーザーがサーバー上のファイルにアクセスすることができますが、インタラクティブシェルを起動しない場合があります。しかし、認証プロトコル中には、ユーザが対話型シェル、あるいはその両方を使用しようとすると、ファイルにアクセスするかどうかは不明です。サーバホストのローカルセキュリティポリシーが存在する任意のイベントでは、それが適用され、正しく適用されなければなりません。"
    },
    {
      "indent": 3,
      "text": "Implementers are encouraged to provide a default local policy and make its parameters known to administrators and users. At the discretion of the implementers, this default policy may be along the lines of anything-goes where there are no restrictions placed upon users, or it may be along the lines of excessively-restrictive, in which case, the administrators will have to actively make changes to the initial default parameters to meet their needs. Alternatively, it may be some attempt at providing something practical and immediately useful to the administrators of the system so they don't have to put in much effort to get SSH working. Whatever choice is made must be applied and enforced as required above.",
      "ja": "実装者は、デフォルトのローカルポリシーを提供し、管理者とユーザーに知られ、そのパラメータを作成することをお勧めします。実装者の裁量で、このデフォルトのポリシーがユーザーに置かれた制限はありません、またはそれは、過度に制限的のラインに沿っていてもよく、その場合には、管理者が積極的にする必要がありますどこ-行く何の線に沿っかもしれ彼らのニーズを満たすために、最初のデフォルトパラメータを変更しました。また、それはSSHの作業を取得するために多くの努力をする必要はありませんので、システムの管理者に実用的ですぐに役に立つものを提供することを、いくつかの試みかもしれません。どのような選択を適用し、上記の必要に応じて実施する必要がありますされています。"
    },
    {
      "indent": 0,
      "text": "9.4.4 Public Key Authentication",
      "section_title": true,
      "ja": "9.4.4公開鍵認証"
    },
    {
      "indent": 3,
      "text": "The use of public key authentication assumes that the client host has not been compromised. It also assumes that the private key of the server host has not been compromised.",
      "ja": "公開鍵認証を使用すると、クライアントホストが危険にさらされていないことを前提としています。また、サーバホストの秘密鍵が危殆化されていないことを前提としています。"
    },
    {
      "indent": 3,
      "text": "This risk can be mitigated by the use of passphrases on private keys; however, this is not an enforceable policy. The use of smartcards, or other technology to make passphrases an enforceable policy is suggested.",
      "ja": "このリスクは、秘密鍵のパスフレーズを使用することによって軽減することができます。しかし、これは強制力のポリシーではありません。スマートカード、または他の技術の使用は強制力の方針が提案されたパスフレーズを作ります。"
    },
    {
      "indent": 3,
      "text": "The server could require both password and public key authentication; however, this requires the client to expose its password to the server (see the section on Password Authentication below.)",
      "ja": "サーバーでは、パスワードおよび公開鍵認証の両方を必要とする可能性があります。しかし、これは、サーバーへのパスワードを公開するためにクライアントが必要です（下記のパスワード認証のセクションを参照してください。）"
    },
    {
      "indent": 0,
      "text": "9.4.5. Password Authentication",
      "section_title": true,
      "ja": "9.4.5。パスワード認証"
    },
    {
      "indent": 3,
      "text": "The password mechanism, as specified in the authentication protocol, assumes that the server has not been compromised. If the server has been compromised, using password authentication will reveal a valid username/password combination to the attacker, which may lead to further compromises.",
      "ja": "パスワードメカニズムは、認証プロトコルで指定され、サーバーが危険にさらされていないことを前提としています。サーバーが侵害された場合は、パスワード認証を使用すると、さらに妥協につながる可能性が攻撃者に有効なユーザ名/パスワードの組み合わせを明らかにします。"
    },
    {
      "indent": 3,
      "text": "This vulnerability can be mitigated by using an alternative form of authentication. For example, public key authentication makes no assumptions about security on the server.",
      "ja": "この脆弱性は、認証の代替形式を使用することによって緩和することができます。例えば、公開鍵認証は、サーバ上のセキュリティに関する仮定を行いません。"
    },
    {
      "indent": 0,
      "text": "9.4.6. Host-Based Authentication",
      "section_title": true,
      "ja": "9.4.6。ホストベースの認証"
    },
    {
      "indent": 3,
      "text": "Host-based authentication assumes that the client has not been compromised. There are no mitigating strategies, other than to use host-based authentication in combination with another authentication method.",
      "ja": "ホストベースの認証は、クライアントが危険にさらされていないことを前提としています。別の認証方式との組み合わせでホストベースの認証を使用する以外の緩和戦略は、ありません。"
    },
    {
      "indent": 0,
      "text": "9.5. Connection Protocol",
      "section_title": true,
      "ja": "9.5。接続プロトコル"
    },
    {
      "indent": 0,
      "text": "9.5.1. End Point Security",
      "section_title": true,
      "ja": "9.5.1。エンドポイントセキュリティ"
    },
    {
      "indent": 3,
      "text": "End point security is assumed by the connection protocol. If the server has been compromised, any terminal sessions, port forwarding, or systems accessed on the host are compromised. There are no mitigating factors for this.",
      "ja": "エンドポイントセキュリティは、接続プロトコルが想定されます。サーバが侵害された場合、ホストにアクセスする任意の端末セッション、ポートフォワーディング、またはシステムが危険にさらされています。このための問題を緩和する要素はありません。"
    },
    {
      "indent": 3,
      "text": "If the client has been compromised, and the server fails to stop the attacker at the authentication protocol, all services exposed (either as subsystems or through forwarding) will be vulnerable to attack. Implementers SHOULD provide mechanisms for administrators to control which services are exposed to limit the vulnerability of other services. These controls might include controlling which machines and ports can be targeted in port-forwarding operations, which users are allowed to use interactive shell facilities, or which users are allowed to use exposed subsystems.",
      "ja": "クライアントが危険にさらされていると、サーバは、認証プロトコルで攻撃を停止するように失敗した場合、（サブシステムとして、または転送のいずれかを介して）公開されるすべてのサービスが攻撃に対して脆弱になります。実装は、他のサービスの脆弱性を制限するために露出されるサービスを制御するための管理者のためのメカニズムを提供しなければなりません。これらのコントロールは、ユーザーは、ユーザーが露出サブシステムを使用することを許可されている対話型シェル設備、または使用することを許可されているマシンとポートはポートフォワーディング動作に標的とすることができる制御手段を、含むかもしれません。"
    },
    {
      "indent": 0,
      "text": "9.5.2. Proxy Forwarding",
      "section_title": true,
      "ja": "9.5.2。プロキシ転送"
    },
    {
      "indent": 3,
      "text": "The SSH connection protocol allows for proxy forwarding of other protocols such as SMTP, POP3, and HTTP. This may be a concern for network administrators who wish to control the access of certain applications by users located outside of their physical location. Essentially, the forwarding of these protocols may violate site-specific security policies, as they may be undetectably tunneled through a firewall. Implementers SHOULD provide an administrative mechanism to control the proxy forwarding functionality so that site-specific security policies may be upheld.",
      "ja": "SSH接続プロトコルは、SMTP、POP3、およびHTTPのような他のプロトコルのプロキシ転送を可能にします。これは彼らの物理的な場所の外に位置し、ユーザーによって特定のアプリケーションのアクセスを制御したいネットワーク管理者にとって問題となる場合があります。彼らは検知できないファイアウォールを介してトンネリングすることができるよう基本的に、これらのプロトコルの転送は、サイト固有のセキュリティポリシーに違反することがあります。実装者はそのサイト固有のセキュリティポリシーが守られるように、プロキシ転送の機能を制御するための管理メカニズムを提供する必要があります。"
    },
    {
      "indent": 3,
      "text": "In addition, a reverse proxy forwarding functionality is available, which, again, can be used to bypass firewall controls.",
      "ja": "また、リバースプロキシ、転送機能は、再度、ファイアウォールコントロールをバイパスするために使用することができる、利用可能です。"
    },
    {
      "indent": 3,
      "text": "As indicated above, end-point security is assumed during proxy forwarding operations. Failure of end-point security will compromise all data passed over proxy forwarding.",
      "ja": "上記に示したように、エンドポイントセキュリティは、プロキシ転送操作中に想定されます。エンドポイントセキュリティの失敗は、プロキシ転送の上を通過するすべてのデータを危険にさらすだろう。"
    },
    {
      "indent": 0,
      "text": "9.5.3. X11 Forwarding",
      "section_title": true,
      "ja": "9.5.3。 X11フォワーディング"
    },
    {
      "indent": 3,
      "text": "Another form of proxy forwarding provided by the SSH connection protocol is the forwarding of the X11 protocol. If end-point security has been compromised, X11 forwarding may allow attacks against the X11 server. Users and administrators should, as a matter of course, use appropriate X11 security mechanisms to prevent unauthorized use of the X11 server. Implementers, administrators, and users who wish to further explore the security mechanisms of X11 are invited to read [SCHEIFLER] and analyze previously reported",
      "ja": "SSH接続プロトコルによって提供されるプロキシ転送の別の形態は、X11プロトコルの転送です。エンドポイントのセキュリティが侵害された場合は、X11転送はX11サーバに対する攻撃を可能にすることができます。ユーザーおよび管理者は、当然のこととして、X11サーバの不正利用を防止するために、適切なX11のセキュリティメカニズムを使用する必要があります。さらにX11のセキュリティメカニズムを探索したい実装者、管理者、およびユーザーが[SCHEIFLER]読んで、以前に報告を分析するために招待されています"
    },
    {
      "indent": 3,
      "text": "problems with the interactions between SSH forwarding and X11 in CERT vulnerabilities VU#363181 and VU#118892 [CERT].",
      "ja": "CERTでSSH転送とX11との間の相互作用の問題は、VU番号363181とのVU＃118892 [CERT]を脆弱性。"
    },
    {
      "indent": 3,
      "text": "X11 display forwarding with SSH, by itself, is not sufficient to correct well known problems with X11 security [VENEMA]. However, X11 display forwarding in SSH (or other secure protocols), combined with actual and pseudo-displays that accept connections only over local IPC mechanisms authorized by permissions or access control lists (ACLs), does correct many X11 security problems, as long as the \"none\" MAC is not used. It is RECOMMENDED that X11 display implementations default to allow the display to open only over local IPC. It is RECOMMENDED that SSH server implementations that support X11 forwarding default to allow the display to open only over local IPC. On single-user systems, it might be reasonable to default to allow the local display to open over TCP/IP.",
      "ja": "SSHと転送X11ディスプレイは、それ自体で、X11セキュリティ[Venema氏]を有する周知の問題を修正するのに十分ではありません。しかし、X11 SSH（または他のセキュアプロトコル）の表示転送は、唯一のアクセス許可またはアクセス制御リスト（ACL）によって認可ローカルIPCメカニズム上の接続を受け入れ、実際の擬似ディスプレイと組み合わされ、限り、多くのX11のセキュリティ問題を修正しません「なし」MACは使用されません。 X11ディスプレイの実装のデフォルトは表示のみローカルIPC上で開くことができるようにすることが推奨されます。 X11転送のデフォルトをサポートするSSHサーバーの実装は、ディスプレイが唯一のローカルIPC上で開くことができるようにすることが推奨されます。シングルユーザーシステムでは、ローカルディスプレイはTCP / IP経由で開くことができるように、デフォルトすることは合理的であるかもしれません。"
    },
    {
      "indent": 3,
      "text": "Implementers of the X11 forwarding protocol SHOULD implement the magic cookie access-checking spoofing mechanism, as described in [SSH-CONNECT], as an additional mechanism to prevent unauthorized use of the proxy.",
      "ja": "プロキシの不正使用を防止するための追加の機構として、[SSH-CONNECT]に記載されているようにX11転送プロトコルの実装は、マジッククッキーアクセスチェックスプーフィング機構を実装する必要があります。"
    },
    {
      "indent": 0,
      "text": "10. References",
      "section_title": true,
      "ja": "10.参考文献"
    },
    {
      "indent": 0,
      "text": "10.1. Normative References",
      "section_title": true,
      "ja": "10.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[SSH-TRANS] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH) Transport Layer Protocol\", RFC 4253, January 2006.",
      "ja": "[SSH-TRANS] Ylonenと、T.とC. Lonvick、エド。、 \"セキュアシェル（SSH）トランスポート層プロトコル\"、RFC 4253、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[SSH-USERAUTH] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH) Authentication Protocol\", RFC 4252, January 2006.",
      "ja": "[SSH-USERAUTH] Ylonenと、T.とC. Lonvick、エド。、 \"セキュアシェル（SSH）認証プロトコル\"、RFC 4252、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[SSH-CONNECT] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH) Connection Protocol\", RFC 4254, January 2006.",
      "ja": "[SSH-CONNECT] Ylonenと、T.とC. Lonvick、エド。、 \"セキュアシェル（SSH）接続プロトコル\"、RFC 4254、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[SSH-NUMBERS] Lehtinen, S. and C. Lonvick, Ed., \"The Secure Shell (SSH) Protocol Assigned Numbers\", RFC 4250, January 2006.",
      "ja": "[SSH-NUMBERS]レーティネン、S.とC. Lonvick、エド。、 \"セキュアシェル（SSH）プロトコル割り当て番号\"、RFC 4250、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2434] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 2434, October 1998.",
      "ja": "[RFC2434] Narten氏、T.とH. Alvestrand、 \"RFCsにIANA問題部に書くためのガイドライン\"、BCP 26、RFC 2434、1998年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC3066] Alvestrand, H., \"Tags for the Identification of Languages\", BCP 47, RFC 3066, January 2001.",
      "ja": "[RFC3066] Alvestrand、H.、 \"言語識別のためのタグ\"、BCP 47、RFC 3066、2001年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC3629] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD 63, RFC 3629, November 2003.",
      "ja": "[RFC3629] Yergeau、F.、 \"UTF-8、ISO 10646の変換フォーマット\"、STD 63、RFC 3629、2003年11月。"
    },
    {
      "indent": 0,
      "text": "10.2. Informative References",
      "section_title": true,
      "ja": "10.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC0822] Crocker, D., \"Standard for the format of ARPA Internet text messages\", STD 11, RFC 822, August 1982.",
      "ja": "[RFC0822]クロッカー、D.、 \"ARPAインターネットテキストメッセージの形式の規格\"、STD 11、RFC 822、1982年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC0854] Postel, J. and J. Reynolds, \"Telnet Protocol Specification\", STD 8, RFC 854, May 1983.",
      "ja": "[RFC0854]ポステル、J.、およびJ.レイノルズ、 \"テルネットプロトコル仕様\"、STD 8、RFC 854、1983年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC1034] Mockapetris, P., \"Domain names - concepts and facilities\", STD 13, RFC 1034, November 1987.",
      "ja": "[RFC1034] Mockapetris、P.、 \"ドメイン名 - 概念と設備\"、STD 13、RFC 1034、1987年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC1282] Kantor, B., \"BSD Rlogin\", RFC 1282, December 1991.",
      "ja": "[RFC1282]オフィス、B.、 \"BSD rloginの\"、RFC 1282、1991年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC4120] Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The Kerberos Network Authentication Service (V5)\", RFC 4120, July 2005.",
      "ja": "[RFC4120]ノイマン、C.、ゆう、T.、ハルトマン、S.、およびK.レイバーン、 \"ケルベロスネットワーク認証サービス（V5）\"、RFC 4120、2005年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC1964] Linn, J., \"The Kerberos Version 5 GSS-API Mechanism\", RFC 1964, June 1996.",
      "ja": "[RFC1964]リン、J.、 \"Kerberosバージョン5 GSS-APIメカニズム\"、RFC 1964、1996年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC2025] Adams, C., \"The Simple Public-Key GSS-API Mechanism (SPKM)\", RFC 2025, October 1996.",
      "ja": "[RFC2025]アダムス、C.、 \"単純な公開鍵GSS-APIメカニズム（SPKM）\"、RFC 2025、1996年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC2085] Oehler, M. and R. Glenn, \"HMAC-MD5 IP Authentication with Replay Prevention\", RFC 2085, February 1997.",
      "ja": "[RFC2085]エーラー、M.およびR.グレン、 \"リプレイ防止とHMAC-MD5 IP認証\"、RFC 2085、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC2104] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, February 1997.",
      "ja": "[RFC2104] Krawczyk、H.、ベラー、M.、およびR.カネッティ、 \"HMAC：メッセージ認証のための鍵付きハッシュ化\"、RFC 2104、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC 2246, January 1999.",
      "ja": "[RFC2246]ダークス、T.とC.アレン、 \"TLSプロトコルバージョン1.0\"、RFC 2246、1999年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC2410] Glenn, R. and S. Kent, \"The NULL Encryption Algorithm and Its Use With IPsec\", RFC 2410, November 1998.",
      "ja": "[RFC2410]グレン、R.とS.ケント、 \"NULL暗号化アルゴリズムとIPsecでの使用\"、RFC 2410、1998年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC2743] Linn, J., \"Generic Security Service Application Program Interface Version 2, Update 1\", RFC 2743, January 2000.",
      "ja": "[RFC2743]リン、J.、 \"ジェネリックセキュリティーサービス適用業務プログラムインタフェースバージョン2、アップデート1\"、RFC 2743、2000年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC3766] Orman, H. and P. Hoffman, \"Determining Strengths For Public Keys Used For Exchanging Symmetric Keys\", BCP 86, RFC 3766, April 2004.",
      "ja": "[RFC3766]オーマン、H.、およびP.ホフマン、 \"対称鍵を交換するために使用公開鍵の強さを測定\"、BCP 86、RFC 3766、2004年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC4086] Eastlake, D., 3rd, Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, June 2005.",
      "ja": "[RFC4086]イーストレーク、D.、3、シラー、J.、およびS.クロッカー、 \"セキュリティのためのランダム要件\"、BCP 106、RFC 4086、2005年6月。"
    },
    {
      "indent": 3,
      "text": "[FIPS-180-2] US National Institute of Standards and Technology, \"Secure Hash Standard (SHS)\", Federal Information Processing Standards Publication 180-2, August 2002.",
      "ja": "[FIPS-180-2]米国国立標準技術研究所、連邦情報処理規格180-2出版、2002年8月「ハッシュ規格（SHS）を固定します」。"
    },
    {
      "indent": 3,
      "text": "[FIPS-186-2] US National Institute of Standards and Technology, \"Digital Signature Standard (DSS)\", Federal Information Processing Standards Publication 186- 2, January 2000.",
      "ja": "[FIPS-186-2]米国国立標準技術研究所、「デジタル署名標準（DSS）」、連邦情報処理規格出版186- 2、2000年1月。"
    },
    {
      "indent": 3,
      "text": "[FIPS-197] US National Institute of Standards and Technology, \"Advanced Encryption Standard (AES)\", Federal Information Processing Standards Publication 197, November 2001.",
      "ja": "[FIPS-197]米国国立標準技術研究所、「高度暗号化標準（AES）」、連邦情報処理規格出版197、2001年11月。"
    },
    {
      "indent": 3,
      "text": "[ANSI-T1.523-2001] American National Standards Institute, Inc., \"Telecom Glossary 2000\", ANSI T1.523-2001, February 2001.",
      "ja": "[ANSI-T1.523-2001]米国規格協会、株式会社、 \"テレコム用語集2000\"、ANSI T1.523-2001、2001年2月。"
    },
    {
      "indent": 3,
      "text": "[SCHNEIER] Schneier, B., \"Applied Cryptography Second Edition: protocols algorithms and source in code in C\", John Wiley and Sons, New York, NY, 1996.",
      "ja": "[シュナイアー]シュナイアー、B.、 \"応用暗号第二版：Cのコードでプロトコルアルゴリズムとソース\"、John Wiley and Sons、ニューヨーク、NY、1996。"
    },
    {
      "indent": 3,
      "text": "[SCHEIFLER] Scheifler, R., \"X Window System : The Complete Reference to Xlib, X Protocol, Icccm, Xlfd, 3rd edition.\", Digital Press, ISBN 1555580882, February 1992.",
      "ja": "[SCHEIFLER] Scheifler、R.、 \"Xウィンドウシステム：。Xlibの、Xプロトコル、ICCCM、XLFD、第3版への完全なリファレンス\"、デジタルプレス、ISBN 1555580882、1992年2月。"
    },
    {
      "indent": 3,
      "text": "[KAUFMAN] Kaufman, C., Perlman, R., and M. Speciner, \"Network Security: PRIVATE Communication in a PUBLIC World\", Prentice Hall Publisher, 1995.",
      "ja": "[KAUFMAN]カウフマン、C.、パールマン、R.、およびM. Speciner、 \"ネットワークセキュリティ：PUBLIC世界でPRIVATEコミュニケーション\"、プレンティスホール出版、1995。"
    },
    {
      "indent": 3,
      "text": "[CERT] CERT Coordination Center, The., \"http://www.cert.org/nav/index_red.html\".",
      "ja": "[CERT] CERT Coordination Centerは、。、 \"http://www.cert.org/nav/index_red.html\"。"
    },
    {
      "indent": 3,
      "text": "[VENEMA] Venema, W., \"Murphy's Law and Computer Security\", Proceedings of 6th USENIX Security Symposium, San Jose CA http://www.usenix.org/publications/library/ proceedings/sec96/venema.html, July 1996.",
      "ja": "[Venema氏] Venema氏、W.、 \"マーフィーの法則とコンピュータセキュリティ\"、第六USENIXセキュリティシンポジウム、サンノゼCA http://www.usenix.org/publications/library/手続/ sec96 / venema.html、1996年7月。"
    },
    {
      "indent": 3,
      "text": "[ROGAWAY] Rogaway, P., \"Problems with Proposed IP Cryptography\", Unpublished paper http://www.cs.ucdavis.edu/~rogaway/ papers/draft-rogaway-ipsec-comments-00.txt, 1996.",
      "ja": "[ROGAWAY] Rogaway、P.、 \"を提案IP暗号化の問題\"、未公開の紙http://www.cs.ucdavis.edu/~rogaway/ペーパー/ドラフトrogaway IPSecにコメント-00.txt、1996。"
    },
    {
      "indent": 3,
      "text": "[DAI] Dai, W., \"An attack against SSH2 protocol\", Email to the SECSH Working Group ietf-ssh@netbsd.org ftp:// ftp.ietf.org/ietf-mail-archive/secsh/2002- 02.mail, Feb 2002.",
      "ja": "[DAI]大、W.、 \"SSH2プロトコルに対する攻撃\"、SECSHワーキンググループietf-ssh@netbsd.org FTPへのEメール：// ftp.ietf.org/ietf-mail-archive/secsh/2002- 02 .MAIL、2002年2月。"
    },
    {
      "indent": 3,
      "text": "[BELLARE] Bellaire, M., Kohno, T., and C. Namprempre, \"Authenticated Encryption in SSH: Fixing the SSH Binary Packet Protocol\", Proceedings of the 9th ACM Conference on Computer and Communications Security, Sept 2002.",
      "ja": "[ベラー]ベレア、M.、河野、T.、およびC. Namprempre、「SSHで認証暗号化：SSHバイナリパケットプロトコルを修正する」、コンピュータおよび通信セキュリティ、2002年9月に第9回ACM会議の議事録。"
    },
    {
      "indent": 3,
      "text": "[Openwall] Solar Designer and D. Song, \"SSH Traffic Analysis Attacks\", Presentation given at HAL2001 and NordU2002 Conferences, Sept 2001.",
      "ja": "[のOpenwall]ソーラー・デザイナーとD.ソング、「SSHトラフィック分析攻撃」、プレゼンテーションは、HAL2001とNordU2002会議、2001年9月に与えられました。"
    },
    {
      "indent": 3,
      "text": "[USENIX] Song, X.D., Wagner, D., and X. Tian, \"Timing Analysis of Keystrokes and SSH Timing Attacks\", Paper given at 10th USENIX Security Symposium, 2001.",
      "ja": "[USENIX]ソング、X.D.、ワーグナー、D.、およびX.天、第10回USENIXセキュリティシンポジウム、2001年に与えられた、紙「キーストロークおよびSSHタイミング攻撃のタイミング解析」。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Tatu Ylonen SSH Communications Security Corp Valimotie 17 00380 Helsinki Finland",
      "ja": "タトゥYlonenとSSHコミュニケーションズ・セキュリティ社Valimotie 17 00380ヘルシンキフィンランド"
    },
    {
      "indent": 3,
      "text": "EMail: ylo@ssh.com",
      "ja": "メールアドレス：ylo@ssh.com"
    },
    {
      "indent": 3,
      "text": "Chris Lonvick (editor) Cisco Systems, Inc. 12515 Research Blvd. Austin 78759 USA",
      "ja": "クリスLonvick（エディタ）は、シスコシステムズ、株式会社12515リサーチ・ブルバードオースティン78759 USA"
    },
    {
      "indent": 3,
      "text": "EMail: clonvick@cisco.com",
      "ja": "メールアドレス：clonvick@cisco.com"
    },
    {
      "indent": 0,
      "text": "Trademark Notice",
      "ja": "商標について"
    },
    {
      "indent": 3,
      "text": "\"ssh\" is a registered trademark in the United States and/or other countries.",
      "ja": "「SSHは」米国および/またはその他の国における登録商標または商標です。"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2006).",
      "ja": "著作権（C）インターネット協会（2006）。"
    },
    {
      "indent": 3,
      "text": "This document is subject to the rights, licenses and restrictions contained in BCP 78, and except as set forth therein, the authors retain all their rights.",
      "ja": "この文書では、BCP 78に含まれる権利と許可と制限の適用を受けており、その中の記載を除いて、作者は彼らのすべての権利を保有します。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とCONTRIBUTOR「そのまま」、ORGANIZATION HE / SHEが表すまたはインターネットソサエティおよびインターネット・エンジニアリング・タスク・フォース放棄すべての保証、明示または、（もしあれば）後援ISに設けられています。黙示、情報の利用は、特定の目的に対する権利または商品性または適合性の黙示の保証を侵害しない任意の保証含むがこれらに限定されません。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "ja": "知的財産"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "ja": "IETFは、本書またはそのような権限下で、ライセンスがたりないかもしれない程度に記載された技術の実装や使用に関係すると主張される可能性があります任意の知的財産権やその他の権利の有効性または範囲に関していかなる位置を取りません利用可能です。またそれは、それがどのような権利を確認する独自の取り組みを行ったことを示すものでもありません。 RFC文書の権利に関する手続きの情報は、BCP 78およびBCP 79に記載されています。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "ja": "IPRの開示のコピーが利用できるようにIETF事務局とライセンスの保証に行われた、または本仕様の実装者または利用者がそのような所有権の使用のための一般的なライセンスまたは許可を取得するために作られた試みの結果を得ることができますhttp://www.ietf.org/iprのIETFのオンラインIPRリポジトリから。"
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "ja": "IETFは、その注意にこの標準を実装するために必要とされる技術をカバーすることができる任意の著作権、特許または特許出願、またはその他の所有権を持ってすべての利害関係者を招待します。 ietf-ipr@ietf.orgのIETFに情報を記述してください。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is provided by the IETF Administrative Support Activity (IASA).",
      "ja": "RFCエディタ機能のための資金は、IETF管理サポート活動（IASA）によって提供されます。"
    }
  ]
}