{
  "title": {
    "text": "RFC 5827 - Early Retransmit for TCP and Stream Control Transmission Protocol (SCTP)",
    "ja": "RFC 5827 - TCPおよびストリーム制御伝送プロトコル（SCTP）のための初期の再送信"
  },
  "number": 5827,
  "created_at": "2019-10-29 12:38:22.130428+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                         M. Allman\nRequest for Comments: 5827                                          ICSI\nCategory: Experimental                                    K. Avrachenkov\nISSN: 2070-1721                                                    INRIA\n                                                               U. Ayesta\n                                           BCAM-IKERBASQUE and LAAS-CNRS\n                                                              J. Blanton\n                                                         Ohio University\n                                                               P. Hurtig\n                                                     Karlstad University\n                                                              April 2010",
      "raw": true
    },
    {
      "indent": 12,
      "text": "            Early Retransmit for TCP\nand Stream Control Transmission Protocol (SCTP)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document proposes a new mechanism for TCP and Stream Control Transmission Protocol (SCTP) that can be used to recover lost segments when a connection's congestion window is small. The \"Early Retransmit\" mechanism allows the transport to reduce, in certain special circumstances, the number of duplicate acknowledgments required to trigger a fast retransmission. This allows the transport to use fast retransmit to recover segment losses that would otherwise require a lengthy retransmission timeout.",
      "ja": "このドキュメントでは、TCPとの接続の輻輳ウィンドウが小さい場合には、失われたセグメントを回復するために使用することができますストリーム制御伝送プロトコル（SCTP）のための新しいメカニズムを提案しています。 「早期再送信」のメカニズムは、トランスポートは、特定の特殊な状況では、高速の再送をトリガするために必要な重複確認応答の数を減らすことができます。これは、トランスポートは、そうでない場合は、長い再送タイムアウトが必要になり、セグメント損失を回復するために、高速再送信を使用することができます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、検査、実験的な実装、および評価のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document defines an Experimental Protocol for the Internet community. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "この文書は、インターネットコミュニティのためにExperimentalプロトコルを定義します。このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc5827.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc5827で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2010 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2010 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 3,
      "text": "This document may contain material from IETF Documents or IETF Contributions published or made publicly available before November 10, 2008. The person(s) controlling the copyright in some of this material may not have granted the IETF Trust the right to allow modifications of such material outside the IETF Standards Process. Without obtaining an adequate license from the person(s) controlling the copyright in such materials, this document may not be modified outside the IETF Standards Process, and derivative works of it may not be created outside the IETF Standards Process, except to format it for publication as an RFC or to translate it into languages other than English.",
      "ja": "この材料の一部がIETFトラストにこのような材料の変更を許可する権利を与えられていない可能性がありますにこの文書は、2008年、IETFドキュメントまたは11月10日以前に発行または公開さIETF貢献から著作権を支配する者（複数可）材料を含んでいてもよいですIETF標準化プロセスの外。そのような材料の著作権を管理者（単数または複数）から適切なライセンスを取得することなく、この文書は、IETF標準化過程の外側修正されないかもしれません、そして、それの派生物は、IETF標準化過程の外側に作成されない場合があり、それをフォーマットする以外出版RFCとして、英語以外の言語に翻訳します。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "Many researchers have studied the problems with TCP's loss recovery [RFC793, RFC5681] when the congestion window is small, and they have outlined possible mechanisms to mitigate these problems [Mor97, BPS+98, Bal98, LK98, RFC3150, AA02]. SCTP's [RFC4960] loss recovery and congestion control mechanisms are based on TCP, and therefore the same problems impact the performance of SCTP connections. When the transport detects a missing segment, the connection enters a loss recovery phase. There are several variants of the loss recovery phase depending on the TCP implementation. TCP can use slow-start-based recovery or fast recovery [RFC5681], NewReno [RFC3782], and loss recovery, based on selective acknowledgments (SACKs) [RFC2018, FF96, RFC3517]. SCTP's loss recovery is not as varied due to the built-in selective acknowledgments.",
      "ja": "多くの研究者は、輻輳ウィンドウが小さいTCPの損失回復[RFC793、RFC5681]の問題を研究している、と彼らはこれらの問題[Mor97、BPS + 98、Bal98、LK98、RFC3150、AA02]を軽減するための可能なメカニズムを概説しています。 SCTPの[RFC4960]損失回復と輻輳制御メカニズムは、TCPに基づいているので、同様の問題がSCTP接続のパフォーマンスに影響を与えます。トランスポートが不足しているセグメントを検出すると、接続が損失の回復期に入ります。 TCPの実装に依存する損失の回復局面のいくつかのバリエーションがあります。 TCPは、選択的確認応答（サックス）[RFC2018、FF96、RFC3517]に基づいて、スロースタート・ベースのリカバリまたは高速回復[RFC5681]、NewRenoの[RFC3782]、および損失回復を使用することができます。 SCTPの損失回復が原因組み込みの選択確認応答のように変化しません。"
    },
    {
      "indent": 3,
      "text": "All of the above variants have two methods for invoking loss recovery. First, if an acknowledgment (ACK) for a given segment is not received in a certain amount of time, a retransmission timer fires, and the segment is resent [RFC2988, RFC4960]. Second, the \"fast retransmit\" algorithm resends a segment when three duplicate",
      "ja": "上記の変異体のすべてが損失回復を呼び出すための2つの方法があります。所与のセグメントに対する確認応答（ACK）が一定時間、再送タイマが起動中で受信され、されていない場合、まず、セグメント再送[RFC2988、RFC4960]はです。第二に、「高速再送」アルゴリズムは、セグメントを再送信するとき3つの重複"
    },
    {
      "indent": 3,
      "text": "ACKs arrive at the sender [Jac88, RFC5681]. Duplicate ACKs are triggered by out-of-order arrivals at the receiver. However, because duplicate ACKs from the receiver are triggered by both segment loss and segment reordering in the network path, the sender waits for three duplicate ACKs in an attempt to disambiguate segment loss from segment reordering. When the congestion window is small, it may not be possible to generate the required number of duplicate ACKs to trigger fast retransmit when a loss does happen.",
      "ja": "ACKは送信者[Jac88、RFC5681]に到着します。重複ACKは、受信機におけるアウトオブオーダー到着によってトリガされます。しかし、受信機からの重複ACKは、三個の重複ACKの送信者を待つは、セグメント並べ替えからセグメント損失を明確にしようとして、ネットワーク経路に再配列セグメント損失及びセグメントの両方によってトリガされます。輻輳ウィンドウが小さい場合、損失が起こるないときに高速再送をトリガするために重複ACKの必要な数を生成することが可能ではないかもしれません。"
    },
    {
      "indent": 3,
      "text": "Small congestion windows can occur in a number of situations, such as:",
      "ja": "小さな輻輳ウィンドウは、次のような状況で、多くの中で発生する可能性があります。"
    },
    {
      "indent": 3,
      "text": "(1) The connection is constrained by end-to-end congestion control when the connection's share of the path is small, the path has a small bandwidth-delay product, or the transport is ascertaining the available bandwidth in the first few round-trip times of slow start.",
      "ja": "（1）接続経路の接続のシェアが小さく、エンドツーエンドの輻輳制御によって制約され、経路は小さな帯域幅遅延積を有する、または輸送は、最初の数ラウンドトリップで利用可能な帯域幅を確認されていますスロースタートの回。"
    },
    {
      "indent": 3,
      "text": "(2) The connection is \"application limited\" and has only a limited amount of data to send. This can happen any time the application does not produce enough data to fill the congestion window. A particular case when all connections become application limited is as the connection ends.",
      "ja": "（2）接続は「限られたアプリケーション」であり、送信するデータの限られた量を有しています。これは、アプリケーションが輻輳ウィンドウを満たすのに十分なデータを生成しませんいつでも発生する可能性があります。接続が終了するように、すべての接続がアプリケーション限定なる特定の場合です。"
    },
    {
      "indent": 3,
      "text": "(3) The connection is limited by the receiver's advertised window.",
      "ja": "（3）接続が受信機の広告ウィンドウによって制限されます。"
    },
    {
      "indent": 3,
      "text": "The transport's retransmission timeout (RTO) is based on measured round-trip times (RTT) between the sender and receiver, as specified in [RFC2988] (for TCP) and [RFC4960] (for SCTP). To prevent spurious retransmissions of segments that are only delayed and not lost, the minimum RTO is conservatively chosen to be 1 second. Therefore, it behooves TCP senders to detect and recover from as many losses as possible without incurring a lengthy timeout during which the connection remains idle. However, if not enough duplicate ACKs arrive from the receiver, the fast retransmit algorithm is never triggered -- this situation occurs when the congestion window is small, if a large number of segments in a window are lost, or at the end of a transfer as data drains from the network. For instance, consider a congestion window of three segments' worth of data. If one segment is dropped by the network, then at most two duplicate ACKs will arrive at the sender. Since three duplicate ACKs are required to trigger fast retransmit, a timeout will be required to resend the dropped segment. Note that delayed ACKs [RFC5681] may further reduce the number of duplicate ACKs a receiver sends. However, we assume that receivers send immediate ACKs when there is a gap in the received sequence space per [RFC5681].",
      "ja": "[RFC2988]（TCPの場合）及び（SCTP用）[RFC4960]で指定されるようにトランスポートの再送タイムアウト（RTO）は、送信者と受信者との間の測定されたラウンドトリップ時間（RTT）に基づいています。だけ遅延され、失われていないセグメントのスプリアス再送を防止するために、最小のRTOは、1秒に保存的に選択されます。したがって、それが検出され、接続がアイドル状態のままでいる間の長いタイムアウトを招くことなく、できるだけ多くの損失から回復するためにTCPの送信者を不可欠な時代。しかし、十分ではない重複ACKが受信機から到着する場合、高速再送アルゴリズムがトリガされることはありません - このような状況は、ウィンドウ内の多数のセグメントが失われた場合、輻輳ウィンドウは、小さいときに発生する、または転送の終わりにネットワークからのデータ排水など。例えば、データの3つのセグメントの価値の輻輳ウィンドウを考えます。一つのセグメントがネットワークによってドロップされた場合には、最大2つの重複ACKが送信側に到着します。 3つの重複ACKが高速再送信をトリガするために必要とされるため、タイムアウトがドロップされたセグメントを再送信する必要があります。 ACKを遅延メモ[RFC5681]は、さらに、受信機が送信重複ACKの数を減らすことができます。しかし、私たちは[RFC5681]あたりの受信シーケンス空間にギャップがある場合に受信機がすぐにACKを送信することを前提としています。"
    },
    {
      "indent": 3,
      "text": "[BPS+98] shows that roughly 56% of retransmissions sent by a busy Web server are sent after the RTO timer expires, while only 44% are handled by fast retransmit. In addition, only 4% of the RTO timer-based retransmissions could have been avoided with SACK, which has to continue to disambiguate reordering from genuine loss. Furthermore, [All00] shows that for one particular Web server, the median number of bytes carried by a connection is less than four segments, indicating that more than half of the connections will be forced to rely on the RTO timer to recover from any losses that occur. Thus, loss recovery that does not rely on the conservative RTO is likely to be beneficial for short TCP transfers.",
      "ja": "[BPS + 98] RTOタイマが満了した後、わずか44％が高速再送信することによって処理されている間、ビジーWebサーバーによって送信された再送信のおおよそ56％が、送信されることを示しています。また、RTOタイマーベースの再送信のわずか4％が本物の損失から再注文明確にするために継続することがあるSACK、で回避されている可能性が。また、[All00】一台の特定のWebサーバに対して、接続によって運ばれるバイト数の中央値は、接続の半分以上は、任意の損失から回復するRTOタイマに頼ることを余儀なくされることを示す、以下4つのセグメントであることを示していますそれが起こります。このように、保守的なRTOに依存しない損失の回復は、短いTCP転送のために有益である可能性が高いです。"
    },
    {
      "indent": 3,
      "text": "The limited transmit mechanism introduced in [RFC3042] and currently codified in [RFC5681] allows a TCP sender to transmit previously unsent data upon receipt of each of the two duplicate ACKs that precede a fast retransmit. SCTP [RFC4960] uses SACK information to calculate the number of outstanding segments in the network. Hence, when the first two duplicate ACKs arrive at the sender, they will indicate that data has left the network, and they will allow the sender to transmit new data (if available), similar to TCP's limited transmit algorithm. In the remainder of this document, we use \"limited transmit\" to include both TCP and SCTP mechanisms for sending in response to the first two duplicate ACKs. By sending these two new segments, the sender is attempting to induce additional duplicate ACKs (if appropriate), so that fast retransmit will be triggered before the retransmission timeout expires. The sender-side \"Early Retransmit\" mechanism outlined in this document covers the case when previously unsent data is not available for transmission (case (2) above) or cannot be transmitted due to an advertised window limitation (case (3) above).",
      "ja": "[RFC3042]で導入され、現在は[RFC5681]に成文化限られた送信機構は、高速再送の前に2個の重複ACKの各々の受信時に、以前に未送信データを送信するためのTCPセンダを可能にします。 SCTP [RFC4960]は、ネットワーク内の未処理のセグメントの数を計算するためにSACK情報を使用します。最初の二つの重複ACKが送信者に到着したときしたがって、彼らはデータがネットワークを去ったことを示すだろう、と彼らは送信者がTCPの制限された送信アルゴリズム（使用可能な場合）、同様の新規データを送信することができます。この文書の残りでは、我々は、最初の2個の重複ACKに応答して送信するためのTCPとSCTPの両方の機構を含むように「制限された送信」を使用します。再送タイムアウトの期限が切れる前に高速再送がトリガーされるように、これら二つの新しいセグメントを送信することにより、送信者は、追加の重複ACK（適切な場合）を誘導しようとしています。以前に未送信データが（上記の場合（2））の送信のために利用できないかによる広告ウィンドウ制限（上記ケース（3））に送信することができない場合は、この文書で概説送信側「早期再送信」機構は、ケースをカバーします。"
    },
    {
      "indent": 3,
      "text": "Note: This document is being published as an experimental RFC, as part of the process for the TCPM working group and the IETF to assess whether the proposed change is useful and safe in the heterogeneous environments, including which variants of the mechanism are the most effective. In the future, this specification may be updated and put on the standards track if its safeness and efficacy can be demonstrated.",
      "ja": "注：この文書は、メカニズムの変異体を含むTCPMワーキンググループと提案された変更は、異機種混在環境で有用かつ安全であるかどうかを評価するIETF、プロセスの一環として、実験的RFCとして公開されているが、最も効果的です。将来的には、この仕様は更新され、その安全性と有効性を証明することができる場合の基準は、トラックの上に置くことができます。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はRFC 2119 [RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "The reader is expected to be familiar with the definitions given in [RFC5681].",
      "ja": "読者は[RFC5681]で与えられた定義に精通していることが予想されます。"
    },
    {
      "indent": 0,
      "text": "3. Early Retransmit Algorithm",
      "section_title": true,
      "ja": "3.早期再送アルゴリズム"
    },
    {
      "indent": 3,
      "text": "The Early Retransmit algorithm calls for lowering the threshold for triggering fast retransmit when the amount of outstanding data is small and when no previously unsent data can be transmitted (such that limited transmit could be used). Duplicate ACKs are triggered by each arriving out-of-order segment. Therefore, fast retransmit will not be invoked when there are less than four outstanding segments (assuming only one segment loss in the window). However, TCP and SCTP are not required to track the number of outstanding segments, but rather the number of outstanding bytes or messages. (Note that SCTP's message boundaries do not necessarily correspond to segment boundaries.) Therefore, applying the intuitive notion of a transport with less than four segments outstanding is more complicated than it first appears. In Section 3.1, we describe a \"byte-based\" variant of Early Retransmit that attempts to roughly map the number of outstanding bytes to a number of outstanding segments that is then used when deciding whether to trigger Early Retransmit. In Section 3.2, we describe a \"segment-based\" variant that represents a more precise algorithm for triggering Early Retransmit. This precision comes at the cost of requiring additional state to be kept by the TCP sender. In both cases, we describe SACK-based and non-SACK-based versions of the scheme (of course, the non-SACK version will not apply to SCTP). This document explicitly does not prefer one variant over the other, but leaves the choice to the implementer.",
      "ja": "未処理データ量が少なく、全く以前に未送信のデータを送信できない場合（例えば、その制限された送信を使用することができる）場合に初期再送アルゴリズムは高速再送をトリガするための閾値を低下させることを必要とします。重複ACKは、各到着アウト・オブ・オーダのセグメントによってトリガされます。したがって、高速再送は、（ウィンドウ内の唯一つのセグメントの損失を仮定すると）以下4つの未処理セグメントがあるときに呼び出されることはありません。しかし、TCPとSCTPは、優れたセグメントの数ではなく、未処理のバイトやメッセージの数を追跡する必要はありません。 （SCTPのメッセージの境界は、必ずしもセグメント境界に対応しないことに留意されたい。）したがって、卓越した未満の4つのセグメントを有するトランスポートの直感的な概念を適用することは、最初に表示されるよりも複雑です。セクション3.1において、我々は、概ね早期再送信をトリガするかどうかを決定するときに使用される未処理のセグメントの数に未処理のバイト数をマッピングしようとする初期の再送信の「バイトベース」変異体を記載します。セクション3.2で、我々は早期再送をトリガするためのより正確なアルゴリズムを表す「セグメント・ベースの」変異体を記載します。この精度は、TCP送信者によって保持されるように、追加の状態を必要とするコストがかかります。どちらの場合も、当社は、スキームのSACKベースおよび非SACKベースのバージョンを（もちろん、非SACKバージョンがSCTPには適用されません）について説明します。この文書は、明示的に他の上の一つの変形を好むが、実装者に選択肢を残していません。"
    },
    {
      "indent": 0,
      "text": "3.1. Byte-Based Early Retransmit",
      "section_title": true,
      "ja": "3.1. バイトベースの早期再送信"
    },
    {
      "indent": 3,
      "text": "A TCP or SCTP sender MAY use byte-based Early Retransmit.",
      "ja": "TCPまたはSCTP送信者は、バイトベースの早期再送信を使用するかもしれません。"
    },
    {
      "indent": 3,
      "text": "Upon the arrival of an ACK, a sender employing byte-based Early Retransmit MUST use the following two conditions to determine when an Early Retransmit is sent:",
      "ja": "ACKの到着時に、バイトベースの早期再送信を用いた送信者は、早期再送が送信される時を決定するために次の2つの条件を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "(2.a) The amount of outstanding data (ownd) -- data sent but not yet acknowledged -- is less than 4*SMSS bytes (as defined in [RFC5681]).",
      "ja": "（2.A）未処理データの量は、（ownd） - 未送信が、データは認め - （[RFC5681]で定義されるように）4未満*のSMSSバイトです。"
    },
    {
      "indent": 9,
      "text": "Note that in the byte-based variant of Early Retransmit, \"ownd\"\nis equivalent to \"FlightSize\" (defined in [RFC5681]).  We use\ndifferent notation, because \"ownd\" is not consistent with\nFlightSize throughout this document.",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Also note that in SCTP, messages will have to be converted to bytes to make this variant of Early Retransmit work.",
      "ja": "またSCTPで、メッセージは早期再送の仕事のこのバリアントを作るためにバイトに変換する必要がありますのでご注意。"
    },
    {
      "indent": 3,
      "text": "(2.b) There is either no unsent data ready for transmission at the sender, or the advertised receive window does not permit new segments to be transmitted.",
      "ja": "（2.B）送信側の伝送のための準備ができて未送信データのいずれかが存在しない、または広告ウィンドウが送信される新しいセグメントを許可しない受信。"
    },
    {
      "indent": 3,
      "text": "When the above two conditions hold and a TCP connection does not support SACK, the duplicate ACK threshold used to trigger a retransmission MUST be reduced to:",
      "ja": "上記2つの条件が保持し、TCP接続がSACKをサポートしていない場合には、再送をトリガするために使用され、重複ACKしきい値はに減少させなければなりません。"
    },
    {
      "indent": 16,
      "text": "ER_thresh = ceiling (ownd/SMSS) - 1 (1)",
      "ja": "ER_thresh =天井（ownd / SMSS） -  1（1）"
    },
    {
      "indent": 3,
      "text": "duplicate ACKs, where ownd is expressed in terms of bytes. We call this reduced ACK threshold enabling \"Early Retransmission\".",
      "ja": "owndはバイトで表現されたACKを、複製。私たちは、「早期再送信」を有効にするこの減少ACKしきい値を呼び出します。"
    },
    {
      "indent": 3,
      "text": "When conditions (2.a) and (2.b) hold and a TCP connection does support SACK or SCTP is in use, Early Retransmit MUST be used only when \"ownd - SMSS\" bytes have been SACKed.",
      "ja": "「 -  SMSS ownd」バイトが解雇されている条件は、（2.A）及び（2.B）を保持し、TCP接続がサポートSACKをしたりSCTPを使用している場合には、早期の再送信をする場合にのみ使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "If either (or both) condition (2.a) and/or (2.b) does not hold, the transport MUST NOT use Early Retransmit, but rather prefer the standard mechanisms, including fast retransmit and limited transmit.",
      "ja": "どちらか（あるいは両方）の条件（2.A）および/または（2.B）が保持していない場合は、輸送は早期再送信を使用するのではなく、高速再送と限定された送信などの標準メカニズムを、好むてはなりません。"
    },
    {
      "indent": 3,
      "text": "As noted above, the drawback of this byte-based variant is precision [HB08]. We illustrate this with two examples:",
      "ja": "上述したように、このバイトベースの変異体の欠点は、精度[HB08]です。我々は2つの例を挙げてこれを説明します："
    },
    {
      "indent": 6,
      "text": "+ Consider a non-SACK TCP sender that uses an SMSS of 1460 bytes and transmits three segments, each with 400 bytes of payload. This is a case where Early Retransmit could aid loss recovery if one segment is lost. However, in this case, ER_thresh will become zero, per Equation (1), because the number of outstanding bytes is a poor estimate of the number of outstanding segments. A similar problem occurs for senders that employ SACK, as the expression \"ownd - SMSS\" will become negative.",
      "ja": "+ 1460バイトのSMSSを使用し、三つのセグメント、ペイロードの400バイトのそれぞれを送信非SACKのTCPセンダを考えます。これは、1つのセグメントが失われた場合の早期再送信は、損失回復を支援することができそうです。未処理のバイト数が未処理セグメントの数の不十分な推定値であるので、この場合には、ER_threshは、式（1）につき、ゼロになるであろう。マイナスになるだろう - と同様の問題が発現「SMSSをownd」として、SACKを採用して送信者のために発生します。"
    },
    {
      "indent": 6,
      "text": "+ Next, consider a non-SACK TCP sender that uses an SMSS of 1460 bytes and transmits 10 segments, each with 400 bytes of payload. In this case, ER_thresh will be 2 per Equation (1). Thus, even though there are enough segments outstanding to trigger fast retransmit with the standard duplicate ACK threshold, Early Retransmit will be triggered. This could cause or exacerbate performance problems caused by segment reordering in the network.",
      "ja": "+次に、1460バイトのSMSSを使用し、10個のセグメント、ペイロードの400バイトのそれぞれを送信非SACKのTCPセンダを考えます。この場合、ER_threshは、式ごとに2（1）となります。このように、標準の重複ACKの閾値と、高速再送信をトリガするために優れた十分なセグメントがあるにもかかわらず、早期の再送信がトリガされます。これは、ネットワーク内の並べ替えセグメントによるパフォーマンスの問題を引き起こしたり悪化させる可能性があります。"
    },
    {
      "indent": 0,
      "text": "3.2. Segment-Based Early Retransmit",
      "section_title": true,
      "ja": "3.2. セグメントベースの早期再送信"
    },
    {
      "indent": 3,
      "text": "A TCP or SCTP sender MAY use segment-based Early Retransmit.",
      "ja": "TCPまたはSCTP送信者は、セグメントベースの早期再送信を使用するかもしれません。"
    },
    {
      "indent": 3,
      "text": "Upon the arrival of an ACK, a sender employing segment-based Early Retransmit MUST use the following two conditions to determine when an Early Retransmit is sent:",
      "ja": "ACKの到着時に、セグメントベースの早期再送信を用いた送信者は、早期再送が送信される時を決定するために次の2つの条件を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "(3.a) The number of outstanding segments (oseg) -- segments sent but not yet acknowledged -- is less than four.",
      "ja": "（3.A）非凡セグメント（oseg）の数 - セグメントの送信が、まだ確認されない - は4未満です。"
    },
    {
      "indent": 3,
      "text": "(3.b) There is either no unsent data ready for transmission at the sender, or the advertised receive window does not permit new segments to be transmitted.",
      "ja": "（3.B）送信側の伝送のための準備ができて未送信データのいずれかが存在しない、または広告ウィンドウが送信される新しいセグメントを許可しない受信。"
    },
    {
      "indent": 3,
      "text": "When the above two conditions hold and a TCP connection does not support SACK, the duplicate ACK threshold used to trigger a retransmission MUST be reduced to:",
      "ja": "上記2つの条件が保持し、TCP接続がSACKをサポートしていない場合には、再送をトリガするために使用され、重複ACKしきい値はに減少させなければなりません。"
    },
    {
      "indent": 18,
      "text": "ER_thresh = oseg - 1 (2)",
      "ja": "ER_thresh = oseg  -  1（2）"
    },
    {
      "indent": 3,
      "text": "duplicate ACKs, where oseg represents the number of outstanding segments. (We discuss tracking the number of outstanding segments below.) We call this reduced ACK threshold enabling \"Early Retransmission\".",
      "ja": "osegが未解決セグメントの数を表すACKを、複製。 （私たちは、以下の優れたセグメントの数を追跡話し合う。）私たちは、「早期再送信」を有効にするこの減少ACKしきい値を呼び出します。"
    },
    {
      "indent": 3,
      "text": "When conditions (3.a) and (3.b) hold and a TCP connection does support SACK or SCTP is in use, Early Retransmit MUST be used only when \"oseg - 1\" segments have been SACKed. A segment is considered to be SACKed when all of its data bytes (TCP) or data chunks (SCTP) have been indicated as arrived by the receiver.",
      "ja": "「 -  1 oseg」セグメントは解雇されている条件は（3.A）及び（3.B）保持し、TCP接続をサポートSACKを行い又はSCTPを使用しているとき、初期の再送信は、場合にのみ使用されなければなりません。セグメントは、受信機によって到着したように、そのデータバイト（TCP）またはデータチャンク（SCTP）の全てが示されてきたときに解雇されると考えられます。"
    },
    {
      "indent": 3,
      "text": "If either (or both) condition (3.a) and/or (3.b) does not hold, the transport MUST NOT use Early Retransmit, but rather prefer the standard mechanisms, including fast retransmit and limited transmit.",
      "ja": "どちらか（あるいは両方）の条件（3.A）および/または（3.B）が保持していない場合は、輸送は早期再送信を使用するのではなく、高速再送と限定された送信などの標準メカニズムを、好むてはなりません。"
    },
    {
      "indent": 3,
      "text": "This version of Early Retransmit solves the precision issues discussed in the previous section. As noted previously, the cost is that the implementation will have to track segment boundaries to form an understanding as to how many actual segments have been transmitted, but not acknowledged. This can be done by the sender tracking the boundaries of the three segments on the right side of the current window (which involves tracking four sequence numbers in TCP). This could be done by keeping a circular list of the segment boundaries, for instance. Cumulative ACKs that do not fall within this region indicate that at least four segments are outstanding, and therefore Early Retransmit MUST NOT be used. When the outstanding window becomes small enough that Early Retransmit can be invoked, a full understanding of the number of outstanding segments will be available from the four sequence numbers retained. (Note: the implicit sequence number consumed by the TCP FIN bit can also be included in the tracking of segment boundaries.)",
      "ja": "早期再送信のこのバージョンは、前のセクションで説明した精度の問題を解決します。前述のように、コストは実装が送信されたどのように多くの実際のセグメントへと理解を形成するために、セグメント境界を追跡する必要があることですが、認められません。これは、（TCPの4つのシーケンス番号を追跡することを含む）現在のウィンドウの右側にある3つのセグメントの境界を追跡する送信者によって行うことができます。これは、例えば、セグメント境界の循環リストを維持することによって行うことができます。この地域内に入らない累積ACKは、少なくとも4つのセグメントが未解決であることを示しているので、初期の再送信を使用してはいけません。優れたウィンドウが早期再送を呼び出すことができることを十分に小さくなると、優れたセグメントの数の完全な理解が保持さ4つのシーケンス番号から利用できるようになります。 （注：TCP FINビットによって消費される暗黙のシーケンス番号は、セグメント境界の追跡に含めることができます。）"
    },
    {
      "indent": 0,
      "text": "4. Discussion",
      "section_title": true,
      "ja": "4。討議"
    },
    {
      "indent": 3,
      "text": "In this section, we discuss a number of issues surrounding the Early Retransmit algorithm.",
      "ja": "このセクションでは、我々は早期再送アルゴリズムを取り巻く多くの問題を議論します。"
    },
    {
      "indent": 0,
      "text": "4.1. SACK vs. Non-SACK",
      "section_title": true,
      "ja": "4.1. 非SACK対SACK"
    },
    {
      "indent": 3,
      "text": "The SACK variant of the Early Retransmit algorithm is preferred to the non-SACK variant in TCP due to its robustness in the face of ACK loss (since SACKs are sent redundantly), and due to interactions with the delayed ACK timer (SCTP does not have a non-SACK mode and therefore naturally supports SACK-based Early Retransmit). Consider a flight of three segments, S1...S3, with S2 being dropped by the network. When S1 arrives, it is in order, and so the receiver may or may not delay the ACK, leading to two scenarios:",
      "ja": "早期再送信アルゴリズムのSACK変異体は（袋が冗長送信されるので）、そしてによる遅延ACKタイマとの相互作用（SCTPが持っていないことによるACK損失の面でのロバスト性にTCP非SACK変異体に好ましいですしたがって、非SACKモードとは、自然SACKベースの早期再送信をサポートしています）。 S2がネットワークによって廃棄されると、三つのセグメント、S1···S3の飛行を考えます。 S1が到着すると、それがオーダーであり、そのため受信機は、又は2つのシナリオに至る、ACKを遅延してもしなくてもよいです。"
    },
    {
      "indent": 3,
      "text": "(A) The ACK for S1 is delayed: In this case, the arrival of S3 will trigger an ACK to be transmitted, covering S1 (which was previously unacknowledged). In this case, Early Retransmit without SACK will not prevent an RTO because no duplicate ACKs will arrive. However, with SACK, the ACK for S1 will also include SACK information indicating that S3 has arrived at the receiver. The sender can then invoke Early Retransmit on this ACK because only one segment remains outstanding.",
      "ja": "（A）S1に対するACKが遅延される。この場合には、S3の到着は、（以前に未確認であった）S1を覆う、送信すべきACKをトリガします。重複ACKが到着しませんので、この場合、SACKなしの早期再送信は、RTOを防ぐことはできません。しかし、SACKと、S1に対するACKもS3が受信機に到着したことを示すSACK情報を含むであろう。唯一つのセグメントが優れ残っているため、送信者は、このACKに早期再送信を呼び出すことができます。"
    },
    {
      "indent": 3,
      "text": "(B) The ACK for S1 is not delayed: In this case, the arrival of S1 triggers an ACK of previously unacknowledged data. The arrival of S3 triggers a duplicate ACK (because it is out of order). Both ACKs will cover the same segment (S1). Therefore, regardless of whether SACK is used, Early Retransmit can be performed by the sender (assuming no ACK loss).",
      "ja": "（B）S1に対するACKが遅延されていない。この場合には、S1の到着は、以前に未確認データのACKをトリガします。 （それが故障しているので）S3の到着は重複ACKをトリガします。両方のACKは同じセグメント（S1）をカバーします。したがって、関係なく、SACKを使用するかどうかの、初期の再送信は、（無ACK損失を仮定しない）送信者によって行うことができます。"
    },
    {
      "indent": 0,
      "text": "4.2. Segment Reordering",
      "section_title": true,
      "ja": "4.2. セグメントの順序変更"
    },
    {
      "indent": 3,
      "text": "Early Retransmit is less robust in the face of reordered segments than when using the standard fast retransmit threshold. Research shows that a general reduction in the number of duplicate ACKs required to trigger fast retransmit to two (rather than three) leads to a reduction in the ratio of good to bad retransmits by a factor of three [Pax97]. However, this analysis did not include the additional conditioning on the event that the ownd was smaller than four segments and that no new data was available for transmission.",
      "ja": "早期再送信は、標準の高速再送しきい値を使用する場合より並べ替えセグメントの顔にはあまり強固です。研究は、三[Pax97】倍悪い再送に対して良好の割合を低減することが必要な重複ACKの数の一般的な減少は、2つの（よりむしろ3つ）に高速再送信をトリガすることを示しています。しかし、この分析はowndが4つのセグメントよりも小さかったし、新しいデータが伝送のために利用できなかったということをイベントに関する追加のコンディショニングが含まれていませんでした。"
    },
    {
      "indent": 3,
      "text": "A number of studies have shown that network reordering is not a rare event across some network paths. Various measurement studies have shown that reordering along most paths is negligible, but along certain paths can be quite prevalent [Pax97, BPS99, BS02, Pir05]. Evaluating Early Retransmit in the face of real segment reordering is part of the experiment we hope to instigate with this document.",
      "ja": "多くの研究は、ネットワークリオーダリングは、いくつかのネットワーク・パスを横切る稀な事象ではないことを示しています。様々な測定研究が最も経路に沿って並べ替えが無視できる程度であることが示されているが、特定の経路に沿って非常に優勢であることができる[Pax97、BPS99、BS02、Pir05]。実際のセグメントの並べ替えに直面して早期の再送を評価する私たちは、この文書を扇動したいと考えていた実験の一部です。"
    },
    {
      "indent": 0,
      "text": "4.3. Worst Case",
      "section_title": true,
      "ja": "4.3. 最悪の場合"
    },
    {
      "indent": 3,
      "text": "Next, we note two \"worst case\" scenarios for Early Retransmit:",
      "ja": "次に、我々は早期再送信用の2つの「最悪の場合」のシナリオの点に注意してください。"
    },
    {
      "indent": 3,
      "text": "(1) Persistent reordering of segments coupled with an application that does not constantly send data can result in large numbers of needless retransmissions when using Early Retransmit. For instance, consider an application that sends data two segments at a time, followed by an idle period when no data is queued for delivery. If the network consistently reorders the two segments, the sender will needlessly retransmit one out of every two unique segments transmitted when using the above algorithm (meaning that one-third of all segments sent are needless retransmissions). However, this would only be a problem for long-lived connections from applications that transmit in spurts.",
      "ja": "常に早期再送信を使用するときに不必要再送大量にもたらすことができるデータを送信しないアプリケーションに結合されたセグメントの（1）永続的な並べ替え。例えば、データが配信のためにキューに入れられていないアイドル期間に続いてデータ一度に2つのセグメントを送信するアプリケーションを考えます。ネットワークは、一貫して二つのセグメントを並べ替えた場合、送信側は不上記のアルゴリズムを使用するときに送信される毎に2つのユニークなセグメント（送信されたすべてのセグメントの三分の一が不要再送信であることを意味する）のうちいずれかを再送信します。しかし、これが唯一の猛烈に送信するアプリケーションからの長命の接続のための問題だろう。"
    },
    {
      "indent": 3,
      "text": "(2) Similar to the above, consider the case of that consist of two segment each and always experience reordering. Just as in (1) above, one out of every two unique data segments will be retransmitted needlessly; therefore, one-third of the traffic will be spurious.",
      "ja": "（2）上記と同様に、その場合は、2つのセグメントの各々からなり、常に並べ替えを経験考えます。ちょうど上記（1）、各2つの一意のデータ・セグメントのうち一方は不再送信されると同様に、従って、トラフィックの三分の一は、スプリアスであろう。"
    },
    {
      "indent": 3,
      "text": "Currently, this document offers no suggestion on how to mitigate the above problems. However, the worst cases are likely pathological. Part of the experiments that this document hopes to trigger would involve better understanding of whether such theoretical worst-case scenarios are prevalent in the network, and in general, to explore the trade-off between spurious fast retransmits and the delay imposed by the RTO. Appendix A does offer a survey of possible mitigations that call for curtailing the use of Early Retransmit when it is making poor retransmission decisions.",
      "ja": "現在、このドキュメントでは、上記の問題を軽減する方法については示唆を提供しています。しかし、最悪の場合は、病的可能性があります。このドキュメントは、トリガしたいと考えている実験の一部は、このような理論的な最悪のシナリオは、ネットワークに蔓延している、と一般的には、スプリアスの高速再送とRTOによって課される遅延とのトレードオフを検討するかどうかのより良い理解を伴うだろう。付録Aは、それが悪い再送意思決定されたときに早期再送信の使用を断つために呼び出すことができ緩和策の調査を提供しません。"
    },
    {
      "indent": 0,
      "text": "5. Related Work",
      "section_title": true,
      "ja": "5.関連研究"
    },
    {
      "indent": 3,
      "text": "There are a number of similar proposals in the literature that attempt to mitigate the same problem that Early Retransmit addresses.",
      "ja": "その早期再送信アドレスと同じ問題を緩和しようとする文献で同様の提案がいくつかあります。"
    },
    {
      "indent": 3,
      "text": "Deployment of Explicit Congestion Notification (ECN) [Flo94, RFC3168] may benefit connections with small congestion window sizes [RFC2884]. ECN provides a method for indicating congestion to the end-host without dropping segments. While some segment drops may still occur,",
      "ja": "明示的輻輳通知（ECN）Flo94、RFC3168]の展開が小さい輻輳ウィンドウサイズ[RFC2884]との接続を利益を得ることができます。 ECNは、セグメントを落とすことなく、エンドホストに輻輳を指示するための方法を提供します。いくつかのセグメントが依然として発生する可能性が低下している間、"
    },
    {
      "indent": 3,
      "text": "ECN may allow a transport to perform better with small congestion window sizes because the sender will be required to detect less segment loss [RFC2884].",
      "ja": "ECNは、送信者が少ないセグメント損失[RFC2884]を検出するのに必要とされるため、輸送が小さい輻輳ウィンドウサイズで良好に機能することを可能にし得ます。"
    },
    {
      "indent": 3,
      "text": "[Bal98] outlines another solution to the problem of having no new segments to transmit into the network when the first two duplicate ACKs arrive. In response to these duplicate ACKs, a TCP sender transmits zero-byte segments to induce additional duplicate ACKs. This method preserves the robustness of the standard fast retransmit algorithm at the cost of injecting segments into the network that do not deliver any data, and therefore are potentially wasting network resources (at a time when there is a reasonable chance that the resources are scarce).",
      "ja": "[Bal98]最初の二つの重複ACKが到着したときにネットワークに送信するために新しいセグメントを有していないの問題に対する別の解決策を概説します。これらの重複ACKに応答して、TCP送信者は、追加の重複ACKを誘導するためにゼロバイトのセグメントを送信します。この方法は、任意のデータを配信していないネットワークにセグメントを注入する費用で、標準的な高速再送アルゴリズムの堅牢性を維持し、したがって、潜在的に（リソースが不足しているという合理的な機会がある時に）ネットワークリソースを浪費しています。"
    },
    {
      "indent": 3,
      "text": "[RFC4653] also defines an orthogonal method for altering the duplicate ACK threshold. The mechanisms proposed in this document decrease the duplicate ACK threshold when a small amount of data is outstanding. Meanwhile, the mechanisms in [RFC4653] increase the duplicate ACK threshold (over the standard of 3) when the congestion window is large in an effort to increase robustness to segment reordering.",
      "ja": "[RFC4653]も重複ACK閾値を変更するための直交方法を定義します。少量のデータが未処理である場合、本文書で提案されているメカニズムは、重複ACK閾値を低下させます。輻輳ウィンドウは、セグメント並べ替えに対するロバスト性を高めるために大きいとき一方、[RFC4653]でのメカニズムは、（3の標準を超える）重複ACK閾値を増加させます。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "The security considerations found in [RFC5681] apply to this document. No additional security problems have been identified with Early Retransmit at this time.",
      "ja": "[RFC5681]で見つかったセキュリティ上の考慮事項は、この文書に適用されます。追加のセキュリティ問題は、この時点で早期再送信と確認されていません。"
    },
    {
      "indent": 0,
      "text": "7. Acknowledgments",
      "section_title": true,
      "ja": "7.謝辞"
    },
    {
      "indent": 3,
      "text": "We thank Sally Floyd for her feedback in discussions about Early Retransmit. The notion of Early Retransmit was originally sketched in an Internet-Draft co-authored by Sally Floyd and Hari Balakrishnan. Armando Caro, Joe Touch, Alexander Zimmermann, and many members of the TSVWG and TCPM working groups provided good discussions that helped shape this document. Our thanks to all!",
      "ja": "私たちは、初期の再送信についての議論で彼女のフィードバックのためのサリーフロイドに感謝します。早期再送信の概念は、もともとインターネットドラフトサリー・フロイドやハリ・バラクリシュナンによる共著でスケッチされました。アルマンドカロ、ジョー・タッチ、アレクサンダー・ツィンマーマン、およびTSVWGとTCPMワーキンググループの多くのメンバーは、この文書を形作る助けた良い議論を提供します。私たちのすべてに感謝！"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8.参照文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC793] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, September 1981.",
      "ja": "[RFC793]ポステル、J.、 \"伝送制御プロトコル\"、STD 7、RFC 793、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC2018] Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP Selective Acknowledgment Options\", RFC 2018, October 1996.",
      "ja": "[RFC2018]マティス、M.、Mahdavi、J.、フロイド、S.、とA. Romanow、 \"TCPの選択確認応答オプション\"、RFC 2018、1996年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2883] Floyd, S., Mahdavi, J., Mathis, M., and M. Podolsky, \"An Extension to the Selective Acknowledgement (SACK) Option for TCP\", RFC 2883, July 2000.",
      "ja": "[RFC2883]フロイド、S.、Mahdavi、J.、マティス、M.、およびM.ポドルスキー、 \"TCPのための選択的確認応答（SACK）オプションの拡張\"、RFC 2883、2000年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC2988] Paxson, V. and M. Allman, \"Computing TCP's Retransmission Timer\", RFC 2988, November 2000.",
      "ja": "[RFC2988]パクソン、V.とM.オールマン、 \"コンピューティングTCPの再送信タイマー\"、RFC 2988、2000年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC3042] Allman, M., Balakrishnan, H., and S. Floyd, \"Enhancing TCP's Loss Recovery Using Limited Transmit\", RFC 3042, January 2001.",
      "ja": "[RFC3042]オールマン、M.、バラクリシュナン、H.、およびS.フロイド、 \"株式会社トランスミットを使用したTCPの損失回復の強化\"、RFC 3042、2001年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC4960] Stewart, R., Ed., \"Stream Control Transmission Protocol\", RFC 4960, September 2007.",
      "ja": "[RFC4960]スチュワート、R.、エド。、 \"ストリーム制御伝送プロトコル\"、RFC 4960、2007年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, September 2009.",
      "ja": "[RFC5681]オールマン、M.、パクソン、V.、およびE.ブラントン、 \"TCP輻輳制御\"、RFC 5681、2009年9月。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[AA02] Urtzi Ayesta, Konstantin Avrachenkov, \"The Effect of the Initial Window Size and Limited Transmit Algorithm on the Transient Behavior of TCP Transfers\", In Proc. of the 15th ITC Internet Specialist Seminar, Wurzburg, July 2002.",
      "ja": "[AA02] Urtzi Ayesta、コンスタンチンAvrachenkov、PROCで、「TCP転送の過渡挙動に関する初期ウィンドウサイズとリミテッド送信アルゴリズムの影響」。第15回ITCインターネットスペシャリストセミナー、ヴュルツブルク、2002年7月の。"
    },
    {
      "indent": 3,
      "text": "[All00] Mark Allman. A Web Server's View of the Transport Layer. ACM Computer Communication Review, October 2000.",
      "ja": "[All00]マークオールマン。トランスポート層のWeb Serverのビュー。 ACMコンピュータコミュニケーションレビュー、2000年10月。"
    },
    {
      "indent": 3,
      "text": "[Bal98] Hari Balakrishnan. Challenges to Reliable Data Transport over Heterogeneous Wireless Networks. Ph.D. Thesis, University of California at Berkeley, August 1998.",
      "ja": "[Bal98]ハリ・バラクリシュナン。ヘテロジニアス無線ネットワーク上で信頼性の高いデータ転送に挑戦。博士論文、バークレー、1998年8月にカリフォルニア大学。"
    },
    {
      "indent": 3,
      "text": "[BPS+98] Hari Balakrishnan, Venkata Padmanabhan, Srinivasan Seshan, Mark Stemm, and Randy Katz. TCP Behavior of a Busy Web Server: Analysis and Improvements. Proc. IEEE INFOCOM Conf., San Francisco, CA, March 1998.",
      "ja": "[BPS + 98]ハリ・バラクリシュナン、ヴェンカタPadmanabhan、スリニバサン・セシャン、マークStemm、およびランディカッツ。忙しいWebサーバのTCPの挙動：分析と改善。 PROC。 IEEE INFOCOMコンファレンス。、サンフランシスコ、CA、1998年3月。"
    },
    {
      "indent": 3,
      "text": "[BPS99] Jon Bennett, Craig Partridge, Nicholas Shectman. Packet Reordering is Not Pathological Network Behavior. IEEE/ACM Transactions on Networking, December 1999.",
      "ja": "[BPS99]ジョン・ベネット、クレイグ・パートリッジ、ニコラスShectman。パケットの並べ替えは、病理学的ネットワークの動作ではありません。ネットワーキング、1999年12月にIEEE / ACM取引。"
    },
    {
      "indent": 3,
      "text": "[BS02] John Bellardo, Stefan Savage. Measuring Packet Reordering, ACM/USENIX Internet Measurement Workshop, November 2002.",
      "ja": "[BS02]ジョンBellardo、ステファン・サベージ。パケットの順序変更、ACM / USENIXインターネット測定ワークショップ、2002年11月の測定。"
    },
    {
      "indent": 3,
      "text": "[FF96] Kevin Fall, Sally Floyd. Simulation-based Comparisons of Tahoe, Reno, and SACK TCP. ACM Computer Communication Review, July 1996.",
      "ja": "[FF96]ケビン秋、サリーフロイド。タホ、リノ、およびSACK TCPのシミュレーションベースの比較。 ACMコンピュータコミュニケーションレビュー、1996年7月。"
    },
    {
      "indent": 3,
      "text": "[Flo94] Sally Floyd. TCP and Explicit Congestion Notification. ACM Computer Communication Review, October 1994.",
      "ja": "【Flo94]サリー・フロイド。 TCPと明示的輻輳通知。 ACMコンピュータコミュニケーションレビュー、1994年10月。"
    },
    {
      "indent": 3,
      "text": "[HB08] Per Hurtig, Anna Brunstrom. Enhancing SCTP Loss Recovery: An Experimental Evaluation of Early Retransmit. Elsevier Computer Communications, Vol. 31(16), October 2008, pp. 3778-3788.",
      "ja": "[HB08]パーHurtig、アンナBrunstrom。強化SCTPの損失回復：早期再送信の実験的評価。エルゼビアコンピュータ通信、巻。 31（16）、2008年10月、頁3778から3788まで。"
    },
    {
      "indent": 3,
      "text": "[Jac88] Van Jacobson. Congestion Avoidance and Control. ACM SIGCOMM 1988.",
      "ja": "【Jac88]バン・ジェイコブソン。輻輳回避とコントロール。 ACM SIGCOMM 1988。"
    },
    {
      "indent": 3,
      "text": "[LK98] Dong Lin, H.T. Kung. TCP Fast Recovery Strategies: Analysis and Improvements. Proc. IEEE INFOCOM Conf., San Francisco, CA, March 1998.",
      "ja": "[LK98]ドンリン、H.T.クン。 TCP高速リカバリ戦略：分析と改善。 PROC。 IEEE INFOCOMコンファレンス。、サンフランシスコ、CA、1998年3月。"
    },
    {
      "indent": 3,
      "text": "[Mor97] Robert Morris. TCP Behavior with Many Flows. Proc. Fifth IEEE International Conference on Network Protocols, October 1997.",
      "ja": "[Mor97]ロバート・モリス。多くのフローとTCPの動作。 PROC。ネットワークプロトコル、1997年10月に第五IEEE国際会議。"
    },
    {
      "indent": 3,
      "text": "[Pax97] Vern Paxson. End-to-End Internet Packet Dynamics. ACM SIGCOMM, September 1997.",
      "ja": "【Pax97]バーン・パクソン。エンドツーエンドのインターネットパケットダイナミクス。 ACM SIGCOMM、1997年9月。"
    },
    {
      "indent": 3,
      "text": "[Pir05] N. M. Piratla, \"A Theoretical Foundation, Metrics and Modeling of Packet Reordering and Methodology of Delay Modeling using Inter-packet Gaps,\" Ph.D. Dissertation, Department of Electrical and Computer Engineering, Colorado State University, Fort Collins, CO, Fall 2005.",
      "ja": "【Pir05】N. M. Piratla、「理論的基礎、メトリックおよびパケットの並べ替えと遅延モデル化の手法のモデリングインターパケットギャップを使用して、」博士論文、電気およびコンピュータ工学科、コロラド州立大学、フォートコリンズ、COは、2005年秋。"
    },
    {
      "indent": 3,
      "text": "[RFC2884] Hadi Salim, J. and U. Ahmed, \"Performance Evaluation of Explicit Congestion Notification (ECN) in IP Networks\", RFC 2884, July 2000.",
      "ja": "[RFC2884]ハディサリム、J.およびU.アーメド、 \"IPネットワークにおける明示的輻輳通知の性能評価（ECN）\"、RFC 2884、2000年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC3150] Dawkins, S., Montenegro, G., Kojo, M., and V. Magret, \"End-to-end Performance Implications of Slow Links\", BCP 48, RFC 3150, July 2001.",
      "ja": "[RFC3150]ドーキンス、S.、モンテネグロ、G.、古城、M.、およびV. Magret、 \"低速リンクのエンド・ツー・エンドのパフォーマンスへの影響\"、BCP 48、RFC 3150、2001年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, September 2001.",
      "ja": "\"IPに明示的輻輳通知の添加（ECN）\" [RFC3168]ラマクリシュナン、K.、フロイド、S.、およびD.ブラック、RFC 3168、2001年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC3517] Blanton, E., Allman, M., Fall, K., and L. Wang, \"A Conservative Selective Acknowledgment (SACK)-based Loss Recovery Algorithm for TCP\", RFC 3517, April 2003.",
      "ja": "[RFC3517]ブラントン、E.、オールマン、M.、秋、K.、およびL.王は、 \"保守的な選択的確認応答（SACK）はTCPのために損失回復アルゴリズムをベース\"、RFC 3517、2003年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC3522] Ludwig, R. and M. Meyer, \"The Eifel Detection Algorithm for TCP\", RFC 3522, April 2003.",
      "ja": "[RFC3522]ルートヴィヒ、R.及びM.マイヤー、 \"TCPのためのアイフェル検出アルゴリズム\"、RFC 3522、2003年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC3782] Floyd, S., Henderson, T., and A. Gurtov, \"The NewReno Modification to TCP's Fast Recovery Algorithm\", RFC 3782, April 2004.",
      "ja": "[RFC3782]フロイド、S.、ヘンダーソン、T.、およびA. Gurtov、RFC 3782、2004年4月 \"TCPの高速回復アルゴリズムにNewRenoの変更\"。"
    },
    {
      "indent": 3,
      "text": "[RFC4653] Bhandarkar, S., Reddy, A., Allman, M., and E. Blanton, \"Improving the Robustness of TCP to Non-Congestion Events\", RFC 4653, August 2006.",
      "ja": "[RFC4653] Bhandarkarの、S.、レディ、A.、オールマン、M.、およびE.ブラントン、 \"非輻輳イベントへのTCPの頑健性を向上させる\"、RFC 4653、2006年8月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Research Issues in Adjusting the Duplicate ACK Threshold",
      "ja": "付録A.研究課題の重複ACKのしきい値の調整で"
    },
    {
      "indent": 3,
      "text": "Decreasing the number of duplicate ACKs required to trigger fast retransmit, as suggested in Section 3, has the drawback of making fast retransmit less robust in the face of minor network reordering. Two egregious examples of problems caused by reordering are given in Section 4. This appendix outlines several schemes that have been suggested to mitigate the problems caused by Early Retransmit in the face of segment reordering. These methods need further research before they are suggested for general use (and current consensus is that the cases that make Early Retransmit unnecessarily retransmit a large amount of data are pathological, and therefore, these mitigations are not generally required).",
      "ja": "第3節で提案されているように、高速再送をトリガするために必要な重複ACKの数を減らす、マイナーネットワークの並べ替えの顔にはあまり堅牢な高速再送を作るという欠点を有します。並べ替えによって引き起こされる問題の二つの悪質な例は、第4節で与えられたこの付録では、セグメント並べ替えに直面して早期の再送信によって引き起こされる問題を軽減することが示唆されているいくつかの手法を概説しています。彼らは一般的な使用のために提案される前に、これらの方法には、さらなる研究が必要で（そして現在のコンセンサスは早期再送信は、不必要に大量のデータを再送させる場合は、病理学的であり、したがって、これらの緩和策は、一般的に必要とされていないということです）。"
    },
    {
      "indent": 3,
      "text": "MITIGATION A.1: Allow a connection to use Early Retransmit as long as the algorithm is not injecting \"too much\" spurious data into the network. For instance, using the information provided by TCP's D-SACK option [RFC2883] or SCTP's Duplicate Transmission Sequence Number (Duplicate-TSN) notification, a sender can determine when segments sent via Early Retransmit are needless. Likewise, using Eifel [RFC3522], the sender can detect spurious Early Retransmits. Once spurious Early Retransmits are detected, the sender can either eliminate the use of Early Retransmit, or limit the use of the algorithm to ensure that an acceptably small fraction of the connection's transmissions are not spurious. For example, a connection could stop using Early Retransmit after the first spurious retransmit is detected.",
      "ja": "緩和のA.1：アルゴリズムがネットワークに「あまりにも多くの」偽のデータを注入されていないと、接続が限り早期再送信を使用することを許可します。初期の再送信を介して送信されたセグメントが不要である場合、例えば、TCPのD-SACKオプション[RFC2883]またはSCTPの重複送信シーケンス番号（重複-TSN）通知によって提供される情報を使用して、送信者が決定することができます。同様に、アイフェル[RFC3522]を使用して、送信者が偽の早期再送信を検出することができます。スプリアス早期再送信が検出されると、送信者は早期再送信の使用を排除し、または接続の送信の許容可能なごく一部が偽でないことを確実にするためのアルゴリズムの使用を制限することができます。例えば、接続は、最初のスプリアス再送が検出された後の早期再送信を使用して停止する可能性があります。"
    },
    {
      "indent": 3,
      "text": "MITIGATION A.2: If a sender cannot reliably determine whether an Early-Retransmitted segment is spurious or not, the sender could simply limit Early Retransmits, either to some fixed number per connection (e.g., Early Retransmit is allowed only once per connection), or to some small percentage of the total traffic being transmitted.",
      "ja": "緩和のA.2：送信者が確実に早期再送セグメントが偽であるか否かを判断できない場合、送信者は、単に（例えば、早期再送信は一度だけ接続ごとに許可されている）のいずれか、いくつかの固定された数の接続ごとに、初期の再送信を制限することができ、または総トラフィックのいくつかの小さな割合に送信されます。"
    },
    {
      "indent": 3,
      "text": "MITIGATION A.3: Allow a connection to trigger Early Retransmit using the criteria given in Section 3, in addition to a \"small\" timeout [Pax97]. For instance, a sender may have to wait for two duplicate ACKs and then T msec before Early Retransmit is invoked. The added time gives reordered acknowledgments time to arrive at the sender and avoid a needless retransmit. Designing a method for choosing an appropriate timeout is part of the research that would need to be involved in this scheme.",
      "ja": "緩和のA.3：「小さな」タイムアウト[Pax97]に加えて、第3節で与えられた基準を使用して初期の再送信をトリガするために、接続を許可します。例えば、送信者は2つの重複ACKを待つ必要があり、初期の再送信が呼び出される前にTはミリ秒。追加の時間は、送信側に到着すると、不要な再送信を回避するために、並べ替えの確認応答時間を与えます。適切なタイムアウトを選択するための方法を設計することは、このスキームに関与することが必要となる研究の一環です。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Mark Allman International Computer Science Institute 1947 Center Street, Suite 600 Berkeley, CA 94704-1198 USA Phone: 440-235-1792 EMail: mallman@icir.org http://www.icir.org/mallman/",
      "ja": "マーク・オールマン国際コンピュータサイエンス研究所1947センターストリート、スイート600バークレー、CA 94704から1198 USA電話：440-235-1792 Eメール：mallman@icir.org http://www.icir.org/mallman/"
    },
    {
      "indent": 3,
      "text": "Konstantin Avrachenkov INRIA 2004 route des Lucioles, B.P.93 06902, Sophia Antipolis France Phone: 00 33 492 38 7751 EMail: k.avrachenkov@sophia.inria.fr http://www-sop.inria.fr/members/Konstantin.Avratchenkov/me.html",
      "ja": "コンスタンチンAvrachenkov INRIA 2004ルートデLucioles、BP93 06902、ソフィアアンティポリス、フランス電話：00 38 33 492 7751 Eメール：k.avrachenkov@sophia.inria.fr http://www-sop.inria.fr/members/Konstantin.Avratchenkov /me.html"
    },
    {
      "indent": 3,
      "text": "Urtzi Ayesta BCAM-IKERBASQUE LAAS-CNRS Bizkaia Technology Park, Building 500 7 Avenue Colonel Roche 48160 Derio 31077, Toulouse Spain France EMail: urtzi@laas.fr http://www.laas.fr/~urtzi",
      "ja": "Urtzi Ayesta BCAM-IKERBASQUE Laasの-CNRS BIZKAIAテクノロジーパーク、ビル500 7アベニュー大佐ロシュ48160 31077デリオ、スペイントゥールーズフランスEメール：urtzi@laas.fr http://www.laas.fr/~urtzi"
    },
    {
      "indent": 3,
      "text": "Josh Blanton Ohio University 301 Stocker Center Athens, OH 45701 USA EMail: jblanton@irg.cs.ohiou.edu",
      "ja": "ジョシュ・ブラントンオハイオ大学301ストッカーセンターアテネ、OH 45701 USA電子メール：blanton@irg.cs.ohiou.edu"
    },
    {
      "indent": 3,
      "text": "Per Hurtig Karlstad University Department of Computer Science Universitetsgatan 2 651 88 Karlstad Sweden EMail: per.hurtig@kau.se",
      "ja": "コンピュータサイエンスUniversitetsgatanのあたりHurtigカールスタード大学学部2 651 88カールスタード、スウェーデンEメール：per.hurtig@kau.se"
    }
  ]
}