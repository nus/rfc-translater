{
  "title": {
    "text": "RFC 5320 - The Subnetwork Encapsulation and Adaptation Layer (SEAL)",
    "ja": "RFC 5320 - サブネットワークのカプセル化とアダプテーション層（SEAL）"
  },
  "number": 5320,
  "created_at": "2019-10-26 05:36:28.069091+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                   F. Templin, Ed.\nRequest for Comments: 5320                  Boeing Research & Technology\nCategory: Experimental                                     February 2010\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 8,
      "text": "The Subnetwork Encapsulation and Adaptation Layer (SEAL)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "For the purpose of this document, subnetworks are defined as virtual topologies that span connected network regions bounded by encapsulating border nodes. These virtual topologies may span multiple IP and/or sub-IP layer forwarding hops, and can introduce failure modes due to packet duplication and/or links with diverse Maximum Transmission Units (MTUs). This document specifies a Subnetwork Encapsulation and Adaptation Layer (SEAL) that accommodates such virtual topologies over diverse underlying link technologies.",
      "ja": "本文書の目的のために、サブネットワークは、境界ノードをカプセル化することによって境界付け接続されたネットワーク領域にまたがる仮想トポロジとして定義されます。これらの仮想トポロジは、複数のIPおよび/またはサブIPレイヤ転送ホップに及ぶことができ、複製および/または多様な最大伝送単位（MTUの）とのリンクをパケットに起因する故障モードを導入することができます。この文書では、サブネットワークのカプセル化と多様な基本的なリンク技術の上に、仮想トポロジーを収容しアダプテーション層（シール）を指定します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、検査、実験的な実装、および評価のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document defines an Experimental Protocol for the Internet community. This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "この文書は、インターネットコミュニティのためにExperimentalプロトコルを定義します。これは、独立して、他のRFCストリームの、RFCシリーズへの貢献です。 RFC Editorはその裁量でこの文書を公開することを選択し、実装や展開のためにその値についての声明を出すていません。 RFC編集者によって公表のために承認されたドキュメントは、インターネット標準の任意のレベルの候補ではありません。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc5320.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc5320で取得することができます。"
    },
    {
      "indent": 0,
      "text": "IESG Note",
      "ja": "IESG注意"
    },
    {
      "indent": 3,
      "text": "This RFC is not a candidate for any level of Internet Standard. The IETF disclaims any knowledge of the fitness of this RFC for any purpose and in particular notes that the decision to publish is not based on IETF review for such things as security, congestion control, or inappropriate interaction with deployed protocols. The RFC Editor has chosen to publish this document at its discretion. Readers of this document should exercise caution in evaluating its value for implementation and deployment. See RFC 3932 for more information.",
      "ja": "このRFCはインターネットStandardのどんなレベルの候補ではありません。 IETFは、いかなる目的のためにと、公開する決定が展開されたプロトコルとセキュリティ、輻輳制御、または不適切な相互作用のようなもののためにIETFレビューに基づいていない特定のノートに、このRFCのフィットネスの知識を負いません。 RFC Editorはその裁量でこの文書を公開することを選択しました。このドキュメントの読者は実現と展開のためにその値を評価する際に警戒する必要があります。詳細については、RFC 3932を参照してください。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2010 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2010 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................4\n   1.1. Motivation .................................................4\n   1.2. Approach ...................................................6\n2. Terminology and Requirements ....................................6\n3. Applicability Statement .........................................7\n4. SEAL Protocol Specification - Tunnel Mode .......................8\n   4.1. Model of Operation .........................................8\n   4.2. ITE Specification .........................................10\n        4.2.1. Tunnel Interface MTU ...............................10\n        4.2.2. Accounting for Headers .............................11\n        4.2.3. Segmentation and Encapsulation .....................12\n        4.2.4. Sending Probes .....................................14\n        4.2.5. Packet Identification ..............................15\n        4.2.6. Sending SEAL Protocol Packets ......................15\n        4.2.7. Processing Raw ICMPv4 Messages .....................15\n        4.2.8. Processing SEAL-Encapsulated ICMPv4 Messages .......16\n   4.3. ETE Specification .........................................17\n        4.3.1. Reassembly Buffer Requirements .....................17\n        4.3.2. IPv4-Layer Reassembly ..............................17\n        4.3.3. Generating SEAL-Encapsulated ICMPv4\n               Fragmentation Needed Messages ......................18\n        4.3.4. SEAL-Layer Reassembly ..............................19\n        4.3.5. Delivering Packets to Upper Layers .................20\n5. SEAL Protocol Specification - Transport Mode ...................20\n6. Link Requirements ..............................................21\n7. End System Requirements ........................................21\n8. Router Requirements ............................................21\n9. IANA Considerations ............................................21\n10. Security Considerations .......................................21\n11. Related Work ..................................................22\n12. SEAL Advantages over Classical Methods ........................22\n13. Acknowledgments ...............................................24\n14. References ....................................................24\n   14.1. Normative References .....................................24\n   14.2. Informative References ...................................24\nAppendix A. Historic Evolution of PMTUD ...........................27\nAppendix B. Reliability Extensions ................................29",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "As Internet technology and communication has grown and matured, many techniques have developed that use virtual topologies (including tunnels of one form or another) over an actual network that supports the Internet Protocol (IP) [RFC0791][RFC2460]. Those virtual topologies have elements that appear as one hop in the virtual topology, but are actually multiple IP or sub-IP layer hops. These multiple hops often have quite diverse properties that are often not even visible to the endpoints of the virtual hop. This introduces failure modes that are not dealt with well in current approaches.",
      "ja": "インターネット技術と通信が成長し、成熟したように、多くの技術が開発されているインターネットプロトコル（IP）[RFC0791] [RFC2460]をサポートしている実際のネットワーク上で（1つのフォームまたは別のトンネルを含む）仮想トポロジーを使用しています。これらの仮想トポロジは、仮想トポロジ内の1つのホップとして表示される要素を持っていますが、実際には複数のIPまたはサブIPレイヤのホップです。これらの複数のホップは、多くの場合、多くの場合、仮想ホップのエンドポイントにしても表示されていない非常に多様な特性を持っています。これは、現在のアプローチでよく取り扱われていない故障モードを導入しています。"
    },
    {
      "indent": 3,
      "text": "The use of IP encapsulation has long been considered as the means for creating such virtual topologies. However, the insertion of an outer IP header reduces the effective path MTU as-seen by the IP layer. When IPv4 is used, this reduced MTU can be accommodated through the use of IPv4 fragmentation, but unmitigated in-the-network fragmentation has been found to be harmful through operational experience and studies conducted over the course of many years [FRAG][FOLK][RFC4963]. Additionally, classical path MTU discovery [RFC1191] has known operational issues that are exacerbated by in-the-network tunnels [RFC2923][RFC4459]. In the following subsections, we present further details on the motivation and approach for addressing these issues.",
      "ja": "IPカプセル化の使用は、長い間、このような仮想トポロジを作成するための手段として考えられてきました。 IP層で見られるように、しかし、外側のIPヘッダの挿入が有効なパスMTUを減少させます。 IPv4のが使用されている場合は、この減少したMTUは、IPv4の断片化を使用して収容することができますが、紛れもないで、ネットワークの断片化は、長年にわたって行って運用経験と研究によって有害で​​あることが判明している[FRAG] [FOLK] [RFC4963]。また、古典パスMTU探索[RFC1191]は、イン・ネットワークのトンネル[RFC2923] [RFC4459]によって悪化している運用上の問題を知られています。以下のサブセクションでは、我々は、これらの問題に対処するための動機とアプローチの詳細を提示します。"
    },
    {
      "indent": 0,
      "text": "1.1. Motivation",
      "section_title": true,
      "ja": "1.1。動機"
    },
    {
      "indent": 3,
      "text": "Before discussing the approach, it is necessary to first understand the problems. In both the Internet and private-use networks today, IPv4 is ubiquitously deployed as the Layer 3 protocol. The two primary functions of IPv4 are to provide for 1) addressing, and 2) a fragmentation and reassembly capability used to accommodate links with diverse MTUs. While it is well known that the addressing properties of IPv4 are limited (hence, the larger address space provided by IPv6), there is a lesser-known but growing consensus that other limitations may be unable to sustain continued growth.",
      "ja": "アプローチを議論する前に、まず問題を理解することが必要です。インターネットとプライベート利用のネットワークの両方今日では、IPv4のは、普遍的に、レイヤ3プロトコルとして展開されています。 IPv4の2つの主要な機能は、1を提供することである）アドレッシング、及び2）断片化および再アセンブリ機能が多様のMTUとのリンクを収容するために使用されます。それはウェルのIPv4のアドレス指定特性が制限されていることが知られているが（したがって、IPv6のによって提供される大きなアドレス空間）は、他の制限は、継続的な成長を維持することができませんことは、あまり知られているが、成長コンセンサスがあります。"
    },
    {
      "indent": 3,
      "text": "First, the IPv4 header Identification field is only 16 bits in length, meaning that at most 2^16 packets pertaining to the same (source, destination, protocol, Identification)-tuple may be active in the Internet at a given time. Due to the escalating deployment of high-speed links (e.g., 1Gbps Ethernet), however, this number may soon become too small by several orders of magnitude. Furthermore, there are many well-known limitations pertaining to IPv4 fragmentation and reassembly -- even to the point that it has been deemed \"harmful\" in both classic and modern-day studies (cited above). In particular, IPv4 fragmentation raises issues ranging from minor annoyances (e.g., slow-path processing in routers) to the potential for major integrity issues (e.g., mis-association of the fragments of multiple IP packets during reassembly).",
      "ja": "まず、IPv4のヘッダ識別フィールドは、最大で2 ^ 16パケットのタプルが所与の時点でインターネットにアクティブであってもよい同じ（ソース、宛先、プロトコル、識別）に関連することを意味し、長さは16ビットのみです。高速リンクの高騰展開（例えば、1Gbpsのイーサネット）に、しかし、この数はすぐに数桁小さくなりすぎることがあります。でも、それは両方の古典と現代の研究（上記）で「有害」とみなされていることをポイントに - さらに、IPv4の断片化と再構築に関連する多くのよく知られた制限があります。具体的には、IPv4の断片化は、主要な整合性の問題のための潜在的にマイナー迷惑（ルータで例えば、低速パス処理）の範囲の問題を提起する（例えば、再組み立て中に複数のIPパケットのフラグメントの誤アソシエーション）。"
    },
    {
      "indent": 3,
      "text": "As a result of these perceived limitations, a fragmentation-avoiding technique for discovering the MTU of the forward path from a source to a destination node was devised through the deliberations of the Path MTU Discovery Working Group (PMTUDWG) during the late 1980's through early 1990's (see Appendix A). In this method, the source node provides explicit instructions to routers in the path to discard the packet and return an ICMP error message if an MTU restriction is encountered. However, this approach has several serious shortcomings that lead to an overall \"brittleness\".",
      "ja": "これらの知覚の限界の結果、宛先ノードにソースからのフォワードパスのMTUを発見するための断片化回避技術は、1990年代前半を通じて1980年代後半の間にパスMTUディスカバリワーキンググループ（PMTUDWG）の審議を通じてなされたもので、 （付録Aを参照してください）。この方法では、ソースノードは、パケットを破棄し、MTUの制限に遭遇した場合、ICMPエラーメッセージを返すパス内のルータへの明示的な指示を提供します。しかし、このアプローチは、全体的な「脆さ」につながるいくつかの重大な欠点があります。"
    },
    {
      "indent": 3,
      "text": "In particular, site border routers in the Internet are being configured more and more to discard ICMP error messages coming from the outside world. This is due in large part to the fact that malicious spoofing of error messages in the Internet is made simple since there is no way to authenticate the source of the messages. Furthermore, when a source node that requires ICMP error message feedback when a packet is dropped due to an MTU restriction does not receive the messages, a path MTU-related black hole occurs. This means that the source will continue to send packets that are too large and never receive an indication from the network that they are being discarded.",
      "ja": "具体的には、インターネットでのサイト境界ルータは、外の世界から来たICMPエラーメッセージを破棄するために、より多くの構成されています。これは、メッセージの送信元を認証する方法がないので、インターネットでのエラーメッセージの悪質ななりすましが簡単になるという事実に大部分が原因です。また、パケットがMTUによる制限に滴下した場合、ICMPエラーメッセージのフィードバックを必要とするソースノードがメッセージを受信しない場合、パスMTU関連ブラックホールが発生します。これは、ソースが大きすぎると、彼らは破棄されているネットワークからの指示を受けたことがないパケットを送信し続けることを意味します。"
    },
    {
      "indent": 3,
      "text": "The issues with both IPv4 fragmentation and this \"classical\" method of path MTU discovery are exacerbated further when IP-in-IP tunneling is used. For example, site border routers that are configured as ingress tunnel endpoints may be required to forward packets into the subnetwork on behalf of hundreds, thousands, or even more original sources located within the site. If IPv4 fragmentation were used, this would quickly wrap the 16-bit Identification field and could lead to undetected data corruption. If classical IPv4 path MTU discovery were used instead, the site border router may be bombarded by ICMP error messages coming from the subnetwork that may be either untrustworthy or insufficiently provisioned to allow translation into error message to be returned to the original sources.",
      "ja": "IP内IPトンネリングを使用する場合のIPv4断片化およびパスMTUディスカバリのこの「古典的」方法の両方の問題はさらに悪化します。例えば、入口トンネルエンドポイントとして構成されているサイト境界ルータは、サイト内に配置され、数百、数千、またはそれ以上のオリジナルのソースの代わりにサブネットワークにパケットを転送するために必要とされ得ます。 IPv4のフラグメンテーションが使用された場合、これはすぐに16ビットの識別フィールドをラップなり、検出されないデータの破損につながる可能性があります。古典のIPv4パスMTUディスカバリが代わりに使用された場合は、サイトの境界ルータは、信頼できない、または不十分なエラーメッセージへの変換は、元のソースに戻すことができるように、プロビジョニングのいずれであってもよいサブネットワークからのICMPエラーメッセージによって衝撃することができます。"
    },
    {
      "indent": 3,
      "text": "The situation is exacerbated further still by IPsec tunnels, since only the first IPv4 fragment of a fragmented packet contains the transport protocol selectors (e.g., the source and destination ports) required for identifying the correct security association rendering fragmentation useless under certain circumstances. Even worse, there may be no way for a site border router that configures an IPsec tunnel to transcribe the encrypted packet fragment contained in an",
      "ja": "断片化されたパケットの最初のIPv4フラグメントはセレクタ（例えば、送信元および宛先ポート）は、特定の状況下で無駄なフラグメンテーションをレンダリングする正しいセキュリティアソシエーションを識別するために必要なトランスポート・プロトコルを含むので状況は、IPsecトンネルによってさらに依然として悪化します。さらに悪いことに、中に含まれる暗号化されたパケットのフラグメントを転写するIPsecトンネルを設定し、サイトの境界ルータのための方法はありません"
    },
    {
      "indent": 3,
      "text": "ICMP error message into a suitable ICMP error message to return to the original source. Due to these many limitations, a new approach to accommodate links with diverse MTUs is necessary.",
      "ja": "適切なICMPエラーメッセージにICMPエラーメッセージは、元のソースに戻ります。これらの多くの制限があるため、多様なのMTUとのリンクに対応するための新しいアプローチが必要です。"
    },
    {
      "indent": 0,
      "text": "1.2. Approach",
      "section_title": true,
      "ja": "1.2。アプローチ"
    },
    {
      "indent": 3,
      "text": "For the purpose of this document, subnetworks are defined as virtual topologies that span connected network regions bounded by encapsulating border nodes. Examples include the global Internet interdomain routing core, Mobile Ad hoc Networks (MANETs) and enterprise networks. Subnetwork border nodes forward unicast and multicast IP packets over the virtual topology across multiple IP and/or sub-IP layer forwarding hops that may introduce packet duplication and/or traverse links with diverse Maximum Transmission Units (MTUs).",
      "ja": "本文書の目的のために、サブネットワークは、境界ノードをカプセル化することによって境界付け接続されたネットワーク領域にまたがる仮想トポロジとして定義されます。例としては、グローバルなインターネットのドメイン間ルーティングコア、モバイルアドホックネットワーク（MANET）と企業ネットワークを含みます。サブネットワーク境界は、順方向パケットの複製及び/又は多様な最大伝送単位（MTUの）とトラバースリンクを導入することができる複数のIPおよび/またはサブIPレイヤ転送ホップを横切る仮想トポロジ上のユニキャストおよびマルチキャストIPパケットをノード。"
    },
    {
      "indent": 3,
      "text": "This document introduces a Subnetwork Encapsulation and Adaptation Layer (SEAL) for tunnel-mode operation of IP over subnetworks that connect Ingress and Egress Tunnel Endpoints (ITEs/ETEs) of border nodes. Operation in transport mode is also supported when subnetwork border node upper-layer protocols negotiate the use of SEAL during connection establishment. SEAL accommodates links with diverse MTUs and supports efficient duplicate packet detection by introducing a minimal mid-layer encapsulation.",
      "ja": "この文書では、境界ノードの入力および出力トンネルエンドポイント（ITES / ETES）を接続するサブネットワーク上のIPトンネルモード動作のためにサブネットワークのカプセル化及び適応レイヤ（SEAL）を導入します。サブネットワーク境界ノードの上位層プロトコルは、接続確立時、シールの使用を交渉するとき、トランスポートモードでの動作もサポートされています。シールは、多様なMTUでリンクを収容し、最小限のミッド層のカプセル化を導入することで、効率的な重複パケットの検出をサポートしています。"
    },
    {
      "indent": 3,
      "text": "The SEAL encapsulation introduces an extended Identification field for packet identification and a mid-layer segmentation and reassembly capability that allows simplified cutting and pasting of packets. Moreover, SEAL senses in-the-network IPv4 fragmentation as a \"noise\" indication that packet sizing parameters are \"out of tune\" with respect to the network path. As a result, SEAL can naturally tune its packet sizing parameters to eliminate the in-the-network fragmentation.",
      "ja": "SEALのカプセル化は、パケット識別パケットの簡略化されたカットアンドペーストを可能にする中間層のセグメンテーションとリアセンブリ能力の拡張識別フィールドを導入します。また、シールは、ネットワーク経路に対して「曲のうち、」パラメータをしているサイジングパケット「ノイズ」表示として、ネットワークのIPv4断片化を検出します。その結果、シールは、当然、そのパケット・サイズ・パラメータチューニングは、インネットワーク断片化を排除することができます。"
    },
    {
      "indent": 3,
      "text": "The SEAL encapsulation layer and protocol are specified in the following sections.",
      "ja": "SEALカプセル化層とプロトコルは、以下のセクションで指定されています。"
    },
    {
      "indent": 0,
      "text": "2. Terminology and Requirements",
      "section_title": true,
      "ja": "2.用語と要件"
    },
    {
      "indent": 3,
      "text": "The terms \"inner\", \"mid-layer\", and \"outer\", respectively, refer to\nthe innermost IP (layer, protocol, header, packet, etc.) before any\nencapsulation, the mid-layer IP (protocol, header, packet, etc.)\nafter any mid-layer '*' encapsulation, and the outermost IP (layer,\nprotocol, header, packet etc.) after SEAL/*/IPv4 encapsulation.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The term \"IP\" used throughout the document refers to either Internet\nProtocol version (IPv4 or IPv6).  Additionally, the notation\nIPvX/*/SEAL/*/IPvY refers to an inner IPvX packet encapsulated in any mid-layer '*' encapsulations, followed by the SEAL header, followed\nby any outer '*' encapsulations, followed by an outer IPvY header,\nwhere the notation \"IPvX\" means either IP protocol version (IPv4 or\nIPv6).",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The following abbreviations correspond to terms used within this document and elsewhere in common Internetworking nomenclature:",
      "ja": "以下の略語は、本文書内の他の場所と共通インターネットワーキング命名法で使用される用語に対応しています。"
    },
    {
      "indent": 6,
      "text": "ITE - Ingress Tunnel Endpoint",
      "ja": "ITE  - 入力トンネルエンドポイント"
    },
    {
      "indent": 6,
      "text": "ETE - Egress Tunnel Endpoint",
      "ja": "ETE  - 出力トンネルエンドポイント"
    },
    {
      "indent": 6,
      "text": "PTB - an ICMPv6 \"Packet Too Big\" or an ICMPv4 \"Fragmentation Needed\" message",
      "ja": "PTB  -  ICMPv6の「パケット過大」またはICMPv4の「断片化が必要」のメッセージ"
    },
    {
      "indent": 6,
      "text": "DF - the IPv4 header \"Don't Fragment\" flag",
      "ja": "DF  -  IPv4ヘッダーには、フラグを「フラグメントはいけません」"
    },
    {
      "indent": 6,
      "text": "MHLEN - the length of any mid-layer '*' headers and trailers",
      "ja": "MHLEN  - 任意のミッド層の長さが「*」のヘッダーとトレーラー"
    },
    {
      "indent": 6,
      "text": "OHLEN - the length of the outer encapsulating SEAL/*/IPv4 headers",
      "raw": true
    },
    {
      "indent": 6,
      "text": "HLEN - the sum of MHLEN and OHLEN",
      "ja": "HLEN  -  MHLENとOHLENの合計"
    },
    {
      "indent": 6,
      "text": "S_MRU - the per-ETE SEAL Maximum Reassembly Unit",
      "ja": "S_MRU  - あたり-ETE SEAL最大再組み立てユニット"
    },
    {
      "indent": 6,
      "text": "S_MSS - the SEAL Maximum Segment Size",
      "ja": "S_MSS  -  SEAL最大セグメントサイズ"
    },
    {
      "indent": 6,
      "text": "SEAL_ID - a 32-bit Identification value, randomly initialized and monotonically incremented for each SEAL protocol packet",
      "ja": "SEAL_ID  -  32ビットの識別値は、ランダムに初期化され、単調各SEAL・プロトコル・パケットごとにインクリメント"
    },
    {
      "indent": 6,
      "text": "SEAL_PROTO - an IPv4 protocol number used for SEAL",
      "ja": "SEAL_PROTO  - シールに使用されるIPv4プロトコル番号"
    },
    {
      "indent": 6,
      "text": "SEAL_PORT - a TCP/UDP service port number used for SEAL",
      "ja": "SEAL_PORT  -  SEALのために使用されるTCP / UDPサービスのポート番号"
    },
    {
      "indent": 6,
      "text": "SEAL_OPTION - a TCP option number used for (transport-mode) SEAL",
      "ja": "SEAL_OPTION  - （トランスポートモード）のために使用されるTCPオプション番号SEAL"
    },
    {
      "indent": 3,
      "text": "The key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this document, are to be interpreted as described in [RFC2119].",
      "ja": "彼らは、この文書に表示される[RFC2119]で説明したように解釈される際のキーワードは、REQUIREDは、、、、、MAY、推奨、およびオプションのすべきでないないものとものとしてはなりませんしなければなりません。"
    },
    {
      "indent": 0,
      "text": "3. Applicability Statement",
      "section_title": true,
      "ja": "3.適用性に関する声明"
    },
    {
      "indent": 3,
      "text": "SEAL was motivated by the specific case of subnetwork abstraction for Mobile Ad hoc Networks (MANETs); however, the domain of applicability also extends to subnetwork abstractions of enterprise networks, the interdomain routing core, etc. The domain of application therefore also includes the map-and-encaps architecture proposals in the IRTF Routing Research Group (RRG) (see http://www3.tools.ietf.org/group/ irtf/trac/wiki/RoutingResearchGroup).",
      "ja": "シールは、モバイルアドホックネットワーク（MANET）用のサブネットワーク抽象化の特定の場合によって動機付けました。しかしながら、適用のドメインは、（HTTPを参照して、アプリケーションのドメインは、したがって、IRTFルーティング研究グループ（RRG）におけるマップ・アンド・ENCAPSアーキテクチャの提案を含む企業ネットワーク、ドメイン間ルーティングコアなどの抽象化をサブネットワークに延びています。 //www3.tools.ietf.org/group/ IRTF / tracの/ウィキ/ RoutingResearchGroup）。"
    },
    {
      "indent": 3,
      "text": "SEAL introduces a minimal new sublayer for IPvX in IPvY encapsulation (e.g., as IPv6/SEAL/IPv4), and appears as a subnetwork encapsulation as seen by the inner IP layer. SEAL can also be used as a sublayer for encapsulating inner IP packets within outer UDP/IPv4 headers (e.g., as IPv6/SEAL/UDP/IPv4) such as for the Teredo domain of applicability [RFC4380]. When it appears immediately after the outer IPv4 header, the SEAL header is processed exactly as for IPv6 extension headers.",
      "ja": "SEAL（例えば、IPv6の/ SEAL / IPv4のような）IPvYカプセル化におけるIPvXの最小新しいサブレイヤを導入し、および内側IP層で見られるようにサブネットワークのカプセル化として現れます。シールはまた、そのような適用のTeredoのドメインのように、外側UDP / IPv4のヘッダ（例えば、IPv6の/ SEAL / UDP / IPv4のような）内に内側IPパケットをカプセル化するためのサブレイヤ[RFC4380]として使用することができます。それは外側のIPv4ヘッダの直後に表示されたときに、シールヘッダは、正確IPv6拡張ヘッダのように処理されます。"
    },
    {
      "indent": 3,
      "text": "SEAL can also be used in \"transport-mode\", e.g., when the inner layer includes upper-layer protocol data rather than an encapsulated IP packet. For instance, TCP peers can negotiate the use of SEAL for the carriage of protocol data encapsulated as TCP/SEAL/IPv4. In this sense, the \"subnetwork\" becomes the entire end-to-end path between the TCP peers and may potentially span the entire Internet.",
      "ja": "シールは、内側層は上位層プロトコル・データではなく、カプセル化されたIPパケットを含む場合、例えば、「トランスポートモード」においても使用することができます。例えば、TCPピアは、TCP / SEAL / IPv4のようにカプセル化されたプロトコルデータのキャリッジのためのシールの使用を交渉することができます。この意味で、「サブネットワークは、」TCPピア間の全体のエンドツーエンドのパスになり、潜在的にインターネット全体に及ぶことがあります。"
    },
    {
      "indent": 3,
      "text": "The current document version is specific to the use of IPv4 as the outer encapsulation layer; however, the same principles apply when IPv6 is used as the outer layer.",
      "ja": "現在の文書のバージョンは、外側封入層としてのIPv4の使用に特異的です。 IPv6は、外側層として使用される場合しかし、同じ原理が当てはまります。"
    },
    {
      "indent": 0,
      "text": "4. SEAL Protocol Specification - Tunnel Mode",
      "section_title": true,
      "ja": "4. SEALプロトコル仕様 - トンネルモード"
    },
    {
      "indent": 0,
      "text": "4.1. Model of Operation",
      "section_title": true,
      "ja": "4.1。操作のモデル"
    },
    {
      "indent": 3,
      "text": "SEAL supports the encapsulation of inner IP packets in mid-layer and\nouter encapsulating headers/trailers.  For example, an inner IPv6\npacket would appear as IPv6/*/SEAL/*/IPv4 after mid-layer and outer\nencapsulations, where '*' denotes zero or more additional\nencapsulation sublayers.  Ingres Tunnel Endpoints (ITEs) add mid-\nlayer inject into a subnetwork, where the outermost IPv4 header\ncontains the source and destination addresses of the subnetwork\nentry/exit points (i.e., the ITE/ETE), respectively.  SEAL uses a new\nInternet Protocol type and a new encapsulation sublayer for both\nunicast and multicast.  The ITE encapsulates an inner IP packet in\nmid-layer and outer encapsulations as shown in Figure 1:",
      "raw": true
    },
    {
      "indent": 3,
      "text": "                                         +-------------------------+\n                                         |                         |\n                                         ~   Outer */IPv4 headers  ~\n                                         |                         |\nI                                        +-------------------------+\nn                                        |       SEAL Header       |\nn      +-------------------------+       +-------------------------+\ne      ~ Any mid-layer * headers ~       ~ Any mid-layer * headers ~\nr      +-------------------------+       +-------------------------+\n       |                         |       |                         |\nI -->  ~         Inner IP        ~  -->  ~         Inner IP        ~\nP -->  ~         Packet          ~  -->  ~         Packet          ~\n       |                         |       |                         |\nP      +-------------------------+       +-------------------------+\na      ~  Any mid-layer trailers ~       ~  Any mid-layer trailers ~\nc      +-------------------------+       +-------------------------+\nk                                        ~    Any outer trailers   ~\ne                                        +-------------------------+\nt\n        (After mid-layer encaps.)        (After SEAL/*/IPv4 encaps.)",
      "raw": true
    },
    {
      "indent": 23,
      "text": "Figure 1: SEAL Encapsulation",
      "ja": "図1：SEALのカプセル化"
    },
    {
      "indent": 3,
      "text": "where the SEAL header is inserted as follows:",
      "ja": "次のようにシールヘッダが挿入されます。"
    },
    {
      "indent": 3,
      "text": "o For simple IPvX/IPv4 encapsulations (e.g., [RFC2003][RFC2004][RFC4213]), the SEAL header is inserted between the inner IP and outer IPv4 headers as: IPvX/SEAL/IPv4.",
      "ja": "IPvX / SEAL / IPv4の：OシンプルIPvX /のIPv4カプセル化（例えば、[RFC2003]、[RFC2004]、[RFC4213]）の場合、シールヘッダは、次のように内側IPと外側のIPv4ヘッダとの間に挿入されます。"
    },
    {
      "indent": 3,
      "text": "o  For tunnel-mode IPsec encapsulations over IPv4, [RFC4301], the\n   SEAL header is inserted between the {AH,ESP} header and outer IPv4\n   headers as: IPvX/*/{AH,ESP}/SEAL/IPv4.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "o  For IP encapsulations over transports such as UDP, the SEAL header\n   is inserted immediately after the outer transport layer header,\n   e.g., as IPvX/*/SEAL/UDP/IPv4.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "SEAL-encapsulated packets include a 32-bit SEAL_ID formed from the concatenation of the 16-bit ID Extension field in the SEAL header as the most-significant bits, and with the 16-bit Identification value in the outer IPv4 header as the least-significant bits. (For tunnels that traverse IPv4 Network Address Translators, the SEAL_ID is instead maintained only within the 16-bit ID Extension field in the SEAL header.) Routers within the subnetwork use the SEAL_ID for duplicate packet detection, and ITEs/ETEs use the SEAL_ID for SEAL segmentation and reassembly.",
      "ja": "シールカプセル化されたパケットは、最上位ビットとして、および外側IPv4ヘッダ内の16ビットの識別値とleast-としてシールヘッダ内の16ビットのID拡張フィールドの連結から形成された32ビットSEAL_IDを含みます上位ビット。 （IPv4のネットワークトランスレータアドレス横断トンネルについて、SEAL_ID代わりシールヘッダにのみ16ビットID拡張フィールド内に維持される。）サブネットワーク内のルータは、重複パケット検出用SEAL_IDを使用し、ITES / ETESはためSEAL_IDを使用SEALのセグメント化と再組み立て。"
    },
    {
      "indent": 3,
      "text": "SEAL enables a multi-level segmentation and reassembly capability.",
      "ja": "シールは、マルチレベルのセグメンテーションとリアセンブリ能力を可能にします。"
    },
    {
      "indent": 3,
      "text": "First, the ITE can use IPv4 fragmentation to fragment inner IPv4 packets with DF=0 before SEAL encapsulation to avoid lower-layer segmentation and reassembly. Secondly, the SEAL layer itself provides a simple cutting-and-pasting capability for mid-layer packets to avoid IPv4 fragmentation on the outer packet. Finally, ordinary IPv4 fragmentation is permitted on the outer packet after SEAL encapsulation and used to detect and dampen any in-the-network fragmentation as quickly as possible.",
      "ja": "まず、ITEは下層セグメンテーションとリアセンブリを避けるためにシール封入前DF = 0を有する内側IPv4パケットを断片化するのIPv4断片を使用することができます。第二に、シール層自体は、外部パケットにIPv4の断片化を避けるために、中間層パケットのための単純なカット＆ペースト機能を提供します。最後に、通常のIPv4断片は、シール封止後外側パケットで許可及び可能な限り迅速に、任意で、ネットワーク断片化を検出して減衰するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The following sections specify the SEAL-related operations of the ITE and ETE, respectively:",
      "ja": "以下のセクションは、それぞれ、ITE及びETEのSEAL関連の操作を指定します。"
    },
    {
      "indent": 0,
      "text": "4.2. ITE Specification",
      "section_title": true,
      "ja": "4.2。 ITE仕様"
    },
    {
      "indent": 0,
      "text": "4.2.1. Tunnel Interface MTU",
      "section_title": true,
      "ja": "4.2.1。トンネルインターフェイスのMTU"
    },
    {
      "indent": 3,
      "text": "The ITE configures a tunnel virtual interface over one or more underlying links that connect the border node to the subnetwork. The tunnel interface must present a fixed MTU to the inner IP layer (i.e., Layer 3) as the size for admission of inner IP packets into the tunnel. Since the tunnel interface may support a potentially large set of ETEs, however, care must be taken in setting a greatest-common-denominator MTU for all ETEs while still upholding end system expectations.",
      "ja": "ITEは、サブネットワークに境界ノードを接続する1つのまたは複数の基礎となるリンクを介してトンネル仮想インタフェースを構成します。トンネルインターフェースは、トンネル内に内側IPパケットの入場のための大きさとして、内側IPレイヤ（すなわち、レイヤ3）に固定されたMTUを提示しなければなりません。トンネルインターフェースがETESの潜在的に大きなセットをサポートすることができるので、しかし、注意が依然としてエンドシステムの期待を支持しながら、すべてのETESの最大の共通分母MTUを設定する際に注意しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Due to the ubiquitous deployment of standard Ethernet and similar networking gear, the nominal Internet cell size has become 1500 bytes; this is the de facto size that end systems have come to expect will either be delivered by the network without loss due to an MTU restriction on the path or a suitable PTB message returned. However, the network may not always deliver the necessary PTBs, leading to MTU-related black holes [RFC2923]. The ITE therefore requires a means for conveying 1500 byte (or smaller) packets to the ETE without loss due to MTU restrictions and without dependence on PTB messages from within the subnetwork.",
      "ja": "標準のイーサネットと同様のネットワーク機器のユビキタス展開に、名目上のインターネットのセルサイズが1500バイトになっています。これは、エンドシステムが期待するようになっているいずれかによる経路上のMTU制限に損失することなく、ネットワークによって送達または適切なPTBメッセージが返されることを事実上のサイズです。しかし、ネットワークは常にMTU関連ブラックホール[RFC2923]に至る、必要PTBSを提供しないことができます。 ITEは、したがってによるMTUの制約およびサブネットワーク内からPTBメッセージに依存せずに損失することなくETE 1500バイト（またはそれ以下）のパケットを伝達するための手段を必要とします。"
    },
    {
      "indent": 3,
      "text": "In common deployments, there may be many forwarding hops between the original source and the ITE. Within those hops, there may be additional encapsulations (IPSec, L2TP, etc.) such that a 1500 byte packet sent by the original source might grow to a larger size by the time it reaches the ITE for encapsulation as an inner IP packet. Similarly, additional encapsulations on the path from the ITE to the ETE could cause the encapsulated packet to become larger still and trigger in-the-network fragmentation. In order to preserve the end system expectations, the ITE therefore requires a means for conveying these larger packets to the ETE even though there may be links within the subnetwork that configure a smaller MTU.",
      "ja": "一般的な展開では、元のソースとITEの間に多くの転送ホップが存在してもよいです。これらのホップ内に、元のソースによって送信された1500バイトのパケットは、それが内側IPパケットとしてカプセル化するためのITEに到達するまでにより大きなサイズに成長するかもしれないような付加的なカプセル化（のIPSec、L2TP、等）が存在してもよいです。同様に、ETEのITEからの経路上の追加のカプセル化は、より大きな静止画およびトリガー内ネットワークフラグメンテーションなるようにカプセル化されたパケットを引き起こす可能性があります。エンドシステムの期待を維持するために、ITEは、したがってより小さなMTUを構成するサブネットワーク内のリンクがあってもETEにこれらのより大きなパケットを搬送するための手段を必要とします。"
    },
    {
      "indent": 3,
      "text": "The ITE should therefore set a tunnel virtual interface MTU of 1500 bytes plus extra room to accommodate any additional encapsulations that may occur on the path from the original source (i.e., even if the path to the ETE does not support an MTU of this size). The ITE can set larger MTU values still, but should select a value that is not so large as to cause excessive PTBs coming from within the tunnel interface (see Sections 4.2.2 and 4.2.6). The ITE can also set smaller MTU values; however, care must be taken not to set so small a value that original sources would experience an MTU underflow. In particular, IPv6 sources must see a minimum path MTU of 1280 bytes, and IPv4 sources should see a minimum path MTU of 576 bytes.",
      "ja": "ITEは、したがって、元のソース（すなわち、場合でもETEへのパスは、このサイズのMTUをサポートしていない）からの経路上に発生し得る任意の追加のカプセル化に対応するために、トンネル仮想インタフェース1500バイトのMTUプラス余分な部屋を設定する必要があります。 ITEは依然として大きなMTU値を設定することができるが、（セクション4.2.2および4.2.6を参照）トンネルインターフェイス内からの過剰なPTBSを引き起こすほど大きくない値を選択すべきです。 ITEも小さいMTU値を設定することができます。しかし、ケアは、元のソースがMTUのアンダーフローを経験するほど小さい値を設定しないように注意しなければなりません。具体的には、IPv6のソースは最小経路1280バイトのMTUを見なければならない、とIPv4ソースは最小経路576バイトのMTUを参照すべきです。"
    },
    {
      "indent": 3,
      "text": "The inner IP layer consults the tunnel interface MTU when admitting a packet into the interface. For inner IPv4 packets larger than the tunnel interface MTU and with the IPv4 Don't Fragment (DF) bit set to 0, the inner IPv4 layer uses IPv4 fragmentation to break the packet into fragments no larger than the tunnel interface MTU (but, see also Section 4.2.3), then admits each fragment into the tunnel as an independent packet. For all other inner packets (IPv4 or IPv6), the ITE admits the packet if it is no larger than the tunnel interface MTU; otherwise, it drops the packet and sends an ICMP PTB message with an MTU value of the tunnel interface MTU to the source.",
      "ja": "インタフェースにパケットを入れるときに、内側IP層は、トンネルインタフェースMTUを参照します。内側IPv4のトンネルインタフェースMTUより大きなパケットとIPv4を有するフラグメント（DF）は0に設定され、内側のIPv4層がフラグメントにトンネルインタフェースMTUよりも大きくしたパケットを破壊しない（ただし、参照するIPv4のフラグメンテーションを使用ビットはいけませんまた、セクション4.2.3）、その後、独立したパケットとしてトンネルに各フラグメントを認めます。それは、トンネルインタフェースMTUよりも大きくない場合、他のすべての内側のパケット（IPv4またはIPv6）のために、ITEはパケットを認めます。それ以外の場合は、パケットをドロップし、ソースへのトンネルインタフェースMTUのMTU値とICMP PTBメッセージを送信します。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Accounting for Headers",
      "section_title": true,
      "ja": "4.2.2。ヘッダーの会計処理"
    },
    {
      "indent": 3,
      "text": "As for any transport layer protocol, ITEs use the MTU of the\nunderlying IPv4 interface, the length of any mid-layer '*' headers\nand trailers, and the length of the outer SEAL/*/IPv4 headers to\ndetermine the maximum size for a SEAL segment (see Section 4.2.3).\nFor example, when the underlying IPv4 interface advertises an MTU of\n1500 bytes and the ITE inserts a minimum-length (i.e., 20-byte) IPv4\nheader, the ITE sees a maximum segment size of 1480 bytes.  When the\nITE inserts IPv4 header options, the size is further reduced by as\nmany as 40 additional bytes (the maximum length for IPv4 options)\nsuch that as few as 1440 bytes may be available for the upper-layer\npayload.  When the ITE inserts additional '*' encapsulations, the\nmaximum segment size is reduced further still.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The ITE must additionally account for the length of the SEAL header itself as an extra encapsulation that further reduces the maximum segment size. The length of the SEAL header is not incorporated in the IPv4 header length; therefore, the network does not observe the SEAL header as an IPv4 option. In this way, the SEAL header is inserted after the IPv4 options but before the upper-layer payload in exactly the same manner as for IPv6 extension headers.",
      "ja": "ITEは、さらに、さらに、最大セグメントサイズを減少させる余分なカプセルのシールヘッダ自体の長さを考慮しなければなりません。シールヘッダの長さは、IPv4ヘッダの長さに組み込まれていません。従って、ネットワークは、IPv4オプションとしてシールヘッダを観察しません。このように、シールヘッダはIPv4オプション後でIPv6拡張ヘッダの場合と全く同様に上層ペイロードの前に挿入されます。"
    },
    {
      "indent": 0,
      "text": "4.2.3. Segmentation and Encapsulation",
      "section_title": true,
      "ja": "4.2.3。セグメンテーションとカプセル化"
    },
    {
      "indent": 3,
      "text": "For each ETE, the ITE maintains the length of any mid-layer '*'\nencapsulation headers and trailers (e.g., for '*' = AH, ESP, NULL,\netc.) in a variable 'MHLEN' and maintains the length of the outer\nSEAL/*/IPv4 encapsulation headers in a variable 'OHLEN'.  The ITE\nfurther maintains a variable 'HLEN' set to MHLEN plus OHLEN.  The ITE\nmaintains a SEAL Maximum Reassembly Unit (S_MRU) value for each ETE\nas soft state within the tunnel interface (e.g., in the IPv4\ndestination cache).  The ITE initializes S_MRU to a value no larger\nthan 2KB and uses this value to determine the maximum-sized packet it\nwill require the ETE to reassemble.  The ITE additionally maintains a\nSEAL Maximum Segment Size (S_MSS) value for each ETE.  The ITE\ninitializes S_MSS to the maximum of (the underlying IPv4 interface\nMTU minus OHLEN) and S_MRU/8 bytes, and decreases or increases S_MSS\nbased on any ICMPv4 Fragmentation Needed messages received (see\nSection 4.2.6).",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The ITE performs segmentation and encapsulation on inner packets that have been admitted into the tunnel interface. For inner IPv4 packets with the DF bit set to 0, if the length of the inner packet is larger than (S_MRU - HLEN), the ITE uses IPv4 fragmentation to break the packet into IPv4 fragments no larger than (S_MRU - HLEN). For unfragmentable inner packets (e.g., IPv6 packets, IPv4 packets with DF=1, etc.), if the length of the inner packet is larger than (MAX(S_MRU, S_MSS) - HLEN), the ITE drops the packet and sends an ICMP PTB message with an MTU value of (MAX(S_MRU, S_MSS) - HLEN) back to the original source.",
      "ja": "ITEは、トンネルインターフェースに導入されている内側のパケットに分割し、カプセル化を行います。 DFと内側IPv4パケットを0に設定ビットに対して内部パケットの長さ（S_MRU  -  HLEN）よりも大きい場合、ITEは、（ -  HLEN S_MRU）よりも大きくないのIPv4フラグメントにパケットを破壊するためのIPv4断片を使用します。内部パケットの長さは、（MAX（S_MRU、S_MSS） -  HLEN）よりも大きい場合にフラグメント化不能内側のパケット（例えば、IPv6パケット、DF = 1、等とIPv4パケット）のために、ITEはパケットをドロップし、送信します。元のソースに - （HLEN MAX（S_MRU、S_MSS））のMTU値を持つICMP PTBメッセージ。"
    },
    {
      "indent": 3,
      "text": "The ITE then encapsulates each inner packet/fragment in the MHLEN bytes of mid-layer '*' headers and trailers. For each such resulting mid-layer packet of length 'M', if (S_MRU >= (M + OHLEN) > S_MSS), the ITE must perform SEAL segmentation. To do so, it breaks the mid-layer packet into N segments (N <= 8) that are no larger than (MIN(1KB, S_MSS) - OHLEN) bytes each. Each segment, except the final one, MUST be of equal length, while the final segment MUST be no larger than the initial segment. The first byte of each segment MUST begin immediately after the final byte of the previous segment, i.e., the segments MUST NOT overlap. The ITE should generate the smallest number of segments possible, e.g., it should not generate 6 smaller segments when the packet could be accommodated with 4 larger segments.",
      "ja": "ITEは、次いで中間層「*」のヘッダとトレーラのMHLENバイトの各内部パケット/フラグメントをカプセル化します。長さのような各結果として生じる中間層パケット 'M'、ため（S_MRU> =（M + OHLEN）> S_MSS）は、ITEは、シールセグメント化を実行する必要がある場合。そうするためには、（MIN（1キロバイト、S_MSS） -  OHLEN）よりも大きくないN個のセグメント（N <= 8）に中間層パケットを破壊する各バイト。最後のセグメントが最初のセグメントより大きくてはならないしながら、各セグメントは、最終の以外、同じ長さでなければなりません。各セグメントの最初のバイトは、前のセグメントの最後のバイトの直後に開始しなければならない、すなわち、セグメントが重複してはなりません。 ITEは、可能なセグメントの最小数を生成し、パケットが4つのより大きいセグメントに収容することができる場合、例えば、それが6つのより小さいセグメントを生成してはならないはずです。"
    },
    {
      "indent": 3,
      "text": "Note that this SEAL segmentation ignores the fact that the mid-layer packet may be unfragmentable. This segmentation process is a mid-layer (not an IP layer) operation employed by the ITE to adapt the mid-layer packet to the subnetwork path characteristics, and the ETE will restore the packet to its original form during reassembly.",
      "ja": "このシールのセグメンテーションはミッド層パケットがフラグメント化不能かもしれないという事実を無視することに注意してください。このセグメンテーションプロセスは、中間層（不IP層）サブ路特性に中間層パケットを適合させるためにITEで採用操作であり、ETEは、再組み立て時にその元の形にパケットを復元します。"
    },
    {
      "indent": 3,
      "text": "Therefore, the fact that the packet may have been segmented within the subnetwork is not observable outside of the subnetwork.",
      "ja": "そのため、パケットはサブネットワーク内にセグメント化されている可能性があるという事実は、サブネットワークの外で観測可能ではありません。"
    },
    {
      "indent": 3,
      "text": "The ITE next encapsulates each segment in a SEAL header formatted as follows:",
      "ja": "ITEは、次、次のようにフォーマットされたシールヘッダの各セグメントをカプセル化します。"
    },
    {
      "indent": 3,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|          ID Extension         |A|R|M|RSV| SEG |  Next Header  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 23,
      "text": "Figure 2: SEAL Header Format",
      "ja": "図2：SEALヘッダー形式"
    },
    {
      "indent": 3,
      "text": "where the header fields are defined as follows:",
      "ja": "次のようにヘッダーフィールドが定義されます。"
    },
    {
      "indent": 3,
      "text": "ID Extension (16) a 16-bit extension of the Identification field in the outer IPv4 header; encodes the most-significant 16 bits of a 32 bit SEAL_ID value.",
      "ja": "ID拡張（16）は、外側IPv4ヘッダ内の識別フィールドの16ビット拡張。 32ビットSEAL_ID値の最上位16ビットを符号化します。"
    },
    {
      "indent": 3,
      "text": "A (1) the \"Acknowledgement Requested\" bit. Set to 1 if the ITE wishes to receive an explicit acknowledgement from the ETE.",
      "ja": "（1）「確認応答要求」ビット。 ITEはETEから明示的な承認を受けることを希望する場合は1に設定します。"
    },
    {
      "indent": 3,
      "text": "R (1) the \"Report Fragmentation\" bit. Set to 1 if the ITE wishes to receive a report from the ETE if any IPv4 fragmentation occurs.",
      "ja": "R（1） \"レポート断片\" ビット。 ITEは、任意のIPv4断片化が発生した場合ETEからの報告を受信したい場合は、1に設定してください。"
    },
    {
      "indent": 3,
      "text": "M (1) the \"More Segments\" bit. Set to 1 if this SEAL protocol packet contains a non-final segment of a multi-segment mid-layer packet.",
      "ja": "M（1） \"複数のセグメント\" ビット。このシール・プロトコル・パケットは、マルチセグメント中間層パケットの非最終セグメントが含まれている場合、1に設定。"
    },
    {
      "indent": 3,
      "text": "RSV (2) a 2-bit field reserved for future use. Must be set to 0 for the purpose of this specification.",
      "ja": "RSV（2）2ビットのフィールドは、将来の使用のために予約します。本明細書の目的のために0に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "SEG (3) a 3-bit segment number. Encodes a segment number between 0 - 7.",
      "ja": "SEG（3）3ビットのセグメント番号。 7から0の間のセグメント番号を符号化します。"
    },
    {
      "indent": 3,
      "text": "Next Header (8) an 8-bit field that encodes an Internet Protocol number the same as for the IPv4 protocol and IPv6 next header fields.",
      "ja": "次のヘッダ（8）IPv4プロトコルとIPv6の次のヘッダフィールドと同じインターネットプロトコル番号を符号化する8ビットフィールド。"
    },
    {
      "indent": 3,
      "text": "For single-segment mid-layer packets, the ITE encapsulates the segment in a SEAL header with (M=0; SEG=0). For N-segment mid-layer packets (N <= 8), the ITE encapsulates each segment in a SEAL header with (M=1; SEG=0) for the first segment, (M=1; SEG=1) for the second segment, etc., with the final segment setting (M=0; SEG=N-1).",
      "ja": "単一セグメントの中間層パケットのために、ITEは（; SEG = 0、M = 0）とシールヘッダにセグメントをカプセル化します。 N-セグメント中間層パケットの（Nが<= 8）、ITEは（M = 1; SEG = 0）とのシールヘッダに各セグメントをカプセル化する、ための第一セグメント（SEG = 1、M = 1）のために最後のセグメントが設定された等の第二セグメント、（M = 0; SEG = N-1）。"
    },
    {
      "indent": 3,
      "text": "The ITE next sets RSV='00' and sets the A and R bits in the SEAL header of the first segment according to whether the packet is to be used as an explicit/implicit probe as specified in Section 4.2.4. The ITE then writes the Internet Protocol number corresponding to the mid-layer packet in the SEAL 'Next Header' field and encapsulates each segment in the requisite */IPv4 outer headers according to the specific encapsulation format (e.g., [RFC2003], [RFC4213], [RFC4380], etc.), except that it writes 'SEAL_PROTO' in the protocol field of the outer IPv4 header (when simple IPv4 encapsulation is used) or writes 'SEAL_PORT' in the outer destination service port field (e.g., when UDP/IPv4 encapsulation is used). The ITE finally sets packet identification values as specified in Section 4.2.5 and sends the packets as specified in Section 4.2.6.",
      "ja": "ITEは次RSV = '00' に設定し、パケットは、セクション4.2.4で指定されるように明示的/暗黙的なプローブとして使用されるかどうかに応じて第一セグメントのシールヘッダにAとRビットをセットします。 ITEは、特定のカプセル化形式（例えば、[RFC2003]、[RFC4213に従って必要* / IPv4の外側のヘッダに各セグメントを「次ヘッダ」フィールドSEALにおける中間層パケットに対応するインターネットプロトコル番号を書き込み、カプセル化]、[RFC4380]、等）、それは外側のIPv4ヘッダのプロトコルフィールドに「SEAL_PROTO」を書き込む（シンプルIPv4のカプセル化を使用する場合）、または場合外側の宛先サービス・ポート・フィールド（例えば、で「SEAL_PORT」を書き込むことを除いUDP / IPv4のカプセル化）が使用されています。 ITEは、最終的に、セクション4.2.5で指定されたパケットの識別値を設定し、セクション4.2.6で指定されたパケットを送信します。"
    },
    {
      "indent": 0,
      "text": "4.2.4. Sending Probes",
      "section_title": true,
      "ja": "4.2.4。プローブを送信"
    },
    {
      "indent": 3,
      "text": "When S_MSS is larger than S_MRU/8 bytes, the ITE sends ordinary encapsulated data packets as implicit probes to detect in-the-network IPv4 fragmentation and to determine new values for S_MSS. The ITE sets R=1 in the SEAL header of a packet with SEG=0 to be used as an implicit probe, and will receive ICMPv4 Fragmentation Needed messages from the ETE if any IPv4 fragmentation occurs. When the ITE has already reduced S_MSS to the minimum value, it instead sets R=0 in the SEAL header to avoid generating fragmentation reports for unavoidable in-the-network fragmentation.",
      "ja": "S_MSSはS_MRU / 8バイトよりも大きい場合、ITEは、暗黙的プローブは、イン・ネットワークのIPv4断片化を検出し、S_MSSの新しい値を決定するように、通常のカプセル化されたデータ・パケットを送信します。 ITEは、暗黙のプローブとして使用するSEG = 0のパケットのシールヘッダにR = 1を設定し、任意のIPv4断片化が発生した場合ETEからICMPv4のフラグメンテーション必要なメッセージを受信します。 ITEがすでに最小値にS_MSSが減少している場合、それは代わりに不可避に、ネットワーク断片化断片化レポートの生成を回避するためにシールヘッダにR = 0を設定します。"
    },
    {
      "indent": 3,
      "text": "The ITE should send explicit probes periodically to manage a window of SEAL_IDs of outstanding probes as a means to validate any ICMPv4 messages it receives. The ITE sets A=1 in the SEAL header of a packet with SEG=0 to be used as an explicit probe, where the probe can be either an ordinary data packet or a NULL packet created by setting the 'Next Header' field in the SEAL header to a value of \"No Next Header\" (see Section 4.7 of [RFC2460]).",
      "ja": "ITEは、受信するすべてのICMPv4のメッセージを検証する手段として優れたプローブのSEAL_IDsのウィンドウを管理するために、定期的に明示的なプローブを送信する必要があります。 ITEは、SEG = 0は、プローブが通常のデータパケットまたはで「次ヘッダ」フィールドを設定することによって作成されたNULLパケットのいずれかであり得る明確なプローブとして使用すると、パケットのシールヘッダにA = 1を設定します「いいえ次ヘッダ」の値にシールヘッダ（[RFC2460]のセクション4.7を参照）。"
    },
    {
      "indent": 3,
      "text": "The ITE should further send explicit probes, periodically, to detect increases in S_MSS by resetting S_MSS to the maximum of (the underlying IPv4 interface MTU minus OHLEN) and S_MRU/8 bytes, and/or by sending explicit probes that are larger than the current S_MSS.",
      "ja": "ITEさらに（下地のIPv4インタフェースMTUマイナスOHLEN）の最大S_MSSをリセットすることによってS_MSSの増加を検出するために、定期的に、明示的なプローブを送信すべきとS_MRU / 8バイト、及び/又は電流よりも大きい明示的プローブを送信することによってS_MSS。"
    },
    {
      "indent": 3,
      "text": "Finally, the ITE MAY send \"expendable\" probe packets with DF=1 (see Section 4.2.6) in order to generate ICMPv4 Fragmentation Needed messages from routers on the path to the ETE.",
      "ja": "最後に、ITEはDF = 1で「消耗品」プローブパケットを送るかもしれETEへのパス上のルータからのメッセージを必要ICMPv4の断片を生成するために、（4.2.6項を参照してください）。"
    },
    {
      "indent": 0,
      "text": "4.2.5. Packet Identification",
      "section_title": true,
      "ja": "4.2.5。パケット識別"
    },
    {
      "indent": 3,
      "text": "For the purpose of packet identification, the ITE maintains a 32-bit SEAL_ID value as per-ETE soft state, e.g., in the IPv4 destination cache. The ITE randomly initializes SEAL_ID when the soft state is created and monotonically increments it (modulo 2^32) for each successive SEAL protocol packet it sends to the ETE. For each packet, the ITE writes the least-significant 16 bits of the SEAL_ID value in the Identification field in the outer IPv4 header, and writes the most-significant 16 bits in the ID Extension field in the SEAL header.",
      "ja": "パケット識別の目的のために、ITEは、IPv4宛先キャッシュに、例えば、毎ETEソフト状態として32ビットSEAL_ID値を維持します。 ITEは、ランダムに柔らかい状態が作成さSEAL_IDを初期化し、単調がETEに送信する各連続SEAL・プロトコル・パケットのための（モジュロ^ 32 2）をインクリメントします。各パケットに対して、ITEは、外側IPv4ヘッダ内の識別フィールドにSEAL_ID値の最下位16ビットを書き込み、シールヘッダ内のID拡張フィールドの最上位16ビットを書き込みます。"
    },
    {
      "indent": 3,
      "text": "For SEAL encapsulations specifically designed for the traversal of IPv4 Network Address Translators (NATs), e.g., for encapsulations that insert a UDP header between the SEAL header and outer IPv4 header such as IPv6/SEAL/UDP/IPv4, the ITE instead maintains SEAL_ID as a 16-bit value that it randomly initializes when the soft state is created and monotonically increments (modulo 2^16) for each successive packet. For each packet, the ITE writes SEAL_ID in the ID extension field of the SEAL header and writes a random 16-bit value in the Identification field in the outer IPv4 header. This is due to the fact that the ITE has no way to control IPv4 NATs in the path that could rewrite the Identification value in the outer IPv4 header.",
      "ja": "IPv6などシールヘッダと外側のIPv4ヘッダーの間にUDPヘッダを挿入カプセル化するための具体例のIPv4ネットワークアドレストランスレータ（NATの）のトラバーサルのために設計されたSEALのカプセル化、のために/シール/ UDP / IPv4の、ITE代わりとしてSEAL_IDを維持しますそれはランダムに単調に柔らかい状態が作成されるときに初期化し、16ビット値は、各連続パケットの（モジュロ^ 16 2）インクリメントします。各パケットに対して、ITEは、シールヘッダのID拡張フィールドにSEAL_IDを書き込み、外側IPv4ヘッダ内の識別フィールドにランダムな16ビット値を書き込みます。これは、ITEは、外側IPv4ヘッダ内の識別値を書き換えることができパスでのIPv4のNATを制御する方法がないという事実によるものです。"
    },
    {
      "indent": 0,
      "text": "4.2.6. Sending SEAL Protocol Packets",
      "section_title": true,
      "ja": "4.2.6。 SEALプロトコルパケットを送信します"
    },
    {
      "indent": 3,
      "text": "Following SEAL segmentation and encapsulation, the ITE sets DF=0 in the outer IPv4 header of every outer packet it sends. For \"expendable\" packets (e.g., for NULL packets used as probes -- see Section 4.2.4), the ITE may instead set DF=1.",
      "ja": "SEALセグメンテーションおよびカプセル化以下、ITEは、それが送信するすべての外部パケットの外部IPv4ヘッダ内のDF = 0を設定します。 （プローブとして使用するNULLパケットに対して、例えば、 - セクション4.2.4を参照）、「消耗品」パケットの場合、ITE代わりDF = 1を設定してもよいです。"
    },
    {
      "indent": 3,
      "text": "The ITE then sends each outer packet that encapsulates a segment of the same mid-layer packet into the tunnel in canonical order, i.e., segment 0 first, followed by segment 1, etc. and finally segment N-1.",
      "ja": "ITEは、次いで標準的な順序にトンネルに同じ中間層パケットのセグメントをカプセル化する各外側パケットを送信する、すなわち、第一のセグメント0、セグメント1、など、最終的にセグメントN-1が続きます。"
    },
    {
      "indent": 0,
      "text": "4.2.7. Processing Raw ICMPv4 Messages",
      "section_title": true,
      "ja": "4.2.7。生ICMPv4のメッセージの処理"
    },
    {
      "indent": 3,
      "text": "The ITE may receive \"raw\" ICMPv4 error messages from either the ETE or routers within the subnetwork that comprise an outer IPv4 header, followed by an ICMPv4 header, followed by a portion of the SEAL packet that generated the error (also known as the \"packet-in-error\"). For such messages, the ITE can use the 32-bit SEAL ID encoded in the packet-in-error as a nonce to confirm that the ICMP message came from either the ETE or an on-path router. The ITE MAY process raw ICMPv4 messages as soft errors indicating that the path to the ETE may be failing.",
      "ja": "ITEは \"としても知られているエラーを（生成SEALパケットの部分が続くETE又はICMPv4のヘッダに続いて、外側IPv4ヘッダを含むサブネットワーク内のルータのいずれかからの「生の」ICMPv4のエラーメッセージを受信することができますパケット・イン・エラー」）。このようなメッセージのために、ITEは、パケットにエラーICMPメッセージがETEまたはオンパスルータのいずれかから来たことを確認するノンスように符号化された32ビットシールIDを使用することができます。 ITEはETEへのパスが失敗することができることを示すソフトエラーなどの生ICMPv4のメッセージを処理することができます。"
    },
    {
      "indent": 3,
      "text": "The ITE should specifically process raw ICMPv4 Protocol Unreachable messages as a hint that the ETE does not implement the SEAL protocol.",
      "ja": "ITEは、具体的ETEはSEALプロトコルを実装していないことをヒントとして、生のICMPv4プロトコルUnreachableメッセージを処理する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.2.8. Processing SEAL-Encapsulated ICMPv4 Messages",
      "section_title": true,
      "ja": "4.2.8。 SEALカプセル化ICMPv4のメッセージの処理"
    },
    {
      "indent": 3,
      "text": "In addition to any raw ICMPv4 messages, the ITE may receive SEAL-\nencapsulated ICMPv4 messages from the ETE that comprise outer ICMPv4/\n*/SEAL/*/IPv4 headers followed by a portion of the SEAL-encapsulated\npacket-in-error.  The ITE can use the 32-bit SEAL ID encoded in the\npacket-in-error as well as information in the outer IPv4 and SEAL\nheaders as nonces to confirm that the ICMP message came from a\nlegitimate ETE.  The ITE then verifies that the SEAL_ID encoded in\nthe packet-in-error is within the current window of transmitted\nSEAL_IDs for this ETE.  If the SEAL_ID is outside of the window, the\nITE discards the message; otherwise, it advances the window and\nprocesses the message.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The ITE processes SEAL-encapsulated ICMPv4 messages other than ICMPv4 Fragmentation Needed exactly as specified in [RFC0792].",
      "ja": "[RFC0792]で指定されるようにICMPv4の断片以外のITEプロセスシール封入ICMPv4のメッセージが正確に必要。"
    },
    {
      "indent": 3,
      "text": "For SEAL-encapsulated ICMPv4 Fragmentation Needed messages, the ITE sets a variable 'L' to the IPv4 length of the packet-in-error minus OHLEN. If (L > S_MSS), or if the packet-in-error is an IPv4 first fragment (i.e., with MF=1; Offset=0) and (L >= (576 - OHLEN)), the ITE sets (S_MSS = L).",
      "ja": "SEAL封入ICMPv4のフラグメンテーション必要なメッセージのために、ITEは、パケットにエラーマイナスOHLENのIPv4の長さに変数「L」を設定します。 （L> S_MSS）場合、またはパケットにエラーがIPv4最初のフラグメントである場合（すなわち、とMF = 1、オフセット= 0）と（L> =（576  -  OHLEN））、ITEセット（S_MSS = L）。"
    },
    {
      "indent": 3,
      "text": "Note that 576 in the above corresponds to the nominal minimum MTU for IPv4 links. When an ITE instead receives an IPv4 first fragment packet-in-error with (L < (576 - OHLEN)), it discovers that IPv4 fragmentation is occurring in the network but it cannot determine the true MTU of the restricting link due to a router on the path generating runt first fragments. The ITE should therefore search for a reduced S_MSS value (to a minimum of S_MRU/8) through an iterative searching strategy that parallels (Section 5 of [RFC1191]).",
      "ja": "上記576は、IPv4リンクの公称最小のMTUに対応することに留意されたいです。 ITEの代わりにIPv4の最初のフラグメントパケット・イン・エラー（L <（576  -  OHLEN））とを受信すると、それは、IPv4断片がネットワークに発生しているが、それが原因ルータに規制リンクの真のMTUを決定することができないことを発見しますパス上ラント最初のフラグメントを生成します。 ITEは、したがって、（[RFC1191]のセクション5）平行反復探索戦略を介して（S_MRU / 8の最小値に）低減S_MSS値を検索すべきです。"
    },
    {
      "indent": 3,
      "text": "This searching strategy may require multiple iterations of sending SEAL packets with DF=0 using a reduced S_MSS and receiving additional Fragmentation Needed messages, but it will soon converge to a stable value. During this process, it is essential that the ITE reduce S_MSS based on the first Fragmentation Needed message received, and refrain from further reducing S_MSS until ICMPv4 Fragmentation Needed messages pertaining to packets sent under the new S_MSS are received.",
      "ja": "この検索戦略は減少S_MSSを使用して、追加のフラグメンテーション必要なメッセージを受信= 0 DFでSEALパケットを送信する複数の反復を必要とするかもしれないが、それはすぐに安定した値に収束します。このプロセスの間に、ITEが必要なメッセージを受信した最初の断片化に基づくS_MSSを軽減し、ICMPv4の断片が受信された新しいS_MSSの下で送信されたパケットに関するメッセージを、必要になるまで、さらにS_MSSを減らすことを控えることが不可欠です。"
    },
    {
      "indent": 3,
      "text": "As an optimization only, the ITE MAY transcribe SEAL-encapsulated Fragmentation Needed messages that contain sufficient information into corresponding PTB messages to return to the original source.",
      "ja": "のみ最適化されるように、ITEは、元のソースに戻り、対応するPTBメッセージに十分な情報を含むSEAL封入フラグメンテーション必要なメッセージを転写してもよい（MAY）。"
    },
    {
      "indent": 0,
      "text": "4.3. ETE Specification",
      "section_title": true,
      "ja": "4.3。 ETE仕様"
    },
    {
      "indent": 0,
      "text": "4.3.1. Reassembly Buffer Requirements",
      "section_title": true,
      "ja": "4.3.1。組立バッファの要件"
    },
    {
      "indent": 3,
      "text": "ETEs MUST be capable of using IPv4-layer reassembly to reassemble\nSEAL protocol outer IPv4 packets up to 2KB in length, and MUST also\nbe capable of using SEAL-layer reassembly to reassemble mid-layer\npackets up to (2KB - OHLEN).  Note that the ITE must retain the\nSEAL/*/IPv4 header during both IPv4-layer and SEAL-layer reassembly\nfor the purpose of associating the fragments/segments of the same\npacket.",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.3.2. IPv4-Layer Reassembly",
      "section_title": true,
      "ja": "4.3.2。 IPv4のレイヤの再構築"
    },
    {
      "indent": 3,
      "text": "The ETE performs IPv4 reassembly as normal, and should maintain a conservative high- and low-water mark for the number of outstanding reassemblies pending for each ITE. When the size of the reassembly buffer exceeds this high-water mark, the ETE actively discards incomplete reassemblies (e.g., using an Active Queue Management (AQM) strategy) until the size falls below the low-water mark. The ETE should also use a reduced IPv4 maximum segment lifetime value (e.g., 15 seconds), i.e., the time after which it will discard an incomplete IPv4 reassembly for a SEAL protocol packet. Finally, the ETE should also actively discard any pending reassemblies that clearly have no opportunity for completion, e.g., when a considerable number of new IPv4 fragments have been received before a fragment that completes a pending reassembly has arrived.",
      "ja": "ETEは、通常通りのIPv4再組み立てを行い、各ITEの保留中の未処理の再組み立ての数保存的高および低水準を維持しなければなりません。リアセンブリ・バッファのサイズは、この高ウォーターマークを超えた場合、ETEは積極的サイズ、低水準を下回るまで（アクティブキュー管理（AQM）戦略を使用して、例えば）、不完全な再組み立てを破棄する。 ETEはまた、すなわち、それは、シールプロトコルパケットの不完全なIPv4の再構築を廃棄するまでの時間を減少させたIPv4最大セグメント寿命値（例えば、15秒）を使用しなければなりません。最後に、ETEも積極的に新しいIPv4の断片の相当数は、保留中の再構築が到着した完了フラグメント前に受信したときに明確に、例えば、完了のための機会がない保留中の再組み立てを破棄しなければなりません。"
    },
    {
      "indent": 3,
      "text": "After reassembly, the ETE either accepts or discards the reassembled packet based on the current status of the IPv4 reassembly cache (congested versus uncongested). The SEAL_ID included in the IPv4 first fragment provides an additional level of reassembly assurance, since it can record a distinct arrival timestamp useful for associating the first fragment with its corresponding non-initial fragments. The choice of accepting/discarding a reassembly may also depend on the strength of the upper-layer integrity check if known (e.g., IPSec/ESP provides a strong upper-layer integrity check) and/or the corruption tolerance of the data (e.g., multicast streaming audio/video may be more corruption-tolerant than file transfer, etc.). In the limiting case, the ETE may choose to discard all IPv4 reassemblies and process only the IPv4 first fragment for SEAL-encapsulated error generation purposes (see the following sections).",
      "ja": "再組立て後、ETEは（非輻輳に対する輻輳）のIPv4再アセンブリ・キャッシュの現在の状態に基づいて再構成されたパケットを受け入れるか、または廃棄のいずれか。 SEAL_IDは、IPv4最初のフラグメントに含まれる、その対応する非初期フラグメントと最初のフラグメントを関連付けるために有用な別個の到着タイムスタンプを記録することができるため、再組み立て保証の追加レベルを提供します。再組み立てを廃棄/受諾の選択既知の場合も、上位層の整合性チェックの強さに依存してもよい（例えば、IPSecの/ ESPが強い上位レイヤの整合性チェックを提供）、および/またはデータの破損が許容値（例えば、マルチキャストストリーミングオーディオ/ビデオは、より多くの汚職トレラントなファイル転送よりも、など）であってもよいです。限定的な場合には、ETEは、シールカプセル化エラー発生目的のためのすべてのIPv4再組み立てプロセスIPv4のみ最初の断片（以下のセクションを参照）破棄することを選択することができます。"
    },
    {
      "indent": 0,
      "text": "4.3.3. Generating SEAL-Encapsulated ICMPv4 Fragmentation Needed Messages",
      "ja": "4.3.3。 SEALカプセル化ICMPv4のフラグメンテーション必要なメッセージを生成します"
    },
    {
      "indent": 3,
      "text": "During IPv4-layer reassembly, the ETE determines whether the packet belongs to the SEAL protocol by checking for SEAL_PROTO in the outer IPv4 header (i.e., for simple IPv4 encapsulation) or for SEAL_PORT in the outer */IPv4 header (e.g., for '*'=UDP). When the ETE processes the IPv4 first fragment (i.e, one with DF=1 and Offset=0 in the IPv4 header) of a SEAL protocol IPv4 packet with (R=1; SEG=0) in the SEAL header, it sends a SEAL-encapsulated ICMPv4 Fragmentation Needed message back to the ITE with the MTU field set to 0. (Note that setting a non-zero value in the MTU field of the ICMPv4 Fragmentation Needed message would be redundant with the length value in the IPv4 header of the first fragment, since this value is set to the correct path MTU through in-the-network fragmentation. Setting the MTU field to 0 therefore avoids the ambiguous case in which the MTU field and the IPv4 length field of the first fragment would record different non-zero values.)",
      "ja": "IPv4の層再構成の際に、ETEは例えば、*」の（パケットが外側* / IPv4ヘッダ外側IPv4ヘッダ（すなわち、シンプルIPv4のカプセル化のために）にSEAL_PROTOをチェックすることによって、またはSEAL_PORTためのシールプロトコルに属しているか否かを判断します「= UDP）。 ETE（すなわち、DFと1 = 1及びIPv4ヘッダに= 0オフセット）IPv4の最初のフラグメントを処理する場合（R = 1; SEG = 0）とのシールプロトコルIPv4パケットのシールヘッダには、シールを送信します（ICMPv4の断片化必要メッセージはのIPv4ヘッダの長さ値と冗長になるのMTUフィールドで非ゼロ値を設定することに注意してください0に設定MTUフィールドバックITEにICMPv4の断片化必要メッセージを-encapsulatedこの値は、イン・ネットワークフラグメンテーション。0 MTUフィールドを設定を通じて正しいパスMTUに設定されているので、最初の断片は、したがってMTUフィールドと最初の断片のIPv4の長さフィールドが異なる非記録することになるで曖昧な場合を回避します-zero値。）"
    },
    {
      "indent": 3,
      "text": "When the ETE processes a SEAL protocol IPv4 packet with (A=1; SEG=0) for which no IPv4 reassembly was required, or for which IPv4 reassembly was successful and the R bit was not set, it sends a SEAL-encapsulated ICMPv4 Fragmentation Needed message back to the ITE with the MTU value set to 0. Note therefore that when both the A and R bits are set and fragmentation occurs, the ETE only sends a single ICMPv4 Fragmentation Needed message, i.e., it does not send two separate messages (one for the first fragment and a second for the reassembled whole SEAL packet).",
      "ja": "何IPv4の再構成が必要とされなかったため、またはIPv4再構成が成功したとRビットがセットされていないし、それがシールカプセル化ICMPv4のフラグメンテーションを送信するために、ETEは（SEG = 0 A = 1）とのシールプロトコルIPv4パケットを処理するとき両方のA及びRビットが設定され、断片化が発生している場合、ETEは単一ICMPv4の断片化に必要なメッセージ、すなわちを送信することが0注に設定MTU値とメッセージバックITEに必要な、それは、2つの別個のメッセージを送信しません（最初の断片用と再組み立て全体SEALパケットの秒）。"
    },
    {
      "indent": 3,
      "text": "The ETE prepares the ICMPv4 Fragmentation Needed message by\nencapsulating as much of the first fragment (or the non-fragmented\npacket) as possible in outer */SEAL/*/IPv4 headers without the length\nof the message exceeding 576 bytes, as shown in Figure 3:",
      "raw": true
    },
    {
      "indent": 6,
      "text": "+-------------------------+ -\n|                         |   ~ Outer */SEAL/*/IPv4 hdrs~   |\n|                         |   |\n+-------------------------+   |\n|      ICMPv4 Header      |   |\n|(Dest Unreach; Frag Need)|   |\n+-------------------------+   |\n|                         |    > Up to 576 bytes\n~    IP/*/SEAL/*/IPv4     ~   |\n~ hdrs of packet/fragment ~   |\n|                         |   |\n+-------------------------+   |\n|                         |   |\n~ Data of packet/fragment ~   |\n|                         |   /\n+-------------------------+ -",
      "raw": true
    },
    {
      "indent": 7,
      "text": "Figure 3: SEAL-Encapsulated ICMPv4 Fragmentation Needed Message",
      "ja": "図3：SEALカプセル化ICMPv4の断片化必要メッセージ"
    },
    {
      "indent": 3,
      "text": "The ETE next sets A=0, R=0, and SEG=0 in the outer SEAL header, sets the SEAL_ID the same as for any SEAL packet, then sets the SEAL Next Header field and the fields of the outer */IPv4 headers the same as for ordinary SEAL encapsulation. The ETE then sets the outer IPv4 destination and source addresses to the source and destination addresses (respectively) of the packet/fragment. If the destination address in the packet/fragment was multicast, the ETE instead sets the outer IPv4 source address to an address assigned to the underlying IPv4 interface. The ETE finally sends the SEAL-encapsulated ICMPv4 message to the ITE the same as specified in Section 4.2.5, except that when the A bit in the packet/fragment is not set, the ETE sends the messages subject to rate limiting since it is not entirely critical that all fragmentation be reported to the ITE.",
      "ja": "外側シールヘッダにETE次集合A = 0、R = 0、及びSEG = 0、SEAL_IDは次にSEAL次ヘッダフィールドと外側* / IPv4のヘッダのフィールドを設定し、任意SEALパケットのと同じ設定通常のSEALのカプセル化の場合と同じ。 ETEは、パケット/フラグメントの送信元アドレスと宛先アドレス（それぞれ）に外側のIPv4宛先及び送信元アドレスを設定します。パケット/断片中の宛先アドレスがマルチキャストである場合、ETEではなく、基礎となるIPv4インタフェースに割り当てられたアドレスに、外側のIPv4ソースアドレスを設定します。 ETEは、最終的に、パケット/断片中のビットが設定されていない場合、それがあるので、ETEは、レート制限の対象メッセージを送信することを除いて、セクション4.2.5で指定された同じITEにシール封入さICMPv4のメッセージを送信しますすべての断片化は、ITEに報告することを全く重要ではありません。"
    },
    {
      "indent": 0,
      "text": "4.3.4. SEAL-Layer Reassembly",
      "section_title": true,
      "ja": "4.3.4。 SEAL-レイヤ再構築"
    },
    {
      "indent": 3,
      "text": "Following IPv4 reassembly of a SEAL packet with (RSV!=0; SEG=0), if the packet is not a SEAL-encapsulated ICMPv4 message, the ETE generates a SEAL-encapsulated ICMPv4 Parameter Problem message with pointer set to the flags field in the SEAL header, sends the message back to the ITE in the same manner specified in Section 4.3.3, then drops the packet. For all other SEAL packets, the ETE adds the packet to a SEAL-Layer pending-reassembly queue if either the M bit or the SEG field in the SEAL header is non-zero.",
      "ja": "（！RSV = 0; SEG = 0）とのシールパケットのIPv4の再構成の後、パケットは、シール封入ICMPv4のメッセージでない場合、ETEは中フラグフィールドへのポインタが設定されたSEAL封入ICMPv4のパラメータ問題メッセージを生成しますシールヘッダは、パケットをドロップし、セクション4.3.3で指定された同じ方法でバックITEにメッセージを送信します。シールヘッダ内のMビットまたはSEGフィールドのいずれかがゼロでない場合、他のすべてのSEALパケットについて、ETEは、シール層保留リアセンブリキューにパケットを追加します。"
    },
    {
      "indent": 3,
      "text": "The ETE performs SEAL-layer reassembly through simple in-order concatenation of the encapsulated segments from N consecutive SEAL protocol packets from the same mid-layer packet. SEAL-layer reassembly requires the ETE to maintain a cache of recently received segments for a hold time that would allow for reasonable inter-segment delays. The ETE uses a SEAL maximum segment lifetime of 15 seconds for this purpose, i.e., the time after which it will discard an incomplete reassembly. However, the ETE should also actively discard any pending reassemblies that clearly have no opportunity for completion, e.g., when a considerable number of new SEAL packets have been received before a packet that completes a pending reassembly has arrived.",
      "ja": "ETEは、同じ中間層パケットからのN個の連続SEAL・プロトコル・パケットからカプセル化されたセグメントの単純なインオーダー連結を介してシール層の再組み立てを行います。 SEAL-層の再構築には、合理的なセグメント間の遅延を可能にするホールド時間のために最近受信したセグメントのキャッシュを維持するために、ETEが必要です。 ETEは、即ち、この目的のために、それは不完全な再組み立てを廃棄するまでの時間を15秒のSEAL最大セグメント寿命を使用します。しかし、ETEも積極的に明確に完了のための機会がない保留中の再組み立てを破棄しなければならない、例えば、ときに新しいSEALパケットの相当数は、保留中の再構築が到着したパケット完了する前に受信されています。"
    },
    {
      "indent": 3,
      "text": "The ETE reassembles the mid-layer packet segments in SEAL protocol packets that contain segment numbers 0 through N-1, with M=1/0 in non-final/final segments, respectively, and with consecutive SEAL_ID values. That is, for an N-segment mid-layer packet, reassembly entails the concatenation of the SEAL-encapsulated segments with (segment 0, SEAL_ID i), followed by (segment 1, SEAL_ID ((i + 1) mod 2^32)), etc. up to (segment N-1, SEAL_ID ((i + N-1) mod 2^32)). (For SEAL encapsulations specifically designed for traversal of IPv4 NATs, the ETE instead uses only a 16-bit SEAL_ID value, and uses mod 2^16 arithmetic to associate the segments of the same packet.)",
      "ja": "ETEは、それぞれM = 1/0非最終/最終セグメントで、と、および連続SEAL_ID値と、N-1を介してセグメント番号0を含むSEALプロトコルパケットにおける中間層のパケットセグメントを再構築します。すなわち、Nセグメント中間層パケットのため、再組み立ては（セグメント0、SEAL_ID i）は、（セグメント1、SEAL_ID（（I + 1）MOD 2 ^ 32）が続くとのシール封入セグメントの連結を伴う、あります）、等まで）（セグメントN-1、SEAL_ID（（iがN-1）MOD 2 ^ 32 +）。 （具体的にはIPv4のNATトラバーサルのために設計されたSEALのカプセル化のために、ETE代わりのみ16ビットSEAL_ID値を使用し、同じパケットのセグメントを関連付けるためのmod 2 ^ 16の演算を使用します。）"
    },
    {
      "indent": 0,
      "text": "4.3.5. Delivering Packets to Upper Layers",
      "section_title": true,
      "ja": "4.3.5。上位層にパケットを届けます"
    },
    {
      "indent": 3,
      "text": "Following SEAL-layer reassembly, the ETE silently discards the reassembled packet if it was a NULL packet (see Section 4.2.4). In the same manner, the ETE silently discards any reassembled mid-layer packet larger than (2KB - OHLEN) that either experienced IPv4 fragmentation or did not arrive as a single SEAL segment.",
      "ja": "それがNULLパケットであれば、シール層の再構築に続いて、ETEは黙って（4.2.4項を参照）再構成されたパケットを破棄します。いずれかの経験豊富なIPv4のフラグメンテーションことまたは単一のシールセグメントとして到着しなかった - 同様に、ETEはサイレント（OHLEN 2キロバイト）よりも大きい任意の再組立中間層パケットを破棄する。"
    },
    {
      "indent": 3,
      "text": "Next, if the ETE determines that the inner packet would cause an ICMPv4 error message to be generated, it generates a SEAL-encapsulated ICMPv4 error message, sends the message back to the ITE in the same manner specified in Section 4.3.3, then either accepts or drops the packet according to the type of error. Otherwise, the ETE delivers the inner packet to the upper-layer protocol indicated in the Next Header field.",
      "ja": "次に、ETEは、内部パケットはICMPv4のエラーメッセージを発生させるであろうと判断した場合、それはシールカプセル化ICMPv4のエラーメッセージを生成し、いずれかその後、セクション4.3.3で指定された同じ方法でバックITEにメッセージを送信受け入れるか、エラーの種類に応じてパケットをドロップします。そうでない場合、ETEは、次のヘッダフィールドで示された上位層プロトコルに内部パケットを配信します。"
    },
    {
      "indent": 0,
      "text": "5. SEAL Protocol Specification - Transport Mode",
      "section_title": true,
      "ja": "5. SEALプロトコル仕様 - トランスポートモード"
    },
    {
      "indent": 3,
      "text": "Section 4 specifies the operation of SEAL in \"tunnel mode\", i.e., when there are both an inner and outer IP layer with a SEAL encapsulation layer between. However, the SEAL protocol can also be used in a \"transport mode\" of operation within a subnetwork region in which the inner-layer corresponds to a transport layer protocol (e.g., UDP, TCP, etc.) instead of an inner IP layer.",
      "ja": "セクション4は両方ともとの間のシールの封止層と、内側と外側のIP層が存在する場合、すなわち、「トンネルモード」でSEALの動作を指定します。しかし、SEALのプロトコルは、内層は、トランスポート層プロトコル（例えば、UDP、TCPなど）に対応するサブ領域の代わりに内部IP層内操作の「トランスポートモード」で使用することができます。"
    },
    {
      "indent": 3,
      "text": "For example, two TCP endpoints connected to the same subnetwork region can negotiate the use of transport-mode SEAL for a connection by inserting a 'SEAL_OPTION' TCP option during the connection establishment phase. If both TCPs agree on the use of SEAL, their protocol messages will be carried as TCP/SEAL/IPv4 and the connection will be serviced by the SEAL protocol using TCP (instead of an encapsulating tunnel endpoint) as the transport layer protocol. The SEAL protocol for transport mode otherwise observes the same specifications as for Section 4.",
      "ja": "例えば、同じサブネットワーク領域に接続された2つのTCPエンドポイントは、接続確立フェーズ中に「SEAL_OPTION」TCPオプションを挿入して接続するためのトランスポートモードシールの使用を交渉することができます。両方のTCPシールの使用に同意する場合、それらのプロトコルメッセージは、TCP / SEAL / IPv4のように実施され、接続は、トランスポート層プロトコルとしてTCPを使用して、SEALプロトコル（代わりのカプセル化トンネル終点）によってサービスされます。トランスポートモード用のシール・プロトコルは、そうでなければ第4の場合と同じ仕様を観察します。"
    },
    {
      "indent": 0,
      "text": "6. Link Requirements",
      "section_title": true,
      "ja": "6.リンクの要件"
    },
    {
      "indent": 3,
      "text": "Subnetwork designers are expected to follow the recommendations in Section 2 of [RFC3819] when configuring link MTUs.",
      "ja": "サブネットワークの設計者は、リンクのMTUを設定するときに、[RFC3819]の第2節の推奨事項に従うことが期待されています。"
    },
    {
      "indent": 0,
      "text": "7. End System Requirements",
      "section_title": true,
      "ja": "7.エンドシステム要件"
    },
    {
      "indent": 3,
      "text": "SEAL provides robust mechanisms for returning PTB messages; however, end systems that send unfragmentable IP packets larger than 1500 bytes are strongly encouraged to use Packetization Layer Path MTU Discovery per [RFC4821].",
      "ja": "シールは、PTBメッセージを返すための強力なメカニズムを提供します。しかし、1500バイトを超えるフラグメント化不能IPパケットを送信するエンドシステムが強く[RFC4821]あたりのパケット化レイヤのパスMTUディスカバリーを使用することをお勧めします。"
    },
    {
      "indent": 0,
      "text": "8. Router Requirements",
      "section_title": true,
      "ja": "8.ルーターの要件"
    },
    {
      "indent": 3,
      "text": "IPv4 routers within the subnetwork are strongly encouraged to implement IPv4 fragmentation such that the first fragment is the largest and approximately the size of the underlying link MTU, i.e., they should avoid generating runt first fragments.",
      "ja": "サブネットワーク内のIPv4ルーターが強く最初のフラグメントが最大の基礎となるリンクMTUのおよそのサイズになるようにIPv4の断片化を実現することが奨励されている、すなわち、それらは、ラント最初のフラグメントを生成することは避けてください。"
    },
    {
      "indent": 0,
      "text": "9. IANA Considerations",
      "section_title": true,
      "ja": "9. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "SEAL_PROTO, SEAL_PORT, and SEAL_OPTION are taken from their respective range of experimental values documented in [RFC3692] and [RFC4727]. These values are for experimentation purposes only, and not to be used for any kind of deployments (i.e., they are not to be shipped in any products).",
      "ja": "SEAL_PROTO、SEAL_PORT、及びSEAL_OPTIONは[RFC3692]及び[RFC4727]に記載された実験値のそれぞれの範囲から取られます。これらの値は、実験の目的のためであり、展開の任意の種類（すなわち、彼らはすべての製品に同梱されるべきではない）のために使用してはなりません。"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Unlike IPv4 fragmentation, overlapping fragment attacks are not possible due to the requirement that SEAL segments be non-overlapping.",
      "ja": "IPv4の断片化とは異なり、重複フラグメント攻撃が原因シールセグメントは重複しないことが要求に不可能です。"
    },
    {
      "indent": 3,
      "text": "An amplification/reflection attack is possible when an attacker sends IPv4 first fragments with spoofed source addresses to an ETE, resulting in a stream of ICMPv4 Fragmentation Needed messages returned to a victim ITE. The encapsulated segment of the spoofed IPv4 first fragment provides mitigation for the ITE to detect and discard spurious ICMPv4 Fragmentation Needed messages.",
      "ja": "攻撃者は、メッセージが被害者ITEに戻す必要ICMPv4の断片化の流れの中で得られ、ETEに偽装された送信元アドレスとIPv4の最初のフラグメントを送信するときに増幅/反射攻撃が可能です。スプーフィングされたIPv4の最初のフラグメントのカプセル化されたセグメントを検出し、スプリアスICMPv4のフラグメンテーション必要なメッセージを廃棄するITEための緩和を提供します。"
    },
    {
      "indent": 3,
      "text": "The SEAL header is sent in-the-clear (outside of any IPsec/ESP encapsulations) the same as for the outer */IPv4 headers. As for IPv6 extension headers, the SEAL header is protected only by L2 integrity checks and is not covered under any L3 integrity checks.",
      "ja": "シールヘッダは、外側* / IPv4のヘッダと同様に、クリア（任意のIPsec / ESPカプセル化の外側）に送られます。 IPv6拡張ヘッダとして、シールヘッダは、L2整合性チェックによって保護され、任意L3の整合性チェックの下に覆われていません。"
    },
    {
      "indent": 0,
      "text": "11. Related Work",
      "section_title": true,
      "ja": "11.関連研究"
    },
    {
      "indent": 3,
      "text": "Section 3.1.7 of [RFC2764] provides a high-level sketch for supporting large tunnel MTUs via a tunnel-level segmentation and reassembly capability to avoid IP level fragmentation, which is in part the same approach used by tunnel-mode SEAL. SEAL could therefore be considered as a fully functioned manifestation of the method postulated by that informational reference; however, SEAL also supports other modes of operation including transport-mode and duplicate packet detection.",
      "ja": "[RFC2764]のセクション3.1.7は、部分的にトンネルモードシールによって使用されるのと同じアプローチであるIPレベルの断片化を避けるために、トンネルレベルのセグメンテーションとリアセンブリ能力を介して大きなトンネルのMTUをサポートするための高レベルのスケッチを提供します。 SEALは、したがって、その情報を参照により仮定方法の完全に機能顕現とみなすことができます。しかし、シールはまた、トランスポートモードと重複パケット検出を含む他の動作モードをサポートしています。"
    },
    {
      "indent": 3,
      "text": "Section 3 of [RFC4459] describes inner and outer fragmentation at the tunnel endpoints as alternatives for accommodating the tunnel MTU; however, the SEAL protocol specifies a mid-layer segmentation and reassembly capability that is distinct from both inner and outer fragmentation.",
      "ja": "[RFC4459]のセクション3は、トンネルMTUを収容するための代替手段としてトンネルエンドポイントで内側と外側の断片化を記載しています。しかし、SEALプロトコルは、内側と外側の両方のフラグメンテーションは区別される中間層のセグメンテーションとリアセンブリ能力を特定します。"
    },
    {
      "indent": 3,
      "text": "Section 4 of [RFC2460] specifies a method for inserting and processing extension headers between the base IPv6 header and transport layer protocol data. The SEAL header is inserted and processed in exactly the same manner.",
      "ja": "[RFC2460]のセクション4は、ベースのIPv6ヘッダとトランスポート層プロトコルデータ間拡張ヘッダを挿入して処理する方法を指定します。シールヘッダが挿入され、正確に同じ方法で処理されます。"
    },
    {
      "indent": 3,
      "text": "The concepts of path MTU determination through the report of fragmentation and extending the IP Identification field were first proposed in deliberations of the TCP-IP mailing list and the Path MTU Discovery Working Group (MTUDWG) during the late 1980's and early 1990's. SEAL supports a report fragmentation capability using bits in an extension header (the original proposal used a spare bit in the IP header) and supports ID extension through a 16-bit field in an extension header (the original proposal used a new IP option). A historical analysis of the evolution of these concepts, as well as the development of the eventual path MTU discovery mechanism for IP, appears in Appendix A of this document.",
      "ja": "断片化のレポートとIP識別フィールドを拡張して、パスMTUの決意の概念は、最初のTCP-IPメーリングリストと1980年代と1990年代前半後半の間にパスMTUディスカバリワーキンググループ（MTUDWG）の審議で提案されました。シールは、拡張ヘッダ内のビットを使用してレポートの断片化能力を（元の提案は、IPヘッダ内の予備ビットを使用）をサポートし、拡張ヘッダ内の16ビットのフィールドを介してID拡張子を（元の提案が新しいIPオプションを使用）をサポートします。これらの概念の進化の歴史的な分析だけでなく、IPのための最終的なパスMTUディスカバリメカニズムの開発は、このドキュメントの付録Aに表示されます。"
    },
    {
      "indent": 0,
      "text": "12. SEAL Advantages over Classical Methods",
      "section_title": true,
      "ja": "古典的な方法を超える12 SEALのメリット"
    },
    {
      "indent": 3,
      "text": "The SEAL approach offers a number of distinct advantages over the classical path MTU discovery methods [RFC1191] [RFC1981]:",
      "ja": "SEALのアプローチは、古典経路上の明確な利点の数MTU探索方法[RFC1191]、[RFC1981]を提供します。"
    },
    {
      "indent": 3,
      "text": "1. Classical path MTU discovery *always* results in packet loss when an MTU restriction is encountered. Using SEAL, IPv4 fragmentation provides a short-term interim mechanism for ensuring that packets are delivered while SEAL adjusts its packet sizing parameters.",
      "ja": "1.クラシックパスMTUディスカバリ* MTU制限が発生したパケットロスで常に*結果。シールを使用して、IPv4の断片化は、シールは、そのパケットのサイズパラメータを調整しながら、パケットが配信されることを確保するための短期的な中間機構を提供します。"
    },
    {
      "indent": 3,
      "text": "2. Classical path MTU discovery requires that routers generate an ICMP PTB message for *all* packets lost due to an MTU restriction; this situation is exacerbated at high data rates and becomes severe for in-the-network tunnels that service many communicating end systems. Since SEAL ensures that packets no larger than S_MRU are delivered, however, it is sufficient for the ETE to return ICMPv4 Fragmentation Needed messages subject to rate limiting and not for every packet-in-error.",
      "ja": "2.クラシックパスMTUディスカバリは、ルーターがMTU制限に起因して失われた*すべて*パケットに対してICMP PTBメッセージを生成することが必要です。このような状況では、高いデータ転送速度で悪化し、多くのエンドシステムの通信サービスでは、ネットワークのトンネルのために深刻になります。シールがS_MRUよりパケット大きくないが配信されることが保証されますので、ETEはICMPv4の断片化は、すべてのパケット・イン・エラーのレート制限の対象ではなく、メッセージを必要として返すようにするために、しかし、それは十分です。"
    },
    {
      "indent": 3,
      "text": "3. Classical path MTU may require several iterations of dropping packets and returning ICMP PTB messages until an acceptable path MTU value is determined. Under normal circumstances, SEAL determines the correct packet sizing parameters in a single iteration.",
      "ja": "許容されるパスMTU値が決定されるまで3古典経路MTUは、パケットをドロップし、ICMP PTBメッセージを返すいくつかの反復を必要とするかもしれません。通常の状況下では、シールは、1回の反復で正しいパケットサイズパラメータを決定します。"
    },
    {
      "indent": 3,
      "text": "4. Using SEAL, ordinary packets serve as implicit probes without exposing data to unnecessary loss. SEAL also provides an explicit probing mode not available in the classic methods.",
      "ja": "4.シールを用い、通常のパケットが不必要な損失にデータを公開することなく、暗黙的なプローブとして働きます。シールはまた、古典的な方法では使用できません明示的なプロービング・モードを提供します。"
    },
    {
      "indent": 3,
      "text": "5. Using SEAL, ETEs encapsulate ICMP error messages in an outer SEAL header such that packet-filtering network middleboxes can distinguish them from \"raw\" ICMP messages that may be generated by an attacker.",
      "ja": "5.シールを用い、ETESは、パケットフィルタリングネットワーク中間装置は、攻撃者によって生成することができる「生」のICMPメッセージから区別することができるように外側シールヘッダにICMPエラーメッセージをカプセル化します。"
    },
    {
      "indent": 3,
      "text": "6. Most importantly, all SEAL packets have a 32-bit Identification value that can be used for duplicate packet detection purposes and to match ICMP error messages with actual packets sent without requiring per-packet state. Moreover, the SEAL ITE can be configured to accept ICMP feedback only from the legitimate ETE; hence, the packet spoofing-related denial-of-service attack vectors open to the classical methods are eliminated.",
      "ja": "6.最も重要なことは、すべてのSEALパケットが重複パケット検出のために使用することができ、パケットごとの状態を必要とせずに、送信された実際のパケットとICMPエラーメッセージと一致するように32ビットの識別値を有します。また、SEAL ITEのみ正当ETEからICMPフィードバックを受け入れるように構成することができます。従って、古典的な方法に開いパケットスプーフィング関連サービス拒否攻撃ベクトルが除去されます。"
    },
    {
      "indent": 3,
      "text": "In summary, the SEAL approach represents an architecturally superior method for ensuring that packets of various sizes are either delivered or deterministically dropped. When end systems use their own end-to-end MTU determination mechanisms [RFC4821], the SEAL advantages are further enhanced.",
      "ja": "要約すると、SEALのアプローチは、様々なサイズのパケットがいずれかの送達又は決定論ドロップされることを保証するアーキテクチャの優れた方法を表します。エンドシステムは、独自のエンドツーエンドMTU判定メカニズム[RFC4821]を使用する場合は、シール効果がさらに高められます。"
    },
    {
      "indent": 0,
      "text": "13. Acknowledgments",
      "section_title": true,
      "ja": "13.謝辞"
    },
    {
      "indent": 3,
      "text": "The following individuals are acknowledged for helpful comments and suggestions: Jari Arkko, Fred Baker, Iljitsch van Beijnum, Teco Boot, Bob Braden, Brian Carpenter, Steve Casner, Ian Chakeres, Remi Denis-Courmont, Aurnaud Ebalard, Gorry Fairhurst, Joel Halpern, John Heffner, Thomas Henderson, Bob Hinden, Christian Huitema, Joe Macker, Matt Mathis, Erik Nordmark, Dan Romascanu, Dave Thaler, Joe Touch, Magnus Westerlund, Robin Whittle, James Woodyatt, and members of the Boeing PhantomWorks DC&NT group.",
      "ja": "ヤリArkko、フレッド・ベイカー、IljitschバンBeijnum、テコブーツ、ボブブレーデン、ブライアン・カーペンター、スティーブCasner、イアンChakeres、レミデニス・Courmont、Aurnaud Ebalard、Gorry Fairhurst、ジョエル・ハルパーン、以下の個人は有益なコメントや提案を認めていますジョンHeffner、トーマス・ヘンダーソン、ボブHindenとクリスチャンのHuitema、ジョーMacker、マット・マシス、エリックNordmarkと、ダンRomascanu、デーブターラー、ジョー・タッチ、マグヌスウェスター、ロビンWhittleさん、ジェームズWoodyatt、およびボーイングPhantomWorks DC＆NTグループのメンバー。"
    },
    {
      "indent": 3,
      "text": "Path MTU determination through the report of fragmentation was first proposed by Charles Lynn on the TCP-IP mailing list in 1987. Extending the IP identification field was first proposed by Steve Deering on the MTUDWG mailing list in 1989.",
      "ja": "断片化のレポートを通るパスMTUの決定は、最初のIP識別フィールドが最初に1989年にMTUDWGメーリングリストでスティーブデアリングによって提案された拡張1987年にTCP-IPのメーリングリストでチャールズ・リンによって提案されました。"
    },
    {
      "indent": 0,
      "text": "14. References",
      "section_title": true,
      "ja": "14.参考文献"
    },
    {
      "indent": 0,
      "text": "14.1. Normative References",
      "section_title": true,
      "ja": "14.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC0791] Postel, J., \"Internet Protocol\", STD 5, RFC 791, September 1981.",
      "ja": "[RFC0791]ポステル、J.、 \"インターネットプロトコル\"、STD 5、RFC 791、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC0792] Postel, J., \"Internet Control Message Protocol\", STD 5, RFC 792, September 1981.",
      "ja": "[RFC0792]ポステル、J.、 \"インターネット制御メッセージプロトコル\"、STD 5、RFC 792、1981年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2460] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", RFC 2460, December 1998.",
      "ja": "[RFC2460]デアリング、S.とR. Hindenと、 \"インターネットプロトコルバージョン6（IPv6）の仕様\"、RFC 2460、1998年12月。"
    },
    {
      "indent": 0,
      "text": "14.2. Informative References",
      "section_title": true,
      "ja": "14.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[FOLK] C, C., D, D., and k. k, \"Beyond Folklore: Observations on Fragmented Traffic\", December 2002.",
      "ja": "【フォーク】C、C、D、D、及びK。 K、「ビヨンド民俗：断片化されたトラフィックの観察」、2002年12月。"
    },
    {
      "indent": 3,
      "text": "[FRAG] Kent, C. and J. Mogul, \"Fragmentation Considered Harmful\", October 1987.",
      "ja": "[FRAG]ケント、C.及びJ.モーグルは、1987年10月、 \"断片化は、有害であると考えられました\"。"
    },
    {
      "indent": 3,
      "text": "[MTUDWG] \"IETF MTU Discovery Working Group mailing list, gatekeeper.dec.com/pub/DEC/WRL/mogul/mtudwg-log, November 1989 - February 1995.\".",
      "ja": "[MTUDWG] \"IETF MTUディスカバリーワーキンググループメーリングリスト、gatekeeper.dec.com/pub/DEC/WRL/mogul/mtudwg-log、1989年11月 -  1995年2月\"。"
    },
    {
      "indent": 3,
      "text": "[RFC1063] Mogul, J., Kent, C., Partridge, C., and K. McCloghrie, \"IP MTU discovery options\", RFC 1063, July 1988.",
      "ja": "[RFC1063]ムガール人、J.、ケント、C.、ヤマウズラ、C.、およびK. McCloghrie、 \"IP MTUディスカバリオプション\"、RFC 1063、1988年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC1191] Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191, November 1990.",
      "ja": "[RFC1191]ムガール人、J.とS.デアリング、 \"パスMTUディスカバリ\"、RFC 1191、1990年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC1981] McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery for IP version 6\", RFC 1981, August 1996.",
      "ja": "[RFC1981]マッキャン、J.、デアリング、S.、およびJ.ムガール人、RFC 1981、1996年8月 \"IPバージョン6のパスMTUディスカバリー\"。"
    },
    {
      "indent": 3,
      "text": "[RFC2003] Perkins, C., \"IP Encapsulation within IP\", RFC 2003, October 1996.",
      "ja": "[RFC2003]パーキンス、C.、 \"IP内IPカプセル化\"、RFC 2003、1996年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC2004] Perkins, C., \"Minimal Encapsulation within IP\", RFC 2004, October 1996.",
      "ja": "[RFC2004]パーキンス、C.、 \"IP内の最小カプセル化\"、RFC 2004、1996年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC2764] Gleeson, B., Lin, A., Heinanen, J., Armitage, G., and A. Malis, \"A Framework for IP Based Virtual Private Networks\", RFC 2764, February 2000.",
      "ja": "[RFC2764]グリーソン、B.、林、A.、Heinanen、J.、アーミテージ、G.、およびA. Malis、 \"IPベースの仮想プライベートネットワークのための枠組み\"、RFC 2764、2000年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC2923] Lahey, K., \"TCP Problems with Path MTU Discovery\", RFC 2923, September 2000.",
      "ja": "[RFC2923]レイヒー、K.、 \"パスMTUディスカバリとTCPの問題\"、RFC 2923、2000年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC3692] Narten, T., \"Assigning Experimental and Testing Numbers Considered Useful\", BCP 82, RFC 3692, January 2004.",
      "ja": "[RFC3692] Narten氏、T.、 \"役に立つと考えられ割り当て実験とテスト番号\"、BCP 82、RFC 3692、2004年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC3819] Karn, P., Ed., Bormann, C., Fairhurst, G., Grossman, D., Ludwig, R., Mahdavi, J., Montenegro, G., Touch, J., and L. Wood, \"Advice for Internet Subnetwork Designers\", BCP 89, RFC 3819, July 2004.",
      "ja": "[RFC3819]カーン、P.編、ボルマン、C.、Fairhurst、G.、グロスマン、D.、ルートヴィヒ、R.、Mahdavi、J.、モンテネグロ、G.、タッチ、J.、およびL.ウッド、BCP 89、RFC 3819、2004年7月、 \"インターネットサブネットワークデザイナーのためのアドバイス\"。"
    },
    {
      "indent": 3,
      "text": "[RFC4213] Nordmark, E. and R. Gilligan, \"Basic Transition Mechanisms for IPv6 Hosts and Routers\", RFC 4213, October 2005.",
      "ja": "[RFC4213] Nordmarkと、E.とR.ギリガン、 \"IPv6ホストとルータのための基本的な変遷メカニズム\"、RFC 4213、2005年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC4301] Kent, S. and K. Seo, \"Security Architecture for the Internet Protocol\", RFC 4301, December 2005.",
      "ja": "[RFC4301]ケント、S.とK. Seo、 \"インターネットプロトコルのためのセキュリティアーキテクチャ\"、RFC 4301、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC4380] Huitema, C., \"Teredo: Tunneling IPv6 over UDP through Network Address Translations (NATs)\", RFC 4380, February 2006.",
      "ja": "[RFC4380]のHuitema、C.、 \"のTeredo：ネットワークアドレス変換を通じてUDP経由トンネリングのIPv6器（NAT）\"、RFC 4380、2006年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC4459] Savola, P., \"MTU and Fragmentation Issues with In-the-Network Tunneling\", RFC 4459, April 2006.",
      "ja": "[RFC4459]、RFC 4459 Savola、P.、 \"イン・ネットワークのトンネリングを使用したMTUと断片化の問題\"、2006年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC4727] Fenner, B., \"Experimental Values In IPv4, IPv6, ICMPv4, ICMPv6, UDP, and TCP Headers\", RFC 4727, November 2006.",
      "ja": "[RFC4727]フェナー、B.、RFC 4727、2006年11月 \"のIPv4、IPv6の、ICMPv4の、ICMPv6の、UDP、およびTCPヘッダには実験値\"。"
    },
    {
      "indent": 3,
      "text": "[RFC4821] Mathis, M. and J. Heffner, \"Packetization Layer Path MTU Discovery\", RFC 4821, March 2007.",
      "ja": "[RFC4821]マシス、M.とJ. Heffner、 \"パケット化レイヤのパスMTUディスカバリ\"、RFC 4821、2007年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4963] Heffner, J., Mathis, M., and B. Chandler, \"IPv4 Reassembly Errors at High Data Rates\", RFC 4963, July 2007.",
      "ja": "[RFC4963] Heffner、J.、マティス、M.、およびB.チャンドラー、 \"高速データレートでのIPv4の再構築エラー\"、RFC 4963、2007年7月。"
    },
    {
      "indent": 3,
      "text": "[TCP-IP] \"Archive/Hypermail of Early TCp-IP Mail List\", http://www-mice.cs.ucl.ac.uk/multimedia/misc/tcp_ip/, May 1987 - May 1990.",
      "ja": "[TCP-IP]、http://www-mice.cs.ucl.ac.uk/multimedia/misc/tcp_ip/ \"早期TCP-IPメール一覧のアーカイブ/のhypermail\"、1987年5月から1990年5月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Historic Evolution of PMTUD",
      "ja": "付録A. PMTUDの歴史的進化"
    },
    {
      "indent": 3,
      "text": "(Taken from \"Neighbor Affiliation Protocol for IPv6-over-(foo)-over-IPv4\"; written 10/30/2002):",
      "ja": "：（2002年10月30日に書かれた \"-over-IPv4からIPv6-オーバー（FOO）に関する近隣所属プロトコル\" から撮影）"
    },
    {
      "indent": 3,
      "text": "The topic of Path MTU discovery (PMTUD) saw a flurry of discussion and numerous proposals in the late 1980's through early 1990. The initial problem was posed by Art Berggreen on May 22, 1987 in a message to the TCP-IP discussion group [TCP-IP]. The discussion that followed provided significant reference material for [FRAG]. An IETF Path MTU Discovery Working Group [MTUDWG] was formed in late 1989 with charter to produce an RFC. Several variations on a very few basic proposals were entertained, including:",
      "ja": "最初の問題は、TCP-IPディスカッショングループへのメッセージの中で1987年5月22日にアートBerggreenによってもたらされたパスMTUディスカバリ（PMTUD）の話題が早い1990年を通じて1980年代後半に議論し、数多くの提案の突風を見た[TCP -IP]。続く議論は[FRAG]のための重要な参考資料を提供しました。 IETFパスMTUディスカバリワーキンググループ[MTUDWG]はRFCを生産するためにチャーターで1989年後半に結成されました。非常にいくつかの基本的な提案のいくつかのバリエーションが、含めて楽しまれました。"
    },
    {
      "indent": 3,
      "text": "1. Routers record the PMTUD estimate in ICMP-like path probe messages (proposed in [FRAG] and later [RFC1063])",
      "ja": "1.ルータは、ICMPのようなパスプローブメッセージにPMTUD推定レコード（[FRAG]に提案を後で[RFC1063]）"
    },
    {
      "indent": 3,
      "text": "2. The destination reports any fragmentation that occurs for packets received with the \"RF\" (Report Fragmentation) bit set (Steve Deering's 1989 adaptation of Charles Lynn's Nov. 1987 proposal)",
      "ja": "2.先は（チャールズ・リンさん1987年11月提案のスティーブデアリングの1989適応）「RF」（レポート断片化）で受信したパケットのために発生した任意の断片化ビットが設定報告します"
    },
    {
      "indent": 3,
      "text": "3. A hybrid combination of 1) and Charles Lynn's Nov. 1987 (straw RFC draft by McCloughrie, Fox and Mogul on Jan 12, 1990)",
      "ja": "3.ハイブリッド1の組み合わせ）と1990年1月12日にMcCloughrie、フォックスとモーグルによってチャールズ・リンの1987年11月（わらRFCドラフト）"
    },
    {
      "indent": 3,
      "text": "4. Combination of the Lynn proposal with TCP (Fred Bohle, Jan 30, 1990)",
      "ja": "TCPとリンの提案の4コンビネーション（フレッド・ボーレ、1990年1月30日）"
    },
    {
      "indent": 3,
      "text": "5. Fragmentation avoidance by setting \"IP_DF\" flag on all packets and retransmitting if ICMPv4 \"fragmentation needed\" messages occur (Geof Cooper's 1987 proposal; later adapted into [RFC1191] by Mogul and Deering).",
      "ja": "すべてのパケットの「IP_DF」フラグを設定し、ICMPv4の「断片化必要」メッセージが発生した場合に再送5.フラグメンテーション回避（Geofクーパー1987提案は、後モーグルとデアリングによって[RFC1191]に適合します）。"
    },
    {
      "indent": 3,
      "text": "Option 1) seemed attractive to the group at the time, since it was believed that routers would migrate more quickly than hosts. Option 2) was a strong contender, but repeated attempts to secure an \"RF\" bit in the IPv4 header from the IESG failed and the proponents became discouraged. 3) was abandoned because it was perceived as too complicated, and 4) never received any apparent serious consideration. Proposal 5) was a late entry into the discussion from Steve Deering on Feb. 24th, 1990. The discussion group soon thereafter seemingly lost track of all other proposals and adopted 5), which eventually evolved into [RFC1191] and later [RFC1981].",
      "ja": "それはルータがホストよりも迅速に移行するであろうと考えられていたので、オプション1）は、一度にグループに魅力的に見えました。オプション2）は、強力な候補であったが、IESGからIPv4ヘッダの「RF」ビットを確保する繰り返しの試みは失敗し、提案者が推奨となりました。それはあまりにも複雑と知覚されたため、3）放棄された、および4）任意の見かけの真剣な検討を受け取ったことはありません。提案5）は1990年、最終的には[RFC1191]、後で[RFC1981]へと進化し、ディスカッショングループ、その後すぐに、一見他のすべての提案のトラックを失い、5を採用）、2月24日にスティーブデアリングから議論に遅れてエントリーしました。"
    },
    {
      "indent": 3,
      "text": "In retrospect, the \"RF\" bit postulated in 2) is not needed if a \"contract\" is first established between the peers, as in proposal 4) and a message to the MTUDWG mailing list from jrd@PTT.LCS.MIT.EDU on Feb 19. 1990. These proposals saw little discussion or rebuttal, and were dismissed based on the following the assertions:",
      "ja": "振り返ってみると、「契約」は最初の提案4のように、ピア間で確立されている場合、2で仮定「RF」ビット））が必要とされないとjrd@PTT.LCS.MIT.EDUからMTUDWGメーリングリストへのメッセージ2月19、1990年にこれらの提案は、ほとんど議論や反論を見て、次の主張に基づいて解雇されました。"
    },
    {
      "indent": 6,
      "text": "o routers upgrade their software faster than hosts",
      "ja": "Oルータは速く、ホストよりも彼らのソフトウェアをアップグレード"
    },
    {
      "indent": 6,
      "text": "o PCs could not reassemble fragmented packets",
      "ja": "O PCは断片化されたパケットを再構成ができませんでした"
    },
    {
      "indent": 6,
      "text": "o Proteon and Wellfleet routers did not reproduce the \"RF\" bit properly in fragmented packets",
      "ja": "OのProteonとウェルフリートルータは断片化されたパケットで適切に「RF」ビットを再現しませんでした"
    },
    {
      "indent": 6,
      "text": "o Ethernet-FDDI bridges would need to perform fragmentation (i.e., \"translucent\" not \"transparent\" bridging)",
      "ja": "OイーサネットFDDIブリッジは断片化を実行する必要がある（すなわち、架橋「半透明」「透明」ではありません）"
    },
    {
      "indent": 6,
      "text": "o the 16-bit IP_ID field could wrap around and disrupt reassembly at high packet arrival rates",
      "ja": "O 16ビットIP_IDフィールドは、ラップアラウンドと高いパケット到着レートで再構築が中断する可能性"
    },
    {
      "indent": 3,
      "text": "The first four assertions, although perhaps valid at the time, have been overcome by historical events leaving only the final to consider. But, [FOLK] has shown that IP_ID wraparound simply does not occur within several orders of magnitude the reassembly timeout window on high-bandwidth networks.",
      "ja": "最初の4つのアサーションは、一度におそらく有効であるが、検討する唯一の決勝を残す歴史的な出来事によって克服されています。しかし、[FOLK]はIP_IDのラップアラウンドは、単に数桁以内の高帯域幅のネットワーク上で再構築タイムアウトウィンドウが発生していないことが示されています。"
    },
    {
      "indent": 3,
      "text": "(Author's 2/11/08 note: this final point was based on a loose interpretation of [FOLK], and is more accurately addressed in [RFC4963].)",
      "ja": "（著者の2/11/08注：この最後のポイントは、[FOLK]の緩い解釈に基づいていた、そしてより正確に、[RFC4963]で扱われています。）"
    },
    {
      "indent": 0,
      "text": "Appendix B. Reliability Extensions",
      "ja": "付録B.信頼性の拡張"
    },
    {
      "indent": 3,
      "text": "The SEAL header includes a Reserved (RSV) field that is set to zero for the purpose of this specification. This field may be used by future updates to this specification for the purpose of improved reliability in the face of loss due to congestion, signal intermittence, etc. Automatic Repeat-ReQuest (ARQ) mechanisms are used to ensure reliable delivery between the endpoints of physical links (e.g., on-link neighbors in an IEEE 802.11 network) as well as between the endpoints of an end-to-end transport (e.g., the endpoints of a TCP connection). However, ARQ mechanisms may be poorly suited to in-the-network elements such as the SEAL ITE and ETE, since retransmission of lost segments would require unacceptable state maintenance at the ITE and would result in packet reordering within the subnetwork.",
      "ja": "シールヘッダは、本明細書の目的のためにゼロに設定されている予約（RSV）フィールドを含みます。このフィールドは、自動再送要求（ARQ）機構が物理のエンドポイント間の信頼できる配信を保証するために使用されるなど、信号の断続、輻輳による損失の面で信頼性向上のために本明細書に将来の更新で使用されてもよいですエンドツーエンドのトランスポート（TCP接続の例えば、エンドポイント）のエンドポイント間のリンク（IEEE 802.11ネットワークでは例えば、上のリンクの隣人）など。失われたセグメントの再送がITEに許容できない状態の維持を必要とし、サブネットワーク内のリオーダリングパケットをもたらすので、ARQ機構は、このようなシールITE及びETEように、ネットワーク要素にあまり適してもよいです。"
    },
    {
      "indent": 3,
      "text": "Instead, alternate reliability mechanisms such as Forward Error Correction (FEC) may be specified in future updates to this specification for the purpose of improved reliability. Such mechanisms may entail the ITE performing proactive transmissions of redundant data, e.g., by sending multiple copies of the same data. Signaling from the ETE (e.g., by sending SEAL-encapsulated ICMPv4 Source Quench messages) may be specified in a future document as a means for the ETE to dynamically inform the ITE of changing FEC conditions.",
      "ja": "代わりに、そのような前方誤り訂正（FEC）のような代替の信頼性メカニズムは、信頼性向上のために本明細書に将来の更新で指定することができます。そのようなメカニズムは、同じデータの複数のコピーを送信することによって、例えば、冗長データの積極的な送信を行うITEを伴うことができます。 （SEAL封入ICMPv4の元抑制メッセージを送信することによって、例えば）ETEからのシグナリングETEを動的FEC条件を変更するITEに通知するための手段として、将来の文書で指定されてもよいです。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Fred L. Templin, Editor Boeing Research & Technology P.O. Box 3707 Seattle, WA 98124 USA",
      "ja": "フレッド・L.テンプリン、エディタボーイング・リサーチ＆テクノロジー私書箱ボックス3707シアトル、WA 98124 USA"
    },
    {
      "indent": 3,
      "text": "EMail: fltemplin@acm.org",
      "ja": "メールアドレス：fltemplin@acm.org"
    }
  ]
}