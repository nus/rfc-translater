{
  "title": {
    "text": "RFC 6239 - Suite B Cryptographic Suites for Secure Shell (SSH)",
    "ja": "RFC 6239 - Secure Shellのための組曲B暗号スイート（SSH）"
  },
  "number": 6239,
  "created_at": "2019-11-01 00:20:22.544568+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                           K. Igoe\nRequest for Comments: 6239                      National Security Agency\nCategory: Informational                                         May 2011\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Suite B Cryptographic Suites for Secure Shell (SSH)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes the architecture of a Suite B compliant implementation of the Secure Shell Transport Layer Protocol and the Secure Shell Authentication Protocol. Suite B Secure Shell makes use of the elliptic curve Diffie-Hellman (ECDH) key agreement, the elliptic curve digital signature algorithm (ECDSA), the Advanced Encryption Standard running in Galois/Counter Mode (AES-GCM), two members of the SHA-2 family of hashes (SHA-256 and SHA-384), and X.509 certificates.",
      "ja": "この文書では、セキュアシェルトランスポート層プロトコルおよびSecure Shellの認証プロトコルのスイートB準拠した実装のアーキテクチャについて説明します。スイートBシェル楕円曲線ディフィ - ヘルマン（ECDH）キー合意、楕円曲線デジタル署名アルゴリズム（ECDSA）、高度暗号化標準の使用はガロア/カウンタモード（AES-GCM）、SHAの2人のメンバーで実行させるセキュアハッシュ（SHA-256およびSHA-384）、およびX.509証明書-2ファミリー。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6239.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc6239で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2011 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2011 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n2. Suite B and Secure Shell ........................................3\n   2.1. Minimum Levels of Security (minLOS) ........................4\n   2.2. Digital Signatures and Certificates ........................4\n   2.3. Non-Signature Primitives ...................................5\n3. Security Mechanism Negotiation and Initialization ...............6\n   3.1. Algorithm Negotiation: SSH_MSG_KEXINIT .....................7\n4. Key Exchange and Server Authentication ..........................8\n   4.1. SSH_MSG_KEXECDH_INIT .......................................9\n   4.2. SSH_MSG_KEXECDH_REPLY ......................................9\n   4.3. Key and Initialization Vector Derivation ..................10\n5. User Authentication ............................................10\n   5.1. First SSH_MSG_USERAUTH_REQUEST Message ....................10\n   5.2. Second SSH_MSG_USERAUTH_REQUEST Message ...................11\n6. Confidentiality and Data Integrity of SSH Binary Packets .......12\n   6.1. Galois/Counter Mode .......................................12\n   6.2. Data Integrity ............................................12\n7. Rekeying .......................................................12\n8. Security Considerations ........................................13\n9. References .....................................................13\n   9.1. Normative References ......................................13\n   9.2. Informative References ....................................13",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "This document describes the architecture of a Suite B compliant implementation of the Secure Shell Transport Layer Protocol and the Secure Shell Authentication Protocol. Suite B Secure Shell makes use of the elliptic curve Diffie-Hellman (ECDH) key agreement, the elliptic curve digital signature algorithm (ECDSA), the Advanced Encryption Standard running in Galois/Counter Mode (AES-GCM), two members of the SHA-2 family of hashes (SHA-256 and SHA-384), and X.509 certificates.",
      "ja": "この文書では、セキュアシェルトランスポート層プロトコルおよびSecure Shellの認証プロトコルのスイートB準拠した実装のアーキテクチャについて説明します。スイートBシェル楕円曲線ディフィ - ヘルマン（ECDH）キー合意、楕円曲線デジタル署名アルゴリズム（ECDSA）、高度暗号化標準の使用はガロア/カウンタモード（AES-GCM）、SHAの2人のメンバーで実行させるセキュアハッシュ（SHA-256およびSHA-384）、およびX.509証明書-2ファミリー。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はありますRFC 2119 [RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Suite B and Secure Shell",
      "section_title": true,
      "ja": "2.スイートBとのSecure Shell"
    },
    {
      "indent": 3,
      "text": "Several RFCs have documented how each of the Suite B components are to be integrated into Secure Shell (SSH):",
      "ja": "いくつかのRFCはスイートB成分のそれぞれは、セキュアシェル（SSH）に統合される方法を報告しています。"
    },
    {
      "indent": 5,
      "text": "kex algorithms ecdh-sha2-nistp256 [SSH-ECC] ecdh-sha2-nistp384 [SSH-ECC]",
      "ja": "KEXアルゴリズムECDH-SHA2-nistp256 [SSH-ECC] ECDH-SHA2-nistp384 [SSH-ECC]"
    },
    {
      "indent": 5,
      "text": "server host key algorithms x509v3-ecdsa-sha2-nistp256 [SSH-X509] x509v3-ecdsa-sha2-nistp384 [SSH-X509]",
      "ja": "サーバホストキーアルゴリズム書X509v3-ECDSA-SHA2-nistp256 [SSH-X509]書X509v3-ECDSA-SHA2-nistp384 [SSH-X509]"
    },
    {
      "indent": 5,
      "text": "encryption algorithms (both client_to_server and server_to_client) AEAD_AES_128_GCM [SSH-GCM] AEAD_AES_256_GCM [SSH-GCM]",
      "ja": "暗号化アルゴリズム（client_to_serverとserver_to_client両方）AEAD_AES_128_GCM [SSH-GCM] AEAD_AES_256_GCM [SSH-GCM]"
    },
    {
      "indent": 5,
      "text": "MAC algorithms (both client_to_server and server_to_client) AEAD_AES_128_GCM [SSH-GCM] AEAD_AES_256_GCM [SSH-GCM]",
      "ja": "MACアルゴリズム（client_to_serverとserver_to_client両方）AEAD_AES_128_GCM [SSH-GCM] AEAD_AES_256_GCM [SSH-GCM]"
    },
    {
      "indent": 3,
      "text": "In Suite B, public key certificates used to verify signatures MUST be compliant with the Suite B Certificate Profile specified in RFC 5759 [SUITEBCERT].",
      "ja": "スイートBでは、署名を検証するために使用される公開鍵証明書は、[SUITEBCERT] RFC 5759で指定されたスイートB証明書プロファイルに準拠しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The purpose of this document is to draw upon all of these documents to provide guidance for Suite B compliant implementations of Secure Shell (hereafter referred to as \"SecSh-B\"). Note that while SecSh-B MUST follow the guidance in this document, that requirement does not in and of itself imply that a given implementation of Secure Shell is suitable for use in protecting classified data. An implementation of SecSh-B must be validated by the appropriate authority before such usage is permitted.",
      "ja": "このドキュメントの目的は、（以下「SECSH-B」と呼ばれる）セキュアシェルのスイートB準拠した実装のためのガイダンスを提供するために、これらの文書のすべての時に描画することです。 SECSH-Bは、この文書に記載されている指針に従わなければならないが、その要件は、それ自体のセキュアシェルの所与の実装では、分類されたデータを保護するのに使用するのに適していることを意味しないことに留意されたいです。このような使用が許可される前に、SECSH-Bの実装では、適切な機関によって検証されなければなりません。"
    },
    {
      "indent": 3,
      "text": "The two elliptic curves used in Suite B appear in the literature under two different names. For the sake of clarity, we list both names below.",
      "ja": "スイートBで使用される2つの楕円曲線は、二つの異なる名前で文献に現れます。明確にするために、我々は、以下の両方の名前をリストします。"
    },
    {
      "indent": 6,
      "text": "Curve        NIST name        SECG name     OID [SEC2]\n---------------------------------------------------------------\nP-256        nistp256         secp256r1     1.2.840.10045.3.1.7\nP-384        nistp384         secp384r1     1.3.132.0.34",
      "raw": true
    },
    {
      "indent": 3,
      "text": "A description of these curves can be found in [NIST] or [SEC2].",
      "ja": "これらの曲線の記述は[NIST]または[SEC2]に見出すことができます。"
    },
    {
      "indent": 3,
      "text": "For the sake of brevity, ECDSA-256 will be used to denote ECDSA on P-256 using SHA-256, and ECDSA-384 will be used to denote ECDSA on P-384 using SHA-384.",
      "ja": "簡潔にするために、ECDSA-256は、P-256、SHA-256を使用してECDSAを示すために使用され、ECDSA-384は、SHA-384を使用して、P-384でECDSAを示すために使用されるであろう。"
    },
    {
      "indent": 0,
      "text": "2.1. Minimum Levels of Security (minLOS)",
      "section_title": true,
      "ja": "2.1。セキュリティの最小レベル（minLOS）"
    },
    {
      "indent": 3,
      "text": "Suite B provides for two levels of cryptographic security, namely a 128-bit minimum level of security (minLOS_128) and a 192-bit minimum level of security (minLOS_192). As we shall see below, the ECDSA-256/384 signature algorithms and corresponding X.509v3 certificates are treated somewhat differently than the non-signature primitives (kex algorithms, encryption algorithms, and Message Authentication Code (MAC) algorithms in Secure Shell parlance).",
      "ja": "スイートBは、暗号化、セキュリティ、セキュリティのすなわち128ビットの最小レベル（minLOS_128）及びセキュリティの192ビットの最小レベル（minLOS_192）2つのレベルを提供します。我々は以下を参照しなければならないように、ECDSA-384分の256署名アルゴリズム及び対応のX.509v3証明書は、非署名プリミティブより幾分異なる方法で処理される（KEXアルゴリズム、暗号化アルゴリズム、およびメッセージ認証コード（MAC）セキュアシェル用語でアルゴリズム） 。"
    },
    {
      "indent": 0,
      "text": "2.2. Digital Signatures and Certificates",
      "section_title": true,
      "ja": "2.2。デジタル署名と証明書"
    },
    {
      "indent": 3,
      "text": "SecSh-B uses ECDSA-256/384 for server authentication, user authentication, and in X.509 certificates. [SSH-X509] defines two methods, x509v3-ecdsa-sha2-nistp256 and x509v3-ecdsa-sha2-nistp384, that are to be used for server and user authentication. The following conditions must be met:",
      "ja": "SECSH-Bは、ECDSA-256サーバ認証、ユーザ認証用/ 384、およびX.509証明書に使用しています。 [SSH-X509]は、サーバとのユーザ認証に使用される2つの方法、書X509v3-ECDSA-SHA2-nistp256と書X509v3-ECDSA-SHA2-nistp384を、定義します。以下の条件を満たしている必要があります。"
    },
    {
      "indent": 3,
      "text": "1) The server MUST share its public key with the host using an X.509v3 certificate as described in [SSH-X509]. This public key MUST be used to authenticate the server to the host using ECDSA-256 or ECDSA-384 as appropriate (see Section 3).",
      "ja": "1）サーバは、[SSH-X509]に記載されているようにX.509v3証明書を使用してホストとの公開鍵を共有しなければなりません。この公開鍵は（セクション3を参照）を適宜ECDSA-256またはECDSA-384を使用してホストにサーバーを認証するために使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "2) User authentication MUST begin with public key authentication using ECDSA-256/384 with X.509v3 certificates (see Section 4). Additional user authentication methods MAY be used, but only after the certificate-based ECDSA authentication has been successfully completed.",
      "ja": "2）ユーザー認証は、ECDSA-256のX.509v3証明書（第4節を参照）で/ 384使用して、公開鍵認証で開始する必要があります。追加のユーザ認証方法を使用することができるが、証明書ベースのECDSA認証が正常に完了した後にのみ。"
    },
    {
      "indent": 3,
      "text": "3) The X.509v3 certificates MUST use only the two Suite B digital signatures, ECDSA-256 and ECDSA-384.",
      "ja": "3）のX.509v3証明書は、2つだけのスイートBのデジタル署名、ECDSA-256およびECDSA-384を使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "4) ECDSA-256 MUST NOT be used to sign an ECDSA-384 public key.",
      "ja": "4）ECDSA-256は、ECDSA-384の公開鍵に署名するために使用してはいけません。"
    },
    {
      "indent": 3,
      "text": "5) ECDSA-384 MAY be used to sign an ECDSA-256 public key.",
      "ja": "5）ECDSA-384は、ECDSA-256の公開鍵に署名するために使用されるかもしれません。"
    },
    {
      "indent": 3,
      "text": "6) At minLOS_192, all SecSh-B implementations MUST be able to verify ECDSA-384 signatures.",
      "ja": "6）minLOS_192では、全てSECSH-B実装は、ECDSA-384の署名を検証できなければなりません。"
    },
    {
      "indent": 3,
      "text": "7) At minLOS_128, all SecSh-B implementations MUST be able to verify ECDSA-256 signatures and SHOULD be able to verify ECDSA-384 signatures, unless it is absolutely certain that the implementation will never need to verify certificates originating from an authority that uses an ECDSA-384 signing key.",
      "ja": "7）minLOS_128では、すべてのSECSH-Bの実装は、ECDSA-256の署名を検証できなければならない、実装が使用する権限を起源と証明書を確認する必要がないことを絶対確実でない限り、ECDSA-384の署名を検証することができるべきですECDSA-384署名鍵。"
    },
    {
      "indent": 3,
      "text": "8) At minLOS_128, each SecSh-B server and each SecSh-B user MUST have either an ECDSA-256 signing key with a corresponding X.509v3 certificate, an ECDSA-384 signing key with a corresponding X.509v3 certificate, or both.",
      "ja": "8）minLOS_128では、各SECSH-Bサーバと各SECSH-Bのユーザーは、対応するX.509v3証明書とECDSA-256署名鍵、対応するX.509v3証明書とECDSA-384署名鍵、あるいはその両方を持たなければなりません。"
    },
    {
      "indent": 3,
      "text": "9) At minLOS_192, each SecSh-B server and each SecSh-B user MUST have an ECDSA-384 signing key with a corresponding X.509v3 certificate.",
      "ja": "9）minLOS_192では、各SECSH-Bサーバと各SECSH-Bのユーザーは、対応するX.509v3証明書とECDSA-384署名鍵を持たなければなりません。"
    },
    {
      "indent": 3,
      "text": "The selection of the signature algorithm to be used for server authentication is governed by the server_host_key_algorithms name-list in the SSH_MSG_KEXINIT packet (see Section 3.1). The key exchange and server authentication are performed by the SSH_MSG_KEXECDH_REPLY packets (see Section 4). User authentication is done via the SSH_MSG_USERAUTH_REQUEST messages (see Section 5).",
      "ja": "サーバーの認証に使用される署名アルゴリズムの選択は、（3.1節を参照）SSH_MSG_KEXINITパケットにserver_host_key_algorithms名リストによって支配されています。鍵交換とサーバ認証がSSH_MSG_KEXECDH_REPLYパケット（セクション4を参照）によって行われます。ユーザー認証がSSH_MSG_USERAUTH_REQUESTメッセージを介して行われます（セクション5を参照）。"
    },
    {
      "indent": 0,
      "text": "2.3. Non-Signature Primitives",
      "section_title": true,
      "ja": "2.3。非署名プリミティブ"
    },
    {
      "indent": 3,
      "text": "This section covers the constraints that the choice of minimum security level imposes upon the selection of a key agreement protocol (kex algorithm), encryption algorithm, and data integrity algorithm (MAC algorithm). We divide the non-signature algorithms into two families, as shown in Table 1.",
      "ja": "このセクションでは、最低限のセキュリティレベルの選択は、キー合意プロトコル（KEXアルゴリズム）、暗号化アルゴリズム、およびデータの整合性アルゴリズム（MACアルゴリズム）の選択に課した制約をカバーしています。表1に示すように、我々は、2つのファミリーに非署名アルゴリズムを分割します。"
    },
    {
      "indent": 6,
      "text": "+--------------+----------------------+----------------------+\n|  Algorithm   |  Family 1            |  Family 2            |\n+==============+======================+======================+\n|  kex         |  ecdh-sha2-nistp256  |  ecdh-sha2-nistp384  |\n+--------------+----------------------+----------------------+\n|  encryption  |  AEAD_AES_128_GCM    |  AEAD_AES_256_GCM    |\n+--------------+----------------------+----------------------+\n|  MAC         |  AEAD_AES_128_GCM    |  AEAD_AES_256_GCM    |\n+--------------+-----------------------+---------------------+",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Table 1. Families of Non-Signature Algorithms in SecSh-B",
      "ja": "SECSH-Bにおける非署名アルゴリズムの表1家族"
    },
    {
      "indent": 3,
      "text": "At the 128-bit minimum level of security:",
      "ja": "セキュリティの128ビットの最小レベルで："
    },
    {
      "indent": 3,
      "text": "o The non-signature algorithms MUST either come exclusively from Family 1 or exclusively from Family 2.",
      "ja": "非署名アルゴリズムは、ファミリー1のみから来る又は排他ファミリー2からしなければならないのいずれかで、O。"
    },
    {
      "indent": 3,
      "text": "o The selection of Family 1 versus Family 2 is independent of the choice of server host key algorithm.",
      "ja": "Oファミリー2対ファミリー1の選択は、サーバのホストキーアルゴリズムの選択とは無関係です。"
    },
    {
      "indent": 3,
      "text": "At the 192-bit minimum level of security:",
      "ja": "セキュリティの192ビットの最小レベル："
    },
    {
      "indent": 3,
      "text": "o The non-signature algorithms MUST all come from Family 2.",
      "ja": "oを非署名アルゴリズムは、すべての家族2から来なければなりません。"
    },
    {
      "indent": 3,
      "text": "Most of the constraints described in this section can be achieved by severely restricting the kex_algorithm, encryption_algorithm, and mac_algorithm name lists offered in the SSH_MSG_KEXINIT packet. See Section 3.1 for details.",
      "ja": "このセクションで説明制約のほとんどは厳しくkex_algorithm、ENCRYPTION_ALGORITHM、およびSSH_MSG_KEXINITパケットで提供mac_algorithm名前のリストを制限することによって達成することができます。詳細については、3.1節を参照してください。"
    },
    {
      "indent": 0,
      "text": "3. Security Mechanism Negotiation and Initialization",
      "section_title": true,
      "ja": "3.セキュリティメカニズム交渉と初期化"
    },
    {
      "indent": 3,
      "text": "As described in [SSH-Tran], the exchange of SSH_MSG_KEXINIT between the server and the client establishes which key agreement algorithm, MAC algorithm, host key algorithm (server authentication algorithm), and encryption algorithm are to be used. This section describes how the Suite B components are to be used in the Secure Shell algorithm negotiation, key agreement, server authentication, and user authentication.",
      "ja": "[SSH-TRAN]に記載されているように、サーバとクライアントの間でSSH_MSG_KEXINITの交換は、鍵合意アルゴリズム、MACアルゴリズム、鍵アルゴリズム（サーバ認証アルゴリズム）をホストを確立し、暗号化アルゴリズムが使用されます。このセクションでは、スイートBコンポーネントは、セキュアシェルアルゴリズムのネゴシエーション、鍵合意、サーバー認証、およびユーザ認証に使用される方法について説明します。"
    },
    {
      "indent": 3,
      "text": "Negotiation and initialization of a Suite B Secure Shell connection involves the following Secure Shell messages (where C->S denotes a message from the client to the server, and S->C denotes a server-to-client message):",
      "ja": "スイートBのSecure Shell接続のネゴシエーション及び初期化が（C-> Sは、クライアントからサーバへのメッセージであり、S-> Cは、サーバからクライアントへのメッセージを示す）以下セキュアシェルメッセージを含みます。"
    },
    {
      "indent": 6,
      "text": "SSH_MSG_KEXINIT C->S Contains lists of algorithms acceptable to the client.",
      "ja": "SSH_MSG_KEXINIT C-> Sは、クライアントに許容可能なアルゴリズムのリストが含まれています。"
    },
    {
      "indent": 6,
      "text": "SSH_MSG_KEXINIT S->C Contains lists of algorithms acceptable to the server.",
      "ja": "SSH_MSG_KEXINIT S-> Cは、サーバに受け入れアルゴリズムのリストが含まれています。"
    },
    {
      "indent": 6,
      "text": "SSH_MSG_KEXECDH_INIT C->S Contains the client's ephemeral elliptic curve Diffie-Hellman key.",
      "ja": "SSH_MSG_KEXECDH_INIT C-> Sは、クライアントのはかない楕円曲線のDiffie-Hellmanキーが含まれています。"
    },
    {
      "indent": 6,
      "text": "SSH_MSG_KEXECDH_REPLY S->C Contains a certificate with the server's ECDSA public signature key, the server's ephemeral ECDH contribution, and an ECDSA digital signature of the newly formed exchange hash value.",
      "ja": "SSH_MSG_KEXECDH_REPLY S-> Cは、サーバのパブリックECDSA署名鍵、サーバのはかないECDH寄与、及び新たに形成された交換ハッシュ値のECDSAデジタル署名付き証明書が含まれています。"
    },
    {
      "indent": 6,
      "text": "SSH_MSG_USERAUTH_REQUEST C->S Contains the user's name, the name of the service the user is requesting, the name of the authentication method the client wishes to use, and method-specific fields.",
      "ja": "SSH_MSG_USERAUTH_REQUEST C-> Sは、ユーザーの名前、ユーザーが要求しているサービスは、クライアントが使用したい認証方式の名前、およびメソッド固有のフィールドの名前が含まれています。"
    },
    {
      "indent": 3,
      "text": "When not in the midst of processing a key exchange, either party may initiate a key re-exchange by sending an SSH_MSG_KEXINIT packet. All packets exchanged during the re-exchange are encrypted and authenticated using the current keys until the conclusion of the re-exchange, at which point an SSH_MSG_NEWKEYS initiates a change to the newly established keys. Otherwise, the re-exchange protocol is identical to the initial key exchange protocol. See Section 9 of [SSH-Tran].",
      "ja": "ないときは鍵交換の処理の最中に、いずれかの当事者はSSH_MSG_KEXINITパケットを送信することにより、キーの再交換を開始することができます。再交換中に交換されたすべてのパケットを暗号化してSSH_MSG_NEWKEYSが新たに設立されたキーに変更を開始、その時点で再交換の終了まで、現在のキーを使用して認証されます。そうでない場合は、再交換プロトコルは、最初の鍵交換プロトコルと同じです。 [SSH-TRAN]のセクション9を参照してください。"
    },
    {
      "indent": 0,
      "text": "3.1. Algorithm Negotiation: SSH_MSG_KEXINIT",
      "section_title": true,
      "ja": "3.1。アルゴリズムの折衝：SSH_MSG_KEXINIT"
    },
    {
      "indent": 3,
      "text": "The choice of all but the user authentication methods are determined by the exchange of SSH_MSG_KEXINIT between the client and the server. As described in [SSH-Tran], the SSH_MSG_KEXINIT packet has the following structure:",
      "ja": "ユーザーの認証方法が、すべての選択は、クライアントとサーバ間のSSH_MSG_KEXINITの交換によって決定されます。 [SSH-TRAN]に記載されているように、SSH_MSG_KEXINITパケットは、以下の構造を有します。"
    },
    {
      "indent": 6,
      "text": "byte SSH_MSG_KEXINIT byte[16] cookie (random bytes) name-list kex_algorithms name-list server_host_key_algorithms name-list encryption_algorithms_client_to_server name-list encryption_algorithms_server_to_client name-list mac_algorithms_client_to_server name-list mac_algorithms_server_to_client name-list compression_algorithms_client_to_server name-list compression_algorithms_server_to_client name-list languages_client_to_server name-list languages_server_to_client boolean first_kex_packet_follows uint32 0 (reserved for future extension)",
      "ja": "バイトSSH_MSG_KEXINITバイト[16]クッキー（ランダムバイト）名前リストkex_algorithms名リストserver_host_key_algorithms名リストencryption_algorithms_client_to_server名リストencryption_algorithms_server_to_client名リストmac_algorithms_client_to_server名リストmac_algorithms_server_to_client名リストcompression_algorithms_client_to_server名リストcompression_algorithms_server_to_client名リストlanguages_client_to_server名リストlanguages_server_to_clientブールfirst_kex_packet_follows UINT32 0（将来の拡張のために予約）"
    },
    {
      "indent": 3,
      "text": "The SSH_MSG_KEXINIT name lists can be used to constrain the choice of non-signature and host key algorithms in accordance with the guidance given in Section 2. Table 2 lists three allowable name lists for the non-signature algorithms. One of these options MUST be used.",
      "ja": "SSH_MSG_KEXINIT名のリストは、非署名の選択を制約し、非署名アルゴリズムのための第2節表2は3つの許容名のリストに示す指針に従ってキーアルゴリズムをホストするために使用することができます。これらのオプションのいずれかを使用しなければなりません。"
    },
    {
      "indent": 7,
      "text": "Family 1 only (min_LOS 128):\n   kex_algorithm name_list         := { ecdh_sha2_nistp256 }\n   encryption_algorithm name_list  := { AEAD_AES_128_GCM   }\n   mac_algorithm name_list         := { AEAD_AES_128_GCM   }",
      "raw": true
    },
    {
      "indent": 7,
      "text": "Family 2 only (min_LOS 128 or 192): kex_algorithm name_list := { ecdh_sha2_nistp384 } encryption_algorithm name_list := { AEAD_AES_256_GCM } mac_algorithm name_list := { AEAD_AES_256_GCM }",
      "ja": "ファミリー2のみ（min_LOS 128又は192）：kex_algorithmのNAME_LIST：= {ecdh_sha2_nistp384} ENCRYPTION_ALGORITHMのNAME_LIST：= {AEAD_AES_256_GCM} mac_algorithmのNAME_LIST：= {} AEAD_AES_256_GCM"
    },
    {
      "indent": 7,
      "text": "Family 1 or Family 2 (min_LOS 128): kex_algorithm name_list := { ecdh_sha2_nistp256, ecdh_sha2_nistp384 } encryption_algorithm name_list := { AEAD_AES_128_GCM, AEAD_AES_256_GCM } mac_algorithm name_list := { AEAD_AES_128_GCM, AEAD_AES_256_GCM }",
      "ja": "ファミリー1又はファミリー2（min_LOS 128）：kex_algorithmのNAME_LIST：= {ecdh_sha2_nistp256、ecdh_sha2_nistp384} ENCRYPTION_ALGORITHMのNAME_LIST：= {AEAD_AES_128_GCM、AEAD_AES_256_GCM} mac_algorithmのNAME_LIST：= {AEAD_AES_128_GCM、AEAD_AES_256_GCM}"
    },
    {
      "indent": 11,
      "text": "Table 2. Allowed Non-Signature Algorithm Name Lists",
      "ja": "表2可非署名アルゴリズム名リスト"
    },
    {
      "indent": 3,
      "text": "Table 3 lists three allowable name lists for the server host key algorithms. One of these options MUST be used.",
      "ja": "表3サーバのホストキーアルゴリズムのための3つの許容名前リスト。これらのオプションのいずれかを使用しなければなりません。"
    },
    {
      "indent": 12,
      "text": "ECDSA-256 only (min_LOS 128):\n   server_host_key_algorithms name_list :=\n                    { x509v3-ecdsa-sha2-nistp256 }",
      "raw": true
    },
    {
      "indent": 12,
      "text": "ECDSA-384 only (min_LOS 128 or 192): server_host_key_algorithms name_list := { x509v3-ecdsa-sha2-nistp384 }",
      "ja": "ECDSA-384のみ（min_LOS 128又は192）：server_host_key_algorithmsのNAME_LIST：= {書X509v3-ECDSA-SHA2-nistp384}"
    },
    {
      "indent": 12,
      "text": "ECDSA-256 or ECDSA-384 (min_LOS 128): server_host_key_algorithms name_list := { x509v3-ecdsa-sha2-nistp256, x509v3-ecdsa-sha2-nistp384 }",
      "ja": "ECDSA-256またはECDSA-384（min_LOS 128）：server_host_key_algorithms NAME_LIST：= {書X509v3-ECDSA-SHA2-nistp256、書X509v3-ECDSA-SHA2-nistp384}"
    },
    {
      "indent": 10,
      "text": "Table 3. Allowed Server Host Key Algorithm Name Lists",
      "ja": "表3.許可サーバーのホストキーアルゴリズム名リスト"
    },
    {
      "indent": 0,
      "text": "4. Key Exchange and Server Authentication",
      "section_title": true,
      "ja": "4.鍵交換およびServer認証"
    },
    {
      "indent": 3,
      "text": "SecSh-B uses ECDH to establish a shared secret value between the client and the server. An X.509v3 certificate containing the server's public signing ECDSA key and an ECDSA signature on the exchange hash value derived from the newly established shared secret value are used to authenticate the server to the client.",
      "ja": "SECSH-Bは、クライアントとサーバ間の共有秘密値を確立するためのECDHを使用しています。新しく設立された共有秘密値から導出交換ハッシュ値にサーバーの公開署名ECDSAキーとECDSA署名を含むX.509v3証明書がクライアントにサーバーを認証するために使用されています。"
    },
    {
      "indent": 0,
      "text": "4.1. SSH_MSG_KEXECDH_INIT",
      "section_title": true,
      "ja": "4.1。 SSH_MSG_KEXECDH_INIT"
    },
    {
      "indent": 3,
      "text": "The key exchange to be used in Secure Shell is determined by the name lists exchanged in the SSH_MSG_KEXINIT packets. In Suite B, one of the following key agreement methods MUST be used to generate a shared secret value (SSV):",
      "ja": "セキュアシェルで使用する鍵交換はSSH_MSG_KEXINITパケットで交換名リストによって決定されます。スイートBにおいて、次のキー合意の方法の一つは、共有秘密値（SSV）を生成するために使用する必要があります。"
    },
    {
      "indent": 6,
      "text": "ecdh-sha2-nistp256 ephemeral-ephemeral elliptic curve Diffie-Hellman on nistp256 with SHA-256",
      "ja": "SHA-256 nistp256にECDH-SHA2-nistp256エフェメラル-エフェメラル楕円曲線ディフィー・ヘルマン"
    },
    {
      "indent": 6,
      "text": "ecdh-sha2-nistp384 ephemeral-ephemeral elliptic curve Diffie-Hellman on nistp384 with SHA-384",
      "ja": "SHA-384とnistp384にECDH-SHA2-nistp384エフェメラル-エフェメラル楕円曲線ディフィー・ヘルマン"
    },
    {
      "indent": 3,
      "text": "and the format of the SSH_MSG_KEXECDH_INIT message is:",
      "ja": "そして、SSH_MSG_KEXECDH_INITメッセージの形式は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "byte SSH_MSG_KEXDH_INIT",
      "ja": "バイトSSH_MSG_KEXDH_INIT"
    },
    {
      "indent": 6,
      "text": "string Q_C // the client's ephemeral contribution to the // ECDH exchange, encoded as an octet string",
      "ja": "オクテット文字列としてエンコードされた文字列Q_C // // ECDH交換へのクライアントのはかない貢献、"
    },
    {
      "indent": 3,
      "text": "where the encoding of the elliptic curve point Q_C as an octet string is as specified in Section 2.3.3 of [SEC1].",
      "ja": "オクテットストリングとして楕円曲線点Q_Cの符号化は[SEC1]のセクション2.3.3で指定されている通りです。"
    },
    {
      "indent": 0,
      "text": "4.2. SSH_MSG_KEXECDH_REPLY",
      "section_title": true,
      "ja": "4.2。 SSH_MSG_KEXECDH_REPLY"
    },
    {
      "indent": 3,
      "text": "The SSH_MSG_KEXECDH_REPLY contains the server's contribution to the ECDH exchange, the server's public signature key, and a signature of the exchange hash value formed from the newly established shared secret value. As stated in Section 3.1, in SecSh-B, the server host key algorithm MUST be either x509v3-ecdsa-sha2-nistp256 or x509v3-ecdsa-sha2-nistp384.",
      "ja": "SSH_MSG_KEXECDH_REPLYはECDH交換、サーバーの公開署名鍵、および新たに設立された共有秘密値から形成された為替のハッシュ値の署名へのサーバの貢献が含まれています。 SECSH-Bに、3.1節で述べたように、サーバホスト鍵アルゴリズムが書X509v3-ECDSA-SHA2-nistp256または書X509v3-ECDSA-SHA2-nistp384でなければなりません。"
    },
    {
      "indent": 3,
      "text": "The format of the SSH_MSG_KEXECDH_REPLY is:",
      "ja": "SSH2_MSG_KEX_ECDH_REPLYの形式は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "byte SSH_MSG_KEXECDH_REPLY",
      "ja": "SSH2_MSG_KEX_ECDH_REPLYバイト"
    },
    {
      "indent": 6,
      "text": "string K_S // a string encoding an X.509v3 certificate // containing the server's ECDSA public host key",
      "ja": "文字列K_S //サーバのECDSA公開ホストキーを含むX.509v3証明書をエンコードする文字列//"
    },
    {
      "indent": 6,
      "text": "string Q_S // the server's ephemeral contribution to the // ECDH exchange, encoded as an octet string",
      "ja": "文字列Q_Sは// // ECDH交換するサーバのはかない貢献は、オクテット文字列としてエンコード"
    },
    {
      "indent": 6,
      "text": "string Sig_S // an octet string containing the server's // signature of the newly established exchange // hash value",
      "ja": "文字列Sig_S //新しく設立された為替//ハッシュ値のサーバの//署名を含むオクテット文字列"
    },
    {
      "indent": 3,
      "text": "Details on the structure and encoding of the X.509v3 certificate can be found in Section 2 of [SSH-X509]. The encoding of the elliptic curve point Q_C as an octet string is as specified in Section 2.3.3 of [SEC1], and the encoding of the ECDSA signature Sig_S as an octet string is as described in Section 3.1.2 of [SSH-ECC].",
      "ja": "X.509v3証明書の構造および符号化の詳細は、[SSH-X509]のセクション2に見出すことができます。オクテットストリングとして楕円曲線点Q_Cの符号化は[SEC1]のセクション2.3.3で指定されたように、そしてオクテットストリングとしてECDSA署名Sig_Sの符号化は、SSH-ECC [セクション3.1.2に記載されているように]。"
    },
    {
      "indent": 0,
      "text": "4.3. Key and Initialization Vector Derivation",
      "section_title": true,
      "ja": "4.3。キーと初期化ベクトル導出"
    },
    {
      "indent": 3,
      "text": "As specified in [SSH-Tran], the encryption keys and initialization vectors needed by Secure Shell are derived directly from the SSV using the hash function specified by the key agreement algorithm (SHA-256 for ecdh-sha2-nistp256 and SHA-384 for ecdh-sha2-nistp384). The client-to-server channel and the server-to-client channel will have independent keys and initialization vectors. These keys will remain constant until a re-exchange results in the formation of a new SSV.",
      "ja": "[SSH-TRAN]で指定されるように、セキュアシェルによって必要とされる暗号化キーと初期化ベクトルは、鍵合意アルゴリズムによって指定されたハッシュ関数を用いて、SSVから直接誘導される（SHA-256 ECDH-SHA2-nistp256およびSHA-384のために用ECDH-SHA2-nistp384）。クライアントからサーバーへのチャネルおよびサーバーからクライアントへのチャンネルは独立したキーと初期化ベクトルを持つことになります。これらのキーは、新しいSSVの形成に再交換の結果までは一定のままです。"
    },
    {
      "indent": 0,
      "text": "5. User Authentication",
      "section_title": true,
      "ja": "5.ユーザー認証"
    },
    {
      "indent": 3,
      "text": "The Secure Shell Transport Layer Protocol authenticates the server to the host but does not authenticate the user (or the user's host) to the server. For this reason, condition (2) of Section 2.2 requires that all users of SecSh-B MUST be authenticated using ECDSA-256/384 signatures and X.509v3 certificates. [SSH-X509] provides two methods, x509v3-ecdsa-sha2-nistp256 and x509v3-ecdsa-sha2-nistp384, that MUST be used to achieve this goal. At minLOS 128, either one of these methods may be used, but at minLOS 192, x509v3-ecdsa-sha2-nistp384 MUST be used.",
      "ja": "セキュアシェルトランスポート層プロトコルは、ホストにサーバを認証しますが、サーバーにユーザー（またはユーザーのホスト）を認証しません。この理由のため、セクション2.2の条件（2）はSECSH-BのすべてのユーザがECDSA-384分の256署名とのX.509v3証明書を用いて認証されなければならないことを要求します。 [SSH-X509は、この目標を達成するために使用されなければならない2つの方法書X509v3-ECDSA-SHA2-nistp256と書X509v3-ECDSA-SHA2-nistp384を、提供します。 minLOS 128において、これらの方法のいずれかを使用してもよいが、minLOS 192において、書X509v3-ECDSA-SHA2-nistp384を使用しなければなりません。"
    },
    {
      "indent": 0,
      "text": "5.1. First SSH_MSG_USERAUTH_REQUEST Message",
      "section_title": true,
      "ja": "5.1。まずSSH_MSG_USERAUTH_REQUESTメッセージ"
    },
    {
      "indent": 3,
      "text": "The user's public key is sent to the server using an SSH_MSG_USERAUTH_REQUEST message. When an x509v3-ecdsa-sha2-* user authentication method is being used, the structure of the SSH_MSG_USERAUTH_REQUEST message should be:",
      "ja": "利用者の公開鍵はSSH_MSG_USERAUTH_REQUESTメッセージを使用してサーバに送信されます。書X509v3-ECDSA-sha2- *ユーザ認証方法が使用されている場合、SSH_MSG_USERAUTH_REQUESTメッセージの構造は次のようになります。"
    },
    {
      "indent": 6,
      "text": "byte SSH_MSG_USERAUTH_REQUEST",
      "ja": "バイトSSH_MSG_USERAUTH_REQUEST"
    },
    {
      "indent": 6,
      "text": "string user_name // in ISO-10646 UTF-8 encoding",
      "ja": "ISO-10646 UTF-8エンコーディング内の文字列USER_NAME //"
    },
    {
      "indent": 6,
      "text": "string service_name // service name in US-ASCII",
      "ja": "US-ASCIIの文字列SERVICE_NAME //サービス名"
    },
    {
      "indent": 6,
      "text": "string \"publickey\"",
      "ja": "文字列「公開」"
    },
    {
      "indent": 6,
      "text": "boolean FALSE string public_key_algorithm_name // x509v3-ecdsa-sha2-nistp256 // or x509v3-ecdsa-sha2-nistp384",
      "ja": "ブール値FALSE文字列public_key_algorithm_name //書X509v3-ECDSA-SHA2-nistp256 //または書X509v3-ECDSA-SHA2-nistp384"
    },
    {
      "indent": 6,
      "text": "string public_key_blob // X.509v3 certificate",
      "ja": "文字列public_key_blob // X.509v3証明書"
    },
    {
      "indent": 3,
      "text": "Details on the structure and encoding of the X.509v3 certificate can be found in Section 2 of [SSH-X509].",
      "ja": "X.509v3証明書の構造および符号化の詳細は、[SSH-X509]のセクション2に見出すことができます。"
    },
    {
      "indent": 0,
      "text": "5.2. Second SSH_MSG_USERAUTH_REQUEST Message",
      "section_title": true,
      "ja": "5.2。第二SSH_MSG_USERAUTH_REQUESTメッセージ"
    },
    {
      "indent": 3,
      "text": "Once the server has responded to the request message with an SSH_MSG_USERAUTH_PK_OK message, the client uses a second SSH_MSG_USERAUTH_REQUEST message to perform the actual authentication:",
      "ja": "サーバはSSH_MSG_USERAUTH_PK_OKメッセージとリクエスト・メッセージに応答した後は、クライアントは、実際の認証を行うための第2のSSH_MSG_USERAUTH_REQUESTのメッセージを使用しています。"
    },
    {
      "indent": 6,
      "text": "byte SSH_MSG_USERAUTH_REQUEST",
      "ja": "バイトSSH_MSG_USERAUTH_REQUEST"
    },
    {
      "indent": 6,
      "text": "string user_name // in ISO-10646 UTF-8 encoding",
      "ja": "ISO-10646 UTF-8エンコーディング内の文字列USER_NAME //"
    },
    {
      "indent": 6,
      "text": "string service_name // service name in US-ASCII",
      "ja": "US-ASCIIの文字列SERVICE_NAME //サービス名"
    },
    {
      "indent": 6,
      "text": "string \"publickey\"",
      "ja": "文字列「公開」"
    },
    {
      "indent": 6,
      "text": "boolean TRUE",
      "ja": "ブール値TRUE"
    },
    {
      "indent": 6,
      "text": "string public_key_algorithm_name // x509v3-ecdsa-sha2-nistp256 // or x509v3-ecdsa-sha2-nistp384",
      "ja": "文字列public_key_algorithm_name //書X509v3-ECDSA-SHA2-nistp256 //または書X509v3-ECDSA-SHA2-nistp384"
    },
    {
      "indent": 6,
      "text": "string Sig_U",
      "ja": "文字列Sig_U"
    },
    {
      "indent": 3,
      "text": "The signature field Sig_U is an ECDSA signature of the concatenation of several values, including the session identifier, user name, service name, public key algorithm name, and the user's public signing key. The user's public signing key MUST be the signing key conveyed in the X.509v3 certificate sent in the first SSH_MSG_USERAUTH_REQUEST message. The encoding of the ECDSA signature Sig_U as an octet string is as described in Section 3.1.2 of [SSH-ECC].",
      "ja": "署名フィールドSig_Uは、セッションID、ユーザ名、サービス名、公開鍵アルゴリズム名、およびユーザの公開署名キーを含むいくつかの値の連結のECDSA署名です。ユーザーの公開署名鍵は、最初SSH_MSG_USERAUTH_REQUESTメッセージで送信されたX.509v3証明書に搬送署名鍵でなければなりません。 [SSH-ECC]のセクション3.1.2に記載されるようにオクテットストリングとしてECDSA署名Sig_Uの符号化です。"
    },
    {
      "indent": 3,
      "text": "The server MUST respond with either SSH_MSG_USERAUTH_SUCCESS (if no more authentications are needed) or SSH_MSG_USERAUTH_FAILURE (if the request failed, or more authentications are needed).",
      "ja": "サーバーは（要求が失敗した場合、または複数の認証が必要とされている）SSH_MSG_USERAUTH_SUCCESS（これ以上の認証が必要とされていない場合）、またはSSH_MSG_USERAUTH_FAILUREのいずれかで応じなければなりません。"
    },
    {
      "indent": 0,
      "text": "6. Confidentiality and Data Integrity of SSH Binary Packets",
      "section_title": true,
      "ja": "6.機密性およびSSHバイナリパケットのデータ整合性"
    },
    {
      "indent": 3,
      "text": "Secure Shell transfers data between the client and the server using its own binary packet structure. The SSH binary packet structure is independent of any packet structure on the underlying data channel. The contents of each binary packet and portions of the header are encrypted, and each packet is authenticated with its own message authentication code. AES GCM will both encrypt the packet and form a 16-octet authentication tag to ensure data integrity.",
      "ja": "独自のバイナリパケット構造を使用して、クライアントとサーバーの間でシェル転送データを保護します。 SSHバイナリパケット構造は、基礎となるデータ・チャネル上のパケット構造とは無関係です。各バイナリパケットヘッダ部分の内容は暗号化され、各パケットは、独自のメッセージ認証コードを用いて認証されます。 AES GCMは、両方のパケットを暗号化し、データの整合性を確保するために16オクテットの認証タグを形成することになります。"
    },
    {
      "indent": 0,
      "text": "6.1. Galois/Counter Mode",
      "section_title": true,
      "ja": "6.1。ガロア/カウンタモード"
    },
    {
      "indent": 3,
      "text": "[SSH-GCM] describes how AES Galois/Counter Mode is to be used in Secure Shell. Suite B SSH implementations MUST support AEAD_AES_GCM_128 and SHOULD support AEAD_AES_GCM_256 to both provide confidentiality and ensure data integrity. No other confidentiality or data integrity algorithms are permitted.",
      "ja": "[SSH-GCM]はAESガロア/カウンタモードは、セキュア・シェルで使用される方法について説明します。スイートBのSSHの実装はAEAD_AES_GCM_128をサポートしなければならないと機密性を提供し、データの整合性を確保するために、両方のAEAD_AES_GCM_256をサポートする必要があります。他の機密性やデータの整合性アルゴリズムは許可されません。"
    },
    {
      "indent": 3,
      "text": "These algorithms rely on two counters:",
      "ja": "これらのアルゴリズムは、二つのカウンタに依存しています："
    },
    {
      "indent": 6,
      "text": "Invocation Counter: A 64-bit integer, incremented after each call to AES-GCM to process an SSH binary packet. The initial value of the invocation counter is determined by the SSH initialization vector.",
      "ja": "呼び出しカウンタ：SSHバイナリパケットを処理するためにAES-GCMへの各呼び出しの後にインクリメント64ビット整数。呼び出しカウンタの初期値は、SSH初期化ベクトルによって決定されます。"
    },
    {
      "indent": 6,
      "text": "Block Counter: A 32-bit integer, set to one at the start of each new SSH binary packet and incremented as each 16-octet block of data is processed.",
      "ja": "ブロックカウンタ：32ビット整数は、それぞれの新しいSSHバイナリパケットの開始時に1に設定され、データの各16オクテットのブロックが処理されるようにインクリメント。"
    },
    {
      "indent": 3,
      "text": "Ensuring that these counters are properly implemented is crucial to the security of the system. The reader is referred to [SSH-GCM] for details on the format, initialization, and usage of these counters and their relationship to the initialization vector and the SSV.",
      "ja": "これらのカウンタが正しく実装されていることを確実にすることは、システムのセキュリティにとって非常に重要です。読者はフォーマット、初期化、およびこれらのカウンタの使用と初期化ベクトルとSSVとの関係の詳細については、[SSH-GCM]と呼ばれます。"
    },
    {
      "indent": 0,
      "text": "6.2. Data Integrity",
      "section_title": true,
      "ja": "6.2。データの整合性"
    },
    {
      "indent": 3,
      "text": "The reader is reminded that, as specified in [SSH-GCM], Suite B requires that all 16 octets of the authentication tag MUST be used as the SSH data integrity value of the SSH binary packet.",
      "ja": "[SSH-GCM]で指定されるように、リーダは、ことに留意され、スイートBは、認証タグのすべての16オクテットSSHバイナリパケットのSSHデータインテグリティ値として使用されなければならないことを要求します。"
    },
    {
      "indent": 0,
      "text": "7. Rekeying",
      "section_title": true,
      "ja": "7.鍵の再生成"
    },
    {
      "indent": 3,
      "text": "Secure Shell allows either the server or client to request that the Secure Shell connection be rekeyed. Suite B places no constraints on how frequently this is to be done, but it does require that the cipher suite being employed MUST NOT be changed when a rekey occurs.",
      "ja": "セキュアシェルは、サーバーまたはクライアントは、Secure Shell接続をリキーすることを要求することができます。スイートBはこれを行うことがある頻度に制約を課すませんが、それは再入力が発生したときに使用されている暗号スイートを変更してはならないことを必要としません。"
    },
    {
      "indent": 0,
      "text": "8. Security Considerations",
      "section_title": true,
      "ja": "8.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "When using ecdh_sha2_nistp256, each exponent used in the key exchange must have 256 bits of entropy. Similarly, when using ecdh_sha2_nistp384, each exponent used in the key exchange must have 384 bits of entropy. The security considerations of [SSH-Arch] apply.",
      "ja": "ecdh_sha2_nistp256を使用する場合、鍵交換で使用される各指数は、エントロピーの256ビットを有していなければなりません。 ecdh_sha2_nistp384を使用する場合、同様に、鍵交換で使用される各指数は、エントロピーの384ビットを有していなければなりません。 [SSH-ARCH]のセキュリティ上の考慮事項が適用されます。"
    },
    {
      "indent": 0,
      "text": "9. References",
      "section_title": true,
      "ja": "9.参考文献"
    },
    {
      "indent": 0,
      "text": "9.1. Normative References",
      "section_title": true,
      "ja": "9.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[SUITEBCERT] Solinas, J. and L. Zieglar, \"Suite B Certificate and Certificate Revocation List (CRL) Profile\", RFC 5759, January 2010.",
      "ja": "[SUITEBCERT] Solinas、J.とL.チーグラー、 \"スイートB証明書と証明書失効リスト（CRL）プロフィール\"、RFC 5759、2010年1月。"
    },
    {
      "indent": 3,
      "text": "[SSH-Arch] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH) Protocol Architecture\", RFC 4251, January 2006.",
      "ja": "[SSH-アーチ] Ylonenと、T.とC. Lonvick、エド。、 \"セキュアシェル（SSH）プロトコルアーキテクチャ\"、RFC 4251、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[SSH-Tran] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH) Transport Layer Protocol\", RFC 4253, January 2006.",
      "ja": "[SSH-TRAN] Ylonenと、T.とC. Lonvick、エド。、 \"セキュアシェル（SSH）トランスポート層プロトコル\"、RFC 4253、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[SSH-ECC] Stebila, D. and J. Green, \"Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer\", RFC 5656, December 2009.",
      "ja": "[SSH-ECC] Stebila、D.とJ.グリーン、 \"セキュアシェルトランスポート層での楕円曲線アルゴリズムの統合\"、RFC 5656、2009年12月。"
    },
    {
      "indent": 3,
      "text": "[SSH-GCM] Igoe, K. and J. Solinas, \"AES Galois Counter Mode for the Secure Shell Transport Layer Protocol\", RFC 5647, August 2009.",
      "ja": "[SSH-GCM] Igoe、K.とJ. Solinas、 \"AESガロアカウンタモードセキュアシェルトランスポート層プロトコルのために\"、RFC 5647、2009年8月。"
    },
    {
      "indent": 3,
      "text": "[SSH-X509] Igoe, K. and D. Stebila, \"X.509v3 Certificates for Secure Shell Authentication\", RFC 6187, March 2011.",
      "ja": "[SSH-X509] Igoe、K.、およびD. Stebila、 \"Secure Shellの認証のためのX.509v3証明書\"、RFC 6187、2011年3月。"
    },
    {
      "indent": 0,
      "text": "9.2. Informative References",
      "section_title": true,
      "ja": "9.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[NIST] National Institute of Standards and Technology, \"Digital Signature Standard (DSS)\", Federal Information Processing Standards Publication 186-3.",
      "ja": "[NIST]米国国立標準技術研究所、「デジタル署名標準（DSS）」、連邦情報処理規格186-3出版。"
    },
    {
      "indent": 3,
      "text": "[SEC1] Standards for Efficient Cryptography Group, \"Elliptic Curve Cryptography\", SEC 1 v2.0, May 2009, <http://www.secg.org/download/aid-780/sec1-v2.pdf>.",
      "ja": "[SEC1]効率的な暗号化グループのための基準、 \"楕円曲線暗号\"、SEC 1 V2.0、2009年5月、<http://www.secg.org/download/aid-780/sec1-v2.pdf>。"
    },
    {
      "indent": 3,
      "text": "[SEC2] Standards for Efficient Cryptography Group, \"Recommended Elliptic Curve Domain Parameters\", SEC 2 v1.0, September 2000. <http://www.secg.org/download/aid-386/ sec2_final.pdf>.",
      "ja": "[SEC2]効率的な暗号化グループのための基準は、SEC 2 v1.0を、2000年9月<http://www.secg.org/download/aid-386/ sec2_final.pdf> \"楕円曲線ドメインパラメータの推奨します\"。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Kevin M. Igoe NSA/CSS Commercial Solutions Center National Security Agency",
      "ja": "ケビンM. Igoe NSA / CSS商用ソリューションセンター国家安全保障局"
    },
    {
      "indent": 3,
      "text": "EMail: kmigoe@nsa.gov",
      "ja": "メールアドレス：kmigoe@nsa.gov"
    }
  ]
}