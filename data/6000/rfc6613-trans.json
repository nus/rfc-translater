{
  "title": {
    "text": "RFC 6613 - RADIUS over TCP",
    "ja": "RFC 6613 - TCP上のRADIUS"
  },
  "number": 6613,
  "created_at": "2019-10-28 07:40:54.550342+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          A. DeKok\nRequest for Comments: 6613                                    FreeRADIUS\nCategory: Experimental                                          May 2012\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 28,
      "text": "RADIUS over TCP",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The Remote Authentication Dial-In User Server (RADIUS) protocol has, until now, required the User Datagram Protocol (UDP) as the underlying transport layer. This document defines RADIUS over the Transmission Control Protocol (RADIUS/TCP), in order to address handling issues related to RADIUS over Transport Layer Security (RADIUS/TLS). It permits TCP to be used as a transport protocol for RADIUS only when a transport layer such as TLS or IPsec provides confidentiality and security.",
      "ja": "リモート認証ダイヤルインユーザーサーバー（RADIUS）プロトコルは、今までは、基礎となるトランスポート層としてUDP（User Datagram Protocol）を必要としていました。この文書では、トランスポート層セキュリティ（RADIUS / TLS）の上にRADIUSに関連したハンドリングの問題に対処するためには、伝送制御プロトコル（RADIUS / TCP）上でRADIUSを定義します。そのようなTLSやIPsecなどのトランスポート層は、機密性とセキュリティを提供する唯一のRADIUSのためのトランスポートプロトコルとして使用されるTCPを可能にします。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、検査、実験的な実装、および評価のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document defines an Experimental Protocol for the Internet community. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "この文書は、インターネットコミュニティのためにExperimentalプロトコルを定義します。このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6613.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc6613で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2012 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Applicability of Reliable Transport ........................4\n   1.2. Terminology ................................................6\n   1.3. Requirements Language ......................................6\n2. Changes to RADIUS ...............................................6\n   2.1. Packet Format ..............................................7\n   2.2. Assigned Ports for RADIUS/TCP ..............................7\n   2.3. Management Information Base (MIB) ..........................8\n   2.4. Detecting Live Servers .....................................8\n   2.5. Congestion Control Issues ..................................9\n   2.6. TCP Specific Issues ........................................9\n        2.6.1. Duplicates and Retransmissions .....................10\n        2.6.2. Head of Line Blocking ..............................11\n        2.6.3. Shared Secrets .....................................11\n        2.6.4. Malformed Packets and Unknown Clients ..............12\n        2.6.5. Limitations of the ID Field ........................13\n        2.6.6. EAP Sessions .......................................13\n        2.6.7. TCP Applications Are Not UDP Applications ..........14\n3. Diameter Considerations ........................................14\n4. Security Considerations ........................................14\n5. References .....................................................15\n   5.1. Normative References ......................................15\n   5.2. Informative References ....................................15",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "The RADIUS protocol is defined in [RFC2865] as using the User Datagram Protocol (UDP) for the underlying transport layer. While there are a number of benefits to using UDP as outlined in [RFC2865], Section 2.4, there are also some limitations:",
      "ja": "RADIUSプロトコルは、基本的なトランスポート層のユーザーデータグラムプロトコル（UDP）を使用するものとして[RFC2865]で定義されています。 [RFC2865]、セクション2.4に概説されているようUDPを使用して多くの利点がある一方で、また、いくつかの制限があります。"
    },
    {
      "indent": 6,
      "text": "* Unreliable transport. As a result, systems using RADIUS have to implement application-layer timers and retransmissions, as described in [RFC5080], Section 2.2.1.",
      "ja": "*信頼できない輸送。結果として、RADIUSを使用するシステムは、[RFC5080]に記載されているように、アプリケーション層タイマーと再送を実装する必要があり、セクション2.2.1。"
    },
    {
      "indent": 6,
      "text": "* Packet fragmentation. [RFC2865], Section 3, permits RADIUS packets up to 4096 octets in length. These packets are larger than the common Internet MTU (576), resulting in fragmentation of the packets at the IP layer when they are proxied over the Internet. Transport of fragmented UDP packets appears to be a poorly tested code path on network devices. Some devices appear to be incapable of transporting fragmented UDP packets, making it difficult to deploy RADIUS in a network where those devices are deployed.",
      "ja": "*パケットの断片化。 [RFC2865]、第3節では、長さが4096個のオクテットにRADIUSパケットを可能にします。これらのパケットは、それらがインターネットを介してプロキシされているIP層におけるパケットのフラグメンテーションを生じる、一般的なインターネットMTU（576）よりも大きいです。断片化されたUDPパケットの輸送は、ネットワークデバイス上の悪いテストコードパスであるように思われます。一部のデバイスは、それが難しいこれらのデバイスが展開されているネットワークにRADIUSを展開すること、断片化されたUDPパケットを転送することができないように見えます。"
    },
    {
      "indent": 6,
      "text": "* Connectionless transport. Neither clients nor servers receive positive statements that a \"connection\" is down. This information has to be deduced instead from the absence of a reply to a request.",
      "ja": "*コネクションレス型トランスポート。クライアントもサーバーには、「接続」はダウンしていることを肯定文を受け取ります。この情報は、要求に対する応答がないことから、代わりに推定することがあります。"
    },
    {
      "indent": 6,
      "text": "* Lack of congestion control. Clients can send arbitrary amounts of traffic with little or no feedback. This lack of feedback can result in congestive collapse of the network.",
      "ja": "*輻輳制御の欠如。クライアントは、ほとんど、あるいは全くフィードバックして、トラフィックの任意の金額を送ることができます。フィードバックの欠如は、ネットワークのうっ血性崩壊につながることができます。"
    },
    {
      "indent": 3,
      "text": "RADIUS has been widely deployed for well over a decade and continues to be widely deployed. Experience shows that these issues have been minor in some use cases and problematic in others. For use cases such as inter-server proxying, an alternative transport and security model -- RADIUS/TLS, is defined in [RFC6614]. That document describes the transport implications of running RADIUS/TLS.",
      "ja": "RADIUSは広くも10年以上にわたって展開し、広く展開され続けてきました。経験は、これらの問題は、いくつかのユースケースでは、マイナーなどで問題となっていることを示しています。そのようなサーバ間のプロキシ、代替トランスポートおよびセキュリティモデルとして使用する場合について -  RADIUS / TLS、[RFC6614]で定義されています。その文書には、RADIUS / TLSを実行しているの輸送への影響について説明します。"
    },
    {
      "indent": 3,
      "text": "The choice of TCP as a transport protocol is largely driven by the desire to improve the security of RADIUS by using RADIUS/TLS. For practical reasons, the transport protocol (TCP) is defined separately from the security mechanism (TLS).",
      "ja": "トランスポートプロトコルとしてTCPの選択は、主にRADIUS / TLSを使用してRADIUSのセキュリティを向上させるための願望によって駆動されます。実用的な理由のために、トランスポート・プロトコル（TCP）は、セキュリティ・メカニズム（TLS）別に定義されています。"
    },
    {
      "indent": 3,
      "text": "Since \"bare\" TCP does not provide for confidentiality or enable negotiation of credible ciphersuites, its use is not appropriate for inter-server communications where strong security is required. As a result, \"bare\" TCP transport MUST NOT be used without TLS, IPsec, or another secure upper layer.",
      "ja": "「裸」TCPは、機密保持のために提供するか、または信頼できる暗号スイートのネゴシエーションを有効にしないので、その使用は強力なセキュリティが要求されるサーバ間の通信のために適切ではありません。その結果、「裸」TCPトランスポートは、TLS、IPsecの、または別のセキュア上層せずに使用してはいけません。"
    },
    {
      "indent": 3,
      "text": "However, \"bare\" TCP transport MAY be used when another method such as IPsec [RFC4301] is used to provide additional confidentiality and security. Should experience show that such deployments are useful, this specification could be moved to the Standards Track.",
      "ja": "このようにIPsec [RFC4301]などの別の方法は、追加の機密性とセキュリティを提供するために使用されている場合しかし、「裸」TCPトランスポートを使用することができます。このような展開が有用であることショーを体験する必要があり、この仕様は標準化過程に移動させることができました。"
    },
    {
      "indent": 0,
      "text": "1.1. Applicability of Reliable Transport",
      "section_title": true,
      "ja": "1.1。信頼性の高い交通の適用"
    },
    {
      "indent": 3,
      "text": "The intent of this document is to address transport issues related to RADIUS/TLS [RFC6614] in inter-server communications scenarios, such as inter-domain communication between proxies. These situations benefit from the confidentiality and ciphersuite negotiation that can be provided by TLS. Since TLS is already widely available within the operating systems used by proxies, implementation barriers are low.",
      "ja": "この文書の目的は、そのようなプロキシ間のドメイン間通信など、サーバ間通信シナリオにRADIUS / TLS [RFC6614]に関連する輸送の問題に対処することです。これらの状況は、TLSによって提供することができ、機密性と暗号スイートのネゴシエーションの恩恵を受ける。 TLSは、プロキシによって使用されるオペレーティングシステム内で既に広く利用可能であるため、実装障壁が低いです。"
    },
    {
      "indent": 3,
      "text": "In scenarios where RADIUS proxies exchange a large volume of packets, it is likely that there will be sufficient traffic to enable the congestion window to be widened beyond the minimum value on a long-term basis, enabling ACK piggybacking. Through use of an application-layer watchdog as described in [RFC3539], it is possible to address the objections to reliable transport described in [RFC2865], Section 2.4, without substantial watchdog traffic, since regular traffic is expected in both directions.",
      "ja": "RADIUSプロキシは、パケットの大量交換シナリオでは、ACKのピギーバックを可能にする、長期的に最小値を超えて広くする混雑ウィンドウを可能にするのに十分なトラフィックが存在することになる可能性があります。 [RFC3539]に記載されているように、アプリケーション層のウォッチドッグの使用を介して、通常のトラフィックが両方向に期待されているので、実質的なウォッチドッグ・トラフィックなし[RFC2865]に記載の信頼性の高いトランスポート、2.4節に反対に対処することが可能です。"
    },
    {
      "indent": 3,
      "text": "In addition, use of RADIUS/TLS has been found to improve operational performance when used with multi-round-trip authentication mechanisms such as the Extensible Authentication Protocol (EAP) over RADIUS [RFC3579]. In such exchanges, it is typical for EAP fragmentation to increase the number of round trips required. For example, where EAP-TLS authentication [RFC5216] is attempted and both the EAP peer and server utilize certificate chains of 8 KB, as many as 15 round trips can be required if RADIUS packets are restricted to the common Ethernet MTU (1500 octets) for EAP over LAN (EAPoL) use cases. Fragmentation of RADIUS/UDP packets is generally inadvisable due to lack of fragmentation support within intermediate devices such as filtering routers, firewalls, and NATs. However, since RADIUS/UDP implementations typically do not support MTU discovery, fragmentation can occur even when the maximum RADIUS/UDP packet size is restricted to 1500 octets.",
      "ja": "また、RADIUS / TLSの使用は、RADIUS [RFC3579]を超える拡張認証プロトコル（EAP）などのマルチ往復認証機構を使用した場合の動作性能を改善することが見出されています。 EAP断片化が必要なラウンドトリップの数を増加させるためにそのような取引所では、それが典型的です。例えば、EAP-TLS認証[RFC5216]が試みられるとEAPピアとサーバの両方が8キロバイトの証明書チェーンを使用する場合、RADIUSパケットは、共通のイーサネットMTUに（1500オクテット）を制限している場合など、多くの15のようなラウンドトリップを必要とすることができますLAN上のEAP（EAPOL）のための例を使用しています。 RADIUS / UDPパケットの断片化は、そのようなフィルタリングルータ、ファイアウォール、NATのような中間デバイス内フラグメンテーションサポートの欠如のために、一般的に得策です。 RADIUS / UDP実装は通常、MTUディスカバリをサポートしていないので、断片化が最大のRADIUS / UDPパケットサイズが1500オクテットに制限されている場合にも発生する可能性があります。"
    },
    {
      "indent": 3,
      "text": "These problems disappear if a 4096-octet application-layer payload can be used alongside RADIUS/TLS. Since most TCP implementations support MTU discovery, the TCP Maximum Segment Size (MSS) is automatically adjusted to account for the MTU, and the larger congestion window supported by TCP may allow multiple TCP segments to be sent within a single window. Even those few TCP stacks that do not perform Path MTU discovery can already support arbitrary payloads.",
      "ja": "4096オクテットアプリケーション層のペイロードは、RADIUS / TLSと一緒に使用することができれば、これらの問題が消えます。ほとんどのTCP実装はMTUディスカバリをサポートするため、TCP最大セグメントサイズ（MSS）が自動的にMTUを考慮して調整され、そしてTCPによってサポート大きい輻輳ウィンドウは、複数のTCPセグメントが単一のウィンドウ内で送信されることを可能にし得ます。パスMTUディスカバリを実行しなくても、それらのいくつかのTCPスタックは、既に任意のペイロードをサポートすることができます。"
    },
    {
      "indent": 3,
      "text": "Where the MTU for EAP packets is large, RADIUS/EAP traffic required for an EAP-TLS authentication with 8-KB certificate chains may be reduced to 7 round trips or less, resulting in substantially reduced authentication times.",
      "ja": "EAPパケットのMTUが大きい場合、8-KBの証明書チェーンを持つEAP-TLS認証に必要なRADIUS / EAPトラフィックは、実質的に減少し、認証時間をもたらす、7ラウンドトリップ以下にすることができます。"
    },
    {
      "indent": 3,
      "text": "In addition, experience indicates that EAP sessions transported over RADIUS/TLS are less likely to abort unsuccessfully. Historically, RADIUS-over-UDP (see Section 1.2) implementations have exhibited poor retransmission behavior. Some implementations retransmit packets, others do not, and others send new packets rather than performing retransmission. Some implementations are incapable of detecting EAP retransmissions, and will instead treat the retransmitted packet as an error. As a result, within RADIUS/UDP implementations, retransmissions have a high likelihood of causing an EAP authentication session to fail. For a system with a million logins a day running EAP-TLS mutual authentication with 15 round trips, and having a packet loss probability of P=0.01%, we expect that 0.3% of connections will experience at least one lost packet. That is, 3,000 user sessions each day will experience authentication failure. This is an unacceptable failure rate for a mass-market network service.",
      "ja": "また、経験がRADIUS / TLSを介して伝送EAPセッションが失敗し中止する可能性が低いことを示しています。歴史的に、RADIUSオーバーUDP（セクション1.2を参照）の実装が悪い再送挙動を示しています。いくつかの実装では、他にはない、パケットを再送信し、他の人ではなく、再送信を実行するよりも、新しいパケットを送信します。一部の実装では、EAPの再送信を検出することができない、代わりにエラーとして再送信されたパケットを処理します。その結果、RADIUS / UDPの実装の中に、再送信は、EAP認証セッションが失敗する原因の可能性が高いがあります。百万のログイン日は15の往復とEAP-TLS相互認証を実行している、とPのパケット損失確率= 0.01％を有するシステムのために、我々は、接続の0.3％が、少なくとも一つの失われたパケットを経験することを期待しています。それは、毎日が認証失敗を経験する3000回のユーザーセッションです。これは、大衆市場のネットワークサービスには許容できない故障率です。"
    },
    {
      "indent": 3,
      "text": "Using a reliable transport method such as TCP means that RADIUS implementations can remove all application-layer retransmissions, and instead rely on the Operating System (OS) kernel's well-tested TCP transport to ensure Path MTU discovery and reliable delivery. Modern TCP implementations also implement anti-spoofing provisions, which is more difficult to do in a UDP application.",
      "ja": "TCPのような信頼性の高い輸送方法を使用すると、RADIUS実装は、すべてのアプリケーション層の再送を削除し、代わりにパスMTUの発見と信頼性の高い配信を確保するために、オペレーティングシステム（OS）カーネルの十分にテストされたTCP輸送に頼ることができることを意味します。現代のTCP実装はまた、UDPアプリケーションで行うことがより困難である、アンチスプーフィングの規定を実施します。"
    },
    {
      "indent": 3,
      "text": "In contrast, use of TCP as a transport between a Network Access Server (NAS) and a RADIUS server is usually a poor fit. As noted in [RFC3539], Section 2.1, for systems originating low numbers of RADIUS request packets, inter-packet spacing is often larger than the packet Round-Trip Time (RTT), meaning that, the congestion window will typically stay below the minimum value on a long-term basis. The result is an increase in packets due to ACKs as compared to UDP, without a corresponding set of benefits. In addition, the lack of substantial traffic implies the need for additional watchdog traffic to confirm reachability.",
      "ja": "これとは対照的に、ネットワークアクセスサーバ（NAS）とRADIUSサーバ間のトランスポートとしてTCPを使用することは、通常、貧しいフィット感です。 [RFC3539]で述べたように、2.1節では、システムがRADIUS要求パケットの低い数字を発信するため、パケット間の間隔は、輻輳ウィンドウは、通常、最小の下にとどまるだろう、ということを意味し、多くの場合、パケット往復時間（RTT）よりも大きくなっています長期的に値。利点の対応するセットなしで、UDPに比べて結果が原因のACKへのパケットの増加です。また、かなりのトラフィックの欠如は、到達可能性を確認するために追加のウォッチドッグ・トラフィックの必要性を意味します。"
    },
    {
      "indent": 3,
      "text": "As a result, the objections to reliable transport indicated in [RFC2865], Section 2.4, continue to apply to NAS-RADIUS server communications, and UDP SHOULD continue to be used as the transport protocol in this scenario. In addition, it is recommended that implementations of RADIUS Dynamic Authorization Extensions [RFC5176] SHOULD continue to utilize UDP transport, since the volume of dynamic authorization traffic is usually expected to be small.",
      "ja": "結果として、[RFC2865]に示されている信頼性の高い輸送、2.4節に異議は、NAS-RADIUSサーバ通信に適用し続け、およびUDPは、このシナリオでは、トランスポートプロトコルとして使用され続けるべきです。また、動的認証トラフィックの量は、通常は小さいと予想されるので、RADIUSダイナミックな承認拡張[RFC5176]の実装は、UDPトランスポートを利用し続けることをお勧めします。"
    },
    {
      "indent": 0,
      "text": "1.2. Terminology",
      "section_title": true,
      "ja": "1.2。用語"
    },
    {
      "indent": 3,
      "text": "This document uses the following terms:",
      "ja": "このドキュメントでは、次の用語を使用しています："
    },
    {
      "indent": 3,
      "text": "RADIUS client A device that provides an access service for a user to a network. Also referred to as a Network Access Server, or NAS.",
      "ja": "RADIUSクライアントネットワークへのユーザーのアクセスサービスを提供するデバイス。また、ネットワークアクセスサーバー、またはNASと呼ばれます。"
    },
    {
      "indent": 3,
      "text": "RADIUS server A device that provides one or more of authentication, authorization, and/or accounting (AAA) services to a NAS.",
      "ja": "RADIUSサーバ認証の一つ以上を提供するデバイスを、許可、および/またはNASに（AAA）サービスを占めています。"
    },
    {
      "indent": 3,
      "text": "RADIUS proxy A RADIUS proxy acts as a RADIUS server to the NAS, and a RADIUS client to the RADIUS server.",
      "ja": "RADIUSプロキシA RADIUSプロキシは、RADIUSサーバへのNASへのRADIUSサーバ、およびRADIUSクライアントとして機能します。"
    },
    {
      "indent": 3,
      "text": "RADIUS request packet A packet originated by a RADIUS client to a RADIUS server. For example, Access-Request, Accounting-Request, CoA-Request, or Disconnect-Request.",
      "ja": "RADIUS要求パケットRADIUSサーバにRADIUSクライアントによって発信パケット。例えば、アクセス要求、アカウンティング要求、アシルCoA  - 要求、又は切断リクエスト。"
    },
    {
      "indent": 3,
      "text": "RADIUS response packet A packet sent by a RADIUS server to a RADIUS client, in response to a RADIUS request packet. For example, Access-Accept, Access-Reject, Access-Challenge, Accounting-Response, or CoA-ACK.",
      "ja": "RADIUS応答パケットRADIUS要求パケットに応答して、RADIUSクライアントへのRADIUSサーバによって送信されたパケット。例えば、アクセスが-受け入れ、アクセスが拒否、アクセスチャレンジ、会計・レスポンス、またはアシルCoA-ACK。"
    },
    {
      "indent": 3,
      "text": "RADIUS/UDP RADIUS over UDP, as defined in [RFC2865].",
      "ja": "[RFC2865]で定義されるようにUDP上RADIUS / UDP RADIUS、。"
    },
    {
      "indent": 3,
      "text": "RADIUS/TCP RADIUS over TCP, as defined in this document.",
      "ja": "この文書で定義されるように、TCP上のRADIUS / TCP RADIUS、。"
    },
    {
      "indent": 3,
      "text": "RADIUS/TLS RADIUS over TLS, as defined in [RFC6614].",
      "ja": "RADIUS / TLS上TLS RADIUS [RFC6614]で定義されます。"
    },
    {
      "indent": 0,
      "text": "1.3. Requirements Language",
      "section_title": true,
      "ja": "1.3。要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Changes to RADIUS",
      "section_title": true,
      "ja": "RADIUS 2.変更"
    },
    {
      "indent": 3,
      "text": "RADIUS/TCP involves sending RADIUS application messages over a TCP connection. In the sections that follow, we discuss the implications for the RADIUS packet format (Section 2.1), port usage (Section 2.2), RADIUS MIBs (Section 2.3), and RADIUS proxies (Section 2.5). TCP-specific issues are discussed in Section 2.6.",
      "ja": "RADIUS / TCPはTCP接続を介してRADIUSアプリケーションメッセージを送信が含まれます。以下のセクションでは、我々は、RADIUSパケット形式（セクション2.1）、ポートの使用（セクション2.2）、RADIUSのMIB（2.3節）への影響、およびRADIUSプロキシ（セクション2.5）を議論します。 TCP固有の問題は、2.6節で議論されています。"
    },
    {
      "indent": 0,
      "text": "2.1. Packet Format",
      "section_title": true,
      "ja": "2.1。パケットフォーマット"
    },
    {
      "indent": 3,
      "text": "The RADIUS packet format is unchanged from [RFC2865], [RFC2866], and [RFC5176]. Specifically, all of the following portions of RADIUS MUST be unchanged when using RADIUS/TCP:",
      "ja": "RADIUSパケットフォーマットは、[RFC2865]、[RFC2866]及び[RFC5176]と変わりません。 RADIUS / TCPを使用する場合、具体的に、RADIUSの以下の部分の全ては不変でなければなりません。"
    },
    {
      "indent": 6,
      "text": "* Packet format * Permitted codes * Request Authenticator calculation * Response Authenticator calculation * Minimum packet length * Maximum packet length * Attribute format * Vendor-Specific Attribute (VSA) format * Permitted data types * Calculations of dynamic attributes such as CHAP-Challenge, or Message-Authenticator. * Calculation of \"encrypted\" attributes such as Tunnel-Password.",
      "ja": "*パケットフォーマット*許可コード*要求認証算出*レスポンス認証計算*最小パケット長*最大パケット長*属性フォーマット*ベンダー固有の属性（VSA）フォーマット*許可データ型*例えばCHAPチャレンジなどの動的属性の計算、又はメッセージ認証。 *このようトンネルパスワードとして「暗号化」属性の計算。"
    },
    {
      "indent": 3,
      "text": "The use of TLS transport does not change the calculation of security-related fields (such as the Response-Authenticator) in RADIUS [RFC2865] or RADIUS Dynamic Authorization [RFC5176]. Calculation of attributes such as User-Password [RFC2865] or Message-Authenticator [RFC3579] also does not change.",
      "ja": "TLSトランスポートを使用することは、RADIUS [RFC2865]またはRADIUS動的認可[RFC5176]に（例えばレスポンス・オーセンティケータとして）セキュリティ関連分野の計算を変更しません。こうしたユーザーのパスワード[RFC2865]またはMessage-Authenticatorの[RFC3579]などの属性の計算も変更されません。"
    },
    {
      "indent": 3,
      "text": "Clients and servers MUST be able to store and manage shared secrets based on the key described in Section 2.6, of (IP address, port, transport protocol).",
      "ja": "クライアントとサーバーは、（IPアドレス、ポート、トランスポートプロトコル）の2.6節で説明したキーに基づいて、共有秘密を、格納および管理できなければなりません。"
    },
    {
      "indent": 3,
      "text": "The changes to RADIUS implementations required to implement this specification are largely limited to the portions that send and receive packets on the network.",
      "ja": "この仕様を実装するために必要なRADIUSの実装に対する変更は、ネットワーク上でパケットを送受信部に大きく制限されています。"
    },
    {
      "indent": 0,
      "text": "2.2. Assigned Ports for RADIUS/TCP",
      "section_title": true,
      "ja": "2.2。 RADIUS / TCPのために割り当てられたポート"
    },
    {
      "indent": 3,
      "text": "IANA has already assigned TCP ports for RADIUS transport, as outlined below:",
      "ja": "下記のとおりIANAは既に、RADIUS輸送のためのTCPポートを割り当てています："
    },
    {
      "indent": 6,
      "text": "* radius 1812/tcp * radius-acct 1813/tcp * radius-dynauth 3799/tcp",
      "ja": "*半径1812 / TCP *半径-ACCT 1813 / TCP *半径dynauth 3799 / TCP"
    },
    {
      "indent": 3,
      "text": "Since these ports are unused by existing RADIUS implementations, the assigned values MUST be used as the default ports for RADIUS over TCP.",
      "ja": "これらのポートは、既存のRADIUS実装で使用されていないので、割り当てられた値は、TCP上のRADIUSのデフォルトポートとして使用されなければなりません。"
    },
    {
      "indent": 3,
      "text": "The early deployment of RADIUS was done using UDP port number 1645, which conflicts with the \"datametrics\" service. Implementations using RADIUS/TCP MUST NOT use TCP ports 1645 or 1646 as the default ports for this specification.",
      "ja": "RADIUSの初期の展開は「datametrics」サービスと競合するUDPポート番号1645を使用して行われました。 RADIUS / TCPを使用して実装は、この仕様書のデフォルトポートとしてTCPポート1645または1646を使用してはなりません。"
    },
    {
      "indent": 3,
      "text": "The \"radsec\" port (2083/tcp) SHOULD be used as the default port for RADIUS/TLS. The \"radius\" port (1812/tcp) SHOULD NOT be used for RADIUS/TLS.",
      "ja": "「radsec」ポート（2083 / TCP）は、RADIUS / TLSのデフォルトポートとして使用する必要があります。 \"半径\" のポート（1812 / TCP）はRADIUS / TLSには使用できません。"
    },
    {
      "indent": 0,
      "text": "2.3. Management Information Base (MIB)",
      "section_title": true,
      "ja": "2.3。管理情報ベース（MIB）"
    },
    {
      "indent": 3,
      "text": "The MIB Module definitions in [RFC4668], [RFC4669], [RFC4670], [RFC4671], [RFC4672], and [RFC4673] are intended to be used for RADIUS over UDP. As such, they do not support RADIUS/TCP, and will need to be updated in the future. Implementations of RADIUS/TCP SHOULD NOT reuse these MIB Modules to perform statistics counting for RADIUS/TCP connections.",
      "ja": "[RFC4668]でMIBモジュール定義、[RFC4669]、[RFC4670]、[RFC4671]、[RFC4672]及び[RFC4673]はUDP上RADIUSのために使用されることが意図されます。そのため、彼らは、RADIUS / TCPをサポートしていませんし、将来的に更新する必要があります。 RADIUS / TCPの実装は、RADIUS / TCP接続に対してカウント統計を実行するために、これらのMIBモジュールを再利用すべきではありません。"
    },
    {
      "indent": 0,
      "text": "2.4. Detecting Live Servers",
      "section_title": true,
      "ja": "2.4。ライブサーバーを検出"
    },
    {
      "indent": 3,
      "text": "As RADIUS is a \"hop-by-hop\" protocol, a RADIUS proxy shields the client from any information about downstream servers. While the client may be able to deduce the operational state of the local server (i.e., proxy), it cannot make any determination about the operational state of the downstream servers.",
      "ja": "RADIUSは、「ホップバイホップ」プロトコルであるため、RADIUSプロキシは、ダウンストリームサーバーに関する情報からクライアントを保護します。クライアントは、ローカルサーバ（つまり、プロキシ）の動作状態を推定することができるかもしれないが、それは、ダウンストリームサーバーの動作状態についての判断を行うことはできません。"
    },
    {
      "indent": 3,
      "text": "Within RADIUS, as defined in [RFC2865], proxies typically only forward traffic between the NAS and RADIUS server, and they do not generate their own responses. As a result, when a NAS does not receive a response to a request, this could be the result of packet loss between the NAS and proxy, a problem on the proxy, loss between the RADIUS proxy and server, or a problem with the server.",
      "ja": "RADIUS内では、[RFC2865]で定義されるように、プロキシ一般的にのみ前進NASとRADIUSサーバ間のトラフィック、および彼らは自分の応答を生成しません。 NASは、要求に対する応答を受信しない場合、結果として、これは、プロキシ、RADIUSプロキシとサーバの間の損失、またはサーバーに問題上、問題NASとプロキシ間のパケット損失の結果である可能性があります。"
    },
    {
      "indent": 3,
      "text": "When UDP is used as a transport protocol, the absence of a reply can cause a client to deduce (incorrectly) that the proxy is unavailable. The client could then fail over to another server or conclude that no \"live\" servers are available (OKAY state in [RFC3539], Appendix A). This situation is made even worse when requests are sent through a proxy to multiple destinations. Failures in one destination may result in service outages for other destinations, if the client erroneously believes that the proxy is unresponsive.",
      "ja": "UDPは、トランスポートプロトコルとして使用されている場合は、返信がない場合は、クライアントがプロキシが利用できないことを（間違って）推測することがあります。クライアントは、別のサーバーにフェールオーバーまたは全く「ライブ」のサーバーが利用できないと結論でした（[RFC3539]でOKAY状態、付録A）。要求が複数の宛先にプロキシを経由して送信されるとき、この状況はさらに悪化しています。クライアントが誤ったプロキシが応答しないことを信じている場合は、1つの宛先での失敗は、他の目的地のためのサービス停止になることがあります。"
    },
    {
      "indent": 3,
      "text": "For RADIUS/TLS, it is RECOMMENDED that implementations utilize the existence of a TCP connection along with the application-layer watchdog defined in [RFC3539], Section 3.4, to determine that the server is \"live\".",
      "ja": "RADIUS / TLSのために、サーバは、「ライブ」であることを決定するために、実装は[RFC3539]で定義されたアプリケーション層のウォッチドッグ、3.4節と一緒にTCP接続の存在を利用することが推奨されます。"
    },
    {
      "indent": 3,
      "text": "RADIUS clients using RADIUS/TCP MUST mark a connection DOWN if the network stack indicates that the connection is no longer active. If the network stack indicates that the connection is still active, clients MUST NOT decide that it is down until the application-layer watchdog algorithm has marked it DOWN ([RFC3539], Appendix A). RADIUS clients using RADIUS/TCP MUST NOT decide that a RADIUS server is unresponsive until all TCP connections to it have been marked DOWN.",
      "ja": "ネットワークスタックは、接続がもはや有効であることを示していない場合RADIUS / TCPを使用してRADIUSクライアントがDOWN接続をマークする必要があります。ネットワークスタックは、接続がまだアクティブであることを示している場合、クライアントはアプリケーション層のウォッチドッグ・アルゴリズムがそれをマークダウンするまで、それは（[RFC3539]、付録A）ダウンしていることを決定してはなりません。 RADIUS / TCPを使用してRADIUSクライアントは、それへのすべてのTCP接続がDOWNとマークされるまで、RADIUSサーバが応答しないことを決定してはなりません。"
    },
    {
      "indent": 3,
      "text": "The above requirements do not forbid the practice of a client proactively closing connections or marking a server as DOWN due to an administrative decision.",
      "ja": "上記の要件が原因行政決定にクライアントが積極的に接続を閉じるか、DOWNなどのサーバーをマーキングの練習を禁止していません。"
    },
    {
      "indent": 0,
      "text": "2.5. Congestion Control Issues",
      "section_title": true,
      "ja": "2.5。輻輳制御の問題"
    },
    {
      "indent": 3,
      "text": "Additional issues with RADIUS proxies involve transport protocol changes where the proxy receives packets on one transport protocol and forwards them on a different transport protocol. There are several situations in which the law of \"conservation of packets\" could be violated on an end-to-end basis (e.g., where more packets could enter the system than could leave it on a short-term basis):",
      "ja": "RADIUSプロキシで追加の問題は、プロキシが1つのトランスポートプロトコル上のパケットを受信して​​、異なるトランスポートプロトコルに転送し、トランスポートプロトコルの変更を伴います。 「パケットの保全」の法律は、エンドツーエンドベースで違反することができた、いくつかの状況がある（例えば、より多くのパケットは短期間でそれを残すことができるよりも、システムを入力することができます）："
    },
    {
      "indent": 6,
      "text": "* Where TCP is used between proxies, it is possible that the bandwidth consumed by incoming UDP packets destined to a given upstream server could exceed the sending rate of a single TCP connection to that server, based on the window size/RTT estimate.",
      "ja": "TCPは、プロキシとの間で使用される場合*、与えられた上流のサーバ宛ての着信UDPパケットによって消費される帯域幅は、ウィンドウサイズ/ RTT推定値に基づいて、そのサーバへの単一のTCPコネクションの送信速度を上回る可能性があります。"
    },
    {
      "indent": 6,
      "text": "* It is possible for the incoming rate of TCP packets destined to a given realm to exceed the UDP throughput achievable using the transport guidelines established in [RFC5080]. This could happen, for example, where the TCP window between proxies has opened, but packet loss is being experienced on the UDP leg, so that the effective congestion window on the UDP side is 1.",
      "ja": "*これは、達成可能な[RFC5080]で確立されたトランスポートのガイドラインを使用して、UDPスループットを超えて指定されたレルムに宛てたTCPパケットの受信レートが可能です。これは、プロキシ間のTCPウィンドウが開いた例のために、起こる可能性がありますが、UDP側の効果的な輻輳ウィンドウが1になるように、パケット損失は、UDP足に経験されています。"
    },
    {
      "indent": 3,
      "text": "Intrinsically, proxy systems operate with multiple control loops instead of one end-to-end loop, and so they are less stable. This is true even for TCP-TCP proxies. As discussed in [RFC3539], the only way to achieve stability equivalent to a single TCP connection is to mimic the end-to-end behavior of a single TCP connection. This typically is not achievable with an application-layer RADIUS implementation, regardless of transport.",
      "ja": "本質的に、プロキシシステムは、代わりに一端ツーエンドループの複数の制御ループで動作し、従ってそれらはより安定です。これはさえTCP-TCPプロキシの真実です。 [RFC3539]で説明したように、単一のTCP接続と同等の安定性を達成する唯一の方法は、単一のTCP接続のエンドツーエンドの動作を模倣することです。これは、典型的にかかわらず輸送の、アプリケーション層のRADIUS実装で達成可能ではありません。"
    },
    {
      "indent": 0,
      "text": "2.6. TCP Specific Issues",
      "section_title": true,
      "ja": "2.6。 TCP固有の問題"
    },
    {
      "indent": 3,
      "text": "The guidelines defined in [RFC3539] for implementing a AAA protocol over reliable transport are applicable to RADIUS/TLS.",
      "ja": "信頼性の高いトランスポートを介してAAAプロトコルを実装するために[RFC3539]で定義されたガイドラインは、RADIUS / TLSに適用可能です。"
    },
    {
      "indent": 3,
      "text": "The application-layer watchdog defined in [RFC3539], Section 3.4, MUST be used. The Status-Server packet [RFC5997] MUST be used as the application-layer watchdog message. Implementations MUST reserve one RADIUS ID per connection for the application-layer watchdog message. This restriction is described further in Section 2.6.4.",
      "ja": "[RFC3539]で定義されたアプリケーション層のウォッチドッグ、セクション3.4は、使用しなければなりません。ステータス・サーバーパケット[RFC5997]はアプリケーション層ウォッチドッグ・メッセージとして使用されなければなりません。実装はアプリケーション層のウォッチドッグ・メッセージ用の接続ごとに1つのRADIUS IDを予約する必要があります。この制限は、セクション2.6.4でさらに説明されます。"
    },
    {
      "indent": 3,
      "text": "RADIUS/TLS implementations MUST support receiving RADIUS packets over both UDP and TCP transports originating from the same endpoint. RADIUS packets received over UDP MUST be replied to over UDP; RADIUS packets received over TCP MUST be replied to over TCP. That is, RADIUS clients and servers MUST be treated as unique based on a key of the three-tuple (IP address, port, transport protocol). Implementations MUST permit different shared secrets to be used for UDP and TCP connections to the same destination IP address and numerical port.",
      "ja": "RADIUS / TLSの実装はUDPとTCPの両方の上にRADIUSパケットを受信サポートしている必要があり、同じエンドポイントから発信運びます。 UDPを介して受信したRADIUSパケットはUDP上に答えなければなりません。 TCPを介して受信したRADIUSパケットはTCP上に答えなければなりません。これは、RADIUSクライアントとサーバは、3組（IPアドレス、ポート、トランスポートプロトコル）のキーに基づいてユニークなものとして扱わなければならない、です。実装は同じ宛先IPアドレスと数値のポートにUDPとTCPの接続に使用されるように、異なる共有秘密を許可する必要があります。"
    },
    {
      "indent": 3,
      "text": "This requirement does not forbid the traditional practice of using primary and secondary servers in a failover relationship. Instead, it requires that two services sharing an IP address and numerical port, but differing in transport protocol, MUST be treated as independent services for the purpose of failover, load-balancing, etc.",
      "ja": "この要件は、フェールオーバー関係でプライマリサーバとセカンダリサーバを使用しての伝統的な慣行を禁止しません。その代わりに、2つのサービスIPアドレスと数値のポートを共有しますが、トランスポートプロトコルが異なるが、フェイルオーバー、負荷分散などの目的のために独立したサービスとして扱わなければならないことを要求します"
    },
    {
      "indent": 3,
      "text": "Whenever the underlying network stack permits the use of TCP keepalive socket options, their use is RECOMMENDED.",
      "ja": "基盤となるネットワークスタックは、TCPキープアライブソケットオプションを使用することが可能になるたびに、その使用が推奨されます。"
    },
    {
      "indent": 0,
      "text": "2.6.1. Duplicates and Retransmissions",
      "section_title": true,
      "ja": "2.6.1。重複して再送信"
    },
    {
      "indent": 3,
      "text": "As TCP is a reliable transport, implementations MUST NOT retransmit RADIUS request packets over a given TCP connection. Similarly, if there is no response to a RADIUS packet over one TCP connection, implementations MUST NOT retransmit that packet over a different TCP connection to the same destination IP address and port, while the first connection is in the OKAY state ([RFC3539], Appendix A).",
      "ja": "TCPは信頼性の高いトランスポートであるため、実装が与えられたTCP接続を介してRADIUS要求パケットを再送してはなりません。 1つのTCP接続を介してRADIUSパケットに応答がない場合は、最初の接続がOK状態（[RFC3539]にある間に、同様に、実装は、同一の宛先IPアドレスおよびポートへの異なるTCP接続を介してそのパケットを再送信してはいけません付録A）。"
    },
    {
      "indent": 3,
      "text": "However, if the TCP connection is broken or closed, retransmissions over new connections are permissible. RADIUS request packets that have not yet received a response MAY be transmitted by a RADIUS client over a new TCP connection. As this procedure involves using a new source port, the ID of the packet MAY change. If the ID changes, any security attributes such as Message-Authenticator MUST be recalculated.",
      "ja": "TCP接続が壊れているか閉じている場合は、新しい接続での再送が許容されます。まだ応答を受け取っていないRADIUS要求パケットは新しいTCP接続を介してRADIUSクライアントによって送信することができます。この手順では、新しい送信元ポートを使用することを含むとして、パケットのIDは変更されることがあります。 IDが変更された場合、このようなメッセージ・オーセンティケータとして任意のセキュリティ属性を再計算しなければなりません。"
    },
    {
      "indent": 3,
      "text": "If a TCP connection is broken or closed, any cached RADIUS response packets ([RFC5080], Section 2.2.2) associated with that connection MUST be discarded. A RADIUS server SHOULD stop the processing of any requests associated with that TCP connection. No response to these requests can be sent over the TCP connection, so any further processing is pointless. This requirement applies not only to RADIUS servers, but also to proxies. When a client's connection to a proxy server is closed, there may be responses from a home server that were supposed to be sent by the proxy back over that connection to the client. Since the client connection is closed, those responses from the home server to the proxy server SHOULD be silently discarded by the proxy.",
      "ja": "TCP接続が壊れているか閉じている場合、その接続に関連付けられたキャッシュされたRADIUS応答パケットが（[RFC5080]、セクション2.2.2）を捨てなければなりません。 RADIUSサーバは、TCP接続に関連するすべての要求の処理を停止する必要があります。これらの要求に対する応答は、TCP接続を介して送信されないことができますので、任意の更なる処理は無意味です。この要件は、RADIUSサーバに、だけでなく、プロキシにするだけでなく適用されます。プロキシサーバーへのクライアントの接続が閉じられると、クライアントへの接続を介してバックプロキシによって送信されるようになっていたホームサーバーからの応答があるかもしれません。クライアント接続が閉じているので、プロキシサーバーへのホームサーバーからのものの応答は黙っプロキシによって捨てられるべきです。"
    },
    {
      "indent": 3,
      "text": "Despite the above discussion, RADIUS servers SHOULD still perform duplicate detection on received packets, as described in [RFC5080], Section 2.2.2. This detection can prevent duplicate processing of packets from non-conformant clients.",
      "ja": "[RFC5080]に記載されているように上記の議論にもかかわらず、RADIUSサーバはまだ、受信パケットのセクション2.2.2重複検出を実行する必要があります。この検出は、非準拠のクライアントからのパケットの複製処理を防ぐことができます。"
    },
    {
      "indent": 3,
      "text": "RADIUS packets SHOULD NOT be retransmitted to the same destination IP and numerical port, but over a different transport protocol. There is no guarantee in RADIUS that the two ports are in any way related. This requirement does not, however, forbid the practice of putting multiple servers into a failover or load-balancing pool. In that situation, RADIUS request MAY be retransmitted to another server that is known to be part of the same pool.",
      "ja": "RADIUSパケットが同一の宛先IPと数値ポートに再送信が、異なるトランスポートプロトコルを超えることはできません。 2つのポートが関連するどのような方法であるRADIUSでの保証はありません。この要件は、しかし、フェイルオーバーや負荷分散プールに複数のサーバを置くことの練習を禁止しません。そのような状況では、RADIUS要求は同じプールの一部であることが知られている別のサーバーに再送信されることができます。"
    },
    {
      "indent": 0,
      "text": "2.6.2. Head of Line Blocking",
      "section_title": true,
      "ja": "2.6.2。ラインブロッキングのヘッド"
    },
    {
      "indent": 3,
      "text": "When using UDP as a transport for RADIUS, there is no ordering of packets. If a packet sent by a client is lost, that loss has no effect on subsequent packets sent by that client.",
      "ja": "RADIUSのためのトランスポートとしてUDPを使用する場合は、パケットの順序付けがありません。クライアントから送信されたパケットが失われた場合、その損失は、そのクライアントから送信された後続のパケットには影響を与えません。"
    },
    {
      "indent": 3,
      "text": "Unlike UDP, TCP is subject to issues related to Head of Line (HoL) blocking. This occurs when a TCP segment is lost and a subsequent TCP segment arrives out of order. While the RADIUS server can process RADIUS packets out of order, the semantics of TCP makes this impossible. This limitation can lower the maximum packet processing rate of RADIUS/TCP.",
      "ja": "UDPとは異なり、TCPは、ブロッキングラインのヘッド（HOL）に関連する問題の対象となります。 TCPセグメントが失われ、それに続くTCPセグメントが順不同で到着したときに発生します。 RADIUSサーバが故障してRADIUSパケットを処理することができますが、TCPのセマンティクスは、これは不可能です。この制限は、RADIUS / TCPの最大パケット処理速度を低下させることができます。"
    },
    {
      "indent": 0,
      "text": "2.6.3. Shared Secrets",
      "section_title": true,
      "ja": "2.6.3。共有秘密"
    },
    {
      "indent": 3,
      "text": "The use of TLS transport does not change the calculation of security-related fields (such as the Response-Authenticator) in RADIUS [RFC2865] or RADIUS Dynamic Authorization [RFC5176]. Calculation of attributes such as User-Password [RFC2865] or Message-Authenticator [RFC3579] also does not change.",
      "ja": "TLSトランスポートを使用することは、RADIUS [RFC2865]またはRADIUS動的認可[RFC5176]に（例えばレスポンス・オーセンティケータとして）セキュリティ関連分野の計算を変更しません。こうしたユーザーのパスワード[RFC2865]またはMessage-Authenticatorの[RFC3579]などの属性の計算も変更されません。"
    },
    {
      "indent": 3,
      "text": "Clients and servers MUST be able to store and manage shared secrets based on the key described above, at the start of this section (i.e., IP address, port, transport protocol).",
      "ja": "クライアントとサーバは、このセクションの開始（すなわち、IPアドレス、ポート、トランスポートプロトコル）で、上記キーに基づいて、共有秘密を格納および管理できなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.6.4. Malformed Packets and Unknown Clients",
      "section_title": true,
      "ja": "2.6.4。不正な形式のパケットや不明なクライアント"
    },
    {
      "indent": 3,
      "text": "The RADIUS specifications ([RFC2865], and many others) say that an implementation should \"silently discard\" a packet in a number of circumstances. This action has no further consequences for UDP transport, as the \"next\" packet is completely independent of the previous one.",
      "ja": "RADIUS仕様（[RFC2865]、および他の多く）は、実装は多くの状況でパケットを「静かに捨てる」べきであることを言います。 「次」のパケットは以前のものとは完全に独立しているため、このアクションは、UDPトランスポートのための更なる影響を与えません。"
    },
    {
      "indent": 3,
      "text": "When TCP is used as a transport, decoding the \"next\" packet on a connection depends on the proper decoding of the previous packet. As a result, the behavior with respect to discarded packets has to change.",
      "ja": "TCPは、接続上の「次」のパケットをデコードし、トランスポートとして使用する場合は、前のパケットの適切なデコーディングに依存します。その結果、廃棄されたパケットについての動作は変更することがあります。"
    },
    {
      "indent": 3,
      "text": "Implementations of this specification SHOULD treat the \"silently discard\" texts referenced above as \"silently discard and close the connection\". That is, the TCP connection MUST be closed if any of the following circumstances are seen:",
      "ja": "この仕様の実装は、「黙って破棄し、接続を閉じる」として上記参照「静かに捨てる」のテキストを扱うべきです。それは次のいずれかの状況が見られる場合は、TCP接続がクローズされなければならない、次のとおりです。"
    },
    {
      "indent": 6,
      "text": "* Connection from an unknown client * Packet where the RADIUS \"Length\" field is less than the minimum RADIUS packet length * Packet where the RADIUS \"Length\" field is more than the maximum RADIUS packet length * Packet that has an Attribute \"Length\" field has value of zero or one (0 or 1) * Packet where the attributes do not exactly fill the packet * Packet where the Request Authenticator fails validation (where validation is required) * Packet where the Response Authenticator fails validation (where validation is required) * Packet where the Message-Authenticator attribute fails validation (when it occurs in a packet)",
      "ja": "RADIUS「長さ」フィールドは、RADIUS「長さ」フィールドは、属性「長さ」フィールドを持っている最大のRADIUSパケット長*パケット以上で最小のRADIUSパケット長*パケット未満である*不明なクライアントからの接続*パケット属性は正確にパケットを記入しない0または1（0または1）*パケット*要求認証は、（検証が必要）検証に失敗したパケット*レスポンス認証は（検証が必要）検証に失敗したパケットの価値を持っています* Message-Authenticatorアトリビュートが検証に失敗したパケット（それはパケットに発生したとき）"
    },
    {
      "indent": 3,
      "text": "After applying the above rules, there are still two situations where the previous specifications allow a packet to be \"silently discarded\" upon receipt:",
      "ja": "上記の規則を適用した後、以前の仕様は、パケットが受信時に「黙って破棄」することを可能にする2つの状況がまだあります。"
    },
    {
      "indent": 6,
      "text": "* Packets with an invalid code field * Response packets that do not match any outstanding request",
      "ja": "未処理の要求と一致していません*無効なコードフィールドを持つパケット*応答パケット"
    },
    {
      "indent": 3,
      "text": "In these situations, the TCP connections MAY remain open, or they MAY be closed, as an implementation choice. However, the invalid packet MUST be silently discarded.",
      "ja": "このような状況では、TCP接続が開いたままにしたり、彼らは実装の選択肢として、閉鎖することができます。しかし、不正なパケットは黙って捨てなければなりません。"
    },
    {
      "indent": 3,
      "text": "These requirements reduce the possibility for a misbehaving client or server to wreak havoc on the network.",
      "ja": "これらの要件は、ネットワーク上の大混乱をもたらすためにふらちなクライアントまたはサーバの可能性を減らします。"
    },
    {
      "indent": 0,
      "text": "2.6.5. Limitations of the ID Field",
      "section_title": true,
      "ja": "2.6.5。 IDフィールドの制限"
    },
    {
      "indent": 3,
      "text": "The RADIUS ID field is one octet in size. As a result, any one TCP connection can have only 256 \"in flight\" RADIUS packets at a time. If more than 256 simultaneous \"in flight\" packets are required, additional TCP connections will need to be opened. This limitation is also noted in [RFC3539], Section 2.4.",
      "ja": "RADIUS IDフィールドのサイズは1つのオクテットです。その結果、任意の1つのTCP接続は、一度にRADIUSパケット「飛行中」のみ256を持つことができます。 256以上の同時「飛行中」のパケットが必要な場合は、追加のTCP接続をオープンする必要があります。この制限は、[RFC3539]、セクション2.4にも留意されたいです。"
    },
    {
      "indent": 3,
      "text": "An additional limit is the requirement to send a Status-Server packet over the same TCP connection as is used for normal requests. As noted in [RFC5997], the response to a Status-Server packet is either an Access-Accept or an Accounting-Response. If all IDs were allocated to normal requests, then there would be no free ID to use for the Status-Server packet, and it could not be sent over the connection.",
      "ja": "追加の制限は、通常の要求に使用されるのと同じTCP接続を介してステータス・サーバーのパケットを送信するための必要条件です。 [RFC5997]で述べたように、ステータス・サーバーのパケットに対する応答は、接続許可またはアカウンティング応答のいずれかです。すべてのIDは、通常の要求に割り当てられた場合には、そこにステータス・サーバーのパケットに使用する空きIDないだろう、それは接続を介して送信することができませんでした。"
    },
    {
      "indent": 3,
      "text": "Implementations SHOULD reserve ID zero (0) on each TCP connection for Status-Server packets. This value was picked arbitrarily, as there is no reason to choose any one value over another for this use.",
      "ja": "実装は、ステータス・サーバーパケットの各TCPコネクション上でIDゼロ（0）を確保すべきです。この値は、この使用のために別超えるいずれかの値を選択する理由はないとして、任意に選ばれました。"
    },
    {
      "indent": 3,
      "text": "Implementors may be tempted to extend RADIUS to permit more than 256 outstanding packets on one connection. However, doing so is a violation of a fundamental part of the protocol and MUST NOT be done. Making that extension here is outside of the scope of this specification.",
      "ja": "実装者は、1つの接続で256以上の未処理のパケットを許可するようにRADIUSを拡張したくなるかもしれません。しかし、そうすることは、プロトコルの基本的な部分の違反であるとしてはいけません。ここでは、その拡張子を作ることは、この仕様の範囲外です。"
    },
    {
      "indent": 0,
      "text": "2.6.6. EAP Sessions",
      "section_title": true,
      "ja": "2.6.6。 EAPセッション"
    },
    {
      "indent": 3,
      "text": "When RADIUS clients send EAP requests using RADIUS/TCP, they SHOULD choose the same TCP connection for all packets related to one EAP session. This practice ensures that EAP packets are transmitted in order, and that problems with any one TCP connection affect the minimum number of EAP sessions.",
      "ja": "RADIUSクライアントは、RADIUS / TCPを使用したEAP要求を送信すると、彼らは1つのEAPセッションに関連するすべてのパケットに対して同じTCP接続を選択する必要があります。この方法は、EAPパケットが順に送信されることを保証し、任意の1つのTCP接続に問題がEAPセッションの最小数に影響を与えています。"
    },
    {
      "indent": 3,
      "text": "A simple method that may work in many situations is to hash the contents of the Calling-Station-Id attribute, which normally contains the Media Access Control (MAC) address. The output of that hash can be used to select a particular TCP connection.",
      "ja": "多くの状況で働くことが簡単な方法は、通常、メディアアクセス制御（MAC）アドレスが含まれていCalling-Station-IDアトリビュートの内容をハッシュすることです。そのハッシュの出力は、特定のTCPコネクションを選択するために使用することができます。"
    },
    {
      "indent": 3,
      "text": "However, EAP packets for one EAP session can still be transported from client to server over multiple paths. Therefore, when a server receives a RADIUS request containing an EAP request, it MUST be processed without considering the transport protocol. For TCP transport, it MUST be processed without considering the source port. The algorithm suggested in [RFC5080], Section 2.1.1 SHOULD be used to track EAP sessions, as it is independent of the source port and transport protocol.",
      "ja": "しかし、1つのEAPセッションのためのEAPパケットは、まだ複数のパスを介してクライアントからサーバに転送することができます。サーバがEAP要求を含むRADIUS要求を受信した場合、したがって、それはトランスポート・プロトコルを考慮せずに処理されなければなりません。 TCPトランスポートの場合は、送信元ポートを考慮せずに処理しなければなりません。 [RFC5080]で提案されているアルゴリズムは、セクション2.1.1は、それが送信元ポートおよびトランスポートプロトコルとは無関係であるように、EAPセッションを追跡するために使用されるべきです。"
    },
    {
      "indent": 3,
      "text": "The retransmission requirements of Section 2.6.1, above, MUST be applied to RADIUS-encapsulated EAP packets. That is, EAP retransmissions MUST NOT result in retransmissions of RADIUS packets over a particular TCP connection. EAP retransmissions MAY result in retransmission of RADIUS packets over a different TCP connection, but only when the previous TCP connection is marked DOWN.",
      "ja": "上記セクション2.6.1、の再送要求は、RADIUSカプセル化EAPパケットに適用されなければなりません。これは、EAPの再送信は、特定のTCP接続を介してRADIUSパケットの再送信につながるならない（MUST NOT）されます。 EAPの再送信は、異なるTCP接続を介してRADIUSパケットの再送信になる場合がありますが、以前のTCP接続がDOWNとマークされている場合のみ。"
    },
    {
      "indent": 0,
      "text": "2.6.7. TCP Applications Are Not UDP Applications",
      "section_title": true,
      "ja": "2.6.7。 TCPアプリケーションは、UDPアプリケーションではありません"
    },
    {
      "indent": 3,
      "text": "Implementors should be aware that programming a robust TCP application can be very different from programming a robust UDP application. It is RECOMMENDED that implementors of this specification familiarize themselves with TCP application programming concepts.",
      "ja": "実装者は、堅牢なTCPアプリケーションをプログラミングすることは堅牢なUDPアプリケーションをプログラミングとは非常に異なることができることを認識すべきです。この仕様の実装は、TCPアプリケーションのプログラミングの概念に慣れることが推奨されます。"
    },
    {
      "indent": 3,
      "text": "Clients and servers SHOULD implement configurable connection limits. Clients and servers SHOULD implement configurable limits on connection lifetime and idle timeouts. Clients and servers SHOULD implement configurable rate limiting on new connections. Allowing an unbounded number or rate of TCP connections may result in resource exhaustion.",
      "ja": "クライアントとサーバーは、設定、接続制限を実装する必要があります。クライアントとサーバーは、接続寿命とアイドルタイムアウトで設定制限を実装する必要があります。クライアントとサーバーは、新しい接続に制限設定可能率を実装する必要があります。 TCP接続の無制限の数や割合を許可するとリソースの枯渇をもたらすことができます。"
    },
    {
      "indent": 3,
      "text": "Further discussion of implementation issues is outside of the scope of this document.",
      "ja": "実装上の問題のさらなる議論は、この文書の範囲外です。"
    },
    {
      "indent": 0,
      "text": "3. Diameter Considerations",
      "section_title": true,
      "ja": "3.直径の考慮事項"
    },
    {
      "indent": 3,
      "text": "This document defines TCP as a transport layer for RADIUS. It defines no new RADIUS attributes or codes. The only interaction with Diameter is in a RADIUS-to-Diameter, or in a Diameter-to-RADIUS gateway. The RADIUS side of such a gateway MAY implement RADIUS/TCP, but this change has no effect on Diameter.",
      "ja": "この文書では、RADIUSのためのトランスポート層としてTCPを定義します。それは全く新しいRADIUS属性またはコードを定義していません。直径の唯一の相互作用は、RADIUS対直径又は直径とRADIUSゲートウェイ内にあります。そのようなゲートウェイのRADIUS側はRADIUS / TCPを実装できるが、これは変更直径に影響を及ぼしません。"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "As the RADIUS packet format, signing, and client verification are unchanged from prior specifications, all of the security issues outlined in previous specifications for RADIUS/UDP are also applicable here.",
      "ja": "RADIUSパケットフォーマット、署名、およびクライアントの検証は前の仕様から変更されていないとして、RADIUS / UDPのために、以前の仕様で概説したセキュリティ問題のすべてがここにも適用されます。"
    },
    {
      "indent": 3,
      "text": "As noted above, clients and servers SHOULD support configurable connection limits. Allowing an unlimited number of connections may result in resource exhaustion.",
      "ja": "上述したように、クライアントとサーバは、設定可能な接続制限をサポートする必要があります。接続を無制限に許可すると、リソースの枯渇をもたらすことができます。"
    },
    {
      "indent": 3,
      "text": "Implementors should consult [RFC6614] for issues related to the security of RADIUS/TLS, and [RFC5246] for issues related to the security of the TLS protocol.",
      "ja": "実装者は、TLSプロトコルのセキュリティに関連する問題については、RADIUS / TLSのセキュリティに関連する問題については、[RFC6614]、および[RFC5246]を相談してください。"
    },
    {
      "indent": 3,
      "text": "Since \"bare\" TCP does not provide for confidentiality or enable negotiation of credible ciphersuites, its use is not appropriate for inter-server communications where strong security is required. As a result, \"bare\" TCP transport MUST NOT be used without TLS, IPsec, or another secure upper layer.",
      "ja": "「裸」TCPは、機密保持のために提供するか、または信頼できる暗号スイートのネゴシエーションを有効にしないので、その使用は強力なセキュリティが要求されるサーバ間の通信のために適切ではありません。その結果、「裸」TCPトランスポートは、TLS、IPsecの、または別のセキュア上層せずに使用してはいけません。"
    },
    {
      "indent": 3,
      "text": "There are no (at this time) other known security issues for RADIUS-over-TCP transport.",
      "ja": "RADIUSオーバー-TCPの輸送のための他の既知のセキュリティ問題は、（現時点では）何もありません。"
    },
    {
      "indent": 0,
      "text": "5. References",
      "section_title": true,
      "ja": "5.参考文献"
    },
    {
      "indent": 0,
      "text": "5.1. Normative References",
      "section_title": true,
      "ja": "5.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2865] Rigney, C., Willens, S., Rubens, A., and W. Simpson, \"Remote Authentication Dial In User Service (RADIUS)\", RFC 2865, June 2000.",
      "ja": "[RFC2865] Rigney、C.、ウィレンス、S.、ルーベン、A.、およびW.シンプソン、RFC 2865、2000年6月 \"ユーザーサービス（RADIUS）でリモート認証ダイヤル\"。"
    },
    {
      "indent": 3,
      "text": "[RFC3539] Aboba, B. and J. Wood, \"Authentication, Authorization and Accounting (AAA) Transport Profile\", RFC 3539, June 2003.",
      "ja": "[RFC3539] Aboba、B.、およびJ.ウッド、 \"認証、認可およびアカウンティング（AAA）のトランスポート・プロファイル\"、RFC 3539、2003年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC5997] DeKok, A., \"Use of Status-Server Packets in the Remote Authentication Dial In User Service (RADIUS) Protocol\", RFC 5997, August 2010.",
      "ja": "[RFC5997] DeKok、A.、 \"利用ユーザーサービス（RADIUS）でリモート認証ダイヤルのStatus-Serverのパケットのプロトコル\"、RFC 5997、2010年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC6614] Winter, S., McCauley, M., Venaas, S., and K. Wierenga, \"Transport Layer Security (TLS) Encryption for RADIUS\", RFC 6614, May 2012.",
      "ja": "[RFC6614]冬、S.、マッコーリー、M.、Venaas、S.、およびK. Wierenga、 \"RADIUSのためのトランスポート層セキュリティ（TLS）暗号化\"、RFC 6614、2012年5月。"
    },
    {
      "indent": 0,
      "text": "5.2. Informative References",
      "section_title": true,
      "ja": "5.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC2866] Rigney, C., \"RADIUS Accounting\", RFC 2866, June 2000.",
      "ja": "[RFC2866] Rigney、C.、 \"RADIUSアカウンティング\"、RFC 2866、2000年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC3579] Aboba, B. and P. Calhoun, \"RADIUS (Remote Authentication Dial In User Service) Support For Extensible Authentication Protocol (EAP)\", RFC 3579, September 2003.",
      "ja": "[RFC3579] Aboba、B.およびP.カルフーン、 \"RADIUS（ユーザサービスにおけるリモート認証ダイヤル）拡張認証プロトコル（EAP）のサポート\"、RFC 3579、2003年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC4301] Kent, S. and K. Seo, \"Security Architecture for the Internet Protocol\", RFC 4301, December 2005.",
      "ja": "[RFC4301]ケント、S.とK. Seo、 \"インターネットプロトコルのためのセキュリティアーキテクチャ\"、RFC 4301、2005年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC4668] Nelson, D., \"RADIUS Authentication Client MIB for IPv6\", RFC 4668, August 2006.",
      "ja": "[RFC4668]ネルソン、D.、 \"IPv6のためのRADIUS認証クライアントMIB\"、RFC 4668、2006年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC4669] Nelson, D., \"RADIUS Authentication Server MIB for IPv6\", RFC 4669, August 2006.",
      "ja": "[RFC4669]ネルソン、D.、 \"IPv6のためのRADIUS認証サーバのMIB\"、RFC 4669、2006年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC4670] Nelson, D., \"RADIUS Accounting Client MIB for IPv6\", RFC 4670, August 2006.",
      "ja": "[RFC4670]ネルソン、D.、 \"IPv6のためのRADIUSアカウンティングクライアントMIB\"、RFC 4670、2006年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC4671] Nelson, D., \"RADIUS Accounting Server MIB for IPv6\", RFC 4671, August 2006.",
      "ja": "[RFC4671]ネルソン、D.、 \"IPv6のためのRADIUSアカウンティングサーバーMIB\"、RFC 4671、2006年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC4672] De Cnodder, S., Jonnala, N., and M. Chiba, \"RADIUS Dynamic Authorization Client MIB\", RFC 4672, September 2006.",
      "ja": "[RFC4672]デCnodder、S.、Jonnala、N.、およびM.千葉、 \"RADIUSのダイナミックな承認クライアントMIB\"、RFC 4672、2006年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC4673] De Cnodder, S., Jonnala, N., and M. Chiba, \"RADIUS Dynamic Authorization Server MIB\", RFC 4673, September 2006.",
      "ja": "[RFC4673]デCnodder、S.、Jonnala、N.、およびM.千葉、 \"RADIUSのダイナミックな承認サーバMIB\"、RFC 4673、2006年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC5080] Nelson, D. and A. DeKok, \"Common Remote Authentication Dial In User Service (RADIUS) Implementation Issues and Suggested Fixes\", RFC 5080, December 2007.",
      "ja": "[RFC5080]ネルソン、D.とA. DeKok、RFC 5080、2007年12月 \"ユーザーサービス（RADIUS）の実装の問題と推奨修正に共通のリモート認証ダイヤル\"。"
    },
    {
      "indent": 3,
      "text": "[RFC5176] Chiba, M., Dommety, G., Eklund, M., Mitton, D., and B. Aboba, \"Dynamic Authorization Extensions to Remote Authentication Dial In User Service (RADIUS)\", RFC 5176, January 2008.",
      "ja": "、RFC 5176、2008年1月[RFC5176]千葉、M.、Dommety、G.、エクランド、M.、ミトン、D.、およびB. Aboba、 \"ユーザーサービス（RADIUS）でリモート認証ダイヤルへのダイナミックな承認拡張機能\"。"
    },
    {
      "indent": 3,
      "text": "[RFC5216] Simon, D., Aboba, B., and R. Hurst, \"The EAP-TLS Authentication Protocol\", RFC 5216, March 2008.",
      "ja": "[RFC5216]サイモン、D.、Aboba、B.、およびR.ハースト、 \"EAP-TLS認証プロトコル\"、RFC 5216、2008年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246]ダークス、T.およびE.レスコラ、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.2\"、RFC 5246、2008年8月。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Alan DeKok The FreeRADIUS Server Project http://freeradius.org/",
      "ja": "アランDeKok FreeRADIUSサーバプロジェクトhttp://freeradius.org/"
    },
    {
      "indent": 3,
      "text": "EMail: aland@freeradius.org",
      "ja": "メールアドレス：aland@freeradius.org"
    }
  ]
}