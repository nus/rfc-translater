{
  "title": {
    "text": "RFC 6750 - The OAuth 2.0 Authorization Framework: Bearer Token Usage",
    "ja": "RFC 6750 - OAuth 2.0の認証フレームワーク：ベアラートークンの使用"
  },
  "number": 6750,
  "created_at": "2019-10-30 08:20:12.590504+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          M. Jones\nRequest for Comments: 6750                                     Microsoft\nCategory: Standards Track                                       D. Hardt\nISSN: 2070-1721                                              Independent\n                                                            October 2012",
      "raw": true
    },
    {
      "indent": 7,
      "text": "The OAuth 2.0 Authorization Framework: Bearer Token Usage",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources. Any party in possession of a bearer token (a \"bearer\") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.",
      "ja": "この仕様はOAuth 2.0の保護されたリソースにアクセスするためのHTTPリクエストでトークンベアラを使用する方法について説明します。ベアラトークン（「ベアラ」）を所有している当事者は、（暗号鍵の所有を証明せずに）関連するリソースへのアクセスを得るためにそれを使用することができます。誤用を防止するために、ベアラトークンは保管および輸送に開示から保護する必要があります。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 5741のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6750.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc6750で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2012 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n   1.1. Notational Conventions .....................................3\n   1.2. Terminology ................................................3\n   1.3. Overview ...................................................3\n2. Authenticated Requests ..........................................4\n   2.1. Authorization Request Header Field .........................5\n   2.2. Form-Encoded Body Parameter ................................5\n   2.3. URI Query Parameter ........................................6\n3. The WWW-Authenticate Response Header Field ......................7\n   3.1. Error Codes ................................................9\n4. Example Access Token Response ..................................10\n5. Security Considerations ........................................10\n   5.1. Security Threats ..........................................10\n   5.2. Threat Mitigation .........................................11\n   5.3. Summary of Recommendations ................................13\n6. IANA Considerations ............................................14\n   6.1. OAuth Access Token Type Registration ......................14\n        6.1.1. The \"Bearer\" OAuth Access Token Type ...............14\n   6.2. OAuth Extensions Error Registration .......................14\n        6.2.1. The \"invalid_request\" Error Value ..................14\n        6.2.2. The \"invalid_token\" Error Value ....................15\n        6.2.3. The \"insufficient_scope\" Error Value ...............15\n7. References .....................................................15\n   7.1. Normative References ......................................15\n   7.2. Informative References ....................................17\nAppendix A. Acknowledgements ......................................18",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "OAuth enables clients to access protected resources by obtaining an access token, which is defined in \"The OAuth 2.0 Authorization Framework\" [RFC6749] as \"a string representing an access authorization issued to the client\", rather than using the resource owner's credentials directly.",
      "ja": "OAuthのは、「OAuth 2.0の認証フレームワーク」、直接ではなく、リソースの所有者の資格情報を使用して、「クライアントに発行されたアクセス許可を表す文字列」として、[RFC6749]で定義されたアクセストークンを、取得することによって保護されたリソースにアクセスするためのクライアントを可能にします。"
    },
    {
      "indent": 3,
      "text": "Tokens are issued to clients by an authorization server with the approval of the resource owner. The client uses the access token to access the protected resources hosted by the resource server. This specification describes how to make protected resource requests when the OAuth access token is a bearer token.",
      "ja": "トークンは、リソースの所有者の承認を得て、認証サーバによってクライアントに発行されています。クライアントは、リソースサーバによってホストされて保護されたリソースにアクセスするためのアクセストークンを使用しています。この仕様は、OAuthアクセストークンは、ベアラ・トークンの場合に保護されたリソース要求を作成する方法について説明します。"
    },
    {
      "indent": 3,
      "text": "This specification defines the use of bearer tokens over HTTP/1.1 [RFC2616] using Transport Layer Security (TLS) [RFC5246] to access protected resources. TLS is mandatory to implement and use with this specification; other specifications may extend this specification for use with other protocols. While designed for use with access tokens resulting from OAuth 2.0 authorization [RFC6749] flows to access OAuth protected resources, this specification actually defines a general HTTP authorization method that can be used with bearer tokens from any source to access any resources protected by those bearer tokens. The Bearer authentication scheme is intended primarily for server authentication using the WWW-Authenticate and Authorization HTTP headers but does not preclude its use for proxy authentication.",
      "ja": "この仕様は、保護されたリソースにアクセスするためのHTTP / 1.1 [RFC2616]を使用してトランスポート層セキュリティ（TLS）[RFC5246]の上にベアラ・トークンの使用を定義します。 TLSは実装し、この仕様で使用することは必須です。その他の仕様は、他のプロトコルで使用するために、この仕様を延長することができます。 OAuth 2.0の承認[RFC6749]に起因するアクセストークンと共に使用するように設計するOAuthの保護されたリソースにアクセスすることを流れる間に、本明細書では、実際にそれらのベアラトークンによって保護されたリソースにアクセスするために任意のソースからのベアラトークンと共に使用することができる一般的なHTTP認証方法を定義します。ベアラ認証方式は、WWW認証と認可のHTTPヘッダを使用して、サーバー認証のために主に意図されているが、プロキシ認証のためのその使用を排除するものではありません。"
    },
    {
      "indent": 0,
      "text": "1.1. Notational Conventions",
      "section_title": true,
      "ja": "1.1. 表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in \"Key words for use in RFCs to Indicate Requirement Levels\" [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります「要求レベルを示すためのRFCsにおける使用のためのキーワード」[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "This document uses the Augmented Backus-Naur Form (ABNF) notation of [RFC5234]. Additionally, the following rules are included from HTTP/1.1 [RFC2617]: auth-param and auth-scheme; and from \"Uniform Resource Identifier (URI): Generic Syntax\" [RFC3986]: URI-reference.",
      "ja": "このドキュメントは[RFC5234]の増補バッカス - ナウアフォーム（ABNF）の表記を使用します。また、以下の規則がHTTP / 1.1 [RFC2617]から含まれている：AUTH-PARAMとAUTH-スキーム;以下からの \"ユニフォームリソース識別子（URI）：汎用構文\" [RFC3986]：URI参照。"
    },
    {
      "indent": 3,
      "text": "Unless otherwise noted, all the protocol parameter names and values are case sensitive.",
      "ja": "特に断りのない限り、すべてのプロトコルのパラメータ名と値は、大文字と小文字が区別されます。"
    },
    {
      "indent": 0,
      "text": "1.2. Terminology",
      "section_title": true,
      "ja": "1.2. 用語"
    },
    {
      "indent": 3,
      "text": "Bearer Token A security token with the property that any party in possession of the token (a \"bearer\") can use the token in any way that any other party in possession of it can. Using a bearer token does not require a bearer to prove possession of cryptographic key material (proof-of-possession).",
      "ja": "無記名トークンそれを所有している任意の相手ができるとトークンを所有している当事者（「ベアラ」）はどのような方法でトークンを使用することができますプロパティを持つセキュリティトークン。ベアラ・トークンを使用すると、暗号化キーマテリアル（実証の所持）の所有を証明するためにベアラを必要としません。"
    },
    {
      "indent": 3,
      "text": "All other terms are as defined in \"The OAuth 2.0 Authorization Framework\" [RFC6749].",
      "ja": "「OAuth 2.0の認証フレームワーク」[RFC6749]で定義されるようにすべての他の用語です。"
    },
    {
      "indent": 0,
      "text": "1.3. Overview",
      "section_title": true,
      "ja": "1.3. 概要"
    },
    {
      "indent": 3,
      "text": "OAuth provides a method for clients to access a protected resource on behalf of a resource owner. In the general case, before a client can access a protected resource, it must first obtain an authorization grant from the resource owner and then exchange the authorization grant for an access token. The access token represents the grant's scope, duration, and other attributes granted by the authorization grant. The client accesses the protected resource by presenting the access token to the resource server. In some cases, a client can directly present its own credentials to an authorization server to obtain an access token without having to first obtain an authorization grant from a resource owner.",
      "ja": "OAuthのは、リソースの所有者に代わって保護されたリソースにアクセスするためのクライアントのための方法を提供します。クライアントが保護リソースにアクセスする前に、一般的なケースでは、それは最初のリソースの所有者から承諾許可を取得する必要があり、その後、アクセストークンの許可許可を交換します。アクセストークンは、補助金の適用範囲、期間、および権限の助成金によって付与された他の属性を表します。クライアントは、リソースサーバーへのアクセストークンを提示することによって保護されたリソースにアクセスします。いくつかのケースでは、クライアントが直接最初のリソースの所有者から承諾許可を得ることなく、アクセストークンを取得するために認証サーバに独自の資格情報を提示することができます。"
    },
    {
      "indent": 3,
      "text": "The access token provides an abstraction, replacing different authorization constructs (e.g., username and password, assertion) for a single token understood by the resource server. This abstraction enables issuing access tokens valid for a short time period, as well as removing the resource server's need to understand a wide range of authentication schemes.",
      "ja": "アクセストークンは、リソースサーバによって理解される単一のトークンに異なる許可構築物（例えば、ユーザ名およびパスワード、アサーション）を置き換え、抽象化を提供します。この抽象化は、短時間の有効なアクセストークンを発行するだけでなく、認証スキームの広い範囲を理解するためのリソースサーバの必要性を取り除くことができます。"
    },
    {
      "indent": 5,
      "text": "+--------+                               +---------------+\n|        |--(A)- Authorization Request ->|   Resource    |\n|        |                               |     Owner     |\n|        |<-(B)-- Authorization Grant ---|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(C)-- Authorization Grant -->| Authorization |\n| Client |                               |     Server    |\n|        |<-(D)----- Access Token -------|               |\n|        |                               +---------------+\n|        |\n|        |                               +---------------+\n|        |--(E)----- Access Token ------>|    Resource   |\n|        |                               |     Server    |\n|        |<-(F)--- Protected Resource ---|               |\n+--------+                               +---------------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 1: Abstract Protocol Flow",
      "ja": "図1：抽象プロトコルフロー"
    },
    {
      "indent": 3,
      "text": "The abstract OAuth 2.0 flow illustrated in Figure 1 describes the interaction between the client, resource owner, authorization server, and resource server (described in [RFC6749]). The following two steps are specified within this document:",
      "ja": "図1に示す抽象OAuth 2.0のフローは、クライアント、リソースの所有者、認証サーバ、及び（[RFC6749]に記載されている）リソースサーバとの間の相互作用を記述する。次の2つの手順は、この文書内で指定されています。"
    },
    {
      "indent": 3,
      "text": "(E) The client requests the protected resource from the resource server and authenticates by presenting the access token.",
      "ja": "（E）は、クライアントがリソースサーバから保護されたリソースを要求し、アクセストークンを提示することによって認証されます。"
    },
    {
      "indent": 3,
      "text": "(F) The resource server validates the access token, and if valid, serves the request.",
      "ja": "（F）は、リソースサーバーはアクセストークンを検証し、有効であれば、要求を提供しています。"
    },
    {
      "indent": 3,
      "text": "This document also imposes semantic requirements upon the access token returned in step (D).",
      "ja": "この文書はまた、工程（D）で返されたアクセストークンの際にセマンティック要件を課しています。"
    },
    {
      "indent": 0,
      "text": "2. Authenticated Requests",
      "section_title": true,
      "ja": "2.認証要求"
    },
    {
      "indent": 3,
      "text": "This section defines three methods of sending bearer access tokens in resource requests to resource servers. Clients MUST NOT use more than one method to transmit the token in each request.",
      "ja": "このセクションでは、リソースのサーバへのリソース要求にベアラアクセストークンを送信する3つのメソッドを定義します。クライアントは各リクエストでトークンを送信するために複数のメソッドを使用してはなりません。"
    },
    {
      "indent": 0,
      "text": "2.1. Authorization Request Header Field",
      "section_title": true,
      "ja": "2.1. 認証要求ヘッダー・フィールド"
    },
    {
      "indent": 3,
      "text": "When sending the access token in the \"Authorization\" request header field defined by HTTP/1.1 [RFC2617], the client uses the \"Bearer\" authentication scheme to transmit the access token.",
      "ja": "HTTP / 1.1によって定義された「許可」リクエストヘッダフィールドにアクセストークン[RFC2617]を送信するとき、クライアントは、アクセストークンを送信するための「ベアラ」認証スキームを使用します。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 5,
      "text": "GET /resource HTTP/1.1 Host: server.example.com Authorization: Bearer mF_9.B5f-4.1JqM",
      "ja": "GET /リソースHTTP / 1.1ホスト：server.example.com許可：ベアラmF_9.B5f-4.1JqM"
    },
    {
      "indent": 3,
      "text": "The syntax of the \"Authorization\" header field for this scheme follows the usage of the Basic scheme defined in Section 2 of [RFC2617]. Note that, as with Basic, it does not conform to the generic syntax defined in Section 1.2 of [RFC2617] but is compatible with the general authentication framework being developed for HTTP 1.1 [HTTP-AUTH], although it does not follow the preferred practice outlined therein in order to reflect existing deployments. The syntax for Bearer credentials is as follows:",
      "ja": "このスキームは、「認可」ヘッダフィールドの構文は、[RFC2617]のセクション2で定義された基本的なスキームの使用法に従います。それは好ましい実施に従わないが、[HTTP-AUTH]基本と同様に、それは[RFC2617]のセクション1.2で定義された一般的な構文に準拠するが、HTTP 1.1のために開発されている一般的な認証のフレームワークと互換性がない、ということに注意してください既存の展開を反映させるために、その中に概説。次のようにベアラの資格情報の構文は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "b64token = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\" credentials = \"Bearer\" 1*SP b64token",
      "ja": "b64token = 1 *（ALPHA / DIGIT / \" - \" \"\" / / \"_\" / \"〜\" / \"+\" / \"/\"）* \"=\" 資格情報= \"無記名\" 1 * SP b64token"
    },
    {
      "indent": 3,
      "text": "Clients SHOULD make authenticated requests with a bearer token using the \"Authorization\" request header field with the \"Bearer\" HTTP authorization scheme. Resource servers MUST support this method.",
      "ja": "クライアントは、「ベアラ」HTTP認証スキームを「認可」リクエストヘッダフィールドを使用してベアラトークンで認証リクエストを行う必要があります。リソースサーバーは、このメソッドをサポートしなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.2. Form-Encoded Body Parameter",
      "section_title": true,
      "ja": "2.2. フォームエンコードされたボディパラメータ"
    },
    {
      "indent": 3,
      "text": "When sending the access token in the HTTP request entity-body, the client adds the access token to the request-body using the \"access_token\" parameter. The client MUST NOT use this method unless all of the following conditions are met:",
      "ja": "HTTPリクエストのエンティティボディにアクセストークンを送信する場合、クライアントは「access_tokenは」パラメータを使用して、リクエスト・ボディにアクセストークンを追加します。以下のすべての条件が満たされない限り、クライアントは、このメソッドを使用しないでください。"
    },
    {
      "indent": 3,
      "text": "o The HTTP request entity-header includes the \"Content-Type\" header field set to \"application/x-www-form-urlencoded\".",
      "ja": "oをHTTPリクエストエンティティヘッダは、 \"アプリケーション/ x-www-form-urlencodedで\" に設定された \"Content-Type\" ヘッダフィールドを含みます。"
    },
    {
      "indent": 3,
      "text": "o The entity-body follows the encoding requirements of the \"application/x-www-form-urlencoded\" content-type as defined by HTML 4.01 [W3C.REC-html401-19991224].",
      "ja": "エンティティボディO HTML 4.01 [W3C.REC-html401-19991224]によって定義されるような \"アプリケーション/ x-www-form-urlencodedで、\" コンテンツ・タイプの符号化要件に従います。"
    },
    {
      "indent": 3,
      "text": "o The HTTP request entity-body is single-part.",
      "ja": "O HTTPリクエストエンティティボディは、単一部品です。"
    },
    {
      "indent": 3,
      "text": "o The content to be encoded in the entity-body MUST consist entirely of ASCII [USASCII] characters.",
      "ja": "Oの含有量は、全体の文字[USASCII] ASCIIで構成する必要がありエンティティボディに符号化されます。"
    },
    {
      "indent": 3,
      "text": "o The HTTP request method is one for which the request-body has defined semantics. In particular, this means that the \"GET\" method MUST NOT be used.",
      "ja": "O HTTPリクエストメソッドは、リクエストボディは、セマンティクスを定義しているものです。特に、これは、「GET」メソッドを使用してはならないことを意味します。"
    },
    {
      "indent": 3,
      "text": "The entity-body MAY include other request-specific parameters, in which case the \"access_token\" parameter MUST be properly separated from the request-specific parameters using \"&\" character(s) (ASCII code 38).",
      "ja": "エンティティボディは、「＆」文字（複数可）（ASCIIコード38）を使用して「access_tokenは」パラメータが正しくリクエスト固有のパラメータから分離されなければならない場合には他のリクエスト固有のパラメータを含むことができます。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using transport-layer security:",
      "ja": "例えば、クライアントは、トランスポート・レイヤ・セキュリティを使用して、次のHTTPリクエストを行います："
    },
    {
      "indent": 5,
      "text": "POST /resource HTTP/1.1 Host: server.example.com Content-Type: application/x-www-form-urlencoded",
      "ja": "POST /リソースHTTP / 1.1ホスト：server.example.comのContent-Type：アプリケーション/ x-www-form-urlencodedで"
    },
    {
      "indent": 5,
      "text": "access_token=mF_9.B5f-4.1JqM",
      "ja": "access_tokenは= mF_9.B5f-4.1JqM"
    },
    {
      "indent": 3,
      "text": "The \"application/x-www-form-urlencoded\" method SHOULD NOT be used except in application contexts where participating browsers do not have access to the \"Authorization\" request header field. Resource servers MAY support this method.",
      "ja": "「アプリケーション/ x-www-form-urlencodedで」方法は、参加のブラウザでは、「認可」のリクエストヘッダフィールドへのアクセスを持っていないアプリケーション・コンテキスト以外で使用されるべきではありません。リソースサーバーは、このメソッドをサポートするかもしれません。"
    },
    {
      "indent": 0,
      "text": "2.3. URI Query Parameter",
      "section_title": true,
      "ja": "2.3.  URIクエリパラメータ"
    },
    {
      "indent": 3,
      "text": "When sending the access token in the HTTP request URI, the client adds the access token to the request URI query component as defined by \"Uniform Resource Identifier (URI): Generic Syntax\" [RFC3986], using the \"access_token\" parameter.",
      "ja": "「access_tokenは」パラメータを使用して、[RFC3986]：HTTPリクエストURIにアクセストークンを送信するとき「汎用構文のURI（Uniform Resource Identifier）」によって定義されるように、クライアントは、要求URIのクエリコンポーネントにアクセストークンを追加します。"
    },
    {
      "indent": 3,
      "text": "For example, the client makes the following HTTP request using transport-layer security:",
      "ja": "例えば、クライアントは、トランスポート・レイヤ・セキュリティを使用して、次のHTTPリクエストを行います："
    },
    {
      "indent": 5,
      "text": "GET /resource?access_token=mF_9.B5f-4.1JqM HTTP/1.1 Host: server.example.com",
      "ja": "GET /resource?access_token=mF_9.B5f-4.1JqM HTTP / 1.1ホスト：server.example.com"
    },
    {
      "indent": 3,
      "text": "The HTTP request URI query can include other request-specific parameters, in which case the \"access_token\" parameter MUST be properly separated from the request-specific parameters using \"&\" character(s) (ASCII code 38).",
      "ja": "HTTPリクエストURIクエリは、「＆」文字（複数可）（ASCIIコード38）を使用して「access_tokenは」パラメータが正しくリクエスト固有のパラメータから分離されなければならない場合には他のリクエスト固有のパラメータを含むことができます。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 4,
      "text": "https://server.example.com/resource?access_token=mF_9.B5f-4.1JqM&p=q",
      "ja": "ｈっｔｐｓ：／／せｒゔぇｒ。えぁｍｐぇ。こｍ／れそうｒせ？あっせっｓ＿とけん＝ｍＦ＿９。Ｂ５ｆー４。１ＪｑＭ＆ｐ＝ｑ"
    },
    {
      "indent": 3,
      "text": "Clients using the URI Query Parameter method SHOULD also send a Cache-Control header containing the \"no-store\" option. Server success (2XX status) responses to these requests SHOULD contain a Cache-Control header with the \"private\" option.",
      "ja": "URIクエリパラメータの方法を使用しているクライアントは、また、「無店舗」オプションを含むのCache-Controlヘッダを送るべきです。これらの要求へのサーバーの成功（2XX状態）応答は、「プライベート」オプションでのCache-Controlヘッダを含むべきです。"
    },
    {
      "indent": 3,
      "text": "Because of the security weaknesses associated with the URI method (see Section 5), including the high likelihood that the URL containing the access token will be logged, it SHOULD NOT be used unless it is impossible to transport the access token in the \"Authorization\" request header field or the HTTP request entity-body. Resource servers MAY support this method.",
      "ja": "「許可」にアクセストークンを輸送することは不可能でない限り、URI方式に関連するセキュリティ上の弱点のため、に使用することはできませんアクセストークンを含むURLをログに記録されることが高い可能性を含め、（5節を参照してください）リクエストヘッダフィールド、またはHTTPリクエストエンティティボディ。リソースサーバーは、このメソッドをサポートするかもしれません。"
    },
    {
      "indent": 3,
      "text": "This method is included to document current use; its use is not recommended, due to its security deficiencies (see Section 5) and also because it uses a reserved query parameter name, which is counter to URI namespace best practices, per \"Architecture of the World Wide Web, Volume One\" [W3C.REC-webarch-20041215].",
      "ja": "このメソッドは、現在の使用を文書化するために含まれています。それはカウンターURI名前空間のベストプラクティスにある予約済みのクエリパラメータ名を、使用しているため、その使用はW3C [につき「ワールド・ワイド・ウェブのアーキテクチャ、ボリュームワン」、また、そのセキュリティの不備に、お勧めします（セクション5を参照）とされていません.REC-webarch-20041215]。"
    },
    {
      "indent": 0,
      "text": "3. The WWW-Authenticate Response Header Field",
      "section_title": true,
      "ja": "3. WWW認証レスポンスヘッダーフィールド"
    },
    {
      "indent": 3,
      "text": "If the protected resource request does not include authentication credentials or does not contain an access token that enables access to the protected resource, the resource server MUST include the HTTP \"WWW-Authenticate\" response header field; it MAY include it in response to other conditions as well. The \"WWW-Authenticate\" header field uses the framework defined by HTTP/1.1 [RFC2617].",
      "ja": "保護されたリソース要求は、認証資格情報が含まれていないか、保護されたリソースへのアクセスを可能にするアクセストークンが含まれていない場合、リソースサーバーはHTTP「WWW認証」レスポンスヘッダフィールドを含まなければなりません。それは同様に他の条件に応じて、それを含むかもしれません。 「WWW認証」ヘッダフィールドは、HTTP / 1.1 [RFC2617]で定義されたフレームワークを使用します。"
    },
    {
      "indent": 3,
      "text": "All challenges defined by this specification MUST use the auth-scheme value \"Bearer\". This scheme MUST be followed by one or more auth-param values. The auth-param attributes used or defined by this specification are as follows. Other auth-param attributes MAY be used as well.",
      "ja": "この仕様で定義されたすべての課題は、AUTH-スキーム値「ベアラー」を使用しなければなりません。このスキームは、一つ以上のauth-のparam値が続かなければなりません。次のように本明細書で使用または定義されたAUTH-PARAM属性があります。その他のauth-のparam属性を使用することもできます。"
    },
    {
      "indent": 3,
      "text": "A \"realm\" attribute MAY be included to indicate the scope of protection in the manner described in HTTP/1.1 [RFC2617]. The \"realm\" attribute MUST NOT appear more than once.",
      "ja": "「レルム」属性は、HTTP / 1.1 [RFC2617]に記載された方法で保護の範囲を示すために含まれるかもしれません。 「領域」属性が複数回出現することはできません。"
    },
    {
      "indent": 3,
      "text": "The \"scope\" attribute is defined in Section 3.3 of [RFC6749]. The \"scope\" attribute is a space-delimited list of case-sensitive scope values indicating the required scope of the access token for accessing the requested resource. \"scope\" values are implementation defined; there is no centralized registry for them; allowed values are defined by the authorization server. The order of \"scope\" values is not significant. In some cases, the \"scope\" value will be used when requesting a new access token with sufficient scope of access to utilize the protected resource. Use of the \"scope\" attribute is OPTIONAL. The \"scope\" attribute MUST NOT appear more than once. The \"scope\" value is intended for programmatic use and is not meant to be displayed to end-users.",
      "ja": "「スコープ」属性は、[RFC6749]のセクション3.3で定義されています。 「スコープ」属性は、要求されたリソースにアクセスするためのアクセストークンの必要な範囲を示す大文字と小文字を区別スコープ値をスペースで区切ったリストです。 「スコープ」の値は、実装に定義されています。それらには、集中レジストリはありません。許可された値は、認可サーバーによって定義されています。 「スコープ」の値の順序は重要ではありません。保護されたリソースを利用するためのアクセスの十分な範囲を使用して新しいアクセストークンを要求するときにいくつかのケースでは、「スコープ」の値が使用されます。 「スコープ」属性の使用はオプションです。 「スコープ」属性が複数回出現することはできません。 「スコープ」の値は、プログラムの使用を意図されており、エンドユーザーに表示されるものではありません。"
    },
    {
      "indent": 3,
      "text": "Two example scope values follow; these are taken from the OpenID Connect [OpenID.Messages] and the Open Authentication Technology Committee (OATC) Online Multimedia Authorization Protocol [OMAP] OAuth 2.0 use cases, respectively:",
      "ja": "2つの例示的な範囲値は以下の通り。これらは、それぞれ、OpenIDの接続[OpenID.Messages]およびOpen認証技術委員会（OATC）オンラインマルチメディア認証プロトコル[OMAP] OAuth 2.0のユースケースから取り出されます。"
    },
    {
      "indent": 5,
      "text": "scope=\"openid profile email\" scope=\"urn:example:channel=HBO&urn:example:rating=G,PG-13\"",
      "ja": "スコープ= \"OpenIDのプロファイルメール\" スコープ= \"URN：例：チャネル= HBO＆URN：例：評価= G、PG-13\""
    },
    {
      "indent": 3,
      "text": "If the protected resource request included an access token and failed authentication, the resource server SHOULD include the \"error\" attribute to provide the client with the reason why the access request was declined. The parameter value is described in Section 3.1. In addition, the resource server MAY include the \"error_description\" attribute to provide developers a human-readable explanation that is not meant to be displayed to end-users. It also MAY include the \"error_uri\" attribute with an absolute URI identifying a human-readable web page explaining the error. The \"error\", \"error_description\", and \"error_uri\" attributes MUST NOT appear more than once.",
      "ja": "保護されたリソース要求は、アクセストークンを含めると、認証に失敗した場合は、リソースサーバは、アクセス要求が拒否された理由をクライアントに提供するために、「エラー」属性を含めるべきです。パラメータ値は、3.1節に記載されています。また、リソースサーバは、開発者にエンドユーザーに表示されるように意図されていない人間が読める説明を提供するために、「しましたerror_description」属性を含むかもしれません。また、エラーを説明する人間が読めるウェブページを識別する絶対URIと「error_uri」属性を含むかもしれません。 「エラー」、「しましたerror_description」、および「error_uri」属性が複数回出現することはできません。"
    },
    {
      "indent": 3,
      "text": "Values for the \"scope\" attribute (specified in Appendix A.4 of [RFC6749]) MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E for representing scope values and %x20 for delimiters between scope values. Values for the \"error\" and \"error_description\" attributes (specified in Appendixes A.7 and A.8 of [RFC6749]) MUST NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E. Values for the \"error_uri\" attribute (specified in Appendix A.9 of [RFC6749]) MUST conform to the URI-reference syntax and thus MUST NOT include characters outside the set %x21 / %x23-5B / %x5D-7E.",
      "ja": "（[RFC6749]の付録A.4に指定された）「スコープ」属性の値がセット範囲値間の区切り文字の範囲の値と％のX20を表す％X21 /％x23-5B /％x5D-7E以外の文字を含めることはできません。 \"エラー\" の値と \"ましたerror_description\" がセット％x20-21 /％x23-5B /％x5D-7E以外の文字を含めることはできません（[RFC6749]の付録A.7及びA.8で指定された）属性。 （[RFC6749]の付録A.9で指定された）「error_uri」属性の値は、URI参照構文に準拠しなければならないので、セット％X21 /％x23-5B /％x5D-7E以外の文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "For example, in response to a protected resource request without authentication:",
      "ja": "例えば、認証なしで保護されたリソース要求に応答して："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\"",
      "ja": "HTTP / 1.1 401不正なWWW認証：ベアラレルム= \"例\""
    },
    {
      "indent": 3,
      "text": "And in response to a protected resource request with an authentication attempt using an expired access token:",
      "ja": "そして、期限切れのアクセストークンを使用した認証の試行で保護されたリソース要求に応答して："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\", error=\"invalid_token\", error_description=\"The access token expired\"",
      "ja": "HTTP / 1.1 401不正なWWW認証：= \"例\" ベアラレルム、= \"invalid_token\" エラーは、しましたerror_descriptionは= \"アクセストークンの有効期限が切れ\""
    },
    {
      "indent": 0,
      "text": "3.1. Error Codes",
      "section_title": true,
      "ja": "3.1. エラーコード"
    },
    {
      "indent": 3,
      "text": "When a request fails, the resource server responds using the appropriate HTTP status code (typically, 400, 401, 403, or 405) and includes one of the following error codes in the response:",
      "ja": "要求が失敗した場合、リソースサーバは、適切なHTTPステータスコード（通常、400、401、403、または405）を使用して応答し、応答して、次のいずれかのエラーコードを含みます。"
    },
    {
      "indent": 3,
      "text": "invalid_request The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.",
      "ja": "要求は、必要なパラメータが欠落しているINVALID_REQUEST、サポートされていないパラメータまたはパラメータ値を含む、同じパラメータを繰り返し、アクセストークンを含めるために複数の方法を使用して、または他の方法で不正な形式です。リソースサーバーはHTTP 400（不正な要求）ステータスコードで応答する必要があります。"
    },
    {
      "indent": 3,
      "text": "invalid_token The access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request.",
      "ja": "提供されたアクセストークンinvalid_token、有効期限が切れ、失効、不正な、またはその他の理由で無効とされます。リソースは、HTTP 401（Unauthorized）ステータスコードで応答する必要があります。クライアントは、新しいアクセストークンを要求し、保護されたリソース要求を再試行することができます。"
    },
    {
      "indent": 3,
      "text": "insufficient_scope The request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\" attribute with the scope necessary to access the protected resource.",
      "ja": "insufficient_scope要求は、アクセストークンによって提供されるよりも高い権限が必要です。リソースサーバーはHTTP 403（禁止）ステータスコードで応答すべきであり、保護されたリソースにアクセスするために必要な範囲での「スコープ」属性を含むかもしれません。"
    },
    {
      "indent": 3,
      "text": "If the request lacks any authentication information (e.g., the client was unaware that authentication is necessary or attempted using an unsupported authentication method), the resource server SHOULD NOT include an error code or other error information.",
      "ja": "要求（例えば、クライアントは、認証が必要であるか、またはサポートされていない認証方式を使用しようとしたことを知らなかった）任意の認証情報がない場合、リソースサーバは、エラーコードまたは他のエラー情報を含むべきではありません。"
    },
    {
      "indent": 3,
      "text": "For example:",
      "ja": "例えば："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 401 Unauthorized WWW-Authenticate: Bearer realm=\"example\"",
      "ja": "HTTP / 1.1 401不正なWWW認証：ベアラレルム= \"例\""
    },
    {
      "indent": 0,
      "text": "4. Example Access Token Response",
      "section_title": true,
      "ja": "4.例アクセストークンレスポンス"
    },
    {
      "indent": 3,
      "text": "Typically, a bearer token is returned to the client as part of an OAuth 2.0 [RFC6749] access token response. An example of such a response is:",
      "ja": "典型的には、ベアラトークンはOAuth 2.0の[RFC6749]アクセストークンレスポンスの一部としてクライアントに返されます。そのような応答の例であります："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache",
      "ja": "HTTP / 1.1 200 OKのContent-Type：アプリケーション/ JSON;のcharset = UTF-8のCache-Control：無店舗プラグマ：キャッシュなし"
    },
    {
      "indent": 5,
      "text": "{ \"access_token\":\"mF_9.B5f-4.1JqM\", \"token_type\":\"Bearer\", \"expires_in\":3600, \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\" }",
      "ja": "{ \"access_tokenは\"： \"mF_9.B5f-4.1JqM\"、 \"TOKEN_TYPE\"： \"ベアラ\"、 \"expires_in\"：3600、 \"refresh_token\"： \"tGzv3JOkF0XG5Qx2TlKWIA\"}"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "This section describes the relevant security threats regarding token handling when using bearer tokens and describes how to mitigate these threats.",
      "ja": "このセクションでは、ベアラ・トークンを使用したときに、トークンの取り扱いについて、関連するセキュリティの脅威について説明し、これらの脅威を軽減する方法について説明します。"
    },
    {
      "indent": 0,
      "text": "5.1. Security Threats",
      "section_title": true,
      "ja": "5.1. セキュリティの脅威"
    },
    {
      "indent": 3,
      "text": "The following list presents several common threats against protocols utilizing some form of tokens. This list of threats is based on NIST Special Publication 800-63 [NIST800-63]. Since this document builds on the OAuth 2.0 Authorization specification [RFC6749], we exclude a discussion of threats that are described there or in related documents.",
      "ja": "以下のリストは、トークンのいくつかのフォームを利用したプロトコルに対して、いくつかの一般的な脅威を提示します。脅威のこのリストは、は、NIST Special Publication 800-63 [NIST800-63]に基づいています。この文書はOAuth 2.0の認証仕様[RFC6749]に基づいていますので、我々はそこに記載されている脅威のか、関連文書での議論を除外する。"
    },
    {
      "indent": 3,
      "text": "Token manufacture/modification: An attacker may generate a bogus token or modify the token contents (such as the authentication or attribute statements) of an existing token, causing the resource server to grant inappropriate access to the client. For example, an attacker may modify the token to extend the validity period; a malicious client may modify the assertion to gain access to information that they should not be able to view.",
      "ja": "トークン製造/修正：攻撃者は偽トークンを生成したり、リソースサーバがクライアントへの不適切なアクセスを許可させる、既存のトークン（認証や属性文など）トークンの内容を変更することができます。例えば、攻撃者は、有効期間を延長するためにトークンを変更してもよいです。悪意のあるクライアントは、彼らが見ることはできないことを情報へのアクセスを得るためのアサーションを変更することができます。"
    },
    {
      "indent": 3,
      "text": "Token disclosure: Tokens may contain authentication and attribute statements that include sensitive information.",
      "ja": "トークンの開示：トークンが認証を含んでおり、機密情報が含まれる文の属性があります。"
    },
    {
      "indent": 3,
      "text": "Token redirect: An attacker uses a token generated for consumption by one resource server to gain access to a different resource server that mistakenly believes the token to be for it.",
      "ja": "トークンリダイレクト：攻撃者が誤ってトークンがそれのためであると信じる異なるリソースサーバーへのアクセスを得るための一つの資源サーバによる消費のために生成されたトークンを使用しています。"
    },
    {
      "indent": 3,
      "text": "Token replay: An attacker attempts to use a token that has already been used with that resource server in the past.",
      "ja": "トークンリプレイ：攻撃者は、すでに過去にそのリソースサーバーで使用されてきたトークンを使用しようとします。"
    },
    {
      "indent": 0,
      "text": "5.2. Threat Mitigation",
      "section_title": true,
      "ja": "5.2. 脅威軽減"
    },
    {
      "indent": 3,
      "text": "A large range of threats can be mitigated by protecting the contents of the token by using a digital signature or a Message Authentication Code (MAC). Alternatively, a bearer token can contain a reference to authorization information, rather than encoding the information directly. Such references MUST be infeasible for an attacker to guess; using a reference may require an extra interaction between a server and the token issuer to resolve the reference to the authorization information. The mechanics of such an interaction are not defined by this specification.",
      "ja": "脅威の広い範囲は、デジタル署名又はメッセージ認証コード（MAC）を使用してトークンの内容を保護することにより緩和することができます。あるいは、ベアラトークンではなく、直接情報を符号化するよりも、権限情報への参照を含むことができます。攻撃者は推測するためにこのような参照は実行不可能でなければなりません。リファレンスを使用すると、認証情報への参照を解決するために、サーバーとトークン発行の間に余分な相互作用を必要とするかもしれません。このような相互作用の仕組みは、この仕様で定義されていません。"
    },
    {
      "indent": 3,
      "text": "This document does not specify the encoding or the contents of the token; hence, detailed recommendations about the means of guaranteeing token integrity protection are outside the scope of this document. The token integrity protection MUST be sufficient to prevent the token from being modified.",
      "ja": "この文書では、エンコーディングまたはトークンの内容を指定していません。したがって、トークン完全性保護を保証する手段の詳細な推奨事項は、この文書の範囲外です。トークンの完全性保護は変更されてからトークンを防ぐのに十分なものでなければなりません。"
    },
    {
      "indent": 3,
      "text": "To deal with token redirect, it is important for the authorization server to include the identity of the intended recipients (the audience), typically a single resource server (or a list of resource servers), in the token. Restricting the use of the token to a specific scope is also RECOMMENDED.",
      "ja": "認証サーバはトークンで、目的の受信者（観客）のアイデンティティ、通常、単一のリソースサーバ（またはリソースサーバのリスト）を含むようにするためにトークンリダイレクトに対処するために、それが重要です。特定のスコープにトークンの使用を制限することも推奨されます。"
    },
    {
      "indent": 3,
      "text": "The authorization server MUST implement TLS. Which version(s) ought to be implemented will vary over time and will depend on the widespread deployment and known security vulnerabilities at the time of implementation. At the time of this writing, TLS version 1.2 [RFC5246] is the most recent version, but it has very limited actual deployment and might not be readily available in implementation toolkits. TLS version 1.0 [RFC2246] is the most widely deployed version and will give the broadest interoperability.",
      "ja": "認証サーバはTLSを実装しなければなりません。どのバージョン（複数可）時間をかけて変化します実装されるべきであると実装時に広く展開し、既知のセキュリティ上の脆弱性に依存します。この記事の執筆時点では、TLSバージョン1.2 [RFC5246]は最新のバージョンですが、それは非常に限られた実際の展開があり、実装ツールキットで容易に入手できない場合があります。 TLSバージョン1.0 [RFC2246]は、最も広く導入されているバージョンで、最も広範な相互運用性を提供します。"
    },
    {
      "indent": 3,
      "text": "To protect against token disclosure, confidentiality protection MUST be applied using TLS [RFC5246] with a ciphersuite that provides confidentiality and integrity protection. This requires that the communication interaction between the client and the authorization server, as well as the interaction between the client and the resource server, utilize confidentiality and integrity protection. Since TLS is mandatory to implement and to use with this specification, it is the preferred approach for preventing token disclosure via the communication channel. For those cases where the client is prevented from observing the contents of the token, token encryption MUST be applied in addition to the usage of TLS protection. As a further defense against token disclosure, the client MUST validate the TLS certificate chain when making requests to protected resources, including checking the Certificate Revocation List (CRL) [RFC5280].",
      "ja": "トークン開示から保護するために、機密保護は機密性と完全性保護を提供して暗号スイートとTLS [RFC5246]を使用して適用されなければなりません。これは、クライアントと認証サーバだけでなく、クライアントとリソースサーバーの間の相互作用との間の通信の相互作用は、機密性と完全性保護を利用する必要があります。 TLSを実装する、本明細書で使用することは必須であるため、それは通信チャネルを介してトークン開示を防止するための好ましい方法です。クライアントは、トークンの内容を観察することが防止されるような場合には、トークンの暗号化にはTLS保護の使用に加えて適用されなければなりません。証明書失効リスト（CRL）[RFC5280]をチェックするなど、保護されたリソースへの要求を行うときに、トークン開示に対するさらなる防御として、クライアントはTLSの証明書チェーンを検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "Cookies are typically transmitted in the clear. Thus, any information contained in them is at risk of disclosure. Therefore, bearer tokens MUST NOT be stored in cookies that can be sent in the clear. See \"HTTP State Management Mechanism\" [RFC6265] for security considerations about cookies.",
      "ja": "クッキーは、一般的に明確に送信されます。したがって、それらに含まれるすべての情報は開示する危険性があります。したがって、ベアラ・トークンは平文で送信することができ、クッキーに保存されてはなりません。クッキーに関するセキュリティの考慮事項については、「HTTP状態管理メカニズム」[RFC6265]を参照してください。"
    },
    {
      "indent": 3,
      "text": "In some deployments, including those utilizing load balancers, the TLS connection to the resource server terminates prior to the actual server that provides the resource. This could leave the token unprotected between the front-end server where the TLS connection terminates and the back-end server that provides the resource. In such deployments, sufficient measures MUST be employed to ensure confidentiality of the token between the front-end and back-end servers; encryption of the token is one such possible measure.",
      "ja": "これらを利用ロードバランサを含むいくつかの展開では、リソースサーバへのTLS接続がリソースを提供し、実際のサーバーに先立って終了します。これは、TLS接続が終了し、フロントエンドサーバーとリソースを提供し、バックエンドサーバーの間で保護されていないトークンを残すことができます。このような配置では、十分な対策は、フロントエンドとバックエンドサーバー間のトークンの機密性を確保するために使用しなければなりません。トークンの暗号化は、そのような可能性尺度です。"
    },
    {
      "indent": 3,
      "text": "To deal with token capture and replay, the following recommendations are made: First, the lifetime of the token MUST be limited; one means of achieving this is by putting a validity time field inside the protected part of the token. Note that using short-lived (one hour or less) tokens reduces the impact of them being leaked. Second, confidentiality protection of the exchanges between the client and the authorization server and between the client and the resource server MUST be applied. As a consequence, no eavesdropper along the communication path is able to observe the token exchange. Consequently, such an on-path adversary cannot replay the token. Furthermore, when presenting the token to a resource server, the client MUST verify the identity of that resource server, as per Section 3.1 of \"HTTP Over TLS\" [RFC2818]. Note that the client MUST validate the TLS certificate chain when making these requests to protected resources. Presenting the token to an unauthenticated and unauthorized resource server or failing to validate the certificate chain will allow adversaries to steal the token and gain unauthorized access to protected resources.",
      "ja": "トークンのキャプチャおよび再生に対処するには、以下の勧告がなされています。まず、トークンの有効期間を制限しなければなりません。これを達成するための一つの手段は、トークンの保護された部分の内側に有効時間フィールドを置くことです。短命（1時間以内）トークンを使用して漏洩するそれらの影響を減少させることに注意してください。第二に、クライアントと認証サーバの間で、クライアントとリソースサーバ間のやり取りの機密保護が適用されなければなりません。その結果、通信経路に沿った盗聴者は、トークン交換を観察することができません。したがって、このようにパス敵対者はトークンを再生することができません。リソースサーバにトークンを提示するときさらに、クライアントは、「TLSオーバーHTTP」[RFC2818]のセクション3.1に従って、そのリソースサーバの身元を確かめなければなりません。保護されたリソースへのこれらの要求を行うときに、クライアントがTLS証明書チェーンを検証しなければならないことに注意してください。認証されていないと、不正なリソースサーバにトークンを提示するか、敵がトークンを盗んで保護されたリソースへの不正アクセスを得ることを可能にする証明書チェーンを検証することができません。"
    },
    {
      "indent": 0,
      "text": "5.3. Summary of Recommendations",
      "section_title": true,
      "ja": "5.3. 勧告の概要"
    },
    {
      "indent": 3,
      "text": "Safeguard bearer tokens: Client implementations MUST ensure that bearer tokens are not leaked to unintended parties, as they will be able to use them to gain access to protected resources. This is the primary security consideration when using bearer tokens and underlies all the more specific recommendations that follow.",
      "ja": "ベアラトークンをセーフガード：クライアントの実装は、彼らが保護されたリソースへのアクセスを得るためにそれらを使用することができるようになりますように、そのベアラトークンは、意図しない第三者に漏洩していないことを確認しなければなりません。ベアラトークンを使用し、後に続くすべてのより具体的な提言を根底とき、これは主要なセキュリティ考慮事項です。"
    },
    {
      "indent": 3,
      "text": "Validate TLS certificate chains: The client MUST validate the TLS certificate chain when making requests to protected resources. Failing to do so may enable DNS hijacking attacks to steal the token and gain unintended access.",
      "ja": "TLS証明書チェーンを検証します：保護されたリソースへの要求を行うときに、クライアントがTLS証明書チェーンを検証する必要があります。そうしないと、トークンを盗み、意図しないアクセスを得るためにDNSハイジャック攻撃を可能にします。"
    },
    {
      "indent": 3,
      "text": "Always use TLS (https): Clients MUST always use TLS [RFC5246] (https) or equivalent transport security when making requests with bearer tokens. Failing to do so exposes the token to numerous attacks that could give attackers unintended access.",
      "ja": "ベアラトークンを持つ要求を行うときにクライアントが常にTLSを使用しなければならない[RFC5246]（HTTPS）または同等のトランスポート・セキュリティ：常にTLS（HTTPS）を使用します。そうしないと、攻撃者意図しないアクセスを与えることができる多数の攻撃にトークンを公開します。"
    },
    {
      "indent": 3,
      "text": "Don't store bearer tokens in cookies: Implementations MUST NOT store bearer tokens within cookies that can be sent in the clear (which is the default transmission mode for cookies). Implementations that do store bearer tokens in cookies MUST take precautions against cross-site request forgery.",
      "ja": "クッキーにベアラトークンを保管しないでください：実装は（クッキーのデフォルトの送信モードである）平文で送信することができ、クッキー内のトークンベアラ保管してはなりません。クッキーに保存ベアラトークンを行う実装は、クロスサイトリクエストフォージェリに対する予防措置を講じなければなりません。"
    },
    {
      "indent": 3,
      "text": "Issue short-lived bearer tokens: Token servers SHOULD issue short-lived (one hour or less) bearer tokens, particularly when issuing tokens to clients that run within a web browser or other environments where information leakage may occur. Using short-lived bearer tokens can reduce the impact of them being leaked.",
      "ja": "短命ベアラトークンを発行します。トークンサーバは、情報漏洩が発生する可能性があり、Webブラウザや他の環境内で実行するクライアントにトークンを発行する場合は特に、ベアラ・トークン（1時間以内）短命発行する必要があります。短命ベアラトークンを使用すると、漏洩するそれらの影響を軽減することができます。"
    },
    {
      "indent": 3,
      "text": "Issue scoped bearer tokens: Token servers SHOULD issue bearer tokens that contain an audience restriction, scoping their use to the intended relying party or set of relying parties.",
      "ja": "問題は、トークンベアラスコープ：トークンサーバは、視聴制限が含まれているベアラトークンを発行することを目的依拠当事者にその使用をスコープまたは依拠当事者の設定すべきです。"
    },
    {
      "indent": 3,
      "text": "Don't pass bearer tokens in page URLs: Bearer tokens SHOULD NOT be passed in page URLs (for example, as query string parameters). Instead, bearer tokens SHOULD be passed in HTTP message headers or message bodies for which confidentiality measures are taken. Browsers, web servers, and other software may not adequately secure URLs in the browser history, web server logs, and other data structures. If bearer tokens are passed in page URLs, attackers might be able to steal them from the history data, logs, or other unsecured locations.",
      "ja": "ページのURL内のトークンベアラ渡さないでください：ベアラトークンは、（例えば、クエリ文字列パラメータとして）ページのURLで渡されるべきではありません。代わりに、ベアラトークンは機密措置が取られているためにHTTPメッセージヘッダ又はメッセージ本文に渡す必要があります。ブラウザ、Webサーバー、およびその他のソフトウェアが適切にブラウザの履歴、Webサーバのログ、および他のデータ構造でURLを確保できないことがあります。ベアラトークンがページのURLに渡された場合、攻撃者は、履歴データ、ログ、または他の無担保の場所からそれらを盗むことができるかもしれません。"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "6.1. OAuth Access Token Type Registration",
      "section_title": true,
      "ja": "6.1.  OAuthのアクセストークンタイプ登録"
    },
    {
      "indent": 3,
      "text": "This specification registers the following access token type in the OAuth Access Token Types registry defined in [RFC6749].",
      "ja": "この仕様は、[RFC6749]で定義されたのOAuthアクセストークンタイプレジストリに以下のアクセストークンタイプを登録します。"
    },
    {
      "indent": 0,
      "text": "6.1.1. The \"Bearer\" OAuth Access Token Type",
      "section_title": true,
      "ja": "6.1.1.  「ベアラー」のOAuthアクセストークンの種類"
    },
    {
      "indent": 3,
      "text": "Type name: Bearer",
      "ja": "型名：ベアラ"
    },
    {
      "indent": 3,
      "text": "Additional Token Endpoint Response Parameters: (none)",
      "ja": "追加のトークンエンドポイントレスポンスパラメータ：（なし）"
    },
    {
      "indent": 3,
      "text": "HTTP Authentication Scheme(s): Bearer",
      "ja": "HTTP認証スキーム（S）：ベアラ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "変更コントローラ：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書（S）：RFC 6750"
    },
    {
      "indent": 0,
      "text": "6.2. OAuth Extensions Error Registration",
      "section_title": true,
      "ja": "6.2.  OAuthの拡張エラー登録"
    },
    {
      "indent": 3,
      "text": "This specification registers the following error values in the OAuth Extensions Error registry defined in [RFC6749].",
      "ja": "この仕様は、[RFC6749]で定義されたのOAuth拡張エラーレジストリに次のエラー値を登録します。"
    },
    {
      "indent": 0,
      "text": "6.2.1. The \"invalid_request\" Error Value",
      "section_title": true,
      "ja": "6.2.1.  「INVALID_REQUEST」エラー値"
    },
    {
      "indent": 3,
      "text": "Error name: invalid_request",
      "ja": "エラー名：INVALID_REQUEST"
    },
    {
      "indent": 3,
      "text": "Error usage location: Resource access error response",
      "ja": "エラー使用場所：リソースアクセスエラー応答"
    },
    {
      "indent": 3,
      "text": "Related protocol extension: Bearer access token type",
      "ja": "関連プロトコル拡張：ベアラアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "変更コントローラ：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書（S）：RFC 6750"
    },
    {
      "indent": 0,
      "text": "6.2.2. The \"invalid_token\" Error Value",
      "section_title": true,
      "ja": "6.2.2.  「invalid_token」エラー値"
    },
    {
      "indent": 3,
      "text": "Error name: invalid_token",
      "ja": "エラー名：invalid_token"
    },
    {
      "indent": 3,
      "text": "Error usage location: Resource access error response",
      "ja": "エラー使用場所：リソースアクセスエラー応答"
    },
    {
      "indent": 3,
      "text": "Related protocol extension: Bearer access token type",
      "ja": "関連プロトコル拡張：ベアラアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "変更コントローラ：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書（S）：RFC 6750"
    },
    {
      "indent": 0,
      "text": "6.2.3. The \"insufficient_scope\" Error Value",
      "section_title": true,
      "ja": "6.2.3.  「insufficient_scope」エラー値"
    },
    {
      "indent": 3,
      "text": "Error name: insufficient_scope",
      "ja": "エラー名：insufficient_scope"
    },
    {
      "indent": 3,
      "text": "Error usage location: Resource access error response",
      "ja": "エラー使用場所：リソースアクセスエラー応答"
    },
    {
      "indent": 3,
      "text": "Related protocol extension: Bearer access token type",
      "ja": "関連プロトコル拡張：ベアラアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "変更コントローラ：IETF"
    },
    {
      "indent": 3,
      "text": "Specification document(s): RFC 6750",
      "ja": "仕様書（S）：RFC 6750"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7.参考"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC 2246, January 1999.",
      "ja": "[RFC2246]ダークス、T.とC.アレン、 \"TLSプロトコルバージョン1.0\"、RFC 2246、1999年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.",
      "ja": "[RFC2616]フィールディング、R.、ゲティス、J.、モーグル、J.、Frystyk、H.、Masinter、L.、リーチ、P.、およびT.バーナーズ - リー、 \"ハイパーテキスト転送プロトコル -  HTTP / 1.1\" 、RFC 2616、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC2617] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., and L. Stewart, \"HTTP Authentication: Basic and Digest Access Authentication\", RFC 2617, June 1999.",
      "ja": "[RFC2617]フランクス、J.、ハラム・ベイカー、P.、Hostetler、J.、ローレンス、S.、リーチ、P.、Luotonen、A.、およびL.スチュワート、 \"HTTP認証：基本とダイジェストアクセス認証\" 、RFC 2617、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.",
      "ja": "[RFC2818]レスコラ、E.、 \"TLSオーバーHTTP\"、RFC 2818、2000年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, January 2005.",
      "ja": "[RFC3986]バーナーズ - リー、T.、フィールディング、R.、およびL. Masinter、 \"ユニフォームリソース識別子（URI）：汎用構文\"、STD 66、RFC 3986、2005年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC5234] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, January 2008.",
      "ja": "[RFC5234]クロッカー、D.、およびP. Overell、 \"構文仕様のための増大しているBNF：ABNF\"、STD 68、RFC 5234、2008年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246]ダークス、T.およびE.レスコラ、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.2\"、RFC 5246、2008年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC5280] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 5280, May 2008.",
      "ja": "[RFC5280]クーパー、D.、Santesson、S.、ファレル、S.、Boeyen、S.、Housley氏、R.、およびW.ポーク、「インターネットX.509公開鍵暗号基盤証明書と証明書失効リスト（CRL）のプロフィール」、RFC 5280、2008年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC6265] Barth, A., \"HTTP State Management Mechanism\", RFC 6265, April 2011.",
      "ja": "[RFC6265]バース、A.、 \"HTTP状態管理機構\"、RFC 6265、2011年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC6749] Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\", RFC 6749, October 2012.",
      "ja": "[RFC6749]ハルト、D.編、 \"OAuth 2.0の認証フレームワーク\"、RFC 6749、2012年10月。"
    },
    {
      "indent": 3,
      "text": "[USASCII] American National Standards Institute, \"Coded Character Set -- 7-bit American Standard Code for Information Interchange\", ANSI X3.4, 1986.",
      "ja": "「 - 情報交換のための7ビットの米国標準コードコード化文字セット」、ANSI X3.4、1986 [USASCII]米国規格協会、。"
    },
    {
      "indent": 3,
      "text": "[W3C.REC-html401-19991224] Raggett, D., Le Hors, A., and I. Jacobs, \"HTML 4.01 Specification\", World Wide Web Consortium Recommendation REC-html401-19991224, December 1999, <http://www.w3.org/TR/1999/REC-html401-19991224>.",
      "ja": "[W3C.REC-html401-19991224] Raggett、D.、ル・オードブル、A.、およびI.ジェイコブス、 \"HTML 4.01仕様書\"、World Wide Web Consortium（W3C）の勧告REC-html401-19991224、1999年12月、<のhttp：// www.w3.org/TR/1999/REC-html401-19991224>。"
    },
    {
      "indent": 3,
      "text": "[W3C.REC-webarch-20041215] Jacobs, I. and N. Walsh, \"Architecture of the World Wide Web, Volume One\", World Wide Web Consortium Recommendation REC-webarch-20041215, December 2004, <http://www.w3.org/TR/2004/REC-webarch-20041215>.",
      "ja": "[W3C.REC-webarch-20041215]、World Wide Web Consortium（W3C）の勧告REC-webarch-20041215ジェイコブス、I.およびN.ウォルシュ、 \"ワールド・ワイド・ウェブ、ボリュームワンのアーキテクチャ\"、2004年12月、<のhttp：// WWW .w3.org / TR / 2004 / REC-webarch-20041215>。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[HTTP-AUTH] Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Authentication\", Work in Progress, October 2012.",
      "ja": "[HTTP-AUTH]フィールディング、R.、エド、及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：認証\"。。、進歩、2012年10月に働いています。"
    },
    {
      "indent": 3,
      "text": "[NIST800-63] Burr, W., Dodson, D., Newton, E., Perlner, R., Polk, T., Gupta, S., and E. Nabbus, \"NIST Special Publication 800-63-1, INFORMATION SECURITY\", December 2011, <http://csrc.nist.gov/publications/>.",
      "ja": "【NIST800-63】バリ、W.、ドッドソン、D.、ニュートン、E.、Perlner、R.、ポーク、T.、グプタ、S.、およびE. Nabbus「は、NIST Special Publication 800-63-1、情報セキュリティ」、2011年12月、<http://csrc.nist.gov/publications/>。"
    },
    {
      "indent": 3,
      "text": "[OMAP] Huff, J., Schlacht, D., Nadalin, A., Simmons, J., Rosenberg, P., Madsen, P., Ace, T., Rickelton-Abdi, C., and B. Boyer, \"Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources\", April 2012, <http://www.oatc.us/Standards/Download.aspx>.",
      "ja": "【OMAP】ハフ、J.、Schlacht、D.、Nadalin、A.、シモンズ、J.、ローゼンバーグ、P.、マドセン、P.、エース、T.、Rickelton-アブディ、C.、およびB.ボイヤー、 「オンラインマルチメディア認証プロトコル：インターネットマルチメディアリソースへの認可アクセスのための業界標準」、2012年4月、<http://www.oatc.us/Standards/Download.aspx>。"
    },
    {
      "indent": 3,
      "text": "[OpenID.Messages] Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., Mortimore, C., and E. Jay, \"OpenID Connect Messages 1.0\", June 2012, <http://openid.net/specs/ openid-connect-messages-1_0.html>.",
      "ja": "【OpenID.Messages] Sakimura、N.、ブラッドリー、J.、ジョーンズ、M.、デメデイロス、B.、Mortimore、C.、およびE.ジェイ、 \"OpenIDの接続メッセージ1.0\"、2012年6月、<HTTP：/ /openid.net/specs/ OpenIDのコネクト・-のメッセージ-1_0.html>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Acknowledgements",
      "ja": "付録A.謝辞"
    },
    {
      "indent": 3,
      "text": "The following people contributed to preliminary versions of this document: Blaine Cook (BT), Brian Eaton (Google), Yaron Y. Goland (Microsoft), Brent Goldman (Facebook), Raffi Krikorian (Twitter), Luke Shepard (Facebook), and Allen Tom (Yahoo!). The content and concepts within are a product of the OAuth community, the Web Resource Authorization Profiles (WRAP) community, and the OAuth Working Group. David Recordon created a preliminary version of this specification based upon an early draft of the specification that evolved into OAuth 2.0 [RFC6749]. Michael B. Jones in turn created the first version (00) of this specification using portions of David's preliminary document and edited all subsequent versions.",
      "ja": "ブレイン・クック（BT）、ブライアン・イートン（グーグル）、ヤロンY. Goland（マイクロソフト）、ブレント・ゴールドマン（フェイスブック）、ラフィ・クリコリアン（ツイッター）、ルーク・シェパード（フェイスブック）、そして次の人は、このドキュメントの暫定版に貢献しましたアレントム（ヤフー）。内のコンテンツと概念は、OAuthのコミュニティ、ウェブリソース承認プロファイル（WRAP）コミュニティ、およびOAuthの作業部会の製品です。デイビット・レコードンは、OAuth 2.0の[RFC6749]に進化し仕様の初期の草案に基づいて、この明細書の暫定版を作成しました。マイケルB.ジョーンズは順番にデイヴィッドの予備的文書の部分を使用して、この仕様の最初のバージョン（00）を作成し、後続のすべてのバージョンを編集しました。"
    },
    {
      "indent": 3,
      "text": "The OAuth Working Group has dozens of very active contributors who proposed ideas and wording for this document, including Michael Adams, Amanda Anganes, Andrew Arnott, Derek Atkins, Dirk Balfanz, John Bradley, Brian Campbell, Francisco Corella, Leah Culver, Bill de hOra, Breno de Medeiros, Brian Ellin, Stephen Farrell, Igor Faynberg, George Fletcher, Tim Freeman, Evan Gilbert, Yaron Y. Goland, Eran Hammer, Thomas Hardjono, Dick Hardt, Justin Hart, Phil Hunt, John Kemp, Chasen Le Hara, Barry Leiba, Amos Jeffries, Michael B. Jones, Torsten Lodderstedt, Paul Madsen, Eve Maler, James Manger, Laurence Miao, William J. Mills, Chuck Mortimore, Anthony Nadalin, Axel Nennker, Mark Nottingham, David Recordon, Julian Reschke, Rob Richards, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob Sayre, Marius Scurtescu, Naitik Shah, Justin Smith, Christian Stuebner, Jeremy Suriel, Doug Tangren, Paul Tarjan, Hannes Tschofenig, Franklin Tse, Sean Turner, Paul Walker, Shane Weeden, Skylar Woodward, and Zachary Zeltsan.",
      "ja": "OAuthのワーキンググループは、マイケル・アダムス、アマンダAnganes、アンドリュー・アーノット、デレク・アトキンス、ディルクBalfanz、ジョン・ブラッドリー、ブライアン・キャンベル、サンフランシスコCorella、リア・カルバー、ビル・デ・ホラを含め、このドキュメントのためのアイデアや言葉遣いを提案非常に活発な貢献者の数十人を、持っています、Breno・デ・メデイロス、ブライアンEllin、スティーブン・ファレル、イゴールFaynberg、ジョージ・フレッチャー、ティム・フリーマン、エヴァン・ギルバート、ヤロンY. Goland、エランハンマー、トーマスHardjono、ディック・ハート、ジャスティン・ハート、フィル・ハント、ジョン・ケンプ、茶筅ル・ハラ、バリー・レイバ、アモスジェフリーズ、マイケルB.ジョーンズ、トルステンLodderstedt、ポール・マドセン、イブMALER、ジェームズ・マネージャ、ローレンス・ミャオ族、ウィリアム・J・ミルズ、チャックMortimore、アンソニーNadalin、アクセルNennker、マーク・ノッティンガム、デイビット・レコードン、ジュリアンReschke、ロブリチャーズ、ジャスティン・リシェ、ピーター・サン・アンドレ、ナットSakimura、ロブ・セイヤー、マリウスScurtescu、Naitikシャー、ジャスティン・スミス、クリスチャンStuebner、ジェレミーSuriel、ダグTangren、ポールTarjan、ハンネスTschofenig、フランクリン・ツェ、ショーン・ターナー、ポール・ウォーカー、シェーンウィーデン、Skylarウッドワード、およびザカリーZeltsan。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Michael B. Jones Microsoft",
      "ja": "マイケルB.ジョーンズマイクロソフト"
    },
    {
      "indent": 3,
      "text": "EMail: mbj@microsoft.com URI: http://self-issued.info/",
      "ja": "電子メール：mbj@microsoft.com URI：http://self-issued.info/"
    },
    {
      "indent": 3,
      "text": "Dick Hardt Independent",
      "ja": "ディック・ハート独立"
    },
    {
      "indent": 3,
      "text": "EMail: dick.hardt@gmail.com URI: http://dickhardt.org/",
      "ja": "電子メール：dick.hardt@gmail.com URI：http://dickhardt.org/"
    }
  ]
}