{
  "title": {
    "text": "RFC 6392 - A Survey of In-Network Storage Systems",
    "ja": "RFC 6392 - では、ネットワークストレージシステムの調査"
  },
  "number": 6392,
  "created_at": "2019-11-01 02:45:18.813630+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                     R. Alimi, Ed.\nRequest for Comments: 6392                                        Google\nCategory: Informational                                   A. Rahman, Ed.\nISSN: 2070-1721                         InterDigital Communications, LLC\n                                                            Y. Yang, Ed.\n                                                         Yale University\n                                                            October 2011",
      "raw": true
    },
    {
      "indent": 17,
      "text": "A Survey of In-Network Storage Systems",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document surveys deployed and experimental in-network storage systems and describes their applicability for the DECADE (DECoupled Application Data Enroute) architecture.",
      "ja": "この展開された文書の調査や実験におけるネットワークストレージシステムとDECADE（デカップリングアプリケーションデータ道中）アーキテクチャのための彼らの適用性を説明しています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6392.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc6392で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2011 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2011 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n2. Survey Overview .................................................3\n   2.1. Terminology and Concepts ...................................3\n   2.2. Historical Context .........................................3\n3. In-Network Storage System Components ............................5\n   3.1. Data Access Interface ......................................5\n   3.2. Data Management Operations .................................5\n   3.3. Data Search Capability .....................................6\n   3.4. Access Control Authorization ...............................6\n   3.5. Resource Control Interface .................................6\n   3.6. Discovery Mechanism ........................................7\n   3.7. Storage Mode ...............................................7\n4. In-Network Storage Systems ......................................7\n   4.1. Amazon S3 ..................................................7\n   4.2. BranchCache ................................................9\n   4.3. Cache-and-Forward Architecture ............................11\n   4.4. Cloud Data Management Interface ...........................12\n   4.5. Content Delivery Network ..................................14\n   4.6. Delay-Tolerant Network ....................................16\n   4.7. Named Data Networking .....................................18\n   4.8. Network of Information ....................................19\n   4.9. Network Traffic Redundancy Elimination ....................22\n   4.10. OceanStore ...............................................23\n   4.11. P2P Cache ................................................24\n   4.12. Photo Sharing ............................................26\n   4.13. Usenet ...................................................28\n   4.14. Web Cache ................................................29\n   4.15. Observations Regarding In-Network Storage Systems ........31\n5. Storage and Other Related Protocols ............................32\n   5.1. HTTP ......................................................32\n   5.2. iSCSI .....................................................33\n   5.3. NFS .......................................................34\n   5.4. OAuth .....................................................36\n   5.5. WebDAV ....................................................37\n   5.6. Observations Regarding Storage and Related Protocols ......39\n6. Conclusions ....................................................40\n7. Security Considerations ........................................40\n8. Contributors ...................................................40\n9. Acknowledgments ................................................41\n10. Informative References ........................................41",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "DECADE (DECoupled Application Data Enroute) is an architecture that provides applications with access to provider-based in-network storage for content distribution (hereafter referred to as only \"in-network storage\" in this document). With access to in-network storage, content distribution applications can be designed to place less load on network infrastructure. As a simple example, a peer of a Peer-to-Peer (P2P) application may upload to other peers through its in-network storage, saving its usage of last-mile uplink bandwidth. See [1] for further discussion.",
      "ja": "DECADE（デカップリングアプリケーションデータ道中）は、コンテンツ配信のためのプロバイダベースで、ネットワークストレージへのアクセス（以下、この文書に記載されているとしてのみ「のネットワークストレージ」と呼ぶ）を持つアプリケーションを提供するアーキテクチャです。で、ネットワークストレージへのアクセスでは、コンテンツ配信アプリケーションは、ネットワークインフラストラクチャにはあまり負荷をかけるように設計することができます。簡単な例として、ピア・ツー・ピア（P2P）アプリケーションのピアは、ラストマイルのアップリンク帯域幅のその使用を節約し、そのネットワーク内のストレージを介して他のピアにアップロードすることができます。さらなる議論のために[1]を参照してください。"
    },
    {
      "indent": 3,
      "text": "A major motivation for DECADE is the substantial increase in capacity and reduction in cost offered by storage systems. For example, over the last two decades, there has been at least a 30-fold increase in the amount of storage that a customer can get for a given price (for flash memory and hard disk drives) [2] [3] [4].",
      "ja": "DECADEのための主要な動機は、ストレージ・システムによって提供されるコストの容量と削減の大幅な増加です。例えば、過去20年間にわたり、顧客が（フラッシュメモリーやハードディスクドライブ用）与えられた価格で取得できるストレージの量の少なくとも30倍の増加[2] [3] [4がありました]。"
    },
    {
      "indent": 3,
      "text": "High-capacity and low-cost in-network storage devices introduce substantial opportunities. One example of in-network storage is content caches supporting Web and P2P content. DECADE differs from existing content caches whose control fully resides with the owners of the caching devices in that DECADE also allows applications to control access to their allocated in-network storage, as well as the resources consumed while accessing that storage (bandwidth, connections, storage space). While designed in the context of P2P applications, DECADE may be useful to other applications as well. This document provides details on deployed and experimental in-network storage solutions, and evaluates their suitability for DECADE.",
      "ja": "大容量かつ低コストのネットワークストレージデバイスには、かなりの機会をご紹介します。で、ネットワークストレージの一例は、WebとP2Pコンテンツをサポートするコンテンツのキャッシュです。 DECADEは、その制御に完全にキャッシュ装置の所有者であることを十年ものアプリケーションがその割り当てられたネットワーク内のストレージへのアクセスを制御することができ、ならびにその記憶を（帯域幅、接続にアクセスしているときに消費されるリソースの既存のコンテンツキャッシュと異なる、ストレージスペース）。 P2Pアプリケーションのコンテキストで設計しながら、DECADEは、他の用途にも有用であり得ます。この文書では、配備され、実験的で、ネットワークストレージソリューションの詳細を提供し、そしてDECADEに対する適性を評価します。"
    },
    {
      "indent": 3,
      "text": "We note that the survey presented in this document is only representative of the research in this area. Rather than trying to enumerate an exhaustive list, we have chosen some typical techniques that lead to derivative works.",
      "ja": "私たちは、この文書の調査では、この分野の研究の唯一の代表であることに注意してください。むしろ完全なリストを列挙しようとするよりも、我々は派生作品につながるいくつかの典型的な手法を選択しました。"
    },
    {
      "indent": 0,
      "text": "2. Survey Overview",
      "section_title": true,
      "ja": "2.調査の概要"
    },
    {
      "indent": 0,
      "text": "2.1. Terminology and Concepts",
      "section_title": true,
      "ja": "2.1. 用語と概念"
    },
    {
      "indent": 3,
      "text": "This document uses terms defined in [1].",
      "ja": "この文書では、[1]で定義された用語を使用します。"
    },
    {
      "indent": 0,
      "text": "2.2. Historical Context",
      "section_title": true,
      "ja": "2.2. 歴史的背景"
    },
    {
      "indent": 3,
      "text": "In-network storage has been used previously in numerous scenarios to reduce network traffic and enable more efficient content distribution. This section presents a brief history of content distribution techniques and illustrates how DECADE relates to past approaches. Systems have been developed with particular use cases in mind. Thus, this survey is not meant to point out shortcomings of existing solutions, but rather to indicate where certain capabilities required in DECADE [5] are not provided by existing systems.",
      "ja": "ネットワークストレージは、ネットワークトラフィックを削減し、より効率的なコンテンツ配信を可能にするために、多数のシナリオで以前に使用されてきました。このセクションでは、コンテンツ配信技術の簡単な歴史を提示し、DECADEは、過去のアプローチに関連する方法を示しています。システムは、念頭に置いて、特定のユースケースで開発されています。このように、この調査は、既存のソリューションの欠点を指摘するものではなく、むしろDECADE [5]に必要な特定の機能を既存のシステムによって提供されていない場所を示します。"
    },
    {
      "indent": 3,
      "text": "In the early stage of Internet development, most Web content was stored at a central server, and clients requested Web content from the central server. In this architecture, the central server was required to provide a large amount of bandwidth. As more and more users access Web content, a central server can become overloaded. The use of Web caches is one technique to reduce load on a central server. Web caches store frequently requested content and provide bandwidth for serving the content to clients.",
      "ja": "インターネットの発展の初期段階では、ほとんどのWebコンテンツは、中央サーバに格納し、クライアントは、中央サーバからWebコンテンツを要求しました。このアーキテクチャでは、中央サーバは、大量の帯域幅を提供するために必要でした。より多くのユーザーがWebコンテンツにアクセスするように、中央サーバが過負荷になることができます。 Webキャッシュの使用は、中央サーバの負荷を軽減する一つの手法です。 Webキャッシュは、頻繁に要求されたコンテンツを保存し、クライアントにコンテンツを提供するための帯域幅を提供します。"
    },
    {
      "indent": 3,
      "text": "The ongoing growth of broadband technology in the worldwide market has been driven by the hunger of customers for new multimedia services as well as Web content. In particular, the use of audio and video streaming formats has become common for delivery of rich information to the public, both residential and business.",
      "ja": "世界市場でのブロードバンド技術の継続的な成長は、新しいマルチメディアサービスに対する顧客の飢餓だけでなく、Webコンテンツによって駆動されています。具体的には、オーディオとビデオのストリーミングフォーマットの使用は、公共、住宅街とビジネスの両方に豊富な情報の配信のために一般的になっています。"
    },
    {
      "indent": 3,
      "text": "To overcome this challenge of massive multimedia consumption, just installing more Web caches will not be enough. Moving content closer to the consumer results in greater network efficiency, improved Quality of Service (QoS), and lower latency, while facilitating personalization of content through broadband content applications. In these edge technologies, Content Delivery Networks (CDNs) are a representative technique. CDNs are based on a large-scale distributed network of servers located closer to customers for efficient delivery of digital content, including various forms of multimedia content.",
      "ja": "大規模なマルチメディア消費のこの課題を克服するために、単により多くのWebキャッシュをインストールするだけでは十分ではありません。ブロードバンド・コンテンツ・アプリケーションを介してコンテンツの個人化を容易にしつつ、より高いネットワーク効率に近い消費者の結果にコンテンツを移動する、サービスの品質（QoS）、および低レイテンシーを改善しました。これらの最新技術では、コンテンツ配信ネットワーク（CDNのは）代表テクニックです。 CDNは、マルチメディアコンテンツの様々な形態を含むデジタルコンテンツの効率的な送達のために顧客に近い位置にサーバの大規模な分散ネットワークに基づいています。"
    },
    {
      "indent": 3,
      "text": "Although CDNs are an effective means of information access and delivery, there are two barriers to making CDNs a more common service: cost and replication integrity. Deploying a CDN with its associated infrastructure is expensive. A CDN also requires administrative control over nodes with large storage capacity at geographically dispersed locations with adequate connectivity. CDNs can be scalable, but due to this administrative and cost overhead, they are not rapidly deployable for the common user.",
      "ja": "コストとレプリケーションの整合性：のCDNは、情報へのアクセスと配信の有効な手段ではあるが、より一般的なのCDNサービスを作るには、2つの障壁があります。それに関連するインフラストラクチャとCDNの展開は、高価です。 CDNはまた、適切な接続性、地理的に分散した場所で大記憶容量を持つノードに対する管理制御を必要とします。 CDNは、スケーラブルであることができるが、これによる管理およびコストのオーバーヘッドに、彼らは急速に一般的なユーザーのために展開可能ではありません。"
    },
    {
      "indent": 3,
      "text": "The emergence and maturation of P2P has allowed improvements to many network applications. P2P allows the use of client resources, such as CPU, memory, storage, and bandwidth, for serving content. This can reduce the amount of resources required by a content provider. Multimedia content delivery using various P2P or peer-assisted frameworks has been shown to greatly reduce the dependence on CDNs and central content servers. However, the popularity of P2P applications has resulted in increased traffic on ISP networks. P2P caches (both transparent and non-transparent) have been introduced as a way to reduce the burden. Though they can be effective in reducing traffic in certain areas of ISP networks, P2P caches have their shortcomings. In particular, they are application-dependent and thus difficult to keep up to date with new and evolving P2P application protocols. Second, applications may benefit from explicit control of in-network storage, which P2P caches do not provide. See [1] for further discussion.",
      "ja": "P2Pの出現と成熟は、多くのネットワークアプリケーションの改善を認めました。 P2Pはコンテンツを提供するために、CPU、メモリ、ストレージ、および帯域幅として、クライアントリソースの使用を可能にします。これは、コンテンツプロバイダによって必要なリソースの量を減らすことができます。様々なP2Pまたはピアアシストフレームワークを使用してマルチメディアコンテンツ配信が大幅のCDNと中央コンテンツサーバへの依存を低減することが示されています。しかし、P2Pアプリケーションの人気がISPネットワーク上のトラフィックの増加をもたらしました。 （透明と不透明の両方）P2Pキャッシュは、負担を軽減する方法として導入されてきました。彼らはISPのネットワークの特定の領域でのトラフィックを減らすのに有効であることができるものの、P2Pキャッシュは、その欠点を持っています。特に、それらはアプリケーションに依存して、新しいと進化のP2Pアプリケーションプロトコルを最新の状態に維持することは困難です。第二に、アプリケーションは、P2Pのキャッシュが提供していないで、ネットワークストレージ、の明示的な制御から利益を得ることができます。さらなる議論のために[1]を参照してください。"
    },
    {
      "indent": 3,
      "text": "DECADE aims to provide a standard protocol allowing P2P applications (including content providers) to make use of in-network storage to reduce the traffic burden on ISP networks, while enabling P2P applications to control access to content they have placed in in-network storage.",
      "ja": "DECADEは（コンテンツプロバイダを含む）P2Pアプリケーションは、彼らがネットワーク内のストレージに置かれているコンテンツへのアクセスを制御するためにP2Pアプリケーションを可能にしながら、ISPネットワーク上のトラフィックの負担を軽減することで、ネットワークストレージを利用するためにできるように、標準的なプロトコルを提供することを目的とします。"
    },
    {
      "indent": 0,
      "text": "3. In-Network Storage System Components",
      "section_title": true,
      "ja": "3.では、ネットワークストレージシステムコンポーネント"
    },
    {
      "indent": 3,
      "text": "Before surveying individual technologies, we describe the basic components of in-network storage. For consistency and for ease of comparison, we use the same model to evaluate each storage technology in this document.",
      "ja": "個々の技術を調査する前に、我々はネットワーク内のストレージの基本的なコンポーネントについて説明します。一貫性を保つため、比較を容易にするために、我々は、このドキュメントの各ストレージ技術を評価するために、同じモデルを使用します。"
    },
    {
      "indent": 3,
      "text": "Note that the network protocol(s) used by a given storage system are also an important part of the design. We omit details of particular protocol choices in this document.",
      "ja": "所与のストレージシステムによって使用されるネットワークプロトコル（s）は、設計の重要な部分であることに留意されたいです。私たちは、この文書で特定のプロトコルの選択肢の詳細は省略します。"
    },
    {
      "indent": 0,
      "text": "3.1. Data Access Interface",
      "section_title": true,
      "ja": "3.1. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "A set of operations is made available to a user for accessing data in the in-network storage system. Solutions typically allow both read and write operations, though the mechanisms for doing so can differ drastically.",
      "ja": "一連の操作は、ネットワーク内のストレージシステム内のデータにアクセスするためにユーザに利用可能にされます。ソリューションは、通常、両方の読みとそうするためのメカニズムが大幅に異なることができますが、書き込み操作を許可します。"
    },
    {
      "indent": 0,
      "text": "3.2. Data Management Operations",
      "section_title": true,
      "ja": "3.2. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Storage systems may provide users the ability to manage stored content. For example, operations such as delete and move may be provided to users. In this survey, we focus on data management operations that are provided to users and omit those provided to system administrators.",
      "ja": "ストレージシステムは、ユーザーに格納されたコンテンツを管理する機能を提供することができます。例えば、そのような削除、移動などの操作をユーザに提供することができます。今回の調査では、ユーザに提供し、システム管理者に提供されたものを省略しているデータの管理操作に焦点を当てています。"
    },
    {
      "indent": 0,
      "text": "3.3. Data Search Capability",
      "section_title": true,
      "ja": "3.3. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Some storage systems may provide the capability to search or enumerate content that has been stored. In this survey, we focus on search capabilities that are provided to users and omit those provided to system administrators. An example of a search would be to find the list of items stored by a given user over a given period of time.",
      "ja": "一部のストレージシステムが格納されているコンテンツを検索したり、列挙するための能力を提供することができます。今回の調査では、ユーザに提供し、システム管理者に提供されたものを省略している検索機能に焦点を当てます。検索の例は、一定の期間にわたり特定のユーザーが格納されているアイテムのリストを見つけることであろう。"
    },
    {
      "indent": 0,
      "text": "3.4. Access Control Authorization",
      "section_title": true,
      "ja": "3.4. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "Storage systems typically allow a user, content owner, or some other entity to define the access policies for the in-network storage system. The in-network storage system then checks the authorization of a user before it stores or retrieves content. We define three types of access control authorization: public-unrestricted, public-restricted, and private.",
      "ja": "ストレージシステムは、典型的には、ユーザー、コンテンツ所有者、または他のエンティティは、ネットワーク内のストレージシステムのためのアクセスポリシーを定義することができます。それは格納またはコンテンツを取得する前に、ネットワークストレージシステムは、ユーザの権限をチェックします。制限されたパブリック、プライベート、パブリック・無制限：私たちは、アクセス制御の許可の3つのタイプを定義します。"
    },
    {
      "indent": 3,
      "text": "\"Public-unrestricted\" refers to content on an in-network storage system that is widely available to all clients (i.e., without restrictions). An example is accessing Wikipedia on the Web, or anonymous access to FTP sites.",
      "ja": "「公開無制限」は、すべてのクライアント（すなわち、制限なし）に広く利用可能であるネットワーク内のストレージシステム上のコンテンツを指します。例では、Web上のウィキペディアへのアクセス、またはFTPサイトへの匿名アクセスされます。"
    },
    {
      "indent": 3,
      "text": "\"Public-restricted\" refers to content on an in-network storage system that is available to a restricted (though still potentially large) set of clients, but that does not require any confidential credentials from the client. An example is some content (e.g., a TV show episode) on the Internet that can only be viewable in selected countries or networks (i.e., white/black lists or black-out areas).",
      "ja": "「公共の制限は、」クライアントの制限（ただし、まだ潜在的に大きな）セットに提供されていますで、ネットワークストレージシステム上のコンテンツを意味し、それは、クライアントからの機密資格情報を必要としません。例は、選択された国またはネットワーク（即ち、ホワイト/ブラックリストまたはブラックアウト領域）で表示することができるインターネット上の一部のコンテンツ（例えば、テレビ番組のエピソード）です。"
    },
    {
      "indent": 3,
      "text": "\"Private\" refers to content on an in-network storage system that is only made available to one or more clients presenting the required confidential credentials (e.g., password or key). This content is not available to anyone without the proper confidential access credentials.",
      "ja": "「プライベート」にのみ必要な機密の認証情報（例えば、パスワードまたはキー）を提示する1つまたは複数のクライアントに提供されるネットワーク内のストレージシステム上のコンテンツを指します。このコンテンツは、適切な機密アクセス資格情報のないユーザーは利用できません。"
    },
    {
      "indent": 3,
      "text": "Note that a combination of access control types may be applicable for a given scenario. For example, the retrieval (read) of content from an in-network storage system may be public-unrestricted, but the storage (write) to the same system may be private.",
      "ja": "アクセス制御タイプの組合せが所定のシナリオに適用可能であることに留意されたいです。例えば、ネットワーク内のストレージシステムからのコンテンツの取得（読み取り）公開無制限であってもよいが、同じシステムに記憶（書き込み）がプライベートであってもよいです。"
    },
    {
      "indent": 0,
      "text": "3.5. Resource Control Interface",
      "section_title": true,
      "ja": "3.5. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "This is the interface through which users manage the resources on in-network storage systems that can be used by other peers, e.g., the bandwidth or connections. The storage system may also allow users to indicate a time for which resources are granted.",
      "ja": "これにより、ユーザーは他のピア、例えば、帯域幅または接続して使用することができるで、ネットワークストレージシステムのリソースを管理するためのインターフェイスです。ストレージシステムは、ユーザーがリソースが許可される時間を示すことを可能にします。"
    },
    {
      "indent": 0,
      "text": "3.6. Discovery Mechanism",
      "section_title": true,
      "ja": "3.6. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Users use the discovery mechanism to find the location of in-network storage, find an access interface or resource control interface, or find other interfaces of in-network storage.",
      "ja": "ユーザは、ネットワーク内のストレージの場所を見つけるアクセスインタフェースまたはリソース制御インターフェースを見つける、またはネットワーク内のストレージの他のインターフェイスを見つけるためにディスカバリメカニズムを使用します。"
    },
    {
      "indent": 0,
      "text": "3.7. Storage Mode",
      "section_title": true,
      "ja": "3.7. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Storage systems may use the following modes of storage: file system, object-based, or block-based.",
      "ja": "ファイル・システム、オブジェクトベース、またはブロックベース：ストレージシステムは、ストレージの次のモードを使用することができます。"
    },
    {
      "indent": 3,
      "text": "A file system typically organizes files into a hierarchical tree structure. Each level of the hierarchy normally contains zero or more directories, each with zero or more files. A file system may also be flat or use some other organizing principle.",
      "ja": "ファイルシステムは通常、階層ツリー構造にファイルを整理します。階層の各レベルは、通常0以上のディレクトリ、ゼロ以上のファイルとそれぞれが含まれています。また、ファイルシステムは、平らであるか、またはいくつかの他の組織原理を使用することができます。"
    },
    {
      "indent": 3,
      "text": "We define an object-based storage mode as one that stores discrete chunks of data (e.g., IP datagrams or another type of aggregation useful to an application) without a pre-defined hierarchy or meta-structure.",
      "ja": "我々は、事前に定義された階層またはメタ構造を持たない離散データのチャンク（例えば、IPデータグラムまたはアプリケーションに有用な凝集の別のタイプ）を格納するものとしてオブジェクトベースのストレージモードを定義します。"
    },
    {
      "indent": 3,
      "text": "We define a block-based storage mode as one that stores a raw sequence of bytes, with a client being able to read and/or write data at offsets within that sequence. Data is typically accessed in blocks for efficiency. A common example for this storage mode is raw access to a hard disk.",
      "ja": "我々は、クライアントがその配列内のオフセットでデータを読み取りおよび/または書き込みすることができるとともに、バイトの生のシーケンスを記憶するものとしてブロックベースのストレージモードを定義します。データは、典型的には、効率のためにブロックでアクセスされます。このストレージモードの一般的な例は、ハードディスクへのrawアクセスです。"
    },
    {
      "indent": 3,
      "text": "In this survey, we define \"storage mode\" to refer to how data is structured within the system, which may not be the same as how it is accessed by a client. For example, a caching system may cache objects with hierarchical names, but may internally use an object-based storage mode.",
      "ja": "今回の調査では、我々はそれがクライアントによってアクセスされた方法と同じではないかもしれない、データがシステム内で構成されているかを参照するために、「ストレージモード」を定義します。例えば、キャッシングシステムは、階層的な名前を持つオブジェクトをキャッシュすることができるが、内部オブジェクトベースのストレージモードを使用してもよいです。"
    },
    {
      "indent": 0,
      "text": "4. In-Network Storage Systems",
      "section_title": true,
      "ja": "4.では、ネットワークストレージシステム"
    },
    {
      "indent": 3,
      "text": "This section surveys in-network storage systems using the methodology defined above. The survey includes some systems that are widely deployed today, some systems that are just being deployed, and some experimental systems. The survey covers both traditional client-server architectures and P2P architectures. The surveyed systems are listed in alphabetical order. Also, for each system, a brief explanation of the relevance to DECADE is given.",
      "ja": "上記で定義された方法論を使用してネットワーク内このセクション調査ストレージシステム。調査では、今日広く展開されているいくつかのシステムで、ちょうど展開されているいくつかのシステム、およびいくつかの実験系を含んでいます。調査では、従来のクライアント・サーバー・アーキテクチャとP2Pアーキテクチャの両方をカバーしています。調査対象のシステムがアルファベット順に表示されます。また、各システムのために、DECADEとの関連性についての簡単な説明が与えられています。"
    },
    {
      "indent": 0,
      "text": "4.1. Amazon S3",
      "section_title": true,
      "ja": "4.1. アマゾンのCs"
    },
    {
      "indent": 3,
      "text": "Amazon S3 (Simple Storage Service) [6] provides an online storage service using Web (HTTP) interfaces. Users create buckets, and each bucket can contain stored objects. Users are provided an interface through which they can manage their buckets. Amazon S3 is a popular backend storage service for other services. Other related storage services are the Blob Service provided by Windows Azure [7], Google Storage for Developers [8], and Dropbox [9].",
      "ja": "アマゾンS3（シンプルストレージサービス）[6]のWeb（HTTP）のインタフェースを使用したオンラインストレージサービスを提供します。ユーザーはバケットを作成し、各バケットには格納されたオブジェクトを含めることができます。ユーザーは、自分のバケットを管理するためのインターフェイスを提供しています。 Amazon S3は、他のサービスに人気のバックエンドストレージサービスです。その他の関連ストレージサービスは、Windows Azureのブロブが提供するサービスです開発者のための[7]、Googleのストレージ[8]、およびDropboxの[9]。"
    },
    {
      "indent": 0,
      "text": "4.1.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.1.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "Amazon S3 is a very widely used (deployed) example of in-network storage. Amazon S3 leases the storage to third-party companies for disparate services. In particular, Amazon S3 has a rich model for authorization (using signed queries) to integrate with a wide variety of use cases. A focus for Amazon S3 is scalability. Particular simplifications that were made are the absence of a general, hierarchical namespace and the inability to update the contents of existing data.",
      "ja": "アマゾンS3は、ネットワーク内のストレージの非常に広く使用されている（展開）の例です。 Amazon S3は、異なるサービスのためのサードパーティ企業にストレージをリースしています。具体的には、Amazon S3はユースケースの多種多様と統合する（署名済みのクエリを使用して）承認のための豊富なモデルを持っています。 Amazon S3のための焦点はスケーラビリティです。作られた特定の単純化は、一般的な、階層的な名前空間と、既存のデータの内容を更新することができないの欠如です。"
    },
    {
      "indent": 0,
      "text": "4.1.2. Data Access Interface",
      "section_title": true,
      "ja": "4.1.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users can read and write objects.",
      "ja": "ユーザーがオブジェクトを読み書きすることができます。"
    },
    {
      "indent": 0,
      "text": "4.1.3. Data Management Operations",
      "section_title": true,
      "ja": "4.1.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Users can delete previously stored objects.",
      "ja": "ユーザーが以前に格納されたオブジェクトを削除することができます。"
    },
    {
      "indent": 0,
      "text": "4.1.4. Data Search Capability",
      "section_title": true,
      "ja": "4.1.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Users can list contents of buckets to find objects matching desired criteria.",
      "ja": "ユーザーが所望の基準に一致するオブジェクトを見つけるために、バケットの内容を一覧表示することができます。"
    },
    {
      "indent": 0,
      "text": "4.1.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.1.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control are supported for clients: public-unrestricted, public-restricted, and private.",
      "ja": "アクセスコントロールのすべてのメソッドは、クライアントのためにサポートされています。制限-パブリック、プライベート、パブリック、無制限。"
    },
    {
      "indent": 3,
      "text": "For example, access to stored objects can be restricted by an owner, a list of other Amazon S3 Web Service users, or all Amazon S3 Web Service users; or can be open to all users (anonymous access). Another option is for the owner to generate and sign a query (e.g., a query to read an object) that can be used by any user until an owner-defined expiration time.",
      "ja": "例えば、格納されたオブジェクトへのアクセスは、所有者、他のAmazon S3のWebサービスのユーザーのリスト、またはすべてのAmazon S3のWebサービスのユーザーによって制限することができます。またはすべてのユーザー（匿名アクセス）にオープンすることができます。所有者が所有者に定義された有効期限までの任意のユーザが使用可能なクエリ（オブジェクトを読み取るために、例えば、クエリ）を生成し、署名するための別のオプションがあります。"
    },
    {
      "indent": 0,
      "text": "4.1.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.1.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.1.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.1.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Users are provided a well-known DNS name (either a default provided by Amazon S3, or one customized by a particular user). Users accessing S3 storage use DNS to discover an IP address where S3 requests can be sent.",
      "ja": "ユーザーは、よく知られたDNS名（アマゾンS3が提供するデフォルト、または特定のユーザがカスタマイズ1のいずれか）を提供しています。 S3ストレージ利用DNSにアクセスするユーザーは、S3のリクエストを送信できるIPアドレスを発見します。"
    },
    {
      "indent": 0,
      "text": "4.1.8. Storage Mode",
      "section_title": true,
      "ja": "4.1.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based, with the extension that objects can be organized into user-defined buckets.",
      "ja": "オブジェクトはユーザー定義のバケットに編成することができることを拡張して、オブジェクトベース。"
    },
    {
      "indent": 0,
      "text": "4.2. BranchCache",
      "section_title": true,
      "ja": "4.2.  BranchCacheの"
    },
    {
      "indent": 3,
      "text": "BranchCache [10] is a feature integrated into Windows (Windows 7 and Windows Server 2008R2) that aims to optimize enterprise branch office file access over WAN links. The main goals are to reduce WAN link utilization and improve application responsiveness by caching and sharing content within a branch while still maintaining end-to-end security. BranchCache allows files retrieved from the Web servers and file servers located in headquarters or data centers to be cached in remote branch offices, and shared among users in the same branch accessing the same content. BranchCache operates transparently by instrumenting the HTTP and Server Message Block (SMB) components of the networking stack. It provides two modes of operation: Distributed Cache and Hosted Cache.",
      "ja": "BranchCacheが[10]は、WANリンク上で、企業のブランチオフィスのファイルへのアクセスを最適化することを目的のWindows（Windows 7とWindowsサーバー2008R2）に統合する機能です。主な目標は、WANリンクの利用率を削減し、キャッシュと、まだエンドツーエンドのセキュリティを維持しながら、ブランチ内のコンテンツを共有することにより、アプリケーションの応答性を向上させることがあります。 BranchCacheのは、本社やデータセンターにあるWebサーバーやファイルサーバーから取得したファイルは、リモートブランチオフィス内にキャッシュされ、同じコンテンツにアクセス同じ支店内のユーザ間で共有することができます。 BranchCacheがネットワークスタックのHTTPとサーバーメッセージブロック（SMB）の成分を計測することによって透過的に動作します。分散キャッシュおよびホスト型キャッシュ：それは2つの動作モードを提供します。"
    },
    {
      "indent": 3,
      "text": "In both modes, a client always contacts a BranchCache-enabled content server first to get the content identifiers for local search. If the content is cached locally, the client then retrieves the content within the branch. Otherwise, the client will go back to the original content server to request the content. The two modes differ in how the content is shared.",
      "ja": "どちらのモードでも、常にクライアントの連絡先BranchCache対応コンテンツサーバーは、最初にローカル検索のためのコンテンツ識別子を取得します。コンテンツがローカルにキャッシュされている場合、クライアントは、ブランチ内のコンテンツを検索します。それ以外の場合は、クライアントがコンテンツを要求するために、オリジナルコンテンツサーバに戻ります。二つのモードは、コンテンツが共有されている方法が異なります。"
    },
    {
      "indent": 3,
      "text": "In the Hosted Cache mode, a locally provisioned server acts as a cache for files retrieved from the servers. After getting the content identifiers, the client first consults the cache for the desired file. If it is not present in the cache, the client retrieves it from the content server and sends it to the cache for storage.",
      "ja": "ホスト型キャッシュモードでは、ローカルにプロビジョニングサーバは、サーバから取得したファイルのキャッシュとして機能します。コンテンツ識別子を取得した後、クライアントは、最初に目的のファイルのキャッシュを調べます。それがキャッシュに存在しない場合、クライアントは、コンテンツサーバからそれを取得し、ストレージのキャッシュに送信します。"
    },
    {
      "indent": 3,
      "text": "In the Distributed Cache mode, a client first queries other clients in the same network using the Web Services Discovery multicast protocol [11]. As in the Hosted Cache mode, the client retrieves the file from the content server if it is not available locally. After retrieving the file (either from another client or the content server), the client stores the file locally.",
      "ja": "分散キャッシュモードでは、Webサービスのディスカバリーマルチキャストプロトコル[11]を使用して、同じネットワーク内のクライアント最初のクエリ他のクライアント。それはローカルで利用できない場合は、ホスト型キャッシュモードでは、クライアントはコンテンツサーバーからファイルを取得します。ファイル（他のクライアントから、またはコンテンツサーバーのいずれか）を検索した後、クライアントは、ローカルにファイルを格納します。"
    },
    {
      "indent": 3,
      "text": "The original content server always authorizes requests from clients. Cached content is encrypted such that clients can decrypt the data only using keys derived from metadata returned by the content server. In addition to instrumenting the networking stack at clients, content servers must also support BranchCache.",
      "ja": "オリジナルコンテンツサーバは常にクライアントからの要求を許可します。キャッシュされたコンテンツは、クライアントが唯一のコンテンツサーバから返されたメタデータから派生したキーを使用してデータを復号化できるように暗号化されています。クライアントのネットワークスタックを計測することに加えて、コンテンツサーバもBranchCacheのをサポートしている必要があります。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.2.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "BranchCache is an example of an in-network storage system primarily targeted at enterprise networks. It supports a P2P-like mode (Distributed Cache) as well as a client-server mode (Hosted Cache). Integration into the Microsoft OS will ensure wide distribution of this in-network storage technology.",
      "ja": "BranchCacheのは、主に企業ネットワークを対象に、ネットワークストレージシステムの一例です。これは、P2Pのようなモード（分散キャッシュ）だけでなく、クライアントサーバモード（ホスト型キャッシュ）をサポートしています。マイクロソフトOSへの統合は、このネットワーク内のストレージ技術の広い分布を確実にします。"
    },
    {
      "indent": 0,
      "text": "4.2.2. Data Access Interface",
      "section_title": true,
      "ja": "4.2.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Clients transparently retrieve (read) data from a cache (on a client or a Hosted Cache), since BranchCache operates by instrumenting the networking stack. In the Hosted Cache mode, clients write data to the Hosted Cache once it is retrieved from the content server.",
      "ja": "BranchCacheのは、ネットワークスタックを計測することにより動作するため、クライアントは透過的に、（読み取り）（クライアントまたはホスト型キャッシュ上の）キャッシュからデータを取得します。それは、コンテンツサーバーから取得されると、ホスト型キャッシュモードでは、クライアントがホスト型キャッシュにデータを書き込みます。"
    },
    {
      "indent": 0,
      "text": "4.2.3. Data Management Operations",
      "section_title": true,
      "ja": "4.2.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.2.4. Data Search Capability",
      "section_title": true,
      "ja": "4.2.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.2.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.2.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method for clients is private. For example, transferred content is encrypted, and can only be decrypted by keys derived from data received from the original content server. Though data may be transferred to unauthorized clients, end-to-end security is maintained by only allowing authorized clients to decrypt the data.",
      "ja": "クライアントに対するアクセス制御方法は、プライベートです。例えば、転送されたコンテンツは暗号化され、そして唯一のオリジナルコンテンツサーバから受信したデータから導出鍵で復号することができます。データが不正なクライアントに転送することができるが、エンドツーエンドのセキュリティは、承認されたクライアントのみがデータを復号化できるようにすることで維持されています。"
    },
    {
      "indent": 0,
      "text": "4.2.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.2.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "The storage capacity of caches on the clients and Hosted Caches is configurable by system administrators. The Hosted Cache further allows configuration of the maximum number of simultaneous client accesses. In the Distributed Cache mode, exponential back-off and throttling mechanisms are utilized to prevent reply storms of popular content requests. The client will also spread data-block access among multiple serving clients that have the content (complete or partial) to improve latency and provide some load balancing.",
      "ja": "クライアント上のキャッシュとホストキャッシュの記憶容量は、システム管理者によって設定可能です。ホスト型キャッシュは、さらにアクセスする同時クライアントの最大数を設定できます。分散キャッシュモードでは、指数バックオフおよびスロットリングのメカニズムは、人気コンテンツ要求の応答嵐を予防するために利用されています。また、クライアントは、待ち時間を改善し、いくつかのロード・バランシングを提供するために、（完全または部分的な）コンテンツを持つ複数のサービス提供のクライアント間のデータ・ブロック・アクセスを分散します。"
    },
    {
      "indent": 0,
      "text": "4.2.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.2.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "The Distributed Cache mode uses multicast for discovery of other clients and content within a local network. Currently, the Hosted Cache mode uses policy provisioning or manual configuration of the server used as the Hosted Cache. In this mode, the address of the server may be found via DNS.",
      "ja": "分散キャッシュモードでは、他のクライアントとローカルネットワーク内のコンテンツの発見のためのマルチキャストを使用しています。現在では、ホスト型キャッシュモードは、ポリシープロビジョニングまたはホスト型キャッシュとして使用されるサーバーの手動構成を使用しています。このモードでは、サーバーのアドレスがDNS経由で見ることができます。"
    },
    {
      "indent": 0,
      "text": "4.2.8. Storage Mode",
      "section_title": true,
      "ja": "4.2.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based.",
      "ja": "オブジェクトベース。"
    },
    {
      "indent": 0,
      "text": "4.3. Cache-and-Forward Architecture",
      "section_title": true,
      "ja": "4.3. キャッシュアンドフォワードアーキテクチャ"
    },
    {
      "indent": 3,
      "text": "Cache-and-Forward (CNF) [12] is an architecture for content delivery services for the future Internet. In this architecture, storage can be exploited on nodes within the network, either directly on routers or deployed near the routers. CNF is based on the concept of store-and-forward routers with large storage, providing for opportunistic delivery to occasionally disconnected mobile users and for in-network caching of content. The proposed CNF protocol uses reliable hop-by-hop transfer of large data files between CNF routers in place of an end-to-end transport protocol such as TCP.",
      "ja": "キャッシュアンドフォワード（CNF）[12]、将来のインターネットコンテンツ配信サービスのためのアーキテクチャです。このアーキテクチャでは、ストレージは、ネットワーク内のノード上で、直接ルータで利用することができ、またはルータの近くに配備します。 CNFは、時折切断モバイルユーザへ日和見送達のために、コンテンツの中のネットワークキャッシングを提供する、大規模なストレージとストアアンドフォワードルータの概念に基づいています。提案されたCNFプロトコルは、TCPのようなエンド・ツー・エンドのトランスポートプロトコルの代わりに、CNFのルータとの間の大きなデータファイルの信頼性がホップバイホップ転送を利用します。"
    },
    {
      "indent": 0,
      "text": "4.3.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.3.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "CNF is an example of an experimental in-network storage system that would require storage space on (or near) a large number of routers in the Internet if it was deployed. As the name of the system implies, it would provide short-term caching and not long-term network storage.",
      "ja": "CNFは、それが展開された場合に（またはその近く）インターネット内のルータの多数の収納スペースを必要とする実験で、ネットワークストレージシステムの一例です。システムの名前が示すように、それは短期的なキャッシュではなく、長期的なネットワークストレージを提供します。"
    },
    {
      "indent": 0,
      "text": "4.3.2. Data Access Interface",
      "section_title": true,
      "ja": "4.3.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users implicitly store content at CNF routers by requesting files. End hosts read content from in-network storage by submitting queries for content.",
      "ja": "ユーザーは、暗黙のうちにファイルを要求することにより、CNFルータでコンテンツを格納します。エンドホストは、コンテンツのクエリを提出することにより、ネットワーク内のストレージからコンテンツをお読みください。"
    },
    {
      "indent": 0,
      "text": "4.3.3. Data Management Operations",
      "section_title": true,
      "ja": "4.3.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.3.4. Data Search Capability",
      "section_title": true,
      "ja": "4.3.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.3.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.3.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method is public-restricted (to any client that is part of the CNF network).",
      "ja": "アクセス制御方式は、公開制限（CNFネットワークの一部である任意のクライアントに対して）です。"
    },
    {
      "indent": 0,
      "text": "4.3.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.3.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.3.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.3.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "A query including a location-independent content ID is sent to the network and routed to a CNF router, which handles retrieval of the data and forwarding to the end host.",
      "ja": "位置に依存しないコンテンツIDを含むクエリーをネットワークに送信し、データの検索とエンドホストへの転送を処理CNFルータにルーティングされます。"
    },
    {
      "indent": 0,
      "text": "4.3.8. Storage Mode",
      "section_title": true,
      "ja": "4.3.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based, with objects representing individual files. The architecture proposes to cache large files in storage within the network, though objects could be made to represent smaller chunks of larger files.",
      "ja": "オブジェクトベース、個々のファイルを表すオブジェクトを持ちます。オブジェクトは、大きなファイルの小さな塊を表現するために作ることができるもののアーキテクチャは、ネットワーク内のストレージに大きなファイルをキャッシュすることを提案しています。"
    },
    {
      "indent": 0,
      "text": "4.4. Cloud Data Management Interface",
      "section_title": true,
      "ja": "4.4. クラウドデータ管理インタフェース"
    },
    {
      "indent": 3,
      "text": "The Cloud Data Management Interface (CDMI) is a specification to access and manage cloud storage. CDMI is specified by the Storage Networking Industry Association (SNIA).",
      "ja": "クラウドデータ管理インタフェース（CDMI）は、クラウドストレージにアクセスして管理するための仕様です。 CDMIはするSNIA（Storage Networking Industry Association）によって指定されます。"
    },
    {
      "indent": 3,
      "text": "CDMI is a functional interface that applications can use to create, retrieve, update, and delete data elements from the cloud. As part of this interface, the client will be able to discover the capabilities of the cloud storage offering and use this interface to manage containers and the data that is placed in them. In addition, metadata can be set on containers and their contained data elements through this interface [13].",
      "ja": "CDMIは、アプリケーションがクラウドからデータ要素を作成、取得、更新、および削除するために使用できる機能インタフェースです。このインタフェースの一部として、クライアントは、クラウドストレージの提供の能力を発見し、コンテナとその中に配置されたデータを管理するには、このインターフェイスを使用することができます。また、メタデータは、[13]このインタフェースを介して容器とその含まれるデータ要素に設定することができます。"
    },
    {
      "indent": 3,
      "text": "CDMI follows a traditional client-server model, and operates over an HTTP interface using the Representational State Transfer (REST) model. Similar to Amazon S3 buckets (see Section 4.1), users may create containers in which data objects may be stored. Even though data objects may be accessed via a user-defined name within a container, it is also possible to access data objects via a storage-defined Object ID, which is provided in the response upon creation of a data object.",
      "ja": "CDMIは、従来のクライアントサーバモデルに追従し、のRepresentational State Transfer（REST）モデルを使用してHTTPインターフェースを介して動作します。アマゾンS3バケットに似た（セクション4.1を参照）、ユーザはデータオブジェクトを格納可能なコンテナを作成してもよいです。データオブジェクトは、コンテナ内のユーザ定義名を介してアクセスすることができるにもかかわらず、データオブジェクトの作成時に応答して提供されるストレージ定義のオブジェクトIDを介してデータオブジェクトにアクセスすることも可能です。"
    },
    {
      "indent": 0,
      "text": "4.4.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.4.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "CDMI is an important initiative to standardize storage interfaces for cloud services, which are rapidly becoming an important type of storage service. In particular, it specifies a set of operations for creating, reading, writing, and managing data objects at a remote server (or set of servers) via HTTP.",
      "ja": "CDMIは急速ストレージサービスの重要なタイプになっているクラウドサービス、ストレージ用インタフェースを標準化するための重要な取り組みです。特に、それは、HTTP経由で（またはサーバのセット）、作成、読み取り、書き込み、およびリモート・サーバーでデータ・オブジェクトを管理するための一連の操作を指定します。"
    },
    {
      "indent": 0,
      "text": "4.4.2. Data Access Interface",
      "section_title": true,
      "ja": "4.4.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users can read and write data objects, and also update data in existing data objects. CDMI data objects are sent on the wire embedded as a field in a JavaScript Object Notation (JSON) object. The protocol also defines interfaces in which the contents of data objects can be written via simple HTTP GET/PUT operations.",
      "ja": "ユーザーは読み取りおよび書き込みデータオブジェクトを、また、既存のデータ・オブジェクト内のデータを更新することができます。 CDMIデータオブジェクトは、JavaScriptオブジェクト表記（JSON）オブジェクト内のフィールドとして埋め込まれたワイヤ上で送信されます。プロトコルは、データオブジェクトの内容は、単純なHTTP GET / PUTオペレーションを介して書き込むことが可能なインターフェイスを定義します。"
    },
    {
      "indent": 0,
      "text": "4.4.3. Data Management Operations",
      "section_title": true,
      "ja": "4.4.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Users can delete already-existing data objects. The create operation also supports modes in which the created object is copied or moved from an existing data object.",
      "ja": "ユーザーは既存のデータオブジェクトを削除することができます。作成操作はまた、作成されたオブジェクトをコピーするか、または既存のデータ・オブジェクトから移動させるモードをサポートします。"
    },
    {
      "indent": 3,
      "text": "Data system metadata also allows users to configure policies regarding time-to-live, after which a data object is automatically deleted, as well as the redundancy with which a data object is stored.",
      "ja": "データシステムのメタデータは、ユーザがデータオブジェクトが自動的に削除された後に、ライブの時、だけでなく、データオブジェクトが格納されていると、冗長性に関するポリシーを設定することができます。"
    },
    {
      "indent": 0,
      "text": "4.4.4. Data Search Capability",
      "section_title": true,
      "ja": "4.4.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Users may list the contents of containers to locate data objects matching any desired criteria.",
      "ja": "ユーザは、任意の所望の基準に一致するデータ・オブジェクトを検索するために容器の内容を一覧表示することができます。"
    },
    {
      "indent": 0,
      "text": "4.4.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.4.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control for clients are supported: public-unrestricted, public-restricted, and private.",
      "ja": "クライアントに対するアクセス制御のすべてのメソッドがサポートされています：制限-パブリック、プライベート、パブリック、無制限。"
    },
    {
      "indent": 3,
      "text": "In particular, CDMI allows access to data objects to be protected by Access Control Lists (ACLs) that can allow or restrict access based on user name, group, administrative status, or whether a user is authenticated or anonymous.",
      "ja": "特に、CDMIは、ユーザー名、グループ、管理ステータス、またはユーザが認証または匿名であるか否かに基づいてアクセスを許可または制限することができるアクセス制御リスト（ACL）によって保護されるデータオブジェクトへのアクセスを可能にします。"
    },
    {
      "indent": 0,
      "text": "4.4.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.4.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "CDMI supports attributes 'cdmi_max_latency' and 'cdmi_max_throughput' (set at either the level of containers, or a specific data object), which control the level of service offered to any users accessing a particular data object.",
      "ja": "CDMIは、特定のデータオブジェクトにアクセスする任意のユーザに提供されるサービスのレベルを制御する属性「cdmi_max_latency」と「cdmi_max_throughput」（コンテナのレベル、または特定のデータオブジェクトのいずれかに設定）をサポートしています。"
    },
    {
      "indent": 0,
      "text": "4.4.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.4.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Users are provided a well-known DNS name. The DNS name is resolved to determine the IP address to which requests may be sent.",
      "ja": "ユーザーは、よく知られているDNS名を提供しています。 DNS名は、リクエストが送信できるためのIPアドレスを決定するために解決されます。"
    },
    {
      "indent": 0,
      "text": "4.4.8. Storage Mode",
      "section_title": true,
      "ja": "4.4.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based, with the extension that objects can be organized into user-defined containers.",
      "ja": "オブジェクトはユーザー定義の容器に編成することができることを拡張して、オブジェクトベース。"
    },
    {
      "indent": 0,
      "text": "4.5. Content Delivery Network",
      "section_title": true,
      "ja": "4.5. コンテンツ配信ネットワーク"
    },
    {
      "indent": 3,
      "text": "A CDN provides services that improve performance by minimizing the amount of data transmitted through the network, improving accessibility, and maintaining correctness through content replication. CDNs offer fast and reliable applications and services by distributing content to cache or edge servers located close to users. See [14] for an additional taxonomy and survey.",
      "ja": "CDNは、ネットワークを介して送信されるデータの量を最小限にアクセシビリティの向上、コンテンツの複製を介して正確さを維持することにより、パフォーマンスを向上させるサービスを提供します。 CDNは、キャッシュまたはユーザーに近い位置にエッジサーバにコンテンツを配信することにより、高速かつ信頼性の高いアプリケーションやサービスを提供しています。追加の分類および調査のための[14]を参照してください。"
    },
    {
      "indent": 3,
      "text": "A CDN has some combination of content delivery, request routing, distribution, and accounting infrastructures. The content-delivery infrastructure consists of a set of edge servers (also called surrogates) that deliver copies of content to end users. The request-routing infrastructure is responsible for directing client requests to appropriate edge servers. It also interacts with the distribution infrastructure to keep an up-to-date view of the content stored in the CDN caches. The distribution infrastructure moves content from the origin server to the CDN edge servers and ensures consistency of content in the caches. The accounting infrastructure maintains logs of client accesses and records the usage of the CDN servers. This information is used for traffic reporting and usage-based billing.",
      "ja": "CDNは、コンテンツ配信要求のルーティング、配信、および課金インフラストラクチャのいくつかの組み合わせを有します。コンテンツ配信インフラストラクチャは、エンドユーザへコンテンツのコピーを配信するエッジサーバー（別名サロゲート）のセットからなります。要求ルーティングインフラストラクチャは、適切なエッジサーバーにクライアント要求を指示する責任があります。また、CDNキャッシュに格納されているコンテンツの最新ビューを維持するために流通インフラと対話します。分配インフラストラクチャは、CDNエッジサーバーに、オリジンサーバからのコンテンツを移動し、キャッシュ内のコンテンツの一貫性を保証します。会計インフラストラクチャは、クライアントアクセスのログを維持し、CDNサーバの使用状況を記録します。この情報は、トラフィックのレポートと使用状況ベースの課金に使用されています。"
    },
    {
      "indent": 3,
      "text": "In practice, a CDN typically hosts static content including images, video, media clips, advertisements, and other embedded objects for Web viewing. A focus for CDNs is the ability to publish and deliver content to end users in a reliable and timely manner. A CDN focuses on building its network infrastructure to provide the following services and functionalities: storage and management of content; distribution of content among surrogates; cache management; delivery of static, dynamic, and streaming content; backup and disaster recovery solutions; and monitoring, performance measurement, and reporting.",
      "ja": "実際に、CDNは、典型的には、ウェブ閲覧用の画像、ビデオ、メディアクリップ、広告、および他の埋め込みオブジェクトを含む静的コンテンツをホストします。 CDNのための焦点は、信頼性が高く、タイムリーに、エンドユーザーにコンテンツを公開し、提供する機能です。 CDNは、以下のサービスや機能を提供するために、そのネットワークインフラストラクチャの構築に焦点を当てて：コンテンツの保存と管理;サロゲート間でコンテンツの配信。キャッシュ管理;静的、動的、およびストリーミングコンテンツの配信。バックアップとディザスタリカバリソリューション。そして、監視、性能測定、およびレポート。"
    },
    {
      "indent": 3,
      "text": "Examples of existing CDNs are Akamai, Limelight, and CloudFront.",
      "ja": "既存のCDNの例としては、アカマイ、ライムライト、およびCloudFrontをしています。"
    },
    {
      "indent": 3,
      "text": "The following description uses the term \"content provider\" to refer to the entity purchasing a CDN service, and the term \"client\" to refer to the subscriber requesting content via the CDN from the content provider.",
      "ja": "以下の説明は、CDNサービスを購入するエンティティを参照するための用語「コンテンツプロバイダ」、およびコンテンツプロバイダからCDN経由で加入要求内容を参照するための用語「クライアント」を使用しています。"
    },
    {
      "indent": 0,
      "text": "4.5.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.5.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "CDNs are a very widely used (deployed) example of in-network storage for multimedia content. The existence and operation of the storage system are totally transparent to the end user. CDNs typically require a strong business relationship between the content providers and content distributors, and often the business relationship extends to the ISPs.",
      "ja": "CDNは、マルチメディアコンテンツのために、ネットワークストレージの非常に広く使用されている（展開）の例です。ストレージシステムの存在と操作は、エンドユーザーに対して完全に透過的です。 CDNは、通常、コンテンツプロバイダとコンテンツ配信業者との間に強いビジネス関係を必要とし、多くの場合、ビジネス関係は、ISPに拡張します。"
    },
    {
      "indent": 0,
      "text": "4.5.2. Data Access Interface",
      "section_title": true,
      "ja": "4.5.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "A CDN is typically a closed system, and generally provides only a read (retrieve) access interface to clients. A CDN typically does not provide a write (store) access interface to clients. The content provider can access network edge servers and store content on them, or edge servers can retrieve content from content providers. Client nodes can only retrieve content from edge servers.",
      "ja": "CDNは、典型的にはクローズドシステムであり、一般的にクライアントにのみ読み出し（取得）アクセスインターフェースを提供します。 CDNは、通常のクライアントに書き込み（店舗）のアクセスインタフェースを提供していません。コンテンツプロバイダは、それらのネットワークエッジサーバーとストアコンテンツにアクセスすることができ、またはエッジサーバーは、コンテンツプロバイダからコンテンツを取得することができます。クライアント・ノードは、エッジサーバからコンテンツを取得することができます。"
    },
    {
      "indent": 0,
      "text": "4.5.3. Data Management Operations",
      "section_title": true,
      "ja": "4.5.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "A content provider can manage the data distributed in different cache nodes, such as moving popular data objects from one cache node to another cache node, or deleting rarely accessed data objects in cache nodes. User nodes, however, have no right to perform these operations.",
      "ja": "コンテンツプロバイダは、他のキャッシュノードに1つのキャッシュノードから人気のあるデータ・オブジェクトを移動する、またはキャッシュノードにめったにアクセスされないデータ・オブジェクトを削除するなど、異なるキャッシュノードに分散されたデータを管理することができます。ユーザー・ノードは、しかし、これらの操作を実行する権利はありません。"
    },
    {
      "indent": 0,
      "text": "4.5.4. Data Search Capability",
      "section_title": true,
      "ja": "4.5.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "A content provider can search or enumerate the data each cache node stores. User nodes cannot perform search operations.",
      "ja": "コンテンツプロバイダは、各キャッシュノードストアを検索したり、データを列挙することができます。ユーザノードは、検索操作を実行することはできません。"
    },
    {
      "indent": 0,
      "text": "4.5.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.5.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control (for reading) are supported for clients: public-unrestricted, public-restricted, and private. Some CDN edge servers allow usage of HTTP basic authentication with the origin server or restrictions by IP address, or they can use a token-based technique to allow the origin server to apply its own authorization criteria.",
      "ja": "アクセス制御（読書用）のすべてのメソッドは、クライアントのためにサポートされています。制限-パブリック、プライベート、パブリック、無制限。いくつかのCDNエッジサーバは、IPアドレスによって、オリジンサーバや制限付きHTTP基本認証の使用を許可する、または、それらはオリジンサーバは、独自の認証基準を適用できるようにするためにトークンベースの技術を使用することができます。"
    },
    {
      "indent": 3,
      "text": "As mentioned previously, clients typically cannot write to the CDN. Writing is typically a private operation for the content providers.",
      "ja": "前述したように、クライアントは通常、CDNに書き込むことはできません。書き込みは、通常、コンテンツプロバイダの秘密演算です。"
    },
    {
      "indent": 0,
      "text": "4.5.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.5.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.5.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.5.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Content providers can directly find internal CDN cache nodes to store content, since they typically have an explicit business relationship. Clients can locate CDN nodes through DNS or other redirection mechanisms.",
      "ja": "彼らは通常、明示的なビジネス関係を持っているため、コンテンツプロバイダは、直接、コンテンツを格納するための内部CDNキャッシュノードを見つけることができます。クライアントは、DNSまたは他のリダイレクションメカニズムを通じてCDNノードを見つけることができます。"
    },
    {
      "indent": 0,
      "text": "4.5.8. Storage Mode",
      "section_title": true,
      "ja": "4.5.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Though the addressing of objects uses URLs that typically refer to objects in a hierarchical fashion, the storage mode is typically object-based.",
      "ja": "オブジェクトのアドレスは、典型的には、階層的にオブジェクトを参照するURLを使用しても、ストレージモードは、典型的には、オブジェクトベースです。"
    },
    {
      "indent": 0,
      "text": "4.6. Delay-Tolerant Network",
      "section_title": true,
      "ja": "4.6. ディレイ・トレラント・ネットワーク"
    },
    {
      "indent": 3,
      "text": "The Delay-Tolerant Network (DTN) [15] is an evolution of an architecture originally designed for the Interplanetary Internet. The Interplanetary Internet is a communication system envisioned to provide Internet-like services across interplanetary distances in support of deep space exploration. The DTN architecture can be utilized in various operational environments characterized by severe communication disruptions, disconnections, and high delays (e.g., a month-long loss of connectivity between two planetary networks because of high solar radiation due to sun spots). The DTN architecture is thus suitable for environments including deep space networks, sensor-based networks, certain satellite networks, and underwater acoustic networks.",
      "ja": "ディレイ・トレラント・ネットワーク（DTN）[15]は、もともと惑星間インターネットのために設計されたアーキテクチャの進化です。惑星間インターネットは、深宇宙探査の支援に惑星間の距離間で、インターネットのようなサービスを提供するために、想定される通信システムです。 DTNアーキテクチャは、重度の通信の中断、切断、及び高遅延（例えば、なぜなら太陽スポットに高い日射の2つの遊星ネットワーク間の接続の一カ月間の損失）によって特徴づけられる様々な動作環境で使用することができます。 DTNアーキテクチャは、深宇宙ネットワーク、センサベースのネットワーク、特定の衛星ネットワーク、及び水中音響ネットワークを含む環境に適しています。"
    },
    {
      "indent": 3,
      "text": "A key aspect of the DTN is a store-and-forward overlay layer called the \"Bundle Protocol\" or \"Bundle Layer\", which exists between the transport and application layers [16]. The Bundle Layer forms a logical overlay that employs persistent storage to help combat long-term network interruptions by providing a store-and-forward service. While traditional IP networks are also based on store-and-forward principles, the amount of time of a packet being kept in \"storage\" at a traditional IP router is typically on the order of milliseconds (or less). In contrast, the DTN architecture assumes that most Bundle Layer nodes will use some form of persistent storage (e.g., hard disk, flash memory, etc.) for DTN packets because of the nature of the DTN environment.",
      "ja": "DTNの重要な側面は、トランスポートおよびアプリケーション層[16]との間に存在する「バンドルプロトコル」または「バンドル層」と呼ばれるストア・アンド・フォワードオーバーレイ層です。バンドル層は、ストアアンドフォワードサービスを提供することにより、戦闘の長期的なネットワークの中断を支援するために永続ストレージを採用して論理的オーバーレイを形成しています。従来のIPネットワークはまた、ストア・アンド・フォワード原理に基づいているが、伝統的なIPルータの「記憶」に保持されているパケットの時間の量は、ミリ秒（またはそれ以下）のオーダーであるのが典型的です。これとは対照的に、DTNアーキテクチャは、ほとんどのバンドルレイヤノードがあるためDTN環境の自然のDTNパケットのための永続ストレージ（例えば、ハードディスク、フラッシュメモリなど）のいくつかのフォームを使用することを前提としています。"
    },
    {
      "indent": 0,
      "text": "4.6.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.6.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "The DTN is an example of an experimental in-network storage system that would require fundamental changes to the Internet protocols.",
      "ja": "DTNは、インターネットプロトコルに基本的な変更を必要とする実験で、ネットワークストレージシステムの一例です。"
    },
    {
      "indent": 0,
      "text": "4.6.2. Data Access Interface",
      "section_title": true,
      "ja": "4.6.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users implicitly cause content to be stored (until successfully forwarded) at Bundle Layer nodes by initiating/terminating any transaction that traverses the DTN.",
      "ja": "（成功裏に転送されるまで）、ユーザーは、暗黙的にDTNを横断するトランザクションを終了/開始することにより、バンドル・レイヤー・ノードで保存するコンテンツを起こします。"
    },
    {
      "indent": 0,
      "text": "4.6.3. Data Management Operations",
      "section_title": true,
      "ja": "4.6.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Users can implicitly cause deletion of content stored at Bundle Layer nodes via a \"time-to-live\" type of parameter that the user can control (for transactions originating from the user).",
      "ja": "ユーザーは、暗黙的に（利用者から発信取引のために）ユーザーが制御できるパラメータの「生存時間」タイプを経由してバンドル・レイヤー・ノードに格納されたコンテンツの削除を引き起こす可能性があります。"
    },
    {
      "indent": 0,
      "text": "4.6.4. Data Search Capability",
      "section_title": true,
      "ja": "4.6.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.6.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.6.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method is public-restricted (to any client that is part of the DTN) or private.",
      "ja": "アクセス制御方式は、公開制限またはプライベート（DTNの一部である任意のクライアントに対して）です。"
    },
    {
      "indent": 0,
      "text": "4.6.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.6.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.6.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.6.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "A Uniform Resource Identifier (URI) approach is used as the basis of the addressing scheme for DTN transactions (and subsequent store-and-forward routing through the DTN network).",
      "ja": "ユニフォームリソース識別子（URI）アプローチ（DTNネットワークを介してルーティングし、その後のストアアンドフォワード）DTNトランザクションのアドレス指定方式の基礎として使用されます。"
    },
    {
      "indent": 0,
      "text": "4.6.8. Storage Mode",
      "section_title": true,
      "ja": "4.6.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based. DTN applications send data to the Bundle Layer, which then breaks the data into segments. These segments are then routed through the DTN network, and stored in Bundle Layer nodes as required (before being forwarded).",
      "ja": "オブジェクトベース。 DTNのアプリケーションは、セグメントにデータを壊すバンドル層にデータを送信します。 （転送される前に）、必要に応じてこれらのセグメントは、次に、DTNネットワークを介してルーティングされ、バンドルレイヤノードに格納されています。"
    },
    {
      "indent": 0,
      "text": "4.7. Named Data Networking",
      "section_title": true,
      "ja": "4.7. データネットワーキング名前付き"
    },
    {
      "indent": 3,
      "text": "Named Data Networking (NDN) [17] is a research initiative that proposes to move to a new model of addressing and routing for the Internet. NDN uses \"named data\"-based routing and forwarding, to replace the current IP-address-based model. NDN also uses name-based data caching in the routers.",
      "ja": "データネットワーキング（NDN）[17]名前付きアドレッシングとインターネットのルーティングの新しいモデルに移行することを提案している研究イニシアチブです。 NDNは、現在のIPアドレスベースのモデルを置き換えるために「という名前のデータ」ベースのルーティングおよび転送を、使用しています。 NDNはまた、ルータに名前ベースのデータ・キャッシングを使用しています。"
    },
    {
      "indent": 3,
      "text": "Each NDN Data packet will be assigned a content name and will be cryptographically signed. Data delivery is driven by the requesting end. Routers disseminate name-based prefix announcements by using routing protocols such as Intermediate System to Intermediate System (IS-IS) or the Border Gateway Protocol (BGP). The requester will send out an \"Interest\" packet, which identifies the name of the data that it wants. Routers that receive this Interest packet will remember the interface it came from and will then forward it on a name-based routing protocol. Once an Interest packet reaches a node that has the desired data, a named Data packet is sent back, which carries both the name and content of the data, along with a digital signature of the producer. This named Data packet is then forwarded back to the original requester on the reverse path of the Interest packet [18].",
      "ja": "各NDNデータパケットは、コンテンツ名を割り当てられ、暗号署名されます。データ配信が要求するエンドによって駆動されます。ルータは、このような中間システムへの中間システム（IS-IS）またはボーダーゲートウェイプロトコル（BGP）などのルーティングプロトコルを使用して、名前ベースのプレフィックスアナウンスを広めます。依頼者は、それが望んでいるデータの名前を識別する「利息」のパケットを、送信します。このインタレストパケットを受信するルータは、それがどこから来たと、名前ベースのルーティングプロトコルにそれを転送するインタフェースを覚えているでしょう。インタレストパケットが所望のデータを有するノードに到達すると、指定されたデータパケットは、プロデューサのデジタル署名と共に、データの名前とコンテンツの両方を担持する、返送されます。この名前付きデータパケットは、インタレストパケット[18]の逆の経路に戻って、元の要求者に転送されます。"
    },
    {
      "indent": 3,
      "text": "A key aspect of NDN is that routers have the capability to cache the named data. If a request for the same data (i.e., same name) comes to the router, then the NDN router will forward the named data stored locally to fulfill the request. The proponents of NDN believe that the network can be designed naturally, matching data delivery characteristics instead of communication between endpoints, because data delivery has become the primary use of the network.",
      "ja": "NDNの重要な側面は、ルータが指定されたデータをキャッシュする機能を持っているということです。同じデータ（すなわち、同じ名前）の要求がルータになる場合は、NDNルータは要求を満たすために、ローカルに保存されたというデータを転送します。 NDNの支持者は、データ配信は、ネットワークの主な用途となっているため、ネットワークは、データ配信特性の代わりに、エンドポイント間の通信をマッチング、自然に設計することができると考えています。"
    },
    {
      "indent": 0,
      "text": "4.7.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.7.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "NDN is an example of an experimental in-network storage system that would require storage space on a large number of routers in the Internet. Named Data packets would be kept in storage in the NDN routers and provided to new requesters of the same data.",
      "ja": "NDNは、インターネット内のルータの多数のストレージスペースを必要とする実験で、ネットワークストレージシステムの一例です。名前付きデータパケットはNDNルータ内のストレージに保管し、同じデータの新しい要求者に提供されることになります。"
    },
    {
      "indent": 0,
      "text": "4.7.2. Data Access Interface",
      "section_title": true,
      "ja": "4.7.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users implicitly store content at NDN routers by requesting content (the named Data packets) from the network. Subsequent requests by different users for the same content will cause the named Data packets to be read from the NDN routers' in-network storage.",
      "ja": "ユーザーは、暗黙的にネットワークからのコンテンツ（名前付きデータパケット）を要求することにより、NDNルータでコンテンツを格納します。同じコンテンツの異なるユーザによる後続の要求は、指定されたデータパケットは、NDNのルータの中-ネットワークストレージから読み込むことになります。"
    },
    {
      "indent": 0,
      "text": "4.7.3. Data Management Operations",
      "section_title": true,
      "ja": "4.7.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Users do not have the direct ability to delete content stored in the NDN routers. However, there will be some type of time-to-live parameter associated with the named Data packets, though this has not yet been specified.",
      "ja": "ユーザーはNDNルータに格納されたコンテンツを削除する直接能力を持っていません。これは、まだ指定されていないにもかかわらずしかし、生存時間という名前のデータパケットに関連するパラメータのいくつかの種類が存在します。"
    },
    {
      "indent": 0,
      "text": "4.7.4. Data Search Capability",
      "section_title": true,
      "ja": "4.7.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.7.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.7.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control for clients are supported: public-unrestricted, public-restricted, and private.",
      "ja": "クライアントに対するアクセス制御のすべてのメソッドがサポートされています：制限-パブリック、プライベート、パブリック、無制限。"
    },
    {
      "indent": 3,
      "text": "The basic security mechanism in NDN is for the sender to digitally sign the content (the named Data packets) that it sends. It is envisioned that a complete access control system can be built on top of NDN, though this has not yet been specified.",
      "ja": "送信者は、デジタルそれが送信するコンテンツ（名前付きデータパケット）を署名するためNDNにおける基本的なセキュリティメカニズムがあります。まだ指定されていないものの、完全なアクセス制御システムは、NDNの上に構築され得ることが想定されます。"
    },
    {
      "indent": 0,
      "text": "4.7.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.7.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.7.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.7.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Names are used as the basis of the addressing and discovery scheme for NDN (and subsequent store-and-forward routing through the NDN network). NDN names are assumed to be hierarchical and to be able to be deterministically constructed. This is still an active area of research.",
      "ja": "名前は（NDNネットワークを介してルーティングし、その後のストアアンドフォワード）アドレッシング及び発見NDNのためのスキームの基礎として使用されます。 NDN名は階層的であること、および決定論的に構築することができるようにすると仮定されています。これはまだ研究の活発な領域です。"
    },
    {
      "indent": 0,
      "text": "4.7.8. Storage Mode",
      "section_title": true,
      "ja": "4.7.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based. NDN sends named Data packets through the network. These Data packets are routed through the NDN network and stored in NDN routers.",
      "ja": "オブジェクトベース。 NDNは、ネットワークを介してデータパケットを送信し命名します。これらのデータパケットは、NDNネットワークを介してルーティングされ、NDNルータに格納されています。"
    },
    {
      "indent": 0,
      "text": "4.8. Network of Information",
      "section_title": true,
      "ja": "4.8. 情報のネットワーク"
    },
    {
      "indent": 3,
      "text": "Similar to NDN (see Section 4.7), Network of Information (NetInf) [19] is another information-centric approach in which the named data objects are the basic component of the networking architecture. NetInf is thus moving away from today's host-centric networking architecture where the nodes in the network are the primary objects. In today's network, the information objects are named relative to the hosts they are stored on (e.g., http://www.example.com/information-object.txt).",
      "ja": "（セクション4.7を参照）NDNと同様、情報のネットワーク（NetInf）[19]という名前のデータオブジェクトがネットワークアーキテクチャの基本的な構成要素である、別の情報中心型アプローチです。 NetInfは、このようにネットワーク内のノードが主目的である、今日のホスト中心のネットワークアーキテクチャから遠ざかっています。今日のネットワークでは、情報オブジェクトは、それらが（例えば、http://www.example.com/information-object.txt）に保存されているホストに関連付けてネーミングされています。"
    },
    {
      "indent": 3,
      "text": "The NetInf naming and security framework builds the foundation for an information-centric security model that integrates security deeply into the architecture. In this model, trust is based on the information itself. Information objects (IOs) are given a unique name with cryptographic properties. Together with additional metadata, the name can be used to verify the data integrity as well as several other security properties, such as self-certification, name persistency, and owner authentication and identification. The approach also gives some benefits over the security model in today's host-centric networks, as it minimizes the need for trust in the infrastructure, including the hosts providing the data, the channel, or the resolution service.",
      "ja": "NetInfのネーミングとセキュリティフレームワークは、アーキテクチャに深くセキュリティを統合情報中心のセキュリティモデルの基盤を構築します。このモデルでは、信頼関係は、情報自体に基づいています。情報オブジェクト（IOSが）、暗号化プロパティを持つユニークな名前を与えられています。一緒に追加のメタデータと、名前は、データの整合性ならびに自己認証、名前の持続性、および所有者の認証と識別のようないくつかの他のセキュリティ特性を検証するために使用することができます。それはデータ、チャネル、または解決サービスを提供するホストを含​​むインフラの信頼の必要性を、最小限に抑えるようなアプローチはまた、今日のホスト中心のネットワークのセキュリティモデルの上にいくつかの利点を提供します。"
    },
    {
      "indent": 3,
      "text": "In NetInf, the information objects are published into the network. They are registered with a Name Resolution Service (NRS). The NRS is also used to register network locators that can be used to retrieve data objects that represent the published IOs. When a receiver wants to retrieve an IO, the request for the IO is resolved by the NRS into a set of locators. These locators are then used to retrieve a copy of the data object from the \"best\" available source(s). NetInf is open to use any type of underlying transport network. The locators can thus be a heterogeneous set, e.g., IPv4, IPv6, Medium Access Control (MAC), etc.",
      "ja": "NetInfでは、情報オブジェクトは、ネットワークに公開されています。これらは、名前解決サービス（NRS）に登録されています。 NRSは、また、公開のIOを表すデータオブジェクトを取得するために使用できるネットワークロケータを登録するために使用されます。受信機はIOを検索したい場合は、IO要求は、ロケータのセットにNRSによって解決されます。これらのロケータは、「最良の」利用可能なソース（S）からのデータオブジェクトのコピーを取得するために使用されています。 NetInfは、基礎となるトランスポートネットワークのいずれかのタイプを使用して開いています。ロケータは、このように不均一設定することができ、例えば、IPv4の、IPv6の、媒体アクセス制御（MAC）、等"
    },
    {
      "indent": 3,
      "text": "NetInf will make extensive use of caching of information objects in the network and will provide network functionality that is similar to what overlay solutions such as CDNs and P2P distribution networks (e.g., BitTorrent) provide today.",
      "ja": "NetInf情報のキャッシングの広範な使用は、ネットワーク内のオブジェクトとどのようなオーバーレイのCDNとP2P配信ネットワークのような溶液（例えば、ビットトレント）が今日提供する類似しているネットワーク機能を提供するようになります。"
    },
    {
      "indent": 0,
      "text": "4.8.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.8.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "NetInf is an example of an experimental information-centric network architecture that will require storage space for storage and caching of information objects on a large number of NetInf nodes in the Internet.",
      "ja": "NetInfはインターネットでNetInfノードの多数の情報オブジェクトの保管およびキャッシングのための記憶空間を必要とする実験情報中心型ネットワークアーキテクチャの一例です。"
    },
    {
      "indent": 0,
      "text": "4.8.2. Data Access Interface",
      "section_title": true,
      "ja": "4.8.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users will publish IOs with specific IDs into the network. This is done by the client sending a register message to the NRS stating that the IO with the specific ID is available. When another user wishes to retrieve the IO, they will use the given ID to make a request for the IO. The ID is then resolved by the NRS, and the IO is delivered from a nearby in-network storage location.",
      "ja": "ユーザーがネットワークに特定のIDを使用したIOSを公開します。これは、特定のIDを持つIOが利用可能であることを示すNRSに登録メッセージを送信するクライアントによって行われます。別のユーザーがIOを取得しようとするとき、彼らはIOを要求するために与えられたIDを使用します。 IDは、次に、NRSによって解決され、及びIO近くにネットワーク記憶場所から送出されます。"
    },
    {
      "indent": 0,
      "text": "4.8.3. Data Management Operations",
      "section_title": true,
      "ja": "4.8.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Users do not have the direct ability to delete content stored in the NetInf nodes. However, there can be some type of time-to-live parameter associated with the information objects, though this has not yet been specified.",
      "ja": "ユーザーはNetInfノードに格納されたコンテンツを削除する直接能力を持っていません。これは、まだ指定されていないにもかかわらずしかし、タイム・トゥ・ライブ情報オブジェクトに関連付けられたパラメータのいくつかの種類があることができます。"
    },
    {
      "indent": 0,
      "text": "4.8.4. Data Search Capability",
      "section_title": true,
      "ja": "4.8.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.8.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.8.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control for clients are supported: public-unrestricted, public-restricted, and private. The basic security mechanism in NetInf is for the publisher to digitally sign the content of the information object that it publishes. It is envisioned that a complete access control system can be built on top of NetInf, though this has not yet been specified.",
      "ja": "クライアントに対するアクセス制御のすべてのメソッドがサポートされています：制限-パブリック、プライベート、パブリック、無制限。出版社がデジタルそれが公開する情報オブジェクトの内容を署名するためNetInfにおける基本的なセキュリティメカニズムがあります。まだ指定されていないものの、完全なアクセス制御システムは、NetInfの上に構築され得ることが想定されます。"
    },
    {
      "indent": 0,
      "text": "4.8.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.8.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.8.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.8.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "NetInf IDs are used for naming and accessing information objects. The IDs are resolved by the NRS into locators that are used for routing and transport of data through the transport networks. This is still an active area of research.",
      "ja": "NetInf IDはネーミングおよび情報オブジェクトにアクセスするために使用されています。 IDは、トランスポートネットワークを介してデータのルーティングおよび輸送のために使用されるロケータにNRSによって解決されます。これはまだ研究の活発な領域です。"
    },
    {
      "indent": 0,
      "text": "4.8.8. Storage Mode",
      "section_title": true,
      "ja": "4.8.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based. From an application perspective, NetInf can be used for publishing entire files or chunks of files. NetInf is agnostic to the application perspective and treats everything as information objects.",
      "ja": "オブジェクトベース。アプリケーションの観点からは、NetInfは、ファイル全体またはファイルのチャンクを公開するために使用することができます。 NetInfは、アプリケーションの観点にとらわれないで、情報オブジェクトとしてすべてを扱います。"
    },
    {
      "indent": 0,
      "text": "4.9. Network Traffic Redundancy Elimination",
      "section_title": true,
      "ja": "4.9. ネットワークトラフィックの冗長性除去"
    },
    {
      "indent": 3,
      "text": "Redundancy Elimination (RE) is used for identifying and removing repeated content from network transfers. This technique has been proposed to improve network performance in many types of networks, such as ISP backbones and enterprise access links. One example of an RE proposal is SmartRE [20], proposed by Anand et al., which focuses on network-wide RE. In packet-level RE, forwarding elements are equipped with additional storage that can be used to cache data from forwarded packets. Upstream routers may replace packet data with a fingerprint that tells a downstream router how to decode and reconstruct the packet based on cached data.",
      "ja": "冗長性除去（RE）は、ネットワーク転送から繰り返すコンテンツを識別し、除去するために使用されます。この技術は、ISPバックボーンや企業のアクセスリンクのようなネットワークの多くの種類、ネットワークのパフォーマンスを改善することが提案されています。 RE提案の一例は、アナンドら、ネットワーク全体のREに焦点を当てによって提案され、SmartRE [20]です。パケットレベルのREに、転送要素は、転送されたパケットからのデータをキャッシュするために使用することができる追加の記憶装置が装備されています。アップストリームルータは、下流のルータがどのようにキャッシュされたデータに基づいてパケットをデコードし、再構築するよう指示指紋とパケットデータを交換することができます。"
    },
    {
      "indent": 0,
      "text": "4.9.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.9.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "RE is an example of an experimental in-network storage system that would require a large amount of associated packet processing at routers if it was ever deployed.",
      "ja": "REは、それがこれまでに展開された場合、ルータに関連するパケット処理の大量を必要とする実験で、ネットワークストレージシステムの一例です。"
    },
    {
      "indent": 0,
      "text": "4.9.2. Data Access Interface",
      "section_title": true,
      "ja": "4.9.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "RE is typically transparent to the user. Writing into storage is done by transferring data that has not already been cached. Storage is read when users transmit data identical to previously transmitted data.",
      "ja": "REは、ユーザーに典型的には透明です。ストレージへの書き込みは、すでにキャッシュされていないデータを転送することによって行われます。ユーザーが以前に送信したデータと同一のデータを送信する際にストレージが読み取られます。"
    },
    {
      "indent": 0,
      "text": "4.9.3. Data Management Operations",
      "section_title": true,
      "ja": "4.9.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.9.4. Data Search Capability",
      "section_title": true,
      "ja": "4.9.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.9.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.9.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method is public-restricted (to any client that is part of the RE network). Note that the content provider still retains control over which peers receive the requested data. The returned data is \"compressed\" as it is transferred within the network.",
      "ja": "アクセス制御方式は、公開制限（REネットワークの一部である任意のクライアントに対して）です。コンテンツプロバイダは、まだピアが要求されたデータを受信するの制御を保持していることに注意してください。それがネットワーク内で転送される返されたデータは、「圧縮」されます。"
    },
    {
      "indent": 0,
      "text": "4.9.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.9.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided. The content provider still retains control over the rate at which packets are sent to a peer. The packet size within the network may be reduced.",
      "ja": "提供されていない。コンテンツプロバイダは依然としてパケットをピアに送信される速度に対する制御を保持します。ネットワーク内のパケットサイズを小さくすることができます。"
    },
    {
      "indent": 0,
      "text": "4.9.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.9.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "No discovery mechanism is necessary. Routers can use RE without the users' knowledge.",
      "ja": "いいえ発見メカニズムは必要ありません。ルーターは、ユーザーの知識がなくてREを使用することができます。"
    },
    {
      "indent": 0,
      "text": "4.9.8. Storage Mode",
      "section_title": true,
      "ja": "4.9.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based, with \"objects\" being data from packets transmitted within the network.",
      "ja": "「オブジェクト」は、ネットワーク内で送信されるパケットからのデータであると、オブジェクトベース。"
    },
    {
      "indent": 0,
      "text": "4.10. OceanStore",
      "section_title": true,
      "ja": "4.10. オーシャンストア"
    },
    {
      "indent": 3,
      "text": "OceanStore [21] is a storage platform developed at the University of California, Berkeley, that provides globally distributed storage. OceanStore implements a model where multiple storage providers can pool resources together. Thus, a major focus is on resiliency, self-organization, and self-maintenance.",
      "ja": "オーシャンストア[21]は、グローバルに分散ストレージを提供し、カリフォルニア大学バークレー校で開発されたストレージ・プラットフォームです。オーシャンストアは、複数のストレージプロバイダが一緒にリソースをプールすることができモデルを実装しています。このように、主要な焦点は、弾力性、自己組織化、およびセルフメンテナンスです。"
    },
    {
      "indent": 3,
      "text": "The protocol is resilient to some storage nodes being compromised by utilizing Byzantine agreement and erasure codes to store data at primary replicas.",
      "ja": "プロトコルは、プライマリレプリカでデータを格納するためにビザンチン合意消去コードを利用することによって危険にさらされているいくつかのストレージノードに弾力的です。"
    },
    {
      "indent": 0,
      "text": "4.10.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.10.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "OceanStore is an example of an experimental in-network storage system that provides a high degree of network resilience to failure scenarios.",
      "ja": "オーシャンストアは、障害シナリオへのネットワーク回復力の高い程度を提供する実験において、ネットワークストレージシステムの一例です。"
    },
    {
      "indent": 0,
      "text": "4.10.2. Data Access Interface",
      "section_title": true,
      "ja": "4.10.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users may read and write objects.",
      "ja": "ユーザーがオブジェクトを読み書きします。"
    },
    {
      "indent": 0,
      "text": "4.10.3. Data Management Operations",
      "section_title": true,
      "ja": "4.10.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Objects may be replaced by newer versions, and multiple versions of an object may be maintained.",
      "ja": "オブジェクトは、新しいバージョンで置き換えられてもよく、及びオブジェクトの複数のバージョンを維持することができます。"
    },
    {
      "indent": 0,
      "text": "4.10.4. Data Search Capability",
      "section_title": true,
      "ja": "4.10.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.10.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.10.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "Provided, but specifics for clients are unclear from the available references.",
      "ja": "提供が、クライアントのために具体的には、利用可能な参照から不明です。"
    },
    {
      "indent": 0,
      "text": "4.10.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.10.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.10.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.10.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Users require an entry point into the system in the form of one storage node that is part of OceanStore. If a hostname is provided, the address of a storage node may be determined via DNS.",
      "ja": "ユーザは、オーシャンストアの一部である一つの記憶ノードの形でシステムへのエントリポイントを必要とします。ホスト名が提供されている場合、ストレージノードのアドレスは、DNSを介して決定されてもよいです。"
    },
    {
      "indent": 0,
      "text": "4.10.8. Storage Mode",
      "section_title": true,
      "ja": "4.10.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based.",
      "ja": "オブジェクトベース。"
    },
    {
      "indent": 0,
      "text": "4.11. P2P Cache",
      "section_title": true,
      "ja": "4.11.  P2Pキャッシュ"
    },
    {
      "indent": 3,
      "text": "Caching of P2P traffic is a useful approach to reduce P2P network traffic, because objects in P2P systems are mostly immutable and the traffic is highly repetitive. In addition, making use of P2P caches does not require changes to P2P protocols and can be deployed transparently from clients.",
      "ja": "P2Pシステム内のオブジェクトはほとんど不変であり、トラフィックは非常に繰り返しているので、P2Pトラフィックのキャッシングは、P2Pネットワークのトラフィックを削減するための有用なアプローチです。また、P2Pのキャッシュを利用することはP2Pプロトコルの変更を必要とせず、クライアントから透過的に展開することができます。"
    },
    {
      "indent": 3,
      "text": "P2P caches operate similarly to Web caches (Section 4.14) in that they temporarily store frequently requested content. Requests for content already stored in the cache can be served from local storage instead of requiring the data to be transmitted over expensive network links.",
      "ja": "P2Pキャッシュは、彼らが一時的に頻繁に要求されたコンテンツを保存することで、Webキャッシュ（4.14）と同様に動作します。すでにキャッシュに格納されたコンテンツに対する要求ではなく、高価なネットワークリンクを介して送信されるデータを必要とするローカルストレージから提供することができます。"
    },
    {
      "indent": 3,
      "text": "Two types of P2P caches exist: transparent P2P caches and non-transparent P2P caches.",
      "ja": "P2Pのキャッシュの2種類があり：透明P2Pのキャッシュと非透過P2Pキャッシュを。"
    },
    {
      "indent": 3,
      "text": "For a transparent cache, once a P2P cache is established, the network will transparently redirect P2P traffic to the cache, which either serves the file directly or passes the request on to a remote P2P user and simultaneously caches that data. Transparency is typically implemented using Deep Packet Inspection (DPI). DPI products identify and pass P2P packets to the P2P caching system so it can cache and accelerate the traffic.",
      "ja": "P2Pキャッシュが確立されると透過キャッシュについては、ネットワークは、透過的にファイルを直接役割を果たすか、遠隔P2Pユーザに上の要求を渡すと同時にそのデータをキャッシュするキャッシュのいずれかにP2Pトラフィックをリダイレクトします。透明度は、典型的には、ディープパケットインスペクション（DPI）を使用して実装されています。 DPI製品は、特定し、そのトラフィックをキャッシュし、加速することができるようにP2PのキャッシュシステムにP2Pパケットを渡します。"
    },
    {
      "indent": 3,
      "text": "A non-transparent cache appears as a super peer; it explicitly peers with other P2P clients.",
      "ja": "非透過キャッシュは、スーパーピアとして表示されます。それが明示的に他のP2Pクライアントとピア。"
    },
    {
      "indent": 3,
      "text": "To enable operation with existing P2P software, P2P caches directly support P2P application protocols. A large number of P2P protocols are used by P2P software and hence are supported by caches, leading to higher complexity. Additionally, these protocols evolve over time, and new protocols are introduced.",
      "ja": "既存のP2Pソフトウェアでの動作を可能にするために、P2Pのキャッシュは直接P2Pアプリケーションプロトコルをサポートしています。 P2Pプロトコルの多くは、P2Pソフトウェアによって使用され、したがって、より高い複雑さをもたらす、キャッシュによって支持されています。また、これらのプロトコルは、時間をかけて進化し、新しいプロトコルが導入されています。"
    },
    {
      "indent": 0,
      "text": "4.11.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.11.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "A P2P cache is an example of in-network storage for P2P systems. However, unlike DECADE, the existence and operation of the storage system are totally transparent to the end user.",
      "ja": "P2PキャッシュはP2Pシステムのために、ネットワークストレージの一例です。しかし、DECADEとは異なり、ストレージ・システムの存在と操作は、エンドユーザーに対して完全に透過的です。"
    },
    {
      "indent": 0,
      "text": "4.11.2. Transparent P2P Caches",
      "section_title": true,
      "ja": "4.11.2. 透明P2Pのキャッシュ"
    },
    {
      "indent": 0,
      "text": "4.11.2.1. Data Access Interface",
      "section_title": true,
      "ja": "4.11.2.1。データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "The data access interface allows P2P content to be cached (stored) and supplied (retrieved) locally such that network traffic is reduced, but it is transparent to P2P users, and P2P users implicitly use the data access interface (in the form of their native P2P application protocol) to store or retrieve content.",
      "ja": "データ・アクセス・インタフェースは、P2Pコンテンツをキャッシュ（記憶）とローカルように、ネットワークトラフィックが減少する（取得）が供給されることを可能にするが、それはP2Pユーザに透明であり、そしてP2Pユーザは暗黙それらの天然の形態で（データ・アクセス・インタフェースを使用しますコンテンツを格納または取得するためのP2Pアプリケーションプロトコル）。"
    },
    {
      "indent": 0,
      "text": "4.11.2.2. Data Management Operations",
      "section_title": true,
      "ja": "4.11.2.2。データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.11.2.3. Data Search Capability",
      "section_title": true,
      "ja": "4.11.2.3。データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.11.2.4. Access Control Authorization",
      "section_title": true,
      "ja": "4.11.2.4。アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method is typically public-restricted (to any client that is part of the P2P channel or swarm).",
      "ja": "アクセス制御方法は、一般的に、公開制限（P2Pチャネルまたは群れの一部である任意のクライアントに対して）です。"
    },
    {
      "indent": 0,
      "text": "4.11.2.5. Resource Control Interface",
      "section_title": true,
      "ja": "4.11.2.5。リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.11.2.6. Discovery Mechanism",
      "section_title": true,
      "ja": "4.11.2.6。ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "The use of DPI means that no discovery mechanism is provided to P2P users; it is transparent to P2P users. Since DPI is used to recognize P2P applications' private protocols, P2P cache implementations must be updated as new applications are added and existing protocols evolve.",
      "ja": "DPIの使用は一切発見機構がP2Pユーザーに提供されていないことを意味します。それはP2Pユーザーに対して透過的です。 DPIは、P2Pアプリケーションのプライベートプロトコルを認識するために使用されているので、新しいアプリケーションが追加されるP2Pのキャッシュ実装を更新する必要があり、既存のプロトコルが進化します。"
    },
    {
      "indent": 0,
      "text": "4.11.2.7. Storage Mode",
      "section_title": true,
      "ja": "4.11.2.7。ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based. Chunks (typically, the unit of transfer among P2P clients) of content are stored in the cache.",
      "ja": "オブジェクトベース。コンテンツのチャンク（典型的には、P2Pクライアントの間で転送単位）がキャッシュに格納されています。"
    },
    {
      "indent": 0,
      "text": "4.11.3. Non-Transparent P2P Caches",
      "section_title": true,
      "ja": "4.11.3. 非P2P透過キャッシュ"
    },
    {
      "indent": 0,
      "text": "4.11.3.1. Data Access Interface",
      "section_title": true,
      "ja": "4.11.3.1。データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "The data access interface allows P2P content to be cached (stored) and supplied (retrieved) locally such that network traffic is reduced. P2P users implicitly store and retrieve from the cache using the P2P application's native protocol.",
      "ja": "データ・アクセス・インタフェースは、P2Pコンテンツをキャッシュ（記憶）とローカルように、ネットワークトラフィックが減少する（取得）が供給されることを可能にします。 P2Pユーザーが暗黙的に保存し、P2Pアプリケーションのネイティブプロトコルを使用して、キャッシュから取得します。"
    },
    {
      "indent": 0,
      "text": "4.11.3.2. Data Management Operations",
      "section_title": true,
      "ja": "4.11.3.2。データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.11.3.3. Data Search Capability",
      "section_title": true,
      "ja": "4.11.3.3。データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.11.3.4. Access Control Authorization",
      "section_title": true,
      "ja": "4.11.3.4。アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method is typically public-restricted (to any client that is part of the P2P channel or swarm).",
      "ja": "アクセス制御方法は、一般的に、公開制限（P2Pチャネルまたは群れの一部である任意のクライアントに対して）です。"
    },
    {
      "indent": 0,
      "text": "4.11.3.5. Resource Control Interface",
      "section_title": true,
      "ja": "4.11.3.5。リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.11.3.6. Discovery Mechanism",
      "section_title": true,
      "ja": "4.11.3.6。ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "A P2P cache node behaves as if it were a normal peer in order to join the P2P overlay network. Other P2P users can find such a cache node through an overlay routing mechanism and can interact with it as if it were a normal neighbor node.",
      "ja": "それはP2Pオーバレイネットワークに参加するために、通常のピアであるかのようにP2Pキャッシュノードが動作します。他のP2Pユーザーは、オーバーレイルーティングメカニズムを介して、このようなキャッシュノードを見つけることができますし、それが通常の隣接ノードであるかのようにそれと対話することができます。"
    },
    {
      "indent": 0,
      "text": "4.11.3.7. Storage Mode",
      "section_title": true,
      "ja": "4.11.3.7。ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based. Chunks (typically, the unit of transfer among P2P clients) of content are stored in the cache.",
      "ja": "オブジェクトベース。コンテンツのチャンク（典型的には、P2Pクライアントの間で転送単位）がキャッシュに格納されています。"
    },
    {
      "indent": 0,
      "text": "4.12. Photo Sharing",
      "section_title": true,
      "ja": "4.12. 写真共有"
    },
    {
      "indent": 3,
      "text": "There are a growing number of popular online photo-sharing (storing) systems. For example, the Kodak Gallery system [22] serves over 60 million users and stores billions of images [23]. Other well-known examples of photo-sharing systems include Flickr [24] and ImageShack [25]. There are also a number of popular blogging",
      "ja": "人気のあるオンライン写真共有（記憶）システムの成長がいくつかあります。例えば、コダックギャラリーシステム[22] [23]画像の6000万以上のユーザーに格納億を提供しています。写真共有システムの他の周知の例は、Flickrの[24]とImageShackの[25]を含みます。人気のブログも多数あります"
    },
    {
      "indent": 3,
      "text": "services, such as Tumblr [26], that specialize in sharing large numbers of photos as well as other multimedia content (e.g., video, text, audio, etc.) as part of their service. All of these in-network storage systems utilize both free and paid subscription models.",
      "ja": "それらのサービスの一環として、写真の多数並びに他のマルチメディアコンテンツ（例えば、ビデオ、テキスト、オーディオ、等）を共有することに特化ようスキ[26]などのサービス、、。これらの中に、ネットワークストレージシステムのすべては、両方の無料と有料のサブスクリプションモデルを利用します。"
    },
    {
      "indent": 3,
      "text": "Most photo-sharing systems are based on a traditional client-server architecture. However, a minority of systems also offer a P2P mode of operation. The client-server architecture is typically based on HTTP, with a browser client and a Web server.",
      "ja": "ほとんどの写真共有システムは、従来のクライアントサーバアーキテクチャに基づいています。しかし、システムの少数派は、操作のP2Pモードを提供します。クライアントサーバアーキテクチャは、通常、ブラウザクライアントとWebサーバーと、HTTPに基づいています。"
    },
    {
      "indent": 0,
      "text": "4.12.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.12.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "Photo sharing is a very widely used (deployed) example of in-network storage where the end user has direct visibility and extensive control of the system. The typical end-user interface is through an HTTP-based Web browser.",
      "ja": "写真共有は、エンドユーザが直接視認およびシステムの広範な制御を有するにおけるネットワークストレージの非常に広く使用されている（展開）の例です。典型的なエンド・ユーザー・インターフェースは、HTTPベースのWebブラウザを介してです。"
    },
    {
      "indent": 0,
      "text": "4.12.2. Data Access Interface",
      "section_title": true,
      "ja": "4.12.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users can read (view) and write (store) photos.",
      "ja": "ユーザーが読んで（ビュー）および（店舗）の写真を書き込むことができます。"
    },
    {
      "indent": 0,
      "text": "4.12.3. Data Management Operations",
      "section_title": true,
      "ja": "4.12.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Users can delete previously stored photos.",
      "ja": "ユーザーが以前に保存された写真を削除することができます。"
    },
    {
      "indent": 0,
      "text": "4.12.4. Data Search Capability",
      "section_title": true,
      "ja": "4.12.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Users can tag photos and/or organize them using sophisticated Web photo album generators. Users can then search for objects (photos) matching desired criteria.",
      "ja": "ユーザーは写真のタグ付けおよび/または洗練されたWebフォトアルバムジェネレータを使用してそれらを整理することができます。ユーザーは、所望の基準に一致するオブジェクト（写真）を検索することができます。"
    },
    {
      "indent": 0,
      "text": "4.12.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.12.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method for clients is typically either private or public-unrestricted. For example, writing (storing) to a photo blog is typically private to the owner of the account. However, all other clients can view (read) the contents of the blog (i.e., public-unrestricted). Some photo-sharing Websites provide private access to read photos to allow sharing with a limited set of friends.",
      "ja": "クライアントのアクセス制御方法は、典型的には、プライベートまたはパブリック・無制限のどちらかです。例えば、書き込み写真ブログへ（記憶）は、アカウントの所有者に一般的にプライベートです。しかし、他のすべてのクライアントは、（読み）ブログ（すなわち、公開無制限）の内容を表示することができます。いくつかの写真共有サイトは、友人の限定セットと共有できるように写真を読み込むための専用アクセスを提供します。"
    },
    {
      "indent": 0,
      "text": "4.12.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.12.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.12.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.12.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Clients usually log on manually to a central Web page for the service and enter the appropriate information to access the desired information. The address to which the client connects is usually determined by DNS using the hostname from the provided URL.",
      "ja": "クライアントは、通常、サービスの中心的なWebページに手動でログオンし、目的の情報にアクセスするための適切な情報を入力します。クライアントが接続するアドレスは通常、提供されたURLからホスト名を使用してDNSによって決定されます。"
    },
    {
      "indent": 0,
      "text": "4.12.8. Storage Mode",
      "section_title": true,
      "ja": "4.12.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "File system (file-based). Photos are usually stored as files. They can then be organized into meta-structures (e.g., albums, galleries, etc.) using sophisticated Web photo album generators.",
      "ja": "ファイルシステム（ファイルベース）。写真は通常のファイルとして保存されます。そして、彼らは洗練されたWebフォトアルバムジェネレータを使用して、メタ構造（例えば、アルバム、ギャラリーなど）に編成することができます。"
    },
    {
      "indent": 0,
      "text": "4.13. Usenet",
      "section_title": true,
      "ja": "4.13. ユーズネット"
    },
    {
      "indent": 3,
      "text": "Usenet is a distributed Internet-based discussion (message) system. The Usenet messages are arranged as a set of \"newsgroups\" that are classified hierarchically by subject. Usenet information is distributed and stored among a large conglomeration of servers that store and forward messages to one another in so-called news feeds. Individual users may read messages from, and post messages to, a local news server typically operated by an ISP. This local server communicates with other servers and exchanges articles with them. In this fashion, the message is copied from server to server and eventually reaches every server in the network [27].",
      "ja": "ユーズネットは、分散インターネットベースのディスカッション（メッセージ）システムです。 Usenetのメッセージは、対象により階層的に分類されている「ニュースグループ」のセットとして配置されています。 Usenetの情報は、いわゆるニュースフィードにお互いにメッセージを保存し、前方のサーバの大規模な集合体の間に分散して保存されます。個々のユーザーからのメッセージを読んで、そして一般的にISPが運営するローカルニュースサーバーにメッセージを投稿することがあります。このローカルサーバーは他のサーバーと通信し、彼らとの記事を交換します。このように、メッセージはサーバからサーバにコピーし、最終的にネットワーク[27]内のすべてのサーバに到達します。"
    },
    {
      "indent": 3,
      "text": "Traditional Usenet as described above operates as a P2P network between the servers, and in a client-server architecture between the user and their local news server. The user requires a Usenet client to be installed on their computer and a Usenet server account (through their ISP). However, with the rise of Web browsers, the Usenet architecture is evolving to be Web-based. The most popular example of this is Google Groups, where Google hosts all the newsgroups and client access is via a standard HTTP-based Web browser [28].",
      "ja": "上記のように従来のユーズネットは、サーバ間のP2Pネットワークとして動作し、ユーザーとそのローカルニュースサーバ間のクライアント・サーバ・アーキテクチャインチユーザーは、自分のコンピュータと（そのISP経由）UsenetのサーバーアカウントにインストールするUsenetのクライアントが必要です。ただし、Webブラウザの立ち上がりに、Usenetのアーキテクチャは、Webベースであることを進化しています。この最も人気のある例では、Googleがすべてのニュースグループをホストし、クライアントのアクセスは、標準のHTTPベースのWebブラウザ[28]経由でGoogleグループ、です。"
    },
    {
      "indent": 0,
      "text": "4.13.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.13.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "Usenet is a historically very important and widely used (deployed) example of in-network storage in the Internet. The use of this system is rapidly declining, but efforts have been made to preserve the stored content for historical purposes.",
      "ja": "ユーズネットは、インターネットにおけるネットワーク内のストレージの歴史的に非常に重要かつ広く使われている（展開）の例です。このシステムの使用が急速に減少しているが、努力が歴史的目的のために保存されたコンテンツを保存するために行われています。"
    },
    {
      "indent": 0,
      "text": "4.13.2. Data Access Interface",
      "section_title": true,
      "ja": "4.13.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users can read and post (store) messages.",
      "ja": "ユーザーは（店舗）のメッセージを読み、投稿することができます。"
    },
    {
      "indent": 0,
      "text": "4.13.3. Data Management Operations",
      "section_title": true,
      "ja": "4.13.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Users sometimes have limited ability to delete messages that they previously posted.",
      "ja": "ユーザーは時々、彼らが以前に投稿されたメッセージを削除する機能が限られています。"
    },
    {
      "indent": 0,
      "text": "4.13.4. Data Search Capability",
      "section_title": true,
      "ja": "4.13.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Traditionally, users could manually search through the newsgroups, as they are classified hierarchically by subject. In the newer Web-based systems, there is also an automatic search capability based on key-word matches.",
      "ja": "彼らは被験者によって階層的に分類されているとして伝統的に、ユーザーが手動で、ニュースグループを検索できます。新しいWebベースのシステムでは、キー・ワードの一致に基づく自動検索機能もあります。"
    },
    {
      "indent": 0,
      "text": "4.13.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.13.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method is either public-unrestricted or private (to client members of that newsgroup).",
      "ja": "アクセス制御方法は、（そのニュースグループのクライアントのメンバーに）無制限、パブリックまたはプライベートのどちらかです。"
    },
    {
      "indent": 0,
      "text": "4.13.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.13.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.13.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.13.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Clients usually log on manually to their Usenet accounts. DNS may be used to resolve hostnames to their corresponding addresses.",
      "ja": "クライアントは通常、彼らのUsenetアカウントに手動でログオンします。 DNSは、それらに対応するアドレスにホスト名を解決するために使用することができます。"
    },
    {
      "indent": 0,
      "text": "4.13.8. Storage Mode",
      "section_title": true,
      "ja": "4.13.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "File system. Messages are usually stored as files that are then organized hierarchically by subject into newsgroups.",
      "ja": "ファイルシステム。メッセージは通常、その後のニュースグループに被験者によって階層的に編成されているファイルとして保存されます。"
    },
    {
      "indent": 0,
      "text": "4.14. Web Cache",
      "section_title": true,
      "ja": "4.14.  Webキャッシュ"
    },
    {
      "indent": 3,
      "text": "Web cache [29] has been widely deployed by many ISPs to reduce bandwidth consumption and Web access latency since the late 1990s. A Web cache can cache the Web documents (e.g., HTML pages, images) between server and client to reduce bandwidth usage, server load, and perceived lag. A Web cache server is typically shared by many clients, and stores copies of documents passing through it; subsequent requests may be satisfied from the cache if certain conditions are met.",
      "ja": "ウェブキャッシュ[29]は広く1990年代後半から、帯域幅の消費量とWebアクセスの待ち時間を減らすために、多くのISPが展開されています。 Web Cacheは、帯域幅の使用、サーバーの負荷、および認知ラグを減らすために、サーバとクライアントの間でWebドキュメント（例えば、HTMLページ、画像）をキャッシュすることができます。ウェブキャッシュサーバは、一般的に多くのクライアントによって共有され、それを通過する文書のコピーを格納しています。特定の条件が満たされた場合、後続の要求はキャッシュから満たすことができます。"
    },
    {
      "indent": 3,
      "text": "Another form of cache is a client-side cache, typically implemented in Web browsers. A client-side cache can keep a local copy of all pages recently displayed by a browser, and when the user returns to one of these Web pages, the local cached copy is reused.",
      "ja": "キャッシュの別の形態は、通常のWebブラウザに実装され、クライアント側のキャッシュ、です。クライアント側のキャッシュは、最近のブラウザで表示され、ユーザーはこれらのWebページの1に戻ったときに、ローカルにキャッシュされたコピーが再利用される全てのページのローカルコピーを維持することができます。"
    },
    {
      "indent": 3,
      "text": "A related protocol for P2P applications to use Web cache is HPTP (HTTP-based Peer to Peer) [30]. It proposes sharing chunks of P2P files/streams using HTTP with cache-control headers.",
      "ja": "P2Pアプリケーションは、Webキャッシュを使用するための関連プロトコルはHPTP（ピアするHTTPベースのピア）[30]です。これは、キャッシュ制御ヘッダをHTTPを使用してP2Pファイル/ストリームのチャンクを共有して提案しています。"
    },
    {
      "indent": 0,
      "text": "4.14.1. Applicability to DECADE",
      "section_title": true,
      "ja": "4.14.1.  DECADEへの適用性"
    },
    {
      "indent": 3,
      "text": "Web cache is a very widely used (deployed) example of in-network storage for the key Internet application of Web browsing. The existence and operation of the storage system are transparent to the end user in most cases. The content caching time is controlled by time-to-live parameters associated with the original content. The principle of Web caching is to speed up Web page reading by using (the same) content previously requested by another user to service a new user.",
      "ja": "Web CacheはWebブラウジングの主要なインターネットアプリケーションの中に、ネットワークストレージの非常に広く使用されている（展開）の例です。ストレージシステムの存在と操作は、ほとんどの場合、エンドユーザーに対して透過的です。コンテンツキャッシング時間がタイム・ツー・ライブオリジナルコンテンツに関連付けられたパラメータによって制御されます。 Webキャッシングの原則は、新しいユーザーにサービスを提供するために、以前に別のユーザによって要求された（同じ）コンテンツを使用して、Webページの読み込みを高速化することです。"
    },
    {
      "indent": 0,
      "text": "4.14.2. Data Access Interface",
      "section_title": true,
      "ja": "4.14.2. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Users explicitly read from a Web cache by making requests, but they cannot explicitly write data into it. Data is implicitly stored in the Web cache by requesting content that is not already cached and meets policy restrictions of the cache provider.",
      "ja": "ユーザーが明示的に要求を行うことで、Webキャッシュから読み込まれますが、それらは明示的にデータを書き込むことはできません。データは、暗黙のうち、既にキャッシュされ、キャッシュ・プロバイダーのポリシーの制限を満たしていないコンテンツを要求することにより、Webキャッシュに保存されます。"
    },
    {
      "indent": 0,
      "text": "4.14.3. Data Management Operations",
      "section_title": true,
      "ja": "4.14.3. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.14.4. Data Search Capability",
      "section_title": true,
      "ja": "4.14.4. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.14.5. Access Control Authorization",
      "section_title": true,
      "ja": "4.14.5. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "The access control method for clients is public-unrestricted. It is important to note that if content is authenticated or encrypted (e.g., HTTPS, Secure Socket Layer (SSL)), it will not be cached. Also, if the content is flagged as private (vs. public) at the HTTP level by the origin server, it will not be cached.",
      "ja": "クライアントのアクセス制御方法は、パブリック・無制限です。コンテンツが（例えば、HTTPS、セキュア・ソケット・レイヤー（SSL））、認証や暗号化されている場合、それがキャッシュされないことに注意することが重要です。コンテンツはオリジンサーバによってHTTPレベルで（パブリック対）プライベートとしてフラグが設定されている場合にも、それはキャッシュされません。"
    },
    {
      "indent": 0,
      "text": "4.14.6. Resource Control Interface",
      "section_title": true,
      "ja": "4.14.6. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "4.14.7. Discovery Mechanism",
      "section_title": true,
      "ja": "4.14.7. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Web caches can be transparently deployed between a Web server and Web clients, employing DPI for discovery. Alternatively, Web caches could be explicitly discovered by clients using techniques such as DNS or manual configuration.",
      "ja": "Webキャッシュを透過的発見のためのDPIを採用し、WebサーバとWebクライアントの間に配置することができます。また、Webキャッシュは明示的なDNSや手動設定などの技術を使用しているクライアントによって発見することができます。"
    },
    {
      "indent": 0,
      "text": "4.14.8. Storage Mode",
      "section_title": true,
      "ja": "4.14.8. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Object-based. Web content is keyed within the cache by HTTP Request fields, such as Method, URI, and Headers.",
      "ja": "オブジェクトベース。 Webコンテンツは、メソッド、URI、およびヘッダーとしてHTTP要求フィールドによってキャッシュ内にキー止めされています。"
    },
    {
      "indent": 0,
      "text": "4.15. Observations Regarding In-Network Storage Systems",
      "section_title": true,
      "ja": "4.15. では、ネットワークストレージシステムについての観察"
    },
    {
      "indent": 3,
      "text": "The following observations about the surveyed in-network storage systems are made in the context of DECADE as defined by [1].",
      "ja": "[1]によって定義されるような調査において、ネットワークストレージシステムは、年代の文脈で行われ、約以下の観察。"
    },
    {
      "indent": 3,
      "text": "The majority of the surveyed systems were designed for client-server architectures and do not support P2P. However, there are some important exceptions, especially for some of the newer technologies such as BranchCache and P2P cache, that do support a P2P mode of operation.",
      "ja": "調査対象のシステムの大半は、クライアント・サーバー・アーキテクチャ用に設計されたとP2Pをサポートしていません。しかし、操作のP2Pモードをサポートしています特に、BranchCacheのとP2Pのキャッシュなどの新しい技術のいくつかのためにいくつかの重要な例外が、あります。"
    },
    {
      "indent": 3,
      "text": "The P2P cache systems are interesting, since they do not require changes to the P2P applications themselves. However, this is also a limitation in that they are required to support each application protocol.",
      "ja": "彼らはP2Pのアプリケーション自体の変更を必要としないため、P2Pのキャッシュシステムは、興味深いものです。しかし、これはまた、それらが各アプリケーションプロトコルをサポートする必要があるという制約です。"
    },
    {
      "indent": 3,
      "text": "Many of the surveyed systems were designed for caching as opposed to long-term network storage. Thus, during DECADE protocol design, it should be carefully considered whether a caching mode should be supported in addition to a long-term network storage mode. There is typically a trade-off between providing a caching mode and long-term (and usually also reliable) storage with regards to some performance metrics. Note that [1] identifies issues with classical caching from a DECADE perspective, such as the fact that P2P caches typically do not allow users to explicitly control content stored in the cache.",
      "ja": "長期ネットワークストレージとは対照的に、調査対象のシステムの多くは、キャッシングのために設計されました。このように、DECADEプロトコルの設計の際には、慎重にキャッシュモードは、長期のネットワーク・ストレージ・モードに加えてサポートする必要があるかどうかを考慮しなければなりません。キャッシュモードと、いくつかのパフォーマンスメトリックに関してとの長期的な（そして通常、信頼性の高い）ストレージを提供するとの間のトレードオフは、一般的にあります。 [1]そのようなP2Pキャッシュは、典型的には、ユーザが明示的にキャッシュに格納されたコンテンツを制御することができないという事実のように、decadeの観点から、古典的なキャッシングの問題を識別することに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "Certain components of the surveyed systems are outside of the scope of DECADE. For example, a protocol used for searching across multiple DECADE servers is out of scope. However, applications may still be able to implement such functionality if DECADE exposes the appropriate primitives. This has the benefit of keeping the core in-network storage systems simple, while permitting diverse applications to design mechanisms that meet their own requirements.",
      "ja": "調査対象システムの特定の構成要素10年の範囲外です。例えば、複数DECADEサーバー間で検索するために使用されるプロトコルは範囲外です。ただし、アプリケーションはまだDECADEが適切なプリミティブを公開する場合は、このような機能を実装することができるかもしれません。これは、独自の要件を満たすメカニズムを設計するために多様なアプリケーションを可能にしながら、シンプルなコアネットワーク内のストレージシステムを維持することの利点を持っています。"
    },
    {
      "indent": 3,
      "text": "Today, most in-network storage systems follow some variant of the authorization model of public-unrestricted, public-restricted, and private. For DECADE, we may need to evolve the authorization model to support a resource owner (e.g., end user) authorization, in addition to the network authorization.",
      "ja": "今日では、ほとんどのネットワーク内のストレージシステムは、無制限の公開、公開制限、および民間の認可モデルのいくつかの変種に従ってください。 DECADEのために、私たちは、ネットワーク認証に加えて、リソースの所有者（例えば、エンドユーザー）認証をサポートするための許可モデルを進化させる必要があるかもしれません。"
    },
    {
      "indent": 0,
      "text": "5. Storage and Other Related Protocols",
      "section_title": true,
      "ja": "5.保管及びその他の関連するプロトコル"
    },
    {
      "indent": 3,
      "text": "This section surveys existing storage and other related protocols, as well as comments on the usage of these protocols to satisfy DECADE's use cases. The surveyed protocols are listed alphabetically.",
      "ja": "このセクションで調査、既存のストレージおよびその他の関連するプロトコルだけでなく、DECADEのユースケースを満たすために、これらのプロトコルの使用方法に関するコメント。調査対象のプロトコルがアルファベット順に表示されます。"
    },
    {
      "indent": 0,
      "text": "5.1. HTTP",
      "section_title": true,
      "ja": "5.1.  HTTP"
    },
    {
      "indent": 3,
      "text": "HTTP [31] is a key protocol for the World Wide Web. It is a stateless client-server protocol that allows applications to be designed using the REST model. HTTP is often associated with downloading (reading) content from Web servers to Web browsers, but it also has support for uploading (writing) content to Web servers. It has been used as the underlying protocol for other protocols, such as Web Distributed Authoring and Versioning (WebDAV).",
      "ja": "HTTP [31]は、ワールド・ワイド・ウェブのための重要なプロトコルです。これは、アプリケーションがRESTのモデルを使用して設計することを可能にするステートレスクライアント・サーバ・プロトコルです。 HTTPは、多くの場合、WebブラウザにWebサーバーから（読み）コンテンツをダウンロードするに関連付けられているが、それはまた、Webサーバーへのアップロード（書き込み）コンテンツをサポートしています。それは、Web分散オーサリングとバージョン管理（WebDAV）のような他のプロトコルの基礎となるプロトコルとして使用されてきました。"
    },
    {
      "indent": 3,
      "text": "HTTP is used in some of the most popular in-network storage systems surveyed previously, including CDNs, photo sharing, and Web cache. Usage of HTTP by a storage protocol implies that no extra software is required in the client (i.e., Web-based client), as all standard Web browsers are based on HTTP.",
      "ja": "HTTPはのCDN、写真共有、およびWebキャッシュを含む、以前に調査し、最も人気のある中・ネットワーク・ストレージ・システムの一部で使用されています。ストレージプロトコルによるHTTPの使用は、すべての標準WebブラウザがHTTPに基づいているように余分なソフトウェアは、クライアント（つまり、Webベースのクライアント）に必要とされないことを意味します。"
    },
    {
      "indent": 0,
      "text": "5.1.1. Data Access Interface",
      "section_title": true,
      "ja": "5.1.1. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Basic read and write operations are supported (using HTTP GET, PUT, and POST methods).",
      "ja": "基本的な読み取りおよび書き込み動作は、（HTTP GET、PUTを使用して、POSTメソッド）サポートされています。"
    },
    {
      "indent": 0,
      "text": "5.1.2. Data Management Operations",
      "section_title": true,
      "ja": "5.1.2. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.1.3. Data Search Capability",
      "section_title": true,
      "ja": "5.1.3. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.1.4. Access Control Authorization",
      "section_title": true,
      "ja": "5.1.4. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control for clients are supported: public-unrestricted, public-restricted, and private.",
      "ja": "クライアントに対するアクセス制御のすべてのメソッドがサポートされています：制限-パブリック、プライベート、パブリック、無制限。"
    },
    {
      "indent": 3,
      "text": "The majority of Web pages are public-unrestricted in terms of reading but do not allow any uploading of content. In-network storage systems range from private or public-unrestricted for photo sharing (described in Section 4.12.5) to public-unrestricted for Web caching (described in Section 4.14.5).",
      "ja": "Webページの大多数は、読書の面で公開制限はありませんが、コンテンツの任意のアップロードを許可していません。では、ネットワークストレージシステムは、（セクション4.14.5で説明）Webキャッシングのためのパブリック無制限に（セクション4.12.5で説明）写真共有のためのプライベートまたはパブリック・無制限の範囲です。"
    },
    {
      "indent": 0,
      "text": "5.1.5. Resource Control Interface",
      "section_title": true,
      "ja": "5.1.5. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.1.6. Discovery Mechanism",
      "section_title": true,
      "ja": "5.1.6. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Manual configuration is typically used. Clients typically address HTTP servers by providing a hostname, which is resolved to an address using DNS.",
      "ja": "マニュアルの構成は、一般的に使用されています。クライアントは通常、DNSを使用してアドレスに解決されるホスト名を、提供することで、HTTPサーバに取り組みます。"
    },
    {
      "indent": 0,
      "text": "5.1.7. Storage Mode",
      "section_title": true,
      "ja": "5.1.7. ストレージモード"
    },
    {
      "indent": 3,
      "text": "HTTP is a protocol; it thus does not define a storage mode. However, a non-collection resource can typically be thought of as a \"file\". These files may be organized into collections, which typically map onto the HTTP path hierarchy, creating the illusion of a file system.",
      "ja": "HTTPプロトコルです。それは、このようにストレージモードを定義していません。しかし、非コレクションリソースは、典型的には、「ファイル」と考えることができます。これらのファイルは、ファイルシステムの錯覚を作成し、一般的にHTTPパス階層にマッピングコレクションに編成することができます。"
    },
    {
      "indent": 0,
      "text": "5.1.8. Comments",
      "section_title": true,
      "ja": "5.1.8. 注釈"
    },
    {
      "indent": 3,
      "text": "HTTP is based on a client-server architecture and thus is not directly applicable for the DECADE focus on P2P. Also, HTTP offers only a rudimentary toolset for storage operations compared to some of the other storage protocols.",
      "ja": "HTTPは、クライアントサーバーアーキテクチャに基づくため、P2P上DECADEフォーカスのための直接適用ではありません。また、HTTPは、他のストレージプロトコルの一部に比べてストレージ操作のための唯一の初歩的なツールセットを提供しています。"
    },
    {
      "indent": 0,
      "text": "5.2. iSCSI",
      "section_title": true,
      "ja": "5.2.  iSCSIの"
    },
    {
      "indent": 3,
      "text": "Small Computer System Interface (SCSI) is a set of protocols enabling communication with storage devices such as disk drives and tapes; Internet SCSI (iSCSI) [32] is a protocol enabling SCSI commands to be sent over TCP. As in SCSI, iSCSI allows an Initiator to send commands to a Target. These commands operate on the device level as opposed to individual data objects stored on the device.",
      "ja": "小型コンピュータシステムインタフェース（SCSI）は、ディスク・ドライブやテープなどの記憶装置との通信を可能にするプロトコルのセットです。インターネットSCSI（iSCSIの）[32]はTCPを介して送信されるSCSIコマンドを可能にするプロトコルです。 SCSIの場合と同様に、iSCSIは、イニシエータがターゲットにコマンドを送信することができます。デバイス上に格納された個々のデータオブジェクトとは対照的に、これらのコマンドは、デバイス・レベルで動作します。"
    },
    {
      "indent": 0,
      "text": "5.2.1. Data Access Interface",
      "section_title": true,
      "ja": "5.2.1. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Read and write commands indicate which data is to be read or written by specifying the offset (using Logical Block Addressing) into the storage device. The size of data to be read or written is an additional parameter in the command.",
      "ja": "読み取りおよび書き込みコマンドを記憶装置に（アドレッシング論理ブロックを使用して）オフセットを指定して読み書きすべきデータを示します。読み取りまたは書き込まれるデータのサイズは、コマンドに付加的なパラメータです。"
    },
    {
      "indent": 0,
      "text": "5.2.2. Data Management Operations",
      "section_title": true,
      "ja": "5.2.2. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Since commands operate at the device level, management operations are different than with traditional file systems. Management commands for SCSI/iSCSI include explicit device control commands, such as starting, stopping, and formatting the device.",
      "ja": "コマンドは、デバイスレベルで動作するため、管理操作は、従来のファイルシステムとは異なります。 SCSI / iSCSI用の管理コマンドは、起動、停止、およびデバイスのフォーマットとして、明示的なデバイス制御コマンドが含まれます。"
    },
    {
      "indent": 0,
      "text": "5.2.3. Data Search Capability",
      "section_title": true,
      "ja": "5.2.3. データ検索機能"
    },
    {
      "indent": 3,
      "text": "SCSI/iSCSI does not provide the ability to search for particular data within a device. Note that such capabilities can be implemented outside of iSCSI.",
      "ja": "SCSI / iSCSIは、デバイス内の特定のデータを検索する機能を提供していません。そのような能力がiSCSIの外で実施することができることに注意してください。"
    },
    {
      "indent": 0,
      "text": "5.2.4. Access Control Authorization",
      "section_title": true,
      "ja": "5.2.4. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "With respect to access to devices, the access control method is private. iSCSI uses the Challenge Handshake Authentication Protocol (CHAP) [33] to authenticate Initiators and Targets when accessing storage devices. However, since SCSI/iSCSI operates at the device level, neither authentication nor authorization is provided for individual data objects. Note that such capabilities can be implemented outside of iSCSI.",
      "ja": "デバイスへのアクセスに関しては、アクセス制御方法は、プライベートです。 iSCSIは、ストレージデバイスにアクセスするときにイニシエータとターゲットを認証するために、チャレンジハンドシェイク認証プロトコル（CHAP）[33]を使用します。 SCSI / iSCSIは、デバイスレベルで動作するので、どちらの認証も許可は、個々のデータオブジェクトのために提供されます。そのような能力がiSCSIの外で実施することができることに注意してください。"
    },
    {
      "indent": 0,
      "text": "5.2.5. Resource Control Interface",
      "section_title": true,
      "ja": "5.2.5. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.2.6. Discovery Mechanism",
      "section_title": true,
      "ja": "5.2.6. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Manual configuration may be used. An alternative is the Internet Storage Name Service (iSNS) [34], which provides the ability to discover available storage resources.",
      "ja": "手動設定を使用することができます。代替が可能なストレージリソースを検出する機能を提供するインターネットストレージネームサービス（iSNS）[34]、です。"
    },
    {
      "indent": 0,
      "text": "5.2.7. Storage Mode",
      "section_title": true,
      "ja": "5.2.7. ストレージモード"
    },
    {
      "indent": 3,
      "text": "As a protocol, iSCSI does not explicitly have a storage mode. However, it provides block-based access to clients. SCSI/iSCSI provides an Initiator with block-level access to the storage device.",
      "ja": "プロトコルとして、iSCSIは、明示的にストレージモードを持っていません。しかし、それはクライアントへのブロックベースのアクセスを提供します。 SCSI / iSCSIは、記憶装置にブロックレベルアクセスのイニシエータを提供します。"
    },
    {
      "indent": 0,
      "text": "5.3. NFS",
      "section_title": true,
      "ja": "Kh.a.同じ"
    },
    {
      "indent": 3,
      "text": "The Network File System (NFS) is designed to allow users to access files over a network in a manner similar to how local storage is accessed. NFS is typically used in local area networks or in enterprise settings, though changes made in later versions of NFS (e.g., [35]) make it easier to operate over the Internet.",
      "ja": "ネットワークファイルシステム（NFS）は、ユーザーがアクセスされたか、ローカルストレージと同様にネットワーク経由でファイルにアクセスできるように設計されています。 NFSのそれ以降のバージョン（例えば、[35]）で行われた変更は、それが簡単にインターネット上で動作するようにするのにNFSは、典型的には、ローカル・エリア・ネットワークまたは企業の設定で使用されています。"
    },
    {
      "indent": 0,
      "text": "5.3.1. Data Access Interface",
      "section_title": true,
      "ja": "5.3.1. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Traditional file-system operations such as read, write, and update (overwrite) are provided. Locking is provided to support concurrent access by multiple clients.",
      "ja": "このような読み出し、書き込み、更新（上書き）のような従来のファイルシステムの動作が提供されます。ロックは、複数のクライアントによる同時アクセスをサポートするために提供されます。"
    },
    {
      "indent": 0,
      "text": "5.3.2. Data Management Operations",
      "section_title": true,
      "ja": "5.3.2. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Traditional file-system operations such as move and delete are provided.",
      "ja": "このような動きや削除などの伝統的なファイルシステムの操作が用意されています。"
    },
    {
      "indent": 0,
      "text": "5.3.3. Data Search Capability",
      "section_title": true,
      "ja": "5.3.3. データ検索機能"
    },
    {
      "indent": 3,
      "text": "The user has the ability to list contents of directories to find filenames matching desired criteria.",
      "ja": "ユーザは、所望の条件に一致するファイル名を見つけるために、ディレクトリの内容を一覧表示する機能を備えています。"
    },
    {
      "indent": 0,
      "text": "5.3.4. Access Control Authorization",
      "section_title": true,
      "ja": "5.3.4. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control for clients are supported: public-unrestricted, public-restricted, and private. For example, files and directories can be protected using read, write, and execute permissions for the files' owner and group, and for the public (others). Also, NFSv4.1 has a rich ACL model allowing a list of Access Control Entries (ACEs) to be configured for each file or directory. The ACEs can specify per-user read/write access to file data, file/directory attributes, creation/deletion of files in a directory, etc.",
      "ja": "クライアントに対するアクセス制御のすべてのメソッドがサポートされています：制限-パブリック、プライベート、パブリック、無制限。たとえば、ファイルやディレクトリは、読み取り、書き込み、およびファイルの所有者とグループのための、およびパブリック（その他）の実行権限を使用して保護することができます。また、NFSv4.1は、アクセス制御エントリ（ACE）のリストは、各ファイルまたはディレクトリ用に設定することができる豊富なACLモデルを持っています。 ACEは、ファイル等のデータ、ファイル/ディレクトリの属性、ディレクトリ内のファイルの作成/削除、に、ユーザーごとの読み取り/書き込みアクセスを指定することができます"
    },
    {
      "indent": 0,
      "text": "5.3.5. Resource Control Interface",
      "section_title": true,
      "ja": "5.3.5. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "While disk space quotas can be configured, administrative policy typically limits the total amount of storage allocated to a particular user. User control of bandwidth and connections used by remote peers is not provided.",
      "ja": "ディスクスペースクォータを構成することができるが、管理ポリシーは、典型的には、特定のユーザに割り当てられたストレージの総量を制限します。リモートピアが使用する帯域幅や接続のユーザーコントロールが提供されていません。"
    },
    {
      "indent": 0,
      "text": "5.3.6. Discovery Mechanism",
      "section_title": true,
      "ja": "5.3.6. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Manual configuration is typically used. Clients address NFS servers by providing a hostname and a directory that should be mounted. DNS may be used to look up an address for the provided hostname.",
      "ja": "マニュアルの構成は、一般的に使用されています。クライアントは、ホスト名とマウントされるディレクトリを提供することにより、NFSサーバに対応しています。 DNSは、提供hostnameのアドレスを検索するために使用することができます。"
    },
    {
      "indent": 0,
      "text": "5.3.7. Storage Mode",
      "section_title": true,
      "ja": "5.3.7. ストレージモード"
    },
    {
      "indent": 3,
      "text": "As a protocol, there is no defined internal storage mode. However, implementations typically use the underlying file-system storage. Note that extensions have been defined for alternate storage modes (e.g., block-based [36] and object-based [37]).",
      "ja": "プロトコルとして、何ら規定される内部ストレージモードは存在しません。しかし、実装は通常、基礎となるファイル・システム・ストレージを使用しています。拡張機能は代替ストレージモードに対して定義されていることに留意されたい（例えば、ブロック・ベースの[36]とオブジェクトベースの[37]）。"
    },
    {
      "indent": 0,
      "text": "5.3.8. Comments",
      "section_title": true,
      "ja": "5.3.8. 注釈"
    },
    {
      "indent": 3,
      "text": "The efficiency and scalability of the NFS access control method are concerns in the context of DECADE. In particular, Section 6.2.1 of [35] states that:",
      "ja": "NFSアクセス制御方法の効率およびスケーラビリティ10年の文脈における関心事です。具体的には、[35]のセクション6.2.1と述べています。"
    },
    {
      "indent": 6,
      "text": "Only ACEs that have a \"who\" that matches the requester are considered.",
      "ja": "依頼者と一致した「」持っている唯一のACEが考慮されます。"
    },
    {
      "indent": 3,
      "text": "Thus, in the context of DECADE, to specify per-peer access control policies for an object, a client would need to explicitly configure the ACL for the object for each individual peer. A concern with this approach is scalability when a client's peers may change frequently, and ACLs for many small objects need to be updated constantly during participation in a swarm.",
      "ja": "このように、DECADEの文脈では、オブジェクトごとのピアアクセス制御ポリシーを指定するには、クライアントが明示的に個々のピアのためのオブジェクトのACLを設定する必要があります。クライアントのピアが頻繁に変更される場合があり、このアプローチでの懸念は、スケーラビリティであり、多くの小さなオブジェクトのACLは、群れの参加中に定期的に更新する必要があります。"
    },
    {
      "indent": 3,
      "text": "Note that NFSv4.1's usage of RPCSEC_GSS provides support for multiple security mechanisms. Kerberos V5 is required, but others, such as X.509 certificates, are also supported by way of the Generic Security Service Application Program Interface (GSS-API). Note, however, that NFSv4.1's usage of such security mechanisms is limited to linking a requesting user to a particular account maintained by the NFS server.",
      "ja": "RPCSEC_GSSのNFSv4.1の使用量が複数のセキュリティ・メカニズムのためのサポートを提供することに注意してください。ケルベロスV5が必要とされるが、このようなX.509証明書などの他は、また、一般的なセキュリティサービスアプリケーションプログラムインタフェース（GSS-API）によってサポートされています。このようなセキュリティ・メカニズムのNFSv4.1の使用量がNFSサーバによって維持され、特定のアカウントに要求しているユーザーをリンクに制限されていること、しかし、注意してください。"
    },
    {
      "indent": 0,
      "text": "5.4. OAuth",
      "section_title": true,
      "ja": "5.4.  OAuthの"
    },
    {
      "indent": 3,
      "text": "Open Authorization (OAuth) [38] is a protocol that enriches the traditional client-server authentication model for Web resources. In particular, OAuth distinguishes the \"client\" from the \"resource owner\", thus enabling a resource owner to authorize a particular client for access (e.g., for a particular lifetime) to private resources.",
      "ja": "オープン認証（OAuthの）[38]はWebリソースのための従来のクライアントサーバ認証モデルを豊かにするプロトコルです。具体的には、OAuthのプライベートリソースに（特定の生涯の例えば、）このようにしてアクセスするために特定のクライアントを認証するためにリソースの所有者を可能にする「リソース所有者」から「クライアント」を区別する。"
    },
    {
      "indent": 3,
      "text": "We include OAuth in this survey so that its authentication model can be evaluated in the context of DECADE. OAuth itself, however, is not a network storage protocol.",
      "ja": "その認証モデルがDECADEのコンテキストで評価することができるように私たちは、この調査ではOAuthが含まれます。 OAuthの自体は、しかしながら、ネットワーク・ストレージ・プロトコルではありません。"
    },
    {
      "indent": 0,
      "text": "5.4.1. Data Access Interface",
      "section_title": true,
      "ja": "5.4.1. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.4.2. Data Management Operations",
      "section_title": true,
      "ja": "5.4.2. データ管理操作"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.4.3. Data Search Capability",
      "section_title": true,
      "ja": "5.4.3. データ検索機能"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.4.4. Access Control Authorization",
      "section_title": true,
      "ja": "5.4.4. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "Not provided. While similar in spirit to the WebDAV ticketing extensions [39], OAuth instead uses the following process: (1) a client constructs a delegation request, (2) the client forwards the request to the resource owner for authorization, (3) the resource owner authorizes the request, and finally (4) a callback is made to the client indicating that its request has been authorized.",
      "ja": "提供されていない。 [39]のWebDAVチケット拡張と精神に類似しているが、OAuthの代わりに、以下のプロセスを使用して：（1）クライアントが委譲リクエストを構築、（2）クライアントは、認可のためのリソースの所有者に要求を転送し、（3）リソース所有者がリクエストを承認し、最後に（4）コールバックは、その要求が許可されたことを示すクライアントになされます。"
    },
    {
      "indent": 3,
      "text": "Once the process is complete, the client has a set of token credentials that grant it access to the protected resource. The token credentials may have an expiration time, and they can also be revoked by the resource owner at any time.",
      "ja": "プロセスが完了すると、クライアントはそれを保護されたリソースへのアクセスを許可トークンの資格情報のセットを持っています。トークンの資格情報は、有効期限を持っていること、そして彼らはまた、任意の時点でのリソースの所有者によって取り消すことができます。"
    },
    {
      "indent": 0,
      "text": "5.4.5. Resource Control Interface",
      "section_title": true,
      "ja": "5.4.5. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.4.6. Discovery Mechanism",
      "section_title": true,
      "ja": "5.4.6. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.4.7. Storage Mode",
      "section_title": true,
      "ja": "5.4.7. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Not provided.",
      "ja": "提供されていない。"
    },
    {
      "indent": 0,
      "text": "5.4.8. Comments",
      "section_title": true,
      "ja": "5.4.8. 注釈"
    },
    {
      "indent": 3,
      "text": "The ticketing mechanism requires server involvement, and the discussion relating to WebDAV's proposed ticketing mechanism (see Section 5.5.8) applies here as well.",
      "ja": "発券機序は、サーバの関与を必要とし、およびWebDAVの提案チケットメカニズム（セクション5.5.8を参照）に関連する議論はここにも適用されます。"
    },
    {
      "indent": 0,
      "text": "5.5. WebDAV",
      "section_title": true,
      "ja": "5.5.  WebDAVの"
    },
    {
      "indent": 3,
      "text": "WebDAV [40] is a protocol designed for Web content authoring. It is developed as an extension to HTTP (described in Section 5.1), meaning that it can be simpler to integrate into existing software. WebDAV supports traditional operations for reading/writing from storage, as well as other constructs, such as locking and collections, that are important when multiple users collaborate to author or edit a set of documents.",
      "ja": "WebDAVは、[40] Webコンテンツオーサリングのために設計されたプロトコルです。それは、既存のソフトウェアに統合する方が簡単であることができることを意味、（セクション5.1で説明）HTTPの拡張として開発されています。 WebDAVは、ストレージからの書き込み/読み込みだけでなく、複数のユーザーがドキュメントのセットをオーサリングまたは編集するために協力する際に​​重要で、このようなロックやコレクションなど、他の構造、のための伝統的な操作をサポートしています。"
    },
    {
      "indent": 0,
      "text": "5.5.1. Data Access Interface",
      "section_title": true,
      "ja": "5.5.1. データ・アクセス・インタフェース"
    },
    {
      "indent": 3,
      "text": "Traditional read and write operations are supported (using HTTP GET and PUT methods, respectively). Locking is provided to support concurrent access by multiple clients.",
      "ja": "伝統的な読み出し及び書き込み動作を（それぞれ、HTTP GETおよびPUT方法を使用して）支持されています。ロックは、複数のクライアントによる同時アクセスをサポートするために提供されます。"
    },
    {
      "indent": 0,
      "text": "5.5.2. Data Management Operations",
      "section_title": true,
      "ja": "5.5.2. データ管理操作"
    },
    {
      "indent": 3,
      "text": "WebDAV supports traditional file-system operations, such as move, delete, and copy. Objects are organized into collections, and these operations can also be performed on collections. WebDAV also allows objects to have user-defined properties.",
      "ja": "WebDAVは、このような移動、削除、コピーなどの伝統的なファイルシステムの操作をサポートしています。オブジェクトはコレクションに編成されており、これらの操作はまた、コレクションに対して実行することができます。 WebDAVはまた、オブジェクトは、ユーザー定義のプロパティを持つことができます。"
    },
    {
      "indent": 0,
      "text": "5.5.3. Data Search Capability",
      "section_title": true,
      "ja": "5.5.3. データ検索機能"
    },
    {
      "indent": 3,
      "text": "The user has the ability to list contents of collections to find objects matching desired criteria. A SEARCH extension [41] has also been specified allowing listing of objects matching client-defined criteria.",
      "ja": "ユーザは、所望の条件に一致するオブジェクトを見つけるために、コレクションの内容を一覧表示する機能を備えています。 SEARCH延長[41]は、クライアントが定義した基準に一致するオブジェクトのリストを可能に指定されています。"
    },
    {
      "indent": 0,
      "text": "5.5.4. Access Control Authorization",
      "section_title": true,
      "ja": "5.5.4. アクセス制御の許可"
    },
    {
      "indent": 3,
      "text": "All methods of access control for clients are supported: public-unrestricted, public-restricted, and private.",
      "ja": "クライアントに対するアクセス制御のすべてのメソッドがサポートされています：制限-パブリック、プライベート、パブリック、無制限。"
    },
    {
      "indent": 3,
      "text": "For example, an ACL extension [42] is provided for WebDAV. ACLs allow both user-based and group-based access control policies (relating to reading, writing, properties, locking, etc.) to be defined for objects and collections.",
      "ja": "たとえば、ACLの拡張[42] WebDAVのために提供されます。 ACLは、ユーザベースおよびグループベースのアクセス制御（読み取り、書き込み、プロパティ、ロック、などに関する）ポリシーの両方が、オブジェクトおよびコレクションのために定義されることを可能にします。"
    },
    {
      "indent": 3,
      "text": "A ticketing extension [39] has also been proposed, but has not progressed since 2001. This extension allows a client to request the WebDAV server to create a \"ticket\" (e.g., for reading an object) that can be distributed to other clients. Tickets may be given expiration times, or may only allow for a fixed number of uses. The proposed extension requires the server to generate tickets and maintain state for outstanding tickets.",
      "ja": "発券拡張[39]も提案されているが、この拡張は、クライアントが他のクライアントに配布することができる（例えば、オブジェクトを読み取るため）、「チケット」を作成するWebDAVサーバに要求することを可能に2001年から進んでいません。チケットは、有効期限を与えることができる、または使用する一定数だけを可能にすることができます。提案されている拡張子はチケットを生成し、優れたチケットの状態を維持するためのサーバが必要です。"
    },
    {
      "indent": 0,
      "text": "5.5.5. Resource Control Interface",
      "section_title": true,
      "ja": "5.5.5. リソース制御インターフェース"
    },
    {
      "indent": 3,
      "text": "An extension [43] allows disk space quotas to be configured for collections. The extension also allows WebDAV clients to query current disk space usage. User control of bandwidth and connections used by remote peers is not provided.",
      "ja": "拡張[43]ディスクスペースクォータがコレクションのために構成されることを可能にします。拡張子はまた、WebDAVクライアントは、現在のディスク使用量を照会することができます。リモートピアが使用する帯域幅や接続のユーザーコントロールが提供されていません。"
    },
    {
      "indent": 0,
      "text": "5.5.6. Discovery Mechanism",
      "section_title": true,
      "ja": "5.5.6. ディスカバリーメカニズム"
    },
    {
      "indent": 3,
      "text": "Manual configuration is typically used. Clients address WebDAV servers by providing a hostname, which can be resolved to an address using DNS.",
      "ja": "マニュアルの構成は、一般的に使用されています。クライアントは、DNSを使用してアドレスに解決できるホスト名を、提供することで、WebDAVサーバに取り組みます。"
    },
    {
      "indent": 0,
      "text": "5.5.7. Storage Mode",
      "section_title": true,
      "ja": "5.5.7. ストレージモード"
    },
    {
      "indent": 3,
      "text": "Though no storage mode is explicitly defined, WebDAV can be thought of as providing file system (file-based) storage to a client. A non-collection resource can typically be thought of as a \"file\". Files may be organized into collections, which typically map onto the HTTP path hierarchy.",
      "ja": "何のストレージモードが明示的に定義されていないものの、WebDAVは、クライアントへのファイルシステム（ファイルベース）のストレージを提供するものとして考えることができます。非コレクションリソースは、典型的には、「ファイル」と考えることができます。ファイルは通常、HTTPパス階層にマッピングコレクションに編成することができます。"
    },
    {
      "indent": 0,
      "text": "5.5.8. Comments",
      "section_title": true,
      "ja": "5.5.8. 注釈"
    },
    {
      "indent": 3,
      "text": "The efficiency and scalability of the WebDAV access control method are concerns in the context of DECADE, for reasons similar to those stated in Section 5.3.8 for NFS. The proposed WebDAV ticketing extension partially alleviates these concerns, but the particular technique may need further evaluation before being applied to DECADE. In particular, since DECADE clients may continuously upload/download a large number of small-size objects, and a single DECADE server may need to scale to many concurrent DECADE clients, requiring the server to maintain ticket state and generate tickets may not be the best design choice. Server-generated tickets can also increase latency for data transport operations, depending on the message flow used by DECADE.",
      "ja": "WebDAVアクセス制御方法の効率とスケーラビリティはNFSについては、セクション5.3.8に記載されたものと同様の理由で年代の文脈において問題です。提案されたWebDAVチケット拡張は、部分的にこれらの問題を軽減するが、特定の技術10年に適用される前にさらなる評価を必要とするかもしれません。具体的には、DECADEクライアントが継続的に小さなサイズの多数のオブジェクトをダウンロード/アップロードしてもよいし、単一DECADEサーバは、チケットの状態を維持し、チケットを生成するためにサーバを必要とすることは最善ではないかもしれないが、多くの同時DECADEクライアントに拡張する必要がある場合がありますので、設計上の選択。サーバが生成したチケットはまたDECADEによって使用されるメッセージの流れに応じて、データ転送操作のための待ち時間を増加させることができます。"
    },
    {
      "indent": 0,
      "text": "5.6. Observations Regarding Storage and Related Protocols",
      "section_title": true,
      "ja": "5.6. ストレージおよび関連プロトコルに関する所見"
    },
    {
      "indent": 3,
      "text": "The following observations about the surveyed storage and related protocols are made in the context of DECADE as defined by [1].",
      "ja": "[1]によって定義されるように調査ストレージ及び関連プロトコルに関する以下の観察が年代の文脈で行われます。"
    },
    {
      "indent": 3,
      "text": "All of the surveyed protocols were primarily designed for client-server architectures and not for P2P. However, it is conceivable that some of the protocols could be adapted to work in a P2P architecture.",
      "ja": "調査対象のすべてのプロトコルは、主にクライアント・サーバ・アーキテクチャではなくP2Pのために設計されていました。しかし、プロトコルの一部はP2Pアーキテクチャで動作するように適合させることができると考えられます。"
    },
    {
      "indent": 3,
      "text": "Several popular in-network storage systems today use HTTP as their key protocol, even though it is not classically considered as a storage protocol. HTTP is a stateless protocol that is used to design RESTful applications. HTTP is a well-supported and widely implemented protocol that can provide important insights for DECADE.",
      "ja": "いくつかの一般的で、ネットワークストレージシステム、今日はそれが古典的にストレージプロトコルとして考慮されていなくても、そのキープロトコルとしてHTTPを使用しています。 HTTPは、RESTfulなアプリケーションを設計するために使用されるステートレスなプロトコルです。 HTTPはDECADEのための重要な洞察を提供することができ、十分にサポートされており、広く実装されたプロトコルです。"
    },
    {
      "indent": 3,
      "text": "The majority of the surveyed protocols do not support low-latency access for applications such as live streaming. This was one of the key general requirements for DECADE.",
      "ja": "調査対象のプロトコルの大半は、ライブストリーミングなどのアプリケーションのための低レイテンシのアクセスをサポートしていません。これはDECADEのための重要な一般的な要件の一つでした。"
    },
    {
      "indent": 3,
      "text": "The majority of the surveyed protocols do not support any form of resource control interface. Resource control is required for users to manage the resources on in-network storage systems, e.g., the bandwidth or connections, that can be used by other peers. Resource control is a key capability required for DECADE.",
      "ja": "調査対象のプロトコルの大半は、リソース制御インターフェースのいずれかの形式をサポートしていません。ユーザは、例えば、ネットワーク内のストレージシステム上の他のピアが使用できる帯域幅または接続を、リソースを管理するリソース制御が必要です。リソース制御がDECADEのために必要な重要な機能です。"
    },
    {
      "indent": 3,
      "text": "Nearly all surveyed protocols did, however, support the following capabilities required for DECADE: ability of the user to read/write content, some form of access control, some form of error indication, and the ability to traverse firewalls and NATs.",
      "ja": "ほぼすべての調査対象のプロトコルは、しかし、DECADEのために必要な以下の機能をサポートしていました：/書き込み内容を読んするユーザの能力、アクセス制御、エラー表示のいくつかのフォーム、およびファイアウォールやNATのをトラバースする機能のいくつかのフォームを。"
    },
    {
      "indent": 0,
      "text": "6. Conclusions",
      "section_title": true,
      "ja": "6.結論"
    },
    {
      "indent": 3,
      "text": "Though there have been many successful in-network storage systems, they have been designed for use cases different from those defined in DECADE. For example, many of the surveyed in-network storage systems and protocols were designed for client-server architectures and not P2P. No surveyed system or protocol has the functionality and features to fully meet the set of requirements defined for DECADE. DECADE aims to provide a standard protocol for P2P applications and content providers to access and control in-network storage, resulting in increased network efficiency while retaining control over content shared with peers. Additionally, defining a standard protocol can reduce the complexity of in-network storage, since multiple P2P application protocols no longer need to be implemented by in-network storage systems.",
      "ja": "多くの成功で、ネットワークストレージシステムが存在しているが、彼らはDECADEで定義されたものとは異なるユースケースのために設計されています。例えば、調査対象で、ネットワークストレージシステム及びプロトコルの多くは、クライアント - サーバ・アーキテクチャではなくP2Pのために設計されていました。いかなる調査システムやプロトコルが完全にDECADEのために定義された一連の要件を満たすための機能と特徴を持っていません。 DECADEはピアと共有コンテンツに対する制御を維持しながら増加し、ネットワーク効率をもたらす、アクセスおよび制御で、ネットワークストレージへのP2Pアプリケーションとコンテンツプロバイダのための標準プロトコルを提供することを目的とします。複数のP2Pアプリケーションプロトコルがもはやネットワーク内のストレージシステムによって実現する必要はないので、さらに、標準的なプロトコルを定義することは、ネットワーク内のストレージの複雑さを低減することができます。"
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document is a survey of existing in-network storage systems, and does not introduce any security considerations beyond those of the surveyed systems.",
      "ja": "この文書では、既存のネットワーク内のストレージシステムの調査で、調査対象のシステムのそれらを超えてどのようなセキュリティ上の考慮事項を導入しません。"
    },
    {
      "indent": 3,
      "text": "For more information on security considerations of DECADE, see [1].",
      "ja": "DECADEのセキュリティに関する考慮事項の詳細については、[1]を参照してください。"
    },
    {
      "indent": 0,
      "text": "8. Contributors",
      "section_title": true,
      "ja": "8.協力者"
    },
    {
      "indent": 3,
      "text": "The editors would like to thank the following people for contributing to the development of this document:",
      "ja": "編集者は、この文書の発展に貢献するために、以下の人々に感謝したいと思います："
    },
    {
      "indent": 3,
      "text": "- ZhiHui Lv",
      "ja": " -  ZこんにちはホイLV"
    },
    {
      "indent": 3,
      "text": "- Borje Ohlman",
      "ja": " -  Borje Ohlman"
    },
    {
      "indent": 3,
      "text": "- Pang Tao",
      "ja": " - ナイトピープル"
    },
    {
      "indent": 3,
      "text": "- Lucy Yong",
      "ja": " - ルーシー・ヨンジュン"
    },
    {
      "indent": 3,
      "text": "- Juan Carlos Zuniga",
      "ja": " - フアン・カルロス・スニガ"
    },
    {
      "indent": 0,
      "text": "9. Acknowledgments",
      "section_title": true,
      "ja": "9.謝辞"
    },
    {
      "indent": 3,
      "text": "The editors would like to thank the following people for providing valuable comments to various draft versions of this document: David Bryan, Tao Mao, Haibin Song, Ove Strandberg, Yu-Shun Wang, Richard Woundy, Yunfei Zhang, and Ning Zong.",
      "ja": "デヴィッド・ブライアン、タオ真央、海浜ソング、オベStrandberg、ゆう旬王、リチャードWoundy、Yunfei張、および寧宗：編集者は、この文書の様々なドラフトバージョンに貴重なコメントを提供するために、以下の人々に感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "10. Informative References",
      "section_title": true,
      "ja": "10.参考文献"
    },
    {
      "indent": 3,
      "text": "[1] Song, H., Zong, N., Yang, Y., and R. Alimi, \"DECoupled Application Data Enroute (DECADE) Problem Statement\", Work in Progress, October 2011.",
      "ja": "[1]歌、H.、宗、N.、ヤン、Y.、およびR. Alimiは、進歩、2011年10月に、ワーク \"アプリケーションデータ道中（DECADE）問題文をデカップリング\"。"
    },
    {
      "indent": 3,
      "text": "[2] Storage Search, \"Flash Memory vs. Hard Disk Drives -- Which Will Win?\", <http://www.storagesearch.com/semico-art1.html>.",
      "ja": "[2]ストレージ検索は、「ハードディスク対フラッシュメモリドライブ - ？勝つであろう」、<http://www.storagesearch.com/semico-art1.html>。"
    },
    {
      "indent": 3,
      "text": "[3] Brisken, W., \"Hard Drive Price Trends\", US VLBI Technical Meeting, May 2008.",
      "ja": "[3] Brisken、W.、 \"ハードドライブの価格動向\"、米VLBI技術会議、2008年5月。"
    },
    {
      "indent": 3,
      "text": "[4] Woundy, R., \"TSV P2P Efforts -- From an ISP's Perspective\", IETF 81, Quebec, Canada, July 2011, <http://www.ietf.org/proceedings/81/slides/tsvarea-3.pdf>.",
      "ja": "[4] Woundy、R.、 \"TSV P2Pの取り組み -  ISPの視点から\"、IETF 81、ケベック州、カナダ、2011年7月、<http://www.ietf.org/proceedings/81/slides/tsvarea-3 .PDF>。"
    },
    {
      "indent": 3,
      "text": "[5] Gu, Y., Bryan, D., Yang, Y., and R. Alimi, \"DECADE Requirements\", Work in Progress, September 2011.",
      "ja": "[5]区、Y.、ブライアン、D.、ヤン、Y.、およびR. Alimi、 \"DECADE要件\"、進歩、2011年9月での作業。"
    },
    {
      "indent": 3,
      "text": "[6] Amazon Web Services, \"Amazon Simple Storage Service (Amazon S3)\", <http://aws.amazon.com/s3/>.",
      "ja": "[6] Amazon Webサービス、 \"アマゾンシンプルなストレージサービス（アマゾンS3）\"、<http://aws.amazon.com/s3/>。"
    },
    {
      "indent": 3,
      "text": "[7] Calder, B., Wang, T., Mainali, S., and J. Wu, \"Windows Azure Blob -- Programming Blob Storage\", May 2009, <http://www.microsoft.com/windowsazure/whitepapers/>.",
      "ja": "[7]カルダー、B.、王、T.、Mainali、S.、およびJ.ウーは、 \"Windows Azureブロブ - ブロブストレージプログラミング\"、2009年5月、<http://www.microsoft.com/windowsazure/ホワイトペーパー/>。"
    },
    {
      "indent": 3,
      "text": "[8] Google, \"Google Storage for Developers\", <http://code.google.com/apis/storage>.",
      "ja": "[8]グーグル、 \"開発者のためのGoogleの記憶域\"、<http://code.google.com/apis/storage>。"
    },
    {
      "indent": 3,
      "text": "[9] Dropbox, \"Dropbox Features\", <http://www.dropbox.com/features>.",
      "ja": "[9]のDropbox、 \"Dropboxの機能\"、<http://www.dropbox.com/features>。"
    },
    {
      "indent": 3,
      "text": "[10] Microsoft Corporation, \"BranchCache\", <http://technet.microsoft.com/en-us/network/dd425028.aspx>.",
      "ja": "[10]マイクロソフトコーポレーション、 \"BranchCacheの\"、<http://technet.microsoft.com/en-us/network/dd425028.aspx>。"
    },
    {
      "indent": 3,
      "text": "[11] Microsoft Corporation, \"Web Services Dynamic Discovery (WS-Discovery)\", April 2005, <http://specs.xmlsoap.org/ ws/2005/04/discovery/ws-discovery.pdf>.",
      "ja": "[11]マイクロソフトコーポレーション、 \"Webサービスの動的検出（WS-ディスカバリー）\"、2005年4月、<http://specs.xmlsoap.org/ WS / 2005/04 /発見/ WS-discovery.pdf>。"
    },
    {
      "indent": 3,
      "text": "[12] Paul, S., Yates, R., Raychaudhuri, D., and J. Kurose, \"The Cache-and-Forward Network Architecture for Efficient Mobile Content Delivery Services in the Future Internet\", Innovations in NGN: Future Network and Services, 2008.",
      "ja": "[12]ポール、S.、イェーツ、R.、Raychaudhuri、D.、およびJ.黒瀬、「キャッシュアンドフォワード今後のインターネットにおける効率的なモバイルコンテンツ配信サービスのためのネットワークアーキテクチャ」、NGNにおけるイノベーション：未来ネットワーク・サービス、2008年。"
    },
    {
      "indent": 3,
      "text": "[13] SNIA, \"Cloud Data Management Interface (CDMI)\", <http://www.snia.org/cdmi>.",
      "ja": "[13] SNIA、 \"クラウドデータ管理インタフェース（CDMI）\"、<http://www.snia.org/cdmi>。"
    },
    {
      "indent": 3,
      "text": "[14] Pathan, A.K. and Buyya, R., \"A Taxonomy and Survey of Content Delivery Networks\", Grid Computing and Distributed Systems Laboratory, University of Melbourne, Technical Report, February 2007.",
      "ja": "[14] Pathan、A.K.そしてBuyya、R.、「分類とコンテンツ配信ネットワークの調査」、グリッド・コンピューティングと分散システム研究所、メルボルン大学、技術報告書、2007年2月。"
    },
    {
      "indent": 3,
      "text": "[15] Cerf, V., Burleigh, S., Hooke, A., Torgerson, L., Durst, R., Scott, K., Fall, K., and H. Weiss, \"Delay-Tolerant Networking Architecture\", RFC 4838, April 2007.",
      "ja": "[15]サーフ、V.、バーレイ、S.、フック、A.、Torgerson、L.、ダースト、R.、スコット、K.、秋、K.、およびH.ワイス、 \"遅延耐性ネットワークアーキテクチャ\" 、RFC 4838、2007年4月。"
    },
    {
      "indent": 3,
      "text": "[16] Scott, K. and S. Burleigh, \"Bundle Protocol Specification\", RFC 5050, November 2007.",
      "ja": "[16]スコット、K.およびS.バーリー、 \"バンドルプロトコル仕様\"、RFC 5050、2007年11月。"
    },
    {
      "indent": 3,
      "text": "[17] Named Data Networking, \"Named Data Networking Home Page\", <http://www.named-data.net/>.",
      "ja": "[17] \"名前付きデータネットワーキングホームページ\"、データネットワーキング名前、<http://www.named-data.net/>。"
    },
    {
      "indent": 3,
      "text": "[18] Named Data Networking, \"Named Data Networking (NDN) Project\", <http://www.named-data.net/ndn-proj.pdf>.",
      "ja": "[18]、<http://www.named-data.net/ndn-proj.pdf> \"データネットワーク（NDN）という名前のプロジェクト\" データネットワーキング、名前付き。"
    },
    {
      "indent": 3,
      "text": "[19] Network of Information, \"NetInf Overview\", <http://www.netinf.org/home/overview/>.",
      "ja": "[19]情報のネットワーク、 \"NetInf概要\"、<http://www.netinf.org/home/overview/>。"
    },
    {
      "indent": 3,
      "text": "[20] Anand, A., Sekar, V., and A. Akella, \"SmartRE: An Architecture for Coordinated Network-wide Redundancy Elimination\", SIGCOMM 2009.",
      "ja": "[20]アナンド、A.、スカール、V.、およびA. Akella、 \"SmartRE：協調ネットワーク全体の冗長性除去のためのアーキテクチャ\"、SIGCOMM 2009。"
    },
    {
      "indent": 3,
      "text": "[21] Rhea, S., Eaton, P., Geels, D., Weatherspoon, H., Zhao, B., and J. Kubiatowicz, \"Pond: the OceanStore Prototype\", FAST 2003.",
      "ja": "[21]レア、S.、イートン、P.、Geels、D.、ウェザー、H.、趙、B.、およびJ. Kubiatowicz、 \"池：オーシャンストアプロトタイプ\" 2003 FAST。"
    },
    {
      "indent": 3,
      "text": "[22] Kodak, \"Kodak Gallery Home Page\", <http://www.kodakgallery.com/gallery/welcome.jsp>.",
      "ja": "[22]コダック、 \"コダックギャラリーホームページ\"、<http://www.kodakgallery.com/gallery/welcome.jsp>。"
    },
    {
      "indent": 3,
      "text": "[23] Wikipedia, \"Kodak Gallery\", <http://en.wikipedia.org/wiki/Kodak_Gallery>.",
      "ja": "[23]ウィキペディア、 \"コダックギャラリー\"、<http://en.wikipedia.org/wiki/Kodak_Gallery>。"
    },
    {
      "indent": 3,
      "text": "[24] Flickr, \"Flickr Home Page\", <http://www.flickr.com>.",
      "ja": "[24] Flickrの、 \"Flickrのホームページ\"、<http://www.flickr.com>。"
    },
    {
      "indent": 3,
      "text": "[25] ImageShack, \"ImageShack Home Page\", <http://imageshack.us>.",
      "ja": "[25] ImageShackの、 \"ImageShackのホームページ\"、<http://imageshack.us>。"
    },
    {
      "indent": 3,
      "text": "[26] Tumblr, \"Tumblr Home Page\", <http://www.tumblr.com>.",
      "ja": "[26] Tumblrの、 \"Tumblrのホームページ\"、<http://www.tumblr.com>。"
    },
    {
      "indent": 3,
      "text": "[27] Wikipedia, \"Usenet\", <http://en.wikipedia.org/wiki/Usenet>.",
      "ja": "[27]ウィキペディア、 \"ユーズネット\"、<http://en.wikipedia.org/wiki/Usenet>。"
    },
    {
      "indent": 3,
      "text": "[28] Google, \"Google Groups\", <http://groups.google.com>.",
      "ja": "[28]グーグル、 \"Googleグループ\"、<http://groups.google.com>。"
    },
    {
      "indent": 3,
      "text": "[29] Huston, G., Telstra, \"Web Caching\", The Internet Protocol Journal Volume 2, No. 3.",
      "ja": "[29]ヒューストン、G.、テルストラ、 \"Webキャッシュ\"、インターネットプロトコルジャーナルボリューム2、第3号。"
    },
    {
      "indent": 3,
      "text": "[30] Shen, G., Wang, Y., Xiong, Y., Zhao, B., and Z-L. Zhang, \"HPTP: Relieving the Tension between ISPs and P2P\", 6th International Workshop on Peer-To-Peer Systems (IPTPS2007).",
      "ja": "[30]シェン、G.、王、Y.、熊、Y.、趙、B.、およびZ-L。張、「HPTP：ISPやP2Pの間の緊張を緩和する」、ピアツーピアシステムに関する第6回国際ワークショップ（IPTPS2007）。"
    },
    {
      "indent": 3,
      "text": "[31] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.",
      "ja": "[31]フィールディング、R.、ゲティス、J.、モーグル、J.、Frystyk、H.、Masinter、L.、リーチ、P.、およびT.バーナーズ - リー、 \"ハイパーテキスト転送プロトコル -  HTTP / 1.1\" 、RFC 2616、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[32] Satran, J., Meth, K., Sapuntzakis, C., Chadalapaka, M., and E. Zeidner, \"Internet Small Computer Systems Interface (iSCSI)\", RFC 3720, April 2004.",
      "ja": "[32] Satran、J.、メタ、K.、Sapuntzakis、C.、Chadalapaka、M.、およびE. Zeidner、 \"インターネットの小さいコンピュータシステム（のiSCSI）\"、RFC 3720、2004年4月。"
    },
    {
      "indent": 3,
      "text": "[33] Simpson, W., \"PPP Challenge Handshake Authentication Protocol (CHAP)\", RFC 1994, August 1996.",
      "ja": "[33]シンプソン、W.、 \"PPPチャレンジハンドシェイク認証プロトコル（CHAP）\"、RFC 1994、1996年8月。"
    },
    {
      "indent": 3,
      "text": "[34] Tseng, J., Gibbons, K., Travostino, F., Du Laney, C., and J. Souza, \"Internet Storage Name Service (iSNS)\", RFC 4171, September 2005.",
      "ja": "[34]ツェン、J.、ギボンズ、K.、Travostino、F.、デュレイニー、C.、およびJ. Souzaの、 \"インターネットストレージネームサービス（iSNSの）\"、RFC 4171、2005年9月。"
    },
    {
      "indent": 3,
      "text": "[35] Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed., \"Network File System (NFS) Version 4 Minor Version 1 Protocol\", RFC 5661, January 2010.",
      "ja": "[35] Shepler、S.編、アイスラー、M.、編、及びD. Noveck編、 \"ネットワークファイルシステム（NFS）バージョン4マイナーバージョン1つのプロトコル\"、RFC 5661、2010年1月。"
    },
    {
      "indent": 3,
      "text": "[36] Black, D., Fridella, S., and J. Glasgow, \"Parallel NFS (pNFS) Block/Volume Layout\", RFC 5663, January 2010.",
      "ja": "[36]ブラック、D.、Fridella、S.、およびJ.グラスゴー、 \"パラレルNFS（pNFSの）ブロック/ボリュームレイアウト\"、RFC 5663、2010年1月。"
    },
    {
      "indent": 3,
      "text": "[37] Halevy, B., Welch, B., and J. Zelenka, \"Object-Based Parallel NFS (pNFS) Operations\", RFC 5664, January 2010.",
      "ja": "[37] HALEVY、B.、ウェルチ、B.、およびJ.ゼレンカ、 \"オブジェクトベースのパラレルNFS（pNFSの）操作\"、RFC 5664、2010年1月。"
    },
    {
      "indent": 3,
      "text": "[38] Hammer-Lahav, E., Ed., \"The OAuth 1.0 Protocol\", RFC 5849, April 2010.",
      "ja": "[38]ハンマー -  Lahav、E.、エド。、 \"OAuthの1.0プロトコル\"、RFC 5849、2010年4月。"
    },
    {
      "indent": 3,
      "text": "[39] Ito, K., \"Ticket-Based Access Control Extension to WebDAV\", Work in Progress, October 2001.",
      "ja": "[39]伊藤、K.、「WebDAVのにチケットベースのアクセス制御拡張」、進歩、2001年10月の作業。"
    },
    {
      "indent": 3,
      "text": "[40] Dusseault, L., Ed., \"HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)\", RFC 4918, June 2007.",
      "ja": "[40] Dusseault、L.、エド。、RFC 4918、2007年6月 \"Web分散オーサリングとバージョン管理（WebDAV）のためのHTTP拡張機能\"。"
    },
    {
      "indent": 3,
      "text": "[41] Reschke, J., Ed., Reddy, S., Davis, J., and A. Babich, \"Web Distributed Authoring and Versioning (WebDAV) SEARCH\", RFC 5323, November 2008.",
      "ja": "[41] Reschke、J.、編、レディ、S.、デイビス、J.、およびA. Babich、 \"Web分散オーサリングとバージョン管理（WebDAV）SEARCH\"、RFC 5323、2008年11月。"
    },
    {
      "indent": 3,
      "text": "[42] Clemm, G., Reschke, J., Sedlar, E., and J. Whitehead, \"Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol\", RFC 3744, May 2004.",
      "ja": "[42] Clemm、G.、Reschke、J.、Sedlar、E.、およびJ.ホワイトヘッド、 \"Web分散オーサリングとバージョン管理（WebDAV）アクセス制御プロトコル\"、RFC 3744、2004年5月。"
    },
    {
      "indent": 3,
      "text": "[43] Korver, B. and L. Dusseault, \"Quota and Size Properties for Distributed Authoring and Versioning (DAV) Collections\", RFC 4331, February 2006.",
      "ja": "[43]コーバー、B.およびL. Dusseault、RFC 4331、2006年2月 \"分散オーサリングとバージョン管理（DAV）コレクションのクォータとサイズのプロパティ\"。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Richard Alimi (editor) Google",
      "ja": "科学者リチャード（編集者）グーグル"
    },
    {
      "indent": 3,
      "text": "EMail: ralimi@google.com",
      "ja": "メールアドレス：ralimi@google.com"
    },
    {
      "indent": 3,
      "text": "Akbar Rahman (editor) InterDigital Communications, LLC",
      "ja": "アクバル・ラーマン（編集者）インターデジタルコミュニケーションズ、LLC"
    },
    {
      "indent": 3,
      "text": "EMail: Akbar.Rahman@InterDigital.com",
      "ja": "メールアドレス：Akbar.Rahman@InterDigital.com"
    },
    {
      "indent": 3,
      "text": "Yang Richard Yang (editor) Yale University",
      "ja": "リチャード・ヤン（エディタ）イェール大学"
    },
    {
      "indent": 3,
      "text": "EMail: yry@cs.yale.edu",
      "ja": "メールアドレス：yry@cs.yale.edu"
    }
  ]
}