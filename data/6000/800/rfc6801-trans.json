{
  "title": {
    "text": "RFC 6801 - Pseudo Content Delivery Protocol (CDP) for Protecting Multiple Source Flows in the Forward Error Correction (FEC) Framework",
    "ja": "RFC 6801 - 複数のソースを保護するための疑似コンテンツ配信プロトコル（CDP）は、前方誤り訂正（FEC）フレームワークに流れます"
  },
  "number": 6801,
  "created_at": "2019-10-31 03:57:47.510015+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          U. Kozat\nRequest for Comments: 6801                            DOCOMO Innovations\nCategory: Informational                                         A. Begen\nISSN: 2070-1721                                                    Cisco\n                                                           November 2012",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Pseudo Content Delivery Protocol (CDP) for\n Protecting Multiple Source Flows in the\n Forward Error Correction (FEC) Framework",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document provides a pseudo Content Delivery Protocol (CDP) to protect multiple source flows with one or more repair flows based on the Forward Error Correction (FEC) Framework and the Session Description Protocol (SDP) elements defined for the framework. The purpose of the document is not to provide a full-fledged protocol but to show how the defined framework and SDP elements can be combined together to implement a CDP.",
      "ja": "この文書は、複数のソースを保護するために疑似コンテンツ配信プロトコル（CDP）を提供する前方誤り訂正（FEC）フレームワークおよびセッション記述プロトコル（SDP）フレームワークのために定義された要素に基づいて流れる一つ以上の修復に流れます。文書の目的は、本格的なプロトコルを提供することが、規定されたフレームワークとSDP要素はCDPを実装するために組み合わせることができる方法を示すことはありません。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6801.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc6801で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2012 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 3,
      "text": "This document may contain material from IETF Documents or IETF Contributions published or made publicly available before November 10, 2008. The person(s) controlling the copyright in some of this material may not have granted the IETF Trust the right to allow modifications of such material outside the IETF Standards Process. Without obtaining an adequate license from the person(s) controlling the copyright in such materials, this document may not be modified outside the IETF Standards Process, and derivative works of it may not be created outside the IETF Standards Process, except to format it for publication as an RFC or to translate it into languages other than English.",
      "ja": "この材料の一部がIETFトラストにこのような材料の変更を許可する権利を与えられていない可能性がありますにこの文書は、2008年、IETFドキュメントまたは11月10日以前に発行または公開さIETF貢献から著作権を支配する者（複数可）材料を含んでいてもよいですIETF標準化プロセスの外。そのような材料の著作権を管理者（単数または複数）から適切なライセンスを取得することなく、この文書は、IETF標準化過程の外側修正されないかもしれません、そして、それの派生物は、IETF標準化過程の外側に作成されない場合があり、それをフォーマットする以外出版RFCとして、英語以外の言語に翻訳します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n2. Definitions/Abbreviations .......................................3\n3. Construction of a Repair Flow from Multiple Source Flows ........3\n   3.1. Example: Two Source Flows Protected by a Single\n        Repair Flow ................................................6\n4. Reconstruction of Source Flows from Repair Flow(s) ..............9\n   4.1. Example: Multiple Source Flows Protected by a\n        Single Repair Flow .........................................9\n5. Security Considerations ........................................10\n6. Acknowledgments ................................................10\n7. Normative References ...........................................11",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "The Forward Error Correction (FEC) Framework (described in [RFC6363]) and SDP Elements for FEC Framework (described in [RFC6364]) together define mechanisms sufficient enough to build an actual Content Delivery Protocol (CDP) with FEC protection. Methods to convey FEC Framework Configuration Information (described in [RFC6695]), on the other hand, provide the signaling protocols that may be used as part of CDP to communicate FEC-Scheme-Specific Information from FEC sender to a single as well as multiple FEC receivers. This document provides a guideline on how the mechanisms defined in [RFC6363] and [RFC6364] can be sufficiently used to design a CDP over a non-trivial scenario, namely, protection of multiple source flows with one or more repair flows.",
      "ja": "前方誤り訂正（FEC）フレームワーク（[RFC6363]に記載されている）とSDP要素はFECフレームワークのための（に記載の[RFC6364]）と共にFEC保護のある実際のコンテンツ配信プロトコル（CDP）を構築するのに十分なメカニズムを定義します。 （[RFC6695]に記載されている）FECフレームワーク構成情報を伝達する方法が、一方、FEC-スキーマ固有単一のFEC送信者からの情報だけでなく、複数を通信するためにCDPの一部として使用することができるシグナリングプロトコルを提供しますFEC受信機。このドキュメントは[RFC6363]及び[RFC6364]で定義されたメカニズムは、十分に非自明なシナリオにわたってCDPを設計するために使用することができる方法についての指針を提供し、すなわち、複数のソースの保護は、一つ以上の修復フローに流れます。"
    },
    {
      "indent": 3,
      "text": "In particular, we provide clarifications and descriptions on how:",
      "ja": "特に、我々はどのように明確化と説明を提供します。"
    },
    {
      "indent": 3,
      "text": "o source and repair flows may be uniquely identified,",
      "ja": "Oソースおよびリペアフローを一意に識別することができます、"
    },
    {
      "indent": 3,
      "text": "o source blocks may be generated from one or more source flows,",
      "ja": "Oソースブロックは、1つ以上のソース・フローから生成することができます"
    },
    {
      "indent": 3,
      "text": "o repair flows may be paired with the source flows,",
      "ja": "O修復フローは、ソース・フローと対にすることができます"
    },
    {
      "indent": 3,
      "text": "o the receiver explicitly and implicitly identifies individual flows, and",
      "ja": "O受信機は、明示的および暗黙的に個々のフローを識別し、そして"
    },
    {
      "indent": 3,
      "text": "o source blocks are regenerated at the receiver and the missing source symbols in a source block are recovered.",
      "ja": "Oソースブロックは、受信機で再生され、ソースブロック内の欠落したソースシンボルが回復されます。"
    },
    {
      "indent": 0,
      "text": "2. Definitions/Abbreviations",
      "section_title": true,
      "ja": "2.定義/略語"
    },
    {
      "indent": 3,
      "text": "This document uses all the definitions and abbreviations from Section 2 of [RFC6363] minus the RFC 2119 requirements language.",
      "ja": "この文書では、[RFC6363]の第2節マイナスRFC 2119の要件言語からすべての定義と略語を使用しています。"
    },
    {
      "indent": 0,
      "text": "3. Construction of a Repair Flow from Multiple Source Flows",
      "section_title": true,
      "ja": "複数のソースからの修理の流れの3構築フロー"
    },
    {
      "indent": 3,
      "text": "At the sender side, CDP constructs the source blocks (SBs) by multiplexing transport payloads from multiple flows (see Figures 1 and 2). According to the FEC Framework, each source block is FEC-protected separately. Each source block is given to the specific FEC encoder used within the CDP as input and as the outputs Explicit Source FEC Payload ID, Repair FEC Payload ID, and Repair Payloads corresponding to that source block are generated. Note that the Explicit Source FEC Payload ID is optional, and if the CDP has an implicit means of constructing the source block at the sender/ receiver (e.g., by using any existing sequence numbers in the payload), the Explicit Source FEC Payload ID might not be output.",
      "ja": "送信側では、CDPは、（図1および図2を参照）は、複数のフローから多重化トランスポートペイロードによってソースブロック（SBS）を構築します。 FECフレームワークによれば、各ソースブロックは、FECで保護された別々です。各ソースブロックは、FECペイロードIDを修復し、明示的なソースFECペイロードIDの入力としてCDP内で使用される特定のFECエンコーダに出力として与えられ、そのソースブロックに対応する修復ペイロードが生成されます。明示的なソースFECペイロードIDのかもしれない（例えば、ペイロード内の既存のシーケンス番号を使用して）明示的なソースFECペイロードIDは任意であることに注意、およびCDPは、送信側/受信側のソースブロックを構築する暗黙の手段を有する場合出力されません。"
    },
    {
      "indent": 3,
      "text": "              +------------+\ns_1 --------> |            |\n .   Source   | Source     |      +--------+ +--------+ +--------+\n .   Flows    | Block      |==> ..|SB_(j+1)| |  SB_j  | |SB_(j-1)| ..\ns_n --------> | Generation |      +--------+ +--------+ +--------+\n              +------------+",
      "raw": true
    },
    {
      "indent": 12,
      "text": "Figure 1: Source Block Generation for a FEC Scheme",
      "ja": "図1：FECスキームのためのソースブロックの生成"
    },
    {
      "indent": 3,
      "text": "Figure 2 shows the structure of a source block. A CDP must clearly specify which payload corresponds to which source flow and the length of each payload.",
      "ja": "図2は、ソースブロックの構造を示します。 CDPは、明らかにその元の流れと各ペイロードの長さに対応するペイロードを指定しなければなりません。"
    },
    {
      "indent": 9,
      "text": "<------------------ Source Block (SB) ------------------->",
      "raw": true
    },
    {
      "indent": 9,
      "text": "+-------...-----+-------...-----+-      -+-------...-----+\n|   Payload_1   |   Payload_2   |  . . . |   Payload_n   |\n+-------...-----+-------...-----+-      -+-------...-----+\n\\______  _______|______  _______|        |______  _______|\n       \\/              \\/                       \\/\n   FID_1,Len_1     FID_2,Len_2              FID_n,Len_n",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 2: Structure of a Source Block",
      "ja": "図2：ソースブロックの構造"
    },
    {
      "indent": 3,
      "text": "The Flow ID (FID) value provides a unique shorthand identifier for the source flows. FID is specified and associated with the possibly wildcarded tuple of {source IP address, source port, destination IP address, destination port, transport protocol} in the SDP description. When wildcarded, certain fields in the tuple are not needed for distinguishing the source flows. The tuple is carried in the IP and transport headers of the source packets. Since FID is utilized by the CDP and FEC scheme to distinguish between the source packets, the tuple must have a one-to-one mapping to a valid FID. This point will be clearer in the specific example given later in this section. The length of FID must be a priori fixed and known to both the receiver and sender. Alternatively, it might be specified in the FEC-Scheme-Specific Information field in the SDP element [RFC6364].",
      "ja": "フローID（FID）値は、ソース・フローのためのユニークな速記識別子を提供します。 FIDは、指定されたとSDP記述の{送信元IPアドレス、送信元ポート、宛先IPアドレス、宛先ポート、トランスポートプロトコル}の可能性ワイルドカードタプルに関連付けられています。ワイルドカード場合、タプル内の特定のフィールドは、ソース・フローを区別するために必要とされません。タプルは、ソースパケットのIPとトランスポートヘッダで運ばれます。 FIDは、ソースパケットを区別するためにCDPおよびFECスキームによって利用されているので、タプルが有効なFIDに1対1のマッピングを有していなければなりません。この点については、このセクションで後述する具体例では明確であろう。 FIDの長さは固定され、受信機と送信側の両方に知られているアプリオリでなければなりません。また、それはSDP要素[RFC6364]でFEC-スキーム固有の情報フィールドで指定される可能性があります。"
    },
    {
      "indent": 3,
      "text": "The payload length (Len) information is needed to figure out how many bits, bytes, or symbols (depending on the FEC scheme) from a particular source flow are included in the source block. If the payload is not an integer multiple of the specified symbol length, the remaining portion is padded with zeros (see Figures 3 and 4).",
      "ja": "ペイロード長（LEN）情報が特定のソース流から（FECスキームに応じて）どのように多くのビット、バイト、または記号を把握するために必要とされるソースブロックに含まれています。ペイロードは、指定されたシンボル長の整数倍でない場合、残りの部分がゼロ（図3及び図4を参照）が埋め込まれます。"
    },
    {
      "indent": 6,
      "text": "                                           +------+\n   +--------+ +--------+ +--------+        |      | -------> r_1\n.. |SB_(j+1)| |  SB_j  | |SB_(j-1)| .. ==> | FEC  |  Repair   .\n   +--------+ +--------+ +--------+        |Scheme|  Flows    .\n                                           |      | -------> r_k\n                                           +------+",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 3: Repair Flow Generation by a FEC Scheme",
      "ja": "図3：FECスキームによってフローの生成を修復"
    },
    {
      "indent": 8,
      "text": "<------------------ Source Block (SB) ------------------->\n|          |          |          |              |          |\n+-------...-----+-------...-----+-      -+-------...-----+ |\n|   Payload_1   |   Payload_2   |  . . . |   Payload_n   |0|\n+-------...-----+-------...-----+-      -+-------...-----+ |\n|          |          |          |              |          |\n| Symbol_1 | Symbol_2 | Symbol_3 |      . . .   | Symbol_m |\n|<-------->|<-------->|<-------->|              |<-------->|",
      "raw": true
    },
    {
      "indent": 8,
      "text": "                        +------+\nSymbol_1,..,Symbol_m => | FEC  | => Symbol_u,..,Symbol_1\n                        | Enc. |\n                        +------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 4: Repair Flow Payload Generation",
      "ja": "図4：修復フローペイロードの生成"
    },
    {
      "indent": 3,
      "text": "FEC schemes typically expect a source block of certain size, say, m symbols. Therefore, the FEC encoder divides each source block into m symbols (with some padding if the source block is shorter than the expected m symbols) and generates u repair symbols, which are functions of the m symbols in the original source block. The repair symbols are grouped by the FEC scheme into repair payloads with each repair payload assigned a Repair FEC Payload ID in order to associate each repair payload with a particular source block at the receiver. If the payloads in a given source block have sequence numbers that can uniquely specify their location in the source block, an Explicit Source FEC Payload ID may not be generated for these payloads. Otherwise, Explicit Source FEC Payload IDs are generated for each payload and indicate the order the payloads appear in the source block.",
      "ja": "FECスキームは、典型的には、特定のサイズ、たとえば、m個のシンボルのソースブロックを期待します。 （ソースブロックが期待Mシンボルよりも短い場合、いくつかのパディングを伴う）およびuは、元のソースブロック内のm個のシンボルの関数であるシンボルを、修復発生したがって、FECエンコーダは、m個のシンボルに、各ソースブロックに分割します。リペアシンボルは受信機における特定のソースブロックと各修復ペイロードを関連付けるためにリペアFECペイロードIDを割り当てられた各修復ペイロードを持つ修復ペイロードにFECスキームによってグループ化されます。所与のソースブロック内のペイロードを一意ソースブロック内のそれらの位置を指定することができるシーケンス番号を持っている場合、明示的なソースFECペイロードIDは、これらのペイロードのために生成されなくてもよいです。そうでなければ、明示的なソースFECペイロードIDは、各ペイロードのために生成され、ペイロードは、ソースブロックに表示される順序を示しています。"
    },
    {
      "indent": 3,
      "text": "Note that FID and length information are not actually transmitted with the source payloads since both information can be gathered by other means as it will be clear in the next sections.",
      "ja": "それは次のセクションで明らかなように、両方の情報が他の手段によって収集することができるので、FID及び長さ情報が実際にソースペイロードで送信されないことに留意されたいです。"
    },
    {
      "indent": 0,
      "text": "3.1. Example: Two Source Flows Protected by a Single Repair Flow",
      "section_title": true,
      "ja": "3.1。例：単一の修復フローにより保護され二つのソース・フロー"
    },
    {
      "indent": 3,
      "text": "In this section, we present an example of source flow and repair flow generation by the CDP. We have two source flows with flow IDs of 0 and 1 to be protected by a single repair flow (see Figure 5). The first source flow is multicast to 233.252.0.1, and the second source flow is multicast to 233.252.0.2. Both flows use the port number 30000.",
      "ja": "このセクションでは、我々は、CDPによる源流と修復フロー生成の例を提示します。我々は、2つのソースは、単一のリペアフローによって保護される0と1のフローIDと流れるている（図5参照）。最初のソース・フローは233.252.0.1にマルチキャストされ、第2のソース流が233.252.0.2にマルチキャストされます。両方のポート番号30000を使用して流れます。"
    },
    {
      "indent": 16,
      "text": "SOURCE FLOWS\nS1: Source Flow |         | INSTANCE #1\n                |---------| R3: Repair Flow\nS2: Source Flow |",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 5: Example: Two Source Flows and One Repair Flow",
      "ja": "図5：例：二つのソースフローとワン修理の流れ"
    },
    {
      "indent": 3,
      "text": "The SDP description below states that the source flow defined by the tuple {*,*,233.252.0.1,30000} is identified with FID=0 and the source flow defined by the tuple {*,*,233.252.0.2,30000} is identified with FID=1 (via the 'id' parameter of the \"fec-source-flow\" attribute). The SDP description also states that the repair flow is to be received at the multicast address of 233.252.0.3 and at port 30000.",
      "ja": "以下SDP記述はタプル{*、*、233.252.0.1,30000}によって定義されたソース流= 0 FIDを用いて識別され、タプル{*、*、233.252.0.2,30000}によって定義されたソース・フローであることを述べて（「FECソース・フロー」属性の「ID」パラメータを介して）FID = 1で同定しました。 SDP記述は、修復フローが233.252.0.3のマルチキャストアドレスに、ポート30000で受信されることを述べています。"
    },
    {
      "indent": 8,
      "text": "v=0\no=ali 1122334455 1122334466 IN IP4 fec.example.com\ns=FEC Framework Examples\nt=0 0\na=group:FEC-FR S1 S2 R3\nm=video 30000 RTP/AVP 100\nc=IN IP4 233.252.0.1/127\na=rtpmap:100 MP2T/90000\na=fec-source-flow: id=0\na=mid:S1\nm=video 30000 RTP/AVP 101\nc=IN IP4 233.252.0.2/127\na=rtpmap:101 MP2T/90000\na=fec-source-flow: id=1\na=mid:S2\nm=application 30000 UDP/FEC\nc=IN IP4 233.252.0.3/127\na=fec-repair-flow: encoding-id=0; ss-fssi=n:7,k:5\na=repair-window:150ms\na=mid:R3",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 6 shows the first and the second source blocks (SB_1 and SB_2) generated from these two source flows. In this example, SB_1 is of length 10000 bytes. Suppose that the FEC scheme uses a symbol length of 512 bytes. Then, SB_1 can be divided into 20 symbols after padding the source block for 240 bytes. Assume that the FEC scheme is rate-2/3 erasure code; hence, it generates 10 repair symbols from 20 original symbols for SB_1. On the other hand, SB_2 is 7000 bytes long and can be divided into 14 symbols after padding 168 bytes. Using the same encoder, suppose that seven repair symbols are generated for SB_2.",
      "ja": "図6は、第1および第2のソースブロック（SB_1とSB_2）は、これら二つのソース流から発生示します。この例では、SB_1は、長さ10000バイトです。 FECスキームは、512バイトのシンボル長を使用すると仮定する。次いで、SB_1は240バイトのソースブロックをパディングした後、20個のシンボルに分割することができます。 FECスキームは速度-2月3日消失訂正であると仮定する。したがって、SB_1 20元のシンボルから10個のリペアシンボルを生成します。一方、SB_2は7000バイト長であり、168バイトをパディングした後、14個のシンボルに分割することができます。同じエンコーダを使用して、7つのリペアシンボルがSB_2のために生成されていると仮定します。"
    },
    {
      "indent": 19,
      "text": "<-------- Source Block 1 -------->\n+------------+-------------------+\n| $1 $2 $3 $4| #1 #2 #3 #4 #5 #6 | 0..00\n+------------+-------------------+\n\\__________________  __________________/\n                   \\/\n      @1 @2 @3 @4 @5 @6 @7 @8 @9 @10",
      "raw": true
    },
    {
      "indent": 19,
      "text": "<---- Source Block 2 ---->\n+----------------+-------+\n| $5 $6 $7 $8 $9 | #7 #8 |0..00\n+----------------+-------+\n\\______________  _____________/\n               \\/\n  @11 @12 @13 @14 @15 @16 @17",
      "raw": true
    },
    {
      "indent": 17,
      "text": "$: 1000-byte payload from source flow 1 #: 1000-byte payload from source flow 2 @: Repair symbol",
      "ja": "$：元フローから1000バイトのペイロード1位：ソースフロー2から1000バイトのペイロード@：修復シンボル"
    },
    {
      "indent": 15,
      "text": "Figure 6: Source Block with Two Source Flows",
      "ja": "図6：二つのソースとソースブロックフロー"
    },
    {
      "indent": 3,
      "text": "The information on the unit of payload length, FEC scheme, symbol size, and coding rates can be specified in the FEC-Scheme-Specific Information (FSSI) field of the SDP element. If the values of the payload lengths from each source flow and the order of appearance of source flows in every source block are fixed during the session, these values may be also provided in the FSSI field. To carry FSSI information to the FEC receivers, one may use the signaling methods described in [RFC6695]. In our example, we will consider the case where the ordering is fixed and known both at the sender and the receiver, but the payload lengths will be variable from one source block to another. We assume that the payload of a source flow with an FID smaller than another flow's FID precedes other payloads in a source block.",
      "ja": "ペイロード長、FECスキーム、シンボルのサイズ、及び符号化率の単位に関する情報がSDP要素のFEC-スキーム固有情報（FSSI）フィールドに指定することができます。各ソース・フロー及びすべてのソースブロック内のソース・フローの出現順序からペイロード長の値は、セッション中に固定されている場合、これらの値はまた、FSSIフィールドに提供されてもよいです。 FEC受信機にFSSI情報を運ぶために、一方は[RFC6695]に記載のシグナリング方法を使用することができます。この例では、順序が固定されており、送信側と受信側の両方で知られている場合を考えるが、ペイロード長が別のソースブロックから可変であろう。我々は、他のフローのFIDより小さいFIDとソース流のペイロードは、ソースブロック内の他のペイロードに先行すると仮定する。"
    },
    {
      "indent": 3,
      "text": "The FEC scheme gets the source blocks as input and generates the parity blocks for each source block to protect the whole source block. In the example, the repair payloads for SB_1 consist of 512- byte symbols, denoted by @1 to @10. Similarly, @11 to @17 constitutes the repair payloads for SB_2. The FEC scheme outputs the repair payloads along with the Repair FEC Payload IDs. In our example, Repair FEC Payload ID provides information on the source block sequence number and the order the repair symbols are generated. For instance, @3 is the third FEC repair symbol for SB_1, and the three tuple {@3,SB_1,3} can uniquely deliver this information. In our example, the FEC scheme also provides Explicit Source FEC Payload IDs that carry information to indicate which source symbols correspond to which source block sequence number and the relative position in the source block. For instance, the two tuple {SB_2,2} can be attached to $6 as the Explicit Source FEC Payload ID to indicate that $6 is protected together with packets belonging to SB_2, and $6 is the second payload in SB_2.",
      "ja": "FEC方式は、入力として、ソースブロックを取得し、全体のソースブロックを保護するために、各ソースブロックのパリティブロックを生成します。一例では、SB_1の修復ペイロードは10 @ 1 @で表さ512-バイトシンボルから成ります。同様に、@ 17から11 @はSB_2の修復ペイロードを構成しています。 FEC方式は、リペアFECペイロードIDに沿って修理ペイロードを出力します。この例では、FECペイロードIDは、ソースブロックのシーケンス番号とリペアシンボルが生成される順序についての情報を提供して修理。例えば、3 @ SB_1ための第三のFECリペアシンボルであり、{3 @、SB_1,3} 3つのタプルは一意にこの情報を提供できます。この例では、FEC方式は、シンボルがどのソースブロックシーケンス番号とソースブロック内の相対的位置に対応するソースを示すための情報を運ぶ明示ソースFECペイロードIDを提供します。例えば、2つのタプル{SB_2,2は} $ 6 SB_2に属するパケットと一緒に保護され、$ 6はSB_2第二のペイロードであることを示すために、明示的なソースFECペイロードIDとして$ 6に装着することができます。"
    },
    {
      "indent": 3,
      "text": "The source packets are generated from the source symbols by concatenating consecutive symbols in one packet. There should not be any fragmentation of a source symbol; e.g., symbols #7 and #8 can be concatenated in one transport payload of 2000 bytes (the implementation should make sure that the size of the resulting source packet -- payload plus the overhead -- is not larger than the path MTU), but one portion of symbol #7 should not be put in one source packet and the remaining portion in another source packet. The simplest implementation is to place each source symbol in a different source packet as shown in Figure 7.",
      "ja": "ソースパケットは、一つのパケット内の連続したシンボルを連結してソースシンボルから生成されます。ソースシンボルの任意の断片化があってはなりません。例えば、シンボル＃7、＃8は2000バイトのトランスポートペイロードに連結することができ（実装が得られたソースパケットのサイズことを確認してください - ペイロードプラスオーバーヘッドが - パスMTUよりも大きくない）、しかしシンボル＃7の一部が一つのソースパケットと他のソースパケットの残りの部分に置かれるべきではありません。最も単純な実装では、図7に示すように、異なるソースパケットの各ソースシンボルを配置することです。"
    },
    {
      "indent": 19,
      "text": "+------------------------------------+\n|      IP header {233.252.0.1}       |\n+------------------------------------+\n|      Transport header {30000}      |\n+------------------------------------+\n|   Original Transport Payload {$6}  |\n+------------------------------------+\n|   Source FEC Payload ID  {SB_2,2}  |\n+------------------------------------+",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 7: Example of a Source Packet for IPv4",
      "ja": "図7：IPv4のソースパケットの例"
    },
    {
      "indent": 3,
      "text": "The repair packets are generated from the repair symbols belonging to the same source block by grouping consecutive symbols in one packet. There should not be any fragmentation of a repair symbol; e.g., symbols @4, @5, and @6 can be concatenated in one transport payload of 1536 bytes, but @6 should not be divided into smaller sub-symbols and spread over multiple repair packets. The Repair FEC Payload ID must carry sufficient information for the decoding process. In our example, for instance, indicating source block sequence number, length of each source payload, and the order that the first parity symbol in the repair packet among all the parity symbols generated for the same source block is sufficient. The exact header format of Repair FEC Payload ID may be specified in the FSSI field of the SDP element. In Figure 8, for instance, the repair symbols @4, @5, and @6 are concatenated together. The Payload ID {SB_1,4,4,6} states that the repair symbols protect SB_1, the first repair symbol in the payload is generated as the fourth symbol and the source block consists of two source flows carrying four and six packets from each.",
      "ja": "リペアパケットは、一つのパケット内の連続したシンボルをグループ化し、同じソースブロックに属するリペアシンボルから生成されます。修理のシンボルのいずれかの断片化があってはなりません。例えば、4 @、@ 5、及び6 @記号は、1536バイトのトランスポートペイロードに連結することができるが、6 @小さいサブシンボルに分割し、複数のリペアパケットにわたって拡散されるべきではありません。リペアFECペイロードIDは、復号化処理のために十分な情報を運ばなければなりません。この例では、例えば、ソースブロックシーケンス番号、各ソース・ペイロードの長さ、及び同じソースブロックに対して生成されたすべてのパリティ・シンボルのうち、リペアパケットにおける第1のパリティシンボルが十分であることを順を示します。リペアFECペイロードIDの正確なヘッダフォーマットは、SDP要素のFSSIフィールドで指定されてもよいです。図8において、例えば、4 @リペアシンボル、5、及び6 @は、一緒に連結されています。 {SB_1,4,4,6}はリペアシンボルがSB_1、ペイロードの最初のリペアシンボルを保護することを示すペイロードIDは4番目のシンボルとして生成され、ソースブロックは、2つのソースで構成され、それぞれから4〜6つのパケットを運ぶ流れます。"
    },
    {
      "indent": 19,
      "text": "+------------------------------------+\n|      IP header {233.252.0.3}       |\n+------------------------------------+\n|      Transport header {30000}      |\n+------------------------------------+\n| Repair FEC Payload ID {SB_1,4,4,6} |\n+------------------------------------+\n|      Repair Symbols {@4,@5,@6}     |\n+------------------------------------+",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 8: Example of a Repair Packet for IPv4",
      "ja": "図8：IPv4の修復パケットの例"
    },
    {
      "indent": 0,
      "text": "4. Reconstruction of Source Flows from Repair Flow(s)",
      "section_title": true,
      "ja": "ソースの4.復興が修理からの流れをフロー（S）"
    },
    {
      "indent": 3,
      "text": "Here we provide an example for reconstructing multiple source flows from a single repair flow.",
      "ja": "ここでは、単一の修理の流れから、複数のソース・フローを再構成するための例を提供します。"
    },
    {
      "indent": 0,
      "text": "4.1. Example: Multiple Source Flows Protected by a Single Repair Flow",
      "section_title": true,
      "ja": "4.1。例：複数のソースはシングル修復フローにより保護フローの"
    },
    {
      "indent": 3,
      "text": "At the receiver, source flows 1 and 2 are received at {233.252.0.1,30000} and {233.252.0.2,30000}, while the repair flow is received at {233.252.0.3,30000}. The CDP can map these tuples to the flow IDs using the SDP elements. Accordingly, the payloads received at {233.252.0.1,30000} and {233.252.0.2,30000} are mapped to flow IDs 0 and 1, respectively.",
      "ja": "受信機において、ソースは、リペアフローが{233.252.0.3,30000}で受信しながら1及び2は、{233.252.0.1,30000}と{233.252.0.2,30000}で受信されて流れます。 CDPは、SDPの要素を使用したフローIDにこれらのタプルをマッピングすることができます。したがって、ペイロードは、それぞれ、IDが0と1を流れるようにマッピングされる{233.252.0.1,30000}と{233.252.0.2,30000}で受信しました。"
    },
    {
      "indent": 3,
      "text": "The CDP passes the flow IDs and received payloads along with the Explicit Source FEC Payload ID to the FEC scheme defined in the SDP description. The CDP also passes the received repair packet payloads and Repair FEC Payload ID to the FEC scheme. The FEC scheme can construct the original source block with missing packets by using the information given in the FEC Payload IDs. The FEC Repair Payload ID provides the information that SB_1 has packets from two flows with four packets from the first one and six packets from the second one. Flow IDs state that the packets from source flow 0 precede the packets from source flow 1. Explicit Source FEC Payload IDs, on the other hand, provide the information about which source payload appears in what order. Therefore, the FEC scheme can depict a source block with exact locations of the missing packets. Figure 9 depicts the case for SB_1. Since the original source block with missing packets can be constructed at the decoder and the FEC scheme knows the coding rate (e.g., it might be carried in the FSSI field in the SDP description), a proper decoding operation can start as soon as the repair symbols are provided to the FEC scheme.",
      "ja": "CDPは、SDP記述に定義されたFECスキームに明示的なソースFECペイロードIDと共にフローIDと受信したペイロードを渡します。 CDPは、受信リペアパケットペイロードを通過し、FECスキームにFECペイロードIDを修復します。 FEC方式は、FECペイロードIDの中で与えられた情報を用いて、欠落パケットで元のソースブロックを構築することができます。 FECリペアペイロードIDはSB_1が第1〜4つのパケット2つ目から6個のパケットを有する2つのフローからのパケットを有しているという情報を提供します。ソースフロー0からのパケットが送信元フローからのパケット1.明示的なソースFECペイロードIDを先行することフローIDの状態は、他の一方で、元のペイロードは、どのような順序で表示されるかについての情報を提供します。したがって、FECスキームは、欠落したパケットの正確な位置を有するソースブロックを描くことができます。図9は、SB_1ためのケースを示しています。欠落パケットで元のソースブロックがデコーダで構成され、FECスキーム（例えば、それはSDP記述にFSSIフィールドで運ばれるかもしれない）符号化レートを知っていることができるので、適切な復号動作を修復するとすぐに開始することができますシンボルはFECスキームに提供されています。"
    },
    {
      "indent": 12,
      "text": "<-------- Source Block 1 -------->\n+------------+-------------------+\n| $1 $2 X  X | #1 X  #3 #4 #5 #6 |\n+------------+-------------------+",
      "raw": true
    },
    {
      "indent": 12,
      "text": "O: Symbols received from the source flow 1 for SB_1 #: Symbols received from the source flow 2 for SB_1 X: Lost source symbols",
      "ja": "O：シンボルSB_1位のソース流1から受信した：記号はSB_1 Xのソース流2から受信した：失われたソースシンボルを"
    },
    {
      "indent": 20,
      "text": "Figure 9: Source Block Regeneration",
      "ja": "図9：ソースブロックの再生"
    },
    {
      "indent": 3,
      "text": "When the FEC scheme can recover any missing symbol while more repair symbols are arriving, it provides the recovered blocks along with the source flow IDs of the recovered blocks as outputs to the CDP. The receiver knows how long to wait to repair the remaining missing packets (e.g., specified by the 'repair-window' attribute in the SDP description). After the associated timer expires, the CDP hands over whatever could be recovered from the source flow to the application layer and continues with processing the next source block.",
      "ja": "よりリペアシンボルが到着している間FECスキームが欠落しているシンボルを回復することができる場合は、CDPの出力として回収されたブロックのソース・フローIDと共に回収ブロックを提供します。受信機は、（例えば、SDPの記述で「修理・ウィンドウの属性によって指定された）残りの行方不明のパケットを修復するために待機する時間を知っています。関連したタイマが満了した後、どのようなオーバーCDP手は、アプリケーション層へのソース流から回収し、次のソースブロックの処理を継続することができます。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "For the general security considerations related to the FEC Framework, refer to [RFC6363]. For the security considerations related to the SDP elements in the FEC Framework, refer to [RFC6364]. There are no additional security considerations that apply to this document.",
      "ja": "FECフレームワークに関連する一般的なセキュリティ上の考慮事項については、[RFC6363]を参照。 FECフレームワークにおけるSDP要素に関連するセキュリティ上の考慮事項については、[RFC6364]を参照。この文書には適用され、追加のセキュリティの考慮事項はありません。"
    },
    {
      "indent": 0,
      "text": "6. Acknowledgments",
      "section_title": true,
      "ja": "6.謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank the FEC Framework design team for their inputs, suggestions, and contributions.",
      "ja": "著者は、それらの入力、提案、貢献のためのFECフレームワークのデザインチームに感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "7. Normative References",
      "section_title": true,
      "ja": "7.引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC6363] Watson, M., Begen, A., and V. Roca, \"Forward Error Correction (FEC) Framework\", RFC 6363, October 2011.",
      "ja": "[RFC6363]ワトソン、M.、Begen、A.、およびV.ロカ、 \"前方誤り訂正（FEC）フレームワーク\"、RFC 6363、2011年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC6364] Begen, A., \"Session Description Protocol Elements for the Forward Error Correction (FEC) Framework\", RFC 6364, October 2011.",
      "ja": "[RFC6364] Begen、A.、 \"前方誤り訂正のためのセッション記述プロトコル要素（FEC）フレームワーク\"、RFC 6364、2011年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC6695] Asati, R., \"Methods to Convey Forward Error Correction (FEC) Framework Configuration Information\", RFC 6695, August 2012.",
      "ja": "[RFC6695] Asati、R.、RFC 6695、2012年8月 \"前方誤り訂正（FEC）フレームワークの構成情報を伝達する方法\"。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Ulas C. Kozat DOCOMO Innovations 3240 Hillview Avenue Palo Alto, CA 94304-1201 USA",
      "ja": "Ulas C. Kozatドコモイノベーション3240ヒルビュー・アベニューカリフォルニア州パロアルト94304から1201 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 650 496 4739 EMail: kozat@docomolabs-usa.com",
      "ja": "電話：+1 650 496 4739 Eメール：kozat@docomolabs-usa.com"
    },
    {
      "indent": 3,
      "text": "Ali Begen Cisco 181 Bay Street Toronto, ON M5J 2T3 Canada",
      "ja": "M5J 2T3カナダONアリBegenのCisco 181ベイストリートトロント、"
    },
    {
      "indent": 3,
      "text": "EMail: abegen@cisco.com",
      "ja": "メールアドレス：abegen@cisco.com"
    }
  ]
}