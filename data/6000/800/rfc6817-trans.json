{
  "title": {
    "text": "RFC 6817 - Low Extra Delay Background Transport (LEDBAT)",
    "ja": "RFC 6817 - 低余分な遅延の背景トランスポート（LEDBAT）"
  },
  "number": 6817,
  "created_at": "2019-10-31 07:39:32.545293+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                       S. Shalunov\nRequest for Comments: 6817                                      G. Hazel\nCategory: Experimental                                  BitTorrent, Inc.\nISSN: 2070-1721                                               J. Iyengar\n                                           Franklin and Marshall College\n                                                           M. Kuehlewind\n                                                 University of Stuttgart\n                                                           December 2012",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Low Extra Delay Background Transport (LEDBAT)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "Low Extra Delay Background Transport (LEDBAT) is an experimental delay-based congestion control algorithm that seeks to utilize the available bandwidth on an end-to-end path while limiting the consequent increase in queueing delay on that path. LEDBAT uses changes in one-way delay measurements to limit congestion that the flow itself induces in the network. LEDBAT is designed for use by background bulk-transfer applications to be no more aggressive than standard TCP congestion control (as specified in RFC 5681) and to yield in the presence of competing flows, thus limiting interference with the network performance of competing flows.",
      "ja": "低余分な遅延の背景トランスポート（LEDBAT）は、そのパス上の遅延キューイングの必然的な増加を制限しながら、エンドツーエンドパス上の利用可能な帯域幅を利用しようとする実験遅延ベースの輻輳制御アルゴリズムです。 LEDBATは一方向遅延測定値の変化が流れ自体がネットワークに誘導輻輳を制限するために使用します。従って、競合フローのネットワークパフォーマンスとの干渉を制限し、（RFC 5681で指定されるように）と競合するフローの存在下で得LEDBATは、標準的なTCP輻輳制御よりもより積極的ではないと背景バルク転送アプリケーションによって使用するために設計されています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、検査、実験的な実装、および評価のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document defines an Experimental Protocol for the Internet community. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "この文書は、インターネットコミュニティのためにExperimentalプロトコルを定義します。このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6817.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc6817で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2012 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2012 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................4\n   1.1. Requirements Notation ......................................4\n   1.2. Design Goals ...............................................4\n   1.3. Applicability ..............................................5\n2. LEDBAT Congestion Control .......................................6\n   2.1. Overview ...................................................6\n   2.2. Preliminaries ..............................................6\n   2.3. Receiver-Side Operation ....................................7\n   2.4. Sender-Side Operation ......................................7\n        2.4.1. An Overview .........................................7\n        2.4.2. The Complete Sender Algorithm .......................8\n   2.5. Parameter Values ..........................................11\n3. Understanding LEDBAT Mechanisms ................................13\n   3.1. Delay Estimation ..........................................13\n        3.1.1. Estimating Base Delay ..............................13\n        3.1.2. Estimating Queueing Delay ..........................13\n   3.2. Managing the Congestion Window ............................14\n        3.2.1. Window Increase: Probing for More Bandwidth ........14\n        3.2.2. Window Decrease: Responding to Congestion ..........14\n   3.3. Choosing the Queuing Delay Target .........................15\n4. Discussion .....................................................15\n   4.1. Framing and ACK Frequency Considerations ..................15\n   4.2. Competing with TCP Flows ..................................15\n   4.3. Competing with Non-TCP Flows ..............................16\n   4.4. Fairness among LEDBAT Flows ...............................16\n5. Open Areas for Experimentation .................................17\n   5.1. Network Effects and Monitoring ............................17\n   5.2. Parameter Values ..........................................18\n   5.3. Filters ...................................................19\n   5.4. Framing ...................................................19\n6. Security Considerations ........................................19\n7. Acknowledgements ...............................................20\n8. References .....................................................20\n   8.1. Normative References ......................................20\n   8.2. Informative References ....................................20\nAppendix A. Measurement Errors ....................................22\n  A.1. Clock Offset ...............................................22\n  A.2. Clock Skew .................................................22",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "TCP congestion control [RFC5681] seeks to share bandwidth at a bottleneck link equitably among flows competing at the bottleneck, and it is the predominant congestion control mechanism used on the Internet. However, not all applications seek an equitable share of network throughput. \"Background\" applications, such as software updates or file-sharing applications, seek to operate without interfering with the performance of more interactive and delay-and/or bandwidth-sensitive \"foreground\" applications. Standard TCP congestion control, as specified in [RFC5681], may be too aggressive for use with such background applications.",
      "ja": "TCPの輻輳制御[RFC5681]はボトルネックで、競合するフロー間の公平にボトルネックリンクの帯域幅を共有しようと、それは、インターネット上で使用される主要な輻輳制御機構です。ただし、すべてのアプリケーションは、ネットワークスループットの公平なシェアを求めていません。このようなソフトウェアの更新やファイル共有アプリケーションとして「背景」のアプリケーションは、よりインタラクティブかつ遅延および/または帯域幅に敏感な「フォアグラウンド」アプリケーションのパフォーマンスに干渉することなく動作することを求めます。標準のTCP輻輳制御は、[RFC5681]で指定されるように、そのようなバックグラウンドアプリケーションで使用するにはあまりにも積極的であってもよいです。"
    },
    {
      "indent": 3,
      "text": "Low Extra Delay Background Transport (LEDBAT) is an experimental delay-based congestion control mechanism that reacts early to congestion in the network, thus enabling \"background\" applications to use the network while avoiding interference with the network performance of competing flows. A LEDBAT sender uses one-way delay measurements to estimate the amount of queueing on the data path, controls the LEDBAT flow's congestion window based on this estimate, and minimizes interference with competing flows by adding low extra queueing delay on the end-to-end path.",
      "ja": "低余分な遅延の背景トランスポート（LEDBAT）はこうして競合フローのネットワーク性能との干渉を回避しながらネットワークを使用するように「バックグラウンド」アプリケーションを可能にする、初期のネットワークの輻輳に反応実験遅延ベースの輻輳制御機構です。 LEDBAT送信者は、データパスのキューイングの量を推定する一方向遅延測定値を使用し、この推定値に基づいてLEDBATフローの輻輳ウィンドウを制御し、エンド・ツー・エンドでの低余分なキューイング遅延を追加することによって、競合流れとの干渉を最小限に抑えます道。"
    },
    {
      "indent": 3,
      "text": "Delay-based congestion control protocols, such as TCP-Vegas [Bra94][Low02], are generally designed to achieve more, not less throughput than standard TCP, and often outperform TCP under particular network settings. For further discussion on Lower-than-Best-Effort transport protocols see [RFC6297]. In contrast, LEDBAT is designed to be no more aggressive than TCP [RFC5681]; LEDBAT is a \"scavenger\" congestion control mechanism that seeks to utilize all available bandwidth and yields quickly when competing with standard TCP at a bottleneck link.",
      "ja": "このようTCP-ベガスとして遅延ベースの輻輳制御プロトコルは、[Bra94] [Low02]、一般的に、標準的なTCPスループット未満、より多くを達成しないように設計されており、多くの場合、特定のネットワーク設定でTCPをアウトパフォームしています。低い-ベストエフォートトランスポートプロトコルのさらなる議論に関しては、[RFC6297]を参照してください。対照的に、LEDBATは[RFC5681] TCPよりもより積極的なことはないように設計されています。 LEDBATは、ボトルネックリンクで標準TCPと競合する場合、すべての利用可能な帯域幅を利用しようとするとすぐにもたらし「スカベンジャー」輻輳制御機構です。"
    },
    {
      "indent": 3,
      "text": "In the rest of this document, we refer to congestion control specified in [RFC5681] as \"standard TCP\".",
      "ja": "このドキュメントの残りの部分では、「標準TCP」として[RFC5681]で指定された輻輳制御を参照してください。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Notation",
      "section_title": true,
      "ja": "1.1。要件表記"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "1.2. Design Goals",
      "section_title": true,
      "ja": "1.2。設計目標"
    },
    {
      "indent": 3,
      "text": "LEDBAT congestion control seeks to achieve the following goals:",
      "ja": "LEDBAT輻輳制御は、次の目標を達成しよう："
    },
    {
      "indent": 3,
      "text": "1. to utilize end-to-end available bandwidth and to maintain low queueing delay when no other traffic is present,",
      "ja": "1.は、エンド・ツー・エンドの利用可能な帯域幅を利用すると、他のトラフィックが存在しないとき、低キューイング遅延を維持します"
    },
    {
      "indent": 3,
      "text": "2. to add limited queuing delay to that induced by concurrent flows, and",
      "ja": "2.並行フローにより誘導されたものに限定されたキューイング遅延を追加すると、"
    },
    {
      "indent": 3,
      "text": "3. to yield quickly to standard TCP flows that share the same bottleneck link.",
      "ja": "3.同じボトルネックリンクを共有し、標準のTCPフローに迅速に得ました。"
    },
    {
      "indent": 0,
      "text": "1.3. Applicability",
      "section_title": true,
      "ja": "1.3。適用性"
    },
    {
      "indent": 3,
      "text": "LEDBAT is a \"scavenger\" congestion control mechanism that is motivated primarily by background bulk-transfer applications, such as large file transfers (as with file-sharing applications) and software updates. It can be used with any application that seeks to minimize its impact on the network and on other interactive delay- and/or bandwidth-sensitive network applications. LEDBAT is expected to work well when the sender and/or receiver is connected via a residential access network.",
      "ja": "LEDBATは、ソフトウェアのアップデート（ファイル共有アプリケーションと同様に）、主にこのような大容量のファイル転送などの背景バルク転送アプリケーションによって動機付けされる「スカベンジャー」輻輳制御機構です。これは、ネットワーク上およびその他のインタラクティブ遅延 - および/または帯域幅に敏感なネットワークアプリケーションへの影響を最小限にしようとする任意のアプリケーションで使用することができます。送信者および/または受信機が住宅のアクセスネットワークを介して接続されている場合LEDBATはうまく動作するように期待されています。"
    },
    {
      "indent": 3,
      "text": "LEDBAT can be used as part of a transport protocol or as part of an application, as long as the data transmission mechanisms are capable of carrying timestamps and acknowledging data frequently. LEDBAT can be used with TCP, Stream Control Transmission Protocol (SCTP), and Datagram Congestion Control Protocol (DCCP), with appropriate extensions where necessary; and it can be used with proprietary application protocols, such as those built on top of UDP for peer-to-peer (P2P) applications.",
      "ja": "LEDBATであれば、データ伝送機構はタイムスタンプを搬送し、頻繁にデータを承認することができるように、トランスポートプロトコルの一部として、またはアプリケーションの一部として使用することができます。 LEDBATは、必要に応じて適切な拡張と、TCP、ストリーム制御伝送プロトコル（SCTP）、及びデータグラム輻輳制御プロトコル（DCCP）と共に使用することができます。それは、そのようなピア・ツー・ピア（P2P）アプリケーションのためのUDPの上に構築されたもののような独自のアプリケーションプロトコルと一緒に使用することができます。"
    },
    {
      "indent": 3,
      "text": "When used with an ECN-capable framing protocol, LEDBAT should react to an Explicit Congestion Notification (ECN) mark as it would to a loss, as specified in [RFC3168].",
      "ja": "ECN-可能なフレーミングプロトコルと共に使用される場合、それは損失と同じように[RFC3168]で指定されるように、LEDBATは、明示的輻輳通知（ECN）マークに反応すべきです。"
    },
    {
      "indent": 3,
      "text": "LEDBAT is designed to reduce buildup of a standing queue by long-lived LEDBAT flows at a link with a tail-drop FIFO queue, so as to avoid persistently delaying other flows sharing the queue. If Active Queue Management (AQM) is configured to drop or ECN-mark packets before the LEDBAT flow starts reacting to persistent queue buildup, LEDBAT reverts to standard TCP behavior rather than yielding to other TCP flows. However, such an AQM is still desirable since it keeps queuing delay low, achieving an outcome that is in line with LEDBAT's goals. Additionally, a LEDBAT transport that supports ECN enjoys the advantages that an ECN-capable TCP enjoys over an ECN-agnostic TCP; avoiding losses and possible retransmissions. Weighted Fair Queuing (WFQ), as employed by some home gateways, seeks to isolate and protect delay-sensitive flows from delays due to standing queues built up by concurrent long-lived flows. Consequently, while it prevents LEDBAT from yielding to other TCP flows, it again achieves an outcome that is in line with LEDBAT's goals [Sch10].",
      "ja": "LEDBATは、長寿命LEDBATで立っキューの蓄積を軽減するように設計されて永続的にキューを共有する他のフローを遅らせる避けるために、テールドロップFIFOキューとのリンクで流れます。アクティブキュー管理（AQM）がドロップするように構成されるか、またはECNマークパケットされている場合はLEDBATフローが永続キューの蓄積に反応を開始する前に、LEDBATではなく、他のTCPフローに与えるよりも、標準のTCPの動作に戻ります。それはLEDBATの目標に沿ったものである成果を達成し、低遅延キューイングし続けるので、そのようなAQMはまだ望ましいです。さらに、ECNをサポートLEDBAT輸送はECN対応のTCPは、ECN-とらわれないTCP上で楽しむ利点を楽しんでいます。損失と可能性の再送信を回避することができます。いくつかのホームゲートウェイによって使用されるような均等化キューイング（WFQ）は、同時長命の流れによって構築立っキューによる遅延の遅延に敏感なフローを隔離して保護することを目指しています。それは、他のTCPフローにもたらすからLEDBATを防止しながら、その結果、それは再びLEDBATの目標[SCH10]と一致している結果を達成します。"
    },
    {
      "indent": 0,
      "text": "2. LEDBAT Congestion Control",
      "section_title": true,
      "ja": "2. LEDBAT輻輳制御"
    },
    {
      "indent": 0,
      "text": "2.1. Overview",
      "section_title": true,
      "ja": "2.1。概要"
    },
    {
      "indent": 3,
      "text": "A standard TCP sender increases its congestion window until a loss occurs [RFC5681] or an ECN mark is received [RFC3168], which, in the absence of link errors in the network, occurs only when the queue at the bottleneck link on the end-to-end path overflows or an AQM is applied. Since packet loss or marking at the bottleneck link is expected to be preceded by an increase in the queueing delay at the bottleneck link, LEDBAT congestion control uses this increase in queueing delay as an early signal of congestion, enabling it to respond to congestion earlier than standard TCP and enabling it to yield bandwidth to a competing TCP flow.",
      "ja": "ネットワーク内のリンクエラーが存在しない場合に、エンド上のボトルネックリンクにのみときにキューを発生し、損失は[RFC5681]を発生するか、ECNマークが[RFC3168]を受信するまで、標準的なTCP送信者は、その輻輳ウィンドウを増加させますエンドツーエンドのパスは、オーバーフロー又はAQMが適用されます。パケット損失またはボトルネックリンクにマーキングがボトルネックリンクにおけるキューイング遅延の増加が先行することが期待されているので、LEDBAT輻輳制御は、以前より混雑に応答することを可能にする、輻輳の初期信号としてキューイング遅延の増加を使用し標準のTCPと競合するTCPフローに帯域幅を得るためにそれを可能にします。"
    },
    {
      "indent": 3,
      "text": "LEDBAT employs one-way delay measurements to estimate queueing delay. When the estimated queueing delay is less than a predetermined target, LEDBAT infers that the network is not yet congested and increases its sending rate to utilize any spare capacity in the network. When the estimated queueing delay becomes greater than the predetermined target, LEDBAT decreases its sending rate as a response to potential congestion in the network.",
      "ja": "LEDBATは、キューイング遅延を推定するために一方向遅延測定値を採用します。推定されたキューイング遅延が所定の目標よりも小さいとき、LEDBATネットワークがまだ混雑ではなく、ネットワーク内の任意の空き容量を利用するために、その送信レートを増加させることを推測します。推定されたキューイング遅延が所定の目標よりも大きくなると、LEDBATは、ネットワーク内の潜在的な輻輳に対する応答として、その送信レートを減少させます。"
    },
    {
      "indent": 0,
      "text": "2.2. Preliminaries",
      "section_title": true,
      "ja": "2.2。予備"
    },
    {
      "indent": 3,
      "text": "A LEDBAT sender uses a congestion window (cwnd) to gate the amount of data that the sender can send into the network in one round-trip time (RTT). A sender MAY maintain its cwnd in bytes or in packets; this document uses cwnd in bytes. LEDBAT requires that each data segment carries a \"timestamp\" from the sender, based on which the receiver computes the one-way delay from the sender and sends this computed value back to the sender.",
      "ja": "LEDBATの送信者は、ゲートに送信者が1ラウンドトリップ時間（RTT）でネットワークに送信できるデータの量を輻輳ウィンドウ（CWND）を使用しています。送信者は、バイト単位またはパケットにそのCWNDを維持することができます。この文書では、バイト単位でのcwndを使用しています。 LEDBATは、各データ・セグメントは、受信機が送信機から一方向遅延を計算し、送信者に、この計算された値を送信するに基づいて、送信者からの「タイムスタンプ」を運ぶことを必要とします。"
    },
    {
      "indent": 3,
      "text": "In addition to the LEDBAT mechanism described below, we note that a slow start mechanism can be used as specified in [RFC5681]. Since slow start leads to faster increase in the window than that specified in LEDBAT, conservative congestion control implementations employing LEDBAT may skip slow start altogether and start with an initial window of INIT_CWND * MSS. (INIT_CWND is described later in Section 2.5.)",
      "ja": "以下に説明するLEDBAT機構に加えて、我々は、[RFC5681]で指定されるようにスロースタート機構を使用することができることに留意されたいです。スロースタートはLEDBATで指定されたものよりもウィンドウの速い増加につながるため、LEDBATを用い保守的輻輳制御の実装は完全に起動しINIT_CWND * MSSの初期ウィンドウで開始遅いスキップすることができます。 （INIT_CWNDは、2.5節で後述されます。）"
    },
    {
      "indent": 3,
      "text": "The term \"MSS\", or the sender's Maximum Segment Size, used in this document refers to the size of the largest segment that the sender can transmit. The value of MSS can be based on the path MTU discovery [RFC4821] algorithm and/or on other factors.",
      "ja": "この文書で使用される用語「MSS」、または送信者の最大セグメントサイズは、送信者が送信できる最大セグメントのサイズを指します。 MSSの値は、パスMTU探索[RFC4821]アルゴリズムおよび/または他の要因に基づくことができます。"
    },
    {
      "indent": 0,
      "text": "2.3. Receiver-Side Operation",
      "section_title": true,
      "ja": "2.3。受信側の操作"
    },
    {
      "indent": 3,
      "text": "A LEDBAT receiver calculates the one-way delay from the sender to the receiver based on its own system time and timestamps in the received data packets. The receiver then feeds the computed one-way delay back to the sender in the next acknowledgement. A LEDBAT receiver operates as follows:",
      "ja": "LEDBAT受信機は、独自のシステム時刻と受信したデータパケットのタイムスタンプに基づいて、送信側から受信側への一方向の遅延を算出します。受信機は、その後、バック次の確認応答で送信者に計算一方向遅延を供給する。次のようにLEDBAT受信機が動作します。"
    },
    {
      "indent": 3,
      "text": "on data_packet: remote_timestamp = data_packet.timestamp acknowledgement.delay = local_timestamp() - remote_timestamp # fill in other fields of acknowledgement acknowledgement.send()",
      "ja": "data_packet上：remote_timestamp = data_packet.timestamp acknowledgement.delay = local_timestamp（） -  remote_timestamp＃が（確認応答acknowledgement.sendの他のフィールドに記入）"
    },
    {
      "indent": 3,
      "text": "A receiver may choose to delay sending an ACK and may combine acknowledgements for more than one data packet into a single ACK packet, as with delayed ACKs in standard TCP, for example. In such cases, the receiver MAY bundle all the delay samples into one ACK packet and MUST transmit the samples in the order generated. When multiple delay samples are bundled within a single ACK, the sender applies these bundled delay samples at once during its cwnd adjustment (discussed in the next section). Since the sender's adjustment may be sensitive to the order in which the delay samples are applied, the computed delay samples should be available to the sender in the order they were generated at the receiver.",
      "ja": "受信機はACKを送信遅らせることを選択してもよいし、例えば、標準のTCPにおける遅延ACKと同様に、単一のACKパケットに複数のデータパケットのための肯定応答を組み合わせることができます。このような場合、受信機は、一つのACKパケットに全ての遅延サンプルをバンドルMAY、生成順にサンプルを送信しなければなりません。複数の遅延サンプルが単一ACK内にバンドルされている場合、送信者は、（次のセクションで説明する）、そのCWND調整時に一度、これらのバンドルされた遅延サンプルを適用します。送信者の調整は遅延サンプルが適用される順序に敏感であるので、計算された遅延サンプルは、それらが受信機で生成された順序で送信者に利用可能であるべきです。"
    },
    {
      "indent": 0,
      "text": "2.4. Sender-Side Operation",
      "section_title": true,
      "ja": "2.4。送信側の操作"
    },
    {
      "indent": 0,
      "text": "2.4.1. An Overview",
      "section_title": true,
      "ja": "2.4.1。概要"
    },
    {
      "indent": 3,
      "text": "As a first approximation, a LEDBAT sender operates as shown below; the complete algorithm is specified later in Section 2.4.2. TARGET is the maximum queueing delay that LEDBAT itself may introduce in the network, and GAIN determines the rate at which the cwnd responds to changes in queueing delay; both constants are specified later. off_target is a normalized value representing the difference between the measured current queueing delay and the predetermined TARGET delay. off_target can be positive or negative; consequently, cwnd increases or decreases in proportion to off_target.",
      "ja": "以下に示すように、第1の近似として、LEDBAT送信者が動作します。完全なアルゴリズムは、後のセクション2.4.2で指定されています。 TARGETはLEDBAT自身がネットワークに導入することができる最大キューイング遅延であり、GAINは、CWNDがキューイング遅延の変化に応答する速度を決定します。両方の定数は、後に指定されています。 off_targetは、測定された現在のキューイング遅延と所定の目標遅延との間の差を表す正規化された値です。 off_targetは正または負とすることができます。従って、増加するcwndを又はoff_targetに比例して減少します。"
    },
    {
      "indent": 3,
      "text": "on initialization: base_delay = +INFINITY",
      "ja": "初期化時に：base_delay = + INFINITY"
    },
    {
      "indent": 3,
      "text": "on acknowledgement: current_delay = acknowledgement.delay base_delay = min(base_delay, current_delay) queuing_delay = current_delay - base_delay off_target = (TARGET - queuing_delay) / TARGET cwnd += GAIN * off_target * bytes_newly_acked * MSS / cwnd",
      "ja": "肯定応答で：current_delay = acknowledgement.delay base_delay =分（base_delay、current_delay）queuing_delay = current_delay  -  base_delay off_target =（TARGET  -  queuing_delay）/ TARGET CWND + = GAIN * off_target * bytes_newly_acked * MSS / CWND"
    },
    {
      "indent": 3,
      "text": "The simplified mechanism above ignores multiple delay samples in an acknowledgement, noise filtering, base delay expiration, and sender idle times, which we now take into account in our complete sender algorithm below.",
      "ja": "単純化のメカニズムは、上記の私たちが今、下記の当社の完全な送信者アルゴリズムで考慮に入れ、複数の受信確認の遅延サンプル、ノイズフィルタリング、ベース遅延の有効期限、および送信元アイドル時間を、無視します。"
    },
    {
      "indent": 0,
      "text": "2.4.2. The Complete Sender Algorithm",
      "section_title": true,
      "ja": "2.4.2。完全な送信者アルゴリズム"
    },
    {
      "indent": 3,
      "text": "update_current_delay() maintains a list of one-way delay measurements, of which a filtered value is used as an estimate of the current end-to-end delay. update_base_delay() maintains a list of one-way delay minima over a number of one-minute intervals, to measure and to track changes in the base delay of the end-to-end path. Both of these lists are maintained per LEDBAT flow.",
      "ja": "update_current_delay（）は、フィルタリングされた値が現在のエンドツーエンド遅延の推定値として使用された一方向遅延測定値のリストを維持します。 update_base_delayは（）を測定し、エンドツーエンドパスのベース遅延の変化を追跡するために、1分間隔の数にわたって一方向遅延の最小値のリストを維持します。これらのリストの両方がLEDBATフローごとに維持されています。"
    },
    {
      "indent": 3,
      "text": "We note this algorithm assumes that slight random fluctuations exist in inter-packet arrival times at the bottleneck queue, to allow a LEDBAT sender to correctly measure the base delay. See Section 4.4 for a more complete discussion.",
      "ja": "私たちは、このアルゴリズムは多少のランダムな変動はLEDBATの送信者が正しくベースの遅延を測定できるようにするために、ボトルネックキューのパケット間到着時間内に存在することを前提としています。より完全な議論については、セクション4.4を参照してください。"
    },
    {
      "indent": 3,
      "text": "The full sender-side algorithm is given below:",
      "ja": "フル送信側アルゴリズムは以下の通りであります："
    },
    {
      "indent": 3,
      "text": "on initialization: # cwnd is the amount of data that is allowed to be # outstanding in an RTT and is defined in bytes. # CTO is the congestion timeout value.",
      "ja": "初期化時に＃のCWNDは、RTTで優れ＃ことが許可され、バイト単位で定義されたデータの量です。 ＃CTOは、輻輳のタイムアウト値です。"
    },
    {
      "indent": 7,
      "text": "create current_delays list with CURRENT_FILTER elements\ncreate base_delays list with BASE_HISTORY number of elements\ninitialize elements in base_delays to +INFINITY\ninitialize elements in current_delays according to FILTER()\nlast_rollover = -INFINITY # More than a minute in the past\nflightsize = 0\ncwnd = INIT_CWND * MSS\nCTO = 1 second",
      "raw": true
    },
    {
      "indent": 3,
      "text": "on acknowledgement: # flightsize is the amount of data outstanding before this ACK # was received and is updated later; # bytes_newly_acked is the number of bytes that this ACK # newly acknowledges, and it MAY be set to MSS.",
      "ja": "承認にします。＃flightsizeは、このACK番号が受信された以降に更新される前の未処理データの量です。 ＃bytes_newly_ackedは、このACK番号が新たに認めたバイト数であり、MSSに設定されるかもしれません。"
    },
    {
      "indent": 7,
      "text": "for each delay sample in the acknowledgement:\n    delay = acknowledgement.delay\n    update_base_delay(delay)\n    update_current_delay(delay)",
      "raw": true
    },
    {
      "indent": 7,
      "text": "queuing_delay = FILTER(current_delays) - MIN(base_delays) off_target = (TARGET - queuing_delay) / TARGET cwnd += GAIN * off_target * bytes_newly_acked * MSS / cwnd max_allowed_cwnd = flightsize + ALLOWED_INCREASE * MSS cwnd = min(cwnd, max_allowed_cwnd) cwnd = max(cwnd, MIN_CWND * MSS) flightsize = flightsize - bytes_newly_acked update_CTO()",
      "ja": "queuing_delay = FILTER（current_delays） -  MIN（base_delays）off_target =（TARGET  -  queuing_delay）/ TARGET CWND + = GAIN * off_target * bytes_newly_acked * MSS / CWND max_allowed_cwnd = flightsize + ALLOWED_INCREASE * MSS CWND =分（CWND、max_allowed_cwnd）CWND =最大update_CTO bytes_newly_acked（） - （cwndを、MIN_CWND * MSS）flightsize = flightsize"
    },
    {
      "indent": 3,
      "text": "on data loss: # at most once per RTT cwnd = min (cwnd, max (cwnd/2, MIN_CWND * MSS)) if data lost is not to be retransmitted: flightsize = flightsize - bytes_not_to_be_retransmitted",
      "ja": " -  bytes_not_to_be_retransmitted flightsize = flightsize：データの損失に：失われたデータを再送するようにされていない場合、最高1回RTTあたり位=分（cwndを、最大（CWND / 2、MIN_CWND * MSS））をcwndを"
    },
    {
      "indent": 3,
      "text": "if no ACKs are received within a CTO: # extreme congestion, or significant RTT change. # set cwnd to 1MSS and backoff the congestion timer. cwnd = 1 * MSS CTO = 2 * CTO",
      "ja": "＃極端な混雑、または重大なRTTの変更：なしACKがCTO内に受信されない場合。 ＃セットは1MSSにcwndをし、輻輳タイマーをバックオフ。 CWND = 1 * MSS CTO = 2 * CTO"
    },
    {
      "indent": 0,
      "text": "update_CTO() # implements an RTT estimation mechanism using data # transmission times and ACK reception times, # which is used to implement a congestion timeout (CTO). # If implementing LEDBAT in TCP, sender SHOULD use # mechanisms described in RFC 6298 [RFC6298], # and the CTO would be the same as the retransmission timeout (RTO).",
      "ja": "update_CTO（）＃は、データ＃伝送時間及びACK受信時間を用いて輻輳タイムアウト（CTO）を実装するために使用されている位RTT推定機構を実装します。 ＃[RFC6298]送信者はRFC 6298に記載され＃メカニズムを使用する必要がありTCPにLEDBATを実装する場合、＃とCTOは、再送タイムアウト（RTO）と同じであろう。"
    },
    {
      "indent": 3,
      "text": "update_current_delay(delay) # Maintain a list of CURRENT_FILTER last delays observed. delete first item in current_delays list append delay to current_delays list",
      "ja": "update_current_delay（遅延）＃は、最後の遅延が認められCURRENT_FILTERのリストを維持します。 current_delaysリストにcurrent_delaysリストアペンド遅延の最初の項目を削除"
    },
    {
      "indent": 3,
      "text": "update_base_delay(delay) # Maintain BASE_HISTORY delay-minima. # Each minimum is measured over a period of a minute. # 'now' is the current system time if round_to_minute(now) != round_to_minute(last_rollover) last_rollover = now delete first item in base_delays list append delay to base_delays list else base_delays.tail = MIN(base_delays.tail, delay)",
      "ja": "update_base_delay（遅延）位BASE_HISTORY遅延 - 最小値を維持します。 ＃それぞれの最小値は、1分の期間にわたって測定されます。 ＃ '今' は、現在のシステム時刻ですround_to_minute場合は（今）！= round_to_minute（last_rollover）last_rollover =今base_delaysリスト他base_delays.tail = MIN（base_delays.tail、遅延）にbase_delaysリストアペンド遅延の最初の項目を削除"
    },
    {
      "indent": 3,
      "text": "The LEDBAT sender seeks to extract the actual delay estimate from the current_delay samples by implementing FILTER() to eliminate any outliers. Different types of filters MAY be used for FILTER() -- a NULL filter, that does not filter at all, is a reasonable candidate as well, since LEDBAT's use of a linear controller for cwnd increase and decrease may allow it to recover quickly from errors induced by bad samples. Another example of a filter is the exponentially weighted moving average (EWMA) function, with weights that enable agile tracking of changing network delay. A simple MIN filter applied over a small window (much smaller than BASE_HISTORY) may also provide robustness to large delay peaks, as may occur with delayed ACKs in TCP. Care should be taken that the filter used, while providing robustness to noise, remains sensitive to persistent congestion signals.",
      "ja": "LEDBAT送信者は、任意の異常値を除去するためのフィルタ（）を実装することによってcurrent_delay試料からの実際の遅延推定値を抽出しようとするものです。異なるタイプのフィルタは）（FILTERのために使用されるかもしれ - のcwndの増加と減少のための線形コントローラのLEDBATの使用はそれからすぐに回復することを可能にするので、まったくフィルタリングしないNULLフィルタは、だけでなく、合理的な候補であります悪いサンプルにより誘導されたエラー。フィルタの別の例は、ネットワーク遅延を変化させるアジャイルトラッキングを有効量の指数加重移動平均（EWMA）関数です。小さな窓（BASE_HISTORYよりはるかに小さい）の上に適用単純MINフィルタはまた、TCPにおける遅延ACKで起こり得るような、大きな遅延ピークに対するロバスト性を提供することができます。ケアは、ノイズに対するロバスト性を提供しながら、持続的な輻輳信号に対して感受性のまま、フィルタを用いることに注意すべきです。"
    },
    {
      "indent": 3,
      "text": "We note that when multiple delay samples are bundled within a single ACK, the sender's resulting cwnd may be slightly different than when the samples are sent individually in separate ACKs. The cwnd is adjusted based on the total number of bytes ACKed and the final filtered value of queueing_delay, irrespective of the number of delay samples in an ACK.",
      "ja": "我々は、複数の遅延サンプルが単一ACKにバンドルされている場合、送信者得CWNDは、サンプルが別のACKで個別に送信される場合よりもわずかに異なっていてもよいことに留意されたいです。 CWNDにかかわらずACKの遅延サンプル数の、ACKされたバイトの総数とqueueing_delayの最終的なフィルタリングされた値に基づいて調整されます。"
    },
    {
      "indent": 3,
      "text": "To implement an approximate minimum over the past few minutes, a LEDBAT sender stores BASE_HISTORY separate minima -- one each for the last BASE_HISTORY-1 minutes, and one for the running current minute. At the end of the current minute, the window moves -- the earliest minimum is dropped and the latest minimum is added. If the connection is idle for a given minute, no data is available for the one-way delay and, therefore, a value of +INFINITY has to be stored in the list. If the connection has been idle for BASE_HISTORY minutes, all minima in the list are thus set to +INFINITY and measurement begins anew. LEDBAT thus requires that during idle periods, an implementation must maintain the base delay list.",
      "ja": "最後BASE_HISTORY-1分に1つずつ、および実行中の現在の分に1つ - 、過去数分かけてLEDBAT送信者の店舗BASE_HISTORY個別の最小値をおおよその最小を実現するために。現在の分の終了時に、ウィンドウが動く - 最古の最小値が削除され、最新の最小値が追加されます。接続が所定分間アイドル状態である場合、データは一方向遅延のために利用可能でない、従って、+無限大の値がリストに格納されなければなりません。接続がBASE_HISTORY分間アイドル状態になっている場合は、リスト内のすべての最小値は、このように+のINFINITYに設定し、測定を新たに開始しています。 LEDBATは、このようにアイドル期間中、実装はベース遅延リストを維持しなければならないことを要求します。"
    },
    {
      "indent": 3,
      "text": "LEDBAT restricts cwnd growth after a period of inactivity. When the sender is application-limited, the sender's cwnd is clamped down using max_allowed_cwnd to a little more than flightsize. To be TCP-friendly, LEDBAT halves its cwnd on data loss.",
      "ja": "LEDBATは、非アクティブの期間後にcwndの成長を制限します。送信者はアプリケーションが制限されている場合は、送信者のcwndはflightsizeより少しにmax_allowed_cwndを使用してダウンクランプされています。 TCPフレンドリーにするために、LEDBATは、データ損失へのcwndの半分になります。"
    },
    {
      "indent": 3,
      "text": "LEDBAT uses a congestion timeout (CTO) to avoid transmitting data during periods of heavy congestion and to avoid congestion collapse. A CTO is used to detect heavy congestion indicated by loss of all outstanding data or acknowledgements, resulting in reduction of the cwnd to 1 MSS and an exponential backoff of the CTO interval. This backoff of the CTO value avoids sending more data into an overloaded queue, and it also allows the sender to cope with sudden changes in the RTT of the path. The function of a CTO is similar to that of an retransmission timeout (RTO) in TCP [RFC6298], but since LEDBAT separates reliability from congestion control, a retransmission need not be triggered by a CTO. LEDBAT, however, does not preclude a CTO from triggering retransmissions, as could be the case if LEDBAT congestion control were to be used with TCP framing and reliability.",
      "ja": "LEDBAT重輻輳の期間中にデータを送信回避し、輻輳崩壊を回避するために、輻輳タイムアウト（CTO）を使用します。 CTOは、1 MSSのCWNDおよびCTO間隔の指数バックオフの低減をもたらす、すべての未処理データ又は確認応答の喪失によって示される重輻輳を検出するために使用されます。 CTO値のこのバックオフは、オーバーロードキューに、より多くのデータを送信回避し、それはまた、送信者がパスのRTTの急激な変化に対応することを可能にします。 CTOの機能は、TCP [RFC6298]に再送タイムアウト（RTO）のものと同様であるが、LEDBATが輻輳制御の信頼性を分離するので、再送はCTOによってトリガされる必要はありません。 LEDBAT輻輳制御はTCPのフレーミングと信頼性で使用された場合のケースかもしれないようLEDBATは、しかし、再送信をトリガからCTOを排除するものではありません。"
    },
    {
      "indent": 3,
      "text": "The CTO is a gating mechanism that ensures exponential backoff of sending rate under heavy congestion, and it may be implemented with or without a timer. An implementation choosing to avoid timers may consider using a \"next-time-to-send\" variable, set based on the CTO, to control the earliest time a sender may transmit without receiving any ACKs. A maximum value MAY be placed on the CTO, and if placed, it MUST be at least 60 seconds.",
      "ja": "CTOは、渋滞の下率を送信する指数バックオフを確実にゲーティング機構であり、それがでたり、タイマーなしで実施することができます。タイマーを避けるために、選択、実装は、送信者が任意のACKを受信せずに送信してもよい最も早い時間を制御するために、CTOに基づいて設定した「次回-へ送る」変数を、使用して検討すること。最大値は、CTO上に配置することができる、と置いた場合、それは少なくとも60秒でなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.5. Parameter Values",
      "section_title": true,
      "ja": "2.5。パラメータ値"
    },
    {
      "indent": 3,
      "text": "TARGET MUST be 100 milliseconds or less, and this choice of value is explained further in Section 3.3. Note that using the same TARGET value across LEDBAT flows enables equitable sharing of the bottleneck bandwidth. A flow with a higher TARGET value than other competing LEDBAT flows may get a larger share of the bottleneck bandwidth. It is possible to consider the use of different TARGET values for implementing a relative priority between two competing LEDBAT flows by setting a higher TARGET value for the higher-priority flow.",
      "ja": "TARGETは、100ミリ秒以下にする必要があり、その値のこの選択は、セクション3.3でさらに説明されます。 LEDBATフロー全体で同じ目標値を使用すると、ボトルネック帯域の公平な共有を可能にすることに注意してください。他の競合LEDBATの流れよりも高い目標値を持つフローがボトルネック帯域幅の大きなシェアを得ることができます。より高い優先度のフローのためのより高い目標値を設定することにより、2つの競合LEDBATフローとの間の相対的な優先順位を実現するために異なる目標値の使用を考慮することが可能です。"
    },
    {
      "indent": 3,
      "text": "ALLOWED_INCREASE SHOULD be 1, and it MUST be greater than 0. An ALLOWED_INCREASE of 0 results in no cwnd growth at all, and an ALLOWED_INCREASE of 1 allows and limits the cwnd increase based on flightsize in the previous RTT. An ALLOWED_INCREASE greater than 1 MAY be used when interactions between LEDBAT and the framing protocol provide a clear reason for doing so.",
      "ja": "ALLOWED_INCREASEは1であるべきであり、全くCWND成長、及び1のALLOWED_INCREASE 0結果の0アンALLOWED_INCREASEを可能にし、前のRTTにおけるflightsizeに基づいて、CWNDの増加を制限するよりも大きくなければなりません。 LEDBATとフレーミングプロトコル間の相互作用がそうするための明確な理由を提供したときに1より大きいALLOWED_INCREASEを使用することができます。"
    },
    {
      "indent": 3,
      "text": "GAIN MUST be set to 1 or less. A GAIN of 1 limits the maximum cwnd ramp-up to the same rate as TCP Reno in Congestion Avoidance. While this document specifies the use of the same GAIN for both cwnd increase (when off_target is greater than zero) and decrease (when off_target is less than zero), implementations MAY use a higher GAIN for cwnd decrease than for the increase; our justification follows. When a competing non-LEDBAT flow increases its sending rate, the LEDBAT sender may only measure a small amount of additional delay and decrease the sending rate slowly. To ensure no impact on a competing non-LEDBAT flow, the LEDBAT flow should decrease its sending rate at least as quickly as the competing flow increases its sending rate. A higher decrease-GAIN MAY be used to allow the LEDBAT flow to decrease its sending rate faster than the competing flow's increase rate.",
      "ja": "GAINは1以下に設定しなければなりません。 1の利得は輻輳回避におけるTCPリノと同じ速度に最大CWNDランプアップを制限します。この文書は（off_targetがゼロ未満である場合）CWNDが増加（off_targetがゼロより大きい場合）及び減少の両方のために同じ利得の使用を指定しながら、実装は増加のよりCWND減少のために高い利得を使用することができます。私たちの正当化は、以下の通りです。競合する非LEDBATフローがその送信レートを増加させた場合、LEDBAT送信者のみで追加遅延の小さな量を測定し、ゆっくりと、送信速度が低下することがあります。競合する非LEDBATフローに影響を確認しないように、LEDBAT流は少なくとも早く競合フローがその送信レートを増加させるように、その送信レートを低下させるべきです。高減少-GAINはLEDBATの流れが速く、競合するフローの増加率よりもその送信速度を減少させることを可能にするために使用されるかもしれません。"
    },
    {
      "indent": 3,
      "text": "The size of the base_delays list, BASE_HISTORY, SHOULD be 10. If the actual base delay decreases, due to a route change, for instance, a LEDBAT sender adapts immediately, irrespective of the value of BASE_HISTORY. If the actual base delay increases, however, a LEDBAT sender will take BASE_HISTORY minutes to adapt and may wrongly infer a little more extra delay than intended (TARGET) in the meanwhile. A value for BASE_HISTORY is thus a trade-off: a higher value may yield a more accurate measurement when the base delay is unchanging, and a lower value results in a quicker response to actual increase in base delay.",
      "ja": "実際のベース遅延による経路変更に、減少した場合base_delaysリストのサイズは、BASE_HISTORYは、10でなければならず、例えば、LEDBAT送信者に関係なくBASE_HISTORYの値に、即座に適応します。実際のベース遅延が増加した場合は、しかし、LEDBATの送信者が適応するBASE_HISTORY分かかりますし、誤っ一方で意図（TARGET）よりも少し余分な遅延を推論することができます。 BASE_HISTORYの値は、このようなトレードオフである：ベース遅延は不変である場合に、より正確な測定を得ることができるより高い値、及びベース遅延の実際の増加に迅速に応答して低い値をもたらします。"
    },
    {
      "indent": 3,
      "text": "A LEDBAT sender uses the current_delays list to maintain only delay measurements made within an RTT amount of time in the past, seeking to eliminate noise spikes in its measurement of the current one-way delay through the network. The size of this list, CURRENT_FILTER, may be variable, and it depends on the FILTER() function as well as the number of successful measurements made within an RTT amount of time in the past. The sender should seek to gather enough delay samples in each RTT so as to have statistical confidence in the measurements. While the number of delay samples required for such confidence will vary depending on network conditions, the sender SHOULD use at least 4 delay samples in each RTT, unless the number of samples is lower due to a small congestion window. The value of CURRENT_FILTER will depend on the filter being employed, but CURRENT_FILTER MUST be limited such that samples in the list are not older than an RTT in the past.",
      "ja": "LEDBAT送信者は、ネットワークを介して現在の一方向遅延のその測定のノイズスパイクを除去しようと、過去の時間のRTT量内で行わだけ遅延測定を維持するためにcurrent_delaysリストを使用します。このリストのサイズ、CURRENT_FILTERは、可変であってもよく、それはFILTER（）関数と同様に過去の時間のRTT量内に作られた成功した測定値の数に依存します。送信者は、測定における統計自信を持つように各RTTに十分な遅延サンプルを収集するために努めるべきです。そのような信頼のために必要な遅延サンプルの数は、ネットワーク状態に応じて変化するが、サンプル数が少ない混雑ウィンドウに低いによるものでない限り、送信側は、各RTT少なくとも4つの遅延サンプルを使用すべきです。 CURRENT_FILTERの値は、使用されるフィルタに依存するであろうが、CURRENT_FILTERリスト内のサンプルが過去のRTTよりも古くないように制限されなければなりません。"
    },
    {
      "indent": 3,
      "text": "INIT_CWND and MIN_CWND SHOULD both be 2. An INIT_CWND of 2 should help seed FILTER() at the sender when there are no samples at the beginning of a flow, and a MIN_CWND of 2 allows FILTER() to use more than a single instantaneous delay estimate while not being too aggressive. Slight deviations may be warranted, for example, when these values of INIT_CWND and MIN_CWND interact poorly with the framing protocol. However, INIT_CWND and MIN_CWND MUST be no larger than the corresponding values specified for TCP [RFC5681].",
      "ja": "INIT_CWNDとMIN_CWNDは両方の流れの先頭にないサンプルが存在しない場合に2の2アンINIT_CWNDが送信者にシードフィルタ（）に役立つはずであるべきであり、2のMIN_CWNDは、フィルタ（）単一の瞬時遅延以上を使用することができ推定値はあまり積極的ではないが。 INIT_CWNDとMIN_CWNDのこれらの値はフレーミングプロトコルと乏しい相互作用するときにわずかな偏差は、例えば、保証されてもよいです。しかし、INIT_CWNDとMIN_CWNDはTCP [RFC5681]に指定された対応する値よりも大きくてはなりません。"
    },
    {
      "indent": 0,
      "text": "3. Understanding LEDBAT Mechanisms",
      "section_title": true,
      "ja": "3.理解LEDBATメカニズム"
    },
    {
      "indent": 3,
      "text": "This section describes the delay estimation and window management mechanisms used in LEDBAT.",
      "ja": "このセクションでは、LEDBATで使用される遅延推定とウィンドウ管理メカニズムについて説明します。"
    },
    {
      "indent": 0,
      "text": "3.1. Delay Estimation",
      "section_title": true,
      "ja": "3.1。遅延推定"
    },
    {
      "indent": 3,
      "text": "LEDBAT estimates congestion in the direction of the data flow, and to avoid measuring additional delay from, e.g., queue buildup on the reverse path (or ACK path) or reordering, LEDBAT uses one-way delay estimates. LEDBAT assumes that measurements are done with data packets, thus avoiding the need for separate measurement packets and avoiding the pitfall of measurement packets being treated differently from the data packets in the network.",
      "ja": "LEDBATは、データフローの方向に輻輳を推定し、例えば、逆パス（またはACKパス）又はリオーダリング上のキューの蓄積は、LEDBATは、一方向遅延推定値を使用して、から追加の遅延を測定することを回避します。 LEDBATは、測定は、従って別個計測パケットのための必要性を回避し、ネットワーク内のデータ・パケットと異なって処置されている計測パケットの落とし穴を回避し、データパケットを用いて行われることを想定しています。"
    },
    {
      "indent": 3,
      "text": "End-to-end delay can be decomposed into transmission (or serialization) delay, propagation (or speed-of-light) delay, queueing delay, and processing delay. On any given path, barring some noise, all delay components except for queueing delay are constant. To observe an increase in the queueing delay in the network, a LEDBAT sender separates the queueing delay component from the rest of the end-to-end delay, as described below.",
      "ja": "エンドツーエンド遅延は、送信（またはシリアライゼーション）遅延、伝搬（または速度の光）は、遅延、キューイング遅延、処理遅延に分解することができます。任意の所与の経路上に、いくつかのノイズがなければ、キューイング遅延を除く全ての遅延成分は一定です。以下に説明するように、ネットワーク内のキューイング遅延の増加を観察する、LEDBAT送信者は、エンドツーエンド遅延の残りの部分からキューイング遅延成分を分離します。"
    },
    {
      "indent": 0,
      "text": "3.1.1. Estimating Base Delay",
      "section_title": true,
      "ja": "3.1.1。ベース遅延の推定"
    },
    {
      "indent": 3,
      "text": "Since queuing delay is always additive to the end-to-end delay, LEDBAT estimates the sum of the constant delay components, which we call \"base delay\", to be the minimum delay observed on the end-to-end path.",
      "ja": "遅延キューイングは常にエンドツーエンド遅延の添加剤であるので、LEDBATは、我々は、エンドツーエンドパス上で観察最小遅延であると、「ベース遅延」と呼ぶ一定の遅延要素の和を推定します。"
    },
    {
      "indent": 3,
      "text": "To respond to true changes in the base delay, as can be caused by a route change, LEDBAT uses only recent measurements in estimating the base delay. The duration of the observation window itself is a trade-off between robustness of measurement and responsiveness to change -- a larger observation window increases the chances that the true base delay will be detected (as long as the true base delay is unchanged), whereas a smaller observation window results in faster response to true changes in the base delay.",
      "ja": "ルート変更が原因で発生することができように、ベース遅延の真の変化に対応するために、LEDBATは、ベース遅延の推定にのみ最近の測定を使用しています。一方、大きな観察窓が真のベース遅延が検出される可能性を増加させる（限り真ベース遅延が変化しないように） - 観察窓自体の持続時間は、測定のロバスト性と応答性との間のトレードオフを変更することです小さな観察窓ベース遅延の真の変化への迅速な対応で結果。"
    },
    {
      "indent": 0,
      "text": "3.1.2. Estimating Queueing Delay",
      "section_title": true,
      "ja": "3.1.2。キューイング遅延の推定"
    },
    {
      "indent": 3,
      "text": "Assuming that the base delay is constant (in the absence of any route changes), the queueing delay is represented by the variable component of the measured end-to-end delay. LEDBAT measures queueing delay as simply the difference between an end-to-end delay measurement and the current estimate of base delay. The queueing delay should be filtered (depending on the usage scenario) to eliminate noise in the delay estimation, such as due to spikes in processing delay at a node on the path.",
      "ja": "ベース遅延が（任意の経路の変化の非存在下で）一定であると仮定すると、キューイング遅延を測定し、エンドツーエンド遅延の変動成分によって表されます。単にエンドツーエンド遅延測定の間の差とベース遅延の現在の推定値としてキューイング遅延LEDBAT措置。キューイング遅延は、経路上のノードにおける遅延処理におけるスパイクに起因として遅延推定の雑音を除去するために（使用状況に応じて）濾過されるべきです。"
    },
    {
      "indent": 0,
      "text": "3.2. Managing the Congestion Window",
      "section_title": true,
      "ja": "3.2。輻輳ウィンドウの管理"
    },
    {
      "indent": 3,
      "text": "LEDBAT uses a simple linear controller to determine the sending rate as a function of the delay estimate, where the response of the sender is proportional to the difference between the current queueing delay estimate and the target.",
      "ja": "LEDBATは、送信者の応答が現在のキューイング遅延推定と標的との間の差に比例する遅延推定値の関数として送信レートを決定するために、単純な線形コントローラを使用します。"
    },
    {
      "indent": 0,
      "text": "3.2.1. Window Increase: Probing for More Bandwidth",
      "section_title": true,
      "ja": "3.2.1。ウィンドウの増加：より多くの帯域幅の状態調査"
    },
    {
      "indent": 3,
      "text": "When the queuing delay is smaller than a delay target value, as specified by the TARGET parameter in this document, a LEDBAT sender will increase its congestion window proportionally to the relative difference between the current queueing delay and the delay target. As the current queuing delay gets closer to TARGET, LEDBAT's window growth gets slower. To compete fairly with concurrent TCP flows, we set the highest rate of LEDBAT's window growth (when the current queueing delay estimate is zero) to be the same as TCP's (increase of one packet per RTT). In other words, a LEDBAT flow never ramps up faster than a competing TCP flow over the same path. The TARGET value specifies the maximum extra queuing delay that LEDBAT will induce. If the current queuing delay equals the TARGET value, LEDBAT tries to maintain this extra delay.",
      "ja": "キューイング遅延は、遅延目標値よりも小さい場合には、この文書に記載されているTARGETパラメータによって指定されるように、LEDBAT送信者は、現在のキューイング遅延と遅延ターゲットとの間の相対的な差に比例して輻輳ウィンドウを増加させるであろう。現在のキューイング遅延がターゲットに近づくにつれて、LEDBATのウィンドウの成長が遅くなります。 （現在のキューイング遅延推定値がゼロの場合）同時TCPフローとの公正な競争するために、我々は、TCPの（RTTごとに1つのパケットの増加）と同じになるようにLEDBATのウィンドウの成長率が最も高い設定しました。言い換えれば、LEDBATの流れは同じパス上で競合するTCPフローよりも速くランプアップすることはありません。目標値はLEDBATが誘発する最大の余分なキューイング遅延を指定します。現在のキューイング遅延が目標値と等しい場合、LEDBATは、この余分な遅延を維持しようとします。"
    },
    {
      "indent": 0,
      "text": "3.2.2. Window Decrease: Responding to Congestion",
      "section_title": true,
      "ja": "3.2.2。ウィンドウの減少：輻輳への対応"
    },
    {
      "indent": 3,
      "text": "When a sender's queueing delay estimate is higher than the target, the LEDBAT flow's rate should be reduced. LEDBAT's linear controller allows the sender to decrease the window proportional to the difference between the target and the current queueing delay.",
      "ja": "送信者のキューイング遅延推定値が目標値よりも高い場合、LEDBATフローのレートが低減されるべきです。 LEDBATのリニア・コントローラは、送信者がターゲットと現在のキューイング遅延の差にウィンドウの比例を減少させることができます。"
    },
    {
      "indent": 3,
      "text": "Unlike TCP-like loss-based congestion control, LEDBAT seeks to avoid losses and so a LEDBAT sender is not expected to normally rely on losses to determine the sending rate. However, when data loss does occur, LEDBAT must respond as standard TCP does; even if the queueing delay estimates indicate otherwise, a loss is assumed to be a strong indication of congestion. Thus, to deal with severe congestion when packets are dropped in the network, and to provide a fallback against incorrect queuing delay estimates, a LEDBAT sender halves its congestion window when a loss event is detected. As with TCP New-Reno, LEDBAT reduces its cwnd by half at most once per RTT.",
      "ja": "TCPのような損失ベースの輻輳制御とは異なり、LEDBATは損失を回避しようとするので、LEDBATの送信者は、通常、送信レートを決定するための損失に依存すると予想されていません。データ損失が発生したときの標準的なTCPがするようにしかし、LEDBATは応答する必要があります。キューイング遅延推定値が他を示していても、損失は、輻輳の強力な指標であると仮定されます。損失事象が検出されたときにこのように、パケットがネットワーク内で廃棄されたときに激しい混雑に対処するために、そして間違ったキューイング遅延推定値に対するフォールバックを提供するために、LEDBATの送信者は、その輻輳ウィンドウを半分にします。 TCP新リノと同様に、LEDBATはRTTごとに一回、最大で半分にすることによって、そのCWNDを減らします。"
    },
    {
      "indent": 0,
      "text": "3.3. Choosing the Queuing Delay Target",
      "section_title": true,
      "ja": "3.3。キューイング遅延ターゲットを選択します"
    },
    {
      "indent": 3,
      "text": "The International Telecommunication Union's (ITU's) Recommendation G.114 defines a one-way delay of 150 ms to be acceptable for most user voice applications [g114]. Thus, the delay induced by LEDBAT must be well below 150 ms to limit its impact on concurrent delay-sensitive traffic sharing the same bottleneck queue. A target that is too low, on the other hand, increases the sensitivity of the sender's algorithm to noise in the one-way delays and in the delay measurement process, and may lead to reduced throughput for the LEDBAT flow and to under-utilization of the bottleneck link.",
      "ja": "国際電気通信連合（ITUの）勧告G.114は、150ミリ秒の一方向遅延は、ほとんどのユーザーの音声アプリケーション[G114]のために許容可能であると定義しています。したがって、LEDBATによって誘発される遅延は、同じボトルネックキューを共有して同時遅延に敏感なトラフィックへの影響を制限するだけでなく150ミリ秒未満である必要があります。一方、低すぎる目標は、一方向遅延および遅延測定プロセスにおけるノイズに対する送信者のアルゴリズムの感度を増加させ、そしてLEDBATフローのためのアンダー利用に縮小スループットにつながる可能性ボトルネックリンク。"
    },
    {
      "indent": 3,
      "text": "Our recommendation of 100 ms or less as the target is a trade-off between these considerations. Anecdotal evidence indicates that this value works well -- LEDBAT has been implemented and successfully deployed with a target value of 100 ms in two BitTorrent implementations: as the exclusive congestion control mechanism in BitTorrent Delivery Network Accelerator (DNA), and as an experimental mechanism in uTorrent [uTorrent].",
      "ja": "ターゲットとして100ミリ秒以下の私たちの勧告は、これらの考慮事項の間のトレードオフです。の実験機構としてBitTorrentの配信ネットワークアクセラレータ（DNA）で排他的輻輳制御メカニズムとして、そして：LEDBATが実装され、成功2つのBitTorrentの実装では100ミリ秒の目標値に展開された - 事例証拠は、この値はうまく機能することを示しuTorrentの[uTorrentの]。"
    },
    {
      "indent": 0,
      "text": "4. Discussion",
      "section_title": true,
      "ja": "4。討議"
    },
    {
      "indent": 0,
      "text": "4.1. Framing and ACK Frequency Considerations",
      "section_title": true,
      "ja": "4.1。フレーミングとACK周波数の検討事項"
    },
    {
      "indent": 3,
      "text": "While the actual framing and wire format of the protocols using LEDBAT are outside the scope of this document, we briefly consider the data framing and ACK frequency needs of LEDBAT mechanisms.",
      "ja": "LEDBATを使用してプロトコルの実際のフレーミングとワイヤ形式は、この文書の範囲外であるが、我々は簡単にLEDBATメカニズムのデータフレーミングとACK周波数ニーズを考慮する。"
    },
    {
      "indent": 3,
      "text": "To compute the data path's one-way delay, our discussion of LEDBAT assumes a framing that allows the sender to timestamp packets and for the receiver to convey the measured one-way delay back to the sender in ACK packets. LEDBAT does not require this particular method, but it does require unambiguous delay estimates using data and ACK packets.",
      "ja": "データ・パスの一方向遅延を計算するには、LEDBATの議論は、送信者がパケットをタイムスタンプと受信機がACKパケットで送信者に測定された一方向遅延を伝えるためにすることを可能にするフレーミングを前提としています。 LEDBATは、この特定の方法を必要としませんが、それは、データとACKパケットを使用して明確な遅延推定値を必要としません。"
    },
    {
      "indent": 3,
      "text": "A LEDBAT receiver may send an ACK as frequently as one for every data packet received or less frequently; LEDBAT does require that the receiver MUST transmit at least one ACK in every RTT.",
      "ja": "LEDBAT受信機は、パケットがそれほど頻繁に受信またはすべてのデータのための1つほど頻繁にACKを送信することができます。 LEDBATは、受信機は、すべてのRTTに少なくとも一つのACKを送信しなければならないことを必要としません。"
    },
    {
      "indent": 0,
      "text": "4.2. Competing with TCP Flows",
      "section_title": true,
      "ja": "4.2。 TCPフローとの競合"
    },
    {
      "indent": 3,
      "text": "LEDBAT is designed to respond to congestion indications earlier than loss-based standard TCP [RFC5681]. A LEDBAT flow gets more aggressive as the queueing delay estimate gets lower; since the queueing delay estimate is non-negative, LEDBAT is most aggressive when the queueing delay estimate is zero. In this case, LEDBAT ramps up its congestion window at the same rate as standard TCP [RFC5681]. LEDBAT may reduce its rate earlier than standard TCP and always halves its congestion window on loss. Thus, in the worst case, where the delay estimates are completely and consistently off, a LEDBAT flow falls back to standard TCP behavior, and is no more aggressive than standard TCP [RFC5681].",
      "ja": "LEDBATは損失ベースの標準TCP [RFC5681]より前の混雑指摘に応答するように設計されています。 LEDBATフローがキューイング遅延推定値が低くなるように、より積極的な取得します。キューイング遅延推定値が非負であるため、キューイング遅延推定値がゼロの場合、LEDBATは最も積極的です。標準TCP [RFC5681]と同じ速度で、この場合には、LEDBATランプアップその輻輳ウィンドウを。 LEDBATは、標準のTCPよりも早くそのレートを削減し、常に損失にその輻輳ウィンドウを半分にします。したがって、遅延推定値は完全かつ一貫して切断され、最悪の場合に、LEDBATフローはバック標準TCPの動作に落ちず、標準的なTCP [RFC5681]より積極的です。"
    },
    {
      "indent": 0,
      "text": "4.3. Competing with Non-TCP Flows",
      "section_title": true,
      "ja": "4.3。非TCPフローとの競合"
    },
    {
      "indent": 3,
      "text": "While LEDBAT yields to all high-load flows, both TCP and non-TCP, LEDBAT may not yield to low-load and latency-sensitive traffic that do not induce a measurable delay at the bottleneck queue, such as Voice over IP (VoIP) traffic. While such flows will experience additional delay due to any concurrent LEDBAT flows, the TARGET delay sets a limit to the total amount of additional delay that all the concurrent LEDBAT flows will jointly induce. If the TARGET delay is higher than what the bottleneck queue can sustain, the LEDBAT flows should experience loss and will fall back to standard loss-based TCP behavior. Thus, in the worst case, LEDBAT will add no more latency than standard TCP when competing with non-TCP flows. In the common case however, we expect LEDBAT flows to add TARGET amount of delay, which ought to be within the delay tolerance for most latency-sensitive applications, including VoIP applications.",
      "ja": "すべての高負荷フローにLEDBAT利回り、TCPおよび非TCPの両方が、LEDBATは、ボイスオーバーIP（VoIP）のように、ボトルネックキューで測定可能な遅延を誘発しない低負荷および遅延の影響を受けやすいトラフィックに得られない場合がありますトラフィック。そのような流れは、何らかの同時LEDBATフローに追加の遅延を経験するが、目標遅延は、すべての同時LEDBATフローが共同で誘発する付加的な遅延の総量に制限を設定します。 TARGET遅延がボトルネックキューを維持することができるものよりも高い場合、LEDBATフローは、損失を経験しなければならないし、バック標準損失ベースのTCPの挙動に分類されます。非TCPフローと競合する場合このように、最悪の場合には、LEDBATは、標準のTCPよりも多くの待ち時間を追加しません。一般的なケースではしかし、我々はLEDBATはどれがVoIPアプリケーションを含むほとんどの遅延の影響を受けやすいアプリケーションのための遅延の許容範囲内であるべき、遅延の目標量を追加する流れを期待しています。"
    },
    {
      "indent": 0,
      "text": "4.4. Fairness among LEDBAT Flows",
      "section_title": true,
      "ja": "4.4。 LEDBATフロー間の公平性"
    },
    {
      "indent": 3,
      "text": "The primary design goals of LEDBAT are focused on the aggregate behavior of LEDBAT flows when they compete with standard TCP. Since LEDBAT is designed for background traffic, we consider link utilization to be more important than fairness amongst LEDBAT flows. Nevertheless, we now consider fairness issues that might arise amongst competing LEDBAT flows.",
      "ja": "彼らは、標準のTCPと競合する場合LEDBATの集計行動に焦点を当てているLEDBATの主要な設計目標が流れます。 LEDBATがバックグラウンドトラフィックのために設計されているので、我々は、リンク使用率がLEDBATの流れの中で、公平性よりも重要であると考えています。それにもかかわらず、我々は今、競合LEDBATの流れの中で発生する可能性、公平性の問題を検討します。"
    },
    {
      "indent": 3,
      "text": "LEDBAT as described so far lacks a mechanism specifically designed to equalize utilization amongst LEDBAT flows. Anecdotally observed behavior of existing implementations indicates that a rough equalization does occur since in most environments some amount of randomness in the inter-packet transmission times exists, as explained further below.",
      "ja": "これまで説明したようにLEDBATは、具体的にLEDBATフロー間で利用率を均一化するように設計された機構を欠いています。既存の実装の逸話的に観察された挙動は、粗い等化は、ほとんどの環境でパケット間の伝送時間のランダム性のある量が存在するため、以下にさらに説明するように、発生したことを示しています。"
    },
    {
      "indent": 3,
      "text": "Delay-based congestion control systems suffer from the possibility of latecomers incorrectly measuring and using a higher base-delay than an active flow that started earlier. Consider that a bottleneck is saturated by a single LEDBAT flow, and the flow therefore maintains the bottleneck queue at TARGET delay. When a new LEDBAT flow arrives at the bottleneck, it might incorrectly include the steady queueing delay in its measurement of the base delay on the path. The new flow has an inflated estimate of the base delay, and may now effectively build on top of the existing, already maximal, queueing delay. As the latecomer flow builds up, the old flow sees the true queueing delay and backs off, while the latecomer keeps building up, using up the entire link's capacity, and effectively shutting the old flow out. This advantage is called the \"latecomer's advantage\".",
      "ja": "遅延ベースの輻輳制御システムが誤って早く開始アクティブフローよりも高いベース遅延を測定し、使用して後発の可能性に悩まされます。ボトルネックは、単一LEDBAT流によって飽和させ、流れは、従って目標遅延でボトルネックキューを維持していることを考えます。新しいLEDBATの流れがボトルネックに到着すると、それは間違ってパス上のベース遅延のその測定は着実にキューイング遅延が含まれる場合があります。新しいフローは、基本遅延の膨張した推定値を持っており、今効果的に既存の、すでに最大、キューイング遅延の上に構築することができます。後発の流れが蓄積として、古いフローは、真のキューイング遅延を見て、後発は、構築、リンク全体の容量を使い切って、かつ効果的に古い流れをシャットアウト保ちながら、オフにバックアップします。この利点は、「後発の優位性」と呼ばれています。"
    },
    {
      "indent": 3,
      "text": "In the worst case, if the first flow yields at the same rate as the new flow increases its sending rate, the new flow will see constant end-to-end delay, which it assumes is the base delay, until the first flow backs off completely. As a result, by the time the second flow stops increasing its cwnd, it would have added twice the target queueing delay to the network.",
      "ja": "最悪の場合、新たなフローがその送信レートを増加させるのと同じ速度で第一の流収率場合、新しいフローは最初の流れがバックオフされるまで、それは、ベース遅延であると仮定定数エンドツーエンド遅延を、表示され完全に。その結果、第2の流れは、そのCWNDの増加を停止した時間によっては、ネットワークへのキューイング遅延二回ターゲットを追加しています。"
    },
    {
      "indent": 3,
      "text": "This advantage can be reduced if the first flow yields and empties the bottleneck queue faster than the incoming flow increases its occupancy in the queue. In such a case, the latecomer might measure correctly a delay that is closer to the base delay. While such a reduction might be achieved through a multiplicative decrease of the congestion window, this may cause strong fluctuations in flow throughput during the flow's steady state. Thus, we do not recommend a multiplicative decrease scheme.",
      "ja": "この利点は、第一流利回り場合は減少し、より速く流入する流れがキューにその占有率を高めるよりも、ボトルネックキューを空にすることができます。そのような場合には、後発は正しくベース遅延に近い遅延を測定することがあります。このような減少は、輻輳ウィンドウの乗算減少によって達成されるかもしれないが、これは流れの定常状態時のフローのスループットに強い変動を引き起こす可能性があります。したがって、我々は乗算減少スキームをお勧めしません。"
    },
    {
      "indent": 3,
      "text": "We note that in certain use-case scenarios, it is possible for a later LEDBAT flow to gain an unfair advantage over an existing one [Car10]. In practice, this concern ought to be alleviated by the burstiness of network traffic: all that's needed to measure the base delay is one small gap in transmission schedules between the LEDBAT flows. These gaps can occur for a number of reasons such as latency introduced due to application sending patterns, OS scheduling at the sender, processing delay at the sender or any network node, and link contention. When such a gap occurs in the first sender's transmission while the latecomer is starting, base delay is immediately correctly measured. With a small number of LEDBAT flows, system noise may sufficiently regulate the latecomer's advantage.",
      "ja": "後ほどLEDBATフローが既存の[Car10]上に不当な優位性を獲得するための特定のユースケースシナリオでは、それが可能であることに注意します。実際には、この問題は、ネットワークトラフィックのバースト性により軽減されるべきである：すべてのことは、ベース遅延を測定するために必要なのLEDBATフロー間の送信スケジュール内の1つの小さなギャップです。これらのギャップは、送信者または任意のネットワーク・ノード、およびリンクの競合でアプリケーション送信パターン、送信側でOSスケジューリング、処理遅延に起因して導入されたそのような待ち時間などの多くの理由で発生する可能性があります。後発が起動している間、そのようなギャップは、最初の送信者の送信で発生した場合、ベース遅延は直ちに正確に測定されます。 LEDBATフローの数が少ないと、システムノイズが十分に後発の優位性を調節することができます。"
    },
    {
      "indent": 0,
      "text": "5. Open Areas for Experimentation",
      "section_title": true,
      "ja": "5.オープンエリア実験のために"
    },
    {
      "indent": 3,
      "text": "We now outline some areas that need experimentation in the Internet and under different network scenarios. These experiments should help the community understand LEDBAT's dynamics and should help towards further standardization of LEDBAT and LEDBAT-related documents.",
      "ja": "私たちは今、インターネットで、異なるネットワークシナリオの下での実験を必要とするいくつかの領域を概説します。これらの実験は、コミュニティがLEDBATのダイナミクスを理解すべきであるとLEDBATのさらなる標準化とLEDBAT関係書類の方に役立つはずです。"
    },
    {
      "indent": 0,
      "text": "5.1. Network Effects and Monitoring",
      "section_title": true,
      "ja": "5.1。ネットワーク効果とモニタリング"
    },
    {
      "indent": 3,
      "text": "Further study is required to fully understand the behavior and convergence properties of LEDBAT in networks with non-tail-drop, non-FIFO queues, in networks with frequent route changes, and in networks with network-level load balancing. These studies should have two broad goals: (i) to understand the effects of different network mechanisms on LEDBAT, and (ii) to understand the impact of LEDBAT on the network.",
      "ja": "さらなる研究が非FIFOキューは頻繁にルート変更とネットワークで、ネットワークレベルの負荷分散とネットワークで、完全に非テールドロップとネットワークでLEDBATの挙動や収束の性質を理解することが必要です。 LEDBAT上の異なるネットワークメカニズムの効果を理解するために（I）、および（ii）ネットワーク上のLEDBATの影響を理解するために：これらの研究は、二つの大きな目標を持っている必要があります。"
    },
    {
      "indent": 3,
      "text": "Network mechanisms and dynamics can influence LEDBAT flows in unintended ways. For instance, frequent route changes that result in increasing base delays may, in the worst case, throttle a LEDBAT flow's throughput significantly. The influence of different network traffic management mechanisms on LEDBAT throughput should be studied.",
      "ja": "ネットワークメカニズムとダイナミクスが意図しない方法でLEDBAT・フローに影響を与えることができます。例えば、ベース遅延を増加もたらす頻繁なルート変更は、最悪の場合、有意LEDBATフローのスループットを絞ることができます。 LEDBATのスループット上のさまざまなネットワークトラフィック管理メカニズムの影響を検討する必要があります。"
    },
    {
      "indent": 3,
      "text": "An increasing number of LEDBAT flows in the network will likely result in operator-visible network effects as well, and these should thus be studied. For instance, as long as the bottleneck queue in a network is larger than TARGET (in terms of delay), we expect that both the average queueing delay and loss rate in the network should reduce as LEDBAT traffic increasingly dominates the traffic mix in the network. Note that for bottleneck queues that are smaller than TARGET, LEDBAT will appear to behave very similar to standard TCP and its flow-level behavior may not be distinguishable from that of standard TCP.",
      "ja": "LEDBATの増加は、おそらく同様にオペレータの可視ネットワーク効果をもたらすであろうネットワークに流れ、そしてこれらは、このように検討されるべきです。例えば、限りネットワークのボトルネックキューがTARGET（遅延の点で）よりも大きくなるように、我々はLEDBATトラフィックが増え、ネットワーク内のトラフィックミックスを支配して、ネットワーク内の平均キューイング遅延と損失率の両方を削減する必要があることを期待します。 TARGETよりも小さいボトルネックキューのために、LEDBATは標準のTCPおよび標準TCPのものと区別できない場合があり、そのフローレベルの挙動と非常によく似て動作するように表示されることに注意してください。"
    },
    {
      "indent": 3,
      "text": "We note that a network operator may be able to verify the operation of a LEDBAT flow by monitoring per-flow behavior and queues in the network -- when the queueing delay at a bottleneck queue is above TARGET as specified in this document, LEDBAT flows should be expected to back off and reduce their sending rate.",
      "ja": "この文書で指定されるようにボトルネックキューにキューイング遅延が目標を上回っている場合、LEDBATフローが必要があります - 私たちは、ネットワークオペレータは、ネットワーク内のフローごとの挙動およびキューを監視することによってLEDBATフローの動作を確認することができるかもしれないことに注意してくださいバックオフとその送信レートを下げることが期待されます。"
    },
    {
      "indent": 0,
      "text": "5.2. Parameter Values",
      "section_title": true,
      "ja": "5.2。パラメータ値"
    },
    {
      "indent": 3,
      "text": "The throughput and response of LEDBAT to the proposed parameter values of TARGET, decrease-GAIN, BASE_HISTORY, INIT_CWND, and MIN_CWND should be evaluated with different types of competing traffic in different network settings, including with different AQM schemes at the bottleneck queue. TARGET controls LEDBAT's added latency, while decrease-GAIN controls LEDBAT's response to competing traffic. Since LEDBAT is intended to be minimally intrusive to competing traffic, the impact of TARGET and decrease-GAIN on delay-sensitive traffic should be studied. TARGET also impacts the growth rate of the congestion window when off_target is smaller than 1. This impact of TARGET on the rate of cwnd growth should be studied. The amount of history maintained by the base delay estimator, BASE_HISTORY, influences the responsiveness of LEDBAT to changing network conditions. LEDBAT's responsiveness and throughput should be evaluated in the wide area and under conditions where abrupt changes in base delay might occur, such as with route changes and with cellular handovers. The impact and efficacy of these parameters should be carefully studied with tests over the Internet.",
      "ja": "TARGETの提案パラメータ値にLEDBATのスループットと応答、BASE_HISTORY、INIT_CWND、およびMIN_CWND-GAINを下げるには、ボトルネックキューで異なるAQMスキームを含むさまざまなネットワーク設定でトラフィックを競合するさまざまな種類の、で評価されるべきです。減少-GAINが競合するトラフィックにLEDBATの応答を制御しながら、TARGETは、LEDBATの追加の待ち時間を制御します。 LEDBATため、トラフィックの競合に最小侵入であることが意図されたターゲットの影響及び遅延に敏感なトラフィックに減少ゲインが検討されるべきです。 TARGET off_targetが1よりも小さい場合にも、輻輳ウィンドウの影響成長速度がCWNDの成長速度に対するTARGETのこの影響を検討すべきです。ベース遅延推定器、BASE_HISTORY、によって維持される履歴の量は、変化するネットワーク条件にLEDBATの応答性に影響を与えます。 LEDBATの応答性とスループットが広範囲に及び、このような経路変更を伴うおよび細胞ハンドオーバと同様に、ベース遅延の急激な変化が発生する可能性がある条件下で評価されるべきです。これらのパラメータの影響と有効性を慎重にインターネット上でのテストを検討する必要があります。"
    },
    {
      "indent": 0,
      "text": "5.3. Filters",
      "section_title": true,
      "ja": "5.3。フィルター"
    },
    {
      "indent": 3,
      "text": "LEDBAT's effectiveness depends on a sender's ability to accurately estimate end-to-end queueing delay from delay samples. Consequently, the filtering algorithm used for this estimation, FILTER(), is an important candidate for experiments. This document suggests the use of NULL, EWMA, and MIN filters for estimating the current delay; the efficacy of these and other possible filters for this estimate should be investigated. FILTER() may also impact cwnd dynamics when delay samples are bundled in ACKs, since cwnd adaption is done once per ACK irrespective of the number of delay samples in the ACK. This impact should be studied when the different filters are considered.",
      "ja": "LEDBATの有効性を正確に遅延サンプルからエンド・ツー・エンドのキューイング遅延を推定するために、送信者の能力に依存します。したがって、この推定のために使用されるフィルタリング・アルゴリズムは、FILTER（）、実験のための重要な候補です。このドキュメントは、現在の遅延を推定するためのNULL、EWMA、およびMINフィルタを使用することを示唆しています。この推定のためのこれらおよび他の可能なフィルタの有効性を調査する必要があります。 FILTER（）CWND適応は、ACKの遅延サンプルの数にかかわらず、ACKごとに一度行われるので、遅延サンプルは、ACKの中にバンドルされている場合もCWND動力学に影響を与える可能性があります。異なるフィルタを考慮すると、この影響を検討する必要があります。"
    },
    {
      "indent": 0,
      "text": "5.4. Framing",
      "section_title": true,
      "ja": "5.4。フレーミング"
    },
    {
      "indent": 3,
      "text": "This document defines only a congestion control algorithm and assumes that framing mechanisms for exchanging delay information exist within the protocol in which LEDBAT is being implemented. If implemented in a new protocol, both the sender and receiver may be LEDBAT-aware, but if implemented in an existing protocol that is capable of providing one-way delay information, LEDBAT may be implemented as a sender-side-only modification. In either case, the parent protocol may interact with LEDBAT's algorithms; for instance, the rate of ACK feedback to the data sender may be dictated by other protocol parameters, but will interact with the LEDBAT flow's dynamics. Careful experimentation is necessary to understand and integrate LEDBAT into both new and existing protocols.",
      "ja": "この文書は、輻輳制御アルゴリズムを定義し、遅延情報を交換するためのフレーミング機構はLEDBATが実装されたプロトコル内に存在することを前提としています。新しいプロトコルで実装される場合、送信側と受信側の両方がLEDBAT認識することができるが、一方向の遅延情報を提供することができる既存のプロトコルで実装される場合、LEDBATは、送信側のみの変更として実装されてもよいです。いずれの場合も、親プロトコルがLEDBATのアルゴリズムと相互作用することができます。例えば、データ送信側にACKフィードバックの割合は、他のプロトコルパラメータによって決定することができるが、LEDBATの流れのダイナミクスと相互に作用します。慎重な実験は、新規および既存のプロトコルにLEDBATを理解し、統合する必要があります。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "LEDBAT's aggressiveness is contingent on the delay estimates and on the TARGET delay value. If these parameter values at the sender are compromised such that delay estimates are artificially set to zero and the TARGET delay value is set to +INFINITY, the LEDBAT algorithm deteriorates to TCP-like behavior. Thus, while LEDBAT is sensitive to these parameters, the algorithm is fundamentally limited in the worst case to be as aggressive as standard TCP.",
      "ja": "LEDBATの攻撃性は、遅延推定値上とTARGET遅延値に偶発的です。送信側でのこれらのパラメータ値は、遅延推定値が人為的にゼロに設定され、目標遅延値は、+無限大に設定されているように損なわれている場合、LEDBATアルゴリズムは、TCPのような挙動に劣化します。 LEDBATは、これらのパラメータに敏感でありながらこのように、アルゴリズムは、基本的に標準のTCPのように積極的に最悪の場合に限られています。"
    },
    {
      "indent": 3,
      "text": "A man in the middle may be able to change queueing delay on a network path, and/or modify the timestamps transmitted by a LEDBAT sender and/or modify the delays reported by a LEDBAT receiver, thus causing a LEDBAT flow to back off even when there's no congestion. A protocol using LEDBAT ought to minimize the risk of such man-in-the-middle attacks by at least authenticating the timestamp field in the data packets and the delay field in the ACK packets.",
      "ja": "中間者は、ネットワークパス上のキューイング遅延を変更することができ、及び/又はLEDBAT送信者によって送信されたタイムスタンプを変更し、および/またはLEDBAT受信機によって報告された遅延を変更、したがっても後退するLEDBATの流れを生じさせることができます輻輳はありません。プロトコル使用LEDBATは、少なくともACKパケットにデータパケットにおけるタイムスタンプフィールドと遅延フィールドを認証することによって、このようなman-in-the-middle攻撃のリスクを最小限に抑えるべきです。"
    },
    {
      "indent": 3,
      "text": "LEDBAT is not known to introduce any new concerns with privacy, integrity, or other security issues for flows that use it. LEDBAT is compatible with use of IPsec and Transport Layer Security (TLS) / Datagram Transport Layer Security (DTLS).",
      "ja": "LEDBATは、それを使用するフローのプライバシー、完全性、または他のセキュリティ問題を解決して、新しい懸念を導入することが知られていません。 LEDBATは、IPsecとトランスポート層セキュリティ（TLS）/データグラムトランスポート層セキュリティ（DTLS）の使用と互換性があります。"
    },
    {
      "indent": 0,
      "text": "7. Acknowledgements",
      "section_title": true,
      "ja": "7.謝辞"
    },
    {
      "indent": 3,
      "text": "We thank folks in the LEDBAT working group for their comments and feedback. Special thanks to Murari Sridharan and Rolf Winter for their patient and untiring shepherding.",
      "ja": "我々は彼らのコメントやフィードバックのためLEDBATワーキンググループの人々に感謝します。彼らの患者と不屈シェパディングのためのMurari Sridharanとロルフ・冬に感謝します。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8.参照文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, September 2001.",
      "ja": "\"IPに明示的輻輳通知の添加（ECN）\" [RFC3168]ラマクリシュナン、K.、フロイド、S.、およびD.ブラック、RFC 3168、2001年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC4821] Mathis, M. and J. Heffner, \"Packetization Layer Path MTU Discovery\", RFC 4821, March 2007.",
      "ja": "[RFC4821]マシス、M.とJ. Heffner、 \"パケット化レイヤのパスMTUディスカバリ\"、RFC 4821、2007年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, September 2009.",
      "ja": "[RFC5681]オールマン、M.、パクソン、V.、およびE.ブラントン、 \"TCP輻輳制御\"、RFC 5681、2009年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC6298] Paxson, V., Allman, M., Chu, J., and M. Sargent, \"Computing TCP's Retransmission Timer\", RFC 6298, June 2011.",
      "ja": "[RFC6298]パクソン、V.、オールマン、M.、チュー、J.、およびM.サージェント、 \"コンピューティングTCPの再送信タイマー\"、RFC 6298、2011年6月。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[Bra94] Brakmo, L., O'Malley, S., and L. Peterson, \"TCP Vegas: New techniques for congestion detection and avoidance\", Proceedings of SIGCOMM '94, pages 24-35, August 1994.",
      "ja": "[Bra94] Brakmo、L.、オマリー、S.、およびL.ピーターソン、 \"TCPベガス：輻輳検出と回避のための新技術\"、SIGCOMM '94の議事録、ページ24-35、1994年8月。"
    },
    {
      "indent": 3,
      "text": "[Car10] Carofiglio, G., Muscariello, L., Rossi, D., Testa, C., and S. Valenti, \"Rethinking Low Extra Delay Background Transport Protocols\", October 2010, <http://arxiv.org/abs/1010.5623v1>.",
      "ja": "[Car10] Carofiglio、G.、Muscariello、L.、ロッシ、D.、頭、C.、およびS.アーチャー、 \"低余分な遅延の背景トランスポートプロトコルを再考\"、2010年10月、<http://arxiv.org/ ABS / 1010.5623v1>。"
    },
    {
      "indent": 3,
      "text": "[Low02] Low, S., Peterson, L., and L. Wang, \"Understanding TCP Vegas: A Duality Model\", JACM 49 (2), March 2002.",
      "ja": "[Low02]低、S.、ピーターソン、L.、および \"TCPベガスを理解する：双対性モデル\" L.王、JACM 49（2）、2002年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC5905] Mills, D., Martin, J., Burbank, J., and W. Kasch, \"Network Time Protocol Version 4: Protocol and Algorithms Specification\", RFC 5905, June 2010.",
      "ja": "[RFC5905]ミルズ、D.、マーティン、J.、バーバンク、J.、およびW. Kasch、 \"ネットワークタイムプロトコルバージョン4：プロトコルとアルゴリズムの仕様\"、RFC 5905、2010年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC6297] Welzl, M. and D. Ros, \"A Survey of Lower-than-Best-Effort Transport Protocols\", RFC 6297, June 2011.",
      "ja": "[RFC6297] Welzl、M.とD.ロス、 \"よりも低い-ベストエフォートトランスポートプロトコルの調査\"、RFC 6297、2011年6月。"
    },
    {
      "indent": 3,
      "text": "[Sch10] Schneider, J., Wagner, J., Winter, R., and H. Kolbe, \"Out of my Way -- Evaluating Low Extra Delay Background Transport in an ADSL Access Network\", Proceedings of 22nd International Teletraffic Congress (ITC22), September 2010.",
      "ja": "[SCH10]シュナイダー、J.、ワーグナー、J.、冬、R.、およびH.コルベ、 - 、第22回国際トラヒック議会の議事録（「私の方法のうちはADSLアクセスネットワークにおける低余分な遅延の背景トランスポートの評価します」 ITC22）、2010年9月。"
    },
    {
      "indent": 3,
      "text": "[g114] \"SERIES G: TRANSMISSION SYSTEMS AND MEDIA, DIGITAL SYSTEMS AND NETWORKS; International telephone connections and circuits - General; Recommendations on the transmission quality for an entire international telephone connection; One-way transmission time\", ITU-T Recommendation G.114, 05/2003.",
      "ja": "[G114]「シリーズG：伝送システムおよびメディア、デジタルシステムやネットワーク、国際電話接続および回路 - 一般;全体の国際電話接続のための伝送品質に関する提言;片道送信時間」、ITU-T勧告G. 114、05/2003。"
    },
    {
      "indent": 3,
      "text": "[uTorrent] Hazel, G., \"uTorrent Transport Protocol library\", July 2012, <http://github.com/bittorrent/libutp>.",
      "ja": "[uTorrentの]ヘーゼル、G.、 \"uTorrentのトランスポートプロトコルライブラリ\"、2012年7月、<http://github.com/bittorrent/libutp>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Measurement Errors",
      "ja": "付録A.測定誤差"
    },
    {
      "indent": 3,
      "text": "LEDBAT measures and uses one-way delays, and we now consider measurement errors in timestamp generation and use. In this section, we use the same locally linear clock model and the same terminology as Network Time Protocol (NTP) [RFC5905]. In particular, NTP uses the terms \"offset\" to refer to the difference between measured time and true time, and \"skew\" to refer to difference of clock rate from the true rate. A clock thus has two time measurement errors: a fixed offset from the true time, and a skew. We now consider these errors in the context of LEDBAT.",
      "ja": "LEDBAT対策や一方向遅延を使用し、我々は今、タイムスタンプの生成および使用中の測定誤差を考慮してください。このセクションでは、ネットワークタイムプロトコル（NTP）[RFC5905]と同じローカルリニアクロックモデルと同じ用語を使用します。具体的には、NTPは、真の速度からのクロックレートの差を意味するために測定された時間と真の時間との差を指すために、「オフセット」、および「スキュー」という用語を使用します。真の時間から固定オフセット、スキュー：クロックは、このように二つの時間測定誤差を有しています。私たちは今、LEDBATのコンテキストでこれらのエラーを検討してください。"
    },
    {
      "indent": 0,
      "text": "A.1. Clock Offset",
      "ja": "A.1。クロックオフセット"
    },
    {
      "indent": 3,
      "text": "The offset of the clocks, both the sender's and the receiver's, shows up as a fixed error in LEDBAT's one-way delay measurement. The offset in the measured one-way delay is simply the difference in offsets between the receiver's and the sender's clocks. LEDBAT, however, does not use this estimate directly, but uses the difference between the measured one-way delay and a measured base delay. Since the offset error (difference of clock offsets) is the same for the measured one-way delay and the base delay, the offsets cancel each other out in the queuing delay estimate, which LEDBAT uses for its window computations. Clock offset error thus has no impact on LEDBAT.",
      "ja": "クロック、送信者と受信者の両方のオフセット、LEDBATの一方向遅延測定における固定誤差として現れます。測定された一方向遅延にオフセット単にレシーバのと送信側のクロック間のオフセットの差です。 LEDBATは、しかし、直接この推定値を使用するが、測定された一方向遅延と測定ベース遅延の間の差を使用しません。オフセット誤差（クロックオフセットの差）が測定された一方向遅延と基地遅延のために同じであるため、オフセットはLEDBATがそのウィンドウの計算に使用するキューイング遅延推定に互いに打ち消し合います。クロックオフセット誤差は、このようにLEDBATに与える影響はありません。"
    },
    {
      "indent": 0,
      "text": "A.2. Clock Skew",
      "ja": "A.2。クロック・スキュー"
    },
    {
      "indent": 3,
      "text": "Clock skew generally shows up as a linearly changing error in a time estimate. Similar to the offset, the skew of LEDBAT's one-way delay estimate is thus the difference between the two clocks' skews. Unlike the offset, however, skew does not cancel out when the queuing delay estimate is computed, since it causes the two clocks' offsets to change over time.",
      "ja": "クロック・スキューは、一般的に、時間の見積もりの​​直線変更エラーとして表示されます。オフセットと同様、LEDBATの一方向遅延推定のスキューは、従って、2つのクロックスキューとの間の差です。キューイング遅延推定値が計算されたときに、それは時間の経過とともに変化するために、2つのクロックのオフセットが発生するため、オフセットとは異なり、しかし、スキューは、相殺されません。"
    },
    {
      "indent": 3,
      "text": "While the offset could be large, with some clocks off by minutes or even hours or more, skew is typically small. Typical skews of untrained clocks seem to be around 100-200 parts per million (ppm) [RFC5905], where a skew of 100 ppm translates to an error accumulation of 6 milliseconds per minute. This accumulation is limited in LEDBAT, since any error accumulation is limited to the amount of history maintained by the base delay estimator, as dictated by the BASE_HISTORY parameter. The effects of clock skew error on LEDBAT should generally be insignificant unless the skew is unusually high, or unless extreme values have been chosen for TARGET (extremely low) and BASE_HISTORY (extremely large). Nevertheless, we now consider the possible impact of skew on LEDBAT behavior.",
      "ja": "数分または数時間以上、いくつかのクロックをオフにして、大きくなる可能性がオフセットしつつ、スキューは、典型的には小さいです。訓練を受けていないクロックの典型的なスキューは、100ppmでのスキューは、毎分6ミリ秒の誤差の蓄積に変換ミリオン（ppm）[RFC5905]あたり約100〜200重量部であるように見えます。 BASE_HISTORYパラメータによって決定されるような任意のエラーの蓄積は、ベース遅延推定器によって維持履歴の量に制限されるので、この蓄積は、LEDBATに制限されます。スキューが異常に高くない限り、又は極値が（非常に低い）TARGETとBASE_HISTORY（非常に大きい）のために選択されていない限りLEDBATのクロック・スキュー誤差の影響は、一般的に無意味であるべきです。それにもかかわらず、我々は今LEDBAT行動上のスキューの影響の可能性を検討してください。"
    },
    {
      "indent": 3,
      "text": "Clock skew can manifest in two ways: the sender's clock can be faster than the receiver's clock, or the receiver's clock can be faster than the sender's clock. In the first case, the measured one-way delay will decrease as the sender's clock drifts forward. While this drift can lead to an artificially low estimate of the queueing delay, the drift should also lead to a lower base delay measurement, which consequently absorbs the erroneous reduction in the one-way delay estimates.",
      "ja": "クロック・スキューは、2つの方法で明示することができます：送信者のクロックは、受信機のクロックよりも速くすることができ、または受信機のクロックは、送信側のクロックよりも高速になります。送信側のクロックが前方に漂うように第1のケースでは、測定された一方向の遅延が減少します。このドリフトは、キューイング遅延の人工的に低い推定をもたらすことができるが、ドリフトはまた、結果的に一方向遅延推定値の誤減少を吸収する下部ベース遅延測定をもたらすはずです。"
    },
    {
      "indent": 3,
      "text": "In the second case, the one-way delay estimate will artificially increase with time. This increase can reduce a LEDBAT flow's throughput unnecessarily. In this case, a skew correction mechanism can be beneficial.",
      "ja": "第二のケースでは、一方向遅延推定値は、人為的に時間と共に増加します。この増加は、不必要にLEDBATフローのスループットを減らすことができます。この場合、スキュー補正機構は、有益であり得ます。"
    },
    {
      "indent": 3,
      "text": "We now discuss an example clock skew correction mechanism. In this example, the receiver sends back raw (sending and receiving) timestamps. Using this information, the sender can estimate one-way delays in both directions, and the sender can also compute and maintain an estimate of the base delay as would be observed by the receiver. If the sender detects the receiver reducing its estimate of the base delay, it may infer that this reduction is due to clock drift. The sender then compensates by increasing its base delay estimate by the same amount. To apply this mechanism, timestamps need to be transmitted in both directions.",
      "ja": "私たちは今、例のクロックスキュー補正機構を議論します。この例では、受信機は、生の（送信および受信）タイムスタンプを返します。この情報を使用して、送信者が両方向に一方向遅延を推定することができ、そして受信機によって観察されるように、送信者は、ベース遅延の推定値を計算し、維持することができます。送信者は、ベース遅延の推定値を減少させる受信機を検出した場合、この減少は、クロックドリフトに起因していると推測できます。送信者は、同じ量だけそのベース遅延推定値を増加させることによって補償します。このメカニズムを適用するには、タイムスタンプは両方向に送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "We now outline a few other ideas that can be used for skew correction.",
      "ja": "私たちは今、スキュー補正のために使用することができる他のいくつかのアイデアを概説します。"
    },
    {
      "indent": 3,
      "text": "o Skew correction with faster virtual clock:",
      "ja": "より高速な仮想クロックとOスキュー補正："
    },
    {
      "indent": 6,
      "text": "Since having a faster clock on the sender will result in continuous updates of the base delay, a faster virtual clock can be used for sender timestamping. This virtual clock can be computed from the default machine clock through a linear transformation. For instance, with a 500 ppm speed-up the sender's clock is very likely to be faster than a receiver's clock. Consequently, LEDBAT will benefit from the implicit correction when updating the base delay.",
      "ja": "送信者に速いクロックを有するベース遅延の継続的な更新をもたらすので、より高速な仮想クロックは送信側タイムスタンプのために使用することができます。この仮想クロックは、線形変換によって、デフォルトのマシンクロックから計算することができます。例えば、500ppmのスピードアップと送信者のクロックは、受信機のクロックよりも高速である可能性が非常に高いです。ベース遅延を更新する際にその結果、LEDBATが暗黙の補正から利益を得るであろう。"
    },
    {
      "indent": 3,
      "text": "o Skew correction with estimating drift:",
      "ja": "ドリフトを推定すると、Oスキュー補正："
    },
    {
      "indent": 6,
      "text": "A LEDBAT sender maintains a history of base delay minima. This history can provide a base to compute the clock skew difference between the two hosts. The slope of a linear function fitted to the set of minima base delays gives an estimate of the clock skew. This estimation can be used to correct the clocks. If the other endpoint is doing the same, the clock should be corrected by half of the estimated skew amount.",
      "ja": "LEDBATの送信者は、ベース遅延最小値の履歴を保持します。この履歴は、2つのホスト間のクロック・スキューの差を計算するためのベースを提供することができます。最小基本遅延のセットに取り付けられた一次関数の傾きは、クロックスキューの推定値を与えます。この推定は、クロックを修正するために使用することができます。他のエンドポイントが同じことをやっている場合は、クロックは、推定スキュー量の半分に修正する必要があります。"
    },
    {
      "indent": 3,
      "text": "o Byzantine skew correction:",
      "ja": "ビザンチンスキュー補正○："
    },
    {
      "indent": 6,
      "text": "When it is known that each host maintains long-lived connections to a number of different other hosts, a byzantine scheme can be used to estimate the skew with respect to the true time. Namely, a host calculates the skew difference for each of the peer hosts as described with the previous approach, then take the median of the skew differences. While this scheme is not universally applicable, it combines well with other schemes, since it is essentially a clock training mechanism. The scheme also corrects fast, since state is preserved between connections.",
      "ja": "各ホストが異なる他のホストの数に長寿命の接続を維持することが知られている場合、ビザンチンスキームが真の時間に関してスキューを推定するために使用することができます。すなわち、ホストは、以前のアプローチで説明したように、ピアホストの各々についてスキュー差を算出し、次いで、スキュー差の中央値を取ります。この方式は普遍的に適用可能ではないですが、それは基本的にクロックトレーニングのメカニズムであることから、それは、他の方式とよく兼ね備えています。状態は接続間で保存されているので、スキームはまた、高速で補正します。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Stanislav Shalunov BitTorrent, Inc. 303 Second St., Suite S200 San Francisco, CA 94107 USA",
      "ja": "スタニスラフ・シャルノブのBitTorrent、Inc.の303第二聖、スイートS200サンフランシスコ、CA 94107 USA"
    },
    {
      "indent": 3,
      "text": "EMail: shalunov@shlang.com URI: http://shlang.com",
      "ja": "電子メール：shalunov@shlang.com URI：http://shlang.com"
    },
    {
      "indent": 3,
      "text": "Greg Hazel BitTorrent, Inc. 303 Second St., Suite S200 San Francisco, CA 94107 USA",
      "ja": "グレッグ・ヘーゼルのBitTorrent、Inc.の303第二聖、スイートS200サンフランシスコ、CA 94107 USA"
    },
    {
      "indent": 3,
      "text": "EMail: greg@bittorrent.com",
      "ja": "メールアドレス：greg@bittorrent.com"
    },
    {
      "indent": 3,
      "text": "Janardhan Iyengar Franklin and Marshall College 415 Harrisburg Ave. Lancaster, PA 17603 USA",
      "ja": "Janardhanアイアンガーフランクリンマーシャル・カレッジ415ハリスバーグアベニュー。ランカスター、PA 17603 USA"
    },
    {
      "indent": 3,
      "text": "EMail: jiyengar@fandm.edu",
      "ja": "メールアドレス：jiyengar@fandm.edu"
    },
    {
      "indent": 3,
      "text": "Mirja Kuehlewind University of Stuttgart Stuttgart DE",
      "ja": "シュトゥットガルトDEのMirja Kuehlewind大学"
    },
    {
      "indent": 3,
      "text": "EMail: mirja.kuehlewind@ikr.uni-stuttgart.de",
      "ja": "メールアドレス：mirja.kuehlewind@ikr.uni-stuttgart.de"
    }
  ]
}