{
  "title": {
    "text": "RFC 8484 - DNS Queries over HTTPS (DoH)",
    "ja": "RFC 8484 - HTTPS（DoH）を介したDNSクエリ"
  },
  "number": 8484,
  "created_at": "2019-10-23 14:56:44.108902+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                        P. Hoffman\nRequest for Comments: 8484                                         ICANN\nCategory: Standards Track                                     P. McManus\nISSN: 2070-1721                                                  Mozilla\n                                                            October 2018",
      "raw": true
    },
    {
      "indent": 22,
      "text": "DNS Queries over HTTPS (DoH)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document defines a protocol for sending DNS queries and getting DNS responses over HTTPS. Each DNS query-response pair is mapped into an HTTP exchange.",
      "ja": "このドキュメントでは、DNSクエリを送信し、HTTPS経由でDNS応答を取得するためのプロトコルを定義しています。 各DNSクエリと応答のペアは、HTTP交換にマッピングされます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはインターネット標準化過程の文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、Internet Engineering Task Force（IETF）の製品です。 IETFコミュニティのコンセンサスを表しています。 これは公開レビューを受けており、Internet Engineering Steering Group（IESG）による公開が承認されています。 インターネット標準の詳細については、RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8484.",
      "ja": "このドキュメントの現在のステータス、エラッタ、およびフィードバックに関する情報は、https：//www.rfc-editor.org/info/rfc8484で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2018 IETF Trustおよび文書作成者として特定された人物。 全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78と、この文書の公開日に有効なIETF文書に関するIETFトラストの法的条項（https://trustee.ietf.org/license-info）の対象となります。 これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているので、注意深く確認してください。 このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseテキストを含める必要があり、Simplified BSD Licenseに記載されている保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3\n3.  Selection of DoH Server . . . . . . . . . . . . . . . . . . .   4\n4.  The HTTP Exchange . . . . . . . . . . . . . . . . . . . . . .   4\n  4.1.  The HTTP Request  . . . . . . . . . . . . . . . . . . . .   4\n    4.1.1.  HTTP Request Examples . . . . . . . . . . . . . . . .   5\n  4.2.  The HTTP Response . . . . . . . . . . . . . . . . . . . .   7\n    4.2.1.  Handling DNS and HTTP Errors  . . . . . . . . . . . .   7\n    4.2.2.  HTTP Response Example . . . . . . . . . . . . . . . .   8\n5.  HTTP Integration  . . . . . . . . . . . . . . . . . . . . . .   8\n  5.1.  Cache Interaction . . . . . . . . . . . . . . . . . . . .   8\n  5.2.  HTTP/2  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n  5.3.  Server Push . . . . . . . . . . . . . . . . . . . . . . .  10\n  5.4.  Content Negotiation . . . . . . . . . . . . . . . . . . .  10\n6.  Definition of the \"application/dns-message\" Media Type  . . .  10\n7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11\n  7.1.  Registration of the \"application/dns-message\" Media Type   11\n8.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .  12\n  8.1.  On the Wire . . . . . . . . . . . . . . . . . . . . . . .  12\n  8.2.  In the Server . . . . . . . . . . . . . . . . . . . . . .  12\n9.  Security Considerations . . . . . . . . . . . . . . . . . . .  14\n10. Operational Considerations  . . . . . . . . . . . . . . . . .  15\n11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  16\n  11.1.  Normative References . . . . . . . . . . . . . . . . . .  16\n  11.2.  Informative References . . . . . . . . . . . . . . . . .  18\nAppendix A.  Protocol Development . . . . . . . . . . . . . . . .  20\nAppendix B.  Previous Work on DNS over HTTP or in Other Formats .  20\nAcknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  21\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  21",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "This document defines a specific protocol, DNS over HTTPS (DoH), for sending DNS [RFC1035] queries and getting DNS responses over HTTP [RFC7540] using https [RFC2818] URIs (and therefore TLS [RFC8446] security for integrity and confidentiality). Each DNS query-response pair is mapped into an HTTP exchange.",
      "ja": "このドキュメントでは、HTTPS [RFC2818] URI（したがって、整合性と機密性のためのTLS [RFC8446]セキュリティ）を使用して、DNS [RFC1035]クエリを送信し、HTTP [RFC7540]でDNS応答を取得するための特定のプロトコル、DNS over HTTPS（DoH）を定義します。 各DNSクエリと応答のペアは、HTTP交換にマッピングされます。"
    },
    {
      "indent": 3,
      "text": "The described approach is more than a tunnel over HTTP. It establishes default media formatting types for requests and responses but uses normal HTTP content negotiation mechanisms for selecting alternatives that endpoints may prefer in anticipation of serving new use cases. In addition to this media type negotiation, it aligns itself with HTTP features such as caching, redirection, proxying, authentication, and compression.",
      "ja": "説明したアプローチは、HTTPを介したトンネル以上のものです。 要求および応答のデフォルトのメディアフォーマットタイプを確立しますが、通常のHTTPコンテンツネゴシエーションメカニズムを使用して、エンドポイントが新しいユースケースを提供することを期待する代替を選択します。 このメディアタイプのネゴシエーションに加えて、キャッシング、リダイレクト、プロキシ、認証、圧縮などのHTTP機能と連携します。"
    },
    {
      "indent": 3,
      "text": "The integration with HTTP provides a transport suitable for both existing DNS clients and native web applications seeking access to the DNS.",
      "ja": "HTTPとの統合により、既存のDNSクライアントとDNSへのアクセスを求めるネイティブWebアプリケーションの両方に適したトランスポートが提供されます。"
    },
    {
      "indent": 3,
      "text": "Two primary use cases were considered during this protocol's development. These use cases are preventing on-path devices from interfering with DNS operations, and also allowing web applications to access DNS information via existing browser APIs in a safe way consistent with Cross Origin Resource Sharing (CORS) [FETCH]. No special effort has been taken to enable or prevent application to other use cases. This document focuses on communication between DNS clients (such as operating system stub resolvers) and recursive resolvers.",
      "ja": "このプロトコルの開発では、2つの主要なユースケースが検討されました。 これらのユースケースは、オンパスデバイスがDNS操作に干渉するのを防ぎ、Webアプリケーションが既存のブラウザーAPIを介して、Cross Origin Resource Sharing（CORS）[FETCH]と一貫した安全な方法でDNS情報にアクセスできるようにします。 他のユースケースへの適用を有効化または防止するための特別な努力は行われていません。 このドキュメントでは、DNSクライアント（オペレーティングシステムスタブリゾルバなど）と再帰リゾルバ間の通信に焦点を当てています。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "A server that supports this protocol is called a \"DoH server\" to differentiate it from a \"DNS server\" (one that only provides DNS service over one or more of the other transport protocols standardized for DNS). Similarly, a client that supports this protocol is called a \"DoH client\".",
      "ja": "このプロトコルをサポートするサーバーは、「DNSサーバー」と区別するために「DoHサーバー」と呼ばれます（DNS用に標準化された1つ以上の他のトランスポートプロトコルでのみDNSサービスを提供します）。 同様に、このプロトコルをサポートするクライアントは「DoHクライアント」と呼ばれます。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、および「OPTIONAL」 この文書の「」は、BCP 14 [RFC2119] [RFC8174]で説明されているように、ここに示すようにすべての大文字で表示される場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. Selection of DoH Server",
      "section_title": true,
      "ja": "3. DoHサーバーの選択"
    },
    {
      "indent": 3,
      "text": "The DoH client is configured with a URI Template [RFC6570], which describes how to construct the URL to use for resolution. Configuration, discovery, and updating of the URI Template is done out of band from this protocol. Note that configuration might be manual (such as a user typing URI Templates in a user interface for \"options\") or automatic (such as URI Templates being supplied in responses from DHCP or similar protocols). DoH servers MAY support more than one URI Template. This allows the different endpoints to have different properties, such as different authentication requirements or service-level guarantees.",
      "ja": "DoHクライアントは、解決に使用するURLの構築方法を説明するURIテンプレート[RFC6570]で構成されます。 URIテンプレートの構成、検出、および更新は、このプロトコルの帯域外で行われます。 構成は、手動（「オプション」のユーザーインターフェイスでURIテンプレートを入力するなど）または自動（DHCPまたは同様のプロトコルからの応答で提供されるURIテンプレートなど）である場合があることに注意してください。 DoHサーバーは、複数のURIテンプレートをサポートする場合があります。 これにより、さまざまなエンドポイントが、さまざまな認証要件やサービスレベルの保証など、さまざまなプロパティを持つことができます。"
    },
    {
      "indent": 3,
      "text": "A DoH client uses configuration to select the URI, and thus the DoH server, that is to be used for resolution. [RFC2818] defines how HTTPS verifies the DoH server's identity.",
      "ja": "DoHクライアントは、構成を使用してURIを選択するため、DoHサーバーは解決に使用されます。 [RFC2818]は、HTTPSがDoHサーバーのIDを検証する方法を定義します。"
    },
    {
      "indent": 3,
      "text": "A DoH client MUST NOT use a different URI simply because it was discovered outside of the client's configuration (such as through HTTP/2 server push) or because a server offers an unsolicited response that appears to be a valid answer to a DNS query. This specification does not extend DNS resolution privileges to URIs that are not recognized by the DoH client as configured URIs. Such scenarios may create additional operational, tracking, and security hazards that require limitations for safe usage. A future specification may support this use case.",
      "ja": "DoHクライアントは、（HTTP / 2サーバープッシュなどを介して）クライアントの構成外で発見された、またはサーバーがDNSクエリに対する有効な回答と思われる非請求応答を提供するため、単に異なるURIを使用してはなりません（MUST NOT）。 この仕様は、DoHクライアントが構成済みURIとして認識しないURIにDNS解決特権を拡張しません。 そのようなシナリオは、安全な使用のための制限を必要とする追加の運用、追跡、およびセキュリティ上の危険を引き起こす可能性があります。 将来の仕様では、このユースケースがサポートされる可能性があります。"
    },
    {
      "indent": 0,
      "text": "4. The HTTP Exchange",
      "section_title": true,
      "ja": "4. HTTPエクスチェンジ"
    },
    {
      "indent": 0,
      "text": "4.1. The HTTP Request",
      "section_title": true,
      "ja": "4.1。 HTTPリクエスト"
    },
    {
      "indent": 3,
      "text": "A DoH client encodes a single DNS query into an HTTP request using either the HTTP GET or POST method and the other requirements of this section. The DoH server defines the URI used by the request through the use of a URI Template.",
      "ja": "DoHクライアントは、HTTP GETメソッドまたはPOSTメソッドと、このセクションの他の要件を使用して、単一のDNSクエリをHTTP要求にエンコードします。 DoHサーバーは、URIテンプレートを使用して、要求で使用されるURIを定義します。"
    },
    {
      "indent": 3,
      "text": "The URI Template defined in this document is processed without any variables when the HTTP method is POST. When the HTTP method is GET, the single variable \"dns\" is defined as the content of the DNS request (as described in Section 6), encoded with base64url [RFC4648].",
      "ja": "HTTPメソッドがPOSTの場合、このドキュメントで定義されているURIテンプレートは変数なしで処理されます。 HTTPメソッドがGETの場合、単一の変数「dns」は、base64url [RFC4648]でエンコードされたDNSリクエストのコンテンツとして定義されます（セクション6で説明）。"
    },
    {
      "indent": 3,
      "text": "Future specifications for new media types for DoH MUST define the variables used for URI Template processing with this protocol.",
      "ja": "DoHの新しいメディアタイプの将来の仕様では、このプロトコルでのURIテンプレート処理に使用される変数を定義する必要があります。"
    },
    {
      "indent": 3,
      "text": "DoH servers MUST implement both the POST and GET methods.",
      "ja": "DoHサーバーは、POSTメソッドとGETメソッドの両方を実装する必要があります。"
    },
    {
      "indent": 3,
      "text": "When using the POST method, the DNS query is included as the message body of the HTTP request, and the Content-Type request header field indicates the media type of the message. POSTed requests are generally smaller than their GET equivalents.",
      "ja": "POSTメソッドを使用する場合、DNSクエリはHTTPリクエストのメッセージ本文として含まれ、Content-Typeリクエストヘッダーフィールドはメッセージのメディアタイプを示します。 通常、POSTされたリクエストは、GETに相当するものよりも小さくなります。"
    },
    {
      "indent": 3,
      "text": "Using the GET method is friendlier to many HTTP cache implementations.",
      "ja": "GETメソッドの使用は、多くのHTTPキャッシュの実装に適しています。"
    },
    {
      "indent": 3,
      "text": "The DoH client SHOULD include an HTTP Accept request header field to indicate what type of content can be understood in response. Irrespective of the value of the Accept request header field, the client MUST be prepared to process \"application/dns-message\" (as described in Section 6) responses but MAY also process other DNS-related media types it receives.",
      "ja": "DoHクライアントは、HTTP Accept要求ヘッダーフィールドを含めて、応答でどのタイプのコンテンツを理解できるかを示す必要があります。 Acceptリクエストヘッダーフィールドの値に関係なく、クライアントは「application / dns-message」（セクション6で説明）応答を処理する準備をする必要がありますが、受信する他のDNS関連メディアタイプも処理する場合があります。"
    },
    {
      "indent": 3,
      "text": "In order to maximize HTTP cache friendliness, DoH clients using media formats that include the ID field from the DNS message header, such as \"application/dns-message\", SHOULD use a DNS ID of 0 in every DNS request. HTTP correlates the request and response, thus eliminating the need for the ID in a media type such as \"application/dns-message\". The use of a varying DNS ID can cause semantically equivalent DNS queries to be cached separately.",
      "ja": "HTTPキャッシュの使いやすさを最大化するために、DoHクライアントは、「application / dns-message」などのDNSメッセージヘッダーのIDフィールドを含むメディア形式を使用し、すべてのDNS要求で0のDNS IDを使用する必要があります。 HTTPは要求と応答を相関させるため、「application / dns-message」などのメディアタイプのIDは不要です。 さまざまなDNS IDを使用すると、意味的に同等のDNSクエリが個別にキャッシュされる可能性があります。"
    },
    {
      "indent": 3,
      "text": "DoH clients can use HTTP/2 padding and compression [RFC7540] in the same way that other HTTP/2 clients use (or don't use) them.",
      "ja": "DoHクライアントは、他のHTTP / 2クライアントが使用する（または使用しない）のと同じ方法で、HTTP / 2パディングと圧縮[RFC7540]を使用できます。"
    },
    {
      "indent": 0,
      "text": "4.1.1. HTTP Request Examples",
      "section_title": true,
      "ja": "4.1.1。 HTTPリクエストの例"
    },
    {
      "indent": 3,
      "text": "These examples use HTTP/2-style formatting from [RFC7540].",
      "ja": "これらの例では、[RFC7540]のHTTP / 2スタイルのフォーマットを使用しています。"
    },
    {
      "indent": 3,
      "text": "These examples use a DoH service with a URI Template of \"https://dnsserver.example.net/dns-query{?dns}\" to resolve IN A records.",
      "ja": "これらの例では、「https://dnsserver.example.net/dns-query{?dns}」のURIテンプレートでDoHサービスを使用して、IN Aレコードを解決します。"
    },
    {
      "indent": 3,
      "text": "The requests are represented as bodies with media type \"application/ dns-message\".",
      "ja": "要求は、メディアタイプが「application / dns-message」のボディとして表されます。"
    },
    {
      "indent": 3,
      "text": "The first example request uses GET to request \"www.example.com\".",
      "ja": "最初のリクエスト例では、GETを使用して「www.example.com」をリクエストしています。"
    },
    {
      "indent": 3,
      "text": ":method = GET :scheme = https :authority = dnsserver.example.net :path = /dns-query?dns=AAABAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB accept = application/dns-message",
      "ja": "：method = GET：scheme = https：authority = dnsserver.example.net：path = / dns-query？dns = AAABAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB accept = application / dns-message"
    },
    {
      "indent": 3,
      "text": "The same DNS query for \"www.example.com\", using the POST method would be:",
      "ja": "POSTメソッドを使用した「www.example.com」に対する同じDNSクエリは次のようになります。"
    },
    {
      "indent": 3,
      "text": ":method = POST :scheme = https :authority = dnsserver.example.net :path = /dns-query accept = application/dns-message content-type = application/dns-message content-length = 33",
      "ja": "：method = POST：scheme = https：authority = dnsserver.example.net：path = / dns-query accept = application / dns-message content-type = application / dns-message content-length = 33"
    },
    {
      "indent": 3,
      "text": "<33 bytes represented by the following hex encoding> 00 00 01 00 00 01 00 00 00 00 00 00 03 77 77 77 07 65 78 61 6d 70 6c 65 03 63 6f 6d 00 00 01 00 01",
      "ja": "<次の16進エンコーディングで表される33バイト> 00 00 01 00 00 01 00 00 00 00 00 00 03 77 77 77 07 07 65 78 61 6d 70 6c 65 03 63 6f 6d 00 00 01 00 01"
    },
    {
      "indent": 3,
      "text": "In this example, the 33 bytes are the DNS message in DNS wire format [RFC1035], starting with the DNS header.",
      "ja": "この例では、33バイトはDNSヘッダーで始まるDNSワイヤ形式[RFC1035]のDNSメッセージです。"
    },
    {
      "indent": 3,
      "text": "Finally, a GET-based query for \"a.62characterlabel-makes-base64url-distinct-from-standard-base64.example.com\" is shown as an example to emphasize that the encoding alphabet of base64url is different than regular base64 and that padding is omitted.",
      "ja": "最後に、「a.62characterlabel-makes-base64url-distinct-from-standard-base64.example.com」のGETベースのクエリが、base64urlのエンコーディングアルファベットが通常のbase64とは異なり、そのパディングと異なることを強調する例として示されています 省略されます。"
    },
    {
      "indent": 3,
      "text": "The DNS query, expressed in DNS wire format, is 94 bytes represented by the following:",
      "ja": "DNSワイヤ形式で表されるDNSクエリは、次のように表される94バイトです。"
    },
    {
      "indent": 3,
      "text": "00 00 01 00 00 01 00 00 00 00 00 00 01 61 3e 36 32 63 68 61 72 61 63 74 65 72 6c 61 62 65 6c 2d 6d 61 6b 65 73 2d 62 61 73 65 36 34 75 72 6c 2d 64 69 73 74 69 6e 63 74 2d 66 72 6f 6d 2d 73 74 61 6e 64 61 72 64 2d 62 61 73 65 36 34 07 65 78 61 6d 70 6c 65 03 63 6f 6d 00 00 01 00 01",
      "ja": "00 00 01 00 00 01 00 00 00 00 00 00 01 61 3e 36 32 63 68 61 72 61 63 74 65 72 6c 61 62 65 6c 2d 6d 61 6b 65 73 2d 62 61 73 65 36 34 75 72 6c 2d 64 69 73 74 69 6e 63 74 2d 66 72 6f 6d 2d 73 74 61 6e 64 61 72 64 2d 62 61 73 65 36 34 07 65 78 61 6d 70 6c 65 03 63 6f 6d 00 00 01 00 01"
    },
    {
      "indent": 3,
      "text": ":method = GET :scheme = https :authority = dnsserver.example.net :path = /dns-query? (no space or Carriage Return (CR)) dns=AAABAAABAAAAAAAAAWE-NjJjaGFyYWN0ZXJsYWJl (no space or CR) bC1tYWtlcy1iYXNlNjR1cmwtZGlzdGluY3QtZnJvbS1z (no space or CR) dGFuZGFyZC1iYXNlNjQHZXhhbXBsZQNjb20AAAEAAQ accept = application/dns-message",
      "ja": "：method = GET：scheme = https：authority = dnsserver.example.net：path = / dns-query？ （スペースまたはキャリッジリターン（CR）なし）dns = AAABAAABAAAAAAAAAWE-NjJjaGFyYWN0ZXJsYWJl（スペースまたはCRなし）bC1tYWtlcy1iYXNlNjR1cmwtZGlzdGluY3QtZnNQZZNQZZNQZZNQZZNQZZNQZZNQZZNQZZNQZNN"
    },
    {
      "indent": 0,
      "text": "4.2. The HTTP Response",
      "section_title": true,
      "ja": "4.2。 HTTPレスポンス"
    },
    {
      "indent": 3,
      "text": "The only response type defined in this document is \"application/dns-message\", but it is possible that other response formats will be defined in the future. A DoH server MUST be able to process \"application/dns-message\" request messages.",
      "ja": "このドキュメントで定義されている唯一の応答タイプは「application / dns-message」ですが、将来他の応答形式が定義される可能性があります。 DoHサーバーは、「application / dns-message」リクエストメッセージを処理できる必要があります。"
    },
    {
      "indent": 3,
      "text": "Different response media types will provide more or less information from a DNS response. For example, one response type might include information from the DNS header bytes while another might omit it. The amount and type of information that a media type gives are solely up to the format, which is not defined in this protocol.",
      "ja": "さまざまな応答メディアタイプは、DNS応答からより多くのまたはより少ない情報を提供します。 たとえば、1つの応答タイプにはDNSヘッダーバイトからの情報が含まれる場合がありますが、別の応答タイプには省略される場合があります。 メディアタイプが提供する情報の量とタイプは、このプロトコルでは定義されていない形式のみです。"
    },
    {
      "indent": 3,
      "text": "Each DNS request-response pair is mapped to one HTTP exchange. The responses may be processed and transported in any order using HTTP's multi-streaming functionality (see Section 5 of [RFC7540]).",
      "ja": "各DNS要求/応答ペアは、1つのHTTP交換にマップされます。 応答は、HTTPのマルチストリーミング機能を使用して、任意の順序で処理および転送できます（[RFC7540]のセクション5を参照）。"
    },
    {
      "indent": 3,
      "text": "Section 5.1 discusses the relationship between DNS and HTTP response caching.",
      "ja": "セクション5.1では、DNSとHTTP応答のキャッシュの関係について説明しています。"
    },
    {
      "indent": 0,
      "text": "4.2.1. Handling DNS and HTTP Errors",
      "section_title": true,
      "ja": "4.2.1。 DNSおよびHTTPエラーの処理"
    },
    {
      "indent": 3,
      "text": "DNS response codes indicate either success or failure for the DNS query. A successful HTTP response with a 2xx status code (see Section 6.3 of [RFC7231]) is used for any valid DNS response, regardless of the DNS response code. For example, a successful 2xx HTTP status code is used even with a DNS message whose DNS response code indicates failure, such as SERVFAIL or NXDOMAIN.",
      "ja": "DNS応答コードは、DNSクエリの成功または失敗を示します。 DNS応答コードに関係なく、2xxステータスコード（[RFC7231]のセクション6.3を参照）で成功したHTTP応答が有効なDNS応答に使用されます。 たとえば、SERVFAILやNXDOMAINなど、DNS応答コードが失敗を示すDNSメッセージでも、成功した2xx HTTPステータスコードが使用されます。"
    },
    {
      "indent": 3,
      "text": "HTTP responses with non-successful HTTP status codes do not contain replies to the original DNS question in the HTTP request. DoH clients need to use the same semantic processing of non-successful HTTP status codes as other HTTP clients. This might mean that the DoH client retries the query with the same DoH server, such as if there are authorization failures (HTTP status code 401; see Section 3.1 of [RFC7235]). It could also mean that the DoH client retries with a different DoH server, such as for unsupported media types (HTTP status code 415; see Section 6.5.13 of [RFC7231]), or where the server cannot generate a representation suitable for the client (HTTP status code 406; see Section 6.5.6 of [RFC7231]), and so on.",
      "ja": "失敗したHTTPステータスコードを含むHTTP応答には、HTTP要求内の元のDNS質問への応答は含まれません。 DoHクライアントは、失敗したHTTPステータスコードと他のHTTPクライアントと同じセマンティック処理を使用する必要があります。 これは、DoHクライアントが、認可の失敗（HTTPステータスコード401、[RFC7235]のセクション3.1を参照）がある場合など、同じDoHサーバーでクエリを再試行することを意味する場合があります。 また、サポートされていないメディアタイプ（HTTPステータスコード415、[RFC7231]のセクション6.5.13を参照）、またはサーバーがクライアントに適した表現を生成できない場合など、DoHクライアントが別のDoHサーバーで再試行することも意味します。 （HTTPステータスコード406。[RFC7231]のセクション6.5.6を参照）など。"
    },
    {
      "indent": 0,
      "text": "4.2.2. HTTP Response Example",
      "section_title": true,
      "ja": "4.2.2。 HTTP応答の例"
    },
    {
      "indent": 3,
      "text": "This is an example response for a query for the IN AAAA records for \"www.example.com\" with recursion turned on. The response bears one answer record with an address of 2001:db8:abcd:12:1:2:3:4 and a TTL of 3709 seconds.",
      "ja": "これは、再帰を有効にした「www.example.com」のIN AAAAレコードのクエリに対する応答の例です。 応答には、2001：db8：abcd：12：1：2：3：4のアドレスと3709秒のTTLを持つ1つのアンサーレコードが含まれます。"
    },
    {
      "indent": 3,
      "text": ":status = 200 content-type = application/dns-message content-length = 61 cache-control = max-age=3709",
      "ja": "：status = 200 content-type = application / dns-message content-length = 61 cache-control = max-age = 3709"
    },
    {
      "indent": 3,
      "text": "<61 bytes represented by the following hex encoding> 00 00 81 80 00 01 00 01 00 00 00 00 03 77 77 77 07 65 78 61 6d 70 6c 65 03 63 6f 6d 00 00 1c 00 01 c0 0c 00 1c 00 01 00 00 0e 7d 00 10 20 01 0d b8 ab cd 00 12 00 01 00 02 00 03 00 04",
      "ja": "<次の16進エンコードで表される61バイト> 00 00 81 80 00 01 00 01 00 00 00 00 03 77 77 77 07 65 65 78 61 6d 70 6c 65 03 63 6f 6d 00 00 1c 00 01 c0 0c 00 1c 00 01 00 00 0e 7d 00 10 20 01 0d b8 ab cd 00 12 00 01 00 02 00 03 00 04"
    },
    {
      "indent": 0,
      "text": "5. HTTP Integration",
      "section_title": true,
      "ja": "5. HTTP統合"
    },
    {
      "indent": 3,
      "text": "This protocol MUST be used with the https URI scheme [RFC7230].",
      "ja": "このプロトコルは、https URIスキーム[RFC7230]で使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Sections 8 and 9 discuss additional considerations for the integration with HTTP.",
      "ja": "セクション8および9では、HTTPとの統合に関する追加の考慮事項について説明します。"
    },
    {
      "indent": 0,
      "text": "5.1. Cache Interaction",
      "section_title": true,
      "ja": "5.1。 キャッシュの相互作用"
    },
    {
      "indent": 3,
      "text": "A DoH exchange can pass through a hierarchy of caches that include both HTTP- and DNS-specific caches. These caches may exist between the DoH server and client, or they may exist on the DoH client itself. HTTP caches are generic by design; that is, they do not understand this protocol. Even if a DoH client has modified its cache implementation to be aware of DoH semantics, it does not follow that all upstream caches (for example, inline proxies, server-side gateways, and content delivery networks) will be.",
      "ja": "DoH交換は、HTTP固有のキャッシュとDNS固有のキャッシュの両方を含むキャッシュの階層を通過できます。 これらのキャッシュは、DoHサーバーとクライアントの間に存在する場合と、DoHクライアント自体に存在する場合があります。 HTTPキャッシュは設計上一般的です。 つまり、彼らはこのプロトコルを理解していません。 DoHクライアントがDoHセマンティクスを認識するようにキャッシュ実装を変更した場合でも、すべてのアップストリームキャッシュ（インラインプロキシ、サーバー側ゲートウェイ、コンテンツ配信ネットワークなど）が従うわけではありません。"
    },
    {
      "indent": 3,
      "text": "As a result, DoH servers need to carefully consider the HTTP caching metadata they send in response to GET requests (responses to POST requests are not cacheable unless specific response header fields are sent; this is not widely implemented and is not advised for DoH).",
      "ja": "その結果、DoHサーバーは、GET要求への応答で送信するHTTPキャッシュメタデータを慎重に検討する必要があります（特定の応答ヘッダーフィールドが送信されない限り、POST要求への応答はキャッシュできません。これは広く実装されておらず、DoHには推奨されません）。"
    },
    {
      "indent": 3,
      "text": "In particular, DoH servers SHOULD assign an explicit HTTP freshness lifetime (see Section 4.2 of [RFC7234]) so that the DoH client is more likely to use fresh DNS data. This requirement is due to HTTP caches being able to assign their own heuristic freshness (such as that described in Section 4.2.2 of [RFC7234]), which would take control of the cache contents out of the hands of the DoH server.",
      "ja": "特に、DoHクライアントが新しいDNSデータを使用する可能性が高くなるように、DoHサーバーは明示的なHTTPフレッシュネスライフタイムを割り当てる必要があります（[RFC7234]のセクション4.2を参照）。 この要件は、HTTPキャッシュが独自のヒューリスティックな鮮度（[RFC7234]のセクション4.2.2で説明されているものなど）を割り当て、DoHサーバーの手からキャッシュコンテンツの制御を取得できるためです。"
    },
    {
      "indent": 3,
      "text": "The assigned freshness lifetime of a DoH HTTP response MUST be less than or equal to the smallest TTL in the Answer section of the DNS response. A freshness lifetime equal to the smallest TTL in the Answer section is RECOMMENDED. For example, if a HTTP response carries three RRsets with TTLs of 30, 600, and 300, the HTTP freshness lifetime should be 30 seconds (which could be specified as \"Cache-Control: max-age=30\"). This requirement helps prevent expired RRsets in messages in an HTTP cache from unintentionally being served.",
      "ja": "DoH HTTP応答の割り当てられたフレッシュネスライフタイムは、DNS応答のAnswerセクションの最小TTL以下でなければなりません。 Answerセクションの最小TTLに等しい鮮度の寿命が推奨されます。 たとえば、HTTP応答にTTLが30、600、および300の3つのRRsetが含まれる場合、HTTP鮮度の有効期間は30秒である必要があります（「Cache-Control：max-age = 30」として指定できます）。 この要件は、HTTPキャッシュ内のメッセージ内の期限切れのRRsetが意図せずに提供されるのを防ぐのに役立ちます。"
    },
    {
      "indent": 3,
      "text": "If the DNS response has no records in the Answer section, and the DNS response has an SOA record in the Authority section, the response freshness lifetime MUST NOT be greater than the MINIMUM field from that SOA record (see [RFC2308]).",
      "ja": "DNS応答のAnswerセクションにレコードがなく、DNS応答のAuthorityセクションにSOAレコードがある場合、応答のフレッシュネスライフタイムはそのSOAレコードのMINIMUMフィールドよりも長くしてはなりません（[RFC2308]を参照）。"
    },
    {
      "indent": 3,
      "text": "The stale-while-revalidate and stale-if-error Cache-Control directives [RFC5861] could be well suited to a DoH implementation when allowed by server policy. Those mechanisms allow a client, at the server's discretion, to reuse an HTTP cache entry that is no longer fresh. In such a case, the client reuses either all of a cached entry or none of it.",
      "ja": "stale-while-revalidateおよびstale-if-error Cache-Controlディレクティブ[RFC5861]は、サーバーポリシーで許可されている場合、DoH実装に適しています。 これらのメカニズムにより、クライアントは、サーバーの裁量で、新鮮ではなくなったHTTPキャッシュエントリを再利用できます。 このような場合、クライアントはキャッシュされたエントリのすべてを再利用するか、キャッシュエントリを再利用しません。"
    },
    {
      "indent": 3,
      "text": "DoH servers also need to consider HTTP caching when generating responses that are not globally valid. For instance, if a DoH server customizes a response based on the client's identity, it would not want to allow global reuse of that response. This could be accomplished through a variety of HTTP techniques, such as a Cache-Control max-age of 0, or by using the Vary response header field (see Section 7.1.4 of [RFC7231]) to establish a secondary cache key (see Section 4.1 of [RFC7234]).",
      "ja": "DoHサーバーは、グローバルに有効でない応答を生成する際にHTTPキャッシングを考慮する必要もあります。 たとえば、DoHサーバーがクライアントのIDに基づいて応答をカスタマイズする場合、その応答のグローバルな再利用を許可したくないでしょう。 これは、Cache-Control max-age 0などのさまざまなHTTPテクニックを使用して、またはVary応答ヘッダーフィールド（[RFC7231]のセクション7.1.4を参照）を使用してセカンダリキャッシュキーを確立することで実現できます（ [RFC7234]のセクション4.1）。"
    },
    {
      "indent": 3,
      "text": "DoH clients MUST account for the Age response header field's value [RFC7234] when calculating the DNS TTL of a response. For example, if an RRset is received with a DNS TTL of 600, but the Age header field indicates that the response has been cached for 250 seconds, the remaining lifetime of the RRset is 350 seconds. This requirement applies to both DoH client HTTP caches and DoH client DNS caches.",
      "ja": "DoHクライアントは、応答のDNS TTLを計算するときに、Age応答ヘッダーフィールドの値[RFC7234]を考慮しなければなりません。 たとえば、DNS TTLが600のRRsetを受信しても、応答が250秒間キャッシュされたことをAgeヘッダーフィールドが示す場合、RRsetの残りのライフタイムは350秒です。 この要件は、DoHクライアントのHTTPキャッシュとDoHクライアントのDNSキャッシュの両方に適用されます。"
    },
    {
      "indent": 3,
      "text": "DoH clients can request an uncached copy of a HTTP response by using the \"no-cache\" request Cache-Control directive (see Section 5.2.1.4 of [RFC7234]) and similar controls. Note that some caches might not honor these directives, either due to configuration or interaction with traditional DNS caches that do not have such a mechanism.",
      "ja": "DoHクライアントは、「no-cache」リクエストCache-Controlディレクティブ（[RFC7234]のセクション5.2.1.4を参照）および同様のコントロールを使用して、HTTP応答のキャッシュされていないコピーをリクエストできます。 このようなメカニズムを持たない従来のDNSキャッシュとの構成または相互作用のために、一部のキャッシュはこれらのディレクティブを尊重しない場合があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "HTTP conditional requests [RFC7232] may be of limited value to DoH, as revalidation provides only a bandwidth benefit and DNS transactions are normally latency bound. Furthermore, the HTTP response header fields that enable revalidation (such as \"Last-",
      "ja": "HTTP条件付き要求[RFC7232]は、DoHに限られた価値がある可能性があります。これは、再検証が帯域幅の利点のみを提供し、DNSトランザクションが通常は遅延にバインドされるためです。 さらに、再検証を有効にするHTTP応答ヘッダーフィールド（「最後の-"
    },
    {
      "indent": 3,
      "text": "Modified\" and \"Etag\") are often fairly large when compared to the overall DNS response size and have a variable nature that creates constant pressure on the HTTP/2 compression dictionary [RFC7541]. Other types of DNS data, such as zone transfers, may be larger and benefit more from revalidation.",
      "ja": "変更済み」および「Etag」）は、全体のDNS応答サイズと比較するとかなり大きいことが多く、HTTP / 2圧縮辞書[RFC7541]に一定の圧力をかける可変性を持っています。ゾーン転送など、その他の種類のDNSデータ、 より大きくなり、再検証の恩恵を受ける可能性があります。"
    },
    {
      "indent": 0,
      "text": "5.2. HTTP/2",
      "section_title": true,
      "ja": "5.2。 HTTP / 2"
    },
    {
      "indent": 3,
      "text": "HTTP/2 [RFC7540] is the minimum RECOMMENDED version of HTTP for use with DoH.",
      "ja": "HTTP / 2 [RFC7540]は、DoHで使用するためのHTTPの最小推奨バージョンです。"
    },
    {
      "indent": 3,
      "text": "The messages in classic UDP-based DNS [RFC1035] are inherently unordered and have low overhead. A competitive HTTP transport needs to support reordering, parallelism, priority, and header compression to achieve similar performance. Those features were introduced to HTTP in HTTP/2 [RFC7540]. Earlier versions of HTTP are capable of conveying the semantic requirements of DoH but may result in very poor performance.",
      "ja": "古典的なUDPベースのDNS [RFC1035]のメッセージは本質的に順序付けられておらず、オーバーヘッドが低くなっています。 競合するHTTPトランスポートは、同様のパフォーマンスを実現するために、並べ替え、並列処理、優先度、ヘッダー圧縮をサポートする必要があります。 これらの機能は、HTTP / 2 [RFC7540]でHTTPに導入されました。 HTTPの以前のバージョンは、DoHのセマンティック要件を伝えることができますが、パフォーマンスが非常に低下する可能性があります。"
    },
    {
      "indent": 0,
      "text": "5.3. Server Push",
      "section_title": true,
      "ja": "5.3。 サーバープッシュ"
    },
    {
      "indent": 3,
      "text": "Before using DoH response data for DNS resolution, the client MUST establish that the HTTP request URI can be used for the DoH query. For HTTP requests initiated by the DoH client, this is implicit in the selection of URI. For HTTP server push (see Section 8.2 of [RFC7540]), extra care must be taken to ensure that the pushed URI is one that the client would have directed the same query to if the client had initiated the request (in addition to the other security checks normally needed for server push).",
      "ja": "DNS解決にDoH応答データを使用する前に、クライアントは、HTTP要求URIをDoHクエリに使用できることを確立する必要があります。 DoHクライアントによって開始されたHTTP要求の場合、これはURIの選択に暗黙的に含まれます。 HTTPサーバープッシュの場合（[RFC7540]のセクションsee8.2を参照）、プッシュされたURIが、クライアントが（他に加えて）リクエストを開始した場合にクライアントが同じクエリを送信したものであることを保証するためにさらに注意する必要があります 通常、サーバープッシュに必要なセキュリティチェック）。"
    },
    {
      "indent": 0,
      "text": "5.4. Content Negotiation",
      "section_title": true,
      "ja": "5.4。 コンテンツ交渉"
    },
    {
      "indent": 3,
      "text": "In order to maximize interoperability, DoH clients and DoH servers MUST support the \"application/dns-message\" media type. Other media types MAY be used as defined by HTTP Content Negotiation (see Section 3.4 of [RFC7231]). Those media types MUST be flexible enough to express every DNS query that would normally be sent in DNS over UDP (including queries and responses that use DNS extensions, but not those that require multiple responses).",
      "ja": "相互運用性を最大化するために、DoHクライアントとDoHサーバーは「application / dns-message」メディアタイプをサポートする必要があります。 HTTPコンテンツネゴシエーションで定義されているように、他のメディアタイプを使用してもよい（MAY） それらのメディアタイプは、通常UDP over DNSで送信されるすべてのDNSクエリを表現するのに十分な柔軟性を持たなければなりません（DNS拡張を使用するクエリと応答を含みますが、複数の応答を必要とするものは含みません）。"
    },
    {
      "indent": 0,
      "text": "6. Definition of the \"application/dns-message\" Media Type",
      "section_title": true,
      "ja": "6.「application / dns-message」メディアタイプの定義"
    },
    {
      "indent": 3,
      "text": "The data payload for the \"application/dns-message\" media type is a single message of the DNS on-the-wire format defined in Section 4.2.1 of [RFC1035], which in turn refers to the full wire format defined in Section 4.1 of that RFC.",
      "ja": "「application / dns-message」メディアタイプのデータペイロードは、[RFC1035]のセクション4.2.1で定義されたDNSオンザワイヤ形式の単一のメッセージであり、これはセクションで定義された完全なワイヤ形式を指します。 そのRFCの4.1。"
    },
    {
      "indent": 3,
      "text": "Although [RFC1035] says \"Messages carried by UDP are restricted to 512 bytes\", that was later updated by [RFC6891]. This media type restricts the maximum size of the DNS message to 65535 bytes.",
      "ja": "[RFC1035]には「UDPによって伝送されるメッセージは512バイトに制限されています」と書かれていますが、それは後に[RFC6891]によって更新されました。 このメディアタイプは、DNSメッセージの最大サイズを65535バイトに制限します。"
    },
    {
      "indent": 3,
      "text": "Note that the wire format used in this media type is different than the wire format used in [RFC7858] (which uses the format defined in Section 4.2.2 of [RFC1035] that includes two length bytes).",
      "ja": "このメディアタイプで使用されるワイヤ形式は、[RFC7858]で使用されるワイヤ形式（2バイトの長さを含む[RFC1035]のセクション4.2.2で定義された形式を使用）とは異なることに注意してください。"
    },
    {
      "indent": 3,
      "text": "DoH clients using this media type MAY have one or more Extension Mechanisms for DNS (EDNS) options [RFC6891] in the request. DoH servers using this media type MUST ignore the value given for the EDNS UDP payload size in DNS requests.",
      "ja": "このメディアタイプを使用するDoHクライアントは、リクエストに1つ以上のDNS拡張メカニズム（EDNS）オプション[RFC6891]を含めることができます。 このメディアタイプを使用するDoHサーバーは、DNS要求のEDNS UDPペイロードサイズに指定された値を無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "When using the GET method, the data payload for this media type MUST be encoded with base64url [RFC4648] and then provided as a variable named \"dns\" to the URI Template expansion. Padding characters for base64url MUST NOT be included.",
      "ja": "GETメソッドを使用する場合、このメディアタイプのデータペイロードをbase64url [RFC4648]でエンコードし、「dns」という名前の変数としてURIテンプレート拡張に提供する必要があります。 base64urlのパディング文字を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "When using the POST method, the data payload for this media type MUST NOT be encoded and is used directly as the HTTP message body.",
      "ja": "POSTメソッドを使用する場合、このメディアタイプのデータペイロードはエンコードされてはならず、HTTPメッセージ本文として直接使用されます。"
    },
    {
      "indent": 0,
      "text": "7. IANA Considerations",
      "section_title": true,
      "ja": "7. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "7.1. Registration of the \"application/dns-message\" Media Type",
      "section_title": true,
      "ja": "7.1。 「application / dns-message」メディアタイプの登録"
    },
    {
      "indent": 3,
      "text": "Type name: application",
      "ja": "タイプ名：アプリケーション"
    },
    {
      "indent": 3,
      "text": "Subtype name: dns-message",
      "ja": "サブタイプ名：dns-message"
    },
    {
      "indent": 3,
      "text": "Required parameters: N/A",
      "ja": "必須パラメーター：なし"
    },
    {
      "indent": 3,
      "text": "Optional parameters: N/A",
      "ja": "オプションのパラメーター：N / A"
    },
    {
      "indent": 3,
      "text": "Encoding considerations: This is a binary format. The contents are a DNS message as defined in RFC 1035. The format used here is for DNS over UDP, which is the format defined in the diagrams in RFC 1035.",
      "ja": "エンコードに関する考慮事項：これはバイナリ形式です。 内容は、RFC 1035で定義されているDNSメッセージです。ここで使用されている形式は、UDP上のDNS用です。これは、RFC 1035の図で定義されている形式です。"
    },
    {
      "indent": 3,
      "text": "Security considerations: See RFC 8484. The content is a DNS message and thus not executable code.",
      "ja": "セキュリティに関する考慮事項：RFC 8484を参照してください。コンテンツはDNSメッセージであるため、実行可能なコードではありません。"
    },
    {
      "indent": 3,
      "text": "Interoperability considerations: None.",
      "ja": "相互運用性に関する考慮事項：なし。"
    },
    {
      "indent": 3,
      "text": "Published specification: RFC 8484.",
      "ja": "公開された仕様：RFC 8484。"
    },
    {
      "indent": 3,
      "text": "Applications that use this media type: Systems that want to exchange full DNS messages.",
      "ja": "このメディアタイプを使用するアプリケーション：完全なDNSメッセージを交換するシステム。"
    },
    {
      "indent": 3,
      "text": "Additional information:",
      "ja": "追加情報："
    },
    {
      "indent": 6,
      "text": "Deprecated alias names for this type: N/A Magic number(s): N/A File extension(s): N/A Macintosh file type code(s): N/A",
      "ja": "このタイプの廃止されたエイリアス名：N / Aマジックナンバー：N / Aファイル拡張子：N / A Macintoshファイルタイプコード：N / A"
    },
    {
      "indent": 3,
      "text": "Person & email address to contact for further information: Paul Hoffman <paul.hoffman@icann.org>",
      "ja": "詳細については、連絡先の人とメールアドレス：Paul Hoffman <paul.hoffman@icann.org>"
    },
    {
      "indent": 3,
      "text": "Intended usage: COMMON",
      "ja": "使用目的：共通"
    },
    {
      "indent": 3,
      "text": "Restrictions on usage: N/A",
      "ja": "使用制限：なし"
    },
    {
      "indent": 3,
      "text": "Author: Paul Hoffman <paul.hoffman@icann.org>",
      "ja": "著者：ポール・ホフマン<paul.hoffman@icann.org>"
    },
    {
      "indent": 3,
      "text": "Change controller: IESG",
      "ja": "コントローラーの変更：IESG"
    },
    {
      "indent": 0,
      "text": "8. Privacy Considerations",
      "section_title": true,
      "ja": "8.プライバシーに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "[RFC7626] discusses DNS privacy considerations in both \"on the wire\" (Section 2.4 of [RFC7626]) and \"in the server\" (Section 2.5 of [RFC7626]) contexts. This is also a useful framing for DoH's privacy considerations.",
      "ja": "[RFC7626]は、「ワイヤ上」（[RFC7626]のセクション2.4）と「サーバー内」（[RFC7626]のセクション2.5）の両方のコンテキストでDNSプライバシーの考慮事項を議論します。 これは、DoHのプライバシーに関する考慮事項にとっても有用なフレーミングです。"
    },
    {
      "indent": 0,
      "text": "8.1. On the Wire",
      "section_title": true,
      "ja": "8.1。 ワイヤ上"
    },
    {
      "indent": 3,
      "text": "DoH encrypts DNS traffic and requires authentication of the server. This mitigates both passive surveillance [RFC7258] and active attacks that attempt to divert DNS traffic to rogue servers (see Section 2.5.1 of [RFC7626]). DNS over TLS [RFC7858] provides similar protections, while direct UDP- and TCP-based transports are vulnerable to this class of attack. An experimental effort to offer guidance on choosing the padding length can be found in [RFC8467].",
      "ja": "DoHはDNSトラフィックを暗号化し、サーバーの認証を要求します。 これにより、パッシブ監視[RFC7258]と、DNSトラフィックを不正なサーバーに誘導しようとするアクティブ攻撃の両方が軽減されます（[RFC7626]のセクション2.5.1を参照）。 DNS over TLS [RFC7858]は同様の保護を提供しますが、直接UDPおよびTCPベースのトランスポートはこのクラスの攻撃に対して脆弱です。 パディングの長さの選択に関するガイダンスを提供する実験的な取り組みは、[RFC8467]にあります。"
    },
    {
      "indent": 3,
      "text": "Additionally, the use of the HTTPS default port 443 and the ability to mix DoH traffic with other HTTPS traffic on the same connection can deter unprivileged on-path devices from interfering with DNS operations and make DNS traffic analysis more difficult.",
      "ja": "さらに、HTTPSデフォルトポート443を使用し、同じ接続でDoHトラフィックを他のHTTPSトラフィックと混合する機能により、権限のないオンパスデバイスがDNS操作を妨げるのを防ぎ、DNSトラフィック分析をより困難にします。"
    },
    {
      "indent": 0,
      "text": "8.2. In the Server",
      "section_title": true,
      "ja": "8.2。 サーバー内"
    },
    {
      "indent": 3,
      "text": "The DNS wire format [RFC1035] contains no client identifiers; however, various transports of DNS queries and responses do provide data that can be used to correlate requests. HTTPS presents new considerations for correlation, such as explicit HTTP cookies and implicit fingerprinting of the unique set and ordering of HTTP request header fields.",
      "ja": "DNSワイヤー形式[RFC1035]にはクライアント識別子は含まれていません。 ただし、DNSクエリと応答のさまざまなトランスポートは、要求を関連付けるために使用できるデータを提供します。 HTTPSでは、明示的なHTTP Cookie、一意のセットの暗黙的なフィンガープリント、HTTP要求ヘッダーフィールドの順序付けなど、相関に関する新しい考慮事項が提示されます。"
    },
    {
      "indent": 3,
      "text": "A DoH implementation is built on IP, TCP, TLS, and HTTP. Each layer contains one or more common features that can be used to correlate queries to the same identity. DNS transports will generally carry the same privacy properties of the layers used to implement them. For example, the properties of IP, TCP, and TLS apply to implementations of DNS over TLS.",
      "ja": "DoH実装は、IP、TCP、TLS、およびHTTP上に構築されます。 各レイヤーには、クエリを同じIDに関連付けるために使用できる1つ以上の共通機能が含まれています。 通常、DNSトランスポートは、それらを実装するために使用されるレイヤーと同じプライバシープロパティを保持します。 たとえば、IP、TCP、およびTLSのプロパティは、TLS over DNSの実装に適用されます。"
    },
    {
      "indent": 3,
      "text": "The privacy considerations of using the HTTPS layer in DoH are incremental to those of DNS over TLS. DoH is not known to introduce new concerns beyond those associated with HTTPS.",
      "ja": "DoHでHTTPSレイヤーを使用する場合のプライバシーに関する考慮事項は、TLS over DNSの考慮事項に追加されます。 DoHは、HTTPSに関連する懸念を超える新たな懸念をもたらすことは知られていません。"
    },
    {
      "indent": 3,
      "text": "At the IP level, the client address provides obvious correlation information. This can be mitigated by use of a NAT, proxy, VPN, or simple address rotation over time. It may be aggravated by use of a DNS server that can correlate real-time addressing information with other personal identifiers, such as when a DNS server and DHCP server are operated by the same entity.",
      "ja": "IPレベルでは、クライアントアドレスは明らかな相関情報を提供します。 これは、NAT、プロキシ、VPN、または時間の経過に伴う単純なアドレスローテーションの使用によって軽減できます。 DNSサーバーとDHCPサーバーが同じエンティティで運用されている場合など、リアルタイムのアドレス情報を他の個人識別子と関連付けることができるDNSサーバーを使用すると、状況が悪化する場合があります。"
    },
    {
      "indent": 3,
      "text": "DNS implementations that use one TCP connection for multiple DNS requests directly group those requests. Long-lived connections have better performance behaviors than short-lived connections; however, they group more requests, which can expose more information to correlation and consolidation. TCP-based solutions may also seek performance through the use of TCP Fast Open [RFC7413]. The cookies used in TCP Fast Open allow servers to correlate TCP sessions.",
      "ja": "複数のDNS要求に1つのTCP接続を使用するDNS実装は、それらの要求を直接グループ化します。 存続期間の長い接続は、存続期間の短い接続よりもパフォーマンスが優れています。 ただし、より多くの要求をグループ化するため、より多くの情報を相関および統合にさらす可能性があります。 TCPベースのソリューションは、TCP Fast Open [RFC7413]を使用してパフォーマンスを追求することもできます。 TCP Fast Openで使用されるCookieにより、サーバーはTCPセッションを関連付けることができます。"
    },
    {
      "indent": 3,
      "text": "TLS-based implementations often achieve better handshake performance through the use of some form of session resumption mechanism, such as Section 2.2 of [RFC8446]. Session resumption creates trivial mechanisms for a server to correlate TLS connections together.",
      "ja": "TLSベースの実装は、[RFC8446]のセクション2.2など、何らかの形式のセッション再開メカニズムを使用することで、ハンドシェイクのパフォーマンスを向上させることがよくあります。 セッション再開により、サーバーがTLS接続を相互に関連付ける簡単なメカニズムが作成されます。"
    },
    {
      "indent": 3,
      "text": "HTTP's feature set can also be used for identification and tracking in a number of different ways. For example, Authentication request header fields explicitly identify profiles in use, and HTTP cookies are designed as an explicit state-tracking mechanism between the client and serving site and often are used as an authentication mechanism.",
      "ja": "HTTPの機能セットは、さまざまな方法で識別と追跡にも使用できます。 たとえば、認証要求ヘッダーフィールドは使用中のプロファイルを明示的に識別し、HTTP Cookieはクライアントと提供サイト間の明示的な状態追跡メカニズムとして設計され、多くの場合認証メカニズムとして使用されます。"
    },
    {
      "indent": 3,
      "text": "Additionally, the User-Agent and Accept-Language request header fields often convey specific information about the client version or locale. This facilitates content negotiation and operational work-arounds for implementation bugs. Request header fields that control caching can expose state information about a subset of the client's history. Mixing DoH requests with other HTTP requests on the same connection also provides an opportunity for richer data correlation.",
      "ja": "さらに、User-AgentおよびAccept-Language要求ヘッダーフィールドは、多くの場合、クライアントのバージョンまたはロケールに関する特定の情報を伝えます。 これにより、コンテンツのネゴシエーションと実装バグの運用上の回避策が容易になります。 キャッシュを制御する要求ヘッダーフィールドは、クライアントの履歴のサブセットに関する状態情報を公開できます。 同じ接続でDoHリクエストと他のHTTPリクエストを混在させると、より豊富なデータ相関の機会が得られます。"
    },
    {
      "indent": 3,
      "text": "The DoH protocol design allows applications to fully leverage the HTTP ecosystem, including features that are not enumerated here. Utilizing the full set of HTTP features enables DoH to be more than an HTTP tunnel, but it is at the cost of opening up implementations to the full set of privacy considerations of HTTP.",
      "ja": "DoHプロトコル設計により、アプリケーションは、ここに列挙されていない機能を含むHTTPエコシステムを完全に活用できます。 HTTP機能の完全なセットを利用すると、DoHをHTTPトンネル以上にすることができますが、HTTPのプライバシーに関する考慮事項の完全なセットに実装を開放するという犠牲が伴います。"
    },
    {
      "indent": 3,
      "text": "Implementations of DoH clients and servers need to consider the benefit and privacy impact of these features, and their deployment context, when deciding whether or not to enable them. Implementations are advised to expose the minimal set of data needed to achieve the desired feature set.",
      "ja": "DoHクライアントおよびDoHの実装では、これらの機能を有効にするかどうかを決定するときに、これらの機能の利点とプライバシーへの影響、およびそれらの展開コンテキストを考慮する必要があります。 実装では、目的の機能セットを実現するために必要な最小限のデータセットを公開することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "Determining whether or not a DoH implementation requires HTTP cookie [RFC6265] support is particularly important because HTTP cookies are the primary state tracking mechanism in HTTP. HTTP cookies SHOULD NOT be accepted by DOH clients unless they are explicitly required by a use case.",
      "ja": "HTTP CookieはHTTPの主要な状態追跡メカニズムであるため、DoH実装にHTTP Cookie [RFC6265]サポートが必要かどうかを判断することが特に重要です。 HTTP Cookieは、ユースケースで明示的に要求されない限り、DOHクライアントによって受け入れられるべきではありません。"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9.セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Running DNS over HTTPS relies on the security of the underlying HTTP transport. This mitigates classic amplification attacks for UDP-based DNS. Implementations utilizing HTTP/2 benefit from the TLS profile defined in Section 9.2 of [RFC7540].",
      "ja": "HTTPSを介したDNSの実行は、基盤となるHTTPトランスポートのセキュリティに依存しています。 これにより、UDPベースのDNSの従来の増幅攻撃が軽減されます。 HTTP / 2を利用する実装は、[RFC7540]のセクション9.2で定義されたTLSプロファイルの恩恵を受けます。"
    },
    {
      "indent": 3,
      "text": "Session-level encryption has well-known weaknesses with respect to traffic analysis, which might be particularly acute when dealing with DNS queries. HTTP/2 provides further advice about the use of compression (see Section 10.6 of [RFC7540]) and padding (see Section 10.7 of [RFC7540]). DoH servers can also add DNS padding [RFC7830] if the DoH client requests it in the DNS query. An experimental effort to offer guidance on choosing the padding length can be found in [RFC8467].",
      "ja": "セッションレベルの暗号化には、トラフィック分析に関する既知の弱点があります。これは、DNSクエリを処理する場合に特に深刻になる可能性があります。 HTTP / 2は、圧縮（[RFC7540]のセクション10.6を参照）およびパディング（[RFC7540]のセクション10.7を参照）の使用に関するさらなるアドバイスを提供します。 DoHクライアントがDNSクエリで要求する場合、DoHサーバーはDNSパディング[RFC7830]を追加することもできます。 パディングの長さの選択に関するガイダンスを提供する実験的な取り組みは、[RFC8467]にあります。"
    },
    {
      "indent": 3,
      "text": "The HTTPS connection provides transport security for the interaction between the DoH server and client, but it does not provide the response integrity of DNS data provided by DNSSEC. DNSSEC and DoH are independent and fully compatible protocols, each solving different problems. The use of one does not diminish the need nor the usefulness of the other. It is the choice of a client to either perform full DNSSEC validation of answers or to trust the DoH server to do DNSSEC validation and inspect the AD (Authentic Data) bit in the returned message to determine whether an answer was authentic or not. As noted in Section 4.2, different response media types will provide more or less information from a DNS response, so this choice may be affected by the response media type.",
      "ja": "HTTPS接続は、DoHサーバーとクライアント間のやり取りにトランスポートセキュリティを提供しますが、DNSSECが提供するDNSデータの応答整合性は提供しません。 DNSSECとDoHは独立した完全に互換性のあるプロトコルであり、それぞれ異なる問題を解決します。 一方を使用しても、もう一方の必要性や有用性が損なわれることはありません。 回答の完全なDNSSEC検証を実行するか、DoHサーバーを信頼してDNSSEC検証を行い、返されたメッセージのAD（Authentic Data）ビットを検査して、回答が本物かどうかを判断するのは、クライアントの選択です。 セクション4.2で述べたように、異なる応答メディアタイプは、DNS応答からの情報を多少提供するため、この選択は応答メディアタイプによって影響を受ける可能性があります。"
    },
    {
      "indent": 3,
      "text": "Section 5.1 describes the interaction of this protocol with HTTP caching. An adversary that can control the cache used by the client can affect that client's view of the DNS. This is no different than the security implications of HTTP caching for other protocols that use HTTP.",
      "ja": "セクション5.1では、このプロトコルとHTTPキャッシングの相互作用について説明します。 クライアントが使用するキャッシュを制御できる攻撃者は、そのクライアントのDNSの表示に影響を与える可能性があります。 これは、HTTPを使用する他のプロトコルのHTTPキャッシングのセキュリティへの影響と同じです。"
    },
    {
      "indent": 3,
      "text": "In the absence of DNSSEC information, a DoH server can give a client invalid data in response to a DNS query. Section 3 disallows the use of DoH DNS responses that do not originate from configured servers. This prohibition does not guarantee protection against invalid data, but it does reduce the risk.",
      "ja": "DNSSEC情報がない場合、DoHサーバーはDNSクエリへの応答でクライアントに無効なデータを提供できます。 セクション3は、構成されたサーバーから発信されないDoH DNS応答の使用を許可しません。 この禁止は、無効なデータに対する保護を保証するものではありませんが、リスクを軽減します。"
    },
    {
      "indent": 0,
      "text": "10. Operational Considerations",
      "section_title": true,
      "ja": "10.操作上の考慮事項"
    },
    {
      "indent": 3,
      "text": "Local policy considerations and similar factors mean different DNS servers may provide different results to the same query, for instance, in split DNS configurations [RFC6950]. It logically follows that the server that is queried can influence the end result. Therefore, a client's choice of DNS server may affect the responses it gets to its queries. For example, in the case of DNS64 [RFC6147], the choice could affect whether IPv6/IPv4 translation will work at all.",
      "ja": "ローカルポリシーの考慮事項と同様の要因は、たとえば、分割DNS構成[RFC6950]で、同じクエリに対して異なるDNSサーバーが異なる結果を提供する可能性があることを意味します。 論理的には、クエリ対象のサーバーが最終結果に影響を与える可能性があります。 したがって、クライアントのDNSサーバーの選択は、クエリに対する応答に影響する場合があります。 たとえば、DNS64 [RFC6147]の場合、選択はIPv6 / IPv4変換がまったく機能するかどうかに影響を与える可能性があります。"
    },
    {
      "indent": 3,
      "text": "The HTTPS channel used by this specification establishes secure two-party communication between the DoH client and the DoH server. Filtering or inspection systems that rely on unsecured transport of DNS will not function in a DNS over HTTPS environment due to the confidentiality and integrity protection provided by TLS.",
      "ja": "この仕様で使用されるHTTPSチャネルは、DoHクライアントとDoHサーバー間の安全な2者間通信を確立します。 DNSのセキュリティ保護されていないトランスポートに依存するフィルタリングシステムまたは検査システムは、TLSによって提供される機密性と整合性保護のため、HTTPSを介したDNS環境では機能しません。"
    },
    {
      "indent": 3,
      "text": "Some HTTPS client implementations perform real time third-party checks of the revocation status of the certificates being used by TLS. If this check is done as part of the DoH server connection procedure and the check itself requires DNS resolution to connect to the third party, a deadlock can occur. The use of Online Certificate Status Protocol (OCSP) [RFC6960] servers or Authority Information Access (AIA) for Certificate Revocation List (CRL) fetching (see Section 4.2.2.1 of [RFC5280]) are examples of how this deadlock can happen. To mitigate the possibility of deadlock, the authentication given DoH servers SHOULD NOT rely on DNS-based references to external resources in the TLS handshake. For OCSP, the server can bundle the certificate status as part of the handshake using a mechanism appropriate to the version of TLS, such as using Section 4.4.2.1 of [RFC8446] for TLS version 1.3. AIA deadlocks can be avoided by providing intermediate certificates that might otherwise be obtained through additional requests. Note that these deadlocks also need to be considered for servers that a DoH server might redirect to.",
      "ja": "一部のHTTPSクライアント実装は、TLSによって使用されている証明書の失効ステータスのリアルタイムのサードパーティチェックを実行します。このチェックがDoHサーバー接続手順の一部として行われ、チェック自体がサードパーティへの接続にDNS解決を必要とする場合、デッドロックが発生する可能性があります。証明書失効リスト（CRL）の取得にオンライン証明書ステータスプロトコル（OCSP）[RFC6960]サーバーまたは機関情報アクセス（AIA）を使用する（[RFC5280]のセクション4.2.2.1を参照）は、このデッドロックがどのように発生するかの例です。デッドロックの可能性を軽減するために、DoHサーバーに与えられた認証は、TLSハンドシェイクの外部リソースへのDNSベースの参照に依存するべきではありません。 OCSPの場合、サーバーは、TLSバージョン1.3の[RFC8446]のセクション4.4.2.1を使用するなど、TLSのバージョンに適したメカニズムを使用して、ハンドシェイクの一部として証明書ステータスをバンドルできます。 AIAデッドロックは、追加のリクエストで取得できる中間証明書を提供することで回避できます。これらのデッドロックは、DoHサーバーがリダイレクトする可能性のあるサーバーについても考慮する必要があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "A DoH client may face a similar bootstrapping problem when the HTTP request needs to resolve the hostname portion of the DNS URI. Just as the address of a traditional DNS nameserver cannot be originally determined from that same server, a DoH client cannot use its DoH server to initially resolve the server's host name into an address. Alternative strategies a client might employ include 1) making the initial resolution part of the configuration, 2) IP-based URIs and corresponding IP-based certificates for HTTPS, or 3) resolving the DNS API server's hostname via traditional DNS or another DoH server while still authenticating the resulting connection via HTTPS.",
      "ja": "HTTP要求でDNS URIのホスト名部分を解決する必要がある場合、DoHクライアントは同様のブートストラップの問題に直面する可能性があります。 従来のDNSネームサーバーのアドレスが同じサーバーから最初に決定できないのと同様に、DoHクライアントはそのDoHサーバーを使用してサーバーのホスト名を最初にアドレスに解決することはできません。 クライアントが採用できる代替戦略には、1）初期解決部分を構成の一部にする、2）IPベースのURIおよびHTTPSの対応するIPベースの証明書を作成する、または3）従来のDNSまたは別のDoHサーバーを介してDNS APIサーバーのホスト名を解決する HTTPSを介した接続の認証を引き続き行います。"
    },
    {
      "indent": 3,
      "text": "HTTP [RFC7230] is a stateless application-level protocol, and therefore DoH implementations do not provide stateful ordering guarantees between different requests. DoH cannot be used as a transport for other protocols that require strict ordering.",
      "ja": "HTTP [RFC7230]はステートレスなアプリケーションレベルのプロトコルであるため、DoH実装は異なるリクエスト間でステートフルな順序保証を提供しません。 DoHは、厳密な順序付けが必要な他のプロトコルのトランスポートとして使用できません。"
    },
    {
      "indent": 3,
      "text": "A DoH server is allowed to answer queries with any valid DNS response. For example, a valid DNS response might have the TC (truncation) bit set in the DNS header to indicate that the server was not able to retrieve a full answer for the query but is providing the best answer it could get. A DoH server can reply to queries with an HTTP error for queries that it cannot fulfill. In this same example, a DoH server could use an HTTP error instead of a non-error response that has the TC bit set.",
      "ja": "DoHサーバーは、有効なDNS応答を使用してクエリに応答できます。 たとえば、有効なDNS応答のDNSヘッダーにTC（切り捨て）ビットを設定して、サーバーがクエリに対する完全な回答を取得できなかったが、取得できる最良の回答を提供していることを示すことができます。 DoHサーバーは、処理できないクエリに対してHTTPエラーでクエリに応答できます。 この同じ例では、DoHサーバーは、TCビットが設定された非エラー応答の代わりにHTTPエラーを使用できます。"
    },
    {
      "indent": 3,
      "text": "Many extensions to DNS, using [RFC6891], have been defined over the years. Extensions that are specific to the choice of transport, such as [RFC7828], are not applicable to DoH.",
      "ja": "[RFC6891]を使用したDNSの多くの拡張は、長年にわたって定義されてきました。 [RFC7828]などのトランスポートの選択に固有の拡張は、DoHには適用されません。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11.参照"
    },
    {
      "indent": 0,
      "text": "11.1. Normative References",
      "section_title": true,
      "ja": "11.1。 規範的参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC1035] Mockapetris, P., \"Domain names - implementation and specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035, November 1987, <https://www.rfc-editor.org/info/rfc1035>.",
      "ja": "[RFC1035] Mockapetris、P。、「ドメイン名-実装と仕様」、STD 13、RFC 1035、DOI 10.17487 / RFC1035、1987年11月、<https://www.rfc-editor.org/info/rfc1035>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S.、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC2308] Andrews, M., \"Negative Caching of DNS Queries (DNS NCACHE)\", RFC 2308, DOI 10.17487/RFC2308, March 1998, <https://www.rfc-editor.org/info/rfc2308>.",
      "ja": "[RFC2308] Andrews、M.、「ネガティブキャッシュのDNSクエリ（DNS NCACHE）」、RFC 2308、DOI 10.17487 / RFC2308、1998年3月、<https://www.rfc-editor.org/info/rfc2308>。"
    },
    {
      "indent": 3,
      "text": "[RFC4648] Josefsson, S., \"The Base16, Base32, and Base64 Data Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006, <https://www.rfc-editor.org/info/rfc4648>.",
      "ja": "[RFC4648] Josefsson、S。、「The Base16、Base32、およびBase64 Data Encodings」、RFC 4648、DOI 10.17487 / RFC4648、2006年10月、<https://www.rfc-editor.org/info/rfc4648>。"
    },
    {
      "indent": 3,
      "text": "[RFC6265] Barth, A., \"HTTP State Management Mechanism\", RFC 6265, DOI 10.17487/RFC6265, April 2011, <https://www.rfc-editor.org/info/rfc6265>.",
      "ja": "[RFC6265] Barth、A。、「HTTP状態管理メカニズム」、RFC 6265、DOI 10.17487 / RFC6265、2011年4月、<https://www.rfc-editor.org/info/rfc6265>。"
    },
    {
      "indent": 3,
      "text": "[RFC6570] Gregorio, J., Fielding, R., Hadley, M., Nottingham, M., and D. Orchard, \"URI Template\", RFC 6570, DOI 10.17487/RFC6570, March 2012, <https://www.rfc-editor.org/info/rfc6570>.",
      "ja": "[RFC6570]グレゴリオ、J。、フィールディング、R。、ハドリー、M。、ノッティンガム、M。、およびD.オーチャード、「URIテンプレート」、RFC 6570、DOI 10.17487 / RFC6570、2012年3月、<https：// www .rfc-editor.org / info / rfc6570>。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <https://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230]フィールディング、R。、エド。 およびJ. Reschke、Ed。、「ハイパーテキスト転送プロトコル（HTTP / 1.1）：メッセージの構文とルーティング」、RFC 7230、DOI 10.17487 / RFC7230、2014年6月、<https://www.rfc-editor.org/info/ rfc7230>。"
    },
    {
      "indent": 3,
      "text": "[RFC7231] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\", RFC 7231, DOI 10.17487/RFC7231, June 2014, <https://www.rfc-editor.org/info/rfc7231>.",
      "ja": "[RFC7231]フィールディング、R。、エド。 およびJ. Reschke、Ed。、「ハイパーテキスト転送プロトコル（HTTP / 1.1）：セマンティクスとコンテンツ」、RFC 7231、DOI 10.17487 / RFC7231、2014年6月、<https://www.rfc-editor.org/info/rfc7231 >。"
    },
    {
      "indent": 3,
      "text": "[RFC7232] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\", RFC 7232, DOI 10.17487/RFC7232, June 2014, <https://www.rfc-editor.org/info/rfc7232>.",
      "ja": "[RFC7232]フィールディング、R。、エド。 およびJ. 。"
    },
    {
      "indent": 3,
      "text": "[RFC7234] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\", RFC 7234, DOI 10.17487/RFC7234, June 2014, <https://www.rfc-editor.org/info/rfc7234>.",
      "ja": "[RFC7234]フィールディング、R。、編集、ノッティンガム、M。、編集、およびJ.レシュケ、編集、「ハイパーテキスト転送プロトコル（HTTP / 1.1）：キャッシュ」、RFC 7234、DOI 10.17487 / RFC7234、2014年6月 、<https://www.rfc-editor.org/info/rfc7234>。"
    },
    {
      "indent": 3,
      "text": "[RFC7235] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Authentication\", RFC 7235, DOI 10.17487/RFC7235, June 2014, <https://www.rfc-editor.org/info/rfc7235>.",
      "ja": "[RFC7235]フィールディング、R。、エド。 およびJ. Reschke、Ed。、「ハイパーテキスト転送プロトコル（HTTP / 1.1）：認証」、RFC 7235、DOI 10.17487 / RFC7235、2014年6月、<https://www.rfc-editor.org/info/rfc7235>。"
    },
    {
      "indent": 3,
      "text": "[RFC7540] Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext Transfer Protocol Version 2 (HTTP/2)\", RFC 7540, DOI 10.17487/RFC7540, May 2015, <https://www.rfc-editor.org/info/rfc7540>.",
      "ja": "[RFC7540] Belshe、M.、Peon、R.、およびM. Thomson、Ed。、「ハイパーテキスト転送プロトコルバージョン2（HTTP / 2）」、RFC 7540、DOI 10.17487 / RFC7540、2015年5月、<https：// www.rfc-editor.org/info/rfc7540>。"
    },
    {
      "indent": 3,
      "text": "[RFC7541] Peon, R. and H. Ruellan, \"HPACK: Header Compression for HTTP/2\", RFC 7541, DOI 10.17487/RFC7541, May 2015, <https://www.rfc-editor.org/info/rfc7541>.",
      "ja": "[RFC7541] Peon、R.およびH. Ruellan、「HPACK：HTTP / 2のヘッダー圧縮」、RFC 7541、DOI 10.17487 / RFC7541、2015年5月、<https://www.rfc-editor.org/info/rfc7541 >。"
    },
    {
      "indent": 3,
      "text": "[RFC7626] Bortzmeyer, S., \"DNS Privacy Considerations\", RFC 7626, DOI 10.17487/RFC7626, August 2015, <https://www.rfc-editor.org/info/rfc7626>.",
      "ja": "[RFC7626] Bortzmeyer、S。、「DNSプライバシーに関する考慮事項」、RFC 7626、DOI 10.17487 / RFC7626、2015年8月、<https://www.rfc-editor.org/info/rfc7626>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[RFC8446] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018, <https://www.rfc-editor.org/info/rfc8446>.",
      "ja": "[RFC8446] Rescorla、E。、「トランスポート層セキュリティ（TLS）プロトコルバージョン1.3」、RFC 8446、DOI 10.17487 / RFC8446、2018年8月、<https://www.rfc-editor.org/info/rfc8446>。"
    },
    {
      "indent": 0,
      "text": "11.2. Informative References",
      "section_title": true,
      "ja": "11.2。 参考資料"
    },
    {
      "indent": 3,
      "text": "[FETCH] \"Fetch Living Standard\", August 2018, <https://fetch.spec.whatwg.org/>.",
      "ja": "[FETCH]「Fetch Living Standard」、2018年8月、<https://fetch.spec.whatwg.org/>。"
    },
    {
      "indent": 3,
      "text": "[RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, DOI 10.17487/RFC2818, May 2000, <https://www.rfc-editor.org/info/rfc2818>.",
      "ja": "[RFC2818] Rescorla、E。、「HTTP Over TLS」、RFC 2818、DOI 10.17487 / RFC2818、2000年5月、<https://www.rfc-editor.org/info/rfc2818>。"
    },
    {
      "indent": 3,
      "text": "[RFC5280] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 5280, DOI 10.17487/RFC5280, May 2008, <https://www.rfc-editor.org/info/rfc5280>.",
      "ja": "[RFC5280] Cooper、D.、Santesson、S.、Farrell、S.、Boeyen、S.、Housley、R.、およびW. Polk、 \"インターネットX.509公開鍵インフラストラクチャ証明書および証明書失効リスト（CRL）プロファイル \"、RFC 5280、DOI 10.17487 / RFC5280、2008年5月、<https://www.rfc-editor.org/info/rfc5280>。"
    },
    {
      "indent": 3,
      "text": "[RFC5861] Nottingham, M., \"HTTP Cache-Control Extensions for Stale Content\", RFC 5861, DOI 10.17487/RFC5861, May 2010, <https://www.rfc-editor.org/info/rfc5861>.",
      "ja": "[RFC5861]ノッティンガム、M。、「古いコンテンツのHTTPキャッシュ制御拡張機能」、RFC 5861、DOI 10.17487 / RFC5861、2010年5月、<https://www.rfc-editor.org/info/rfc5861>"
    },
    {
      "indent": 3,
      "text": "[RFC6147] Bagnulo, M., Sullivan, A., Matthews, P., and I. van Beijnum, \"DNS64: DNS Extensions for Network Address Translation from IPv6 Clients to IPv4 Servers\", RFC 6147, DOI 10.17487/RFC6147, April 2011, <https://www.rfc-editor.org/info/rfc6147>.",
      "ja": "[RFC6147] Bagnulo、M.、Sullivan、A.、Matthews、P。、およびI. van Beijnum、「DNS64：IPv6クライアントからIPv4サーバーへのネットワークアドレス変換のためのDNS拡張」、RFC 6147、DOI 10.17487 / RFC6147、4月 2011、<https://www.rfc-editor.org/info/rfc6147>。"
    },
    {
      "indent": 3,
      "text": "[RFC6891] Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms for DNS (EDNS(0))\", STD 75, RFC 6891, DOI 10.17487/RFC6891, April 2013, <https://www.rfc-editor.org/info/rfc6891>.",
      "ja": "[RFC6891] Damas、J.、Graff、M。、およびP. Vixie、「DNSの拡張メカニズム（EDNS（0））」、STD 75、RFC 6891、DOI 10.17487 / RFC6891、2013年4月、<https：// www.rfc-editor.org/info/rfc6891>。"
    },
    {
      "indent": 3,
      "text": "[RFC6950] Peterson, J., Kolkman, O., Tschofenig, H., and B. Aboba, \"Architectural Considerations on Application Features in the DNS\", RFC 6950, DOI 10.17487/RFC6950, October 2013, <https://www.rfc-editor.org/info/rfc6950>.",
      "ja": "[RFC6950] Peterson、J.、Kolkman、O.、Tschofenig、H。、およびB. Aboba、「DNSのアプリケーション機能に関するアーキテクチャ上の考慮事項」、RFC 6950、DOI 10.17487 / RFC6950、2013年10月、<https：// www.rfc-editor.org/info/rfc6950>。"
    },
    {
      "indent": 3,
      "text": "[RFC6960] Santesson, S., Myers, M., Ankney, R., Malpani, A., Galperin, S., and C. Adams, \"X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP\", RFC 6960, DOI 10.17487/RFC6960, June 2013, <https://www.rfc-editor.org/info/rfc6960>.",
      "ja": "[RFC6960] Santesson、S.、Myers、M.、Ankney、R.、Malpani、A.、Galperin、S。、およびC. Adams、「X.509インターネット公開鍵インフラストラクチャオンライン証明書ステータスプロトコル-OCSP」、RFC 6960、DOI 10.17487 / RFC6960、2013年6月、<https://www.rfc-editor.org/info/rfc6960>。"
    },
    {
      "indent": 3,
      "text": "[RFC7258] Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an Attack\", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May 2014, <https://www.rfc-editor.org/info/rfc7258>.",
      "ja": "[RFC7258] Farrell、S。、およびH. Tschofenig、「Pervasive Monitoring is a Attack」、BCP 188、RFC 7258、DOI 10.17487 / RFC7258、2014年5月、<https://www.rfc-editor.org/info/rfc7258 >。"
    },
    {
      "indent": 3,
      "text": "[RFC7413] Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014, <https://www.rfc-editor.org/info/rfc7413>.",
      "ja": "[RFC7413]チェンY.、チュー、J。、ラダクリシュナン、S。、およびA.ジェイン、「TCP Fast Open」、RFC 7413、DOI 10.17487 / RFC7413、2014年12月、<https：//www.rfc-editor .org / info / rfc7413>。"
    },
    {
      "indent": 3,
      "text": "[RFC7828] Wouters, P., Abley, J., Dickinson, S., and R. Bellis, \"The edns-tcp-keepalive EDNS0 Option\", RFC 7828, DOI 10.17487/RFC7828, April 2016, <https://www.rfc-editor.org/info/rfc7828>.",
      "ja": "[RFC7828] Wouters、P.、Abley、J.、Dickinson、S。、およびR. Bellis、「edns-tcp-keepalive EDNS0オプション」、RFC 7828、DOI 10.17487 / RFC7828、2016年4月、<https：// www.rfc-editor.org/info/rfc7828>。"
    },
    {
      "indent": 3,
      "text": "[RFC7830] Mayrhofer, A., \"The EDNS(0) Padding Option\", RFC 7830, DOI 10.17487/RFC7830, May 2016, <https://www.rfc-editor.org/info/rfc7830>.",
      "ja": "[RFC7830] Mayrhofer、A。、「EDNS（0）パディングオプション」、RFC 7830、DOI 10.17487 / RFC7830、2016年5月、<https://www.rfc-editor.org/info/rfc7830>。"
    },
    {
      "indent": 3,
      "text": "[RFC7858] Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D., and P. Hoffman, \"Specification for DNS over Transport Layer Security (TLS)\", RFC 7858, DOI 10.17487/RFC7858, May 2016, <https://www.rfc-editor.org/info/rfc7858>.",
      "ja": "[RFC7858] Hu、Z.、Zhu、L.、Heidemann、J.、Mankin、A.、Wessels、D。、およびP. Hoffman、「Transport Layer Security（TLS）上のDNSの仕様」、RFC 7858、DOI 10.17487 / RFC7858、2016年5月、<https://www.rfc-editor.org/info/rfc7858>。"
    },
    {
      "indent": 3,
      "text": "[RFC8467] Mayrhofer, A., \"Padding Policies for Extension Mechanisms for DNS (EDNS(0))\", RFC 8467, DOI 10.17487/RFC8467, October 2018, <https://www.rfc-editor.org/info/rfc8467>.",
      "ja": "[RFC8467] Mayrhofer、A。、「DNSの拡張メカニズムのパディングポリシー（EDNS（0））」、RFC 8467、DOI 10.17487 / RFC8467、2018年10月、<https://www.rfc-editor.org/info/ rfc8467>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Protocol Development",
      "ja": "付録A.プロトコル開発"
    },
    {
      "indent": 3,
      "text": "This appendix describes the requirements used to design DoH. These requirements are listed here to help readers understand the current protocol, not to limit how the protocol might be developed in the future. This appendix is non-normative.",
      "ja": "この付録では、DoHの設計に使用される要件について説明します。 これらの要件は、読者が現在のプロトコルを理解できるようにするためのものであり、将来のプロトコルの開発方法を制限するものではありません。 この付録は規範的ではありません。"
    },
    {
      "indent": 3,
      "text": "The protocol described in this document based its design on the following protocol requirements:",
      "ja": "このドキュメントで説明されているプロトコルは、次のプロトコル要件に基づいて設計されています。"
    },
    {
      "indent": 3,
      "text": "o The protocol must use normal HTTP semantics.",
      "ja": "oプロトコルは通常のHTTPセマンティクスを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "o The queries and responses must be able to be flexible enough to express every DNS query that would normally be sent in DNS over UDP (including queries and responses that use DNS extensions, but not those that require multiple responses).",
      "ja": "oクエリと応答は、通常UDP over DNSで送信されるすべてのDNSクエリ（DNS拡張機能を使用するクエリと応答を含むが、複数の応答を必要とするものを含まない）を表現するのに十分な柔軟性を備えている必要があります。"
    },
    {
      "indent": 3,
      "text": "o The protocol must permit the addition of new formats for DNS queries and responses.",
      "ja": "oプロトコルは、DNSクエリとDNS応答の新しいフォーマットの追加を許可しなければなりません。"
    },
    {
      "indent": 3,
      "text": "o The protocol must ensure interoperability by specifying a single format for requests and responses that is mandatory to implement. That format must be able to support future modifications to the DNS protocol including the inclusion of one or more EDNS options (including those not yet defined).",
      "ja": "oプロトコルは、実装に必須の単一の形式の要求と応答を指定することにより、相互運用性を確保する必要があります。 その形式は、1つ以上のEDNSオプション（まだ定義されていないものを含む）を含めるなど、DNSプロトコルに対する将来の変更をサポートできる必要があります。"
    },
    {
      "indent": 3,
      "text": "o The protocol must use a secure transport that meets the requirements for HTTPS.",
      "ja": "oプロトコルは、HTTPSの要件を満たす安全なトランスポートを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The following were considered non-requirements:",
      "ja": "以下は非要件と見なされました。"
    },
    {
      "indent": 3,
      "text": "o Supporting network-specific DNS64 [RFC6147]",
      "ja": "oネットワーク固有のDNS64のサポート[RFC6147]"
    },
    {
      "indent": 3,
      "text": "o Supporting other network-specific inferences from plaintext DNS queries",
      "ja": "oプレーンテキストDNSクエリからの他のネットワーク固有の推論をサポート"
    },
    {
      "indent": 3,
      "text": "o Supporting insecure HTTP",
      "ja": "o安全でないHTTPのサポート"
    },
    {
      "indent": 0,
      "text": "Appendix B. Previous Work on DNS over HTTP or in Other Formats",
      "ja": "付録B. DNS over HTTPまたは他の形式に関する以前の研究"
    },
    {
      "indent": 3,
      "text": "The following is an incomplete list of earlier work that related to DNS over HTTP/1 or representing DNS data in other formats.",
      "ja": "以下は、HTTP over DNS / 1に関連するか、DNSデータを他の形式で表す以前の研究の不完全なリストです。"
    },
    {
      "indent": 3,
      "text": "The list includes links to the tools.ietf.org site (because these documents are all expired) and web sites of software.",
      "ja": "リストには、tools.ietf.orgサイト（これらのドキュメントはすべて期限切れです）およびソフトウェアのWebサイトへのリンクが含まれています。"
    },
    {
      "indent": 3,
      "text": "o <https://tools.ietf.org/html/draft-mohan-dns-query-xml>",
      "ja": "o <https://tools.ietf.org/html/draft-mohan-dns-query-xml>"
    },
    {
      "indent": 3,
      "text": "o <https://tools.ietf.org/html/draft-daley-dnsxml>",
      "ja": "o <https://tools.ietf.org/html/draft-daley-dnsxml>"
    },
    {
      "indent": 3,
      "text": "o <https://tools.ietf.org/html/draft-dulaunoy-dnsop-passive-dns-cof>",
      "ja": "o <https://tools.ietf.org/html/draft-dulaunoy-dnsop-passive-dns-cof>"
    },
    {
      "indent": 3,
      "text": "o <https://tools.ietf.org/html/draft-bortzmeyer-dns-json>",
      "ja": "o <https://tools.ietf.org/html/draft-bortzmeyer-dns-json>"
    },
    {
      "indent": 3,
      "text": "o <https://www.nlnetlabs.nl/projects/dnssec-trigger/>",
      "ja": "o <https://www.nlnetlabs.nl/projects/dnssec-trigger/>"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This work required a high level of cooperation between experts in different technologies. Thank you Ray Bellis, Stephane Bortzmeyer, Manu Bretelle, Sara Dickinson, Massimiliano Fantuzzi, Tony Finch, Daniel Kahn Gilmor, Olafur Gudmundsson, Wes Hardaker, Rory Hewitt, Joe Hildebrand, David Lawrence, Eliot Lear, John Mattsson, Alex Mayrhofer, Mark Nottingham, Jim Reid, Adam Roach, Ben Schwartz, Davey Song, Daniel Stenberg, Andrew Sullivan, Martin Thomson, and Sam Weiler.",
      "ja": "この作業には、さまざまな技術の専門家間の高度な協力が必要でした。 ありがとう、レイ・ベリス、ステファン・ボルツマイヤー、マヌ・ブレテル、サラ・ディキンソン、マッシミリアーノ・ファントゥッツィ、トニー・フィンチ、ダニエル・カーン・ギルモア、オラファー・グドマンドソン、ウェス・ハルダカー、ロリー・ヒューイット、ジョー・ヒルデブランド、デビッド・ローレンス、エリオット・リア、ジョン・マットソン、アレックス・マイヤーホーファー、マーク・ノッティング 、ジムリード、アダムローチ、ベンシュワルツ、デイビーソング、ダニエルステンバーグ、アンドリューサリバン、マーティントムソン、サムワイラー。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Paul Hoffman ICANN",
      "ja": "ポール・ホフマンICANN"
    },
    {
      "indent": 3,
      "text": "Email: paul.hoffman@icann.org",
      "ja": "メール：paul.hoffman@icann.org"
    },
    {
      "indent": 3,
      "text": "Patrick McManus Mozilla",
      "ja": "パトリック・マクマナス・モジラ"
    },
    {
      "indent": 3,
      "text": "Email: mcmanus@ducksong.com",
      "ja": "メール：mcmanus@ducksong.com"
    }
  ]
}