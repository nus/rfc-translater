{
  "title": {
    "text": "RFC 8471 - The Token Binding Protocol Version 1.0",
    "ja": "RFC 8471 - トークンバインディングプロトコルバージョン1.0"
  },
  "number": 8471,
  "created_at": "2019-10-22 22:07:16.866649+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                     A. Popov, Ed.\nRequest for Comments: 8471                                   M. Nystroem\nCategory: Standards Track                                Microsoft Corp.\nISSN: 2070-1721                                               D. Balfanz\n                                                             Google Inc.\n                                                               J. Hodges\n                                                  Kings Mountain Systems\n                                                            October 2018",
      "raw": true
    },
    {
      "indent": 17,
      "text": "The Token Binding Protocol Version 1.0",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document specifies version 1.0 of the Token Binding protocol. The Token Binding protocol allows client/server applications to create long-lived, uniquely identifiable TLS bindings spanning multiple TLS sessions and connections. Applications are then enabled to cryptographically bind security tokens to the TLS layer, preventing token export and replay attacks. To protect privacy, the Token Binding identifiers are only conveyed over TLS and can be reset by the user at any time.",
      "ja": "このドキュメントでは、Token Bindingプロトコルのバージョン1.0を指定しています。 トークンバインディングプロトコルを使用すると、クライアント/サーバーアプリケーションは、複数のTLSセッションおよび接続にまたがる、長期間有効で一意に識別可能なTLSバインディングを作成できます。 その後、アプリケーションはセキュリティトークンを暗号化してTLSレイヤーにバインドし、トークンのエクスポートおよびリプレイ攻撃を防ぎます。 プライバシーを保護するために、トークンバインディング識別子はTLSを介してのみ伝達され、ユーザーはいつでもリセットできます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはインターネット標準化過程の文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、Internet Engineering Task Force（IETF）の製品です。 IETFコミュニティのコンセンサスを表しています。 これは公開レビューを受けており、Internet Engineering Steering Group（IESG）による公開が承認されています。 インターネット標準の詳細については、RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8471.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックに関する情報は、https：//www.rfc-editor.org/info/rfc8471で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2018 IETF Trustおよび文書作成者として特定された人物。 全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78と、この文書の公開日に有効なIETF文書に関するIETFトラストの法的条項（https://trustee.ietf.org/license-info）の対象となります。 これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているので、注意深く確認してください。 このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseテキストを含める必要があり、Simplified BSD Licenseに記載されている保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n  1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   4\n2.  Token Binding Protocol Overview . . . . . . . . . . . . . . .   4\n3.  Token Binding Protocol Message  . . . . . . . . . . . . . . .   5\n  3.1.  TokenBinding.tokenbinding_type  . . . . . . . . . . . . .   6\n  3.2.  TokenBinding.tokenbindingid . . . . . . . . . . . . . . .   7\n  3.3.  TokenBinding.signature  . . . . . . . . . . . . . . . . .   7\n  3.4.  TokenBinding.extensions . . . . . . . . . . . . . . . . .   9\n4.  Establishing a Token Binding  . . . . . . . . . . . . . . . .   9\n  4.1.  Client Processing Rules . . . . . . . . . . . . . . . . .   9\n  4.2.  Server Processing Rules . . . . . . . . . . . . . . . . .  10\n5.  Bound Security Token Creation and Validation  . . . . . . . .  11\n6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11\n  6.1.  Token Binding Key Parameters Registry . . . . . . . . . .  11\n  6.2.  Token Binding Types Registry  . . . . . . . . . . . . . .  12\n  6.3.  Token Binding Extensions Registry . . . . . . . . . . . .  13\n  6.4.  Registration of Token Binding TLS Exporter Label  . . . .  13\n7.  Security Considerations . . . . . . . . . . . . . . . . . . .  14\n  7.1.  Security Token Replay . . . . . . . . . . . . . . . . . .  14\n  7.2.  Downgrade Attacks . . . . . . . . . . . . . . . . . . . .  14\n  7.3.  Token Binding Key-Sharing between Applications  . . . . .  14\n  7.4.  Triple Handshake Vulnerability in TLS 1.2 and Older TLS\n        Versions  . . . . . . . . . . . . . . . . . . . . . . . .  15\n8.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .  15\n9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  16\n  9.1.  Normative References  . . . . . . . . . . . . . . . . . .  16\n  9.2.  Informative References  . . . . . . . . . . . . . . . . .  17\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  18\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  18",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "Servers often generate various security tokens (e.g., HTTP cookies, OAuth tokens [RFC6749]) for applications to present when accessing protected resources. In general, any party in possession of bearer security tokens gains access to certain protected resource(s). Attackers take advantage of this by exporting bearer tokens from a user's application connections or machines, presenting them to application servers, and impersonating authenticated users. The idea of Token Binding is to prevent such attacks by cryptographically binding application security tokens to the underlying TLS layer [RFC5246]. (Note: This document deals with TLS 1.2 and therefore refers to RFC 5246 (which has been obsoleted by RFC 8446); [TOKENBIND-TLS13] addresses Token Binding in TLS 1.3.)",
      "ja": "サーバーは、多くの場合、保護されたリソースにアクセスするときにアプリケーションが提示するさまざまなセキュリティトークン（HTTP Cookie、OAuthトークン[RFC6749]など）を生成します。 一般に、ベアラセキュリティトークンを所有している関係者は、特定の保護されたリソースにアクセスできます。 攻撃者は、ユーザーのアプリケーション接続またはマシンからベアラートークンをエクスポートし、それらをアプリケーションサーバーに提示し、認証されたユーザーになりすますことでこれを利用します。 トークンバインディングの概念は、アプリケーションセキュリティトークンを基盤となるTLSレイヤーに暗号的にバインドすることにより、このような攻撃を防ぐことです[RFC5246]。 （注：このドキュメントはTLS 1.2を扱っているため、RFC 5246（RFC 8446で廃止されています）を参照しています。[TOKENBIND-TLS13]はTLS 1.3のトークンバインディングに対応しています。）"
    },
    {
      "indent": 3,
      "text": "A Token Binding is established by a User Agent generating a private-public key pair (possibly within a secure hardware module, such as a Trusted Platform Module) per target server, providing the public key to the server, and proving possession of the corresponding private key, on every TLS connection to the server. The proof of possession involves signing the Exported Keying Material (EKM) [RFC5705] from the TLS connection with the private key. The corresponding public key is included in the Token Binding identifier structure (described in Section 3.2 (\"TokenBinding.tokenbindingid\")). Token Bindings are long-lived, i.e., they encompass multiple TLS connections and TLS sessions between a given client and server. To protect privacy, Token Binding IDs are never conveyed over insecure connections and can be reset by the user at any time, e.g., when clearing browser cookies.",
      "ja": "トークンバインディングは、ターゲットサーバーごとに秘密エージェントと公開キーのペア（おそらく、トラステッドプラットフォームモジュールなどのセキュリティで保護されたハードウェアモジュール内）を生成し、サーバーに公開キーを提供し、対応する秘密の所有を証明するユーザーエージェントによって確立されます サーバーへのすべてのTLS接続でのキー。 所有の証明には、TLS接続からエクスポートされた鍵素材（EKM）[RFC5705]に秘密鍵で署名することが含まれます。 対応する公開鍵は、トークンバインディング識別子構造に含まれています（セクション3.2（「TokenBinding.tokenbindingid」）で説明）。 トークンバインディングは長期間有効です。つまり、特定のクライアントとサーバー間の複数のTLS接続とTLSセッションを包含します。 プライバシーを保護するために、トークンバインディングIDは安全でない接続を介して伝達されることはなく、ブラウザCookieをクリアするときなど、ユーザーがいつでもリセットできます。"
    },
    {
      "indent": 3,
      "text": "When issuing a security token to a client that supports Token Binding, a server includes the client's Token Binding ID (or its cryptographic hash) in the token. Later on, when a client presents a security token containing a Token Binding ID, the server verifies that the ID in the token matches the ID of the Token Binding established with the client. In the case of a mismatch, the server rejects the token (details are application specific).",
      "ja": "トークンバインディングをサポートするクライアントにセキュリティトークンを発行する場合、サーバーはトークンにクライアントのトークンバインディングID（またはその暗号化ハッシュ）を含めます。 後で、クライアントがトークンバインディングIDを含むセキュリティトークンを提示すると、サーバーは、トークン内のIDがクライアントで確立されたトークンバインディングのIDと一致することを確認します。 不一致の場合、サーバーはトークンを拒否します（詳細はアプリケーション固有です）。"
    },
    {
      "indent": 3,
      "text": "In order to successfully export and replay a bound security token, an attacker needs to also be able to use the client's private key; this is hard to do if the key is specially protected, e.g., generated in a secure hardware module.",
      "ja": "バインドされたセキュリティトークンを正常にエクスポートおよび再生するには、攻撃者はクライアントの秘密キーも使用できる必要があります。 これは、キーが特別に保護されている場合（たとえば、安全なハードウェアモジュールで生成されている場合）には困難です。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Language",
      "section_title": true,
      "ja": "1.1。 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、および「OPTIONAL」 この文書の「」は、BCP 14 [RFC2119] [RFC8174]で説明されているように、ここに示すようにすべての大文字で表示される場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Token Binding Protocol Overview",
      "section_title": true,
      "ja": "2.トークンバインディングプロトコルの概要"
    },
    {
      "indent": 3,
      "text": "In the course of a TLS handshake, a client and server can use the Token Binding negotiation TLS extension [RFC8472] to negotiate the Token Binding protocol version and the parameters (signature algorithm, length) of the Token Binding key. This negotiation does not require additional round trips.",
      "ja": "TLSハンドシェイクの過程で、クライアントとサーバーは、トークンバインディングネゴシエーションTLS拡張[RFC8472]を使用して、トークンバインディングプロトコルバージョンとトークンバインディングキーのパラメーター（署名アルゴリズム、長さ）をネゴシエートできます。 この交渉では、追加の往復は必要ありません。"
    },
    {
      "indent": 3,
      "text": "Version 1.0 of the Token Binding protocol is represented by TB_ProtocolVersion.major = 1 and TB_ProtocolVersion.minor = 0 in the Token Binding negotiation TLS extension; see [RFC8472] (\"Transport Layer Security (TLS) Extension for Token Binding Protocol Negotiation\").",
      "ja": "Token Bindingプロトコルのバージョン1.0は、Token BindingネゴシエーションTLS拡張でTB_ProtocolVersion.major = 1およびTB_ProtocolVersion.minor = 0で表されます。 [RFC8472]（「トークンバインディングプロトコルネゴシエーション用のトランスポート層セキュリティ（TLS）拡張」を参照）。"
    },
    {
      "indent": 3,
      "text": "The Token Binding protocol consists of one message sent by the client to the server, proving possession of one or more client-generated asymmetric private keys. This message is not sent if the Token Binding negotiation has been unsuccessful. The Token Binding message is sent with the application protocol data over TLS.",
      "ja": "トークンバインディングプロトコルは、クライアントからサーバーに送信される1つのメッセージで構成され、1つ以上のクライアント生成の非対称秘密キーを所有していることを証明します。 トークンバインディングネゴシエーションが失敗した場合、このメッセージは送信されません。 トークンバインディングメッセージは、TLSを介してアプリケーションプロトコルデータとともに送信されます。"
    },
    {
      "indent": 3,
      "text": "A server receiving the Token Binding message verifies that the key parameters in the message match the Token Binding parameters negotiated (e.g., via [RFC8472]) and then validates the signatures contained in the Token Binding message. If either of these checks fails, the server rejects the binding, along with all associated bound tokens. Otherwise, the Token Binding is successfully established with the ID contained in the Token Binding message.",
      "ja": "トークンバインディングメッセージを受信するサーバーは、メッセージ内のキーパラメーターがネゴシエートされたトークンバインディングパラメーターと一致することを検証し（たとえば、[RFC8472]を介して）、トークンバインディングメッセージに含まれる署名を検証します。 これらのチェックのいずれかが失敗した場合、サーバーは、関連付けられたすべてのバインドされたトークンとともに、バインドを拒否します。 それ以外の場合、トークンバインディングは、トークンバインディングメッセージに含まれるIDで正常に確立されます。"
    },
    {
      "indent": 3,
      "text": "When a server supporting the Token Binding protocol receives a bound token, the server compares the Token Binding ID in the token with the Token Binding ID established with the client. If the bound token is received on a TLS connection without a Token Binding or if the Token Binding IDs do not match, the token is rejected.",
      "ja": "トークンバインディングプロトコルをサポートするサーバーがバインドされたトークンを受信すると、サーバーはトークン内のトークンバインディングIDとクライアントで確立されたトークンバインディングIDを比較します。 バインドされたトークンが、トークンバインディングのないTLS接続で受信された場合、またはトークンバインディングIDが一致しない場合、トークンは拒否されます。"
    },
    {
      "indent": 3,
      "text": "This document defines the format of the Token Binding protocol message, the process of establishing a Token Binding, the format of the Token Binding ID, and the process of validating a bound token. [RFC8472] describes the negotiation of the Token Binding protocol and key parameters. [RFC8473] (\"Token Binding over HTTP\") explains how the Token Binding message is encapsulated within HTTP/1.1 messages",
      "ja": "このドキュメントは、トークンバインディングプロトコルメッセージのフォーマット、トークンバインディングを確立するプロセス、トークンバインディングIDのフォーマット、およびバインドされたトークンを検証するプロセスを定義します。 [RFC8472]は、Token Bindingプロトコルとキーパラメータのネゴシエーションについて説明しています。 [RFC8473]（「HTTPを介したトークンバインディング」）は、トークンバインディングメッセージがHTTP / 1.1メッセージ内にカプセル化される方法を説明します。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] or HTTP/2 messages [RFC7540]. [RFC8473] also describes Token Binding between multiple communicating parties: User Agent, Identity Provider, and Relying Party.",
      "ja": "[RFC7230]またはHTTP / 2メッセージ[RFC7540]。 [RFC8473]は、複数の通信パーティ間のトークンバインディングについても説明します。ユーザエージェント、アイデンティティプロバイダ、および依存パーティ。"
    },
    {
      "indent": 0,
      "text": "3. Token Binding Protocol Message",
      "section_title": true,
      "ja": "3.トークンバインディングプロトコルメッセージ"
    },
    {
      "indent": 3,
      "text": "The Token Binding message is sent by the client to prove possession of one or more private keys held by the client. This message MUST be sent if the client and server successfully negotiated the use of the Token Binding protocol (e.g., via [RFC8472] or a different mechanism) and MUST NOT be sent otherwise. This message MUST be sent in the client's first application protocol message. This message MAY also be sent in subsequent application protocol messages, proving possession of additional private keys held by the same client; this information can be used to facilitate Token Binding between more than two communicating parties. For example, [RFC8473] specifies an encapsulation of the Token Binding message in HTTP application protocol messages, as well as scenarios involving more than two communicating parties.",
      "ja": "トークンバインディングメッセージは、クライアントによって送信され、クライアントが保持している1つ以上の秘密キーの所有を証明します。 クライアントとサーバーがトークンバインディングプロトコルの使用を正常にネゴシエートした場合（たとえば、[RFC8472]または別のメカニズムを使用して）、このメッセージを送信する必要があります。 このメッセージは、クライアントの最初のアプリケーションプロトコルメッセージで送信する必要があります。 このメッセージは、同じクライアントが保持している追加の秘密鍵を所有していることを証明する、後続のアプリケーションプロトコルメッセージでも送信できます。 この情報を使用して、3つ以上の通信パーティ間のトークンバインディングを促進できます。 たとえば、[RFC8473]は、HTTPアプリケーションプロトコルメッセージでのトークンバインディングメッセージのカプセル化、および3つ以上の通信パーティが関係するシナリオを指定します。"
    },
    {
      "indent": 3,
      "text": "The Token Binding message format is defined using the TLS presentation language (see Section 4 of [RFC5246]):",
      "ja": "トークンバインディングメッセージ形式は、TLSプレゼンテーション言語を使用して定義されます（[RFC5246]のセクション4を参照）。"
    },
    {
      "indent": 3,
      "text": "enum {\n    rsa2048_pkcs1.5(0), rsa2048_pss(1), ecdsap256(2), (255)\n} TokenBindingKeyParameters;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "struct {\n    opaque modulus<1..2^16-1>;\n    opaque publicexponent<1..2^8-1>;\n} RSAPublicKey;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "struct {\n    opaque point <1..2^8-1>;\n} TB_ECPoint;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "struct {\n    TokenBindingKeyParameters key_parameters;\n    uint16 key_length;  /* Length (in bytes) of the following\n                           TokenBindingID.TokenBindingPublicKey */\n    select (key_parameters) {\n        case rsa2048_pkcs1.5:\n        case rsa2048_pss:\n            RSAPublicKey rsapubkey;\n        case ecdsap256:\n            TB_ECPoint point;\n    } TokenBindingPublicKey;\n} TokenBindingID;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "enum {\n    (255)        /* No initial TB_ExtensionType registrations */\n} TB_ExtensionType;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "struct {\n    TB_ExtensionType extension_type;\n    opaque extension_data<0..2^16-1>;\n} TB_Extension;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "enum {\n    provided_token_binding(0), referred_token_binding(1), (255)\n} TokenBindingType;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "struct {\n    TokenBindingType tokenbinding_type;\n    TokenBindingID tokenbindingid;\n    opaque signature<64..2^16-1>; /* Signature over the concatenation\n                                     of tokenbinding_type,\n                                     key_parameters, and EKM */\n    TB_Extension extensions<0..2^16-1>;\n} TokenBinding;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "struct {\n    TokenBinding tokenbindings<132..2^16-1>;\n} TokenBindingMessage;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The Token Binding message consists of a series of TokenBinding structures, each containing the type of the Token Binding, the TokenBindingID, and a signature using the Token Binding key, optionally followed by TB_Extension structures.",
      "ja": "Token Bindingメッセージは、一連のTokenBinding構造で構成されます。各構造には、Token Bindingのタイプ、TokenBindingID、およびToken Bindingキーを使用した署名が含まれ、オプションでTB_Extension構造が続きます。"
    },
    {
      "indent": 0,
      "text": "3.1. TokenBinding.tokenbinding_type",
      "section_title": true,
      "ja": "3.1。 TokenBinding.tokenbinding_type"
    },
    {
      "indent": 3,
      "text": "This document defines two Token Binding types:",
      "ja": "このドキュメントでは、2つのトークンバインディングタイプを定義しています。"
    },
    {
      "indent": 3,
      "text": "o provided_token_binding - used to establish a Token Binding when connecting to a server.",
      "ja": "given_token_binding-サーバーへの接続時にトークンバインディングを確立するために使用されます。"
    },
    {
      "indent": 3,
      "text": "o referred_token_binding - used when requesting tokens that are intended to be presented to a different server.",
      "ja": "refered_token_binding-別のサーバーに提示されるトークンを要求するときに使用されます。"
    },
    {
      "indent": 3,
      "text": "[RFC8473] describes a use case for referred_token_binding where Token Bindings are established between multiple communicating parties: User Agent, Identity Provider, and Relying Party. The User Agent sends referred_token_binding to the Identity Provider in order to prove possession of the Token Binding key it uses with the Relying",
      "ja": "[RFC8473]は、複数の通信パーティ間でトークンバインディングが確立されるrefered_token_bindingのユースケースについて説明します。ユーザエージェント、アイデンティティプロバイダ、および依存パーティ。 ユーザーエージェントは、Relyingで使用するトークンバインディングキーの所有を証明するために、refered_token_bindingをIDプロバイダーに送信します"
    },
    {
      "indent": 3,
      "text": "Party. The Identity Provider can then bind the token it is supplying (for presentation to the Relying Party) to the Token Binding ID contained in referred_token_binding.",
      "ja": "パーティー。 アイデンティティプロバイダーは、（依存パーティへの提示のために）提供しているトークンをrefered_token_bindingに含まれるトークンバインディングIDにバインドできます。"
    },
    {
      "indent": 3,
      "text": "An implementation MUST ignore any unknown Token Binding types.",
      "ja": "実装では、不明なトークンバインディングタイプを無視する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.2. TokenBinding.tokenbindingid",
      "section_title": true,
      "ja": "3.2。 TokenBinding.tokenbindingid"
    },
    {
      "indent": 3,
      "text": "The ID of the Token Binding established as a result of Token Binding message processing contains the identifier of the negotiated key parameters, the length (in bytes) of the Token Binding public key, and the Token Binding public key itself. The Token Binding ID can be obtained from the TokenBinding structure by discarding the Token Binding type, signature, and extensions.",
      "ja": "Token Bindingメッセージ処理の結果として確立されたToken BindingのIDには、ネゴシエートされたキーパラメータの識別子、Token Binding公開キーの長さ（バイト単位）、およびToken Binding公開キー自体が含まれます。 トークンバインディングタイプ、署名、および拡張機能を破棄することにより、トークンバインディングIDをTokenBinding構造から取得できます。"
    },
    {
      "indent": 3,
      "text": "When rsa2048_pkcs1.5 or rsa2048_pss is used, RSAPublicKey.modulus and RSAPublicKey.publicexponent contain the modulus and exponent of a 2048-bit RSA public key represented in big-endian format, with leading zero bytes omitted.",
      "ja": "rsa2048_pkcs1.5またはrsa2048_pssを使用する場合、RSAPublicKey.modulusおよびRSAPublicKey.publicexponentには、ビッグエンディアン形式で表される2048ビットRSA公開鍵のモジュラスと指数が含まれ、先頭のゼロバイトは省略されます。"
    },
    {
      "indent": 3,
      "text": "When ecdsap256 is used, TB_ECPoint.point contains the X coordinate followed by the Y coordinate of a Curve P-256 key. The X and Y coordinates are unsigned 32-byte integers encoded in big-endian format, preserving any leading zero bytes. Future specifications may define Token Binding keys using other elliptic curves with their corresponding signature and point formats.",
      "ja": "ecdsap256が使用される場合、TB_ECPoint.pointにはX座標とそれに続くCurve P-256キーのY座標が含まれます。 XおよびY座標は、ビッグエンディアン形式でエンコードされた符号なし32バイト整数であり、先頭のゼロバイトを保持します。 将来の仕様では、他の楕円曲線とそれに対応する署名およびポイント形式を使用して、トークンバインドキーを定義する可能性があります。"
    },
    {
      "indent": 3,
      "text": "Token Binding protocol implementations SHOULD make Token Binding IDs available to the application as opaque byte sequences, so that applications do not rely on a particular Token Binding ID structure. For example, server applications will use Token Binding IDs when generating and verifying bound tokens.",
      "ja": "トークンバインディングプロトコルの実装は、アプリケーションが特定のトークンバインディングID構造に依存しないように、トークンバインディングIDを不透明なバイトシーケンスとしてアプリケーションで使用できるようにする必要があります。 たとえば、サーバーアプリケーションは、バインドされたトークンを生成および検証するときに、トークンバインディングIDを使用します。"
    },
    {
      "indent": 0,
      "text": "3.3. TokenBinding.signature",
      "section_title": true,
      "ja": "3.3。 TokenBinding.signature"
    },
    {
      "indent": 3,
      "text": "When rsa2048_pkcs1.5 is used, TokenBinding.signature contains the signature generated using the RSASSA-PKCS1-v1_5 signature scheme defined in [RFC8017] with SHA256 [FIPS.180-4.2015] as the hash function.",
      "ja": "rsa2048_pkcs1.5を使用する場合、TokenBinding.signatureには、ハッシュ関数としてSHA256 [FIPS.180-4.2015]を使用して[RFC8017]で定義されたRSASSA-PKCS1-v1_5署名スキームを使用して生成された署名が含まれます。"
    },
    {
      "indent": 3,
      "text": "When rsa2048_pss is used, TokenBinding.signature contains the signature generated using the RSA Probabilistic Signature Scheme (RSASSA-PSS) defined in [RFC8017] with SHA256 as the hash function. MGF1 with SHA256 MUST be used as the mask generation function (MGF), and the salt length MUST equal 32 bytes.",
      "ja": "rsa2048_pssが使用される場合、TokenBinding.signatureには、[RFC8017]で定義されたRSA確率的署名スキーム（RSASSA-PSS）を使用して生成された署名が含まれ、ハッシュ関数としてSHA256が使用されます。 SHA256を含むMGF1はマスク生成関数（MGF）として使用する必要があり、ソルト長は32バイトに等しくなければなりません。"
    },
    {
      "indent": 3,
      "text": "When ecdsap256 is used, TokenBinding.signature contains a pair of 32-byte integers, R followed by S, generated with the Elliptic Curve",
      "ja": "ecdsap256が使用される場合、TokenBinding.signatureには、楕円曲線で生成された32バイト整数のペア、Rの後にSが含まれます"
    },
    {
      "indent": 3,
      "text": "Digital Signature Algorithm (ECDSA) using Curve P-256 and SHA256 as defined in [FIPS.186-4.2013] and [ANSI.X9-62.2005]. R and S are encoded in big-endian format, preserving any leading zero bytes.",
      "ja": "[FIPS.186-4.2013]および[ANSI.X9-62.2005]で定義されているCurve P-256およびSHA256を使用したデジタル署名アルゴリズム（ECDSA）。 RとSはビッグエンディアン形式でエンコードされ、先頭のゼロバイトは保持されます。"
    },
    {
      "indent": 3,
      "text": "The signature is computed over the byte string representing the concatenation of:",
      "ja": "署名は、次の連結を表すバイト文字列で計算されます。"
    },
    {
      "indent": 3,
      "text": "o The TokenBindingType value contained in the TokenBinding.tokenbinding_type field,",
      "ja": "o TokenBinding.tokenbinding_typeフィールドに含まれるTokenBindingType値"
    },
    {
      "indent": 3,
      "text": "o The TokenBindingKeyParameters value contained in the TokenBindingID.key_parameters field, and",
      "ja": "o TokenBindingID.key_parametersフィールドに含まれるTokenBindingKeyParameters値"
    },
    {
      "indent": 3,
      "text": "o The EKM value obtained from the current TLS connection.",
      "ja": "o現在のTLS接続から取得したEKM値。"
    },
    {
      "indent": 3,
      "text": "Please note that TLS 1.2 and earlier versions support renegotiation, which produces a new TLS master secret for the same connection, with the associated session keys and EKM value. TokenBinding.signature MUST be a signature of the EKM value derived from the TLS master secret that produced the session keys encrypting the TLS application_data record(s) containing this TokenBinding. Such use of the current EKM for the TLS connection makes replay of bound tokens within renegotiated TLS sessions detectable but requires the application to synchronize Token Binding message generation and verification with the TLS handshake state.",
      "ja": "TLS 1.2以前のバージョンは再ネゴシエーションをサポートすることに注意してください。再ネゴシエーションは、同じ接続に対して、関連付けられたセッションキーとEKM値で新しいTLSマスターシークレットを生成します。 TokenBinding.signatureは、このTokenBindingを含むTLS application_dataレコードを暗号化するセッションキーを生成したTLSマスターシークレットから派生したEKM値の署名でなければなりません。 TLS接続に現在のEKMをこのように使用すると、再ネゴシエートされたTLSセッション内のバインドされたトークンの再生が検出可能になりますが、アプリケーションはToken Bindingメッセージの生成と検証をTLSハンドシェイク状態と同期する必要があります。"
    },
    {
      "indent": 3,
      "text": "Specifications defining the use of Token Binding with application protocols, such as Token Binding over HTTP [RFC8473], MAY prohibit the use of TLS renegotiation in combination with Token Binding, obviating the need for such synchronization. Alternatively, such specifications need to define (1) a way to determine which EKM value corresponds to a given TokenBindingMessage and (2) a mechanism that prevents a TokenBindingMessage from being split across TLS renegotiation boundaries due to TLS message fragmentation; see Section 6.2.1 of [RFC5246]. Note that application-layer messages conveying a TokenBindingMessage may cross renegotiation boundaries in ways that make processing difficult.",
      "ja": "HTTP [RFC8473]上のトークンバインディングなど、アプリケーションプロトコルでのトークンバインディングの使用を定義する仕様は、トークンバインディングと組み合わせたTLS再ネゴシエーションの使用を禁止し、このような同期の必要性をなくすことができます。 あるいは、そのような仕様では、（1）指定されたTokenBindingMessageに対応するEKM値を決定する方法、および（2）TLSBindingメッセージがTLSメッセージの断片化によりTLS再ネゴシエーションの境界を越えて分割されるのを防ぐメカニズムを定義する必要があります; [RFC5246]のセクション6.2.1を参照してください。 TokenBindingMessageを伝達するアプリケーション層メッセージは、処理を困難にする方法で再ネゴシエーションの境界を越える場合があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "The EKM is obtained using the keying material exporters for TLS as defined in [RFC5705], by supplying the following input values:",
      "ja": "EKMは、[RFC5705]で定義されているTLSのキーイングマテリアルエクスポーターを使用して、次の入力値を提供することにより取得されます。"
    },
    {
      "indent": 3,
      "text": "o Label: The ASCII string \"EXPORTER-Token-Binding\" with no terminating NUL.",
      "ja": "oラベル：ASCII文字列「EXPORTER-Token-Binding」、終端NULなし。"
    },
    {
      "indent": 3,
      "text": "o Context value: No application context supplied.",
      "ja": "oコンテキスト値：アプリケーションコンテキストが指定されていません。"
    },
    {
      "indent": 3,
      "text": "o Length: 32 bytes.",
      "ja": "o長さ：32バイト。"
    },
    {
      "indent": 0,
      "text": "3.4. TokenBinding.extensions",
      "section_title": true,
      "ja": "3.4。 TokenBinding.extensions"
    },
    {
      "indent": 3,
      "text": "A Token Binding message may optionally contain a series of TB_Extension structures, each consisting of an extension_type and extension_data. The structure and meaning of extension_data depends on the specific extension_type.",
      "ja": "トークンバインディングメッセージには、オプションで、それぞれがextension_typeとextension_dataで構成される一連のTB_Extension構造を含めることができます。 extension_dataの構造と意味は、特定のextension_typeに依存します。"
    },
    {
      "indent": 3,
      "text": "Initially, no extension types are defined (see Section 6.3 (\"Token Binding Extensions Registry\")). One of the possible uses of extensions envisioned at the time of this writing is attestation: cryptographic proof that allows the server to verify that the Token Binding key is hardware bound. The definitions of such Token Binding protocol extensions are outside the scope of this specification.",
      "ja": "最初は、拡張タイプは定義されていません（セクション6.3（「トークンバインディング拡張レジストリ」を参照））。 この記事の執筆時点で想定されている拡張機能の考えられる用途の1つは、認証：トークンバインディングキーがハードウェアにバインドされていることをサーバーが検証できる暗号化証明です。 このようなトークンバインディングプロトコル拡張の定義は、この仕様の範囲外です。"
    },
    {
      "indent": 0,
      "text": "4. Establishing a Token Binding",
      "section_title": true,
      "ja": "4.トークンバインディングの確立"
    },
    {
      "indent": 0,
      "text": "4.1. Client Processing Rules",
      "section_title": true,
      "ja": "4.1。 クライアント処理ルール"
    },
    {
      "indent": 3,
      "text": "The client MUST include at least one TokenBinding structure in the Token Binding message. When a provided_token_binding is included, the key parameters used in a provided_token_binding MUST match those negotiated with the server (e.g., via [RFC8472] or a different mechanism).",
      "ja": "クライアントは、Token Bindingメッセージに少なくとも1つのTokenBinding構造を含める必要があります。 given_token_bindingが含まれる場合、provided_token_bindingで使用される主要なパラメーターは、サーバーとネゴシエートされたパラメーターと一致しなければなりません（たとえば、[RFC8472]または別のメカニズムを介して）。"
    },
    {
      "indent": 3,
      "text": "The client MUST generate and store Token Binding keys in a secure manner that prevents key export. In order to prevent cooperating servers from linking user identities, the scope of the Token Binding keys MUST NOT be broader than the scope of the tokens, as defined by the application protocol.",
      "ja": "クライアントは、キーのエクスポートを防ぐ安全な方法でトークンバインディングキーを生成および保存する必要があります。 連携するサーバーがユーザーIDをリンクするのを防ぐために、トークンバインディングキーのスコープは、アプリケーションプロトコルで定義されているトークンのスコープよりも広くてはなりません。"
    },
    {
      "indent": 3,
      "text": "When the client needs to send a referred_token_binding to the Identity Provider, the client SHALL construct the referred TokenBinding structure in the following manner:",
      "ja": "クライアントがrefered_token_bindingをアイデンティティプロバイダーに送信する必要がある場合、クライアントは、次の方法で、参照されたTokenBinding構造を構築する必要があります。"
    },
    {
      "indent": 3,
      "text": "o Set TokenBinding.tokenbinding_type to referred_token_binding.",
      "ja": "o TokenBinding.tokenbinding_typeをrefered_token_bindingに設定します。"
    },
    {
      "indent": 3,
      "text": "o Set TokenBinding.tokenbindingid to the Token Binding ID used with the Relying Party.",
      "ja": "o TokenBinding.tokenbindingidを、証明書利用者で使用されるトークンバインディングIDに設定します。"
    },
    {
      "indent": 3,
      "text": "o Generate TokenBinding.signature, using the EKM value of the TLS connection to the Identity Provider, the Token Binding key established with the Relying Party, and the signature algorithm indicated by the associated key parameters. Note that these key parameters may differ from the key parameters negotiated with the Identity Provider.",
      "ja": "oアイデンティティプロバイダーへのTLS接続のEKM値、証明書利用者と確立されたトークンバインディングキー、および関連するキーパラメーターによって示される署名アルゴリズムを使用して、TokenBinding.signatureを生成します。 これらのキーパラメータは、アイデンティティプロバイダとネゴシエートされるキーパラメータと異なる場合があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "Conveying referred Token Bindings in this fashion allows the Identity Provider to verify that the client controls the Token Binding key used with the Relying Party.",
      "ja": "参照されたトークンバインディングをこの方法で伝えることにより、IDプロバイダーは、クライアントが依存パーティで使用されるトークンバインディングキーを制御していることを確認できます。"
    },
    {
      "indent": 0,
      "text": "4.2. Server Processing Rules",
      "section_title": true,
      "ja": "4.2。 サーバー処理ルール"
    },
    {
      "indent": 3,
      "text": "The triple handshake vulnerability in TLS 1.2 and older TLS versions affects the security of the Token Binding protocol, as described in Section 7 (\"Security Considerations\"). Therefore, the server MUST NOT negotiate the use of the Token Binding protocol with these TLS versions, unless the server also negotiates the extended master secret TLS extension [RFC7627] and the renegotiation indication TLS extension [RFC5746].",
      "ja": "TLS 1.2以前のTLSバージョンのトリプルハンドシェイクの脆弱性は、セクション7（「セキュリティに関する考慮事項」）で説明されているように、トークンバインディングプロトコルのセキュリティに影響します。 したがって、サーバーは、拡張マスターシークレットTLS拡張[RFC7627]および再ネゴシエーション表示TLS拡張[RFC5746]もネゴシエートしない限り、これらのTLSバージョンとトークンバインディングプロトコルの使用をネゴシエートしてはなりません。"
    },
    {
      "indent": 3,
      "text": "If the use of the Token Binding protocol was not negotiated but the client sends a Token Binding message, the server MUST reject any contained bindings.",
      "ja": "トークンバインディングプロトコルの使用がネゴシエートされなかったが、クライアントがトークンバインディングメッセージを送信した場合、サーバーは含まれるバインディングを拒否しなければなりません。"
    },
    {
      "indent": 3,
      "text": "If the Token Binding type is \"provided_token_binding\", the server MUST verify that the signature algorithm (including an elliptic curve in the case of ECDSA) and key length in the Token Binding message match those negotiated with this client (e.g., via [RFC8472] or a different mechanism). In the case of a mismatch, the server MUST reject the binding. Token Bindings of type \"referred_token_binding\" may use different key parameters than those negotiated with this client.",
      "ja": "トークンバインディングタイプが「provided_token_binding」の場合、サーバーは、署名アルゴリズム（ECDSAの場合は楕円曲線を含む）およびトークンバインディングメッセージのキー長が、このクライアントとネゴシエートされたものと一致することを確認する必要があります（たとえば、[RFC8472] または別のメカニズム）。 不一致の場合、サーバーはバインディングを拒否しなければなりません。 タイプ「referred_token_binding」のトークンバインディングは、このクライアントとネゴシエートされたものとは異なるキーパラメータを使用する場合があります。"
    },
    {
      "indent": 3,
      "text": "If the Token Binding message does not contain at least one TokenBinding structure or if a signature contained in any TokenBinding structure is invalid, the server MUST reject the binding.",
      "ja": "Token Bindingメッセージに少なくとも1つのTokenBinding構造が含まれていない場合、またはTokenBinding構造に含まれる署名が無効な場合、サーバーはバインディングを拒否する必要があります。"
    },
    {
      "indent": 3,
      "text": "Servers MUST ignore any unknown extensions. Initially, no extension types are defined (see Section 6.3 (\"Token Binding Extensions Registry\")).",
      "ja": "サーバーは未知の拡張子を無視しなければなりません。 最初は、拡張タイプは定義されていません（セクション6.3（「トークンバインディング拡張レジストリ」を参照））。"
    },
    {
      "indent": 3,
      "text": "If all checks defined above have passed successfully, the Token Binding between this client and server is established. The Token Binding ID(s) conveyed in the Token Binding message can be provided to the server-side application. The application may then use the Token Binding IDs for bound security token creation and validation; see Section 5.",
      "ja": "上記で定義されたすべてのチェックが成功すると、このクライアントとサーバー間のトークンバインディングが確立されます。 トークンバインディングメッセージで伝達されるトークンバインディングIDは、サーバー側アプリケーションに提供できます。 アプリケーションは、バインドされたセキュリティトークンの作成と検証にトークンバインディングIDを使用できます。 セクション5を参照してください。"
    },
    {
      "indent": 3,
      "text": "If a Token Binding is rejected, any associated bound tokens presented on the current TLS connection MUST also be rejected by the server. The effect of this is application specific, e.g., failing requests, a requirement for the client to re-authenticate and present a different token, or connection termination.",
      "ja": "Token Bindingが拒否された場合、現在のTLS接続で提示された関連するバインドされたトークンもサーバーによって拒否されなければなりません。 これの効果は、アプリケーション固有、例えば、リクエストの失敗、クライアントが別のトークンを再認証して提示するための要件、または接続の終了です。"
    },
    {
      "indent": 0,
      "text": "5. Bound Security Token Creation and Validation",
      "section_title": true,
      "ja": "5.バインドされたセキュリティトークンの作成と検証"
    },
    {
      "indent": 3,
      "text": "Security tokens can be bound to the TLS layer in a variety of ways, e.g., by embedding the Token Binding ID or its cryptographic hash in the token or by maintaining a database mapping tokens to Token Binding IDs. The specific method of generating bound security tokens is defined by the application and is beyond the scope of this document. Note that applicable security considerations are outlined in Section 7.",
      "ja": "セキュリティトークンは、さまざまな方法でTLSレイヤーにバインドできます。たとえば、トークンバインディングIDまたはその暗号化ハッシュをトークンに埋め込むか、トークンをトークンバインディングIDにマッピングするデータベースを維持します。 バインドされたセキュリティトークンを生成する特定の方法は、アプリケーションによって定義され、このドキュメントの範囲外です。 該当するセキュリティの考慮事項はセクション7で概説されていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "Either or both clients and servers MAY create bound security tokens. For example, HTTPS servers employing Token Binding for securing their HTTP cookies will bind these cookies. In the case of a server-initiated challenge-response protocol employing Token Binding and TLS, the client can, for example, incorporate the Token Binding ID within the signed object it returns, thus binding the object.",
      "ja": "クライアントとサーバーのいずれかまたは両方が、バインドされたセキュリティトークンを作成する場合があります。 たとえば、HTTP Cookieを保護するためにトークンバインドを採用しているHTTPSサーバーは、これらのCookieをバインドします。 トークンバインディングとTLSを使用するサーバー起動のチャレンジ/レスポンスプロトコルの場合、クライアントは、たとえば、返される署名付きオブジェクト内にトークンバインディングIDを組み込み、オブジェクトをバインドできます。"
    },
    {
      "indent": 3,
      "text": "Upon receipt of a security token, the server attempts to retrieve Token Binding ID information from the token and from the TLS connection with the client. Application-provided policy determines whether to honor non-bound (bearer) tokens. If the token is bound and a Token Binding has not been established for the client connection, the server MUST reject the token. If the Token Binding ID for the token does not match the Token Binding ID established for the client connection, the server MUST reject the token.",
      "ja": "セキュリティトークンを受信すると、サーバーはトークンおよびクライアントとのTLS接続からトークンバインディングID情報を取得しようとします。 アプリケーションが提供するポリシーは、非バインド（ベアラー）トークンを尊重するかどうかを決定します。 トークンがバインドされており、クライアント接続に対してトークンバインディングが確立されていない場合、サーバーはトークンを拒否する必要があります。 トークンのトークンバインディングIDがクライアント接続用に確立されたトークンバインディングIDと一致しない場合、サーバーはトークンを拒否する必要があります。"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This section establishes a new IANA registry titled \"Token Binding Protocol\" with subregistries \"Token Binding Key Parameters\", \"Token Binding Types\", and \"Token Binding Extensions\". It also registers a new TLS exporter label in the \"TLS Exporter Labels\" registry.",
      "ja": "このセクションでは、「Token Binding Protocol」というタイトルの新しいIANAレジストリを、サブレジストリ「Token Binding Key Parameters」、「Token Binding Types」、および「Token Binding Extensions」で確立します。 また、新しいTLSエクスポーターラベルを「TLSエクスポーターラベル」レジストリに登録します。"
    },
    {
      "indent": 0,
      "text": "6.1. Token Binding Key Parameters Registry",
      "section_title": true,
      "ja": "6.1。 トークンバインディングキーパラメータレジストリ"
    },
    {
      "indent": 3,
      "text": "This document establishes a subregistry for identifiers of Token Binding key parameters titled \"Token Binding Key Parameters\" under the \"Token Binding Protocol\" registry.",
      "ja": "このドキュメントは、「Token Binding Protocol」レジストリの下に「Token Binding Key Parameters」というタイトルのトークンバインディングキーパラメータの識別子のサブレジストリを確立します。"
    },
    {
      "indent": 3,
      "text": "Entries in this registry require the following fields:",
      "ja": "このレジストリのエントリには、次のフィールドが必要です。"
    },
    {
      "indent": 3,
      "text": "o Value: The octet value that identifies a set of Token Binding key parameters (0-255).",
      "ja": "o値：トークンバインディングキーパラメータのセットを識別するオクテット値（0〜255）。"
    },
    {
      "indent": 3,
      "text": "o Description: The description of the Token Binding key parameters.",
      "ja": "o説明：トークンバインドキーパラメーターの説明。"
    },
    {
      "indent": 3,
      "text": "o Reference: A reference to a specification that defines the Token Binding key parameters.",
      "ja": "o参照：トークンバインドキーパラメーターを定義する仕様への参照。"
    },
    {
      "indent": 3,
      "text": "This registry operates under the \"Specification Required\" policy as defined in [RFC8126]. The designated expert will require the inclusion of a reference to a permanent and readily available specification that enables the creation of interoperable implementations using the identified set of Token Binding key parameters.",
      "ja": "このレジストリは、[RFC8126]で定義されている「Specification Required」ポリシーの下で動作します。 指定された専門家は、トークンバインディングキーパラメータの識別されたセットを使用して相互運用可能な実装を作成できる、永続的ですぐに利用可能な仕様への参照を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "An initial set of registrations for this registry follows:",
      "ja": "このレジストリの登録の初期セットは次のとおりです。"
    },
    {
      "indent": 6,
      "text": "Value: 0 Description: rsa2048_pkcs1.5 Specification: This document",
      "ja": "値：0説明：rsa2048_pkcs1.5仕様：このドキュメント"
    },
    {
      "indent": 6,
      "text": "Value: 1 Description: rsa2048_pss Specification: This document",
      "ja": "値：1説明：rsa2048_pss仕様：このドキュメント"
    },
    {
      "indent": 6,
      "text": "Value: 2 Description: ecdsap256 Specification: This document",
      "ja": "値：2説明：ecdsap256仕様：このドキュメント"
    },
    {
      "indent": 0,
      "text": "6.2. Token Binding Types Registry",
      "section_title": true,
      "ja": "6.2。 トークンバインディングタイプレジストリ"
    },
    {
      "indent": 3,
      "text": "This document establishes a subregistry for Token Binding type identifiers titled \"Token Binding Types\" under the \"Token Binding Protocol\" registry.",
      "ja": "このドキュメントは、「Token Binding Protocol」レジストリの下に「Token Binding Types」というタイトルのトークンバインディングタイプ識別子のサブレジストリを確立します。"
    },
    {
      "indent": 3,
      "text": "Entries in this registry require the following fields:",
      "ja": "このレジストリのエントリには、次のフィールドが必要です。"
    },
    {
      "indent": 3,
      "text": "o Value: The octet value that identifies the Token Binding type (0-255).",
      "ja": "o値：トークンバインディングタイプ（0〜255）を識別するオクテット値。"
    },
    {
      "indent": 3,
      "text": "o Description: The description of the Token Binding type.",
      "ja": "o説明：トークンバインディングタイプの説明。"
    },
    {
      "indent": 3,
      "text": "o Reference: A reference to a specification that defines the Token Binding type.",
      "ja": "o参照：トークンバインディングタイプを定義する仕様への参照。"
    },
    {
      "indent": 3,
      "text": "This registry operates under the \"Specification Required\" policy as defined in [RFC8126]. The designated expert will require the inclusion of a reference to a permanent and readily available specification that enables the creation of interoperable implementations using the identified Token Binding type.",
      "ja": "このレジストリは、[RFC8126]で定義されている「Specification Required」ポリシーの下で動作します。 指定された専門家は、識別されたトークンバインディングタイプを使用して相互運用可能な実装の作成を可能にする、永続的ですぐに利用可能な仕様への参照を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "An initial set of registrations for this registry follows:",
      "ja": "このレジストリの登録の初期セットは次のとおりです。"
    },
    {
      "indent": 6,
      "text": "Value: 0 Description: provided_token_binding Specification: This document",
      "ja": "値：0説明：given_token_binding仕様：このドキュメント"
    },
    {
      "indent": 6,
      "text": "Value: 1 Description: referred_token_binding Specification: This document",
      "ja": "値：1説明：refered_token_binding仕様：このドキュメント"
    },
    {
      "indent": 0,
      "text": "6.3. Token Binding Extensions Registry",
      "section_title": true,
      "ja": "6.3。 トークンバインディング拡張レジストリ"
    },
    {
      "indent": 3,
      "text": "This document establishes a subregistry for Token Binding extensions titled \"Token Binding Extensions\" under the \"Token Binding Protocol\" registry.",
      "ja": "このドキュメントは、「Token Binding Protocol」レジストリの下に「Token Binding Extensions」というタイトルのトークンバインディング拡張のサブレジストリを確立します。"
    },
    {
      "indent": 3,
      "text": "Entries in this registry require the following fields:",
      "ja": "このレジストリのエントリには、次のフィールドが必要です。"
    },
    {
      "indent": 3,
      "text": "o Value: The octet value that identifies the Token Binding extension (0-255).",
      "ja": "o値：トークンバインディング拡張を識別するオクテット値（0-255）。"
    },
    {
      "indent": 3,
      "text": "o Description: The description of the Token Binding extension.",
      "ja": "o説明：トークンバインディング拡張機能の説明。"
    },
    {
      "indent": 3,
      "text": "o Reference: A reference to a specification that defines the Token Binding extension.",
      "ja": "o参照：トークンバインディング拡張機能を定義する仕様への参照。"
    },
    {
      "indent": 3,
      "text": "This registry operates under the \"Specification Required\" policy as defined in [RFC8126]. The designated expert will require the inclusion of a reference to a permanent and readily available specification that enables the creation of interoperable implementations using the identified Token Binding extension. This document creates no initial registrations in the \"Token Binding Extensions\" registry.",
      "ja": "このレジストリは、[RFC8126]で定義されている「Specification Required」ポリシーの下で動作します。 指定された専門家は、識別されたトークンバインディング拡張機能を使用して相互運用可能な実装の作成を可能にする、永続的で容易に利用可能な仕様への参照を含める必要があります。 このドキュメントは、「Token Binding Extensions」レジストリに初期登録を作成しません。"
    },
    {
      "indent": 0,
      "text": "6.4. Registration of Token Binding TLS Exporter Label",
      "section_title": true,
      "ja": "6.4。 トークンバインディングTLSエクスポーターラベルの登録"
    },
    {
      "indent": 3,
      "text": "This document adds the following registration in the \"TLS Exporter Labels\" registry:",
      "ja": "このドキュメントは、「TLSエクスポーターラベル」レジストリに次の登録を追加します。"
    },
    {
      "indent": 6,
      "text": "Value: EXPORTER-Token-Binding DTLS-OK: Y Recommended: Y Reference: This document",
      "ja": "値：EXPORTER-Token-Binding DTLS-OK：Y推奨：Y参照：このドキュメント"
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7.セキュリティに関する考慮事項"
    },
    {
      "indent": 0,
      "text": "7.1. Security Token Replay",
      "section_title": true,
      "ja": "7.1。 セキュリティトークンリプレイ"
    },
    {
      "indent": 3,
      "text": "The goal of the Token Binding protocol is to prevent attackers from exporting and replaying security tokens and from thereby impersonating legitimate users and gaining access to protected resources. Bound tokens can be replayed by malware present in User Agents; this may be undetectable to a server. However, in order to export bound tokens to other machines and successfully replay them, attackers also need to export corresponding Token Binding private keys. Token Binding private keys are therefore high-value assets and SHOULD be strongly protected, ideally by generating them in a hardware security module that prevents key export.",
      "ja": "トークンバインディングプロトコルの目標は、攻撃者がセキュリティトークンをエクスポートおよび再生し、それによって正当なユーザーになりすまして、保護されたリソースにアクセスすることを防ぐことです。 バインドされたトークンは、ユーザーエージェントに存在するマルウェアによって再生できます。 これはサーバーには検出できない場合があります。 ただし、バインドされたトークンを他のマシンにエクスポートして正常に再生するには、攻撃者は対応するトークンバインド秘密キーもエクスポートする必要があります。 したがって、トークンバインド秘密キーは価値の高い資産であり、理想的にはキーのエクスポートを防ぐハードウェアセキュリティモジュールで生成することにより、強力に保護する必要があります。"
    },
    {
      "indent": 3,
      "text": "The manner in which a token is bound to the TLS layer is defined by the application and is beyond the scope of this document. However, the resulting bound token needs to be integrity-protected, so that an attacker cannot remove the binding or substitute a Token Binding ID of their choice without detection.",
      "ja": "トークンがTLSレイヤーにバインドされる方法は、アプリケーションによって定義され、このドキュメントの範囲外です。 ただし、結果のバインドされたトークンは完全性で保護される必要があるため、攻撃者はバインディングを削除したり、検出せずに選択したトークンバインディングIDを置き換えたりすることはできません。"
    },
    {
      "indent": 3,
      "text": "The Token Binding protocol does not prevent cooperating clients from sharing a bound token. A client could intentionally export a bound token with the corresponding Token Binding private key or perform signatures using this key on behalf of another client.",
      "ja": "トークンバインディングプロトコルは、連携するクライアントがバインドされたトークンを共有することを妨げません。 クライアントは、バインドされたトークンを対応するトークンバインド秘密キーで意図的にエクスポートするか、別のクライアントに代わってこのキーを使用して署名を実行できます。"
    },
    {
      "indent": 0,
      "text": "7.2. Downgrade Attacks",
      "section_title": true,
      "ja": "7.2。 ダウングレード攻撃"
    },
    {
      "indent": 3,
      "text": "The Token Binding protocol MUST be negotiated using a mechanism that prevents downgrade attacks. For example, [RFC8472] specifies a TLS extension for Token Binding negotiation. TLS detects handshake message modification by active attackers; therefore, it is not possible for an attacker to remove or modify the \"token_binding\" extension without breaking the TLS handshake. The signature algorithm and key length used in the TokenBinding of type \"provided_token_binding\" MUST match the negotiated parameters.",
      "ja": "トークンバインディングプロトコルは、ダウングレード攻撃を防ぐメカニズムを使用してネゴシエートする必要があります。 たとえば、[RFC8472]は、Token BindingネゴシエーションのTLS拡張を指定します。 TLSは、アクティブな攻撃者によるハンドシェイクメッセージの変更を検出します。 したがって、攻撃者がTLSハンドシェイクを中断せずに「token_binding」拡張機能を削除または変更することはできません。 タイプ \"provided_token_binding\"のTokenBindingで使用される署名アルゴリズムとキーの長さは、ネゴシエートされたパラメーターと一致する必要があります。"
    },
    {
      "indent": 0,
      "text": "7.3. Token Binding Key-Sharing between Applications",
      "section_title": true,
      "ja": "7.3。 アプリケーション間でのトークンバインディングキー共有"
    },
    {
      "indent": 3,
      "text": "Existing systems provide a variety of platform-specific mechanisms for certain applications to share tokens, e.g., to enable \"single sign-on\" scenarios. For these scenarios to keep working with bound tokens, the applications that are allowed to share tokens will need to also share Token Binding keys. Care must be taken to restrict the sharing of Token Binding keys to the same group(s) of applications that shares the same tokens.",
      "ja": "既存のシステムは、特定のアプリケーションがトークンを共有するためのプラットフォーム固有のさまざまなメカニズムを提供します。たとえば、「シングルサインオン」シナリオを可能にします。 これらのシナリオでバインドされたトークンを使用し続けるには、トークンを共有できるアプリケーションは、トークンバインディングキーも共有する必要があります。 トークンバインディングキーの共有を、同じトークンを共有するアプリケーションの同じグループに制限するように注意する必要があります。"
    },
    {
      "indent": 0,
      "text": "7.4. Triple Handshake Vulnerability in TLS 1.2 and Older TLS Versions",
      "section_title": true,
      "ja": "7.4。 TLS 1.2およびそれ以前のTLSバージョンでのトリプルハンドシェイクの脆弱性"
    },
    {
      "indent": 3,
      "text": "The Token Binding protocol relies on the TLS exporters [RFC5705] to associate a TLS connection with a Token Binding. The triple handshake attack [TRIPLE-HS] is a known vulnerability in TLS 1.2 and older TLS versions, allowing the attacker to synchronize keying material between TLS connections. The attacker can then successfully replay bound tokens. For this reason, the Token Binding protocol MUST NOT be negotiated with these TLS versions, unless the extended master secret TLS extension [RFC7627] and the renegotiation indication TLS extension [RFC5746] have also been negotiated.",
      "ja": "トークンバインディングプロトコルは、TLSエクスポーター[RFC5705]に依存して、TLS接続をトークンバインディングに関連付けます。 トリプルハンドシェイク攻撃[TRIPLE-HS]は、TLS 1.2以前のTLSバージョンの既知の脆弱性であり、攻撃者がTLS接続間でキー情報を同期できるようにします。 その後、攻撃者はバインドされたトークンを正常に再生できます。 このため、拡張マスターシークレットTLS拡張[RFC7627]および再ネゴシエーション表示TLS拡張[RFC5746]もネゴシエートされていない限り、これらのTLSバージョンとトークンバインディングプロトコルをネゴシエートしてはなりません。"
    },
    {
      "indent": 0,
      "text": "8. Privacy Considerations",
      "section_title": true,
      "ja": "8.プライバシーに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The Token Binding protocol uses persistent, long-lived Token Binding IDs. To protect privacy, Token Binding IDs are never transmitted in clear text and can be reset by the user at any time, e.g., when clearing browser cookies. Some applications offer a special privacy mode where they don't store or use tokens supplied by the server, e.g., \"in private\" browsing. When operating in this special privacy mode, applications SHOULD use newly generated Token Binding keys and delete them when exiting this mode; otherwise, they SHOULD NOT negotiate Token Binding at all.",
      "ja": "トークンバインディングプロトコルは、永続的で長期間有効なトークンバインディングIDを使用します。 プライバシーを保護するため、トークンバインディングIDはクリアテキストで送信されることはなく、ブラウザCookieをクリアするときなど、ユーザーがいつでもリセットできます。 一部のアプリケーションは、サーバーによって提供されるトークンを保存または使用しない特別なプライバシーモードを提供します（「プライベート」ブラウジングなど）。 この特別なプライバシーモードで動作する場合、アプリケーションは新しく生成されたトークンバインディングキーを使用し、このモードを終了するときに削除する必要があります。 そうでない場合、トークンバインディングをネゴシエートしないでください。"
    },
    {
      "indent": 3,
      "text": "In order to prevent cooperating servers from linking user identities, the scope of the Token Binding keys MUST NOT be broader than the scope of the tokens, as defined by the application protocol.",
      "ja": "連携するサーバーがユーザーIDをリンクするのを防ぐために、トークンバインディングキーのスコープは、アプリケーションプロトコルで定義されているトークンのスコープよりも広くてはなりません。"
    },
    {
      "indent": 3,
      "text": "A server can use tokens and Token Binding IDs to track clients. Client applications that automatically limit the lifetime or scope of tokens to maintain user privacy SHOULD apply the same validity time and scope limits to Token Binding keys.",
      "ja": "サーバーは、トークンとトークンバインディングIDを使用してクライアントを追跡できます。 ユーザーのプライバシーを維持するために、トークンの有効期間またはスコープを自動的に制限するクライアントアプリケーションは、トークンバインディングキーに同じ有効期限とスコープ制限を適用する必要があります。"
    },
    {
      "indent": 0,
      "text": "9. References",
      "section_title": true,
      "ja": "9.参照"
    },
    {
      "indent": 0,
      "text": "9.1. Normative References",
      "section_title": true,
      "ja": "9.1。 規範的参考文献"
    },
    {
      "indent": 3,
      "text": "[ANSI.X9-62.2005] American National Standards Institute, \"Public Key Cryptography for the Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA)\", ANSI X9.62, November 2005.",
      "ja": "[ANSI.X9-62.2005]米国規格協会、「金融サービス業界向け公開鍵暗号：楕円曲線デジタル署名アルゴリズム（ECDSA）」、ANSI X9.62、2005年11月。"
    },
    {
      "indent": 3,
      "text": "[FIPS.180-4.2015] National Institute of Standards and Technology, \"Secure Hash Standard (SHS)\", FIPS 180-4, DOI 10.6028/NIST.FIPS.180-4, August 2015, <https://nvlpubs.nist.gov/nistpubs/FIPS/ NIST.FIPS.180-4.pdf>.",
      "ja": "[FIPS.180-4.2015]国立標準技術研究所、「Secure Hash Standard（SHS）」、FIPS 180-4、DOI 10.6028 / NIST.FIPS.180-4、2015年8月、<https：//nvlpubs.nist .gov / nistpubs / FIPS / NIST.FIPS.180-4.pdf>。"
    },
    {
      "indent": 3,
      "text": "[FIPS.186-4.2013] National Institute of Standards and Technology, \"Digital Signature Standard (DSS)\", FIPS 186-4, DOI 10.6028/NIST.FIPS.186-4, July 2013, <https://nvlpubs.nist.gov/nistpubs/fips/ nist.fips.186-4.pdf>.",
      "ja": "[FIPS.186-4.2013]国立標準技術研究所、「デジタル署名標準（DSS）」、FIPS 186-4、DOI 10.6028 / NIST.FIPS.186-4、2013年7月、<https：//nvlpubs.nist .gov / nistpubs / fips / nist.fips.186-4.pdf>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S.、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, DOI 10.17487/RFC5246, August 2008, <https://www.rfc-editor.org/info/rfc5246>.",
      "ja": "[RFC5246] Dierks、T。およびE. Rescorla、「トランスポート層セキュリティ（TLS）プロトコルバージョン1.2」、RFC 5246、DOI 10.17487 / RFC5246、2008年8月、<https://www.rfc-editor.org/info / rfc5246>。"
    },
    {
      "indent": 3,
      "text": "[RFC5705] Rescorla, E., \"Keying Material Exporters for Transport Layer Security (TLS)\", RFC 5705, DOI 10.17487/RFC5705, March 2010, <https://www.rfc-editor.org/info/rfc5705>.",
      "ja": "[RFC5705] Rescorla、E。、「Transport Layer Security（TLS）のキーイングマテリアルエクスポーター」、RFC 5705、DOI 10.17487 / RFC5705、2010年3月、<https://www.rfc-editor.org/info/rfc5705>。"
    },
    {
      "indent": 3,
      "text": "[RFC5746] Rescorla, E., Ray, M., Dispensa, S., and N. Oskov, \"Transport Layer Security (TLS) Renegotiation Indication Extension\", RFC 5746, DOI 10.17487/RFC5746, February 2010, <https://www.rfc-editor.org/info/rfc5746>.",
      "ja": "[RFC5746] Rescorla、E.、Ray、M.、Dispensa、S。、およびN. Oskov、「Transport Layer Security（TLS）Renegotiation Indication Extension」、RFC 5746、DOI 10.17487 / RFC5746、2010年2月、<https：/ /www.rfc-editor.org/info/rfc5746>。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <https://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230]フィールディング、R。、エド。 およびJ. Reschke、Ed。、「ハイパーテキスト転送プロトコル（HTTP / 1.1）：メッセージの構文とルーティング」、RFC 7230、DOI 10.17487 / RFC7230、2014年6月、<https://www.rfc-editor.org/info/ rfc7230>。"
    },
    {
      "indent": 3,
      "text": "[RFC7540] Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext Transfer Protocol Version 2 (HTTP/2)\", RFC 7540, DOI 10.17487/RFC7540, May 2015, <https://www.rfc-editor.org/info/rfc7540>.",
      "ja": "[RFC7540] Belshe、M.、Peon、R.、およびM. Thomson、Ed。、「ハイパーテキスト転送プロトコルバージョン2（HTTP / 2）」、RFC 7540、DOI 10.17487 / RFC7540、2015年5月、<https：// www.rfc-editor.org/info/rfc7540>。"
    },
    {
      "indent": 3,
      "text": "[RFC7627] Bhargavan, K., Ed., Delignat-Lavaud, A., Pironti, A., Langley, A., and M. Ray, \"Transport Layer Security (TLS) Session Hash and Extended Master Secret Extension\", RFC 7627, DOI 10.17487/RFC7627, September 2015, <https://www.rfc-editor.org/info/rfc7627>.",
      "ja": "[RFC7627] Bhargavan、K.、Ed。、Delignat-Lavaud、A.、Pironti、A.、Langley、A。、およびM. Ray、「Transport Layer Security（TLS）Session Hash and Extended Master Secret Extension」、RFC 7627、DOI 10.17487 / RFC7627、2015年9月、<https://www.rfc-editor.org/info/rfc7627>。"
    },
    {
      "indent": 3,
      "text": "[RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>.",
      "ja": "[RFC8126] Cotton、M.、Leiba、B。、およびT. Narten、「RFCでIANA考慮事項セクションを記述するためのガイドライン」、BCP 26、RFC 8126、DOI 10.17487 / RFC8126、2017年6月、<https：// www .rfc-editor.org / info / rfc8126>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[RFC8472] Popov, A., Ed., Nystroem, M., and D. Balfanz, \"Transport Layer Security (TLS) Extension for Token Binding Protocol Negotiation\", RFC 8472, DOI 10.17487/RFC8472, October 2018, <https://www.rfc-editor.org/info/rfc8472>.",
      "ja": "[RFC8472] Popov、A.、Ed。、Nystroem、M。、およびD. Balfanz、「トークンバインディングプロトコルネゴシエーション用のトランスポート層セキュリティ（TLS）拡張」、RFC 8472、DOI 10.17487 / RFC8472、2018年10月、<https： //www.rfc-editor.org/info/rfc8472>。"
    },
    {
      "indent": 3,
      "text": "[RFC8473] Popov, A., Nystroem, M., Balfanz, D., Ed., Harper, N., and J. Hodges, \"Token Binding over HTTP\", RFC 8473, DOI 10.17487/RFC8473, October 2018, <https://www.rfc-editor.org/info/rfc8473>.",
      "ja": "[RFC8473] Popov、A.、Nystroem、M.、Balfanz、D.、Ed。、Harper、N。、およびJ. Hodges、「Token Binding over HTTP」、RFC 8473、DOI 10.17487 / RFC8473、2018年10月、< https://www.rfc-editor.org/info/rfc8473>。"
    },
    {
      "indent": 0,
      "text": "9.2. Informative References",
      "section_title": true,
      "ja": "9.2。 参考資料"
    },
    {
      "indent": 3,
      "text": "[RFC6749] Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\", RFC 6749, DOI 10.17487/RFC6749, October 2012, <https://www.rfc-editor.org/info/rfc6749>.",
      "ja": "[RFC6749] Hardt、D.、Ed。、「OAuth 2.0認可フレームワーク」、RFC 6749、DOI 10.17487 / RFC6749、2012年10月、<https://www.rfc-editor.org/info/rfc6749>。"
    },
    {
      "indent": 3,
      "text": "[RFC8017] Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch, \"PKCS #1: RSA Cryptography Specifications Version 2.2\", RFC 8017, DOI 10.17487/RFC8017, November 2016, <https://www.rfc-editor.org/info/rfc8017>.",
      "ja": "[RFC8017] Moriarty、K.、Ed。、Kaliski、B.、Jonsson、J.、and A. Rusch、 \"PKCS＃1：RSA Cryptography Specifications Version 2.2\"、RFC 8017、DOI 10.17487 / RFC8017、November 2016、< https://www.rfc-editor.org/info/rfc8017>。"
    },
    {
      "indent": 3,
      "text": "[TOKENBIND-TLS13] Harper, N., \"Token Binding for Transport Layer Security (TLS) Version 1.3 Connections\", Work in Progress, draft-ietf-tokbind-tls13-01, May 2018.",
      "ja": "[TOKENBIND-TLS13] Harper、N。、「トランスポート層セキュリティ（TLS）バージョン1.3接続のトークンバインディング」、Work in Progress、draft-ietf-tokbind-tls13-01、2018年5月。"
    },
    {
      "indent": 3,
      "text": "[TRIPLE-HS] Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Pironti, A., and P. Strub, \"Triple Handshakes and Cookie Cutters: Breaking and Fixing Authentication over TLS\", IEEE Symposium on Security and Privacy, DOI 10.1109/SP.2014.14, May 2014.",
      "ja": "[TRIPLE-HS] Bhargavan、K.、Delignat-Lavaud、A.、Fournet、C.、Pironti、A。、およびP. Strub、「Triple Handshakes and Cookie Cutters：Breaking and Fixing Authentication over TLS」、IEEE Symposium on セキュリティとプライバシー、DOI 10.1109 / SP.2014.14、2014年5月。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document incorporates comments and suggestions offered by Eric Rescorla, Gabriel Montenegro, Martin Thomson, Vinod Anupam, Anthony Nadalin, Michael B. Jones, Bill Cox, Nick Harper, Brian Campbell, Benjamin Kaduk, Alexey Melnikov, and others.",
      "ja": "このドキュメントには、Eric Rescorla、Gabriel Montenegro、Martin Thomson、Vinod Anupam、Anthony Nadalin、Michael B.Jones、Bill Cox、Nick Harper、Brian Campbell、Benjamin Kaduk、Alexey Melnikovなどが提供するコメントと提案が組み込まれています。"
    },
    {
      "indent": 3,
      "text": "This document was produced under the chairmanship of John Bradley and Leif Johansson. The area directors included Eric Rescorla, Kathleen Moriarty, and Stephen Farrell.",
      "ja": "この文書は、ジョン・ブラッドリーとレイフ・ヨハンソンの議長の下で作成されました。 エリアディレクターには、エリックレスコーラ、キャスリーンモリアーティ、スティーブンファレルが含まれます。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Andrei Popov (editor) Microsoft Corp. United States of America",
      "ja": "Andrei Popov（編集者）Microsoft Corp.アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: andreipo@microsoft.com",
      "ja": "メール：andreipo@microsoft.com"
    },
    {
      "indent": 3,
      "text": "Magnus Nystroem Microsoft Corp. United States of America",
      "ja": "Magnus Nystroem Microsoft Corp.アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: mnystrom@microsoft.com",
      "ja": "メール：mnystrom@microsoft.com"
    },
    {
      "indent": 3,
      "text": "Dirk Balfanz Google Inc. United States of America",
      "ja": "Dirk Balfanz Google Inc.アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: balfanz@google.com",
      "ja": "メール：balfanz@google.com"
    },
    {
      "indent": 3,
      "text": "Jeff Hodges Kings Mountain Systems United States of America",
      "ja": "ジェフホッジスキングスマウンテンシステムズアメリカ"
    },
    {
      "indent": 3,
      "text": "Email: Jeff.Hodges@KingsMountain.com",
      "ja": "メール：Jeff.Hodges@KingsMountain.com"
    }
  ]
}