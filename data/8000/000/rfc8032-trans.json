{
  "title": {
    "text": "RFC 8032 - Edwards-Curve Digital Signature Algorithm (EdDSA)",
    "ja": "RFC 8032 - エドワーズ-曲線デジタル署名アルゴリズム（エドワーズ曲線デジタル署名アルゴリズム）"
  },
  "number": 8032,
  "created_at": "2019-10-22 10:22:17.845359+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Research Task Force (IRTF)                         S. Josefsson\nRequest for Comments: 8032                                        SJD AB\nCategory: Informational                                     I. Liusvaara\nISSN: 2070-1721                                              Independent\n                                                            January 2017",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Edwards-Curve Digital Signature Algorithm (EdDSA)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes elliptic curve signature scheme Edwards-curve Digital Signature Algorithm (EdDSA). The algorithm is instantiated with recommended parameters for the edwards25519 and edwards448 curves. An example implementation and test vectors are provided.",
      "ja": "この文書では、楕円曲線署名方式エドワーズ曲線デジタル署名アルゴリズム（エドワーズ曲線デジタル署名アルゴリズム）を記述する。アルゴリズムはedwards25519とedwards448カーブの推奨パラメータでインスタンス化されます。例示的な実施形態及び試験ベクターが提供されます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Research Task Force (IRTF). The IRTF publishes the results of Internet-related research and development activities. These results might not be suitable for deployment. This RFC represents the consensus of the Crypto Forum Research Group of the Internet Research Task Force (IRTF). Documents approved for publication by the IRSG are not a candidate for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "この文書はインターネットResearch Task Force（IRTF）の製品です。 IRTFはインターネット関連の研究開発活動の成果を公表しています。これらの結果は、展開に適していない可能性があります。このRFCはインターネットResearch Task Force（IRTF）の暗号化フォーラム研究グループのコンセンサスを表しています。 IRSGによって公表のために承認されたドキュメントは、インターネット標準の任意のレベルの候補ではありません。 RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc8032.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc8032で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2017 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2017 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n2.  Notation and Conventions  . . . . . . . . . . . . . . . . . .   4\n3.  EdDSA Algorithm . . . . . . . . . . . . . . . . . . . . . . .   5\n  3.1.  Encoding  . . . . . . . . . . . . . . . . . . . . . . . .   7\n  3.2.  Keys  . . . . . . . . . . . . . . . . . . . . . . . . . .   7\n  3.3.  Sign  . . . . . . . . . . . . . . . . . . . . . . . . . .   8\n  3.4.  Verify  . . . . . . . . . . . . . . . . . . . . . . . . .   8\n4.  PureEdDSA, HashEdDSA, and Naming  . . . . . . . . . . . . . .   8\n5.  EdDSA Instances . . . . . . . . . . . . . . . . . . . . . . .   9\n  5.1.  Ed25519ph, Ed25519ctx, and Ed25519  . . . . . . . . . . .   9\n    5.1.1.  Modular Arithmetic  . . . . . . . . . . . . . . . . .  10\n    5.1.2.  Encoding  . . . . . . . . . . . . . . . . . . . . . .  10\n    5.1.3.  Decoding  . . . . . . . . . . . . . . . . . . . . . .  11\n    5.1.4.  Point Addition  . . . . . . . . . . . . . . . . . . .  11\n    5.1.5.  Key Generation  . . . . . . . . . . . . . . . . . . .  13\n    5.1.6.  Sign  . . . . . . . . . . . . . . . . . . . . . . . .  13\n    5.1.7.  Verify  . . . . . . . . . . . . . . . . . . . . . . .  14\n  5.2.  Ed448ph and Ed448 . . . . . . . . . . . . . . . . . . . .  15\n    5.2.1.  Modular Arithmetic  . . . . . . . . . . . . . . . . .  16\n    5.2.2.  Encoding  . . . . . . . . . . . . . . . . . . . . . .  16\n    5.2.3.  Decoding  . . . . . . . . . . . . . . . . . . . . . .  16\n    5.2.4.  Point Addition  . . . . . . . . . . . . . . . . . . .  17\n    5.2.5.  Key Generation  . . . . . . . . . . . . . . . . . . .  18\n    5.2.6.  Sign  . . . . . . . . . . . . . . . . . . . . . . . .  19\n    5.2.7.  Verify  . . . . . . . . . . . . . . . . . . . . . . .  19\n6.  Ed25519 Python Illustration . . . . . . . . . . . . . . . . .  20\n7.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  23\n  7.1.  Test Vectors for Ed25519  . . . . . . . . . . . . . . . .  24\n  7.2.  Test Vectors for Ed25519ctx . . . . . . . . . . . . . . .  27\n  7.3.  Test Vectors for Ed25519ph  . . . . . . . . . . . . . . .  30\n  7.4.  Test Vectors for Ed448  . . . . . . . . . . . . . . . . .  30\n  7.5.  Test Vectors for Ed448ph  . . . . . . . . . . . . . . . .  38\n8.  Security Considerations . . . . . . . . . . . . . . . . . . .  40\n  8.1.  Side-Channel Leaks  . . . . . . . . . . . . . . . . . . .  40\n  8.2.  Randomness Considerations . . . . . . . . . . . . . . . .  40\n  8.3.  Use of Contexts . . . . . . . . . . . . . . . . . . . . .  41\n  8.4.  Signature Malleability  . . . . . . . . . . . . . . . . .  41\n  8.5.  Choice of Signature Primitive . . . . . . . . . . . . . .  41\n  8.6.  Mixing Different Prehashes  . . . . . . . . . . . . . . .  42\n  8.7.  Signing Large Amounts of Data at Once . . . . . . . . . .  42\n  8.8.  Multiplication by Cofactor in Verification  . . . . . . .  43\n  8.9.  Use of SHAKE256 as a Hash Function  . . . . . . . . . . .  43\n9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  43\n  9.1.  Normative References  . . . . . . . . . . . . . . . . . .  43\n  9.2.  Informative References  . . . . . . . . . . . . . . . . .  44",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Appendix A.  Ed25519/Ed448 Python Library . . . . . . . . . . . .  46\nAppendix B.  Library Driver . . . . . . . . . . . . . . . . . . .  58\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  60\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  60",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "The Edwards-curve Digital Signature Algorithm (EdDSA) is a variant of Schnorr's signature system with (possibly twisted) Edwards curves. EdDSA needs to be instantiated with certain parameters, and this document describes some recommended variants.",
      "ja": "エドワーズ曲線デジタル署名アルゴリズム（エドワーズ曲線デジタル署名アルゴリズム）（おそらくねじれ）エドワーズ曲線とシュノールの署名システムの変形です。エドワーズ曲線デジタル署名アルゴリズムは、特定のパラメータでインスタンス化する必要があり、この文書は、いくつかの推奨される変異型が述べられています。"
    },
    {
      "indent": 3,
      "text": "To facilitate adoption of EdDSA in the Internet community, this document describes the signature scheme in an implementation-oriented way and provides sample code and test vectors.",
      "ja": "インターネットコミュニティにエドワーズ曲線デジタル署名アルゴリズムの採用を容易にするために、このドキュメントは実装指向の方法で署名方式について説明し、サンプルコードとテストベクターを提供します。"
    },
    {
      "indent": 3,
      "text": "The advantages with EdDSA are as follows:",
      "ja": "次のようにエドワーズ曲線デジタル署名アルゴリズムを持つ利点は、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. EdDSA provides high performance on a variety of platforms;",
      "section_title": true,
      "ja": "1.エドワーズ曲線デジタル署名アルゴリズムは、さまざまなプラットフォーム上で高いパフォーマンスを提供します。"
    },
    {
      "indent": 3,
      "text": "2. The use of a unique random number for each signature is not required;",
      "ja": "2.各署名の一意の乱数を使用することは必要とされません。"
    },
    {
      "indent": 3,
      "text": "3. It is more resilient to side-channel attacks;",
      "section_title": true,
      "ja": "3.サイドチャネル攻撃することをより弾力的です。"
    },
    {
      "indent": 3,
      "text": "4. EdDSA uses small public keys (32 or 57 bytes) and signatures (64 or 114 bytes) for Ed25519 and Ed448, respectively;",
      "ja": "4.エドワーズ曲線デジタル署名アルゴリズムは、それぞれ、Ed25519とEd448ため小さな公開鍵（32または57バイト）と署名（64または114バイト）を使用します。"
    },
    {
      "indent": 3,
      "text": "5. The formulas are \"complete\", i.e., they are valid for all points on the curve, with no exceptions. This obviates the need for EdDSA to perform expensive point validation on untrusted public values; and",
      "ja": "5.式はすなわち、彼らは例外なく、曲線上のすべてのポイントのために有効である、「完成」されています。これは、エドワーズ曲線デジタル署名アルゴリズムは、信頼できない公共の値に高価なポイントの検証を実行する必要性がなくなります。そして"
    },
    {
      "indent": 3,
      "text": "6. EdDSA provides collision resilience, meaning that hash-function collisions do not break this system (only holds for PureEdDSA).",
      "ja": "6.エドワーズ曲線デジタル署名アルゴリズムは、ハッシュ関数の衝突が（のみPureEdDSAのために保持している）、このシステムを壊さないことを意味し、衝突回復力を提供します。"
    },
    {
      "indent": 3,
      "text": "The original EdDSA paper [EDDSA] and the generalized version described in \"EdDSA for more curves\" [EDDSA2] provide further background. RFC 7748 [RFC7748] discusses specific curves, including Curve25519 [CURVE25519] and Ed448-Goldilocks [ED448].",
      "ja": "オリジナルエドワーズ曲線デジタル署名アルゴリズム紙[エドワーズ曲線デジタル署名アルゴリズム]および「より曲線についてエドワーズ曲線デジタル署名アルゴリズム」に記載され一般化バージョンは、[EDDSA2]さらなる背景を提供します。 RFC 7748 [RFC7748]はCurve25519 [CURVE25519]とEd448-びき[ED448]を含む特定の曲線を、説明します。"
    },
    {
      "indent": 3,
      "text": "Ed25519 is intended to operate at around the 128-bit security level and Ed448 at around the 224-bit security level. A sufficiently large quantum computer would be able to break both. Reasonable projections of the abilities of classical computers conclude that Ed25519 is perfectly safe. Ed448 is provided for those applications with relaxed performance requirements and where there is a desire to hedge against analytical attacks on elliptic curves.",
      "ja": "Ed25519は、224ビットのセキュリティ・レベル付近で、128ビットのセキュリティ・レベルとEd448周りで動作するように意図されています。十分に大きな量子コンピュータは、両方を破ることができるだろう。古典コンピュータの能力の合理的な予測はEd25519が完全に安全であると結論付けています。 Ed448はリラックスしたパフォーマンス要件とそれらのアプリケーションのために提供されており、楕円曲線上の分析攻撃をヘッジすることが望まれているところ。"
    },
    {
      "indent": 0,
      "text": "2. Notation and Conventions",
      "section_title": true,
      "ja": "2.表記と表記規則"
    },
    {
      "indent": 3,
      "text": "The following notation is used throughout the document:",
      "ja": "以下の表記は、文書全体で使用されています。"
    },
    {
      "indent": 3,
      "text": "p Denotes the prime number defining the underlying field",
      "ja": "pは基本フィールドを定義する素数を表し"
    },
    {
      "indent": 3,
      "text": "GF(p) Finite field with p elements",
      "ja": "GF（p）はp個の要素を有する有限フィールド"
    },
    {
      "indent": 3,
      "text": "x^y x multiplied by itself y times",
      "ja": "単独でY回の乗算のx ^ yのX"
    },
    {
      "indent": 3,
      "text": "B Generator of the group or subgroup of interest",
      "ja": "関心のグループまたはサブグループのBジェネレータ"
    },
    {
      "indent": 3,
      "text": "[n]X X added to itself n times",
      "ja": "[N] X Xは、それ自体のN倍に添加しました"
    },
    {
      "indent": 3,
      "text": "h[i] The i'th octet of octet string",
      "ja": "オクテットストリングのH [i]はi番目のオクテット"
    },
    {
      "indent": 3,
      "text": "h_i The i'th bit of h",
      "ja": "Hのi番目のビットをH_I"
    },
    {
      "indent": 3,
      "text": "a || b (bit-)string a concatenated with (bit-)string b",
      "ja": "A || B（bit-）文字列（bit-）列Bと連結"
    },
    {
      "indent": 3,
      "text": "a <= b a is less than or equal to b",
      "ja": "<= B Aは以下のBに等しいです"
    },
    {
      "indent": 3,
      "text": "a >= b a is greater than or equal to b",
      "ja": "> = B Aは、より大きいまたはbに等しいです"
    },
    {
      "indent": 3,
      "text": "i+j Sum of i and j",
      "ja": "私は、iとjのjの和を+"
    },
    {
      "indent": 3,
      "text": "i*j Multiplication of i and j",
      "ja": "私は、iとjのjの乗算を*"
    },
    {
      "indent": 3,
      "text": "i-j Subtraction of j from i",
      "ja": "IからJのi jを減算"
    },
    {
      "indent": 3,
      "text": "i/j Division of i by j",
      "ja": "JでIのI / J課"
    },
    {
      "indent": 3,
      "text": "i x j Cartesian product of i and j",
      "ja": "私は、iとjのjのデカルト積をxは"
    },
    {
      "indent": 3,
      "text": "(u,v) Elliptic curve point with x-coordinate u and y-coordinate v",
      "ja": "x座標uとy座標vで（U、V）楕円曲線点"
    },
    {
      "indent": 3,
      "text": "SHAKE256(x, y) The y first octets of SHAKE256 [FIPS202] output for input x",
      "ja": "SHAKE256（x、y）はSHAKE256 [FIPS202]出力のY最初のオクテットの入力xに対して"
    },
    {
      "indent": 3,
      "text": "OCTET(x) The octet with value x",
      "ja": "OCTET（x）は値xとオクテット"
    },
    {
      "indent": 3,
      "text": "OLEN(x) The number of octets in string x dom2(x, y) The blank octet string when signing or verifying Ed25519. Otherwise, the octet string: \"SigEd25519 no Ed25519 collisions\" || octet(x) || octet(OLEN(y)) || y, where x is in range 0-255 and y is an octet string of at most 255 octets. \"SigEd25519 no Ed25519 collisions\" is in ASCII (32 octets).",
      "ja": "オレン（x）は、文字列のx DOM2（x、y）の署名またはEd25519を検証ブランクオクテットストリングのオクテットの数。それ以外の場合は、オクテット文字列：「SigEd25519なしEd25519衝突」||オクテット（X）||オクテット（オレン（Y））|| xは0〜255の範囲にあり、yは最大で255オクテットのオクテット列であるY、。 \"SigEd25519なしEd25519の衝突は、\" ASCII（32オクテット）です。"
    },
    {
      "indent": 3,
      "text": "dom4(x, y) The octet string \"SigEd448\" || octet(x) || octet(OLEN(y)) || y, where x is in range 0-255 and y is an octet string of at most 255 octets. \"SigEd448\" is in ASCII (8 octets).",
      "ja": "dom4（x、y）のオクテット列 \"SigEd448\" ||オクテット（X）||オクテット（オレン（Y））|| xは0〜255の範囲にあり、yは最大で255オクテットのオクテット列であるY、。 \"SigEd448は、\" ASCII（8つのオクテット）です。"
    },
    {
      "indent": 3,
      "text": "Parentheses (i.e., '(' and ')') are used to group expressions, in order to avoid having the description depend on a binding order between operators.",
      "ja": "括弧（すなわち、「（」と「）は」）の説明は、オペレータ間の結合順序に依存することを避けるために、グループの表現に使用されます。"
    },
    {
      "indent": 3,
      "text": "Bit strings are converted to octet strings by taking bits from left to right, packing those from the least significant bit of each octet to the most significant bit, and moving to the next octet when each octet fills up. The conversion from octet string to bit string is the reverse of this process; for example, the 16-bit bit string",
      "ja": "ビット列は、左から右へのビットを取って最上位ビットへの各オクテットの最下位ビットからのものを梱包し、各オクテットがいっぱいになると次のオクテットに移動してオクテット文字列に変換されます。ビット列のオクテット列からの変換は、このプロセスの逆です。例えば、16ビットのビット列"
    },
    {
      "indent": 13,
      "text": "b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 b12 b13 b14 b15",
      "ja": "B0、B1、B2 KB BX B5 BSH COMMON B8 B10 B11 B12 B13 B14 B15 bya"
    },
    {
      "indent": 3,
      "text": "is converted into two octets x0 and x1 (in this order) as",
      "ja": "（この順序で）2つのオクテットX0とX1に変換され、"
    },
    {
      "indent": 13,
      "text": "x0 = b7*128+b6*64+b5*32+b4*16+b3*8+b2*4+b1*2+b0\nx1 = b15*128+b14*64+b13*32+b12*16+b11*8+b10*4+b9*2+b8",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Little-endian encoding into bits places bits from left to right and from least significant to most significant. If combined with bit-string-to-octet-string conversion defined above, this results in little-endian encoding into octets (if length is not a multiple of 8, the most significant bits of the last octet remain unused).",
      "ja": "ビットにリトルエンディアンエンコーディングは右に、最も重要なの最下位から左からのビットを配置します。上記で定義されたビット列対オクテットストリング変換と組み合わされた場合、これはオクテットにリトルエンディアン符号化をもたらす（長さが8の倍数でない場合、最後のオクテットの最上位ビットは、未使用のままです）。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. EdDSA Algorithm",
      "section_title": true,
      "ja": "3.エドワーズ曲線デジタル署名アルゴリズムアルゴリズム"
    },
    {
      "indent": 3,
      "text": "EdDSA is a digital signature system with 11 parameters.",
      "ja": "エドワーズ曲線デジタル署名アルゴリズムは11個のパラメータを有するデジタル署名システムです。"
    },
    {
      "indent": 3,
      "text": "The generic EdDSA digital signature system with its 11 input parameters is not intended to be implemented directly. Choosing parameters is critical for secure and efficient operation. Instead, you would implement a particular parameter choice for EdDSA (such as",
      "ja": "その11個の入力パラメータを持つ汎用エドワーズ曲線デジタル署名アルゴリズム、デジタル署名システムが直接実装されるものではありません。パラメータを選択すると、安全かつ効率的な運用のために重要です。代わりに、次のような（エドワーズ曲線デジタル署名アルゴリズムのための特定のパラメータの選択を実装します"
    },
    {
      "indent": 3,
      "text": "Ed25519 or Ed448), sometimes slightly generalized to achieve code reuse to cover Ed25519 and Ed448.",
      "ja": "Ed25519またはEd448）は、時々わずかにEd25519とEd448を覆うように、コードの再利用を実現するために一般化。"
    },
    {
      "indent": 3,
      "text": "Therefore, a precise explanation of the generic EdDSA is thus not particularly useful for implementers. For background and completeness, a succinct description of the generic EdDSA algorithm is given here.",
      "ja": "したがって、一般的なエドワーズ曲線デジタル署名アルゴリズムの正確な説明は、このように実装するために特に有用ではありません。背景と完全にするため、一般的なエドワーズ曲線デジタル署名アルゴリズムアルゴリズムの簡潔な説明はここで与えられています。"
    },
    {
      "indent": 3,
      "text": "The definition of some parameters, such as n and c, may help to explain some steps of the algorithm that are not intuitive.",
      "ja": "例えばn-やCのようないくつかのパラメータの定義は、直感的でないアルゴリズムのいくつかのステップを説明するために役立つかもしれません。"
    },
    {
      "indent": 3,
      "text": "This description closely follows [EDDSA2].",
      "ja": "この説明は密接に[EDDSA2]は以下。"
    },
    {
      "indent": 3,
      "text": "EdDSA has 11 parameters:",
      "ja": "エドワーズ曲線デジタル署名アルゴリズムは11個のパラメータがあります。"
    },
    {
      "indent": 3,
      "text": "1. An odd prime power p. EdDSA uses an elliptic curve over the finite field GF(p).",
      "ja": "1.奇数の素数電力P。エドワーズ曲線デジタル署名アルゴリズムは、有限体GF（p）上の楕円曲線を使用します。"
    },
    {
      "indent": 3,
      "text": "2. An integer b with 2^(b-1) > p. EdDSA public keys have exactly b bits, and EdDSA signatures have exactly 2*b bits. b is recommended to be a multiple of 8, so public key and signature lengths are an integral number of octets.",
      "ja": "2.整数2 ^（B-1）> PとB。エドワーズ曲線デジタル署名アルゴリズムの公開鍵は正確にビットbを持っている、とエドワーズ曲線デジタル署名アルゴリズムの署名が正確に2 * Bビットを持っています。 Bが8の倍数であることが推奨されるので、公開鍵と署名の長さは、オクテットの整数です。"
    },
    {
      "indent": 3,
      "text": "3. A (b-1)-bit encoding of elements of the finite field GF(p).",
      "section_title": true,
      "ja": "3. A（B-1）有限体GF（p）のエレメントのビットエンコーディング。"
    },
    {
      "indent": 3,
      "text": "4. A cryptographic hash function H producing 2*b-bit output. Conservative hash functions (i.e., hash functions where it is infeasible to create collisions) are recommended and do not have much impact on the total cost of EdDSA.",
      "ja": "4. 2 * Bビットの出力を生成する暗号ハッシュ関数H。保守的なハッシュ関数（衝突を作成するために実行不可能である、すなわち、ハッシュ関数）が推奨されているとエドワーズ曲線デジタル署名アルゴリズムの総コストに大きな影響を与えることはありません。"
    },
    {
      "indent": 3,
      "text": "5. An integer c that is 2 or 3. Secret EdDSA scalars are multiples of 2^c. The integer c is the base-2 logarithm of the so-called cofactor.",
      "ja": "5.そのC整数2つのまたは3秘密エドワーズ曲線デジタル署名アルゴリズムのスカラーが2 ^ Cの倍数です。整数cは、いわゆる補因子の2を底とする対数です。"
    },
    {
      "indent": 3,
      "text": "6. An integer n with c <= n < b. Secret EdDSA scalars have exactly n + 1 bits, with the top bit (the 2^n position) always set and the bottom c bits always cleared.",
      "ja": "前記整数N C <= N <bです。秘密エドワーズ曲線デジタル署名アルゴリズムスカラは、トップビット（2 ^ n個の位置）が常に設定され、常にクリアビットC下で、正確にn + 1ビットを有します。"
    },
    {
      "indent": 3,
      "text": "7. A non-square element d of GF(p). The usual recommendation is to take it as the value nearest to zero that gives an acceptable curve.",
      "ja": "7. GF（p）の非正方要素d。通常の推奨は、許容可能な曲線を与え、ゼロに最も近い値として取ることです。"
    },
    {
      "indent": 3,
      "text": "8. A non-zero square element a of GF(p). The usual recommendation for best performance is a = -1 if p mod 4 = 1, and a = 1 if p mod 4 = 3.",
      "ja": "8. GF（p）の非零正方形要素。 p個のMOD 4 = 3の場合に最良の性能のための通常の推奨= -1のP MOD 4 = 1の場合であり、a = 1です。"
    },
    {
      "indent": 3,
      "text": "9. An element B != (0,1) of the set E = { (x,y) is a member of GF(p) x GF(p) such that a * x^2 + y^2 = 1 + d * x^2 * y^2 }.",
      "ja": "セットの9元素B！=（0,1）E = {（x、y）はGFのメンバーである（P）X GF（p）のような^ * X ^ 2 + Yその= 1 2 + D * X ^ 2 * yは^ 2}。"
    },
    {
      "indent": 3,
      "text": "10. An odd prime L such that [L]B = 0 and 2^c * L = #E. The number #E (the number of points on the curve) is part of the standard data provided for an elliptic curve E, or it can be computed as cofactor * order.",
      "ja": "10.奇素数Lように[L] B = 0と2 ^ C * 1 = #E。数#E（曲線上の点の数）は、楕円曲線Eのために提供される標準的なデータの一部である、またはそれは補因子*順序として計算することができます。"
    },
    {
      "indent": 3,
      "text": "11. A \"prehash\" function PH. PureEdDSA means EdDSA where PH is the identity function, i.e., PH(M) = M. HashEdDSA means EdDSA where PH generates a short output, no matter how long the message is; for example, PH(M) = SHA-512(M).",
      "ja": "11. A \"prehash\" 機能PH。 PureEdDSA pHが恒等関数であるエドワーズ曲線デジタル署名アルゴリズム、すなわち、PH（M）= M. HashEdDSAはPHは関係なく、メッセージがどれくらい長く、短い出力を生成しないエドワーズ曲線デジタル署名アルゴリズムを手段を意味します。例えば、PH（M）はSHA-512（M）を=。"
    },
    {
      "indent": 3,
      "text": "Points on the curve form a group under addition, (x3, y3) = (x1, y1) + (x2, y2), with the formulas",
      "ja": "曲線上の点は、さらに下式を有する（X3、Y3）=（X1、Y1）+（X2、Y2）を、グループを形成します"
    },
    {
      "indent": 3,
      "text": "          x1 * y2 + x2 * y1                y1 * y2 - a * x1 * x2\nx3 = --------------------------,   y3 = ---------------------------\n      1 + d * x1 * x2 * y1 * y2          1 - d * x1 * x2 * y1 * y2",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The neutral element in the group is (0,1).",
      "ja": "グループ内で中立的要素は、（0,1）です。"
    },
    {
      "indent": 3,
      "text": "Unlike many other curves used for cryptographic applications, these formulas are \"complete\"; they are valid for all points on the curve, with no exceptions. In particular, the denominators are non-zero for all input points.",
      "ja": "暗号アプリケーションのために使用される多くの他の曲線とは異なり、これらの式は、「完全」です。彼らは例外なく、曲線上のすべてのポイントのために有効です。特に、分母は、すべての入力点について非ゼロです。"
    },
    {
      "indent": 3,
      "text": "There are more efficient formulas, which are still complete, that use homogeneous coordinates to avoid the expensive modulo p inversions. See [Faster-ECC] and [Edwards-revisited].",
      "ja": "高価なモジュロPの反転を回避するために、同次座標を使用して、まだ完了してより効率的な数式は、あります。 [高速化-ECC]を参照し、[エドワーズ-再訪]。"
    },
    {
      "indent": 0,
      "text": "3.1. Encoding",
      "section_title": true,
      "ja": "3.1。エンコーディング"
    },
    {
      "indent": 3,
      "text": "An integer 0 < S < L - 1 is encoded in little-endian form as a b-bit string ENC(S).",
      "ja": "整数0 <S <L  -  1は、Bビット列ENC（S）としてリトルエンディアン形式で符号化されます。"
    },
    {
      "indent": 3,
      "text": "An element (x,y) of E is encoded as a b-bit string called ENC(x,y), which is the (b-1)-bit encoding of y concatenated with one bit that is 1 if x is negative and 0 if x is not negative.",
      "ja": "xが負の場合、Eの要素（x、y）が1である1ビットと連結Yの（B-1）ビットの符号化であるENC（X、Y）と呼ばれるBビット列として符号化され、 0 xが負でない場合。"
    },
    {
      "indent": 3,
      "text": "The encoding of GF(p) is used to define \"negative\" elements of GF(p): specifically, x is negative if the (b-1)-bit encoding of x is lexicographically larger than the (b-1)-bit encoding of -x.",
      "ja": "GF（p）の符号化は、GF（p）の「負」の要素を定義するために使用される：Xの（B-1）ビットエンコーディングは、（B-1）ビットより辞書大きい場合、具体的に、xが負であります-xのエンコーディング。"
    },
    {
      "indent": 0,
      "text": "3.2. Keys",
      "section_title": true,
      "ja": "3.2。キー"
    },
    {
      "indent": 3,
      "text": "An EdDSA private key is a b-bit string k. Let the hash H(k) = (h_0, h_1, ..., h_(2b-1)) determine an integer s, which is 2^n plus the sum of m = 2^i * h_i for all integer i, c <= i < n. Let s determine the multiple A = [s]B. The EdDSA public key is ENC(A). The bits h_b, ..., h_(2b-1) are used below during signing.",
      "ja": "エドワーズ曲線デジタル署名アルゴリズムの秘密鍵は、B-ビット列のkです。 、ハッシュH（K）=（H_0、H_1、...、H_（2B-1））2 ^ nはプラスすべての整数のためにM = 2 ^ iはH_Iを*との和である整数S、Iを決定させますCは<= iがN < sが複数A = [S] Bを決定させます。エドワーズ曲線デジタル署名アルゴリズムの公開鍵は、ENC（A）です。ビットH_B、...、H_（2B-1）は、署名時に以下で使用されます。"
    },
    {
      "indent": 0,
      "text": "3.3. Sign",
      "section_title": true,
      "ja": "3.3。符号"
    },
    {
      "indent": 3,
      "text": "The EdDSA signature of a message M under a private key k is defined as the PureEdDSA signature of PH(M). In other words, EdDSA simply uses PureEdDSA to sign PH(M).",
      "ja": "秘密鍵Kの下で、メッセージMのエドワーズ曲線デジタル署名アルゴリズム署名がPHのPureEdDSA署名（M）として定義されます。換言すれば、エドワーズ曲線デジタル署名アルゴリズムは、単にPH（M）を署名するPureEdDSAを使用します。"
    },
    {
      "indent": 3,
      "text": "The PureEdDSA signature of a message M under a private key k is the 2*b-bit string ENC(R) || ENC(S). R and S are derived as follows. First define r = H(h_b || ... || h_(2b-1) || M) interpreting 2*b-bit strings in little-endian form as integers in {0, 1, ..., 2^(2*b) - 1}. Let R = [r]B and S = (r + H(ENC(R) || ENC(A) || PH(M)) * s) mod L. The s used here is from the previous section.",
      "ja": "秘密鍵Kの下で、メッセージMのPureEdDSA署名は、2 * Bビット列ENC（R）であり、|| ENC（S）。次のようにR及びSが導出されます。まず{0、1、...、2 ^ R = Hを定義する（H_B || ... || H_（2B-1）|| M）の整数として、リトルエンディアン形式で2 * Bビット列を解釈します（2 * B） -  1}。ましょうR = [R] BとS =（R + H（ENC（R）|| ENC（A）|| PH（M））* S）MOD L.ザSここで使用される前のセクションからのものです。"
    },
    {
      "indent": 0,
      "text": "3.4. Verify",
      "section_title": true,
      "ja": "3.4。検証します"
    },
    {
      "indent": 3,
      "text": "To verify a PureEdDSA signature ENC(R) || ENC(S) on a message M under a public key ENC(A), proceed as follows. Parse the inputs so that A and R are elements of E, and S is a member of the set {0, 1, ..., L-1}. Compute h = H(ENC(R) || ENC(A) || M), and check the group equation [2^c * S] B = 2^c * R + [2^c * h] A in E. The signature is rejected if parsing fails (including S being out of range) or if the group equation does not hold.",
      "ja": "PureEdDSA署名ENC（R）を確認するために||次のように公開鍵ENC（A）の下で、メッセージMにENC（S）が、進行します。 A及びRは、Eの要素であり、Sはセットのメンバーであり、{0、1、...、L-1}のように入力を解析。 H = H（ENC（R）|| ENC（A）|| M）を計算し、Eのグループ式[2 ^のC * S] B = 2 ^のC *のR + [2 ^のC * H] Aをチェック解析は、（範囲外であるSを含む）又はグループ式が成立しない場合に失敗した場合、署名は拒絶されます。"
    },
    {
      "indent": 3,
      "text": "EdDSA verification for a message M is defined as PureEdDSA verification for PH(M).",
      "ja": "メッセージMのためにエドワーズ曲線デジタル署名アルゴリズムの検証は、PH（M）用PureEdDSA検証として定義されます。"
    },
    {
      "indent": 0,
      "text": "4. PureEdDSA, HashEdDSA, and Naming",
      "section_title": true,
      "ja": "4. PureEdDSA、HashEdDSA、およびネーミング"
    },
    {
      "indent": 3,
      "text": "One of the parameters of the EdDSA algorithm is the \"prehash\" function. This may be the identity function, resulting in an algorithm called PureEdDSA, or a collision-resistant hash function such as SHA-512, resulting in an algorithm called HashEdDSA.",
      "ja": "エドワーズ曲線デジタル署名アルゴリズムアルゴリズムのパラメータの1つは、「prehash」機能です。これはPureEdDSAと呼ばれるアルゴリズム、またはHashEdDSAと呼ばれるアルゴリズムをもたらすようなSHA-512のような衝突困難ハッシュ関数、その結果、同一の関数であってもよいです。"
    },
    {
      "indent": 3,
      "text": "Choosing which variant to use depends on which property is deemed to be more important between 1) collision resilience and 2) a single-pass interface for creating signatures. The collision resilience property means EdDSA is secure even if it is feasible to compute collisions for the hash function. The single-pass interface property means that only one pass over the input message is required to create a signature. PureEdDSA requires two passes over the input. Many existing APIs, protocols, and environments assume digital signature algorithms only need one pass over the input and may have API or bandwidth concerns supporting anything else.",
      "ja": "1の間、より重要であるとみなされた特性に依存バリアント使用を選択する）衝突耐性および2）署名を作成するための単一パス・インタフェース。衝突反発プロパティは、エドワーズ曲線デジタル署名アルゴリズムは、ハッシュ関数の衝突を計算することが可能である場合にも安全であることを意味します。シングルパスインターフェースプロパティは、入力メッセージ上唯一のパスが、署名を作成するために必要とされることを意味します。 PureEdDSAは、入力上の2つのパスが必要です。多くの既存のAPI、プロトコル、および環境は、デジタル署名アルゴリズムのみを入力の上で1つのパスを必要としない何かをサポートするAPIまたは帯域幅の懸念を持っていることが前提としています。"
    },
    {
      "indent": 3,
      "text": "Note that single-pass verification is not possible with most uses of signatures, no matter which signature algorithm is chosen. This is because most of the time, one can't process the message until the signature is validated, which needs a pass on the entire message.",
      "ja": "シングルパス検証に関係なく選択される署名アルゴリズム、署名のほとんどの用途では不可能ではないことに留意されたいです。ほとんどの時間は、一つの全体メッセージにパスが必要署名が検証されるまで、メッセージを処理できないためです。"
    },
    {
      "indent": 3,
      "text": "This document specifies parameters resulting in the HashEdDSA variants Ed25519ph and Ed448ph and the PureEdDSA variants Ed25519 and Ed448.",
      "ja": "この文書では、Ed25519phとEd448phを変異体およびPureEdDSAがEd25519とEd448バリアントHashEdDSAが得られたパラメータを指定します。"
    },
    {
      "indent": 0,
      "text": "5. EdDSA Instances",
      "section_title": true,
      "ja": "5.エドワーズ曲線デジタル署名アルゴリズムのインスタンス"
    },
    {
      "indent": 3,
      "text": "This section instantiates the general EdDSA algorithm for the edwards25519 and edwards448 curves, each for the PureEdDSA and HashEdDSA variants (plus a contextualized extension of the Ed25519 scheme). Thus, five different parameter sets are described.",
      "ja": "このセクションでは、edwards25519とedwards448曲線、PureEdDSA及びHashEdDSA変異体（プラスEd25519スキームの文脈拡張）のためのそれぞれのための一般的なエドワーズ曲線デジタル署名アルゴリズムアルゴリズムをインスタンス化します。したがって、5つの異なるパラメータセットが記載されています。"
    },
    {
      "indent": 0,
      "text": "5.1. Ed25519ph, Ed25519ctx, and Ed25519",
      "section_title": true,
      "ja": "5.1。 Ed25519ph、Ed25519ctx、およびEd25519"
    },
    {
      "indent": 3,
      "text": "Ed25519 is EdDSA instantiated with:",
      "ja": "Ed25519はエドワーズ曲線デジタル署名アルゴリズムを使用してインスタンス化されます。"
    },
    {
      "indent": 3,
      "text": "+-----------+-------------------------------------------------------+\n| Parameter | Value                                                 |\n+-----------+-------------------------------------------------------+\n|     p     | p of edwards25519 in [RFC7748] (i.e., 2^255 - 19)     |\n|     b     | 256                                                   |\n|  encoding | 255-bit little-endian encoding of {0, 1, ..., p-1}    |\n|  of GF(p) |                                                       |\n|    H(x)   | SHA-512(dom2(phflag,context)||x) [RFC6234]            |\n|     c     | base 2 logarithm of cofactor of edwards25519 in       |\n|           | [RFC7748] (i.e., 3)                                   |\n|     n     | 254                                                   |\n|     d     | d of edwards25519 in [RFC7748] (i.e., -121665/121666  |\n|           | = 370957059346694393431380835087545651895421138798432 |\n|           | 19016388785533085940283555)                           |\n|     a     | -1                                                    |\n|     B     | (X(P),Y(P)) of edwards25519 in [RFC7748] (i.e., (1511 |\n|           | 22213495354007725011514095885315114540126930418572060 |\n|           | 46113283949847762202, 4631683569492647816942839400347 |\n|           | 5163141307993866256225615783033603165251855960))      |\n|     L     | order of edwards25519 in [RFC7748] (i.e.,             |\n|           | 2^252+27742317777372353535851937790883648493).        |\n|   PH(x)   | x (i.e., the identity function)                       |\n+-----------+-------------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 22,
      "text": "Table 1: Parameters of Ed25519",
      "ja": "表1：Ed25519のパラメータ"
    },
    {
      "indent": 3,
      "text": "For Ed25519, dom2(f,c) is the empty string. The phflag value is irrelevant. The context (if present at all) MUST be empty. This causes the scheme to be one and the same with the Ed25519 scheme published earlier.",
      "ja": "Ed25519、DOM2（F、C）のための空の文字列です。 phflag値は無関係です。コンテキスト（存在する場合に全て）が空でなければなりません。これは、スキームは1およびそれ以前に公開Ed25519方式に同じになるようになります。"
    },
    {
      "indent": 3,
      "text": "For Ed25519ctx, phflag=0. The context input SHOULD NOT be empty.",
      "ja": "Ed25519ctx、phflag = 0の場合。コンテキスト入力は空べきではありません。"
    },
    {
      "indent": 3,
      "text": "For Ed25519ph, phflag=1 and PH is SHA512 instead. That is, the input is hashed using SHA-512 before signing with Ed25519.",
      "ja": "Ed25519ph、phflag = 1およびPH代わりSHA512あります。すなわち、入力がEd25519で署名する前にSHA-512を使用してハッシュされます。"
    },
    {
      "indent": 3,
      "text": "Value of context is set by the signer and verifier (maximum of 255 octets; the default is empty string, except for Ed25519, which can't have context) and has to match octet by octet for verification to be successful.",
      "ja": "コンテキストの値は、署名者と検証者が設定されている（255オクテットの最大値、デフォルトでは、コンテキストを持つことができませんEd25519を除き、空の文字列です）、検証が成功するためのオクテットで、オクテットと一致する必要があります。"
    },
    {
      "indent": 3,
      "text": "The curve used is equivalent to Curve25519 [CURVE25519], under a change of coordinates, which means that the difficulty of the discrete logarithm problem is the same as for Curve25519.",
      "ja": "使用される曲線は、離散対数問題の困難性がCurve25519と同じであることを意味する座標の変化の下で、[CURVE25519] Curve25519と等価です。"
    },
    {
      "indent": 0,
      "text": "5.1.1. Modular Arithmetic",
      "section_title": true,
      "ja": "5.1.1。モジュラー演算"
    },
    {
      "indent": 3,
      "text": "For advice on how to implement arithmetic modulo p = 2^255 - 19 efficiently and securely, see Curve25519 [CURVE25519]. For inversion modulo p, it is recommended to use the identity x^-1 = x^(p-2) (mod p). Inverting zero should never happen, as it would require invalid input, which would have been detected before, or would be a calculation error.",
      "ja": "算術モジュロP = 2 ^ 255を実装する方法についてのアドバイスを - 効率的かつ安全19を、Curve25519 [CURVE25519]参照。反転モジュロpについて、x ^ -1 = X ^（P-2）（MOD p）のアイデンティティを使用することが推奨されます。それは以前に検出されていた、または計算エラーになり、無効な入力を、必要になるようにゼロを反転させると、発生しません。"
    },
    {
      "indent": 3,
      "text": "For point decoding or \"decompression\", square roots modulo p are needed. They can be computed using the Tonelli-Shanks algorithm or the special case for p = 5 (mod 8). To find a square root of a, first compute the candidate root x = a^((p+3)/8) (mod p). Then there are three cases:",
      "ja": "ポイントデコードや「解凍」、平方根の剰余Pのために必要とされます。これらは、Tonelli、シャンクスアルゴリズムまたはP = 5（MOD 8）のための特別なケースを使用して計算することができます。平方根を見つけるために、第1の候補ルートX = A ^（（P + 3）/ 8）（MOD p）を計算します。そして、3つのケースがあります。"
    },
    {
      "indent": 6,
      "text": "x^2 = a (mod p). Then x is a square root.",
      "ja": "X ^ 2 = A（MOD P）。そして、xは平方根です。"
    },
    {
      "indent": 6,
      "text": "x^2 = -a (mod p). Then 2^((p-1)/4) * x is a square root.",
      "ja": "X ^ 2 = -a（MOD P）。次いで、2 ^（（P-1）/ 4）* xが平方根です。"
    },
    {
      "indent": 6,
      "text": "a is not a square modulo p.",
      "ja": "平方剰余Pではありません。"
    },
    {
      "indent": 0,
      "text": "5.1.2. Encoding",
      "section_title": true,
      "ja": "5.1.2。エンコーディング"
    },
    {
      "indent": 3,
      "text": "All values are coded as octet strings, and integers are coded using little-endian convention, i.e., a 32-octet string h h[0],...h[31] represents the integer h[0] + 2^8 * h[1] + ... + 2^248 * h[31].",
      "ja": "すべての値は、オクテットストリングとして符号化され、整数はリトルエンディアン規則、すなわち、32オクテットストリングHH [0]、...、H [31]を使用して符号化された整数時間[0] + 2 ^ 8 * Hを表します[1] + ... + 2 ^ 248 * H [31]。"
    },
    {
      "indent": 3,
      "text": "A curve point (x,y), with coordinates in the range 0 <= x,y < p, is coded as follows. First, encode the y-coordinate as a little-endian string of 32 octets. The most significant bit of the final octet is always zero. To form the encoding of the point, copy the least significant bit of the x-coordinate to the most significant bit of the final octet.",
      "ja": "次のように曲線の点（x、y）は、範囲0 <= xと、Y <Pの座標を用いて、符号化されます。まず、32オクテットのリトルエンディアンの文字列としてy座標を符号化します。最終オクテットの最上位ビットは常にゼロです。 、ポイントのエンコーディングを形成するx座標の最終オクテットの最上位ビットの最下位ビットをコピーします。"
    },
    {
      "indent": 0,
      "text": "5.1.3. Decoding",
      "section_title": true,
      "ja": "5.1.3。デコーディング"
    },
    {
      "indent": 3,
      "text": "Decoding a point, given as a 32-octet string, is a little more complicated.",
      "ja": "32オクテット文字列として与えられた点を、復号化、もう少し複雑です。"
    },
    {
      "indent": 3,
      "text": "1. First, interpret the string as an integer in little-endian representation. Bit 255 of this number is the least significant bit of the x-coordinate and denote this value x_0. The y-coordinate is recovered simply by clearing this bit. If the resulting value is >= p, decoding fails.",
      "ja": "1.まず、リトルエンディアン表記の整数として文字列を解釈します。この数のビット255は、x座標と、この値X_0を表すの最下位ビットです。 y座標は、このビットをクリアすることによって簡単に回収されます。得られた値は> = Pである場合、復号化は失敗します。"
    },
    {
      "indent": 3,
      "text": "2. To recover the x-coordinate, the curve equation implies x^2 = (y^2 - 1) / (d y^2 + 1) (mod p). The denominator is always non-zero mod p. Let u = y^2 - 1 and v = d y^2 + 1. To compute the square root of (u/v), the first step is to compute the candidate root x = (u/v)^((p+3)/8). This can be done with the following trick, using a single modular powering for both the inversion of v and the square root:",
      "ja": "（ -  1 Y ^ 2）/（DのY ^ 2 + 1）（MOD P）2 x座標を回収するために、曲線の方程式は、x ^ 2 =ことを意味します。分母は常にゼロ以外のmod Pです。 UはY ^ 2 =みよう -  1、（U / V）の平方根を計算するために、V = DY ^ 2 + 1を、最初のステップは、候補ルートX =（U / V）^（（P +を計算することです3）/ 8）。これは、Vの逆平方根の両方のための単一のモジュール式電力供給を使用して、以下のトリックを用いて行うことができます。"
    },
    {
      "indent": 17,
      "text": "         (p+3)/8      3        (p-5)/8\nx = (u/v)        = u v  (u v^7)         (mod p)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "3. Again, there are three cases:",
      "section_title": true,
      "ja": "3.再度、3例があります。"
    },
    {
      "indent": 7,
      "text": "1. If v x^2 = u (mod p), x is a square root.",
      "section_title": true,
      "ja": "1. Vは、x ^ 2 = U（MOD p）の場合、xは平方根です。"
    },
    {
      "indent": 7,
      "text": "2. If v x^2 = -u (mod p), set x <-- x * 2^((p-1)/4), which is a square root.",
      "ja": "2. V X ^ 2 = -u（MOD p）の場合は、X <設定 - 平方根であり、X * 2 ^（（P-1）/ 4）。"
    },
    {
      "indent": 7,
      "text": "3. Otherwise, no square root exists for modulo p, and decoding fails.",
      "ja": "3.そうでない場合は、平方根はモジュロPのために存在しない、とデコードが失敗します。"
    },
    {
      "indent": 3,
      "text": "4. Finally, use the x_0 bit to select the right square root. If x = 0, and x_0 = 1, decoding fails. Otherwise, if x_0 != x mod 2, set x <-- p - x. Return the decoded point (x,y).",
      "ja": "4.最後に、右の平方根を選択するために、X_0ビットを使用します。 X = 0、及びX_0 = 1の場合、復号は失敗します。 ！そうでない場合、X_0 =×2 MOD、設定X < -  P  -  X。デコードされた点（x、y）を返します。"
    },
    {
      "indent": 0,
      "text": "5.1.4. Point Addition",
      "section_title": true,
      "ja": "5.1.4。ポイント加算"
    },
    {
      "indent": 3,
      "text": "For point addition, the following method is recommended. A point (x,y) is represented in extended homogeneous coordinates (X, Y, Z, T), with x = X/Z, y = Y/Z, x * y = T/Z.",
      "ja": "ポイント加算については、以下の方法が推奨されます。点（x、y）は、拡張同次座標で表現される（X、Y、Z、T）、X = X / Zと、Y = Y / Z、Xの*はY = T / Z。"
    },
    {
      "indent": 3,
      "text": "The neutral point is (0,1), or equivalently in extended homogeneous coordinates (0, Z, Z, 0) for any non-zero Z.",
      "ja": "（0,1）であるか、または等価的に拡張された同次座標で（0、Z、Z、0）任意の非ゼロZ.中性点"
    },
    {
      "indent": 3,
      "text": "The following formulas for adding two points, (x3,y3) = (x1,y1)+(x2,y2), on twisted Edwards curves with a=-1, square a, and non-square d are described in Section 3.1 of [Edwards-revisited] and in [EFD-TWISTED-ADD]. They are complete, i.e., they work for any pair of valid input points.",
      "ja": "= -1とねじれエドワーズ曲線上の2点（X3、Y3）=（X1、Y1）+（X2、Y2）を、追加するための以下の式は、正方形、および非正方形Dの3.1節に記載されています。 [エドワーズ-再訪]および[EFD撚り-ADD]です。彼らはつまり、彼らは有効な入力点の任意のペアのために働く、完全です。"
    },
    {
      "indent": 17,
      "text": "A = (Y1-X1)*(Y2-X2)\nB = (Y1+X1)*(Y2+X2)\nC = T1*2*d*T2\nD = Z1*2*Z2\nE = B-A\nF = D-C\nG = D+C\nH = B+A\nX3 = E*F\nY3 = G*H\nT3 = E*H\nZ3 = F*G",
      "raw": true
    },
    {
      "indent": 3,
      "text": "For point doubling, (x3,y3) = (x1,y1)+(x1,y1), one could just substitute equal points in the above (because of completeness, such substitution is valid) and observe that four multiplications turn into squares. However, using the formulas described in Section 3.2 of [Edwards-revisited] and in [EFD-TWISTED-DBL] saves a few smaller operations.",
      "ja": "点倍加、（X3、Y3）=（X1、Y1）+（X1、Y1）のために、一つだけ（完全性の、このような置換が有効であるため）上で同じ点を代入し、4回の乗算が正方形に変わることを観察できました。しかしながら、セクション3.2に記載される式を用いて、[エドワーズ-再訪]および[EFD-ツイストDBL]には、いくつかの小さな操作を保存します。"
    },
    {
      "indent": 17,
      "text": "A = X1^2\nB = Y1^2\nC = 2*Z1^2\nH = A+B\nE = H-(X1+Y1)^2\nG = A-B\nF = C+G\nX3 = E*F\nY3 = G*H\nT3 = E*H\nZ3 = F*G",
      "raw": true
    },
    {
      "indent": 0,
      "text": "5.1.5. Key Generation",
      "section_title": true,
      "ja": "5.1.5。キー生成"
    },
    {
      "indent": 3,
      "text": "The private key is 32 octets (256 bits, corresponding to b) of cryptographically secure random data. See [RFC4086] for a discussion about randomness.",
      "ja": "秘密鍵は、暗号化された安全なランダムデータの32個のオクテット（256ビット、Bに対応）です。ランダム性についての議論のための[RFC4086]を参照してください。"
    },
    {
      "indent": 3,
      "text": "The 32-byte public key is generated by the following steps.",
      "ja": "32バイトの公開鍵は、次の手順によって生成されます。"
    },
    {
      "indent": 3,
      "text": "1. Hash the 32-byte private key using SHA-512, storing the digest in a 64-octet large buffer, denoted h. Only the lower 32 bytes are used for generating the public key.",
      "ja": "1.ハッシュSHA-512を使用して32バイトのプライベートキー、64オクテット大きなバッファにダイジェストを格納する、示さH。唯一の下位32バイトは、公開鍵を生成するために使用されます。"
    },
    {
      "indent": 3,
      "text": "2. Prune the buffer: The lowest three bits of the first octet are cleared, the highest bit of the last octet is cleared, and the second highest bit of the last octet is set.",
      "ja": "2.バッファをプルーニング：最初のオクテットの最下位3ビットがクリアされ、最後のオクテットの最上位ビットがクリアされ、そして最後のオクテットの第二の最上位ビットがセットされます。"
    },
    {
      "indent": 3,
      "text": "3. Interpret the buffer as the little-endian integer, forming a secret scalar s. Perform a fixed-base scalar multiplication [s]B.",
      "ja": "3.秘密スカラーSを形成し、リトルエンディアン整数としてバッファを解釈。固定ベーススカラー倍算[S] Bを行います。"
    },
    {
      "indent": 3,
      "text": "4. The public key A is the encoding of the point [s]B. First, encode the y-coordinate (in the range 0 <= y < p) as a little-endian string of 32 octets. The most significant bit of the final octet is always zero. To form the encoding of the point [s]B, copy the least significant bit of the x coordinate to the most significant bit of the final octet. The result is the public key.",
      "ja": "4.公開鍵Aは点[S] Bの符号化です。まず、32オクテットのリトルエンディアンの文字列として（範囲0 <= Y <Pで）y座標を符号化します。最終オクテットの最上位ビットは常にゼロです。 、点[S] Bのエンコーディングを形成するXの最下位ビットが最後のオクテットの最上位ビットに座標をコピーします。結果は、公開鍵です。"
    },
    {
      "indent": 0,
      "text": "5.1.6. Sign",
      "section_title": true,
      "ja": "5.1.6。符号"
    },
    {
      "indent": 3,
      "text": "The inputs to the signing procedure is the private key, a 32-octet string, and a message M of arbitrary size. For Ed25519ctx and Ed25519ph, there is additionally a context C of at most 255 octets and a flag F, 0 for Ed25519ctx and 1 for Ed25519ph.",
      "ja": "署名手順への入力は、秘密鍵、32オクテットストリング、および任意の大きさのメッセージMです。 Ed25519ctxとEd25519phために、さらに最大で255オクテットフラグF、Ed25519phためEd25519ctx 0と1のコンテキストCがあります。"
    },
    {
      "indent": 3,
      "text": "1. Hash the private key, 32 octets, using SHA-512. Let h denote the resulting digest. Construct the secret scalar s from the first half of the digest, and the corresponding public key A, as described in the previous section. Let prefix denote the second half of the hash digest, h[32],...,h[63].",
      "ja": "1.ハッシュSHA-512を使用して、秘密鍵、32オクテット、。 hが得られた消化物を示すものとします。前のセクションで説明したように、ダイジェストの前半、及び対応する公開鍵Aから秘密スカラーSを構成します。プレフィックスがハッシュダイジェスト、H [32]、...、H [63]の後半を示すものとします。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHA-512(dom2(F, C) || prefix || PH(M)), where M is the message to be signed. Interpret the 64-octet digest as a little-endian integer r.",
      "ja": "Mは、署名されるべきメッセージであり、前記計算SHA-512（DOM2（F、C）|| ||プレフィックスPH（M））。リトルエンディアン整数rとして64オクテットダイジェストを解釈します。"
    },
    {
      "indent": 3,
      "text": "3. Compute the point [r]B. For efficiency, do this by first reducing r modulo L, the group order of B. Let the string R be the encoding of this point.",
      "ja": "3.ポイントを計算し、[R] B。効率のために、第1のRモジュロLを減少させることによってこれを行うため、Bのグループの順序は、文字列Rは、この点のエンコーディングとします。"
    },
    {
      "indent": 3,
      "text": "4. Compute SHA512(dom2(F, C) || R || A || PH(M)), and interpret the 64-octet digest as a little-endian integer k.",
      "ja": "4.計算SHA512（DOM2（F、C）|| || R A || PH（M））、および64オクテットがリトルエンディアン整数kとしてダイジェスト解釈。"
    },
    {
      "indent": 3,
      "text": "5. Compute S = (r + k * s) mod L. For efficiency, again reduce k modulo L first.",
      "ja": "効率5.計算S =（R + K *秒）MOD L.は、再び最初のk個のモジュロLを減少させます。"
    },
    {
      "indent": 3,
      "text": "6. Form the signature of the concatenation of R (32 octets) and the little-endian encoding of S (32 octets; the three most significant bits of the final octet are always zero).",
      "ja": "前記Rの連結（32オクテット）とSのリトルエンディアンエンコーディングの署名フォーム（32オクテット;最終オクテットの3つの最上位ビットは常にゼロです）。"
    },
    {
      "indent": 0,
      "text": "5.1.7. Verify",
      "section_title": true,
      "ja": "5.1.7。検証します"
    },
    {
      "indent": 3,
      "text": "1. To verify a signature on a message M using public key A, with F being 0 for Ed25519ctx, 1 for Ed25519ph, and if Ed25519ctx or Ed25519ph is being used, C being the context, first split the signature into two 32-octet halves. Decode the first half as a point R, and the second half as an integer S, in the range 0 <= s < L. Decode the public key A as point A'. If any of the decodings fail (including S being out of range), the signature is invalid.",
      "ja": "1. FはEd25519ctx、Ed25519ph 1 0であると、公開鍵Aを使用して、メッセージMの署名を検証し、そしてEd25519ctx又はEd25519phが使用されている場合、Cは、文脈であり、最初の2つの32オクテットの半分に署名を分割します。点Rとして前半を復号し、範囲内の整数S、0 <= sの<L.デコード点A」と公開鍵Aとして後半。デコーディングのいずれかが（範囲外であるSを含む）失敗した場合、署名は無効です。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHA512(dom2(F, C) || R || A || PH(M)), and interpret the 64-octet digest as a little-endian integer k.",
      "ja": "2.計算SHA512（DOM2（F、C）|| || R A || PH（M））、および64オクテットがリトルエンディアン整数kとしてダイジェスト解釈。"
    },
    {
      "indent": 3,
      "text": "3. Check the group equation [8][S]B = [8]R + [8][k]A'. It's sufficient, but not required, to instead check [S]B = R + [k]A'.",
      "ja": "3.グループ式[8] [S] B = [8] R + [8] [k]のA」を確認してください。その代わりに[S] B = R + [K] A」を確認するために、十分だが、必須ではありません。"
    },
    {
      "indent": 0,
      "text": "5.2. Ed448ph and Ed448",
      "section_title": true,
      "ja": "5.2。 Ed448phとEd448"
    },
    {
      "indent": 3,
      "text": "Ed448 is EdDSA instantiated with:",
      "ja": "Ed448はエドワーズ曲線デジタル署名アルゴリズムを使用してインスタンス化されます。"
    },
    {
      "indent": 3,
      "text": "+-----------+-------------------------------------------------------+\n| Parameter | Value                                                 |\n+-----------+-------------------------------------------------------+\n|     p     | p of edwards448 in [RFC7748] (i.e., 2^448 - 2^224 -   |\n|           | 1)                                                    |\n|     b     | 456                                                   |\n|  encoding | 455-bit little-endian encoding of {0, 1, ..., p-1}    |\n|  of GF(p) |                                                       |\n|    H(x)   | SHAKE256(dom4(phflag,context)||x, 114)                |\n|   phflag  | 0                                                     |\n|     c     | base 2 logarithm of cofactor of edwards448 in         |\n|           | [RFC7748] (i.e., 2)                                   |\n|     n     | 447                                                   |\n|     d     | d of edwards448 in [RFC7748] (i.e., -39081)           |\n|     a     | 1                                                     |\n|     B     | (X(P),Y(P)) of edwards448 in [RFC7748] (i.e., (224580 |\n|           | 04029592430018760433409989603624678964163256413424612 |\n|           | 54616869504154674060329090291928693579532825780320751 |\n|           | 46446173674602635247710, 2988192100784814926760179304 |\n|           | 43930673437544040154080242095928241372331506189835876 |\n|           | 00353687865541878473398230323350346250053154506283266 |\n|           | 0))                                                   |\n|     L     | order of edwards448 in [RFC7748] (i.e., 2^446 - 13818 |\n|           | 06680989511535200738674851542688033669247488217860989 |\n|           | 4547503885).                                          |\n|   PH(x)   | x (i.e., the identity function)                       |\n+-----------+-------------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 23,
      "text": "Table 2: Parameters of Ed448",
      "ja": "表2：Ed448のパラメータ"
    },
    {
      "indent": 3,
      "text": "Ed448ph is the same but with PH being SHAKE256(x, 64) and phflag being 1, i.e., the input is hashed before signing with Ed448 with a hash constant modified.",
      "ja": "Ed448phは同じであるが、PHがSHAKE256（X、64）であるとphflagが1であると、すなわち、入力が変更ハッシュ定数でEd448で署名する前にハッシュされます。"
    },
    {
      "indent": 3,
      "text": "Value of context is set by signer and verifier (maximum of 255 octets; the default is empty string) and has to match octet by octet for verification to be successful.",
      "ja": "コンテキストの値は、署名者と検証者によって設定される（255オクテットの最大値、デフォルトは空の文字列である）、および検証が成功するためのオクテットによってオクテットと一致しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The curve is equivalent to Ed448-Goldilocks under change of the basepoint, which preserves difficulty of the discrete logarithm.",
      "ja": "曲線は、離散対数の困難を保存基点の変化下Ed448-びきと等価です。"
    },
    {
      "indent": 0,
      "text": "5.2.1. Modular Arithmetic",
      "section_title": true,
      "ja": "5.2.1。モジュラー演算"
    },
    {
      "indent": 3,
      "text": "For advice on how to implement arithmetic modulo p = 2^448 - 2^224 - 1 efficiently and securely, see [ED448]. For inversion modulo p, it is recommended to use the identity x^-1 = x^(p-2) (mod p). Inverting zero should never happen, as it would require invalid input, which would have been detected before, or would be a calculation error.",
      "ja": "2 ^ 224  -   -  = 2 ^ 448算術モジュロpを実装する方法のアドバイスを1効率的かつ確実に、[ED448]を参照。反転モジュロpについて、x ^ -1 = X ^（P-2）（MOD p）のアイデンティティを使用することが推奨されます。それは以前に検出されていた、または計算エラーになり、無効な入力を、必要になるようにゼロを反転させると、発生しません。"
    },
    {
      "indent": 3,
      "text": "For point decoding or \"decompression\", square roots modulo p are needed. They can be computed by first computing candidate root x = a ^ (p+1)/4 (mod p) and then checking if x^2 = a. If it is, then x is the square root of a; if it isn't, then a does not have a square root.",
      "ja": "ポイントデコードや「解凍」、平方根の剰余Pのために必要とされます。これらは、第1の演算候補ルートX = A ^（P + 1）/ 4（MOD p）を、次いで、X ^ 2 =かどうかをチェックすることによって計算することができます。そうである場合、xはの平方根です。そうでない場合は、平方根を持っていません。"
    },
    {
      "indent": 0,
      "text": "5.2.2. Encoding",
      "section_title": true,
      "ja": "5.2.2。エンコーディング"
    },
    {
      "indent": 3,
      "text": "All values are coded as octet strings, and integers are coded using little-endian convention, i.e., a 57-octet string h h[0],...h[56] represents the integer h[0] + 2^8 * h[1] + ... + 2^448 * h[56].",
      "ja": "すべての値は、オクテットストリングとして符号化され、整数はリトルエンディアン規則、すなわち、57オクテットストリングHH [0]、...、H [56]を使用して符号化された整数時間[0] + 2 ^ 8 * Hを表します[1] + ... + 2 ^ 448 * H [56]。"
    },
    {
      "indent": 3,
      "text": "A curve point (x,y), with coordinates in the range 0 <= x,y < p, is coded as follows. First, encode the y-coordinate as a little-endian string of 57 octets. The final octet is always zero. To form the encoding of the point, copy the least significant bit of the x-coordinate to the most significant bit of the final octet.",
      "ja": "次のように曲線の点（x、y）は、範囲0 <= xと、Y <Pの座標を用いて、符号化されます。まず、57オクテットのリトルエンディアンの文字列としてy座標を符号化します。最後のオクテットは常にゼロです。 、ポイントのエンコーディングを形成するx座標の最終オクテットの最上位ビットの最下位ビットをコピーします。"
    },
    {
      "indent": 0,
      "text": "5.2.3. Decoding",
      "section_title": true,
      "ja": "5.2.3。デコーディング"
    },
    {
      "indent": 3,
      "text": "Decoding a point, given as a 57-octet string, is a little more complicated.",
      "ja": "57オクテット文字列として与えられた点を、デコード、もう少し複雑です。"
    },
    {
      "indent": 3,
      "text": "1. First, interpret the string as an integer in little-endian representation. Bit 455 of this number is the least significant bit of the x-coordinate, and denote this value x_0. The y-coordinate is recovered simply by clearing this bit. If the resulting value is >= p, decoding fails.",
      "ja": "1.まず、リトルエンディアン表記の整数として文字列を解釈します。この数のビット455は、x座標、及びこの値X_0を表すの最下位ビットです。 y座標は、このビットをクリアすることによって簡単に回収されます。得られた値は> = Pである場合、復号化は失敗します。"
    },
    {
      "indent": 3,
      "text": "2. To recover the x-coordinate, the curve equation implies x^2 = (y^2 - 1) / (d y^2 - 1) (mod p). The denominator is always non-zero mod p. Let u = y^2 - 1 and v = d y^2 - 1. To compute the square root of (u/v), the first step is to compute the candidate root x = (u/v)^((p+1)/4). This can be done using the following trick, to use a single modular powering for both the inversion of v and the square root:",
      "ja": "（ -  1 Y ^ 2）/（DのY ^ 2  -  1）（MOD P）2 x座標を回収するために、曲線の方程式は、x ^ 2 =ことを意味します。分母は常にゼロ以外のmod Pです。 1及びv = DY ^ 2  -   -  UはY ^ 2 =ましょう（U / V）の平方根を計算するために1を、最初のステップは、候補ルートX =（U / V）^（（P +を計算することです1）/ 4）。これは、Vの逆平方根の両方のための単一のモジュール式電力供給を使用するには、次のトリックを使用して行うことができます。"
    },
    {
      "indent": 17,
      "text": "         (p+1)/4    3            (p-3)/4\nx = (u/v)        = u  v (u^5 v^3)         (mod p)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "3. If v * x^2 = u, the recovered x-coordinate is x. Otherwise, no square root exists, and the decoding fails.",
      "ja": "3. V * X ^ 2 = uの場合、回収されたx座標は、xです。そうでない場合は、平方根は存在しない、とデコードが失敗します。"
    },
    {
      "indent": 3,
      "text": "4. Finally, use the x_0 bit to select the right square root. If x = 0, and x_0 = 1, decoding fails. Otherwise, if x_0 != x mod 2, set x <-- p - x. Return the decoded point (x,y).",
      "ja": "4.最後に、右の平方根を選択するために、X_0ビットを使用します。 X = 0、及びX_0 = 1の場合、復号は失敗します。 ！そうでない場合、X_0 =×2 MOD、設定X < -  P  -  X。デコードされた点（x、y）を返します。"
    },
    {
      "indent": 0,
      "text": "5.2.4. Point Addition",
      "section_title": true,
      "ja": "5.2.4。ポイント加算"
    },
    {
      "indent": 3,
      "text": "For point addition, the following method is recommended. A point (x,y) is represented in projective coordinates (X, Y, Z), with x = X/Z, y = Y/Z.",
      "ja": "ポイント加算については、以下の方法が推奨されます。点（x、y）は、x = X / Zと、Yが= Y / Z、射影座標（X、Y、Z）で表現されます。"
    },
    {
      "indent": 3,
      "text": "The neutral point is (0,1), or equivalently in projective coordinates (0, Z, Z) for any non-zero Z.",
      "ja": "中性点は（0,1）であるか、または同等の任意の非ゼロZ.ための射影座標（0、Z、Z）に"
    },
    {
      "indent": 3,
      "text": "The following formulas for adding two points, (x3,y3) = (x1,y1)+(x2,y2) on untwisted Edwards curve (i.e., a=1) with non-square d, are described in Section 4 of [Faster-ECC] and in [EFD-ADD]. They are complete, i.e., they work for any pair of valid input points.",
      "ja": "非正方形Dで2点、無撚りエドワーズ曲線（すなわち、A = 1）上の（X3、Y3）=（X1、Y1）+（X2、Y2）を追加するための以下の式、の第4章に記載されている[高速-ECC]および[EFD-ADD]です。彼らはつまり、彼らは有効な入力点の任意のペアのために働く、完全です。"
    },
    {
      "indent": 17,
      "text": "A = Z1*Z2\nB = A^2\nC = X1*X2\nD = Y1*Y2\nE = d*C*D\nF = B-E\nG = B+E\nH = (X1+Y1)*(X2+Y2)\nX3 = A*F*(H-C-D)\nY3 = A*G*(D-C)\nZ3 = F*G",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Again, similar to the other curve, doubling formulas can be obtained by substituting equal points, turning four multiplications into squares. However, this is not even nearly optimal; the following formulas described in Section 4 of [Faster-ECC] and in [EFD-DBL] save multiple multiplications.",
      "ja": "再度、他の曲線と同様に、倍加式が正方形に4回の乗算を回し、同じ点を代入することによって得ることができます。しかし、これも、ほぼ最適ではありません。 [EFD-DBL] [速いECC]のセクション4に記載さ以下の式は、複数の乗算を保存します。"
    },
    {
      "indent": 17,
      "text": "B = (X1+Y1)^2\nC = X1^2\nD = Y1^2\nE = C+D\nH = Z1^2\nJ = E-2*H\nX3 = (B-E)*J\nY3 = E*(C-D)\nZ3 = E*J",
      "raw": true
    },
    {
      "indent": 0,
      "text": "5.2.5. Key Generation",
      "section_title": true,
      "ja": "5.2.5。キー生成"
    },
    {
      "indent": 3,
      "text": "The private key is 57 octets (456 bits, corresponding to b) of cryptographically secure random data. See [RFC4086] for a discussion about randomness.",
      "ja": "秘密鍵は、暗号化された安全なランダムデータの57個のオクテット（456ビット、Bに対応）です。ランダム性についての議論のための[RFC4086]を参照してください。"
    },
    {
      "indent": 3,
      "text": "The 57-byte public key is generated by the following steps:",
      "ja": "57バイトの公開鍵は、次の手順によって生成されます。"
    },
    {
      "indent": 3,
      "text": "1. Hash the 57-byte private key using SHAKE256(x, 114), storing the digest in a 114-octet large buffer, denoted h. Only the lower 57 bytes are used for generating the public key.",
      "ja": "1.ハッシュSHAKE256（X、114）を使用して57バイトのプライベートキー、114オクテットの大きなバッファにダイジェストを格納する、示さH。下部のみ57バイトは、公開鍵を生成するために使用されています。"
    },
    {
      "indent": 3,
      "text": "2. Prune the buffer: The two least significant bits of the first octet are cleared, all eight bits the last octet are cleared, and the highest bit of the second to last octet is set.",
      "ja": "2.プルーンバッファ：最初のオクテットの2つの最下位ビットは、すべての8ビットが最後のオクテットがクリアされ、クリアされ、そして最後のオクテット第2の最上位ビットがセットされます。"
    },
    {
      "indent": 3,
      "text": "3. Interpret the buffer as the little-endian integer, forming a secret scalar s. Perform a known-base-point scalar multiplication [s]B.",
      "ja": "3.秘密スカラーSを形成し、リトルエンディアン整数としてバッファを解釈。既知の塩基点のスカラー倍算[S] Bを行います。"
    },
    {
      "indent": 3,
      "text": "4. The public key A is the encoding of the point [s]B. First encode the y-coordinate (in the range 0 <= y < p) as a little-endian string of 57 octets. The most significant bit of the final octet is always zero. To form the encoding of the point [s]B, copy the least significant bit of the x coordinate to the most significant bit of the final octet. The result is the public key.",
      "ja": "4.公開鍵Aは点[S] Bの符号化です。最初の57オクテットのリトルエンディアンの文字列として（範囲0 <= Y <Pで）y座標を符号化します。最終オクテットの最上位ビットは常にゼロです。 、点[S] Bのエンコーディングを形成するXの最下位ビットが最後のオクテットの最上位ビットに座標をコピーします。結果は、公開鍵です。"
    },
    {
      "indent": 0,
      "text": "5.2.6. Sign",
      "section_title": true,
      "ja": "5.2.6。符号"
    },
    {
      "indent": 3,
      "text": "The inputs to the signing procedure is the private key, a 57-octet string, a flag F, which is 0 for Ed448, 1 for Ed448ph, context C of at most 255 octets, and a message M of arbitrary size.",
      "ja": "署名手順への入力は、秘密鍵、57オクテットストリング、フラグF、Ed448phためEd448、1、最大で255オクテットのコンテクストC 0であり、かつ任意の大きさのメッセージMです。"
    },
    {
      "indent": 3,
      "text": "1. Hash the private key, 57 octets, using SHAKE256(x, 114). Let h denote the resulting digest. Construct the secret scalar s from the first half of the digest, and the corresponding public key A, as described in the previous section. Let prefix denote the second half of the hash digest, h[57],...,h[113].",
      "ja": "SHAKE256（X、114）を使用して、1ハッシュの秘密鍵、57オクテット。 hが得られた消化物を示すものとします。前のセクションで説明したように、ダイジェストの前半、及び対応する公開鍵Aから秘密スカラーSを構成します。プレフィックスがハッシュダイジェスト、時間[57]、...、H [113]の後半を示すものとします。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHAKE256(dom4(F, C) || prefix || PH(M), 114), where M is the message to be signed, F is 1 for Ed448ph, 0 for Ed448, and C is the context to use. Interpret the 114-octet digest as a little-endian integer r.",
      "ja": "Mは、署名されるべきメッセージである2.計算SHAKE256（dom4（F、C）|| ||プレフィックスPH（M）、114）、FはEd448ph、Ed448 0は1であり、そしてCは、使用するコンテキストであります。リトルエンディアン整数rとして114オクテットダイジェストを解釈します。"
    },
    {
      "indent": 3,
      "text": "3. Compute the point [r]B. For efficiency, do this by first reducing r modulo L, the group order of B. Let the string R be the encoding of this point.",
      "ja": "3.ポイントを計算し、[R] B。効率のために、第1のRモジュロLを減少させることによってこれを行うため、Bのグループの順序は、文字列Rは、この点のエンコーディングとします。"
    },
    {
      "indent": 3,
      "text": "4. Compute SHAKE256(dom4(F, C) || R || A || PH(M), 114), and interpret the 114-octet digest as a little-endian integer k.",
      "ja": "4.計算SHAKE256（dom4（F、C）|| || R A || PH（M）、114）、及び114オクテットは、リトルエンディアン整数kとしてダイジェスト解釈。"
    },
    {
      "indent": 3,
      "text": "5. Compute S = (r + k * s) mod L. For efficiency, again reduce k modulo L first.",
      "ja": "効率5.計算S =（R + K *秒）MOD L.は、再び最初のk個のモジュロLを減少させます。"
    },
    {
      "indent": 3,
      "text": "6. Form the signature of the concatenation of R (57 octets) and the little-endian encoding of S (57 octets; the ten most significant bits of the final octets are always zero).",
      "ja": "前記Rの連結（57オクテット）とSのリトルエンディアンエンコーディングの署名フォーム（57オクテット;最終オクテットの10個の最上位ビットは常にゼロです）。"
    },
    {
      "indent": 0,
      "text": "5.2.7. Verify",
      "section_title": true,
      "ja": "5.2.7。検証します"
    },
    {
      "indent": 3,
      "text": "1. To verify a signature on a message M using context C and public key A, with F being 0 for Ed448 and 1 for Ed448ph, first split the signature into two 57-octet halves. Decode the first half as a point R, and the second half as an integer S, in the range 0 <= s < L. Decode the public key A as point A'. If any of the decodings fail (including S being out of range), the signature is invalid.",
      "ja": "1. FはEd448phためEd448 0および1であると、コンテキストCと公開鍵Aを使用してメッセージMに署名を検証するために、最初の二つの57オクテットの半分に署名を分割します。点Rとして前半を復号し、範囲内の整数S、0 <= sの<L.デコード点A」と公開鍵Aとして後半。デコーディングのいずれかが（範囲外であるSを含む）失敗した場合、署名は無効です。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHAKE256(dom4(F, C) || R || A || PH(M), 114), and interpret the 114-octet digest as a little-endian integer k.",
      "ja": "2.計算SHAKE256（dom4（F、C）|| || R A || PH（M）、114）、及び114オクテットは、リトルエンディアン整数kとしてダイジェスト解釈。"
    },
    {
      "indent": 3,
      "text": "3. Check the group equation [4][S]B = [4]R + [4][k]A'. It's sufficient, but not required, to instead check [S]B = R + [k]A'.",
      "ja": "3.グループ方程式[4] [S] = B [4] R + [4] [k]のA」を確認してください。その代わりに[S] B = R + [K] A」を確認するために、十分だが、必須ではありません。"
    },
    {
      "indent": 0,
      "text": "6. Ed25519 Python Illustration",
      "section_title": true,
      "ja": "6. Ed25519 Pythonのイラスト"
    },
    {
      "indent": 3,
      "text": "The rest of this section describes how Ed25519 can be implemented in Python (version 3.2 or later) for illustration. See Appendix A for the complete implementation and Appendix B for a test-driver to run it through some test vectors.",
      "ja": "このセクションの残りの部分はEd25519は例示のためのPython（バージョン3.2以降）に実装することができる方法について説明します。いくつかのテストベクトルを通してそれを実行するためのテスト・ドライバーのための完全な実装および付録Bは、付録Aを参照してください。"
    },
    {
      "indent": 3,
      "text": "Note that this code is not intended for production as it is not proven to be correct for all inputs, nor does it protect against side-channel attacks. The purpose is to illustrate the algorithm to help implementers with their own implementation.",
      "ja": "すべての入力のために正しいことが証明されていないとして、このコードは生産のために意図されていないことに注意してください、またそれは、サイドチャネル攻撃から守るん。目的は、独自の実装と実装を支援するためのアルゴリズムを説明することです。"
    },
    {
      "indent": 0,
      "text": "## First, some preliminaries that will be needed.",
      "ja": "##必要とされるであろう第一に、いくつかの予選が。"
    },
    {
      "indent": 0,
      "text": "import hashlib",
      "ja": "輸入hashlib"
    },
    {
      "indent": 0,
      "text": "def sha512(s): return hashlib.sha512(s).digest()",
      "ja": "デフSHA512（S）：リターンhashlib.sha512（S）.digest（）"
    },
    {
      "indent": 0,
      "text": "# Base field Z_p p = 2**255 - 19",
      "ja": "19  - ＃ベースフィールドZ_pのP = 2 ** 255"
    },
    {
      "indent": 0,
      "text": "def modp_inv(x): return pow(x, p-2, p)",
      "ja": "DEF modp_inv（X）：戻りPOW（X、P-2、P）"
    },
    {
      "indent": 0,
      "text": "# Curve constant d = -121665 * modp_inv(121666) % p",
      "ja": "＃曲線定数d = -121665 * modp_inv（121666）％のP"
    },
    {
      "indent": 0,
      "text": "# Group order q = 2**252 + 27742317777372353535851937790883648493",
      "ja": "＃グループの次数q = 2 ** 252 + 27742317777372353535851937790883648493"
    },
    {
      "indent": 0,
      "text": "def sha512_modq(s): return int.from_bytes(sha512(s), \"little\") % q",
      "ja": "デフsha512_modq（S）：リターンint.from_bytes（SHA512（複数可）、 \"少し\"）％qを"
    },
    {
      "indent": 0,
      "text": "## Then follows functions to perform point operations.",
      "ja": "##そして小数点演算を実行する関数に従います。"
    },
    {
      "indent": 0,
      "text": "# Points are represented as tuples (X, Y, Z, T) of extended # coordinates, with x = X/Z, y = Y/Z, x*y = T/Z",
      "ja": "＃ポイントは、x = X / Z、Yが= Y / Z、Xの*はY = T / Zと、拡張＃座標の組（X、Y、Z、T）として表され"
    },
    {
      "indent": 0,
      "text": "def point_add(P, Q):\n    A, B = (P[1]-P[0]) * (Q[1]-Q[0]) % p, (P[1]+P[0]) * (Q[1]+Q[0]) % p;\n    C, D = 2 * P[3] * Q[3] * d % p, 2 * P[2] * Q[2] % p;\n    E, F, G, H = B-A, D-C, D+C, B+A;\n    return (E*F, G*H, F*G, E*H);",
      "raw": true
    },
    {
      "indent": 0,
      "text": "# Computes Q = s * Q def point_mul(s, P): Q = (0, 1, 1, 0) # Neutral element while s > 0: if s & 1: Q = point_add(Q, P) P = point_add(P, P) s >>= 1 return Q",
      "ja": "＃は、Q = Sでを計算* Qのデフpoint_mul（S、P）：Q =（0、1、1、0）＃中性元素つつS> 0であれば、S＆1：Q = point_add（Q、P）P = point_add （P、P）S >> = 1つの戻りQ"
    },
    {
      "indent": 0,
      "text": "def point_equal(P, Q): # x1 / z1 == x2 / z2 <==> x1 * z2 == x2 * z1 if (P[0] * Q[2] - Q[0] * P[2]) % p != 0: return False if (P[1] * Q[2] - Q[1] * P[2]) % p != 0: return False return True",
      "ja": "DEF point_equal（P、Q）：＃1 X1 / Z1 == X2 / Z2 <==> X1 * Z2 == X2 * Z1 IF（P [0] * Q [2]  -  Q [0] * P [2] ）は％p = 0：もし（P [1] * Q [2] Falseを返します -  Q [1] * P [2]）は％p = 0！：偽リターンがTrueを返します"
    },
    {
      "indent": 0,
      "text": "## Now follows functions for point compression.",
      "ja": "##今ポイント圧縮のための機能を、次の。"
    },
    {
      "indent": 0,
      "text": "# Square root of -1 modp_sqrt_m1 = pow(2, (p-1) // 4, p)",
      "ja": "-1 modp_sqrt_m1 = POW＃平方根（2、（P-1）// 4、P）"
    },
    {
      "indent": 0,
      "text": "# Compute corresponding x-coordinate, with low bit corresponding to # sign, or return None on failure def recover_x(y, sign): if y >= p: return None x2 = (y*y-1) * modp_inv(d*y*y+1) if x2 == 0: if sign: return None else: return 0",
      "ja": "＃計算低いビットは＃記号に対応し、x座標、または失敗デフrecover_x（Y、記号）にNoneを返し、対応する：もしY> = P：戻りなしX2 =（Y軸* Y-1）* modp_inv（D * y * yを+ 1）×2 == 0の場合：記号場合：他にNoneを返します。return 0"
    },
    {
      "indent": 4,
      "text": "# Compute square root of x2\nx = pow(x2, (p+3) // 8, p)\nif (x*x - x2) % p != 0:\n    x = x * modp_sqrt_m1 % p\nif (x*x - x2) % p != 0:\n    return None",
      "raw": true
    },
    {
      "indent": 4,
      "text": "if (x & 1) != sign: x = p - x return x",
      "ja": "！（X＆1）の場合=記号：X = P  -  XのリターンX"
    },
    {
      "indent": 0,
      "text": "# Base point g_y = 4 * modp_inv(5) % p g_x = recover_x(g_y, 0) G = (g_x, g_y, 1, g_x * g_y % p)",
      "ja": "＃基点g_y = 4 * modp_inv（5）％P g_x = recover_x（g_y、0）G =（g_x、g_y、1、g_x * g_yの％のP）"
    },
    {
      "indent": 0,
      "text": "def point_compress(P): zinv = modp_inv(P[2]) x = P[0] * zinv % p y = P[1] * zinv % p return int.to_bytes(y | ((x & 1) << 255), 32, \"little\")",
      "ja": "DEF point_compress（P）：ZINV = modp_inv（P [2]）は、x = P [0] * ZINV％PY = P [1] * ZINV％のPリターンint.to_bytes（Y |（（X＆1）<< 255 ））、32、 \"小さな\""
    },
    {
      "indent": 0,
      "text": "def point_decompress(s): if len(s) != 32: raise Exception(\"Invalid input length for decompression\") y = int.from_bytes(s, \"little\") sign = y >> 255 y &= (1 << 255) - 1",
      "ja": "デフpoint_decompress（S）：もしLEN（S）= 32：！例外（ \"解凍のための無効な入力長\"）は、y = int.from_bytes上げる（複数可、 \"少し\"）記号= Y >> 255 Y＆=（1 < <255） -  1"
    },
    {
      "indent": 4,
      "text": "x = recover_x(y, sign)\nif x is None:\n    return None\nelse:\n    return (x, y, 1, x*y % p)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "## These are functions for manipulating the private key.",
      "ja": "##これらは、秘密鍵を操作するための機能です。"
    },
    {
      "indent": 0,
      "text": "def secret_expand(secret): if len(secret) != 32: raise Exception(\"Bad size of private key\") h = sha512(secret) a = int.from_bytes(h[:32], \"little\") a &= (1 << 254) - 8 a |= (1 << 254) return (a, h[32:])",
      "ja": "デフsecret_expand（秘密）：もし（秘密）LEN = 32：！例外（ \"秘密鍵の悪いサイズ\"）、H = SHA512（秘密）A = int.from_bytes上げる（[：32]時間を、 \"少し\"）A＆ =（1 << 254） -  8 | =（1 << 254）リターン（H [32：]）"
    },
    {
      "indent": 0,
      "text": "def secret_to_public(secret): (a, dummy) = secret_expand(secret) return point_compress(point_mul(a, G))",
      "ja": "DEF secret_to_public（秘密）：（ダミー）= secret_expand（秘密）リターンpoint_compress（point_mul（G））"
    },
    {
      "indent": 0,
      "text": "## The signature function works as below.",
      "ja": "##署名機能は、以下のように動作します。"
    },
    {
      "indent": 0,
      "text": "def sign(secret, msg): a, prefix = secret_expand(secret) A = point_compress(point_mul(a, G)) r = sha512_modq(prefix + msg) R = point_mul(r, G) Rs = point_compress(R) h = sha512_modq(Rs + A + msg) s = (r + h * a) % q return Rs + int.to_bytes(s, 32, \"little\")",
      "ja": "DEF署名（秘密、MSG）、接頭辞= secret_expand（秘密）A = point_compress（point_mul（G））、R = sha512_modq（接頭辞+ MSG）R = point_mul（R、G）は、RS = point_compress（R）H = sha512_modq（RS + A + MSG）S =（R + H * A）％Qは戻り値Rs + int.to_bytes（S、32、 \"少し\"）"
    },
    {
      "indent": 0,
      "text": "## And finally the verification function.",
      "ja": "##そして最後に検証機能。"
    },
    {
      "indent": 0,
      "text": "def verify(public, msg, signature): if len(public) != 32: raise Exception(\"Bad public key length\") if len(signature) != 64: Exception(\"Bad signature length\") A = point_decompress(public) if not A: return False Rs = signature[:32] R = point_decompress(Rs) if not R: return False s = int.from_bytes(signature[32:], \"little\") if s >= q: return False h = sha512_modq(Rs + public + msg) sB = point_mul(s, G) hA = point_mul(h, A) return point_equal(sB, point_add(R, hA))",
      "ja": "デフ検証（公開、MSG、署名）：lenの場合（パブリック）= 32：！lenの場合は例外（ \"バッド公開鍵の長さ\"）を上げる（署名）= 64：！例外（ \"バッド署名長\"）A = point_decompress（パブリック）ではない場合：戻り：S> = Qあれば、 \"少し\"）[32] R = point_decompress（RS）ではないR場合：偽Sを返す=のint.from_bytes（署名[32]偽ルピー=署名を返します偽H = sha512_modq（RS +パブリック+のMSG）SB = point_mul（S、G）のhA = point_mul（H、A）リターンpoint_equal（SB、point_add（R、HA））"
    },
    {
      "indent": 0,
      "text": "7. Test Vectors",
      "section_title": true,
      "ja": "7.テストベクトル"
    },
    {
      "indent": 3,
      "text": "This section contains test vectors for Ed25519ph, Ed25519ctx, Ed448ph, Ed25519, and Ed448.",
      "ja": "このセクションではEd25519ph、Ed25519ctx、Ed448ph、Ed25519、およびEd448のためのテストベクトルが含まれています。"
    },
    {
      "indent": 3,
      "text": "Each section contains a sequence of test vectors. The octets are hex encoded, and whitespace is inserted for readability. Ed25519, Ed25519ctx, and Ed25519ph private and public keys are 32 octets; signatures are 64 octets. Ed448 and Ed448ph private and public keys are 57 octets; signatures are 114 octets. Messages are of arbitrary length. If the context is non-empty, it is given as 1-255 octets.",
      "ja": "各セクションでは、テストベクトルのシーケンスが含まれています。オクテットは進エンコードされ、そして空白は読みやすくするために挿入されています。 Ed25519、Ed25519ctx、およびEd25519ph秘密鍵と公開鍵は32オクテットです。署名は64オクテットです。 Ed448とEd448ph秘密鍵と公開鍵は57オクテットです。署名は114オクテットです。メッセージは、任意の長さのものです。コンテキストが空でない場合、それは1〜255個のオクテットとして与えられています。"
    },
    {
      "indent": 0,
      "text": "7.1. Test Vectors for Ed25519",
      "section_title": true,
      "ja": "7.1。 Ed25519のためのテストベクトル"
    },
    {
      "indent": 3,
      "text": "These test vectors are taken from [ED25519-TEST-VECTORS] (but we removed the public key as a suffix of the private key and removed the message from the signature) and [ED25519-LIBGCRYPT-TEST-VECTORS].",
      "ja": "これらテストベクトルは[ED25519-TESTベクトル〕から取られた（私たちは、秘密鍵の接尾辞として公開鍵を取り出し、署名からメッセージを除去）および[ED25519-あるlibgcrypt-TESTベクトル]れます。"
    },
    {
      "indent": 3,
      "text": "-----TEST 1",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "ja": "アルゴリズム：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 9d61b19deffd5a60ba844af492ec2cc4 4449c5697b326919703bac031cae7f60",
      "ja": "SECRET KEY：9d61b19deffd5a60ba844af492ec2cc4 4449c5697b326919703bac031cae7f60"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: d75a980182b10ab7d54bfed3c964073a 0ee172f3daa62325af021a68f707511a",
      "ja": "PUBLIC KEY：d75a980182b10ab7d54bfed3c964073aの0ee172f3daa62325af021a68f707511a"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 0 bytes):",
      "ja": "MESSAGE（長さ0バイト）："
    },
    {
      "indent": 3,
      "text": "SIGNATURE: e5564300c360ac729086e2cc806e828a 84877f1eb8e5d974d873e06522490155 5fb8821590a33bacc61e39701cf9b46b d25bf5f0595bbe24655141438e7a100b",
      "ja": "SIGNATURE：e5564300c360ac729086e2cc806e828a 84877f1eb8e5d974d873e06522490155 5fb8821590a33bacc61e39701cf9b46b d25bf5f0595bbe24655141438e7a100b"
    },
    {
      "indent": 3,
      "text": "-----TEST 2",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "ja": "アルゴリズム：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 4ccd089b28ff96da9db6c346ec114e0f 5b8a319f35aba624da8cf6ed4fb8a6fb",
      "ja": "SECRET KEY：4ccd089b28ff96da9db6c346ec114e0f 5b8a319f35aba624da8cf6ed4fb8a6fb"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 3d4017c3e843895a92b70aa74d1b7ebc 9c982ccf2ec4968cc0cd55f12af4660c",
      "ja": "PUBLIC KEY：3d4017c3e843895a92b70aa74d1b7ebc 9c982ccf2ec4968cc0cd55f12af4660c"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1 byte): 72",
      "ja": "MESSAGE（長さ1バイト）：72"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 92a009a9f0d4cab8720e820b5f642540 a2b27b5416503f8fb3762223ebdb69da 085ac1e43e15996e458f3613d0f11d8c 387b2eaeb4302aeeb00d291612bb0c00",
      "ja": "SIGNATURE：92a009a9f0d4cab8720e820b5f642540 a2b27b5416503f8fb3762223ebdb69da 085ac1e43e15996e458f3613d0f11d8c 387b2eaeb4302aeeb00d291612bb0c00"
    },
    {
      "indent": 3,
      "text": "-----TEST 3",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "ja": "アルゴリズム：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: c5aa8df43f9f837bedb7442f31dcb7b1 66d38535076f094b85ce3a2e0b4458f7",
      "ja": "SECRET KEY：c5aa8df43f9f837bedb7442f31dcb7b1 66d38535076f094b85ce3a2e0b4458f7"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: fc51cd8e6218a1a38da47ed00230f058 0816ed13ba3303ac5deb911548908025",
      "ja": "PUBLIC KEY：fc51cd8e6218a1a38da47ed00230f058 0816ed13ba3303ac5deb911548908025"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 2 bytes): af82",
      "ja": "MESSAGE（長さ2バイト）：af82"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 6291d657deec24024827e69c3abe01a3 0ce548a284743a445e3680d7db5ac3ac 18ff9b538d16f290ae67f760984dc659 4a7c15e9716ed28dc027beceea1ec40a",
      "ja": "SIGNATURE：6291d657deec24024827e69c3abe01a3 0ce548a284743a445e3680d7db5ac3ac 18ff9b538d16f290ae67f760984dc659 4a7c15e9716ed28dc027beceea1ec40a"
    },
    {
      "indent": 3,
      "text": "-----TEST 1024",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "ja": "アルゴリズム：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: f5e5767cf153319517630f226876b86c 8160cc583bc013744c6bf255f5cc0ee5",
      "ja": "SECRET KEY：f5e5767cf153319517630f226876b86c 8160cc583bc013744c6bf255f5cc0ee5"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 278117fc144c72340f67d0f2316e8386 ceffbf2b2428c9c51fef7c597f1d426e",
      "ja": "PUBLIC KEY：278117fc144c72340f67d0f2316e8386 ceffbf2b2428c9c51fef7c597f1d426e"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1023 bytes): 08b8b2b733424243760fe426a4b54908 632110a66c2f6591eabd3345e3e4eb98 fa6e264bf09efe12ee50f8f54e9f77b1 e355f6c50544e23fb1433ddf73be84d8 79de7c0046dc4996d9e773f4bc9efe57 38829adb26c81b37c93a1b270b20329d 658675fc6ea534e0810a4432826bf58c 941efb65d57a338bbd2e26640f89ffbc 1a858efcb8550ee3a5e1998bd177e93a 7363c344fe6b199ee5d02e82d522c4fe ba15452f80288a821a579116ec6dad2b 3b310da903401aa62100ab5d1a36553e",
      "ja": "MESSAGE（長さ1023バイト）：08b8b2b733424243760fe426a4b54908 632110a66c2f6591eabd3345e3e4eb98 fa6e264bf09efe12ee50f8f54e9f77b1 e355f6c50544e23fb1433ddf73be84d8 79de7c0046dc4996d9e773f4bc9efe57 38829adb26c81b37c93a1b270b20329d 658675fc6ea534e0810a4432826bf58c 941efb65d57a338bbd2e26640f89ffbc 1a858efcb8550ee3a5e1998bd177e93a 7363c344fe6b199ee5d02e82d522c4fe ba15452f80288a821a579116ec6dad2b 3b310da903401aa62100ab5d1a36553e"
    },
    {
      "indent": 3,
      "text": "06203b33890cc9b832f79ef80560ccb9 a39ce767967ed628c6ad573cb116dbef efd75499da96bd68a8a97b928a8bbc10 3b6621fcde2beca1231d206be6cd9ec7 aff6f6c94fcd7204ed3455c68c83f4a4 1da4af2b74ef5c53f1d8ac70bdcb7ed1 85ce81bd84359d44254d95629e9855a9 4a7c1958d1f8ada5d0532ed8a5aa3fb2 d17ba70eb6248e594e1a2297acbbb39d 502f1a8c6eb6f1ce22b3de1a1f40cc24 554119a831a9aad6079cad88425de6bd e1a9187ebb6092cf67bf2b13fd65f270 88d78b7e883c8759d2c4f5c65adb7553 878ad575f9fad878e80a0c9ba63bcbcc 2732e69485bbc9c90bfbd62481d9089b eccf80cfe2df16a2cf65bd92dd597b07 07e0917af48bbb75fed413d238f5555a 7a569d80c3414a8d0859dc65a46128ba b27af87a71314f318c782b23ebfe808b 82b0ce26401d2e22f04d83d1255dc51a ddd3b75a2b1ae0784504df543af8969b e3ea7082ff7fc9888c144da2af58429e c96031dbcad3dad9af0dcbaaaf268cb8 fcffead94f3c7ca495e056a9b47acdb7 51fb73e666c6c655ade8297297d07ad1 ba5e43f1bca32301651339e22904cc8c 42f58c30c04aafdb038dda0847dd988d cda6f3bfd15c4b4c4525004aa06eeff8 ca61783aacec57fb3d1f92b0fe2fd1a8 5f6724517b65e614ad6808d6f6ee34df f7310fdc82aebfd904b01e1dc54b2927 094b2db68d6f903b68401adebf5a7e08 d78ff4ef5d63653a65040cf9bfd4aca7 984a74d37145986780fc0b16ac451649 de6188a7dbdf191f64b5fc5e2ab47b57 f7f7276cd419c17a3ca8e1b939ae49e4 88acba6b965610b5480109c8b17b80e1 b7b750dfc7598d5d5011fd2dcc5600a3 2ef5b52a1ecc820e308aa342721aac09 43bf6686b64b2579376504ccc493d97e 6aed3fb0f9cd71a43dd497f01f17c0e2 cb3797aa2a2f256656168e6c496afc5f b93246f6b1116398a346f1a641f3b041 e989f7914f90cc2c7fff357876e506b5 0d334ba77c225bc307ba537152f3f161 0e4eafe595f6d9d90d11faa933a15ef1 369546868a7f3a45a96768d40fd9d034 12c091c6315cf4fde7cb68606937380d b2eaaa707b4c4185c32eddcdd306705e 4dc1ffc872eeee475a64dfac86aba41c 0618983f8741c5ef68d3a101e8a3b8ca c60c905c15fc910840b94c00a0b9d0",
      "ja": "06203b33890cc9b832f79ef80560ccb9 a39ce767967ed628c6ad573cb116dbef efd75499da96bd68a8a97b928a8bbc10 3b6621fcde2beca1231d206be6cd9ec7 aff6f6c94fcd7204ed3455c68c83f4a4 1da4af2b74ef5c53f1d8ac70bdcb7ed1 85ce81bd84359d44254d95629e9855a9 4a7c1958d1f8ada5d0532ed8a5aa3fb2 d17ba70eb6248e594e1a2297acbbb39d 502f1a8c6eb6f1ce22b3de1a1f40cc24 554119a831a9aad6079cad88425de6bd e1a9187ebb6092cf67bf2b13fd65f270 88d78b7e883c8759d2c4f5c65adb7553 878ad575f9fad878e80a0c9ba63bcbcc 2732e69485bbc9c90bfbd62481d9089b eccf80cfe2df16a2cf65bd92dd597b07 07e0917af48bbb75fed413d238f5555a 7a569d80c3414a8d0859dc65a46128ba b27af87a71314f318c782b23ebfe808b 82b0ce26401d2e22f04d83d1255dc51a ddd3b75a2b1ae0784504df543af8969b e3ea7082ff7fc9888c144da2af58429e c96031dbcad3dad9af0dcbaaaf268cb8 fcffead94f3c7ca495e056a9b47acdb7 51fb73e666c6c655ade8297297d07ad1 ba5e43f1bca32301651339e22904cc8c 42f58c30c04aafdb038dda0847dd988d cda6f3bfd15c4b4c4525004aa06eeff8 ca61783aacec57fb3d1f92b0fe2fd1a8 5f6724517b65e614ad6808d6f6ee34df f7310fdc82 aebfd904b01e1dc54b2927 094b2db68d6f903b68401adebf5a7e08 d78ff4ef5d63653a65040cf9bfd4aca7 984a74d37145986780fc0b16ac451649 de6188a7dbdf191f64b5fc5e2ab47b57 f7f7276cd419c17a3ca8e1b939ae49e4 88acba6b965610b5480109c8b17b80e1 b7b750dfc7598d5d5011fd2dcc5600a3 2ef5b52a1ecc820e308aa342721aac09 43bf6686b64b2579376504ccc493d97e 6aed3fb0f9cd71a43dd497f01f17c0e2 cb3797aa2a2f256656168e6c496afc5f b93246f6b1116398a346f1a641f3b041 e989f7914f90cc2c7fff357876e506b5 0d334ba77c225bc307ba537152f3f161 0e4eafe595f6d9d90d11faa933a15ef1 369546868a7f3a45a96768d40fd9d034 12c091c6315cf4fde7cb68606937380d b2eaaa707b4c4185c32eddcdd306705e 4dc1ffc872eeee475a64dfac86aba41c 0618983f8741c5ef68d3a101e8a3b8ca c60c905c15fc910840b94c00a0b9d0"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 0aab4c900501b3e24d7cdf4663326a3a 87df5e4843b2cbdb67cbf6e460fec350 aa5371b1508f9f4528ecea23c436d94b 5e8fcd4f681e30a6ac00a9704a188a03",
      "ja": "SIGNATURE：0aab4c900501b3e24d7cdf4663326a3a 87df5e4843b2cbdb67cbf6e460fec350 aa5371b1508f9f4528ecea23c436d94b 5e8fcd4f681e30a6ac00a9704a188a03"
    },
    {
      "indent": 3,
      "text": "-----TEST SHA(abc)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "ja": "アルゴリズム：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42",
      "ja": "SECRET KEY：833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: ec172b93ad5e563bf4932c70e1245034 c35467ef2efd4d64ebf819683467e2bf",
      "ja": "PUBLIC KEY：ec172b93ad5e563bf4932c70e1245034 c35467ef2efd4d64ebf819683467e2bf"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 64 bytes): ddaf35a193617abacc417349ae204131 12e6fa4e89a97ea20a9eeee64b55d39a 2192992a274fc1a836ba3c23a3feebbd 454d4423643ce80e2a9ac94fa54ca49f",
      "ja": "MESSAGE（長さ64バイト）：ddaf35a193617abacc417349ae204131 12e6fa4e89a97ea20a9eeee64b55d39a 2192992a274fc1a836ba3c23a3feebbd 454d4423643ce80e2a9ac94fa54ca49f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\ndc2a4459e7369633a52b1bf277839a00\n201009a3efbf3ecb69bea2186c26b589\n09351fc9ac90b3ecfdfbc7c66431e030\n3dca179c138ac17ad9bef1177331a704\n-----",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7.2. Test Vectors for Ed25519ctx",
      "section_title": true,
      "ja": "7.2。 Ed25519ctxのためのテストベクトル"
    },
    {
      "indent": 3,
      "text": "-----foo",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "ja": "アルゴリズム：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 0305334e381af78f141cb666f6199f57 bc3495335a256a95bd2a55bf546663f6",
      "ja": "SECRET KEY：0305334e381af78f141cb666f6199f57 bc3495335a256a95bd2a55bf546663f6"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: dfc9425e4f968f7f0c29f0259cf5f9ae d6851c2bb4ad8bfb860cfee0ab248292",
      "ja": "PUBLIC KEY：dfc9425e4f968f7f0c29f0259cf5f9ae d6851c2bb4ad8bfb860cfee0ab248292"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes): f726936d19c800494e3fdaff20b276a8",
      "ja": "MESSAGE（長さ16バイト）：f726936d19c800494e3fdaff20b276a8"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "ja": "CONTEXT：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 55a4cc2f70a54e04288c5f4cd1e45a7b b520b36292911876cada7323198dd87a 8b36950b95130022907a7fb7c4e9b2d5 f6cca685a587b4b21f4b888e4e7edb0d",
      "ja": "SIGNATURE：55a4cc2f70a54e04288c5f4cd1e45a7b b520b36292911876cada7323198dd87a 8b36950b95130022907a7fb7c4e9b2d5 f6cca685a587b4b21f4b888e4e7edb0d"
    },
    {
      "indent": 3,
      "text": "-----bar",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "ja": "アルゴリズム：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 0305334e381af78f141cb666f6199f57 bc3495335a256a95bd2a55bf546663f6",
      "ja": "SECRET KEY：0305334e381af78f141cb666f6199f57 bc3495335a256a95bd2a55bf546663f6"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: dfc9425e4f968f7f0c29f0259cf5f9ae d6851c2bb4ad8bfb860cfee0ab248292",
      "ja": "PUBLIC KEY：dfc9425e4f968f7f0c29f0259cf5f9ae d6851c2bb4ad8bfb860cfee0ab248292"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes): f726936d19c800494e3fdaff20b276a8",
      "ja": "MESSAGE（長さ16バイト）：f726936d19c800494e3fdaff20b276a8"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 626172",
      "ja": "CONTEXT：626172"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: fc60d5872fc46b3aa69f8b5b4351d580 8f92bcc044606db097abab6dbcb1aee3 216c48e8b3b66431b5b186d1d28f8ee1 5a5ca2df6668346291c2043d4eb3e90d",
      "ja": "SIGNATURE：fc60d5872fc46b3aa69f8b5b4351d580 8f92bcc044606db097abab6dbcb1aee3 216c48e8b3b66431b5b186d1d28f8ee1 5a5ca2df6668346291c2043d4eb3e90d"
    },
    {
      "indent": 3,
      "text": "-----foo2",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "ja": "アルゴリズム：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 0305334e381af78f141cb666f6199f57 bc3495335a256a95bd2a55bf546663f6",
      "ja": "SECRET KEY：0305334e381af78f141cb666f6199f57 bc3495335a256a95bd2a55bf546663f6"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: dfc9425e4f968f7f0c29f0259cf5f9ae d6851c2bb4ad8bfb860cfee0ab248292",
      "ja": "PUBLIC KEY：dfc9425e4f968f7f0c29f0259cf5f9ae d6851c2bb4ad8bfb860cfee0ab248292"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes): 508e9e6882b979fea900f62adceaca35",
      "ja": "MESSAGE（長さ16バイト）：508e9e6882b979fea900f62adceaca35"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "ja": "CONTEXT：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 8b70c1cc8310e1de20ac53ce28ae6e72 07f33c3295e03bb5c0732a1d20dc6490 8922a8b052cf99b7c4fe107a5abb5b2c 4085ae75890d02df26269d8945f84b0b",
      "ja": "SIGNATURE：8b70c1cc8310e1de20ac53ce28ae6e72 07f33c3295e03bb5c0732a1d20dc6490 8922a8b052cf99b7c4fe107a5abb5b2c 4085ae75890d02df26269d8945f84b0b"
    },
    {
      "indent": 3,
      "text": "-----foo3",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "ja": "アルゴリズム：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: ab9c2853ce297ddab85c993b3ae14bca d39b2c682beabc27d6d4eb20711d6560",
      "ja": "SECRET KEY：ab9c2853ce297ddab85c993b3ae14bca d39b2c682beabc27d6d4eb20711d6560"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 0f1d1274943b91415889152e893d80e9 3275a1fc0b65fd71b4b0dda10ad7d772",
      "ja": "PUBLIC KEY：0f1d1274943b91415889152e893d80e9 3275a1fc0b65fd71b4b0dda10ad7d772"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes): f726936d19c800494e3fdaff20b276a8",
      "ja": "MESSAGE（長さ16バイト）：f726936d19c800494e3fdaff20b276a8"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "ja": "CONTEXT：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n21655b5f1aa965996b3f97b3c849eafb\na922a0a62992f73b3d1b73106a84ad85\ne9b86a7b6005ea868337ff2d20a7f5fb\nd4cd10b0be49a68da2b2e0dc0ad8960f\n-----",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7.3. Test Vectors for Ed25519ph",
      "section_title": true,
      "ja": "7.3。 Ed25519phのためのテストベクトル"
    },
    {
      "indent": 3,
      "text": "-----TEST abc",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ph",
      "ja": "アルゴリズム：Ed25519ph"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42",
      "ja": "SECRET KEY：833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: ec172b93ad5e563bf4932c70e1245034 c35467ef2efd4d64ebf819683467e2bf",
      "ja": "PUBLIC KEY：ec172b93ad5e563bf4932c70e1245034 c35467ef2efd4d64ebf819683467e2bf"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 3 bytes): 616263",
      "ja": "MESSAGE（長さ3バイト）：616263"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n98a70222f0b8121aa9d30f813d683f80\n9e462b469c7ff87639499bb94e6dae41\n31f85042463c2a355a2003d062adf5aa\na10b8c61e636062aaad11c2a26083406\n-----",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7.4. Test Vectors for Ed448",
      "section_title": true,
      "ja": "7.4。 Ed448のためのテストベクトル"
    },
    {
      "indent": 3,
      "text": "-----Blank",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 6c82a562cb808d10d632be89c8513ebf 6c929f34ddfa8c9f63c9960ef6e348a3 528c8a3fcc2f044e39a3fc5b94492f8f 032e7549a20098f95b",
      "ja": "SECRET KEY：6c82a562cb808d10d632be89c8513ebf 6c929f34ddfa8c9f63c9960ef6e348a3 528c8a3fcc2f044e39a3fc5b94492f8f 032e7549a20098f95b"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 5fd7449b59b461fd2ce787ec616ad46a 1da1342485a70e1f8a0ea75d80e96778 edf124769b46c7061bd6783df1e50f6c d1fa1abeafe8256180",
      "ja": "PUBLIC KEY：5fd7449b59b461fd2ce787ec616ad46a 1da1342485a70e1f8a0ea75d80e96778 edf124769b46c7061bd6783df1e50f6c d1fa1abeafe8256180"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 0 bytes):",
      "ja": "MESSAGE（長さ0バイト）："
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 533a37f6bbe457251f023c0d88f976ae 2dfb504a843e34d2074fd823d41a591f 2b233f034f628281f2fd7a22ddd47d78 28c59bd0a21bfd3980ff0d2028d4b18a 9df63e006c5d1c2d345b925d8dc00b41 04852db99ac5c7cdda8530a113a0f4db b61149f05a7363268c71d95808ff2e65 2600",
      "ja": "SIGNATURE：533a37f6bbe457251f023c0d88f976ae 2dfb504a843e34d2074fd823d41a591f 2b233f034f628281f2fd7a22ddd47d78 28c59bd0a21bfd3980ff0d2028d4b18a 9df63e006c5d1c2d345b925d8dc00b41 04852db99ac5c7cdda8530a113a0f4db b61149f05a7363268c71d95808ff2e65 2600"
    },
    {
      "indent": 3,
      "text": "-----1 octet",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e",
      "ja": "SECRET KEY：c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 43ba28f430cdff456ae531545f7ecd0a c834a55d9358c0372bfa0c6c6798c086 6aea01eb00742802b8438ea4cb82169c 235160627b4c3a9480",
      "ja": "PUBLIC KEY：43ba28f430cdff456ae531545f7ecd0a c834a55d9358c0372bfa0c6c6798c086 6aea01eb00742802b8438ea4cb82169c 235160627b4c3a9480"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1 byte): 03",
      "ja": "MESSAGE（長さ1バイト）：03"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 26b8f91727bd62897af15e41eb43c377 efb9c610d48f2335cb0bd0087810f435 2541b143c4b981b7e18f62de8ccdf633 fc1bf037ab7cd779805e0dbcc0aae1cb cee1afb2e027df36bc04dcecbf154336 c19f0af7e0a6472905e799f1953d2a0f f3348ab21aa4adafd1d234441cf807c0 3a00",
      "ja": "SIGNATURE：26b8f91727bd62897af15e41eb43c377 efb9c610d48f2335cb0bd0087810f435 2541b143c4b981b7e18f62de8ccdf633 fc1bf037ab7cd779805e0dbcc0aae1cb cee1afb2e027df36bc04dcecbf154336 c19f0af7e0a6472905e799f1953d2a0f f3348ab21aa4adafd1d234441cf807c0 3a00"
    },
    {
      "indent": 3,
      "text": "-----1 octet (with context)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e",
      "ja": "SECRET KEY：c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 43ba28f430cdff456ae531545f7ecd0a c834a55d9358c0372bfa0c6c6798c086 6aea01eb00742802b8438ea4cb82169c 235160627b4c3a9480",
      "ja": "PUBLIC KEY：43ba28f430cdff456ae531545f7ecd0a c834a55d9358c0372bfa0c6c6798c086 6aea01eb00742802b8438ea4cb82169c 235160627b4c3a9480"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1 byte): 03",
      "ja": "MESSAGE（長さ1バイト）：03"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "ja": "CONTEXT：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: d4f8f6131770dd46f40867d6fd5d5055 de43541f8c5e35abbcd001b32a89f7d2 151f7647f11d8ca2ae279fb842d60721 7fce6e042f6815ea000c85741de5c8da 1144a6a1aba7f96de42505d7a7298524 fda538fccbbb754f578c1cad10d54d0d 5428407e85dcbc98a49155c13764e66c 3c00",
      "ja": "SIGNATURE：d4f8f6131770dd46f40867d6fd5d5055 de43541f8c5e35abbcd001b32a89f7d2 151f7647f11d8ca2ae279fb842d60721 7fce6e042f6815ea000c85741de5c8da 1144a6a1aba7f96de42505d7a7298524 fda538fccbbb754f578c1cad10d54d0d 5428407e85dcbc98a49155c13764e66c 3c00"
    },
    {
      "indent": 3,
      "text": "-----11 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: cd23d24f714274e744343237b93290f5 11f6425f98e64459ff203e8985083ffd f60500553abc0e05cd02184bdb89c4cc d67e187951267eb328",
      "ja": "SECRET KEY：cd23d24f714274e744343237b93290f5 11f6425f98e64459ff203e8985083ffd f60500553abc0e05cd02184bdb89c4cc d67e187951267eb328"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: dcea9e78f35a1bf3499a831b10b86c90 aac01cd84b67a0109b55a36e9328b1e3 65fce161d71ce7131a543ea4cb5f7e9f 1d8b00696447001400",
      "ja": "PUBLIC KEY：dcea9e78f35a1bf3499a831b10b86c90 aac01cd84b67a0109b55a36e9328b1e3 65fce161d71ce7131a543ea4cb5f7e9f 1d8b00696447001400"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 11 bytes): 0c3e544074ec63b0265e0c",
      "ja": "MESSAGE（長さ11バイト）：0c3e544074ec63b0265e0c"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 1f0a8888ce25e8d458a21130879b840a 9089d999aaba039eaf3e3afa090a09d3 89dba82c4ff2ae8ac5cdfb7c55e94d5d 961a29fe0109941e00b8dbdeea6d3b05 1068df7254c0cdc129cbe62db2dc957d bb47b51fd3f213fb8698f064774250a5 028961c9bf8ffd973fe5d5c206492b14 0e00",
      "ja": "SIGNATURE：1f0a8888ce25e8d458a21130879b840a 9089d999aaba039eaf3e3afa090a09d3 89dba82c4ff2ae8ac5cdfb7c55e94d5d 961a29fe0109941e00b8dbdeea6d3b05 1068df7254c0cdc129cbe62db2dc957d bb47b51fd3f213fb8698f064774250a5 028961c9bf8ffd973fe5d5c206492b14 0e00"
    },
    {
      "indent": 3,
      "text": "-----12 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 258cdd4ada32ed9c9ff54e63756ae582 fb8fab2ac721f2c8e676a72768513d93 9f63dddb55609133f29adf86ec9929dc cb52c1c5fd2ff7e21b",
      "ja": "SECRET KEY：258cdd4ada32ed9c9ff54e63756ae582 fb8fab2ac721f2c8e676a72768513d93 9f63dddb55609133f29adf86ec9929dc cb52c1c5fd2ff7e21b"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 3ba16da0c6f2cc1f30187740756f5e79 8d6bc5fc015d7c63cc9510ee3fd44adc 24d8e968b6e46e6f94d19b945361726b d75e149ef09817f580",
      "ja": "PUBLIC KEY：3ba16da0c6f2cc1f30187740756f5e79 8d6bc5fc015d7c63cc9510ee3fd44adc 24d8e968b6e46e6f94d19b945361726b d75e149ef09817f580"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 12 bytes): 64a65f3cdedcdd66811e2915",
      "ja": "MESSAGE（長さ12バイト）：64a65f3cdedcdd66811e2915"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 7eeeab7c4e50fb799b418ee5e3197ff6 bf15d43a14c34389b59dd1a7b1b85b4a e90438aca634bea45e3a2695f1270f07 fdcdf7c62b8efeaf00b45c2c96ba457e b1a8bf075a3db28e5c24f6b923ed4ad7 47c3c9e03c7079efb87cb110d3a99861 e72003cbae6d6b8b827e4e6c143064ff 3c00",
      "ja": "SIGNATURE：7eeeab7c4e50fb799b418ee5e3197ff6 bf15d43a14c34389b59dd1a7b1b85b4a e90438aca634bea45e3a2695f1270f07 fdcdf7c62b8efeaf00b45c2c96ba457e b1a8bf075a3db28e5c24f6b923ed4ad7 47c3c9e03c7079efb87cb110d3a99861 e72003cbae6d6b8b827e4e6c143064ff 3c00"
    },
    {
      "indent": 3,
      "text": "-----13 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 7ef4e84544236752fbb56b8f31a23a10 e42814f5f55ca037cdcc11c64c9a3b29 49c1bb60700314611732a6c2fea98eeb c0266a11a93970100e",
      "ja": "SECRET KEY：7ef4e84544236752fbb56b8f31a23a10 e42814f5f55ca037cdcc11c64c9a3b29 49c1bb60700314611732a6c2fea98eeb c0266a11a93970100e"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: b3da079b0aa493a5772029f0467baebe e5a8112d9d3a22532361da294f7bb381 5c5dc59e176b4d9f381ca0938e13c6c0 7b174be65dfa578e80",
      "ja": "PUBLIC KEY：b3da079b0aa493a5772029f0467baebe e5a8112d9d3a22532361da294f7bb381 5c5dc59e176b4d9f381ca093​​8e13c6c0 7b174be65dfa578e80"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 13 bytes): 64a65f3cdedcdd66811e2915e7",
      "ja": "MESSAGE（長さ13バイト）：64a65f3cdedcdd66811e2915e7"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 6a12066f55331b6c22acd5d5bfc5d712 28fbda80ae8dec26bdd306743c5027cb 4890810c162c027468675ecf645a8317 6c0d7323a2ccde2d80efe5a1268e8aca 1d6fbc194d3f77c44986eb4ab4177919 ad8bec33eb47bbb5fc6e28196fd1caf5 6b4e7e0ba5519234d047155ac727a105 3100",
      "ja": "SIGNATURE：6a12066f55331b6c22acd5d5bfc5d712 28fbda80ae8dec26bdd306743c5027cb 4890810c162c027468675ecf645a8317 6c0d7323a2ccde2d80efe5a1268e8aca 1d6fbc194d3f77c44986eb4ab4177919 ad8bec33eb47bbb5fc6e28196fd1caf5 6b4e7e0ba5519234d047155ac727a105 3100"
    },
    {
      "indent": 3,
      "text": "-----64 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: d65df341ad13e008567688baedda8e9d cdc17dc024974ea5b4227b6530e339bf f21f99e68ca6968f3cca6dfe0fb9f4fa b4fa135d5542ea3f01",
      "ja": "SECRET KEY：d65df341ad13e008567688baedda8e9d cdc17dc024974ea5b4227b6530e339bf f21f99e68ca6968f3cca6dfe0fb9f4fa b4fa135d5542ea3f01"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: df9705f58edbab802c7f8363cfe5560a b1c6132c20a9f1dd163483a26f8ac53a 39d6808bf4a1dfbd261b099bb03b3fb5 0906cb28bd8a081f00",
      "ja": "PUBLIC KEY：df9705f58edbab802c7f8363cfe5560a b1c6132c20a9f1dd163483a26f8ac53a 39d6808bf4a1dfbd261b099bb03b3fb5 0906cb28bd8a081f00"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 64 bytes): bd0f6a3747cd561bdddf4640a332461a 4a30a12a434cd0bf40d766d9c6d458e5 512204a30c17d1f50b5079631f64eb31 12182da3005835461113718d1a5ef944",
      "ja": "MESSAGE（長さ64バイト）：bd0f6a3747cd561bdddf4640a332461a 4a30a12a434cd0bf40d766d9c6d458e5 512204a30c17d1f50b5079631f64eb31 12182da3005835461113718d1a5ef944"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 554bc2480860b49eab8532d2a533b7d5 78ef473eeb58c98bb2d0e1ce488a98b1 8dfde9b9b90775e67f47d4a1c3482058 efc9f40d2ca033a0801b63d45b3b722e f552bad3b4ccb667da350192b61c508c f7b6b5adadc2c8d9a446ef003fb05cba 5f30e88e36ec2703b349ca229c267083 3900",
      "ja": "SIGNATURE：554bc2480860b49eab8532d2a533b7d5 78ef473eeb58c98bb2d0e1ce488a98b1 8dfde9b9b90775e67f47d4a1c3482058 efc9f40d2ca033a0801b63d45b3b722e f552bad3b4ccb667da350192b61c508c f7b6b5adadc2c8d9a446ef003fb05cba 5f30e88e36ec2703b349ca229c267083 3900"
    },
    {
      "indent": 3,
      "text": "-----256 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 2ec5fe3c17045abdb136a5e6a913e32a b75ae68b53d2fc149b77e504132d3756 9b7e766ba74a19bd6162343a21c8590a a9cebca9014c636df5",
      "ja": "SECRET KEY：2ec5fe3c17045abdb136a5e6a913e32a b75ae68b53d2fc149b77e504132d3756 9b7e766ba74a19bd6162343a21c8590a a9cebca9014c636df5"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 79756f014dcfe2079f5dd9e718be4171 e2ef2486a08f25186f6bff43a9936b9b fe12402b08ae65798a3d81e22e9ec80e 7690862ef3d4ed3a00",
      "ja": "PUBLIC KEY：79756f014dcfe2079f5dd9e718be4171 e2ef2486a08f25186f6bff43a9936b9b fe12402b08ae65798a3d81e22e9ec80e 7690862ef3d4ed3a00"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 256 bytes): 15777532b0bdd0d1389f636c5f6b9ba7 34c90af572877e2d272dd078aa1e567c fa80e12928bb542330e8409f31745041 07ecd5efac61ae7504dabe2a602ede89 e5cca6257a7c77e27a702b3ae39fc769 fc54f2395ae6a1178cab4738e543072f c1c177fe71e92e25bf03e4ecb72f47b6 4d0465aaea4c7fad372536c8ba516a60 39c3c2a39f0e4d832be432dfa9a706a6 e5c7e19f397964ca4258002f7c0541b5 90316dbc5622b6b2a6fe7a4abffd9610 5eca76ea7b98816af0748c10df048ce0 12d901015a51f189f3888145c03650aa 23ce894c3bd889e030d565071c59f409 a9981b51878fd6fc110624dcbcde0bf7 a69ccce38fabdf86f3bef6044819de11",
      "ja": "MESSAGE（長さ256バイト）：15777532b0bdd0d1389f636c5f6b9ba7 34c90af572877e2d272dd078aa1e567c fa80e12928bb542330e8409f31745041 07ecd5efac61ae7504dabe2a602ede89 e5cca6257a7c77e27a702b3ae39fc769 fc54f2395ae6a1178cab4738e543072f c1c177fe71e92e25bf03e4ecb72f47b6 4d0465aaea4c7fad372536c8ba516a60 39c3c2a39f0e4d832be432dfa9a706a6 e5c7e19f397964ca4258002f7c0541b5 90316dbc5622b6b2a6fe7a4abffd9610 5eca76ea7b98816af0748c10df048ce0 12d901015a51f189f3888145c03650aa 23ce894c3bd889e030d565071c59f409 a9981b51878fd6fc110624dcbcde0bf7 a69ccce38fabdf86f3bef6044819de11"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: c650ddbb0601c19ca11439e1640dd931 f43c518ea5bea70d3dcde5f4191fe53f 00cf966546b72bcc7d58be2b9badef28 743954e3a44a23f880e8d4f1cfce2d7a 61452d26da05896f0a50da66a239a8a1 88b6d825b3305ad77b73fbac0836ecc6 0987fd08527c1a8e80d5823e65cafe2a 3d00",
      "ja": "SIGNATURE：c650ddbb0601c19ca11439e1640dd931 f43c518ea5bea70d3dcde5f4191fe53f 00cf966546b72bcc7d58be2b9badef28 743954e3a44a23f880e8d4f1cfce2d7a 61452d26da05896f0a50da66a239a8a1 88b6d825b3305ad77b73fbac0836ecc6 0987fd08527c1a8e80d5823e65cafe2a 3d00"
    },
    {
      "indent": 3,
      "text": "-----1023 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "ja": "アルゴリズム：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 872d093780f5d3730df7c212664b37b8 a0f24f56810daa8382cd4fa3f77634ec 44dc54f1c2ed9bea86fafb7632d8be19 9ea165f5ad55dd9ce8",
      "ja": "SECRET KEY：872d093780f5d3730df7c212664b37b8 a0f24f56810daa8382cd4fa3f77634ec 44dc54f1c2ed9bea86fafb7632d8be19 9ea165f5ad55dd9ce8"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: a81b2e8a70a5ac94ffdbcc9badfc3feb 0801f258578bb114ad44ece1ec0e799d a08effb81c5d685c0c56f64eecaef8cd f11cc38737838cf400",
      "ja": "PUBLIC KEY：a81b2e8a70a5ac94ffdbcc9badfc3feb 0801f258578bb114ad44ece1ec0e799d a08effb81c5d685c0c56f64eecaef8cd f11cc38737838cf400"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1023 bytes): 6ddf802e1aae4986935f7f981ba3f035 1d6273c0a0c22c9c0e8339168e675412 a3debfaf435ed651558007db4384b650 fcc07e3b586a27a4f7a00ac8a6fec2cd 86ae4bf1570c41e6a40c931db27b2faa 15a8cedd52cff7362c4e6e23daec0fbc 3a79b6806e316efcc7b68119bf46bc76 a26067a53f296dafdbdc11c77f7777e9 72660cf4b6a9b369a6665f02e0cc9b6e dfad136b4fabe723d2813db3136cfde9 b6d044322fee2947952e031b73ab5c60 3349b307bdc27bc6cb8b8bbd7bd32321 9b8033a581b59eadebb09b3c4f3d2277 d4f0343624acc817804728b25ab79717 2b4c5c21a22f9c7839d64300232eb66e 53f31c723fa37fe387c7d3e50bdf9813 a30e5bb12cf4cd930c40cfb4e1fc6225 92a49588794494d56d24ea4b40c89fc0 596cc9ebb961c8cb10adde976a5d602b 1c3f85b9b9a001ed3c6a4d3b1437f520",
      "ja": "MESSAGE（長さ1023バイト）：6ddf802e1aae4986935f7f981ba3f035 1d6273c0a0c22c9c0e8339168e675412 a3debfaf435ed651558007db4384b650 fcc07e3b586a27a4f7a00ac8a6fec2cd 86ae4bf1570c41e6a40c931db27b2faa 15a8cedd52cff7362c4e6e23daec0fbc 3a79b6806e316efcc7b68119bf46bc76 a26067a53f296dafdbdc11c77f7777e9 72660cf4b6a9b369a6665f02e0cc9b6e dfad136b4fabe723d2813db3136cfde9 b6d044322fee2947952e031b73ab5c60 3349b307bdc27bc6cb8b8bbd7bd32321 9b8033a581b59eadebb09b3c4f3d2277 d4f034​​3624acc817804728b25ab79717 2b4c5c21a22f9c7839d64300232eb66e 53f31c723fa37fe387c7d3e50bdf9813 a30e5bb12cf4cd930c40cfb4e1fc6225 92a49588794494d56d24ea4b40c89fc0 596cc9ebb961c8cb10adde976a5d602b 1c3f85b9b9a001ed3c6a4d3b1437f520"
    },
    {
      "indent": 3,
      "text": "96cd1956d042a597d561a596ecd3d173 5a8d570ea0ec27225a2c4aaff26306d1 526c1af3ca6d9cf5a2c98f47e1c46db9 a33234cfd4d81f2c98538a09ebe76998 d0d8fd25997c7d255c6d66ece6fa56f1 1144950f027795e653008f4bd7ca2dee 85d8e90f3dc315130ce2a00375a318c7 c3d97be2c8ce5b6db41a6254ff264fa6 155baee3b0773c0f497c573f19bb4f42 40281f0b1f4f7be857a4e59d416c06b4 c50fa09e1810ddc6b1467baeac5a3668 d11b6ecaa901440016f389f80acc4db9 77025e7f5924388c7e340a732e554440 e76570f8dd71b7d640b3450d1fd5f041 0a18f9a3494f707c717b79b4bf75c984 00b096b21653b5d217cf3565c9597456 f70703497a078763829bc01bb1cbc8fa 04eadc9a6e3f6699587a9e75c94e5bab 0036e0b2e711392cff0047d0d6b05bd2 a588bc109718954259f1d86678a579a3 120f19cfb2963f177aeb70f2d4844826 262e51b80271272068ef5b3856fa8535 aa2a88b2d41f2a0e2fda7624c2850272 ac4a2f561f8f2f7a318bfd5caf969614 9e4ac824ad3460538fdc25421beec2cc 6818162d06bbed0c40a387192349db67 a118bada6cd5ab0140ee273204f628aa d1c135f770279a651e24d8c14d75a605 9d76b96a6fd857def5e0b354b27ab937 a5815d16b5fae407ff18222c6d1ed263 be68c95f32d908bd895cd76207ae7264 87567f9a67dad79abec316f683b17f2d 02bf07e0ac8b5bc6162cf94697b3c27c d1fea49b27f23ba2901871962506520c 392da8b6ad0d99f7013fbc06c2c17a56 9500c8a7696481c1cd33e9b14e40b82e 79a5f5db82571ba97bae3ad3e0479515 bb0e2b0f3bfcd1fd33034efc6245eddd 7ee2086ddae2600d8ca73e214e8c2b0b db2b047c6a464a562ed77b73d2d841c4 b34973551257713b753632efba348169 abc90a68f42611a40126d7cb21b58695 568186f7e569d2ff0f9e745d0487dd2e b997cafc5abf9dd102e62ff66cba87",
      "ja": "96cd1956d042a597d561a596ecd3d173 5a8d570ea0ec27225a2c4aaff26306d1 526c1af3ca6d9cf5a2c98f47e1c46db9 a33234cfd4d81f2c98538a09ebe76998 d0d8fd25997c7d255c6d66ece6fa56f1 1144950f027795e653008f4bd7ca2dee 85d8e90f3dc315130ce2a00375a318c7 c3d97be2c8ce5b6db41a6254ff264fa6 155baee3b0773c0f497c573f19bb4f42 40281f0b1f4f7be857a4e59d416c06b4 c50fa09e1810ddc6b1467baeac5a3668 d11b6ecaa901440016f389f80acc4db9 77025e7f5924388c7e340a732e554440 e76570f8dd71b7d640b3450d1fd5f041 0a18f9a3494f707c717b79b4bf75c984 00b096b21653b5d217cf3565c9597456 f70703497a078763829bc01bb1cbc8fa 04eadc9a6e3f6699587a9e75c94e5bab 0036e0b2e711392cff0047d0d6b05bd2 a588bc109718954259f1d86678a579a3 120f19cfb2963f177aeb70f2d4844826 262e51b80271272068ef5b3856fa8535 aa2a88b2d41f2a0e2fda7624c2850272 ac4a2f561f8f2f7a318bfd5caf969614 9e4ac824ad3460538fdc25421beec2cc 6818162d06bbed0c40a387192349db67 a118bada6cd5ab0140ee273204f628aa d1c135f770279a651e24d8c14d75a605 9d76b96a6fd857def5e0b354b27ab937 a5815d16b5fae407ff18222c6d1ed263 be68c95f32 d908bd895cd76207ae7264 87567f9a67dad79abec316f683b17f2d 02bf07e0ac8b5bc6162cf94697b3c27c d1fea49b27f23ba2901871962506520c 392da8b6ad0d99f7013fbc06c2c17a56 9500c8a7696481c1cd33e9b14e40b82e 79a5f5db82571ba97bae3ad3e0479515 bb0e2b0f3bfcd1fd33034efc6245eddd 7ee2086ddae2600d8ca73e214e8c2b0b db2b047c6a464a562ed77b73d2d841c4 b34973551257713b753632efba348169 abc90a68f42611a40126d7cb21b58695 568186f7e569d2ff0f9e745d0487dd2e b997cafc5abf9dd102e62ff66cba87"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\ne301345a41a39a4d72fff8df69c98075\na0cc082b802fc9b2b6bc503f926b65bd\ndf7f4c8f1cb49f6396afc8a70abe6d8a\nef0db478d4c6b2970076c6a0484fe76d\n76b3a97625d79f1ce240e7c576750d29\n5528286f719b413de9ada3e8eb78ed57\n3603ce30d8bb761785dc30dbc320869e\n1a00\n-----",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7.5. Test Vectors for Ed448ph",
      "section_title": true,
      "ja": "7.5。 Ed448phのためのテストベクトル"
    },
    {
      "indent": 3,
      "text": "-----TEST abc",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448ph",
      "ja": "アルゴリズム：Ed448ph"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49",
      "ja": "SECRET KEY：833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 c09428a131d6b1b57303d90d8132c276 d5ed3d5d01c0f53880",
      "ja": "PUBLIC KEY：259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 c09428a131d6b1b57303d90d8132c276 d5ed3d5d01c0f53880"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 3 bytes): 616263",
      "ja": "MESSAGE（長さ3バイト）：616263"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 822f6901f7480f3d5f562c592994d969 3602875614483256505600bbc281ae38 1f54d6bce2ea911574932f52a4e6cadd 78769375ec3ffd1b801a0d9b3f4030cd 433964b6457ea39476511214f97469b5 7dd32dbc560a9a94d00bff07620464a3 ad203df7dc7ce360c3cd3696d9d9fab9 0f00",
      "ja": "SIGNATURE：822f6901f7480f3d5f562c592994d969 3602875614483256505600bbc281ae38 1f54d6bce2ea911574932f52a4e6cadd 78769375ec3ffd1b801a0d9b3f4030cd 433964b6457ea39476511214f97469b5 7dd32dbc560a9a94d00bff07620464a3 ad203df7dc7ce360c3cd3696d9d9fab9 0f00"
    },
    {
      "indent": 3,
      "text": "-----TEST abc (with context)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448ph",
      "ja": "アルゴリズム：Ed448ph"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49",
      "ja": "SECRET KEY：833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 c09428a131d6b1b57303d90d8132c276 d5ed3d5d01c0f53880",
      "ja": "PUBLIC KEY：259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 c09428a131d6b1b57303d90d8132c276 d5ed3d5d01c0f53880"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 3 bytes): 616263",
      "ja": "MESSAGE（長さ3バイト）：616263"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "ja": "CONTEXT：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\nc32299d46ec8ff02b54540982814dce9\na05812f81962b649d528095916a2aa48\n1065b1580423ef927ecf0af5888f90da\n0f6a9a85ad5dc3f280d91224ba9911a3\n653d00e484e2ce232521481c8658df30\n4bb7745a73514cdb9bf3e15784ab7128\n4f8d0704a608c54a6b62d97beb511d13\n2100\n-----",
      "raw": true
    },
    {
      "indent": 0,
      "text": "8. Security Considerations",
      "section_title": true,
      "ja": "8.セキュリティの考慮事項"
    },
    {
      "indent": 0,
      "text": "8.1. Side-Channel Leaks",
      "section_title": true,
      "ja": "8.1。サイドチャネルリーク"
    },
    {
      "indent": 3,
      "text": "For implementations performing signatures, secrecy of the private key is fundamental. It is possible to protect against some side-channel attacks by ensuring that the implementation executes exactly the same sequence of instructions and performs exactly the same memory accesses, for any value of the private key.",
      "ja": "実装は署名を実行するために、秘密鍵の秘密が基本です。実装は、命令のまったく同じシーケンスを実行し、秘密鍵の任意の値のため、まったく同じメモリアクセスを実行することを保証することにより、いくつかのサイドチャネル攻撃から保護することが可能です。"
    },
    {
      "indent": 3,
      "text": "To make an implementation side-channel silent in this way, the modulo p arithmetic must not use any data-dependent branches, e.g., related to carry propagation. Side-channel silent point addition is straightforward, thanks to the unified formulas.",
      "ja": "このように実装サイドチャネルサイレントを作るために、モジュロPの演算は、例えば、伝播を運ぶために関連する、任意のデータ依存分岐を使用してはなりません。サイドチャネルサイレント点の加算は、統一された式のおかげで簡単です。"
    },
    {
      "indent": 3,
      "text": "Scalar multiplication, multiplying a point by an integer, needs some additional effort to implement in a side-channel silent manner. One simple approach is to implement a side-channel silent conditional assignment, and use it together with the binary algorithm to examine one bit of the integer at a time.",
      "ja": "スカラー乗算は、整数ポイントを乗算、サイドチャネルサイレント方法で実装するいくつかの追加の労力を必要とします。一つの単純なアプローチは、サイドチャネルサイレント条件付き割り当てを実装し、一度に整数の1ビットを検査するバイナリアルゴリズムと一緒に使用することです。"
    },
    {
      "indent": 3,
      "text": "Compared to other signature schemes, avoiding data-dependent branches is easier due to side-channel silent modulo p arithmetic being easier (with recommended curves) and having complete addition formulas instead of having a number of special cases.",
      "ja": "他の署名方式に比べて、データ依存分岐を回避することにより、サイドチャネルサイレントモジュロP演算（推奨曲線で）より容易であると代わりの特別な場合の数を有するの完全な添加の式を有することが容易です。"
    },
    {
      "indent": 3,
      "text": "Note that the example implementations in this document do not attempt to be side-channel silent.",
      "ja": "このドキュメントの実装例は、サイレントサイドチャネルであることを試みないことに注意してください。"
    },
    {
      "indent": 0,
      "text": "8.2. Randomness Considerations",
      "section_title": true,
      "ja": "8.2。ランダム性の考慮事項"
    },
    {
      "indent": 3,
      "text": "EdDSA signatures are deterministic. This protects against attacks arising from signing with bad randomness; the effects of which can, depending on the algorithm, range up to full private key compromise. It can be surprisingly hard to ensure good-quality random numbers, and there have been numerous security failures relating to this.",
      "ja": "エドワーズ曲線デジタル署名アルゴリズムの署名が確定的です。これは悪いランダムと契約から生じる攻撃から保護します。効果は、アルゴリズムによっては、完全なプライベート鍵の危殆化までの範囲であることができます。良い品質の乱数を確保するために、意外に難しいことができ、これに関連する多数のセキュリティ障害がありました。"
    },
    {
      "indent": 3,
      "text": "Obviously, private key generation requires randomness, but due to the fact that the private key is hashed before use, a few missing bits of entropy doesn't constitute a disaster.",
      "ja": "もちろん、秘密鍵の生成はランダム性が必要ですが、原因秘密鍵を使用する前にハッシュ化されているという事実に、エントロピーのいくつか欠けているビットは、災害を構成するものではありません。"
    },
    {
      "indent": 3,
      "text": "The basic signature verification is also deterministic. However, some speedups by verifying multiple signatures at once do require random numbers.",
      "ja": "基本的な署名検証も決定的です。ただし、一度に複数の署名を検証することにより、いくつかのスピードアップは、乱数を必要とします。"
    },
    {
      "indent": 0,
      "text": "8.3. Use of Contexts",
      "section_title": true,
      "ja": "8.3。コンテキストの使用"
    },
    {
      "indent": 3,
      "text": "Contexts can be used to separate uses of the protocol between different protocols (which is very hard to reliably do otherwise) and between different uses within the same protocol. However, the following SHOULD be kept in mind when using this facility:",
      "ja": "コンテキストは（確実にそうでない行うことは非常に困難である）は、異なるプロトコル間と同じプロトコル内の異なる用途間のプロトコルの使用を分離するために使用することができます。ただし、この機能を使用する場合、次のことが心に留めておく必要があります。"
    },
    {
      "indent": 6,
      "text": "The context SHOULD be a constant string specified by the protocol using it. It SHOULD NOT incorporate variable elements from the message itself.",
      "ja": "コンテキストは、それを使用して、プロトコルによって指定された定数文字列でなければなりません。これは、メッセージ自体から変数の要素を取り入れるべきではありません。"
    },
    {
      "indent": 6,
      "text": "Contexts SHOULD NOT be used opportunistically, as that kind of use is very error prone. If contexts are used, one SHOULD require all signature schemes available for use in that purpose support contexts.",
      "ja": "コンテキストは、使用のようなものは非常にエラーが発生しやすくなりますよう、日和見使用されるべきではありません。コンテキストが使用されている場合は、1は、その目的・サポート・コンテキストで使用可能なすべての署名方式を要求する必要があります。"
    },
    {
      "indent": 6,
      "text": "Contexts are an extra input, which percolate out of APIs; as such, even if the signature scheme supports contexts, those may not be available for use. This problem is compounded by the fact that many times the application is not invoking the signing and verification functions directly but via some other protocol.",
      "ja": "コンテキストは、APIの外に浸透余分な入力、です。など、署名方式は、コンテキストをサポートしている場合でも、それらは使用のために利用できない場合があります。この問題は、多くの時間は、アプリケーションが直接署名と検証関数を呼び出すされていないという事実によってではなく、いくつかの他のプロトコルを介して配合されます。"
    },
    {
      "indent": 0,
      "text": "8.4. Signature Malleability",
      "section_title": true,
      "ja": "8.4。署名展性"
    },
    {
      "indent": 3,
      "text": "Some systems assume signatures are not malleable: that is, given a valid signature for some message under some key, the attacker can't produce another valid signature for the same message and key.",
      "ja": "つまり、いくつかのキーの下にいくつかのメッセージのための有効な署名が与えられると、攻撃者は、同じメッセージと鍵のための別の有効な署名を生成することができない。いくつかのシステムは、署名が展性ではないと仮定する。"
    },
    {
      "indent": 3,
      "text": "Ed25519 and Ed448 signatures are not malleable due to the verification check that decoded S is smaller than l. Without this check, one can add a multiple of l into a scalar part and still pass signature verification, resulting in malleable signatures.",
      "ja": "Ed25519とEd448署名が原因SがLよりも小さいデコード検証チェックに可鍛性ではありません。このチェックすることなく、一方はスカラー部にLの複数を追加することができ、依然として展性シグネチャをもたらす、署名検証に合格します。"
    },
    {
      "indent": 0,
      "text": "8.5. Choice of Signature Primitive",
      "section_title": true,
      "ja": "8.5。プリミティブ署名の選択"
    },
    {
      "indent": 3,
      "text": "Ed25519 and Ed25519ph have a nominal strength of 128 bits, whereas Ed448 and Ed448ph have the strength of 224. While the lower strength is sufficient for the foreseeable future, the higher level brings some defense against possible future cryptographic advances. Both are demolished by quantum computers just about the same.",
      "ja": "Ed25519とEd25519phは、より低い強度が予見可能な将来のために十分であるがEd448とEd448phは224の強度を有するのに対し、より高いレベルの可能な将来の暗号化の進歩に対するいくつかの防御をもたらし、128ビットの公称強度を有します。どちらも、ちょうど同じ程度量子コンピュータによって破壊されています。"
    },
    {
      "indent": 3,
      "text": "The Ed25519ph and Ed448ph variants are prehashed. This is mainly useful for interoperation with legacy APIs, since in most of the cases, either the amount of data signed is not large or the protocol is in the position to do digesting in ways better than just prehashing (e.g., tree hashing or splitting the data). The prehashing also makes the functions greatly more vulnerable to weaknesses in hash functions used. These variants SHOULD NOT be used.",
      "ja": "Ed25519phとEd448ph変異体がprehashedされています。これは、ほとんどの場合であるため、従来のAPIとの相互運用のために、主に有用である、いずれかの署名されたデータの量が大きくないか、プロトコルだけで（例えば、木のハッシュまたは分割prehashingより良い方法で消化行う立場にありますデータ）。 prehashingも使用されるハッシュ関数の弱点に機能が大幅より脆弱になります。これらの変異体を使用してはいけません。"
    },
    {
      "indent": 3,
      "text": "Ed25519ctx and Ed448 have contexts. However, this is balanced by the problems noted in Section 8.3 about contexts.",
      "ja": "Ed25519ctxとEd448は、コンテキストを持っています。しかし、これは、コンテキストの8.3節で述べた問題でバランスが取れています。"
    },
    {
      "indent": 3,
      "text": "On the implementation front, Ed25519 is widely implemented and has many high-quality implementations. The others have much worse support.",
      "ja": "実装面では、Ed25519が広く実装され、多くの高品質の実装を有しています。他の人ははるかに悪化サポートしています。"
    },
    {
      "indent": 3,
      "text": "In summary, if a high 128-bit security level is enough, use of Ed25519 is RECOMMENDED; otherwise, Ed448 is RECOMMENDED.",
      "ja": "高い128ビットのセキュリティ・レベルが十分であれば要するに、Ed25519の使用が推奨されます。そうでない場合は、Ed448をお勧めします。"
    },
    {
      "indent": 0,
      "text": "8.6. Mixing Different Prehashes",
      "section_title": true,
      "ja": "8.6。別のPrehashesをミキシング"
    },
    {
      "indent": 3,
      "text": "The schemes described in this document are designed to be resistant to mixing prehashes. That is, it is infeasible to find a message that verifies using the same signature under another scheme, even if the original signed message was chosen. Thus, one can use the same key pair for Ed25519, Ed25519ctx, and Ed25519ph and correspondingly with Ed448 and Ed448ph.",
      "ja": "この文書に記載方式がprehashes混合に対して抵抗性であるように設計されています。つまり、元の署名されたメッセージを選択した場合でも、他の方式の下で同一のシグネチャを使用して検証するメッセージを見つけることが不可能です。このように、一つはEd25519、Ed25519ctx、およびEd25519phため、それに応じてEd448とEd448phと同じキーペアを使用することができます。"
    },
    {
      "indent": 3,
      "text": "The \"SigEd25519 no Ed25519 collisions\" constant is chosen to be a textual string such that it does not decode as a point. Because the inner hash input in the Ed25519 signature always starts with a valid point, there is no way trivial collision can be constructed. In the case of seed hash, trivial collisions are so unlikely, even with an attacker choosing all inputs, that it is much more probable that something else goes catastrophically wrong.",
      "ja": "「SigEd25519なしEd25519衝突」定数は、それがポイントとしてデコードしないように、テキスト文字列であるように選択されます。 Ed25519署名における内部ハッシュ入力は常に有効なポイントで開始しますので、些細な衝突を構築することができる方法はありません。シードハッシュの場合は、些細な衝突は、それが何か他のものが壊滅的にうまくいかないことをはるかに可能性があること、でも、攻撃者がすべての入力を選択すると、その可能性は低いです。"
    },
    {
      "indent": 0,
      "text": "8.7. Signing Large Amounts of Data at Once",
      "section_title": true,
      "ja": "8.7。一度に大量のデータを署名"
    },
    {
      "indent": 3,
      "text": "Avoid signing large amounts of data at once (where \"large\" depends on the expected verifier). In particular, unless the underlying protocol does not require it, the receiver MUST buffer the entire message (or enough information to reconstruct it, e.g., compressed or encrypted version) to be verified.",
      "ja": "一度に大量のデータを署名しないでください（「大」は期待検証に依存します）。基本的なプロトコルは、それを必要としない場合を除き、特に、受信機は、検証すべきメッセージ全体（またはそれを再構築するのに十分な情報、例えば、圧縮または暗号化されたバージョン）をバッファしなければなりません。"
    },
    {
      "indent": 3,
      "text": "This is needed because most of the time, it is unsafe to process unverified data, and verifying the signature makes a pass through the whole message, causing ultimately at least two passes through.",
      "ja": "これは、ほとんどの時間ので必要であり、未検証データを処理する安全で、署名を検証することは、少なくとも二つのパスを介して最終的に引き起こす、メッセージ全体を通過することができます。"
    },
    {
      "indent": 3,
      "text": "As an API consideration, this means that any Initialize Update Finalize (IFU) verification interface is prone to misuse.",
      "ja": "APIの対価として、これは、任意の初期更新ファイナライズ（IFU）検証インタフェースが誤用する傾向があることを意味します。"
    },
    {
      "indent": 3,
      "text": "It is a bad idea to modify Ed25519 or Ed448 signing to be able to create valid Ed25519/Ed448 signatures using an IUF interface with only constant buffering. Pretty much any error in such would cause catastrophic security failure.",
      "ja": "それだけで一定のバッファリングとIUFのインタフェースを使用して、有効なEd25519 / Ed448署名を作成できるようにEd25519またはEd448署名を変更することは悪い考えです。ほとんどこのように誤りが壊滅的なセキュリティ障害を引き起こします。"
    },
    {
      "indent": 0,
      "text": "8.8. Multiplication by Cofactor in Verification",
      "section_title": true,
      "ja": "8.8。検証における補因子による乗算"
    },
    {
      "indent": 3,
      "text": "The given verification formulas for both Ed25519 and Ed448 multiply points by the cofactor. While this is not strictly necessary for security (in fact, any signature that meets the non-multiplied equation will satisfy the multiplied one), in some applications it is undesirable for implementations to disagree about the exact set of valid signatures. Such disagreements could open up, e.g., fingerprinting attacks.",
      "ja": "Ed25519とEd448の両方に与えられた検証式は補因子によってポイントを掛けます。これは、（実際には、非逓倍方程式を満たす任意の署名が乗算されたものを満足させる）セキュリティのために厳密には必要ではないですが実装は有効な署名の正確なセットについて同意するために、いくつかのアプリケーションでは、それは望ましくありません。このような意見の相違は、攻撃フィンガープリンティング、例えば、開くことができます。"
    },
    {
      "indent": 0,
      "text": "8.9. Use of SHAKE256 as a Hash Function",
      "section_title": true,
      "ja": "8.9。ハッシュ関数としてSHAKE256の使用"
    },
    {
      "indent": 3,
      "text": "Ed448 uses SHAKE256 as a hash function, even if SHAKE256 is specifically defined not to be a hash function.",
      "ja": "Ed448はSHAKE256は特にハッシュ関数ではないと定義されている場合でも、ハッシュ関数としてSHAKE256を使用します。"
    },
    {
      "indent": 3,
      "text": "The first potentially troublesome property is that shorter outputs are prefixes of longer ones. This is acceptable because output lengths are fixed.",
      "ja": "最初の潜在的に厄介な特性は、短い出力が長いものの接頭辞であるということです。出力長が固定されているので、これは許容可能です。"
    },
    {
      "indent": 3,
      "text": "The second potentially troublesome property is failing to meet standard hash security notions (especially with preimages). However, the estimated 256-bit security level against collisions and preimages is sufficient to pair with a 224-bit level elliptic curve.",
      "ja": "第二潜在煩雑性（特にpreimagesで）標準ハッシュのセキュリティ概念を満たすために失敗しています。しかし、衝突及びpreimagesに対して推定された256ビットのセキュリティ・レベルは、224ビットレベルの楕円曲線とペアリングするのに十分です。"
    },
    {
      "indent": 0,
      "text": "9. References",
      "section_title": true,
      "ja": "9.参考文献"
    },
    {
      "indent": 0,
      "text": "9.1. Normative References",
      "section_title": true,
      "ja": "9.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[FIPS202] National Institute of Standards and Technology, \"SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions\", FIPS PUB 202, August 2015, <http://dx.doi.org/10.6028/NIST.FIPS.202>.",
      "ja": "[FIPS202]アメリカ国立標準技術研究所、 \"SHA-3標準：順列に基づいたハッシュおよび拡張可能-出力機能\"、FIPS PUBの202、2015年8月、<http://dx.doi.org/10.6028/NIST.FIPS 0.202>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC6234] Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)\", RFC 6234, DOI 10.17487/RFC6234, May 2011, <http://www.rfc-editor.org/info/rfc6234>.",
      "ja": "[RFC6234]イーストレイク3日、D.とT.ハンセン、 \"米国のセキュアハッシュアルゴリズム（SHAとHMACとHKDF SHAベース）\"、RFC 6234、DOI 10.17487 / RFC6234、2011年5月、<のhttp：//www.rfc- editor.org/info/rfc6234>。"
    },
    {
      "indent": 3,
      "text": "[RFC7748] Langley, A., Hamburg, M., and S. Turner, \"Elliptic Curves for Security\", RFC 7748, DOI 10.17487/RFC7748, January 2016, <http://www.rfc-editor.org/info/rfc7748>.",
      "ja": "[RFC7748]ラングレー、A.、ハンブルク、M.、およびS.ターナー、 \"セキュリティのための楕円曲線\"、RFC 7748、DOI 10.17487 / RFC7748、2016年1月、<http://www.rfc-editor.org/info / rfc7748>。"
    },
    {
      "indent": 0,
      "text": "9.2. Informative References",
      "section_title": true,
      "ja": "9.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[CURVE25519] Bernstein, D., \"Curve25519: new Diffie-Hellman speed records\", DOI 10.1007/11745853_14, February 2006, <http://cr.yp.to/ecdh.html>.",
      "ja": "[CURVE25519]バーンスタイン、D.、 \"Curve25519：新しいDiffie-Hellman速記録\"、DOI 10.1007 / 11745853_14、2006年2月、<http://cr.yp.to/ecdh.html>。"
    },
    {
      "indent": 3,
      "text": "[ED25519-LIBGCRYPT-TEST-VECTORS] Koch, W., \"Ed25519 Libgcrypt test vectors\", July 2014, <http://git.gnupg.org/cgi-bin/ gitweb.cgi?p=libgcrypt.git;a=blob;f=tests/t-ed25519.inp; h=e13566f826321eece65e02c593bc7d885b3dbe23;hb=refs/ heads/master>.",
      "ja": "[ED25519-あるlibgcrypt-TESTベクトル]コッホ、W.、 \"Ed25519あるlibgcryptテストベクトル\"、2014年7月、<http://git.gnupg.org/cgi-bin/ gitweb.cgi P = libgcrypt.git;？ = BLOB; =テスト/ T-ed25519.inp F。 H = e13566f826321eece65e02c593bc7d885b3dbe23; HB =参考文献/ヘッド/マスター>。"
    },
    {
      "indent": 3,
      "text": "[ED25519-TEST-VECTORS] Bernstein, D., Duif, N., Lange, T., Schwabe, P., and B. Yang, \"Ed25519 test vectors\", July 2011, <http://ed25519.cr.yp.to/python/sign.input>.",
      "ja": "[ED25519-TESTベクトル】バーンスタイン、D.、ダイフ、N.、ランゲ、T.、シュワーベ、P.、およびB.ヤン、 \"Ed25519テストベクトル\"、2011年7月、<http://ed25519.cr。 > yp.to/python/sign.input。"
    },
    {
      "indent": 3,
      "text": "[ED448] Hamburg, M., \"Ed448-Goldilocks, a new elliptic curve\", June 2015, <http://eprint.iacr.org/2015/625>.",
      "ja": "【ED448】ハンブルグ、M.、 \"Ed448-びき、新しい楕円曲線\"、2015年6月、<http://eprint.iacr.org/2015/625>。"
    },
    {
      "indent": 3,
      "text": "[EDDSA] Bernstein, D., Duif, N., Lange, T., Schwabe, P., and B. Yang, \"High-speed high-security signatures\", DOI 10.1007/978-3-642-23951-9_9, September 2011, <http://ed25519.cr.yp.to/ed25519-20110926.pdf>.",
      "ja": "【エドワーズ曲線デジタル署名アルゴリズム]バーンスタイン、D.、ダイフ、N.、ランゲ、T.、シュワーベ、P.、およびB.ヤン、 \"高速高セキュリティ署名\"、DOI 10.1007 / 978-3-642-23951-9_9 、2011年9月、<http://ed25519.cr.yp.to/ed25519-20110926.pdf>。"
    },
    {
      "indent": 3,
      "text": "[EDDSA2] Bernstein, D., Josefsson, S., Lange, T., Schwabe, P., and B. Yang, \"EdDSA for more curves\", July 2015, <http://ed25519.cr.yp.to/eddsa-20150704.pdf>.",
      "ja": "【EDDSA2】バーンスタイン、D.、Josefsson氏、S.、ランゲ、T.、シュワーベ、P.、およびB.ヤン、 \"よりカーブのエドワーズ曲線デジタル署名アルゴリズム\"、2015年7月、<http://ed25519.cr.yp.to /eddsa-20150704.pdf>。"
    },
    {
      "indent": 3,
      "text": "[Edwards-revisited] Hisil, H., Wong, K., Carter, G., and E. Dawson, \"Twisted Edwards Curves Revisited\", DOI 10.1007/978-3-540-89255-7_20, December 2008, <http://eprint.iacr.org/2008/522>.",
      "ja": "[エドワーズ-再訪]のHiSil、H.、ウォン、K.、カーター、G.、およびE.ドーソン、 \"再考ツイストエドワーズ曲線\"、DOI 10.1007 / 978-3-540-89255-7_20は、2008年12月、<HTTP ：//eprint.iacr.org/2008/522>。"
    },
    {
      "indent": 3,
      "text": "[EFD-ADD] Bernstein, D. and T. Lange, \"Projective coordinates for Edwards curves\", The 'add-2007-bl' addition formulas, 2007, <http://www.hyperelliptic.org/EFD/g1p/ auto-edwards-projective.html#addition-add-2007-bl>.",
      "ja": "[EFD-ADD]バーンスタイン、D.およびT.ランゲ、 \"射影はエドワーズ曲線座標\"、 '追加-2007-BL' 加算式、2007、<http://www.hyperelliptic.org/EFD/g1p/自動エドワーズ-projective.html＃のほか、追加-2007-BL>。"
    },
    {
      "indent": 3,
      "text": "[EFD-DBL] Bernstein, D. and T. Lange, \"Projective coordinates for Edwards curves\", The 'dbl-2007-bl' doubling formulas, 2007, <http://www.hyperelliptic.org/EFD/g1p/ auto-edwards-projective.html#doubling-dbl-2007-bl>.",
      "ja": "[EFD-DBL]バーンスタイン、D.およびT.ランゲ、 \"射影はエドワーズ曲線座標\"、 'DBL-2007-BL' は数式、2007倍加、<http://www.hyperelliptic.org/EFD/g1p/自動エドワーズ-projective.html＃倍増-DBL-2007-BL>。"
    },
    {
      "indent": 3,
      "text": "[EFD-TWISTED-ADD] Hisil, H., Wong, K., Carter, G., and E. Dawson, \"Extended coordinates with a=-1 for twisted Edwards curves\", The 'add-2008-hwcd-3' addition formulas, December 2008, <http://www.hyperelliptic.org/EFD/g1p/ auto-twisted-extended-1.html#addition-add-2008-hwcd-3>.",
      "ja": "[EFD撚り-ADD]のHiSil、H.、ウォン、K.、カーター、G.、およびE.ドーソン、 \"=で拡張座標-1ねじれエドワーズ曲線について\"、「追加-2008-hwcd-3 「加算式、2008年12月、<http://www.hyperelliptic.org/EFD/g1p/自動ツイスト拡張1.html番号付加追加-2008-hwcd-3>。"
    },
    {
      "indent": 3,
      "text": "[EFD-TWISTED-DBL] Hisil, H., Wong, K., Carter, G., and E. Dawson, \"Extended coordinates with a=-1 for twisted Edwards curves\", The 'dbl-2008-hwcd' doubling formulas, December 2008, <http://www.hyperelliptic.org/EFD/g1p/ auto-twisted-extended-1.html#doubling-dbl-2008-hwcd>.",
      "ja": "[EFD-ツイストDBL]のHiSil、H.、ウォン、K.、カーター、G.、およびE.ドーソン \"で拡張座標= -1ねじれエドワーズ曲線について\"、 'DBL-2008 hwcd' 倍増式、2008年12月、<http://www.hyperelliptic.org/EFD/g1p/自動ツイスト拡張1.htmlの＃倍増-DBL-2008-hwcd>。"
    },
    {
      "indent": 3,
      "text": "[Faster-ECC] Bernstein, D. and T. Lange, \"Faster addition and doubling on elliptic curves\", DOI 10.1007/978-3-540-76900-2_3, July 2007, <http://eprint.iacr.org/2007/286>.",
      "ja": "[速いECC]バーンスタイン、D.およびT.ランゲ、 \"高速加算と楕円曲線上の倍増\"、DOI 10.1007 / 978-3-540-76900-2_3 2007年7月、<http://eprint.iacr.org / 2007/286>。"
    },
    {
      "indent": 3,
      "text": "[RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <http://www.rfc-editor.org/info/rfc4086>.",
      "ja": "[RFC4086]イーストレーク3日、D.、シラー、J.、およびS.クロッカー、 \"セキュリティのためのランダム要件\"、BCP 106、RFC 4086、DOI 10.17487 / RFC4086、2005年6月、<HTTP：//www.rfc-editor .ORG /情報/ RFC4086>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Ed25519/Ed448 Python Library",
      "ja": "付録A. Ed25519 / Ed448 Pythonライブラリ"
    },
    {
      "indent": 3,
      "text": "Below is an example implementation of Ed25519/Ed448 written in Python; version 3.2 or higher is required.",
      "ja": "以下、Pythonで書かれEd25519 / Ed448の実装例です。バージョン3.2以降が必要です。"
    },
    {
      "indent": 3,
      "text": "Note: This code is not intended for production. Although it should produce correct results for every input, it is slow and makes no attempt to avoid side-channel attacks.",
      "ja": "注：このコードは、生産のために意図されていません。それはすべての入力に対して正しい結果を生成する必要がありますが、それは低速であり、サイドチャネル攻撃を回避するための試みません。"
    },
    {
      "indent": 0,
      "text": "import hashlib;\nimport os;",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#Compute candidate square root of x modulo p, with p = 3 (mod 4). def sqrt4k3(x,p): return pow(x,(p + 1)//4,p)",
      "ja": "#Compute候補P = 3（MOD 4）とXモジュロPの平方根。 DEF sqrt4k3（X、P）：戻りPOW（X、（P + 1）// 4、P）"
    },
    {
      "indent": 0,
      "text": "#Compute candidate square root of x modulo p, with p = 5 (mod 8). def sqrt8k5(x,p): y = pow(x,(p+3)//8,p) #If the square root exists, it is either y or y*2^(p-1)/4. if (y * y) % p == x % p: return y else: z = pow(2,(p - 1)//4,p) return (y * z) % p",
      "ja": "#Compute候補P = 5（MOD 8）とXモジュロPの平方根。 DEF sqrt8k5（X、P）：Y = POW（X、（P + 3）// 8、p）の平方根#If文が存在し、それはどちらかである（P-1）YまたはY * 2 ^ / 4。もし（Y *のY）、％Pは== X％のP：他Y返す：Z = POW（2、（P  -  1）// 4、P）リターン（Y * Z）％pを"
    },
    {
      "indent": 0,
      "text": "#Decode a hexadecimal string representation of the integer. def hexi(s): return int.from_bytes(bytes.fromhex(s),byteorder=\"big\")",
      "ja": "整数の16進数の文字列表現を#Decode。デフ河西（S）：リターンint.from_bytes（bytes.fromhex（s）は、BYTEORDER = \"ビッグ\"）"
    },
    {
      "indent": 0,
      "text": "#Rotate a word x by b places to the left. def rol(x,b): return ((x << b) | (x >> (64 - b))) & (2**64-1)",
      "ja": "左にBの場所で単語xを#Rotate。デフROL（X、B）：リターン（（X << B）|（X >>（64  -  B）））＆（2 ** 64-1）"
    },
    {
      "indent": 0,
      "text": "#From little endian. def from_le(s): return int.from_bytes(s, byteorder=\"little\")",
      "ja": "#Fromリトルエンディアン。デフfrom_le（S）：リターンint.from_bytes（S、BYTEORDER = \"少し\"）"
    },
    {
      "indent": 0,
      "text": "#Do the SHA-3 state transform on state s. def sha3_transform(s): ROTATIONS = [0,1,62,28,27,36,44,6,55,20,3,10,43,25,39,41,45,15,\\ 21,8,18,2,61,56,14] PERMUTATION = [1,6,9,22,14,20,2,12,13,19,23,15,4,24,21,8,16,5,3,\\ 18,17,11,7,10] RC = [0x0000000000000001,0x0000000000008082,0x800000000000808a,\\ 0x8000000080008000,0x000000000000808b,0x0000000080000001,\\ 0x8000000080008081,0x8000000000008009,0x000000000000008a,\\ 0x0000000000000088,0x0000000080008009,0x000000008000000a,\\ 0x000000008000808b,0x800000000000008b,0x8000000000008089,\\ 0x8000000000008003,0x8000000000008002,0x8000000000000080,\\ 0x000000000000800a,0x800000008000000a,0x8000000080008081,\\ 0x8000000000008080,0x0000000080000001,0x8000000080008008]",
      "ja": "SHA-3の状態が状態sに変換#Do。デフsha3_transform（S）：21,8 \\ ROTATIONS = [0,1,62,28,27,36,44,6,55,20,3,10,43,25,39,41,45,15、 18,2,61,56,14] PERMUTATION = [1,6,9,22,14,20,2,12,13,19,23,15,4,24,21,8,16,5,3 、\\ 18,17,11,7,10] RC = [0x0000000000000001,0x0000000000008082,0x800000000000808a、\\ 0x8000000080008000,0x000000000000808b、0x0000000080000001、\\ 0x8000000080008081,0x8000000000008009,0x000000000000008a、\\ 0x0000000000000088,0x0000000080008009,0x000000008000000a、\\ 0x000000008000808b、0x800000000000008b、0x8000000000008089、\\ 0x8000000000008003,0x8000000000008002,0x8000000000000080 0x8000000000008080,0x0000000080000001,0x8000000080008008 \\、\\ 0x000000000000800a、0x800000008000000a、0x8000000080008081、]"
    },
    {
      "indent": 4,
      "text": "for rnd in range(0,24):\n    #AddColumnParity (Theta)\n    c = [0]*5;\n    d = [0]*5;\n    for i in range(0,25): c[i%5]^=s[i]\n    for i in range(0,5): d[i]=c[(i+4)%5]^rol(c[(i+1)%5],1)\n    for i in range(0,25): s[i]^=d[i%5]\n    #RotateWords (Rho)\n    for i in range(0,25): s[i]=rol(s[i],ROTATIONS[i])\n    #PermuteWords (Pi)\n    t = s[PERMUTATION[0]]\n    for i in range(0,len(PERMUTATION)-1):\n        s[PERMUTATION[i]]=s[PERMUTATION[i+1]]\n    s[PERMUTATION[-1]]=t;\n    #NonlinearMixRows (Chi)\n    for i in range(0,25,5):\n        t=[s[i],s[i+1],s[i+2],s[i+3],s[i+4],s[i],s[i+1]]\n        for j in range(0,5): s[i+j]=t[j]^((~t[j+1])&(t[j+2]))\n    #AddRoundConstant (Iota)\n    s[0]^=RC[rnd]",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#Reinterpret octet array b to word array and XOR it to state s. def reinterpret_to_words_and_xor(s,b): for j in range(0,len(b)//8): s[j]^=from_le(b[8*j:][:8])",
      "ja": "ワードアレイへとsを述べるためにそれをXOR Bを生成#Reinterpretオクテットアレー。 DEF reinterpret_to_words_and_xor（S、B）：範囲内のjについて（0、LEN（B）// 8）S [J] ^ = from_le（B [8 *のJ：] [8]）"
    },
    {
      "indent": 0,
      "text": "#Reinterpret word array w to octet array and return it. def reinterpret_to_octets(w): mp=bytearray() for j in range(0,len(w)): mp+=w[j].to_bytes(8,byteorder=\"little\") return mp",
      "ja": "オクテット配列にして返しワット#Reinterpret単語列。 DEF reinterpret_to_octets（W）：融点= ByteArrayの（）の範囲内のjについて（0、LEN（）W）：MP + = W [J] .to_bytes（8、BYTEORDER = \"小さな\"）は、MPを返します"
    },
    {
      "indent": 0,
      "text": "#(semi-)generic SHA-3 implementation def sha3_raw(msg,r_w,o_p,e_b): r_b=8*r_w s=[0]*25 #Handle whole blocks. idx=0 blocks=len(msg)//r_b for i in range(0,blocks): reinterpret_to_words_and_xor(s,msg[idx:][:r_b]) idx+=r_b sha3_transform(s) #Handle last block padding. m=bytearray(msg[idx:]) m.append(o_p) while len(m) < r_b: m.append(0) m[len(m)-1]|=128 #Handle padded last block. reinterpret_to_words_and_xor(s,m) sha3_transform(s) #Output. out = bytearray() while len(out)<e_b: out+=reinterpret_to_octets(s[:r_w]) sha3_transform(s) return out[:e_b]",
      "ja": "R_B = 8 * R_W S = [0] * 25 #Handle全体ブロック＃（半）汎用SHA-3の実装は、DEF（MSG、R_W、o_p、E_B）をsha3_raw。範囲内のiについてIDX = 0ブロック= LEN（MSG）// R_B（0、ブロック）：reinterpret_to_words_and_xor（S、MSG [IDX：] [：R_B]）IDX + = R_B sha3_transform（S）#Handle最後のブロックパディング。 M = ByteArrayの（MSG [IDX：]）m.append（o_p）LEN（M）<R_Bつつ：m.append（0）M [LEN（M）-1] | = 128 #Handleは、最後のブロックを埋め。 reinterpret_to_words_and_xor（S、M）sha3_transform（S）#Output。アウト= ByteArrayの（）LEN（OUT）<E_Bつつ：アウト+ = reinterpret_to_octets（S [：R_W]）sha3_transform（複数可）を返す[：E_B]"
    },
    {
      "indent": 0,
      "text": "#Implementation of SHAKE256 functions. def shake256(msg,olen): return sha3_raw(msg,17,31,olen)",
      "ja": "SHAKE256機能の#Implementation。デフshake256（MSG、オレン）：リターンsha3_raw（MSG、17,31、オレン）"
    },
    {
      "indent": 0,
      "text": "#A (prime) field element. class Field: #Construct number x (mod p). def __init__(self,x,p): self.__x=x%p self.__p=p #Check that fields of self and y are the same. def __check_fields(self,y): if type(y) is not Field or self.__p!=y.__p: raise ValueError(\"Fields don't match\") #Field addition. The fields must match. def __add__(self,y): self.__check_fields(y) return Field(self.__x+y.__x,self.__p) #Field subtraction. The fields must match. def __sub__(self,y): self.__check_fields(y) return Field(self.__p+self.__x-y.__x,self.__p) #Field negation. def __neg__(self): return Field(self.__p-self.__x,self.__p) #Field multiplication. The fields must match. def __mul__(self,y): self.__check_fields(y) return Field(self.__x*y.__x,self.__p) #Field division. The fields must match. def __truediv__(self,y): return self*y.inv() #Field inverse (inverse of 0 is 0). def inv(self): return Field(pow(self.__x,self.__p-2,self.__p),self.__p) #Field square root. Returns none if square root does not exist. #Note: not presently implemented for p mod 8 = 1 case. def sqrt(self): #Compute candidate square root. if self.__p%4==3: y=sqrt4k3(self.__x,self.__p) elif self.__p%8==5: y=sqrt8k5(self.__x,self.__p) else: raise NotImplementedError(\"sqrt(_,8k+1)\") _y=Field(y,self.__p); #Check square root candidate valid. return _y if _y*_y==self else None #Make the field element with the same field as this, but #with a different value. def make(self,ival): return Field(ival,self.__p) #Is the field element the additive identity? def iszero(self): return self.__x==0 #Are field elements equal? def __eq__(self,y): return self.__x==y.__x and self.__p==y.__p",
      "ja": "#A（プライム）フィールド要素。クラスフィールド：#Construct番号x（MOD P）。デフ__init __（自己、X、P）：自己.__ X = X％のP自己.__ P = P #Check自己とyのフィールドが同じであること。デフ__check_fields（自己、Y）：！タイプ（y）はyの.__ P .__ P =フィールドまたは自己でない場合：ValueErrorを（ \"フィールドが一致しない\"）#FIELD加算を上げます。フィールドが一致する必要があります。 DEF __add __（自己、Y）：自己.__ check_fields（Y）フィールド（自己.__ X + Y .__ Xを、自己.__ P）#FIELD減算を返します。フィールドが一致する必要があります。 DEF __sub __（自己、Y）：自己.__ check_fields（Y）フィールド（自己.__ P +自己.__ X-Y .__ X、自己.__ P）#FIELDの否定を返します。デフ__neg __（自己）：フィールドを返す（自己.__ P-自己.__ X、自己.__ P）#FIELD乗算。フィールドが一致する必要があります。 DEF __mul __（自己、Y）：自己.__ check_fields（Y）フィールド（自己.__ X * Y .__ X、自己.__ P）#FIELD分割を返します。フィールドが一致する必要があります。デフ__truediv __（自己、Y）：リターン自己* y.inv（）#FIELD逆（0の逆数が0です）。 DEF（自己）INV：フィールド（POW（自己.__ X、自己.__ P-2、自己.__ P）、自己.__ P）#FIELD平方根を返します。平方根が存在しない場合はNoneを返します。 #Note：現在P MOD 8 = 1の場合のために実装されていません。デフSQRT（自己）：#Compute候補平方根。もし自己.__ P％4 == 3：Y = sqrt4k3（自己.__ X、自己.__ P）のelif自己.__ P％8 == 5：Y = sqrt8k5（自己.__ X、自己.__ P）他：「（NotImplementedErrorを上げますSQRT（_、8K + 1）」）_y =フィールド（Y、自己.__ P）。平方根の候補が有効#Check。別の値これと同じフィールドとフィールド要素#Make _y * _y ==自己他になした場合_y返しますが、#with。デフ（自己、IVAL）します。項目（IVAL、自己.__ P）フィールド要素添加剤のアイデンティティを#ISを返しますか？ DEF iszero（自己）：戻り自己.__ X == 0 #Areフィールド要素等しいですか？デフ__eq __（自己、Y）：リターン自己.__のx == yの.__ xと自己.__のp == yの.__ P"
    },
    {
      "indent": 4,
      "text": "#Are field elements not equal?\ndef __ne__(self,y): return not (self==y)\n#Serialize number to b-1 bits.\ndef tobytes(self,b):\n    return self.__x.to_bytes(b//8,byteorder=\"little\")\n#Unserialize number from bits.\ndef frombytes(self,x,b):\n    rv=from_le(x)%(2**(b-1))\n    return Field(rv,self.__p) if rv<self.__p else None\n#Compute sign of number, 0 or 1.  The sign function\n#has the following property:\n#sign(x) = 1 - sign(-x) if x != 0.\ndef sign(self): return self.__x%2",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#A point on (twisted) Edwards curve. class EdwardsPoint: #base_field = None #x = None #y = None #z = None def initpoint(self, x, y): self.x=x self.y=y self.z=self.base_field.make(1) def decode_base(self,s,b): #Check that point encoding is the correct length. if len(s)!=b//8: return (None,None) #Extract signbit. xs=s[(b-1)//8]>>((b-1)&7) #Decode y. If this fails, fail. y = self.base_field.frombytes(s,b) if y is None: return (None,None) #Try to recover x. If it does not exist, or if zero and xs #are wrong, fail. x=self.solve_x2(y).sqrt() if x is None or (x.iszero() and xs!=x.sign()): return (None,None) #If sign of x isn't correct, flip it. if x.sign()!=xs: x=-x # Return the constructed point. return (x,y) def encode_base(self,b): xp,yp=self.x/self.z,self.y/self.z #Encode y. s=bytearray(yp.tobytes(b)) #Add sign bit of x to encoding. if xp.sign()!=0: s[(b-1)//8]|=1<<(b-1)%8 return s",
      "ja": "（ねじれ）エドワーズ曲線上#A点。クラスEdwardsPoint：#Z =なしDEF initpoint（自己、x、y）は#X =なし#Y =なし#base_field =なし：self.x = X self.y = Yのself.z = self.base_field.make（1 ）DEF decode_base（自己、S、B）：#Checkその点エンコーディングが正しい長さです。 ！リターン（なし、なし）#Extract signbit：LEN（S）= B // 8の場合。 XS = sの[（B-1）// 8] >>（（B-1）及び7）#DecodeのY。これが失敗した場合、失敗します。 Y =のself.base_field.frombytes（S、B）yはいずれもない場合：リターン（なし、なし）#Try Xを回収します。それが存在しない、またはゼロおよびxsは、間違った#are失敗した場合場合。 xがどれかではありません（x.iszero（）およびxs = x.sign（）！）場合はx = self.solve_x2（Y）.sqrtは（）：xのリターン（なし、なし）の#if記号正しくありません、それを反転。 x.sign（）場合= XS：！X = -x＃構築のポイントを返します。リターン（x、y）はデフencode_base（自己、B）：XP、YP = self.x / self.z、self.y / self.z #Encode Y。 S =のByteArray（yp.tobytes（b））は符号化Xのビット署名#Add。もしxp.sign（）= 0：S！[（B-1）// 8] | = 1 <<（B-1）〜8％のリターンsの"
    },
    {
      "indent": 4,
      "text": "def __mul__(self,x):\n    r=self.zero_elem()\n    s=self\n    while x > 0:\n        if (x%2)>0:\n            r=r+s\n        s=s.double()\n        x=x//2\n    return r\n#Check that two points are equal.\ndef __eq__(self,y):\n    #Need to check x1/z1 == x2/z2 and similarly for y, so cross\n    #multiply to eliminate divisions.\n    xn1=self.x*y.z\n    xn2=y.x*self.z\n    yn1=self.y*y.z\n    yn2=y.y*self.z\n    return xn1==xn2 and yn1==yn2\n#Check if two points are not equal.\ndef __ne__(self,y): return not (self==y)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#A point on Edwards25519. class Edwards25519Point(EdwardsPoint): #Create a new point on the curve. base_field=Field(1,2**255-19) d=-base_field.make(121665)/base_field.make(121666) f0=base_field.make(0) f1=base_field.make(1) xb=base_field.make(hexi(\"216936D3CD6E53FEC0A4E231FDD6DC5C692CC76\"+\\ \"09525A7B2C9562D608F25D51A\")) yb=base_field.make(hexi(\"666666666666666666666666666666666666666\"+\\ \"6666666666666666666666658\")) #The standard base point. @staticmethod def stdbase(): return Edwards25519Point(Edwards25519Point.xb,\\ Edwards25519Point.yb) def __init__(self,x,y): #Check the point is actually on the curve. if y*y-x*x!=self.f1+self.d*x*x*y*y: raise ValueError(\"Invalid point\") self.initpoint(x, y) self.t=x*y #Decode a point representation. def decode(self,s): x,y=self.decode_base(s,256); return Edwards25519Point(x, y) if x is not None else None",
      "ja": "Edwards25519上#Aポイント。クラスEdwards25519Point（EdwardsPoint）：曲線上の新しいポイントを#Create。 base_field =フィールド（1,2 ** 255から19）、D = -base_field.make（121665）/base_field.make（121666）F0 = base_field.make（0）F1 = base_field.make（1）XB = base_field.make （河西（ \"216936D3CD6E53FEC0A4E231FDD6DC5C692CC76\" + \\ \"09525A7B2C9562D608F25D51A\"））YB = base_field.make（河西（ \"666666666666666666666666666666666666666\" + \\ \"6666666666666666666666658\"））＃この標準基点。 @staticmethod DEF stdbase（）：Edwards25519Point（Edwards25519Point.xb、\\ Edwards25519Point.yb）デフ__init __（自己、x、y）を返す：#Check点は、実際に曲線です。 ！もしY * YX * X = self.f1 + self.d * X * X * Yの* yを：とValueError（ \"無効なポイント\"）self.initpoint（x、y）のself.t = X * Y #Decode Aを上げます小数点表現。 DEF（自己、S）復号：X、Y = self.decode_base（S、256）。 xは他になしNoneでない場合Edwards25519Point（x、y）を返します"
    },
    {
      "indent": 4,
      "text": "#Encode a point representation.\ndef encode(self):\n    return self.encode_base(256)\n#Construct a neutral point on this curve.\ndef zero_elem(self):\n    return Edwards25519Point(self.f0,self.f1)\n#Solve for x^2.\ndef solve_x2(self,y):\n    return ((y*y-self.f1)/(self.d*y*y+self.f1))\n#Point addition.\ndef __add__(self,y):\n    #The formulas are from EFD.\n    tmp=self.zero_elem()\n    zcp=self.z*y.z\n    A=(self.y-self.x)*(y.y-y.x)\n    B=(self.y+self.x)*(y.y+y.x)\n    C=(self.d+self.d)*self.t*y.t\n    D=zcp+zcp\n    E,H=B-A,B+A\n    F,G=D-C,D+C\n    tmp.x,tmp.y,tmp.z,tmp.t=E*F,G*H,F*G,E*H\n    return tmp\n#Point doubling.\ndef double(self):\n    #The formulas are from EFD (with assumption a=-1 propagated).\n    tmp=self.zero_elem()\n    A=self.x*self.x\n    B=self.y*self.y\n    Ch=self.z*self.z\n    C=Ch+Ch\n    H=A+B\n    xys=self.x+self.y\n    E=H-xys*xys\n    G=A-B\n    F=C+G\n    tmp.x,tmp.y,tmp.z,tmp.t=E*F,G*H,F*G,E*H\n    return tmp\n#Order of basepoint.\ndef l(self):\n    return hexi(\"1000000000000000000000000000000014def9dea2f79cd\"+\\\n        \"65812631a5cf5d3ed\")\n#The logarithm of cofactor.\ndef c(self): return 3\n#The highest set bit\ndef n(self): return 254\n#The coding length\ndef b(self): return 256",
      "raw": true
    },
    {
      "indent": 4,
      "text": "#Validity check (for debugging) def is_valid_point(self): x,y,z,t=self.x,self.y,self.z,self.t x2=x*x y2=y*y z2=z*z lhs=(y2-x2)*z2 rhs=z2*z2+self.d*x2*y2 assert(lhs == rhs) assert(t*z == x*y)",
      "ja": "（デバッグ用）#ValidityチェックDEF is_valid_point（自己）：X、Y、Z、T = self.x、self.y、self.z、self.t X2 = X * X Y2 = Y * Y Z2 = Z * Z LHSは=（Y2-X2）* Z2 RHS = Z2 * Z2 + self.d *×2 * Y2をアサート（LHS == RHS）アサートさ（t * zの== X * Y）"
    },
    {
      "indent": 0,
      "text": "#A point on Edwards448. class Edwards448Point(EdwardsPoint): #Create a new point on the curve. base_field=Field(1,2**448-2**224-1) d=base_field.make(-39081) f0=base_field.make(0) f1=base_field.make(1) xb=base_field.make(hexi(\"4F1970C66BED0DED221D15A622BF36DA9E14657\"+\\ \"0470F1767EA6DE324A3D3A46412AE1AF72AB66511433B80E18B00938E26\"+\\ \"26A82BC70CC05E\")) yb=base_field.make(hexi(\"693F46716EB6BC248876203756C9C7624BEA737\"+\\ \"36CA3984087789C1E05A0C2D73AD3FF1CE67C39C4FDBD132C4ED7C8AD98\"+\\ \"08795BF230FA14\")) #The standard base point. @staticmethod def stdbase(): return Edwards448Point(Edwards448Point.xb,Edwards448Point.yb) def __init__(self,x,y): #Check that the point is actually on the curve. if y*y+x*x!=self.f1+self.d*x*x*y*y: raise ValueError(\"Invalid point\") self.initpoint(x, y) #Decode a point representation. def decode(self,s): x,y=self.decode_base(s,456); return Edwards448Point(x, y) if x is not None else None #Encode a point representation. def encode(self): return self.encode_base(456) #Construct a neutral point on this curve. def zero_elem(self): return Edwards448Point(self.f0,self.f1) #Solve for x^2. def solve_x2(self,y): return ((y*y-self.f1)/(self.d*y*y-self.f1))",
      "ja": "Edwards448上#Aポイント。クラスEdwards448Point（EdwardsPoint）：曲線上の新しいポイントを#Create。 base_field =フィールド（1,2 ** 224-1 448から2）D = base_field.make（-39081）F0 = base_field.make（0）F1 = base_field.make（1）XB = base_field.make（河西（ \"4F1970C66BED0DED221D15A622BF36DA9E14657\" + \\ \"0470F1767EA6DE324A3D3A46412AE1AF72AB66511433B80E18B00938E26\" + \\ \"26A82BC70CC05E\"））YB = base_field.make（河西（ \"693F46716EB6BC248876203756C9C7624BEA737\" + \\ \"36CA3984087789C1E05A0C2D73AD3FF1CE67C39C4FDBD132C4ED7C8AD98\" + \\ \"08795BF230FA14\"））＃この標準基点。 DEF）（stdbase @staticmethod：#Check点が曲線上に実際にあること：Edwards448Point（Edwards448Point.xb、Edwards448Point.yb）デフ__init __（自己、x、y）を返します。 ！のy * yの+ X * X = self.f1 + self.d * X * X * Yの* yがあれば：（ \"無効なポイント\"）self.initpoint（x、y）は#Decode小数点表現をValueErrorを送出し。 DEF（自己、S）復号：X、Y = self.decode_base（S、456）。 xは、小数点表現#Encode他なしなしでない場合Edwards448Point（x、y）を返します。この曲線上の中性点#Constructリターンself.encode_base（456）：デフ（自己）をコードします。デフzero_elem（自己）：X ^ 2のためEdwards448Point（self.f0、self.f1）#Solveを返します。デフsolve_x2（自己、Y）：リターン（（Y * Y-self.f1）/（self.dの*のY *はY-self.f1））"
    },
    {
      "indent": 4,
      "text": "#Point addition.\ndef __add__(self,y):\n    #The formulas are from EFD.\n    tmp=self.zero_elem()\n    xcp,ycp,zcp=self.x*y.x,self.y*y.y,self.z*y.z\n    B=zcp*zcp\n    E=self.d*xcp*ycp\n    F,G=B-E,B+E\n    tmp.x=zcp*F*((self.x+self.y)*(y.x+y.y)-xcp-ycp)\n    tmp.y,tmp.z=zcp*G*(ycp-xcp),F*G\n    return tmp\n#Point doubling.\ndef double(self):\n    #The formulas are from EFD.\n    tmp=self.zero_elem()\n    x1s,y1s,z1s=self.x*self.x,self.y*self.y,self.z*self.z\n    xys=self.x+self.y\n    F=x1s+y1s\n    J=F-(z1s+z1s)\n    tmp.x,tmp.y,tmp.z=(xys*xys-x1s-y1s)*J,F*(x1s-y1s),F*J\n    return tmp\n#Order of basepoint.\ndef l(self):\n    return hexi(\"3ffffffffffffffffffffffffffffffffffffffffffffff\"+\\\n        \"fffffffff7cca23e9c44edb49aed63690216cc2728dc58f552378c2\"+\\\n        \"92ab5844f3\")\n#The logarithm of cofactor.\ndef c(self): return 2\n#The highest set bit.\ndef n(self): return 447\n#The coding length.\ndef b(self): return 456\n#Validity check (for debugging).\ndef is_valid_point(self):\n    x,y,z=self.x,self.y,self.z\n    x2=x*x\n    y2=y*y\n    z2=z*z\n    lhs=(x2+y2)*z2\n    rhs=z2*z2+self.d*x2*y2\n    assert(lhs == rhs)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#Simple self-check. def curve_self_check(point): p=point q=point.zero_elem() z=q l=p.l()+1 p.is_valid_point() q.is_valid_point() for i in range(0,point.b()): if (l>>i)&1 != 0: q=q+p q.is_valid_point() p=p.double() p.is_valid_point() assert q.encode() == point.encode() assert q.encode() != p.encode() assert q.encode() != z.encode()",
      "ja": "#Simpleセルフチェック。 P =点q = point.zero_elem（）Z = QL = PL（）+ 1 p.is_valid_point（）q.is_valid_point（）のためのIの範​​囲内（0、point.b（））：DEF（点）curve_self_check場合（L >> I）＆1 = 0：Q = Q + Pのq.is_valid_point（）P = p.double（）p.is_valid_point（）アサートq.encode（）== point.encode（）アサートq.encode （）！= p.encode（））（q.encodeを主張！= z.encode（）"
    },
    {
      "indent": 0,
      "text": "#Simple self-check. def self_check_curves(): curve_self_check(Edwards25519Point.stdbase()) curve_self_check(Edwards448Point.stdbase())",
      "ja": "#Simpleセルフチェック。デフself_check_curves（）：curve_self_check（Edwards25519Point.stdbase（））curve_self_check（Edwards448Point.stdbase（））"
    },
    {
      "indent": 0,
      "text": "#PureEdDSA scheme. #Limitation: only b mod 8 = 0 is handled. class PureEdDSA: #Create a new object. def __init__(self,properties): self.B=properties[\"B\"] self.H=properties[\"H\"] self.l=self.B.l() self.n=self.B.n() self.b=self.B.b() self.c=self.B.c() #Clamp a private scalar. def __clamp(self,a): _a = bytearray(a) for i in range(0,self.c): _a[i//8]&=~(1<<(i%8)) _a[self.n//8]|=1<<(self.n%8) for i in range(self.n+1,self.b): _a[i//8]&=~(1<<(i%8)) return _a #Generate a key. If privkey is None, a random one is generated. #In any case, the (privkey, pubkey) pair is returned. def keygen(self,privkey): #If no private key data is given, generate random. if privkey is None: privkey=os.urandom(self.b//8)",
      "ja": "#PureEdDSAスキーム。 #Limitation：唯一= 0 MOD 8bが処理されます。クラスPureEdDSA：新しいオブジェクトを#Create。デフ__init __（自己、性質）：self.B =プロパティ[ \"B\"] self.H =プロパティ[ \"H\"] self.l = self.Bl（）self.n = self.Bn（）self.b = self.Bb（）self.c = self.Bc（）#Clampプライベートスカラ。範囲（0、self.c）に_a = ByteArrayの（a）のiについて：DEF（Aセルフ）__clamp _a [I // 8]＆=〜（1 <<（I％8））_a [自己。 N // 8] | =範囲のiについて1 <<（self.nの8％）（self.n + 1、self.b）_a [I // 8]＆=〜（1 <<（I％ 8））_a #Generateにキーを返します。 privkeyがNone場合は、ランダムなものが生成されます。いずれの場合#IN、（privkey、pubkeyで）対が返されます。デフkeygenの（自己、privkey）：何の秘密鍵データが与えられていないの#if、ランダム生成されます。 privkeyがある場合なし：privkey = os.urandom（self.b // 8）"
    },
    {
      "indent": 4,
      "text": "    #Expand key.\n    khash=self.H(privkey,None,None)\n    a=from_le(self.__clamp(khash[:self.b//8]))\n    #Return the key pair (public key is A=Enc(aB).\n    return privkey,(self.B*a).encode()\n#Sign with key pair.\ndef sign(self,privkey,pubkey,msg,ctx,hflag):\n    #Expand key.\n    khash=self.H(privkey,None,None)\n    a=from_le(self.__clamp(khash[:self.b//8]))\n    seed=khash[self.b//8:]\n    #Calculate r and R (R only used in encoded form).\n    r=from_le(self.H(seed+msg,ctx,hflag))%self.l\n    R=(self.B*r).encode()\n    #Calculate h.\n    h=from_le(self.H(R+pubkey+msg,ctx,hflag))%self.l\n    #Calculate s.\n    S=((r+h*a)%self.l).to_bytes(self.b//8,byteorder=\"little\")\n    #The final signature is a concatenation of R and S.\n    return R+S\n#Verify signature with public key.\ndef verify(self,pubkey,msg,sig,ctx,hflag):\n    #Sanity-check sizes.\n    if len(sig)!=self.b//4: return False\n    if len(pubkey)!=self.b//8: return False\n    #Split signature into R and S, and parse.\n    Rraw,Sraw=sig[:self.b//8],sig[self.b//8:]\n    R,S=self.B.decode(Rraw),from_le(Sraw)\n    #Parse public key.\n    A=self.B.decode(pubkey)\n    #Check parse results.\n    if (R is None) or (A is None) or S>=self.l: return False\n    #Calculate h.\n    h=from_le(self.H(Rraw+pubkey+msg,ctx,hflag))%self.l\n    #Calculate left and right sides of check eq.\n    rhs=R+(A*h)\n    lhs=self.B*S\n    for i in range(0, self.c):\n        lhs = lhs.double()\n        rhs = rhs.double()\n    #Check eq. holds?\n    return lhs==rhs",
      "raw": true
    },
    {
      "indent": 0,
      "text": "def Ed25519_inthash(data,ctx,hflag): if (ctx is not None and len(ctx) > 0) or hflag: raise ValueError(\"Contexts/hashes not supported\") return hashlib.sha512(data).digest()",
      "ja": "デフEd25519_inthash（データ、CTX、hflag）：またはhflag（CTXはなしとlen（CTX）> 0ではないではない）場合：とValueError（ \"コンテキスト/サポートされていないハッシュを\"）の戻りhashlib.sha512（データを）上げる.digest（）"
    },
    {
      "indent": 0,
      "text": "#The base PureEdDSA schemes. pEd25519=PureEdDSA({\\ \"B\":Edwards25519Point.stdbase(),\\ \"H\":Ed25519_inthash\\ })",
      "ja": "＃このベースPureEdDSAスキーム。 pEd25519 = PureEdDSA（{\\ \"B\"：Edwards25519Point.stdbase（）、\\ \"H\"：Ed25519_inthash \\}）"
    },
    {
      "indent": 0,
      "text": "def Ed25519ctx_inthash(data,ctx,hflag): dompfx = b\"\" PREFIX=b\"SigEd25519 no Ed25519 collisions\" if ctx is not None: if len(ctx) > 255: raise ValueError(\"Context too big\") dompfx=PREFIX+bytes([1 if hflag else 0,len(ctx)])+ctx return hashlib.sha512(dompfx+data).digest()",
      "ja": "デフEd25519ctx_inthash（データ、CTX、hflag）：dompfx = B \"\" PREFIX = B \"SigEd25519なしEd25519衝突\"（コンテキスト \"が大きすぎる）dompfx = PREFIX CTXがなしでない場合：ValueErrorを送出：LEN（CTX）> 255であれば\" +バイト（[1 0そうhflag場合、LEN（CTX）]）+ CTXリターンhashlib.sha512（dompfx +データ）.digest（）"
    },
    {
      "indent": 0,
      "text": "pEd25519ctx=PureEdDSA({\\ \"B\":Edwards25519Point.stdbase(),\\ \"H\":Ed25519ctx_inthash\\ })",
      "ja": "pEd25519ctx = PureEdDSA（{\\ \"B\"：Edwards25519Point.stdbase（）、\\ \"H\"：Ed25519ctx_inthash \\}）"
    },
    {
      "indent": 0,
      "text": "def Ed448_inthash(data,ctx,hflag): dompfx = b\"\" if ctx is not None: if len(ctx) > 255: raise ValueError(\"Context too big\") dompfx=b\"SigEd448\"+bytes([1 if hflag else 0,len(ctx)])+ctx return shake256(dompfx+data,114)",
      "ja": "デフEd448_inthash（データ、CTX、hflag）：dompfx = B \"\" CTXがNoneでない場合：上げるとValueError：（CTX）> 255 lenの場合（ \"コンテキスト大きすぎる\"）dompfx = B \"SigEd448\" +バイト（[1場合hflag他0、LEN（CTX）]）+ CTXリターンshake256（dompfx +データ、114）"
    },
    {
      "indent": 0,
      "text": "pEd448 = PureEdDSA({\\ \"B\":Edwards448Point.stdbase(),\\ \"H\":Ed448_inthash\\ })",
      "ja": "pEd448 = PureEdDSA（{\\ \"B\"：Edwards448Point.stdbase（）、\\ \"H\"：Ed448_inthash \\}）"
    },
    {
      "indent": 0,
      "text": "#EdDSA scheme. class EdDSA: #Create a new scheme object, with the specified PureEdDSA base #scheme and specified prehash. def __init__(self,pure_scheme,prehash): self.__pflag = True self.__pure=pure_scheme self.__prehash=prehash if self.__prehash is None: self.__prehash = lambda x,y:x self.__pflag = False # Generate a key. If privkey is none, it generates a random # privkey key, otherwise it uses a specified private key. # Returns pair (privkey, pubkey). def keygen(self,privkey): return self.__pure.keygen(privkey)",
      "ja": "#EdDSAスキーム。クラスエドワーズ曲線デジタル署名アルゴリズム：指定PureEdDSAベース#schemeと指定prehashで、新しいスキームのオブジェクトを#Create。デフ__init __（自己、pure_scheme、prehash）：自己.__真= PFLAG自己.__純粋= pure_scheme自己.__ prehash = prehash自己.__ prehashなしの場合：自己.__ prehash =ラムダのx、yは：Xの自己.__ PFLAG = Falseの＃生成キー。 privkeyがnoneの場合、それは、ランダム＃のprivkeyキーを生成し、それ以外の場合は、指定された秘密鍵を使用しています。 ＃はペア（privkey、pubkeyで）を返します。デフkeygenの（自己、privkey）：リターン自己.__ pure.keygen（privkey）"
    },
    {
      "indent": 4,
      "text": "# Sign message msg using specified key pair.\ndef sign(self,privkey,pubkey,msg,ctx=None):\n    if ctx is None: ctx=b\"\";\n    return self.__pure.sign(privkey,pubkey,self.__prehash(msg,ctx),\\\n        ctx,self.__pflag)\n# Verify signature sig on message msg using public key pubkey.\ndef verify(self,pubkey,msg,sig,ctx=None):\n    if ctx is None: ctx=b\"\";\n    return self.__pure.verify(pubkey,self.__prehash(msg,ctx),sig,\\\n        ctx,self.__pflag)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "def Ed448ph_prehash(data,ctx): return shake256(data,64)",
      "ja": "デフEd448ph_prehash（データ、CTX）：リターンshake256（データ、64）"
    },
    {
      "indent": 0,
      "text": "#Our signature schemes. Ed25519 = EdDSA(pEd25519,None) Ed25519ctx = EdDSA(pEd25519ctx,None) Ed25519ph = EdDSA(pEd25519ctx,lambda x,y:hashlib.sha512(x).digest()) Ed448 = EdDSA(pEd448,None) Ed448ph = EdDSA(pEd448,Ed448ph_prehash)",
      "ja": "#Our署名方式。 Ed25519 =エドワーズ曲線デジタル署名アルゴリズム（pEd25519、なし）Ed25519ctx =エドワーズ曲線デジタル署名アルゴリズム（pEd25519ctx、なし）Ed25519ph =エドワーズ曲線デジタル署名アルゴリズム（pEd25519ctx、ラムダX、Y：hashlib.sha512（X）.digest（））Ed448 =エドワーズ曲線デジタル署名アルゴリズム（pEd448、なし）Ed448ph =エドワーズ曲線デジタル署名アルゴリズム（ pEd448、Ed448ph_prehash）"
    },
    {
      "indent": 0,
      "text": "def eddsa_obj(name): if name == \"Ed25519\": return Ed25519 if name == \"Ed25519ctx\": return Ed25519ctx if name == \"Ed25519ph\": return Ed25519ph if name == \"Ed448\": return Ed448 if name == \"Ed448ph\": return Ed448ph raise NotImplementedError(\"Algorithm not implemented\")",
      "ja": "デフeddsa_obj（名）：名前場合== \"Ed25519\"：場合Ed25519を返す名前== \"Ed25519ctx\"：場合Ed25519ctxを返す名前== \"Ed25519ph\"：名前場合== \"Ed448\" Ed25519phを返す：名前場合== Ed448を返します\"Ed448ph\"：Ed448phはNotImplementedErrorを上げる返す（ \"アルゴリズムが実装されていません\"）"
    },
    {
      "indent": 0,
      "text": "Appendix B. Library Driver",
      "ja": "付録B.ライブラリ・ドライバ"
    },
    {
      "indent": 3,
      "text": "Below is a command-line tool that uses the library above to perform computations for interactive use or for self-checking.",
      "ja": "以下は、対話的な使用のためか、セルフチェックのための計算を実行するために、上記のライブラリを使用するコマンドラインツールです。"
    },
    {
      "indent": 0,
      "text": "import sys import binascii",
      "ja": "輸入SYSインポートbinascii"
    },
    {
      "indent": 0,
      "text": "from eddsa2 import Ed25519",
      "ja": "eddsa2輸入Ed25519から"
    },
    {
      "indent": 0,
      "text": "def munge_string(s, pos, change): return (s[:pos] + int.to_bytes(s[pos] ^ change, 1, \"little\") + s[pos+1:])",
      "ja": "DEF（S、POS、変化）munge_string：リターン（S [：POS] + int.to_bytes（S [POS] ^変化、1、 \"少し\"）+ S [POS + 1]）"
    },
    {
      "indent": 0,
      "text": "# Read a file in the format of # http://ed25519.cr.yp.to/python/sign.input lineno = 0 while True: line = sys.stdin.readline() if not line: break lineno = lineno + 1 print(lineno) fields = line.split(\":\") secret = (binascii.unhexlify(fields[0]))[:32] public = binascii.unhexlify(fields[1]) msg = binascii.unhexlify(fields[2]) signature = binascii.unhexlify(fields[3])[:64]",
      "ja": "ライン= sys.stdin.readline（）でない場合ライン：破るLINENO = LINENO + ## http://ed25519.cr.yp.to/python/sign.input LINENO = 0ながら、真の形式のファイルを読みます1プリント（LINENO）フィールド= line.split（ \"：\"）秘密=（binascii.unhexlify（フィールド[0]））[32]公共= binascii.unhexlify（項目[1]）MSG = binascii.unhexlify（フィールド[2]）署名= binascii.unhexlify（項目[3]）[64]"
    },
    {
      "indent": 4,
      "text": "privkey,pubkey = Ed25519.keygen(secret)\nassert public == pubkey\nassert signature == Ed25519.sign(privkey, pubkey, msg)\nassert Ed25519.verify(public, msg, signature)\nif len(msg) == 0:\n    bad_msg = b\"x\"\nelse:\n    bad_msg = munge_string(msg, len(msg) // 3, 4)\nassert not Ed25519.verify(public,bad_msg,signature)\nassert not Ed25519.verify(public, msg, munge_string(signature,20,8))\nassert not Ed25519.verify(public,msg,munge_string(signature,40,16))",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "EdDSA and Ed25519 were initially described in a paper due to Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. The Ed448 curve is due to Mike Hamburg.",
      "ja": "エドワーズ曲線デジタル署名アルゴリズムとEd25519は最初に起因ダニエル・バーンスタイン、ニールスダイフ、タンジェランゲ、ピーターシュワーベ、及びボー陰陽に論文に記載されました。 Ed448曲線は、マイク・ハンブルクによるものです。"
    },
    {
      "indent": 3,
      "text": "An earlier draft version of this document was coauthored by Niels Moeller.",
      "ja": "このドキュメントの以前のドラフト版は、ニールス・メラー共著ました。"
    },
    {
      "indent": 3,
      "text": "Feedback on this document was received from Werner Koch, Damien Miller, Bob Bradley, Franck Rondepierre, Alexey Melnikov, Kenny Paterson, and Robert Edmonds.",
      "ja": "このドキュメントに関するフィードバックはワーナー・コック、ダミアン・ミラー、ボブ・ブラッドリー、フランクRondepierre、アレクセイ・メルニコフ、ケニー・パターソン、およびロバート・エドモンズから受信しました。"
    },
    {
      "indent": 3,
      "text": "The Ed25519 test vectors were double checked by Bob Bradley using three separate implementations (one based on TweetNaCl and two different implementations based on code from SUPERCOP).",
      "ja": "Ed25519テストベクトルは、二重、3つの別個の実装（TweetNaClとSUPERCOPからのコードに基づいて、2つの異なる実装に基づくもの）を使用してボブ・ブラッドリーによって確認しました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Simon Josefsson SJD AB",
      "ja": "サイモンJosefsson氏SJD AB"
    },
    {
      "indent": 3,
      "text": "Email: simon@josefsson.org URI: http://josefsson.org/",
      "ja": "メール：simon@josefsson.org URI：http://josefsson.org/"
    },
    {
      "indent": 3,
      "text": "Ilari Liusvaara Independent",
      "ja": "Ilari Liusvaara独立"
    },
    {
      "indent": 3,
      "text": "Email: ilariliusvaara@welho.com",
      "ja": "メール：ilariliusvaara@welho.com"
    }
  ]
}