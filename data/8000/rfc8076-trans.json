{
  "title": {
    "text": "RFC 8076 - A Usage for Shared Resources in RELOAD (ShaRe)",
    "ja": "RFC 8076 - RELOADでの共有リソースの使用上（SHARE）"
  },
  "number": 8076,
  "created_at": "2019-10-23 00:44:06.665743+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          A. Knauf\nRequest for Comments: 8076                               T. Schmidt, Ed.\nCategory: Standards Track                                    HAW Hamburg\nISSN: 2070-1721                                                  G. Hege\n                                                             daviko GmbH\n                                                            M. Waehlisch\n                                                    link-lab & FU Berlin\n                                                              March 2017",
      "raw": true
    },
    {
      "indent": 13,
      "text": "A Usage for Shared Resources in RELOAD (ShaRe)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document defines a REsource LOcation And Discovery (RELOAD) Usage for managing shared write access to RELOAD Resources. Shared Resources in RELOAD (ShaRe) form a basic primitive for enabling various coordination and notification schemes among distributed peers. Access in ShaRe is controlled by a hierarchical trust delegation scheme maintained within an access list. A new USER-CHAIN-ACL access policy allows authorized peers to write a Shared Resource without owning its corresponding certificate. This specification also adds mechanisms to store Resources with a variable name that is useful whenever peer-independent rendezvous processes are required.",
      "ja": "この文書では、リソースの場所やリソースを再ロードするために、共有書き込みアクセスを管理するためのディスカバリー（RELOAD）使用法を定義します。 RELOAD（株）内の共有リソースは、分散型のピア間の様々な調整および通知方式を可能にするための基本的なプリミティブを形成します。シェアのアクセスは、アクセスリスト内に維持階層信頼委任スキームによって制御されます。新しいUSER-CHAIN-ACLアクセスポリシーは、許可されたピアは、それに対応する証明書を所有することなく、共有リソースを作成することができます。本明細書はまた、ピア独立ランデブー・プロセスが必要とされるときはいつでも有用である変数名とリソースを格納するためのメカニズムを追加します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 7841のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc8076.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc8076で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2017 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2017 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4\n2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5\n3.  Shared Resources in RELOAD  . . . . . . . . . . . . . . . . .   5\n  3.1.  Mechanisms for Isolating Stored Data  . . . . . . . . . .   6\n4.  Access Control List Definition  . . . . . . . . . . . . . . .   7\n  4.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   7\n  4.2.  Data Structure  . . . . . . . . . . . . . . . . . . . . .   9\n5.  Extension for Variable Resource Names . . . . . . . . . . . .  10\n  5.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .  10\n  5.2.  Data Structure  . . . . . . . . . . . . . . . . . . . . .  11\n  5.3.  Overlay Configuration Document Extension  . . . . . . . .  12\n6.  Access Control to Shared Resources  . . . . . . . . . . . . .  13\n  6.1.  Granting Write Access . . . . . . . . . . . . . . . . . .  13\n  6.2.  Revoking Write Access . . . . . . . . . . . . . . . . . .  14\n  6.3.  Validating Write Access through an ACL  . . . . . . . . .  14\n  6.4.  Operations of Storing Peers . . . . . . . . . . . . . . .  15\n  6.5.  Operations of Accessing Peers . . . . . . . . . . . . . .  16\n  6.6.  USER-CHAIN-ACL Access Policy  . . . . . . . . . . . . . .  16\n7.  ACCESS-CONTROL-LIST Kind Definition . . . . . . . . . . . . .  17\n8.  Security Considerations . . . . . . . . . . . . . . . . . . .  17\n  8.1.  Resource Exhaustion . . . . . . . . . . . . . . . . . . .  17\n  8.2.  Malicious or Misbehaving Storing Peer . . . . . . . . . .  18\n  8.3.  Trust Delegation to a Malicious or Misbehaving Peer . . .  18\n  8.4.  Privacy Issues  . . . . . . . . . . . . . . . . . . . . .  18\n9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  19\n  9.1.  Access Control Policy . . . . . . . . . . . . . . . . . .  19\n  9.2.  Data Kind-ID  . . . . . . . . . . . . . . . . . . . . . .  19\n  9.3.  XML Namespace Registration  . . . . . . . . . . . . . . .  19\n10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  20\n  10.1.  Normative References . . . . . . . . . . . . . . . . . .  20\n  10.2.  Informative References . . . . . . . . . . . . . . . . .  20\nAcknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  21\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  22",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "[RFC6940] defines the base protocol for REsource LOcation And Discovery (RELOAD), which allows for application-specific extensions by Usages. The present document defines such a RELOAD Usage for managing shared write access to RELOAD Resources and a mechanism to store Resources with variable names. The Usage for Shared Resources in RELOAD (ShaRe) enables overlay users to share their exclusive write access to specific Resource/Kind pairs with others. Shared Resources form a basic primitive for enabling various coordination and notification schemes among distributed peers. Write permission is controlled by an Access Control List (ACL) Kind that maintains a chain of Authorized Peers for a particular Shared Resource. A newly defined USER-CHAIN-ACL access control policy enables shared write access in RELOAD.",
      "ja": "[RFC6940]は用途によってアプリケーション固有の拡張を可能にするリソースロケーションとディスカバリー（リロード）するための基本プロトコルを定義します。本書は、リソースおよび変数名を使用したリソースを格納するための仕組みを再ロードするために、共有書き込みアクセスを管理するため、このようなRELOADの使用を定義します。 RELOAD（SHARE）での共有リソースの使用状況は、他の人と、特定のリソース/種類のペアへの排他的書き込みアクセスを共有するために、オーバーレイができます。共有リソースは、分散型のピア間の様々な調整および通知方式を可能にするための基本的なプリミティブを形成します。書き込み許可は、特定の共有リソースを許可ピアのチェーンを維持してアクセス制御リスト（ACL）種類によって制御されています。新しく定義されたUSER-CHAIN-ACLアクセス制御ポリシーは、RELOADに共有書き込みアクセスを可能にします。"
    },
    {
      "indent": 3,
      "text": "The Usage for Shared Resources in RELOAD is designed for jointly coordinated group applications among distributed peers (e.g., third-party registration, see [RFC7904], or distributed conferencing). Of particular interest are rendezvous processes, where a single identifier is linked to multiple, dynamic instances of a distributed cooperative service. Shared write access is based on a trust delegation mechanism that transfers the authorization to write a specific Kind data by storing logical Access Control Lists. An ACL contains the ID of the Kind to be shared and contains trust delegations from one authorized to another (previously unauthorized) user.",
      "ja": "リロードで共有リソースの使用上は、分散ピア（例えば、サードパーティの登録、[RFC7904]、または分散会議を参照）のうち、共同協調グループのアプリケーションのために設計されています。特に興味深いのは、単一の識別子が分散協調サービスの複数のインスタンス動的にリンクされている場合、ランデブープロセスです。共有書き込みアクセスは、論理的なアクセス制御リストを格納することにより、特定の種類のデータを書き込むための権限を転送信託委任メカニズムに基づいています。 ACLは、共有される種類のIDを含み、別の（以前に不正な）ユーザに許可一方から信頼委任を含んでいます。"
    },
    {
      "indent": 3,
      "text": "Shared write access augments the RELOAD security model, which is based on the restriction that peers are only allowed to write resources at a small set of well-defined locations (Resource-IDs) in the overlay. Using the standard access control rules in RELOAD, these locations are bound to the username or Node-ID in the peer's certificate. This document extends the base policies to enable a controlled write access for multiple users to a common Resource-ID.",
      "ja": "共有書き込みアクセスがピアのみオーバーレイで明確に定義された位置（資源のID）の小さなセットにリソースを書き込むことが許可されている制限に基づいているリロードセキュリティモデルを、増強します。 RELOADに標準のアクセス制御ルールを使用して、これらの場所は、ピアの証明書にユーザー名またはノードIDにバインドされています。この文書では、共通のリソース-IDに複数のユーザーのための制御書き込みアクセスを可能にするために、基本方針を拡張します。"
    },
    {
      "indent": 3,
      "text": "Additionally, this specification defines an optional mechanism to store Resources with a variable Resource Name. It enables the storage of Resources whose name complies to a specific pattern. Definition of the pattern is arbitrary, but it must contain the username of the Resource creator.",
      "ja": "また、本明細書は、可変リソース名とリソースを格納するための任意のメカニズムを定義します。これは、名前の特定のパターンに準拠資源の保存を可能にします。パターンの定義は任意であるが、それは、リソースの作成者のユーザー名が含まれている必要があります。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "This document uses the terminology and definitions from the RELOAD base [RFC6940] and [RFC7890], in particular the RELOAD Usage, Resource, and Kind. Additionally, the following terms are used:",
      "ja": "この文書では、リロードベース[RFC6940]及び[RFC7890]、特にリロードの使用、リソース、および種類の用語および定義を使用します。また、以下の用語が使用されます。"
    },
    {
      "indent": 3,
      "text": "Shared Resource: The term \"Shared Resource\" in this document defines a RELOAD Resource with its associated Kinds that can be written or overwritten by multiple RELOAD users following the specifications in this document.",
      "ja": "共有リソース：この文書に記載されている用語「共有リソースは、」この文書に記載されている仕様は、以下の複数のRELOADユーザによって書かれたり上書きすることができ、その関連種類とRELOADリソースを定義します。"
    },
    {
      "indent": 3,
      "text": "Access Control List: The term \"Access Control List\" in this document defines a logical list of RELOAD users allowed to write a specific RELOAD Resource/Kind pair by following the specifications in this document. The list items are stored as Access Control List Kinds that map trust delegations from user A to user B, where A is allowed to write a Shared Resource and the Access Control List, while B is a user that obtains write access to specified Kinds from A.",
      "ja": "アクセス制御リストは：この文書に記載されている用語「アクセス制御リストは、」この文書の仕様に従うことによって、特定のRELOADリソース/種類のペアを書き込むことができRELOADユーザーの論理的なリストを定義します。リスト項目は、BがAから指定された種類の書き込みアクセスを取得するユーザであるAは、共有リソース及びアクセス制御リストを書き込むことが許可されたユーザBにユーザAからの信頼委任をマッピングするアクセス制御リストの種類として格納されます。"
    },
    {
      "indent": 3,
      "text": "Resource Owner: The term \"Resource Owner\" in this document defines a RELOAD peer that initially stored a Resource to be shared. The Resource Owner possesses the RELOAD certificate that grants write access to a specific Resource/Kind pair using the RELOAD certificate-based access control policies.",
      "ja": "リソース所有者：この文書に記載されている用語「リソースの所有者は、」当初、共有するリソースを格納しRELOADピアを定義します。リソースの所有者は、RELOAD証明書ベースのアクセス制御ポリシーを使用して、特定のリソース/カインドペアへの書き込みアクセスを許可するRELOAD証明書を持っています。"
    },
    {
      "indent": 3,
      "text": "Authorized Peer: The term \"Authorized Peer\" in this document defines a RELOAD peer that was granted write access to a Shared Resource by permission of the Resource Owner or another Authorized Peer.",
      "ja": "認定ピア：この文書に記載されている用語「許可ピアは、」リソースの所有者または別の許可ピアの許可を得て共有リソースへの書き込みアクセスを許可されたRELOADピアを定義します。"
    },
    {
      "indent": 0,
      "text": "3. Shared Resources in RELOAD",
      "section_title": true,
      "ja": "RELOAD 3.共有リソース"
    },
    {
      "indent": 3,
      "text": "A RELOAD user that owns a certificate for writing at a specific overlay location can maintain one or more RELOAD Kinds that are designated for a non-exclusive write access shared with other RELOAD users. The mechanism to share those Resource/Kind pairs with a group of users consists of two basic steps:",
      "ja": "特定のオーバーレイの場所に記述するための証明書を所有しているRELOADユーザーは、他のRELOADのユーザーと共有する非排他的な書き込みアクセス用に指定された1つまたは複数のRELOADの種類を維持することができます。ユーザーのグループと、それらのリソース/種類のペアを共有するためのメカニズムは、2つの基本的な手順で構成されます。"
    },
    {
      "indent": 3,
      "text": "1. Storage of the Resource/Kind pairs to be shared.",
      "section_title": true,
      "ja": "共有するリソース/種類のペアの1ストレージ。"
    },
    {
      "indent": 3,
      "text": "2. Storage of an Access Control List (ACL) associated with those Kinds.",
      "ja": "これらの種類に関連付けられているアクセス制御リスト（ACL）の2.ストレージ。"
    },
    {
      "indent": 3,
      "text": "ACLs are created by the Resource Owner and contain ACL items, each delegating the permission of writing the shared Kind to a specific user called the \"Authorized Peer\". For each shared Kind data, its Resource owner stores a root item that initiates an Access Control List. Trust delegation to the Authorized Peer can include the right to further delegate the write permission, enabling a tree of trust delegations with the Resource Owner as trust anchor at its root.",
      "ja": "ACLは、リソースの所有者によって作成されたACLの項目が含まれ、それぞれが特定のユーザに共有種類を書くの許可を委任されている「許可ピア」と呼ばれます。各共有の種類のデータのために、そのリソースの所有者は、アクセス制御リストを開始するルートアイテムを格納します。認定ピアへの信頼代表団は、そのルートにトラストアンカーとしてリソースの所有者との信頼代表団の木を有効にする、さらに書き込み権限を委譲する権利を含めることができます。"
    },
    {
      "indent": 3,
      "text": "The Resource/Kind pair to be shared can be any RELOAD Kind that complies to the following specifications:",
      "ja": "共有するリソース/種類のペアは、次の仕様に準拠して任意のRELOAD親切にすることができます："
    },
    {
      "indent": 3,
      "text": "Isolated Data Storage: To prevent concurrent writing from race conditions, each data item stored within a Shared Resource SHALL be exclusively maintained by the RELOAD user who created it. Hence, Usages that allow the storage of Shared Resources are REQUIRED to use either the array or dictionary data model and apply additional mechanisms for isolating data as described in Section 3.1.",
      "ja": "孤立データ・ストレージ：競合状態からの同時書き込みを防止するために、共有リソース内に格納された各データ項目は、もっぱらそれを作成したRELOADユーザーによって維持されなければなりません。したがって、共有リソースの格納を可能にする用途は、配列または辞書データモデルのいずれかを使用して、セクション3.1で説明したようにデータを分離するための追加のメカニズムを適用するために必要とされます。"
    },
    {
      "indent": 3,
      "text": "Access Control Policy: To ensure write access to Shared Resource by Authorized Peers, each Usage MUST use the USER-CHAIN-ACL access policy as described in Section 6.6.",
      "ja": "アクセス制御ポリシーは：セクション6.6で説明したように、認定ピアによって共有リソースへの書き込みアクセスを確保するために、それぞれの用法は、USER-CHAIN-ACLのアクセスポリシーを使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Resource Name Extension: To enable Shared Resources to be stored using a variable resource name, this document defines an optional ResourceNameExtension structure. It contains the Resource Name of the Kind data to be stored and allows any receiver of a shared data to validate whether the Resource Name hashes to the Resource-ID. The ResourceNameExtension is made optional by configuration. The ResourceNameExtension field is only present in the Kind data structure when configured in the corresponding kind-block of the overlay configuration document (for more details, see Section 5.3). If the configuration allows variable resource names, a Kind using the USER-CHAIN-ACL policy MUST use the ResourceNameExtension as the initial field within the Kind data structure definition. Otherwise, the Kind data structure does not contain the ResourceNameExtension structure.",
      "ja": "リソース名拡張子：変数リソース名を使用して保存する共有リソースを有効にするには、この文書では、オプションのResourceNameExtension構造を定義します。それが格納される種類のデータのリソース名が含まれており、共有データの受信機は、リソース名、リソース-IDをハッシュするかどうかを検証することを可能にします。 ResourceNameExtensionは、コンフィギュレーションではオプション行われます。オーバーレイ設定文書の対応する種類のブロックで構成されている場合ResourceNameExtensionフィールドは種類のデータ構造内にのみ存在する（詳細については、セクション5.3を参照）。設定は、変数リソース名を許可している場合、USER-CHAIN-ACLのポリシーを使用した種類は、種類のデータ構造定義内の最初のフィールドとしてResourceNameExtensionを使用しなければなりません。それ以外の場合は、種類のデータ構造はResourceNameExtension構造が含まれていません。"
    },
    {
      "indent": 0,
      "text": "3.1. Mechanisms for Isolating Stored Data",
      "section_title": true,
      "ja": "3.1. 保存されたデータを分離するためのメカニズム"
    },
    {
      "indent": 3,
      "text": "This section defines mechanisms to avoid race conditions while concurrently writing an array or dictionary of a Shared Resource.",
      "ja": "このセクションは、同時に共有リソースの配列または辞書の書き込み中に競合状態を回避するためのメカニズムを定義します。"
    },
    {
      "indent": 3,
      "text": "If a dictionary is used in the Shared Resource, the dictionary key MUST be the Node-ID of the certificate that will be used to sign the stored data. Thus, data access is bound to the unique ID holder, and write concurrency does not occur.",
      "ja": "辞書は共有リソースで使用されている場合は、辞書のキーは、格納されたデータに署名するために使用される証明書のノードIDでなければなりません。このように、データ・アクセスは、ユニークなIDホルダーにバインドされ、書き込みの同時実行が発生しません。"
    },
    {
      "indent": 3,
      "text": "If the data model of the Shared Resource is an array, each Authorized Peer that chooses to write data SHALL obtain its exclusive range of the array indices. The following algorithm will generate an array indexing scheme that avoids collisions:",
      "ja": "共有リソースのデータモデルが配列の場合、データを書き込むことを選択する各許可ピアは、配列インデックスの排他的範囲を得なければなりません。次のアルゴリズムは、衝突を回避し、配列のインデックススキームを生成します。"
    },
    {
      "indent": 3,
      "text": "1. Obtain the Node-ID of the certificate that will be used to sign the stored data.",
      "ja": "1.保存されたデータに署名するために使用される証明書のノードIDを取得します。"
    },
    {
      "indent": 3,
      "text": "2. Take the least significant 24 bits of that Node-ID to prefix the array index.",
      "ja": "2.配列インデックスを付けるためにそのノードIDの最下位24ビットを取ります。"
    },
    {
      "indent": 3,
      "text": "3. Append an 8-bit individual index value to those 24 bits of the Node-ID.",
      "ja": "3.ノードIDのこれらの24ビットに8ビット個別指標値を追加します。"
    },
    {
      "indent": 3,
      "text": "The resulting 32-bit long integer MUST be used as the index for storing an array entry in a Shared Resource. The 24 bits of the Node-ID serve as a collision-resistant identifier. The 8-bit individual index remains under the control of a single Peer and can be incremented individually for further array entries. In total, each Peer can generate 256 distinct entries for application-specific use.",
      "ja": "得られた32ビット長の整数は、共有リソースの配列エントリを格納するための指標として使用されなければなりません。ノードIDの24ビットは、衝突耐性の識別子として機能します。 8ビットの個々のインデックスは、単一ピアの制御下に留まり、さらに配列エントリのために個別にインクリメントすることができます。合計では、各ピアは、アプリケーション固有の使用のための256個の異なるエントリを生成することができます。"
    },
    {
      "indent": 3,
      "text": "The mechanism to create the array index inherits collision-resistance from the overlay hash function in use (e.g., SHA-1). It is designed to work reliably for small sizes of groups as applicable to resource sharing. In the rare event of a collision, the Storing Peer will refuse to (over-)write the requested array index and protect indexing integrity as defined in Section 6.1. A Peer could rejoin the overlay with a different Node-ID in such a case.",
      "ja": "配列インデックスを作成するための機構は、使用中のオーバーレイハッシュ関数（例えば、SHA-1）からの衝突抵抗を継承します。共有資源に該当するとして、グループの小さいサイズのために確実に動作するように設計されています。衝突のまれな場合には、保存ピアは（オーバー）要求された配列のインデックスを作成し、6.1節で定義されたインデックスの整合性を保護することを拒否します。ピアは、このような場合には異なるノードIDとのオーバーレイを再結合できました。"
    },
    {
      "indent": 0,
      "text": "4. Access Control List Definition",
      "section_title": true,
      "ja": "4.アクセス制御リストの定義"
    },
    {
      "indent": 0,
      "text": "4.1. Overview",
      "section_title": true,
      "ja": "4.1. 概要"
    },
    {
      "indent": 3,
      "text": "An Access Control List (ACL) is a (self-managed) Shared Resource that contains a list of AccessControlListItem structures as defined in Section 4.2. Each entry delegates write access for a specific Kind data to a single RELOAD user. An ACL enables the RELOAD user who is authorized to write a specific Resource-ID to delegate his exclusive write access to a specific Kind to further users of the same RELOAD overlay. Therefore, each Access Control List data structure carries the information about who obtains write access, the Kind-ID of the Resource to be shared, and whether delegation includes write access to the ACL itself. The latter condition grants the right to delegate write access further for the Authorized Peer. Access Control Lists are stored at the same overlay location as the Shared Resource and use the RELOAD array data model. They are initially created by the Resource Owner.",
      "ja": "アクセス制御リスト（ACL）は、（自己管理）共有リソースセクション4.2で定義されているようAccessControlListItem構造のリストが含まれています。各エントリの代表者は、単一RELOADユーザーに特定の種類のデータへのアクセスを書いてください。 ACLは同じRELOADオーバーレイの更なるユーザーに特定の種類の彼の排他的な書き込みアクセスを委任するために、特定のリソース-IDを書き込むことが許可されているRELOADユーザーを可能にします。したがって、各アクセス制御リストのデータ構造は、書き込みアクセス権を取得するかについての情報を搬送するリソースの種類-IDを共有する、および委任がACL自体への書き込みアクセスを含むかどうか。後者の条件は、認定ピアのために、さらに書き込みアクセスを委任する権利を付与します。アクセス制御リストは、共有リソースと同じオーバーレイの場所に格納され、リロード配列データモデルを使用しています。彼らは、最初のリソースの所有者によって作成されます。"
    },
    {
      "indent": 3,
      "text": "Figure 1 shows an example of an Access Control List. We omit the res_name_ext field to simplify illustration. The array entry at index 0x123abc01 displays the initial creation of an ACL for a Shared Resource of Kind-ID 1234 at the same Resource-ID. It represents the root item of the trust delegation tree for this shared RELOAD Kind. The root entry MUST contain the username of the Resource owner in the \"to_user\" field and can only be written by the owner of the public key certificate associated with this Resource-ID. The allow_delegation (ad) flag for a root ACL item is set to 1 by default. The array index is generated by using the mechanism for isolating stored data as described in Section 3.1. Hence, the most significant 24 bits of the array index (0x123abc) are the least significant 24 bits of the Node-ID of the Resource Owner.",
      "ja": "図1は、アクセス制御リストの一例を示しています。我々は、説明を簡単にするためにres_name_extフィールドを省略します。 0x123abc01ディスプレイ種類-IDが1234の共有リソースのACLの初期作成同じリソース-IDでインデックスで配列エントリ。これは、この共有RELOAD種類の信頼委任ツリーのルート項目を表します。ルートエントリは「to_user」フィールドに、リソースの所有者のユーザー名を含まなければならないし、これだけのリソース-IDに関連付けられた公開鍵証明書の所有者が書き込むことができます。ルートACL項目のallow_delegation（AD）フラグはデフォルトで1に設定されています。配列インデックスは、セクション3.1で説明したように格納されたデータを分離するためのメカニズムを用いて生成されます。したがって、配列インデックス（0x123abc）の最上位24ビットは、リソース所有者のノードIDの下位24ビットです。"
    },
    {
      "indent": 3,
      "text": "The array item at index 0x123abc02 represents the first trust delegation to an Authorized Peer that is thus permitted to write to the Shared Resource of Kind-ID 1234. Additionally, the Authorized peer Alice is also granted write access to the ACL as indicated by the allow_delegation flag (ad) set to 1. This configuration authorizes Alice to store further trust delegations to the Shared Resource, i.e., add items to the ACL. On the contrary, index 0x456def01 illustrates trust delegation for Kind-ID 1234, in which the Authorized Peer Bob is not allowed to grant access to further peers (ad = 0). Each Authorized Peer signs its ACL items by using its own signer identity along with its own private key. This allows other peers to validate the origin of an ACL item and makes ownership transparent.",
      "ja": "インデックス0x123abc02で配列項目は、このようにさらに種類-ID 1234の共有リソースへの書き込みを許可されている正規のピアに第信頼委任を表し、アリスはまた、ACLへの書き込みアクセスが許可され認定ピアはallow_delegationによって示されるようにフラグ（広告）は、この構成は、アリスは、すなわち、共有リソースへの更なる信頼代表団を保存ACLに項目を追加するために許可を1に設定します。逆に、指数0x456def01は、許可ピアボブはさらにピア（AD = 0）へのアクセスを許可する許可されていない種類-ID 1234の信頼委任を示します。各認定ピアが自身の秘密鍵と一緒に、独自の署名者のIDを使って、そのACL項目に署名します。これは、他のピアは、ACL項目の起源を検証することを可能にし、所有権が透明になります。"
    },
    {
      "indent": 3,
      "text": "To manage Shared Resource access of multiple Kinds at a single location, the Resource Owner can create new ACL entries that refer to another Kind-ID as shown in array entry index 0x123abc03. Note that overwriting existing items in an Access Control List with a change in the Kind-ID revokes all trust delegations in the corresponding subtree (see Section 6.2). Authorized Peers are only enabled to overwrite existing ACL item they own. The Resource Owner is allowed to overwrite any existing ACL item, but should be aware of its consequences on the trust delegation chain.",
      "ja": "単一の場所で複数種類の共有リソースへのアクセスを管理するために、リソース所有者は、配列エントリインデックス0x123abc03に示すように、別の種類-IDを参照して新しいACLエントリを作成することができます。種類-IDの変化に伴って、アクセス制御リスト内の既存のアイテムを上書きすると、対応するサブツリー内のすべての信頼の委任を取り消すことに注意してください（セクション6.2を参照してください）。認定ピアは、彼らだけが所有する既存のACL項目を上書きすることが有効になっています。リソースの所有者は、既存のACL項目を上書きすることができますが、信頼の委任チェーンへの影響に注意する必要があります。"
    },
    {
      "indent": 9,
      "text": "+------------------------------------------------------+\n|                Access Control List                   |\n+-----------+------------------------------+-----------+\n|  #Index   |       Array Entries          | signed by |\n+-----------+------------------------------+-----------+\n| 123abc01  | to_user:Owner Kind:1234 ad:1 |   Owner   |\n+-----------+------------------------------+-----------+\n| 123abc02  | to_user:Alice Kind:1234 ad:1 |   Owner   |\n+-----------+------------------------------+-----------+\n| 123abc03  | to_user:Owner Kind:4321 ad:1 |   Owner   |\n+-----------+------------------------------+-----------+\n| 123abc04  | to_user:Carol Kind:4321 ad:0 |   Owner   |\n+-----------+------------------------------+-----------+\n|    ...    |           ...                |    ...    |\n+-----------+------------------------------+-----------+\n| 456def01  | to_user:Bob   Kind:1234 ad:0 |   Alice   |\n+-----------+------------------------------+-----------+\n|    ...    |           ...                |    ...    |\n+-----------+------------------------------+-----------+",
      "raw": true
    },
    {
      "indent": 5,
      "text": "Figure 1: Simplified Example of an Access Control List, Including Entries for Two Different Kind-IDs and Varying Delegation (AD) Configurations",
      "ja": "図1：アクセス制御リストの簡易化の例では、2つの異なる種類-IDと変化させた委任を含めエントリ（AD）の構成"
    },
    {
      "indent": 3,
      "text": "Implementors of ShaRe should be aware that the trust delegation in an Access Control List need not be loop free. Self-contained circular trust delegation from A to B and B to A are syntactically possible, even though not very meaningful.",
      "ja": "SHAREの実装者は、アクセス制御リストで信頼の代表団がループ自由である必要はないことに注意する必要があります。 BとBにAへの自己完結型の円形信託委任非常に意味のある構文的に可能であり、たとえではありません。"
    },
    {
      "indent": 0,
      "text": "4.2. Data Structure",
      "section_title": true,
      "ja": "4.2. データ構造"
    },
    {
      "indent": 3,
      "text": "The Kind data structure for the Access Control List is defined as follows:",
      "ja": "次のようにアクセス制御リストのための種類のデータ構造が定義されています。"
    },
    {
      "indent": 3,
      "text": "struct {\n     /* res_name_ext is optional, see documentation */\n     ResourceNameExtension  res_name_ext;\n     opaque                 to_user<0..2^16-1>;\n     KindId                 kind;\n     Boolean                allow_delegation;\n} AccessControlListItem;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AccessControlListItem structure is composed of:",
      "ja": "AccessControlListItem構造が構成されています。"
    },
    {
      "indent": 3,
      "text": "res_name_ext: This optional field contains the Resource Name of a ResourceNameExtension (see Section 5.2) to be used by a Shared Resource with a variable resource name. This name is used by the storing peer for validating, whether a variable resources name matches one of the predefined naming pattern from the configuration document for this Kind. The presence of this field is bound to a variable resource name element in the corresponding kind-block of the configuration document whose \"enable\" attribute is set to true (see Section 5.3). Otherwise, if the \"enable\" attribute is false, the res_name_ext field SHALL NOT be present in the Kind data structure.",
      "ja": "res_name_ext：このオプションフィールドは、変数のリソース名と共有リソースが使用する（5.2節を参照）ResourceNameExtensionのリソース名が含まれています。この名前は、変数リソース名は、この種の構成ドキュメントから事前定義された名前付けパターンのいずれかと一致するかどうかを、検証のために記憶するピアによって使用されます。このフィールドの存在は、構成文書の対応する種類のブロック内の変数リソースのname要素にバインドされている属性がtrueに設定されている「有効」（5.3節を参照してください）。属性がfalseである「有効」な場合には、そのres_name_extフィールドは、種類のデータ構造内に存在してはなりません。"
    },
    {
      "indent": 3,
      "text": "to_user: This field contains the username of the RELOAD peer that obtains write permission to the Shared Resource.",
      "ja": "to_user：このフィールドは、共有リソースへの書き込み権限を取得RELOADピアのユーザ名が含まれています。"
    },
    {
      "indent": 3,
      "text": "kind: This field contains the Kind-ID of the Shared Resource.",
      "ja": "種類：このフィールドには、共有リソースの種類-IDが含まれています。"
    },
    {
      "indent": 3,
      "text": "allow_delegation: If true, this Boolean flag indicates that the Authorized Peer in the 'to_user' field is allowed to add additional entries to the ACL for the specified Kind-ID.",
      "ja": "allow_delegation：trueの場合、このブールフラグは「to_user」フィールドの正規ピアが指定された種類-IDのACLにエントリを追加することが許可されていることを示しています。"
    },
    {
      "indent": 0,
      "text": "5. Extension for Variable Resource Names",
      "section_title": true,
      "ja": "変数リソース名5.拡張"
    },
    {
      "indent": 0,
      "text": "5.1. Overview",
      "section_title": true,
      "ja": "5.1. 概要"
    },
    {
      "indent": 3,
      "text": "In certain use cases, such as conferencing, it is desirable to increase the flexibility of a peer in using Resource Names beyond those defined by the username or Node-ID fields in its certificate. For this purpose, this document presents the concept for variable Resources Names that enables providers of RELOAD instances to define relaxed naming schemes for overlay Resources.",
      "ja": "そのような会議のような特定のユースケースでは、その証明書にユーザー名またはノードIDフィールドによって定義されるものを超えてリソース名を使用してピアの柔軟性を高めることが望ましいです。このために、このドキュメントは、オーバーレイリソースのリラックスした命名スキームを定義するにはRELOADインスタンスの提供を可能にし、変数の資源名の概念を提示します。"
    },
    {
      "indent": 3,
      "text": "Each RELOAD node uses a certificate to identify itself using its username (or Node-ID) while storing data under a specific Resource-ID (see Section 7.3 in [RFC6940]). The specifications in this document scheme adhere to this paradigm, but enable a RELOAD peer to store values of Resource Names that are derived from the username in its certificate. This is done by using a Resource Name with a variable substring that still matches the username in the certificate using a pattern defined in the overlay configuration document. Thus, despite being variable, an allowable Resource Name remains tied to the Owner's certificate. A sample pattern might be formed as follows:",
      "ja": "特定のリソース-ID（[RFC6940]セクション7.3を参照）の下でデータを保存しながら、各リロードノードは、そのユーザ名（またはノードID）を使用して自分自身を識別するための証明書を使用します。このドキュメント方式で仕様がこのパラダイムに準拠しますが、その証明書内のユーザー名に由来しているリソース名の値を格納するRELOADピアを有効にします。これは、まだオーバーレイの設定文書で定義されたパターンを使用して証明書には、ユーザー名と一致する変数のサブストリングとリソース名を使用して行われます。従って、可変であるにもかかわらず、許容リソース名は、所有者の証明書に関連付けられたまま。次のようにサンプルパターンが形成されることがあります。"
    },
    {
      "indent": 3,
      "text": "Example Pattern: .*-conf-$USER@$DOMAIN",
      "ja": "。例パターン：*  -  conf-の$ USER @ます$ DOMAIN"
    },
    {
      "indent": 3,
      "text": "When defining the pattern, care must be taken to avoid conflicts arising from two usernames of which one is a substring of the other. In such cases, the holder of the shorter name could threaten to block the resources of the longer-named peer by choosing the variable part of a Resource Name to contain the entire longer username. For example, a \"*$USER\" pattern would allow user EVE to define a resource with name \"STEVE\" and to block the resource name for user STEVE through this. This problem can easily be mitigated by delimiting the variable part of the pattern from the username part by some fixed string, that by convention is not part of a username (e.g., the \"-conf-\" in the above Example).",
      "ja": "パターンを定義する場合、注意は、一方が他方のサブストリングである2つのユーザー名から生じる競合を避けるために注意しなければなりません。このような場合には、短い名前の所有者は、全体の長いユーザ名を含むようにリソース名の可変部分を選択することにより、長い名前のピアのリソースをブロックするために脅かします。たとえば、「*する$ USER」パターンは、名称「STEVE」でリソースを定義し、これを介してユーザーSTEVEのリソース名をブロックするために、ユーザーEVEを可能にします。この問題は容易に慣例により、ユーザ名（例えば、「-conf-」上記実施例）の一部ではないことは、いくつかの固定された文字列でユーザ名部分からパターンの可変部分を画定することによって緩和することができます。"
    },
    {
      "indent": 0,
      "text": "5.2. Data Structure",
      "section_title": true,
      "ja": "5.2. データ構造"
    },
    {
      "indent": 3,
      "text": "This section defines the optional ResourceNameExtension structure for every Kind that uses the USER-CHAIN-ACL access control policy.",
      "ja": "このセクションでは、USER-CHAIN-ACLアクセス制御ポリシーを使用するすべての種類の任意ResourceNameExtension構造を定義します。"
    },
    {
      "indent": 3,
      "text": "enum { pattern(1), (255)} ResourceNameType;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "struct {\n  ResourceNameType type;\n  uint16           length;",
      "raw": true
    },
    {
      "indent": 5,
      "text": "select(type) { case pattern: opaque resource_name<0..2^16-1>;",
      "ja": "（タイプ）{ケースパターン選択：不透明RESOURCE_NAME <0..2 ^ 16-1>。"
    },
    {
      "indent": 3,
      "text": "      /* Types can be extended */\n  };\n} ResourceNameExtension;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The content of the ResourceNameExtension consists of:",
      "ja": "ResourceNameExtensionの内容は、から構成されています。"
    },
    {
      "indent": 3,
      "text": "length: This field contains the length of the remaining data structure. It is only used to allow for further extensions to this data structure.",
      "ja": "長さ：このフィールドは、残りのデータ構造の長さが含まれています。これだけのデータ構造へのさらなる拡張を可能にするために使用されます。"
    },
    {
      "indent": 3,
      "text": "The content of the rest of the data structure depends of the ResourceNameType. Currently, the only defined type is \"pattern\".",
      "ja": "データ構造の残りの内容はResourceNameTypeに依存します。現在、唯一の定義されたタイプは、「パターン」です。"
    },
    {
      "indent": 3,
      "text": "If the type is \"pattern\", then the following data structure contains an opaque <0..2^16-1> field containing the Resource Name of the Kind being stored. The type \"pattern\" further indicates that the Resource Name MUST match to one of the variable resource name patterns defined for this Kind in the configuration document.",
      "ja": "種類は「パターン」である場合は、次のデータ構造が格納されている種類のリソース名を含む不透明<0..2 ^ 16-1>のフィールドが含まれています。タイプ「パターン」は、さらにリソース名が設定文書で、この種のために定義された変数リソース名のパターンのいずれかに一致している必要があることを示しています。"
    },
    {
      "indent": 3,
      "text": "The ResourceNameType enum and the ResourceNameExtension structure can be extended by further Usages to define other naming schemes.",
      "ja": "ResourceNameType列挙とResourceNameExtension構造は、他の命名スキームを定義するために、さらに用途によって拡張することができます。"
    },
    {
      "indent": 0,
      "text": "5.3. Overlay Configuration Document Extension",
      "section_title": true,
      "ja": "5.3. オーバーレイの設定文書拡張"
    },
    {
      "indent": 3,
      "text": "This section extends the overlay configuration document by defining new elements for patterns relating resource names to usernames. It is noteworthy that additional constraints on the syntax and semantic of names can apply according to specific Usages. For example, Address of Record (AOR) syntax restrictions apply when using P2PSIP [RFC7904], while a more general naming is feasible in plain RELOAD.",
      "ja": "このセクションでは、ユーザ名にリソース名に関連するパターンのための新しい要素を定義することで、オーバーレイの設定文書を拡張します。名前の構文とセマンティック上の追加の制約は、特定の用途に応じて適用することができますことは注目に値します。 P2PSIP [RFC7904]を使用するときに、より一般的な命名が普通RELOADで実現可能である一方、例えば、レコードのアドレス（AOR）構文の制限は、適用されます。"
    },
    {
      "indent": 3,
      "text": "The <variable-resource-names> element serves as a container for one or multiple <pattern> sub-elements. It is an additional parameter within the kind-block and has a boolean \"enable\" attribute that indicates, if true, that the overlay provider allows variable resource names for this Kind. The default value of the \"enable\" attribute is \"false\". In the absence of a <variable-resource-names> element for a Kind using the USER-CHAIN-ACL access policy (see Section 6.6), implementors MUST assume this default value.",
      "ja": "<可変リソース名>要素は、1つまたは複数の<パターン>サブ要素のコンテナとして機能します。それは一種ブロック内に追加のパラメータであり、真の場合、オーバーレイ・プロバイダーは、この種の変数リソース名を許可することを、示すboolean「有効」属性を持っています。 「有効」属性のデフォルト値は「false」です。 <可変リソース名> USER-CHAIN-ACLのアクセスポリシーを使用して種類（6.6節を参照）のための要素が存在しない場合には、実装者は、このデフォルト値を仮定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "A <pattern> element MUST be present if the \"enabled\" attribute of its parent element is set to true. Each <pattern> element defines a pattern for constructing extended resource names for a single Kind. It is of type xsd:string and interpreted as a regular expression according to \"POSIX Extended Regular Expression\" (see the specifications in [IEEE-Posix]). In this regular expression, $USER and $DOMAIN are used as variables for the corresponding parts of the string in the certificate username field (with $USER preceding and $DOMAIN succeeding the '@'). Both variables MUST be present in any given pattern definition. Furthermore, variable parts in <pattern> elements defined in the overlay configuration document MUST remain syntactically separated from the username part (e.g., by a dedicated delimiter) to prevent collisions with other names of other users. If no pattern is defined for a Kind, if the \"enable\" attribute is false, or if the regular expression does not meet the requirements specified in this section, the allowable Resource Names are restricted to the username of the signer for Shared Resource.",
      "ja": "その親要素の「有効」属性がtrueに設定されている場合は、<パターン>要素が存在しなければなりません。各<パターン>要素は、単一の種類の拡張されたリソース名を構築するためのパターンを画定します。これは、型XSDである：文字列と（[IEEE-のPosix]で仕様を参照）、「POSIX拡張正規表現」に従って正規表現として解釈されます。この正規表現では、$ USERと$ DOMAINは（前後$ DOMAINは「@」を、後続の$ USERで）証明書のユーザ名フィールド内の文字列の対応する部分のための変数として使用されています。両方の変数は、任意の所与のパターン定義に存在していなければなりません。また、可変部分は、<パターン>オーバーレイ設定文書で定義された要素は、構文的に他のユーザの他の名前との衝突を防止するために、（専用デリミタによって、例えば）ユーザ名部分から分離されたままでなければなりません。何パターンは種類のために定義されていない場合、もし「有効」属性が偽である、または正規表現は、このセクションで指定された要件を満たしていない場合は、許容リソース名は、共有リソースのための署名者のユーザ名に制限されています。"
    },
    {
      "indent": 3,
      "text": "The RELAX NG Grammar for the Variable Resource Names Extension reads:",
      "ja": "読み込み変数リソース名拡張のためにNG文法をRELAX："
    },
    {
      "indent": 3,
      "text": "# VARIABLE RESOURCE URN SUB-NAMESPACE",
      "ja": "＃VARIABLE RESOURCEのURNのSUB-NAMESPACE"
    },
    {
      "indent": 3,
      "text": "namespace share = \"urn:ietf:params:xml:ns:p2p:config-base:share\"",
      "ja": "名前空間を共有= \"壷：IETF：のparams：XML：NS：P2Pます。config-ベース：シェア\""
    },
    {
      "indent": 3,
      "text": "# VARIABLE RESOURCE NAMES ELEMENT",
      "ja": "＃VARIABLEリソース名のELEMENT"
    },
    {
      "indent": 3,
      "text": "kind-parameter &= element share:variable-resource-names {",
      "ja": "種別パラメータ＆=エレメントシェア：可変リソース名{"
    },
    {
      "indent": 7,
      "text": "attribute enable { xsd:boolean },",
      "ja": "{XSD：ブール}可能属性"
    },
    {
      "indent": 7,
      "text": "# PATTERN ELEMENT",
      "ja": "＃パターン要素"
    },
    {
      "indent": 3,
      "text": " element share:pattern { xsd:string }* }?",
      "ja": "要素シェア：パターン{XSD：文字列} *}？"
    },
    {
      "indent": 3,
      "text": "Whitespace and case processing follows the rules of [OASIS.relax_ng] and XML Schema Datatypes [W3C.REC-xmlschema-2-20041028].",
      "ja": "空白とケース処理のルール[OASIS.relax_ng]及びXMLスキーマデータ型を次の[W3C.REC-XMLSCHEMA-2から20041028]。"
    },
    {
      "indent": 0,
      "text": "6. Access Control to Shared Resources",
      "section_title": true,
      "ja": "共有リソースへ6.アクセス制御"
    },
    {
      "indent": 0,
      "text": "6.1. Granting Write Access",
      "section_title": true,
      "ja": "6.1. 書き込みアクセス権の許可"
    },
    {
      "indent": 3,
      "text": "Write access to a Kind that is intended to be shared with other RELOAD users can be initiated solely by the Resource Owner. A Resource Owner can share RELOAD Kinds by using the following procedure:",
      "ja": "他RELOADのユーザーと共有することを意図している種類へのアクセスを書く、リソースの所有者によってのみ開始することができます。リソースの所有者は、次の手順を使用してRELOADの種類を共有することができます。"
    },
    {
      "indent": 3,
      "text": "o The Resource Owner stores an ACL root item at the Resource-ID of the Shared Resource. The root item contains the ResourceNameExtension field (see Section 5.2), the username of the Resource Owner and Kind-ID of the Shared Resource. The allow_delegation flag is set to 1. The index of array data structure MUST be generated as described in Section 3.1.",
      "ja": "Oリソースのオーナーは、共有リソースのリソース-IDでACLルートアイテムを格納します。ルートアイテムはResourceNameExtensionフィールド（5.2節を参照）、リソースの所有者と共有リソースの種類-IDのユーザー名が含まれています。 allow_delegationフラグは、セクション3.1で説明したように配列のインデックスを生成する必要1に設定されています。"
    },
    {
      "indent": 3,
      "text": "o Further ACL items for this Kind-ID stored by the Resource Owner MAY delegate write access to Authorized Peers. These ACL items contain the same resource name extension field, the username of the Authorized Peer, and the Kind-ID of the Shared Resource. Optionally, the Resource Owner sets the \"ad\" to 1 (the default equals 0) to enable the Authorized Peer to further delegate write access. For each succeeding ACL item, the Resource Owner increments its individual index value by one (see Section 3.1) so that items can be stored in the numerical order of the array index starting with the index of the root item.",
      "ja": "Oリソースの所有者によって保存されたこの種-IDのためのさらなるACL項目は、認定ピアへの書き込みアクセスを委任することができます。これらのACL項目は、同じリソース名の拡張フィールド、認定ピアのユーザ名、および共有リソースの種類-IDが含まれています。必要に応じて、リソースの所有者は、さらに書き込みアクセスを委任する認定ピアを有効にする（デフォルトは0に等しい）1に「広告」に設定します。アイテムはルートアイテムのインデックスから始まる配列インデックスの番号順に格納することができるように、各後続ACL項目について、リソース所有者は一つの個別指標値をインクリメントする（セクション3.1を参照）。"
    },
    {
      "indent": 3,
      "text": "An Authorized Peer with delegation allowance (\"ad\"=1) can extend the access to an existing Shared Resource as follows:",
      "ja": "次のように委任手当（「広告」= 1）と認定ピアは、既存の共有リソースへのアクセスを拡張することができます。"
    },
    {
      "indent": 3,
      "text": "o An Authorized Peer can store additional ACL items at the Resource-ID of the Shared Resource. These ACL items contain the resource name extension field, the username of the newly Authorized Peer, and the Kind-ID of the Shared Resource. Optionally, the \"ad\" flag is set to 1 for allowing the newly Authorized Peer to further delegate write access. The array index MUST be generated as described in Section 3.1. Each succeeding ACL item can be stored in the numerical order of the array index.",
      "ja": "O許可ピアは、共有リソースのリソース-IDに追加のACL項目を格納することができます。これらのACL項目は、リソース名の拡張フィールド、新たに認定ピアのユーザ名、および共有リソースの種類-IDが含まれています。必要に応じて、「広告」のフラグが新たに認定ピアはさらに書き込みアクセスを委任することを可能にするための1に設定されています。セクション3.1で説明したように配列インデックスが生成されなければなりません。後続の各ACL項目は、配列インデックスの番号順に格納することができます。"
    },
    {
      "indent": 3,
      "text": "A store request by an Authorized Peer that attempts to overwrite any ACL item signed by another Peer is unauthorized and causes an Error_Forbidden response from the Storing Peer. Such access conflicts could be caused by an array index collision. However, the probability of a collision of two or more identical array indices will be negligibly low using the mechanism for isolating stored data (see Section 3.1).",
      "ja": "別のピアによって署名された任意のACL項目を上書きしようと認定ピアによってストア要求が不正であると保存ピアからError_Forbidden応答を引き起こします。このようなアクセスの競合が配列インデックスの衝突によって発生する可能性があります。しかし、2つ以上の同一配列インデックスの衝突の確率が格納されたデータを（セクション3.1を参照）を単離するための機構を使用して無視できるほど低くなります。"
    },
    {
      "indent": 0,
      "text": "6.2. Revoking Write Access",
      "section_title": true,
      "ja": "6.2. 書き込みアクセスを取り消し"
    },
    {
      "indent": 3,
      "text": "Write permissions are revoked by storing a nonexistent value (see [RFC6940], Section 7.2.1) at the corresponding item of the Access Control List. Revoking a permission automatically invalidates all delegations performed by that user including all subsequent delegations. This allows the invalidation of entire subtrees of the delegations tree with only a single operation. Overwriting the root item with a nonexistent value of an Access List invalidates the entire delegations tree.",
      "ja": "書き込み権限が存在しない値を格納することによって取り消されるアクセス制御リストの対応する項目に（[RFC6940]、セクション7.2.1を参照）。許可を取り消すと、自動的にすべての後続の代表団を含め、そのユーザによって実行されたすべての代表団が無効になります。これは、単一の操作で代表団ツリーのサブツリー全体の無効化を可能にします。アクセスリストの存在しない値でルートアイテムを上書きすると、全体の代表団ツリーを無効にします。"
    },
    {
      "indent": 3,
      "text": "An existing ACL item MUST only be overwritten by the user who initially stored the corresponding entry, or by the Resource Owner that is allowed to overwrite all ACL items for revoking write access.",
      "ja": "既存のACL項目は、最初は書き込みアクセスを取り消すためのすべてのACL項目を上書きすることが許可されている対応するエントリ、またはリソースの所有者では保存されているユーザーによって上書きされなければなりません。"
    },
    {
      "indent": 3,
      "text": "To protect the privacy of the users, the Resource Owner SHOULD overwrite all subtrees that have been invalidated.",
      "ja": "ユーザーのプライバシーを保護するため、リソースの所有者は、無効にされているすべてのサブツリーを上書きします。"
    },
    {
      "indent": 0,
      "text": "6.3. Validating Write Access through an ACL",
      "section_title": true,
      "ja": "6.3.  ACLによる書き込みアクセスの検証"
    },
    {
      "indent": 3,
      "text": "Access Control Lists are used to transparently validate authorization of peers for writing a data value at a Shared Resource. Thereby, it is assumed that the validating peer is in possession of the complete and most recent ACL for a specific Resource/Kind pair. The corresponding procedure consists of recursively traversing the trust delegation tree with strings compared as binary objects. It proceeds as follows:",
      "ja": "アクセス制御リストは、透過的に共有リソースのデータ値を書き込むためのピアの認証を検証するために使用されています。これにより、検証し、ピアは、特定のリソース/種類のペアのための完全かつ最新のACLの所有していることが想定されます。対応する手順は、再帰的バイナリオブジェクトとして比較文字列との信頼委任ツリーをトラバースから成ります。これは次のように進行します："
    },
    {
      "indent": 3,
      "text": "1. Obtain the username of the certificate used for signing the data stored at the Shared Resource. This is the user who requested the write operation.",
      "ja": "1.共有リソースに格納されたデータに署名するために使用される証明書のユーザ名を取得します。これは、書き込み動作を要求したユーザです。"
    },
    {
      "indent": 3,
      "text": "2. Validate that an item of the corresponding ACL (i.e., for this Resource/Kind pair) contains a \"to_user\" field whose value equals the username obtained in step 1. If the Shared Resource under examination is an Access Control List Kind, further validate if the \"ad\" flag is set to 1.",
      "ja": "対応するACL（すなわち、このリソースの/種類対）の項目は、さらに、値検査中の共有リソースは、アクセス制御リスト種である場合には、ステップ1で得られたユーザ名と等しい「to_user」フィールドが含まれていること2.検証「広告」フラグが1に設定されているかどうかを検証。"
    },
    {
      "indent": 3,
      "text": "3. Select the username of the certificate that was used to sign the ACL item obtained in the previous step.",
      "ja": "前のステップで得られたACL項目に署名するために使用された証明書のユーザ名を選択します。"
    },
    {
      "indent": 3,
      "text": "4. Validate that an item of the corresponding ACL contains a \"to_user\" field whose value equals the username obtained in step 3. Additionally, validate that the \"ad\" flag is set to 1.",
      "ja": "対応するACLの項目の値がさらに、ステップ3で取得したユーザ名に等しく、「広告」フラグが1に設定されていることを検証する「to_user」フィールドが含まれていることを検証4。"
    },
    {
      "indent": 3,
      "text": "5. Repeat steps 3 and 4 until the \"to_user\" value is equal to the username of the signer of the ACL in the selected item. This final ACL item is expected to be the root item of this ACL, which MUST be further validated by verifying that the root item was signed by the owner of the ACL Resource.",
      "ja": "「to_user」値が選択された項目にACLの署名者のユーザ名と等しくなるまで5.手順3と4を繰り返します。この最終的なACL項目は、さらにルートアイテムがACLリソースの所有者によって署名されたことを検証することによって検証する必要があり、このACLのルート項目であることが予想されます。"
    },
    {
      "indent": 3,
      "text": "The trust delegation chain is valid if and only if all verification steps succeed. In this case, the creator of the data value of the Shared Resource is an Authorized Peer.",
      "ja": "信頼委任チェーンは、すべての検証手順が成功した場合にのみ有効です。この場合には、共有リソースのデータ値の作成者は、許可ピアです。"
    },
    {
      "indent": 3,
      "text": "Note that the ACL validation procedure can be omitted whenever the creator of data at a Shared Resource is the Resource Owner itself. The latter can be verified by its public key certificate as defined in Section 6.6.",
      "ja": "共有リソースでのデータの作成者は、リソースの所有者自身であるときは常にACLの検証手順を省略することができることに注意してください。セクション6.6で定義され、後者は、その公開鍵証明書によって検証することができます。"
    },
    {
      "indent": 0,
      "text": "6.4. Operations of Storing Peers",
      "section_title": true,
      "ja": "6.4. ピアの保存の操作"
    },
    {
      "indent": 3,
      "text": "Storing peers, at which Shared Resource and ACL are physically stored, are responsible for controlling storage attempts to a Shared Resource and its corresponding Access Control List. To assert the USER-CHAIN-ACL access policy (see Section 6.6), a storing peer MUST perform the access validation procedure described in Section 6.3 on any incoming store request using the most recent Access Control List for every Kind that uses the USER-CHAIN-ACL policy. It SHALL further ensure that only the Resource Owner stores new ACL root items for Shared Resources.",
      "ja": "共有リソースおよびACLを物理的に格納される格納するピアは、共有リソースおよびその対応するアクセス制御リストに記憶試行を制御する責任があります。 USER-CHAIN-ACLアクセスポリシーを主張するために保存するピアがUSER-CHAINを使用するすべての種類のための最も最近のアクセス制御リストを使用して、任意の着信ストア要求にセクション6.3で説明したアクセスの検証手順を実行しなければなりません（セクション6.6を参照してください） -acl方針。さらに、唯一のリソースの所有者は、共有リソースのための新しいACLのルート項目を格納していることを確認しなければなりません。"
    },
    {
      "indent": 0,
      "text": "6.5. Operations of Accessing Peers",
      "section_title": true,
      "ja": "6.5. ピアへのアクセスの操作"
    },
    {
      "indent": 3,
      "text": "Accessing peers, i.e., peers that fetch a Shared Resource, can validate that the originator of a Shared Resource was authorized to store data at this Resource-ID by processing the corresponding ACL. To enable an accessing peer to perform the access validation procedure described in Section 6.3, it first needs to obtain the most recent Access Control List in the following way:",
      "ja": "ピアへのアクセス、すなわち、共有リソースをフェッチするピアは、共有リソースの発信者は、対応するACLを処理することによって、このリソース-IDのデータを格納するために承認されたことを検証することができます。 6.3節で説明したアクセスの検証手順を実行するためにアクセスするピアを有効にするには、まず次のように最新のアクセス制御リストを取得する必要があります。"
    },
    {
      "indent": 3,
      "text": "1. Send a Stat request to the Resource-ID of the Shared Resource to obtain all array indexes of stored ACL Kinds (as per [RFC6940], Section 7.4.3.).",
      "ja": "1.（[RFC6940]、セクション7.4.3のとおり。）が格納ACL種類のすべての配列のインデックスを取得するために、共有リソースのリソース-IDに統計要求を送信します。"
    },
    {
      "indent": 3,
      "text": "2. Fetch all indexes of existing ACL items at this Resource-ID by using the array ranges retrieved in the Stat request answer.",
      "ja": "2.スタット要求回答で検索配列範囲を使用して、このリソース-IDの既存ACL項目のすべてのインデックスを取得。"
    },
    {
      "indent": 3,
      "text": "Peers can cache previously fetched Access Control Lists up to the maximum lifetime of an individual item. Since stored values could have been modified or invalidated prior to their expiration, an accessing peer SHOULD use a Stat request to check for updates prior to using the data cache.",
      "ja": "ピアは、以前にフェッチされたアクセス制御は、個々の項目の最大寿命まで表示されますキャッシュできます。格納された値が変更またはそれらの満了前に無効化されている可能性があるため、アクセスピアがデータ・キャッシュを使用する前に更新を確認するために統計要求を使用すべきです。"
    },
    {
      "indent": 0,
      "text": "6.6. USER-CHAIN-ACL Access Policy",
      "section_title": true,
      "ja": "6.6.  USER-CHAIN-ACLアクセスポリシー"
    },
    {
      "indent": 3,
      "text": "This document specifies an additional access control policy to the RELOAD base document [RFC6940]. The USER-CHAIN-ACL policy allows Authorized Peers to write a Shared Resource, even though they do not own the corresponding certificate. Additionally, the USER-CHAIN-ACL allows the storage of Kinds with a variable resource name that are following one of the specified naming patterns. Hence, on an inbound store request on a Kind that uses the USER-CHAIN-ACL access policy, the following rules MUST be applied:",
      "ja": "この文書では、RELOADの基本文書[RFC6940]に追加のアクセス制御ポリシーを指定します。 USER-CHAIN-ACLポリシーは、彼らが対応する証明書を所有していないにも関わらず、承認されたピアが共有リソースを作成することができます。また、USER-CHAIN-ACLは、指定された名前付けパターンのいずれかを、次のされている変数リソース名を持つ種類のストレージを可能にします。従って、ユーザ鎖-ACLアクセスポリシーを使用する種類のインバウンドストア要求に、以下の規則が適用されなければなりません。"
    },
    {
      "indent": 3,
      "text": "In the USER-CHAIN-ACL policy, a given value MUST NOT be written or overwritten, if neither one of USER-MATCH or USER-NODE-MATCH (mandatory if the data model is dictionary) access policies of the base document [RFC6940] applies.",
      "ja": "USER-MATCHまたはUSER-NODE-MATCHのいずれも1つがベース文書のアクセスポリシー[RFC6940]（データ・モデルが辞書である場合に必須）USER-CHAIN-ACLポリシーで、与えられた値は、書き込みまたは上書きしてはいけません適用されます。"
    },
    {
      "indent": 3,
      "text": "Additionally, the store request MUST be denied if the signer's certificate does not contain a username that matches to the user and domain portion in one of the variable resource name patterns (cf. Section 5) specified in the configuration document or if the hashed Resource Name does not match the Resource-ID. The Resource Name of the Kind to be stored MUST be taken from the mandatory ResourceNameExtension field in the corresponding Kind data structure.",
      "ja": "署名者の証明書が設定文書で指定された変数リソース名のパターンの1（節参照5）またはハッシュ化されたリソース名と、ユーザーとドメイン部分に一致するユーザ名が含まれていない場合はさらに、ストア要求は拒否されなければなりませんリソース-IDと一致していません。格納される種類のリソース名は、対応する種類のデータ構造に必須のResourceNameExtensionフィールドから取得されなければなりません。"
    },
    {
      "indent": 3,
      "text": "If the access rights cannot be verified according to the ACL validation procedure described in Section 6.3, the store request MUST also be denied.",
      "ja": "アクセス権は、6.3節で説明したACLの検証手順に従って検証することができない場合は、ストア要求も拒否されなければなりません。"
    },
    {
      "indent": 3,
      "text": "Otherwise, the store request can be processed further.",
      "ja": "そうでない場合は、ストア要求をさらに処理することができます。"
    },
    {
      "indent": 0,
      "text": "7. ACCESS-CONTROL-LIST Kind Definition",
      "section_title": true,
      "ja": "7. ACCESS-CONTROL-LIST種類の定義"
    },
    {
      "indent": 3,
      "text": "This section defines the ACCESS-CONTROL-LIST Kind previously described in this document.",
      "ja": "このセクションでは、種類以前にこの文書で説明ACCESS-CONTROL-LISTを定義します。"
    },
    {
      "indent": 3,
      "text": "Name: ACCESS-CONTROL-LIST",
      "ja": "名前：ACCESS-CONTROL-LIST"
    },
    {
      "indent": 3,
      "text": "Kind IDs: The Resource Name for ACCESS-CONTROL-LIST Kind-ID is the Resource Name of the Kind that will be shared by using the ACCESS-CONTROL-LIST Kind.",
      "ja": "一種である：リソース名は、ACCESS-CONTROL-LIST種類-IDのためのACCESS-CONTROL-LISTの種類を使用することによって共有される種類のリソース名です。"
    },
    {
      "indent": 3,
      "text": "Data Model: The data model for the ACCESS-CONTROL-LIST Kind-ID is array. The array indexes are formed by using the mechanism for isolated stored data as described in Section 3.1.",
      "ja": "データモデル：ACCESS-CONTROL-LIST種類-IDのためのデータモデルは配列です。配列のインデックスはセクション3.1で説明したように単離された格納されたデータのためのメカニズムを使用して形成されています。"
    },
    {
      "indent": 3,
      "text": "Access Control: USER-CHAIN-ACL (see Section 6.6).",
      "ja": "アクセスコントロール：USER-CHAIN-ACL（6.6節を参照してください）。"
    },
    {
      "indent": 0,
      "text": "8. Security Considerations",
      "section_title": true,
      "ja": "8.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "In this section, we discuss security issues that are relevant to the usage of Shared Resources in RELOAD [RFC6940].",
      "ja": "このセクションでは、RELOAD [RFC6940]での共有リソースの使用に関連するセキュリティ上の問題を議論します。"
    },
    {
      "indent": 0,
      "text": "8.1. Resource Exhaustion",
      "section_title": true,
      "ja": "8.1. リソースの枯渇"
    },
    {
      "indent": 3,
      "text": "Joining a RELOAD overlay inherently poses a certain resource load on a peer, because it has to store and forward data for other peers. In common RELOAD semantics, each Resource-ID and thus position in the overlay, may only be written by a limited set of peers -- often even only a single peer, which limits this burden. In the case of Shared Resources, a single resource may be written by multiple peers who may even write an arbitrary number of entries (e.g., delegations in the ACL). This leads to an enhanced use of resources at individual overlay nodes. The problem of resource exhaustion can easily be mitigated for Usages based on the ShaRe-Usage by imposing restrictions on size, i.e., <max-size> element for a certain Kind in the configuration document.",
      "ja": "それは他のピアのためのデータを保存し、前方にする必要があるためRELOADオーバーレイに参加する、本質的に、ピア上の特定のリソース負荷をもたらします。この負担を制限し、多くの場合でも、単一のピア、 - 共通RELOADセマンティクス、各リソースIDとオーバレイにおけるこのような位置に、ピアだけの限られたセットによって記述することができます。共有リソースの場合には、単一のリソースもエントリ（ACLで例えば、代表団）の任意の数を書き込むことができる複数のピアによって書き込むことができます。これは、個々のオーバレイノードでのリソースの強化の使用につながります。資源の枯渇の問題を容易に設定文書内の特定の種類の、すなわち、<最大サイズ>要素、サイズに制限を課すことにより、共有して使用頻度に基づいて、用途に緩和することができます。"
    },
    {
      "indent": 0,
      "text": "8.2. Malicious or Misbehaving Storing Peer",
      "section_title": true,
      "ja": "8.2. 悪意のあるまたは不正な動作保管ピア"
    },
    {
      "indent": 3,
      "text": "The RELOAD overlay is designed to operate despite the presence of a small set of misbehaving peers. This is not different for Shared Resources since a small set of malicious peers does not disrupt the functionality of the overlay in general, but may have implications for the peers needing to store or access information at the specific locations in the ID space controlled by a malicious peer. A storing peer could withhold stored data, which results in a denial of service to the group using the specific resource. But it could not return forged data, since the validity of any stored data can be independently verified using the attached signatures.",
      "ja": "リロードオーバーレイは誤動作ピアの小さなセットが存在するにもかかわらず動作するように設計されています。これにより、悪意のあるピアの小さなセットは、一般的には、オーバーレイの機能を破壊しないため、共有リソースごとに異なるものではなく、悪意のあるによって制御ID空間内の特定の場所に格納する必要がピアまたはアクセス情報に影響を与える可能性がありピア。格納ピアは、特定のリソースを使用してグループにサービスの拒否をもたらす、格納されたデータを差し控えることができました。任意の保存されたデータの有効性を独立して付属の署名を使用して検証することができるので、しかし、それは、偽造データを返すことができませんでした。"
    },
    {
      "indent": 0,
      "text": "8.3. Trust Delegation to a Malicious or Misbehaving Peer",
      "section_title": true,
      "ja": "8.3. 悪意のあるまたは不正な動作ピアへの委任を信頼"
    },
    {
      "indent": 3,
      "text": "A Resource Owner that erroneously delegated write access to a Shared Resource for a misbehaving peer enables this malicious member of the overlay to interfere with the corresponding group application in several unwanted ways. Examples of destructive interferences range from exhausting shared storage to dedicated application-specific misuse. Additionally, a bogus peer that was granted delegation rights may authorize further malicious collaborators to writing the Shared Resource.",
      "ja": "誤って不正行為ピアの共有リソースへの書き込みアクセスを委任リソース所有者は、いくつかの望ましくない方法で対応するグループアプリケーションを妨害するオーバーレイのこの悪意のあるメンバーを可能にします。破壊的な干渉の例には、排気共有ストレージから専用アプリケーション固有の誤用の範囲です。また、委任権を与えられた偽のピアが共有リソースを書くことにさらに悪質な協力者を許可することができます。"
    },
    {
      "indent": 3,
      "text": "It is the obligation of the Resource Owner to bind trust delegation to apparent trustworthiness. Additional measures to monitor proper behavior may be applied. In any case, the Resource Owner will be able to revoke the trust delegation of an entire tree in a single overwrite operation. It further holds the right to overwrite any malicious contributions to the shared resource under misuse.",
      "ja": "明白な信頼性に信頼の委任をバインドするリソースの所有者の義務です。適切な行動を監視するための追加措置を適用することができます。いずれの場合も、リソースの所有者は、単一の上書き操作にツリー全体の信頼委任を取り消すことができるようになります。さらに、誤用の下で、共有リソースへの悪質な貢献を上書きする権利を保持しています。"
    },
    {
      "indent": 0,
      "text": "8.4. Privacy Issues",
      "section_title": true,
      "ja": "8.4. プライバシー問題"
    },
    {
      "indent": 3,
      "text": "All data stored in the Shared Resource is readable by any node in the overlay; thus, applications requiring privacy need to encrypt the data. The ACL needs to be stored unencrypted; thus, the list members of a group using a Shared Resource will always be publicly visible.",
      "ja": "共有リソースに格納されているすべてのデータは、オーバーレイ内の任意のノードによって読み取り可能です。したがって、プライバシーを必要とするアプリケーションは、データを暗号化する必要があります。 ACLは、暗号化されていない格納する必要があります。このように、共有リソースを使用してグループのリストのメンバーは常に一般に公開されます。"
    },
    {
      "indent": 0,
      "text": "9. IANA Considerations",
      "section_title": true,
      "ja": "9. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "9.1. Access Control Policy",
      "section_title": true,
      "ja": "9.1. アクセス制御ポリシー"
    },
    {
      "indent": 3,
      "text": "IANA has registered the following entry in the \"RELOAD Access Control Policies\" registry (cf. [RFC6940]) to represent the USER-CHAIN-ACL Access Control Policy, as described in Section 6.6.",
      "ja": "IANAはセクション6.6に記載されているように、USER-CHAIN-ACLアクセス制御ポリシーを表すために「リロードアクセス制御ポリシー」レジストリ（参照[RFC6940]）で次のエントリを登録しました。"
    },
    {
      "indent": 21,
      "text": "+-------------------+----------+\n| Access Policy     |      RFC |\n+-------------------+----------+\n| USER-CHAIN-ACL    | RFC 8076 |\n+-------------------+----------+",
      "raw": true
    },
    {
      "indent": 0,
      "text": "9.2. Data Kind-ID",
      "section_title": true,
      "ja": "9.2. データ種類-ID"
    },
    {
      "indent": 3,
      "text": "IANA has registered the following code point in the \"RELOAD Data Kind-ID\" registry (cf. [RFC6940]) to represent the ShaRe ACCESS-CONTROL-LIST kind, as described in Section 7.",
      "ja": "IANAはセクション7で説明したように、共有アクセス制御リストの種類を表すために「リロードデータ種類-ID」レジストリ（参照[RFC6940]）で、次のコード・ポイントを登録しています。"
    },
    {
      "indent": 13,
      "text": "+----------------------+------------+----------+\n| Kind                 |    Kind-ID |      RFC |\n+----------------------+------------+----------+\n| ACCESS-CONTROL-LIST  |        0x4 | RFC 8076 |\n+----------------------+------------+----------+",
      "raw": true
    },
    {
      "indent": 0,
      "text": "9.3. XML Namespace Registration",
      "section_title": true,
      "ja": "9.3.  XML名前空間の登録"
    },
    {
      "indent": 3,
      "text": "This document registers the following URI for the config XML namespace in the IETF XML registry defined in [RFC3688].",
      "ja": "この文書では、[RFC3688]で定義されたIETF XMLレジストリの設定XML名前空間については、以下のURIを登録します。"
    },
    {
      "indent": 3,
      "text": "URI: urn:ietf:params:xml:ns:p2p:config-base:share",
      "ja": "URI：URN：IETF：のparams：XML：NS：P2Pます。config-ベース：シェア"
    },
    {
      "indent": 3,
      "text": "Registrant Contact: The IESG",
      "ja": "登録者連絡先：IESG"
    },
    {
      "indent": 3,
      "text": "XML: N/A, the requested URI is an XML namespace",
      "ja": "XML：N / Aは、要求されたURIは、XML名前空間です"
    },
    {
      "indent": 0,
      "text": "10. References",
      "section_title": true,
      "ja": "10.参考文献"
    },
    {
      "indent": 0,
      "text": "10.1. Normative References",
      "section_title": true,
      "ja": "10.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[IEEE-Posix] \"IEEE Standard for Information Technology - Portable Operating System Interface (POSIX) - Part 2: Shell and Utilities (Vol. 1)\", IEEE Std 1003.2-1992, ISBN 1-55937-255-9, DOI 10.1109/IEEESTD.1993.6880751, January 1993, <http://ieeexplore.ieee.org/document/6880751/>.",
      "ja": "[IEEE-のPosix] \"情報技術のためのIEEE規格 - ポータブルオペレーティングシステムインタフェース（POSIX） - パート2：シェルとユーティリティ（第1巻）\"、IEEE規格1003.2-1992、ISBN 1-55937-255-9、DOI 10.1109 /IEEESTD.1993.6880751、1993年1月、<http://ieeexplore.ieee.org/document/6880751/>。"
    },
    {
      "indent": 3,
      "text": "[OASIS.relax_ng] Clark, J. and M. Murata, \"RELAX NG Specification\", December 2001.",
      "ja": "【OASIS.relax_ng]クラーク、J.とM.村田、2001年12月 \"NG仕様RELAX\"。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC3688] Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688, DOI 10.17487/RFC3688, January 2004, <http://www.rfc-editor.org/info/rfc3688>.",
      "ja": "[RFC3688] Mealling、M.、 \"IETF XMLレジストリ\"、BCP 81、RFC 3688、DOI 10.17487 / RFC3688、2004年1月、<http://www.rfc-editor.org/info/rfc3688>。"
    },
    {
      "indent": 3,
      "text": "[RFC6940] Jennings, C., Lowekamp, B., Ed., Rescorla, E., Baset, S., and H. Schulzrinne, \"REsource LOcation And Discovery (RELOAD) Base Protocol\", RFC 6940, DOI 10.17487/RFC6940, January 2014, <http://www.rfc-editor.org/info/rfc6940>.",
      "ja": "[RFC6940]ジェニングス、C.、Lowekamp、B.、編。、レスコラ、E.、BASET、S.、およびH. Schulzrinneと、 \"リソースロケーションと発見（リロード）ベースプロトコル\"、RFC 6940、DOI 10.17487 / RFC6940 、2014年1月、<http://www.rfc-editor.org/info/rfc6940>。"
    },
    {
      "indent": 3,
      "text": "[W3C.REC-xmlschema-2-20041028] Malhotra, A. and P. Biron, \"XML Schema Part 2: Datatypes Second Edition\", World Wide Web Consortium Recommendation REC-xmlschema-2-20041028, October 2004, <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.",
      "ja": "[W3C.REC-XMLSCHEMA-2から20041028]マルホトラ、A.、およびP.ビロン、 \"XMLスキーマパート2：データ型第二版\"、World Wide Web Consortium（W3C）の勧告REC-XMLSCHEMA-2から20041028、2004年10月、<のhttp： //www.w3.org/TR/2004/REC-xmlschema-2-20041028>。"
    },
    {
      "indent": 0,
      "text": "10.2. Informative References",
      "section_title": true,
      "ja": "10.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC7890] Bryan, D., Matthews, P., Shim, E., Willis, D., and S. Dawkins, \"Concepts and Terminology for Peer-to-Peer SIP (P2PSIP)\", RFC 7890, DOI 10.17487/RFC7890, June 2016, <http://www.rfc-editor.org/info/rfc7890>.",
      "ja": "[RFC7890]ブライアン、D.、マシューズ、P.、シム、E.、ウィリス、D.、およびS.ドーキンス、RFC 7890、DOI 10.17487 \"ピア・ツー・ピアSIP（P2PSIP）のための概念および用語\" / RFC7890、2016年6月、<http://www.rfc-editor.org/info/rfc7890>。"
    },
    {
      "indent": 3,
      "text": "[RFC7904] Jennings, C., Lowekamp, B., Rescorla, E., Baset, S., Schulzrinne, H., and T. Schmidt, Ed., \"A SIP Usage for REsource LOcation And Discovery (RELOAD)\", RFC 7904, DOI 10.17487/RFC7904, October 2016, <http://www.rfc-editor.org/info/rfc7904>.",
      "ja": "[RFC7904]ジェニングス、C.、Lowekamp、B.、レスコラ、E.、BASET、S.、Schulzrinneと、H.、およびT.シュミット編、 \"リソースロケーションと発見（リロード）のためのSIPの使用\"、 RFC 7904、DOI 10.17487 / RFC7904、2016年10月、<http://www.rfc-editor.org/info/rfc7904>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This work was stimulated by fruitful discussions in the P2PSIP working group and the SAM research group. We would like to thank all active members for their constructive thoughts and feedback. In particular, the authors would like to thank (in alphabetical order) Emmanuel Baccelli, Ben Campbell, Alissa Cooper, Lothar Grimm, Russ Housley, Cullen Jennings, Matt Miller, Peter Musgrave, Joerg Ott, Marc Petit-Huguenin, Peter Pogrzeba, and Jan Seedorf. This work was partly funded by the German Federal Ministry of Education and Research, projects HAMcast, Mindstone, and SAFEST.",
      "ja": "この作業は、実りP2PSIPワーキンググループでの議論とSAMの研究グループによって刺激されました。私たちは、彼らの建設的な考えやフィードバックのために、すべてのアクティブなメンバーに感謝したいと思います。特に、著者は（アルファベット順）エマニュエルBaccelli、ベン・キャンベル、アリッサ・クーパー、ローター・グリム、ラスHousley、カレン・ジェニングス、マット・ミラー、ピーター・マスグレイブ、イェルク・オット、マーク・プティ・Huguenin、ピーターPogrzeba、感謝したいとヤンセードルフ。この作品は、部分的に教育研究のドイツ連邦省によって資金を供給された、HAMcast、Mindstone、最も安全なが突出しています。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Alexander Knauf HAW Hamburg Berliner Tor 7 Hamburg D-20099 Germany",
      "ja": "アレクサンダークナウフHAWハンブルクベルリナートア7 D-20099ハンブルクドイツ"
    },
    {
      "indent": 3,
      "text": "Phone: +4940428758067 Email: alexanderknauf@gmail.com",
      "ja": "電話番号：+4940428758067 Eメール：alexanderknauf@gmail.com"
    },
    {
      "indent": 3,
      "text": "Thomas C. Schmidt HAW Hamburg Berliner Tor 7 Hamburg D-20099 Germany",
      "ja": "トーマス・C.シュミットHAWハンブルクベルリナートア7 D-20099ハンブルクドイツ"
    },
    {
      "indent": 3,
      "text": "Email: t.schmidt@haw-hamburg.de URI: http://inet.haw-hamburg.de/members/schmidt",
      "ja": "メール：URI t.schmidt@haw-hamburg.de：http://inet.haw-hamburg.de/members/schmidt"
    },
    {
      "indent": 3,
      "text": "Gabriel Hege daviko GmbH Schillerstr. 107 Berlin D-10625 Germany",
      "ja": "ガブリエルHEGEはGmbH社Schillerstrをdaviko。 107 D-10625ベルリンドイツ"
    },
    {
      "indent": 3,
      "text": "Phone: +493043004344 Email: hege@daviko.com",
      "ja": "電話番号：+493043004344 Eメール：hege@daviko.com"
    },
    {
      "indent": 3,
      "text": "Matthias Waehlisch link-lab & FU Berlin Hoenower Str. 35 Berlin D-10318 Germany",
      "ja": "マティアスWählischリンクラボ＆FUベルリンHönowerのStr。35ベルリンD-10318ドイツ"
    },
    {
      "indent": 3,
      "text": "Email: mw@link-lab.net URI: http://www.inf.fu-berlin.de/~waehl",
      "ja": "メール：mw@link-lab.net URI：http://www.inf.fu-berlin.de/~waehl"
    }
  ]
}