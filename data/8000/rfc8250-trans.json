{
  "title": {
    "text": "RFC 8250 - IPv6 Performance and Diagnostic Metrics (PDM) Destination Option",
    "ja": "RFC 8250 - IPv6のパフォーマンスと診断指標（PDM）デスティネーション・オプション"
  },
  "number": 8250,
  "created_at": "2019-10-27 11:21:21.632937+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                         N. Elkins\nRequest for Comments: 8250                               Inside Products\nCategory: Standards Track                                    R. Hamilton\nISSN: 2070-1721                               Chemical Abstracts Service\n                                                            M. Ackermann\n                                                           BCBS Michigan\n                                                          September 2017",
      "raw": true
    },
    {
      "indent": 4,
      "text": "IPv6 Performance and Diagnostic Metrics (PDM) Destination Option",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "To assess performance problems, this document describes optional headers embedded in each packet that provide sequence numbers and timing information as a basis for measurements. Such measurements may be interpreted in real time or after the fact. This document specifies the Performance and Diagnostic Metrics (PDM) Destination Options header. The field limits, calculations, and usage in measurement of PDM are included in this document.",
      "ja": "パフォーマンス上の問題を評価するために、この文書は、測定のための基礎としてシーケンス番号とタイミング情報を提供する各パケットに埋め込まれた任意のヘッダを記述する。このような測定は、リアルタイムに又は事後に解釈することができます。この文書では、パフォーマンスと診断指標（PDM）宛先オプションヘッダーを指定します。 PDMの測定フィールドの制限、計算、および使用は、本文書に含まれています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 7841のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8250.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttps://www.rfc-editor.org/info/rfc8250で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2017 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2017 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（https://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Background ......................................................3\n   1.1. Terminology ................................................3\n   1.2. Rationale for Defined Solution .............................4\n   1.3. IPv6 Transition Technologies ...............................4\n2. Measurement Information Derived from PDM ........................5\n   2.1. Round-Trip Delay ...........................................5\n   2.2. Server Delay ...............................................5\n3. Performance and Diagnostic Metrics Destination Option Layout ....6\n   3.1. Destination Options Header .................................6\n   3.2. Performance and Diagnostic Metrics Destination Option ......6\n        3.2.1. PDM Layout ..........................................6\n        3.2.2. Base Unit for Time Measurement ......................8\n   3.3. Header Placement ...........................................9\n   3.4. Header Placement Using IPsec ESP Mode ......................9\n        3.4.1. Using ESP Transport Mode ...........................10\n        3.4.2. Using ESP Tunnel Mode ..............................10\n   3.5. Implementation Considerations .............................10\n        3.5.1. PDM Activation .....................................10\n        3.5.2. PDM Timestamps .....................................10\n   3.6. Dynamic Configuration Options .............................11\n   3.7. Information Access and Storage ............................11\n4. Security Considerations ........................................11\n   4.1. Resource Consumption and Resource Consumption Attacks .....11\n   4.2. Pervasive Monitoring ......................................12\n   4.3. PDM as a Covert Channel ...................................12\n   4.4. Timing Attacks ............................................13\n5. IANA Considerations ............................................13\n6. References .....................................................14\n   6.1. Normative References ......................................14\n   6.2. Informative References ....................................14",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Appendix A. Context for PDM .......................................15\n  A.1. End-User Quality of Service (QoS) ..........................15\n  A.2. Need for a Packet Sequence Number (PSN) ....................15\n  A.3. Rationale for Defined Solution .............................15\n  A.4. Use PDM with Other Headers .................................16\nAppendix B. Timing Considerations .................................16\n  B.1. Calculations of Time Differentials .........................16\n  B.2. Considerations of This Time-Differential Representation ....18\n    B.2.1. Limitations with This Encoding Method ..................18\n    B.2.2. Loss of Precision Induced by Timer Value Truncation ....19\nAppendix C. Sample Packet Flows ...................................20\n  C.1. PDM Flow - Simple Client-Server Traffic ....................20\n    C.1.1. Step 1 .................................................20\n    C.1.2. Step 2 .................................................21\n    C.1.3. Step 3 .................................................21\n    C.1.4. Step 4 .................................................23\n    C.1.5. Step 5 .................................................24\n  C.2. Other Flows ................................................24\n    C.2.1. PDM Flow - One-Way Traffic .............................24\n    C.2.2. PDM Flow - Multiple-Send Traffic .......................25\n    C.2.3. PDM Flow - Multiple-Send Traffic with Errors ...........26\nAppendix D. Potential Overhead Considerations .....................28\nAcknowledgments ...................................................30\nAuthors' Addresses ................................................30",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Background",
      "section_title": true,
      "ja": "1.背景"
    },
    {
      "indent": 3,
      "text": "To assess performance problems, measurements based on optional sequence numbers and timing may be embedded in each packet. Such measurements may be interpreted in real time or after the fact.",
      "ja": "パフォーマンス上の問題を評価するために、オプションのシーケンス番号とタイミングに基づく測定は、各パケットに埋め込まれてもよいです。このような測定は、リアルタイムに又は事後に解釈することができます。"
    },
    {
      "indent": 3,
      "text": "As defined in RFC 8200 [RFC8200], destination options are carried by the IPv6 Destination Options extension header. Destination options include optional information that need be examined only by the IPv6 node given as the destination address in the IPv6 header, not by routers or other \"middleboxes\". This document specifies the Performance and Diagnostic Metrics (PDM) destination option. The field limits, calculations, and usage in measurement of the PDM Destination Options header are included in this document.",
      "ja": "[RFC8200] RFC 8200で定義されているように、宛先オプションは、IPv6宛先オプション拡張ヘッダによって運ばれます。宛先オプションはないルータや他の「中間装置」により、IPv6ヘッダーの宛先アドレスとして与えられたIPv6ノードによってのみ検討する必要がある任意の情報を含みます。この文書では、パフォーマンスと診断指標（PDM）出力先オプションを指定します。 PDM宛先オプションヘッダの測定フィールドの制限、計算、および使用は、本文書に含まれています。"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "1.2. Rationale for Defined Solution",
      "section_title": true,
      "ja": "1.2. 定義されたソリューションのための理論的根拠"
    },
    {
      "indent": 3,
      "text": "The current IPv6 specification does not provide timing, nor does it provide a similar field in the IPv6 main header or in any extension header. The IPv6 PDM destination option provides such fields.",
      "ja": "現在のIPv6仕様は、タイミングを提供しない、またそれは、IPv6メインヘッダまたは任意の拡張ヘッダに同様のフィールドを提供しません。 IPv6のPDM先オプションは、このようなフィールドを提供します。"
    },
    {
      "indent": 3,
      "text": "Advantages include:",
      "ja": "利点は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. Real measure of actual transactions.",
      "section_title": true,
      "ja": "実際の取引の1.リアルタイム測定。"
    },
    {
      "indent": 3,
      "text": "2. Ability to span organizational boundaries with consistent instrumentation.",
      "ja": "一貫性の計測で、組織の境界をまたがる2.能力。"
    },
    {
      "indent": 3,
      "text": "3. No time synchronization needed between session partners.",
      "section_title": true,
      "ja": "セッションのパートナー間で必要な3.ませ時刻同期はありません。"
    },
    {
      "indent": 3,
      "text": "4. Ability to handle all transport protocols (TCP, UDP, the Stream Control Transmission Protocol (SCTP), etc.) in a uniform way.",
      "ja": "均一な方法で、すべてのトランスポートプロトコル（TCP、UDP、ストリーム制御伝送プロトコル（SCTP）、など）を処理する4.能力。"
    },
    {
      "indent": 3,
      "text": "PDM provides the ability to determine quickly if the (latency) problem is in the network or in the server (application). That is, it is a fast way to do triage. For more information on the background and usage of PDM, see Appendix A.",
      "ja": "PDMは（レイテンシ）の問題がネットワークまたはサーバ（アプリケーション）である場合に迅速に決定する能力を提供します。つまり、それはトリアージを行うための高速な方法です。 PDMの背景と使用方法の詳細については、付録Aを参照してください。"
    },
    {
      "indent": 0,
      "text": "1.3. IPv6 Transition Technologies",
      "section_title": true,
      "ja": "1.3.  IPv6移行テクノロジ"
    },
    {
      "indent": 3,
      "text": "In the path to full implementation of IPv6, transition technologies such as translation or tunneling may be employed. It is possible that an IPv6 packet containing PDM may be dropped if using IPv6 transition technologies. For example, an implementation using a translation technique (IPv6 to IPv4) that does not support or recognize the IPv6 Destination Options extension header may simply drop the packet rather than translating it without the extension header.",
      "ja": "IPv6の完全な実装へのパスでは、そのような翻訳又はトンネル等の遷移技術を使用することができます。 PDMを含むIPv6パケットは、IPv6移行テクノロジを使用している場合はドロップされる可能性があります。例えば、支持体又は単に拡張ヘッダなしでそれを変換するのではなく、パケットをドロップすることができるのIPv6宛先オプション拡張ヘッダを認識しない翻訳技術（IPv4のにIPv6）を使用して実装。"
    },
    {
      "indent": 3,
      "text": "It is also possible that some devices in the network may not correctly handle multiple IPv6 extension headers, including the IPv6 Destination Option. For example, adding the PDM header to a packet may push the Layer 4 information to a point in the packet where it is not visible to filtering logic, and the packet may be dropped. This kind of situation is expected to become rare over time.",
      "ja": "ネットワーク内のいくつかのデバイスが正しくIPv6宛先オプションを含む複数のIPv6拡張ヘッダを処理していない可能性もあります。例えば、パケットにPDMヘッダを付加することは、フィルタリング・ロジックには見えない、そして、パケットがドロップされてもよいパケットのポイントにレイヤ4の情報をプッシュすることができます。このような状況は、時間の経過とともに稀なることが期待されます。"
    },
    {
      "indent": 0,
      "text": "2. Measurement Information Derived from PDM",
      "section_title": true,
      "ja": "2.測定情報PDM由来"
    },
    {
      "indent": 3,
      "text": "Each packet contains information about the sender and receiver. In IP, the identifying information is called a \"5-tuple\".",
      "ja": "各パケットは送信者と受信者に関する情報が含まれています。 IPにおいて、識別情報は、「5タプル」と呼ばれます。"
    },
    {
      "indent": 3,
      "text": "The 5-tuple consists of:",
      "ja": "5タプルの構成は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "SADDR: IP address of the sender SPORT: Port for the sender DADDR: IP address of the destination DPORT: Port for the destination PROTC: Upper-layer protocol (TCP, UDP, ICMP, etc.)",
      "ja": "SADDR：送信者SPORTのIPアドレス：送信者DADDR用ポート：先DPORTのIPアドレス：送信先PROTC用ポート：上位層プロトコル（TCPなど、UDP、ICMP、）"
    },
    {
      "indent": 3,
      "text": "PDM contains the following base fields (scale fields intentionally left out):",
      "ja": "PDMは、（スケールのフィールドは、意図的に除外）以下の基本フィールドが含まれています。"
    },
    {
      "indent": 6,
      "text": "PSNTP : Packet Sequence Number This Packet PSNLR : Packet Sequence Number Last Received DELTATLR: Delta Time Last Received DELTATLS: Delta Time Last Sent",
      "ja": "PSNTP：パケットシーケンス番号このパケットPSNLR：デルタタイム最終DELTATLSを受信：デルタタイムラストが送信されたパケットシーケンス番号最終DELTATLRが受信しました"
    },
    {
      "indent": 3,
      "text": "Other fields for storing time scaling factors are also in PDM and will be described in Section 3.",
      "ja": "時間スケーリング係数を格納するための他のフィールドは、PDMでもあり、第3章で説明します。"
    },
    {
      "indent": 3,
      "text": "This information, combined with the 5-tuple, allows the measurement of the following metrics:",
      "ja": "5タプルと組み合わされ、この情報は、次のメトリックの測定を可能にします。"
    },
    {
      "indent": 3,
      "text": "1. Round-trip delay",
      "section_title": true,
      "ja": "1.ラウンドトリップ遅延"
    },
    {
      "indent": 3,
      "text": "2. Server delay",
      "section_title": true,
      "ja": "2.サーバーの遅延"
    },
    {
      "indent": 0,
      "text": "2.1. Round-Trip Delay",
      "section_title": true,
      "ja": "2.1. ラウンドトリップ遅延"
    },
    {
      "indent": 3,
      "text": "Round-trip *network* delay is the delay for packet transfer from a source host to a destination host and then back to the source host. This measurement has been defined, and its advantages and disadvantages are discussed in \"A Round-trip Delay Metric for IPPM\" [RFC2681].",
      "ja": "ラウンドトリップ*ネットワーク*遅延は、バック元ホストに宛先ホストに送信元ホストからのパケット転送の遅延となります。この測定は、定義されており、その長所と短所が「IPPMのための往復遅延メトリック」[RFC2681]で議論されています。"
    },
    {
      "indent": 0,
      "text": "2.2. Server Delay",
      "section_title": true,
      "ja": "2.2. サーバーの遅延"
    },
    {
      "indent": 3,
      "text": "Server delay is the interval between when a packet is received by a device and the first corresponding packet is sent back in response. This may be \"server processing time\". It may also be a delay caused by acknowledgments. Server processing time includes the time taken by the combination of the stack and application to return the response. The stack delay may be related to network performance. If this aggregate time is seen as a problem and there is a need to make a clear distinction between application processing time and stack delay, including that caused by the network, then more client-based measurements are needed.",
      "ja": "サーバ遅延は、パケットがデバイスによって受信され、最初に対応するパケットが応答して返送されたときとの間の間隔です。これは、「サーバ処理時間」であってもよいです。また、確認応答による遅延することがあります。サーバ処理時間が応答を返すために、スタック及びアプリケーションの組み合わせによって撮影された時間を含みます。スタックの遅延は、ネットワークのパフォーマンスに関連することができます。この集計時間が問題視され、アプリケーションの処理時間とスタック遅延の間に明確な区別をする必要がある場合は、ネットワークによって引き起こされていることを含め、その後、より多くのクライアントベースの測定が必要とされています。"
    },
    {
      "indent": 0,
      "text": "3. Performance and Diagnostic Metrics Destination Option Layout",
      "section_title": true,
      "ja": "3.パフォーマンスと診断メトリックの目的地オプションレイアウト"
    },
    {
      "indent": 0,
      "text": "3.1. Destination Options Header",
      "section_title": true,
      "ja": "3.1. 宛先オプションヘッダ"
    },
    {
      "indent": 3,
      "text": "The IPv6 Destination Options extension header [RFC8200] is used to carry optional information that needs to be examined only by a packet's destination node(s). The Destination Options header is identified by a Next Header value of 60 in the immediately preceding header and is defined in RFC 8200 [RFC8200]. The IPv6 Performance and Diagnostic Metrics (PDM) destination option is implemented as an IPv6 Option carried in the Destination Options header. PDM does not require time synchronization.",
      "ja": "IPv6宛先オプション拡張ヘッダ[RFC8200]は唯一のパケットの宛先ノード（複数可）によって検査される必要がある任意の情報を運ぶために使用されます。宛先オプションヘッダは、直前のヘッダ60の次ヘッダ値によって識別され、RFC 8200 [RFC8200]で定義されています。 IPv6の性能および診断指標（PDM）宛先オプションは、宛先オプションヘッダで運ばれたIPv6オプションとして実装されます。 PDMは、時刻同期を必要としません。"
    },
    {
      "indent": 0,
      "text": "3.2. Performance and Diagnostic Metrics Destination Option",
      "section_title": true,
      "ja": "3.2. パフォーマンスと診断メトリック先オプション"
    },
    {
      "indent": 0,
      "text": "3.2.1. PDM Layout",
      "section_title": true,
      "ja": "3.2.1.  PDMレイアウト"
    },
    {
      "indent": 3,
      "text": "The IPv6 PDM destination option contains the following fields:",
      "ja": "IPv6のPDM先オプションは、以下のフィールドが含まれています。"
    },
    {
      "indent": 6,
      "text": "SCALEDTLR: Scale for Delta Time Last Received SCALEDTLS: Scale for Delta Time Last Sent PSNTP : Packet Sequence Number This Packet PSNLR : Packet Sequence Number Last Received DELTATLR : Delta Time Last Received DELTATLS : Delta Time Last Sent",
      "ja": "SCALEDTLR：スケールデルタ時間のために最終SCALEDTLSを受信：デルタ時間最終のためのスケールはPSNTPを送信：パケットシーケンス番号このパケットPSNLR：パケットシーケンス番号最終DELTATLRを受信：デルタ時間最終DELTATLSを受信：デルタ時間最終送信します"
    },
    {
      "indent": 3,
      "text": "PDM has alignment requirements. Following the convention in IPv6, these options are aligned in a packet so that multi-octet values within the Option Data field of each option fall on natural boundaries (i.e., fields of width n octets are placed at an integer multiple of n octets from the start of the header, for n = 1, 2, 4, or 8) [RFC8200].",
      "ja": "PDMは、アライメント要件があります。自然境界上の各オプションの秋のオプションデータフィールド内のマルチオクテットの値は（すなわち、幅nオクテットのフィールドはからnオクテットの整数倍に配置されるように、IPv6での大会に続いて、これらのオプションは、パケットに並んでいます[RFC8200]ヘッダの開始のためにN = 1、2、4、または8）。"
    },
    {
      "indent": 3,
      "text": "The PDM destination option is encoded in type-length-value (TLV) format as follows:",
      "ja": "次のようにPDM宛先オプションは、タイプ長さ値（TLV）形式でエンコードされます。"
    },
    {
      "indent": 6,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Option Type  | Option Length |    ScaleDTLR  |     ScaleDTLS |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   PSN This Packet             |  PSN Last Received            |\n|-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Delta Time Last Received    |  Delta Time Last Sent         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Option Type",
      "ja": "オプションタイプ"
    },
    {
      "indent": 9,
      "text": "0x0F",
      "ja": "0x0Fの"
    },
    {
      "indent": 9,
      "text": "In keeping with RFC 8200 [RFC8200], the two high-order bits of the Option Type field are encoded to indicate specific processing of the option; for the PDM destination option, these two bits MUST be set to 00.",
      "ja": "RFC 8200 [RFC8200]に合わせて、オプションタイプフィールドの上位2ビットは、オプションの具体的な処理を示すために符号化されます。 PDM宛先オプションで、これら2ビットが00に設定しなければなりません。"
    },
    {
      "indent": 9,
      "text": "The third high-order bit of the Option Type field specifies whether or not the Option Data of that option can change en route to the packet's final destination.",
      "ja": "オプションタイプフィールドの3番目の上位ビットは、そのオプションのオプションデータは、パケットの最終目的地への途中で変更できるかどうかを指定します。"
    },
    {
      "indent": 9,
      "text": "In PDM, the value of the third high-order bit MUST be 0.",
      "ja": "PDMにおいて、第三の上位ビットの値が0でなければなりません。"
    },
    {
      "indent": 6,
      "text": "Option Length",
      "ja": "オプション長"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. Length of the option, in octets, excluding the Option Type and Option Length fields. This field MUST be set to 10.",
      "ja": "8ビットの符号なし整数。オプションタイプとオプション長フィールドを除くオクテット単位のオプション、の長さ。このフィールドは10に設定しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Scale Delta Time Last Received (SCALEDTLR)",
      "ja": "（SCALEDTLR）デルタ時間最終受付スケール"
    },
    {
      "indent": 9,
      "text": "8-bit unsigned integer. This is the scaling value for the Delta Time Last Received (DELTATLR) field. The possible values are from 0 to 255. See Appendix B for further discussion on timing considerations and formatting of the scaling values.",
      "ja": "8ビットの符号なし整数。これは、デルタ時間、最後に受信（DELTATLR）フィールドのスケーリング値です。可能な値はタイミングの問題とスケーリング値のフォーマットの更なる議論のために0から255付録Bを参照にしています。"
    },
    {
      "indent": 6,
      "text": "Scale Delta Time Last Sent (SCALEDTLS)",
      "ja": "スケールデルタタイム最後に送信（SCALEDTLS）"
    },
    {
      "indent": 9,
      "text": "8-bit signed integer. This is the scaling value for the Delta Time Last Sent (DELTATLS) field. The possible values are from 0 to 255.",
      "ja": "8ビット符号付き整数。これは、デルタタイム最後に送信（DELTATLS）フィールドのスケーリング値です。可能な値は0から255までです。"
    },
    {
      "indent": 6,
      "text": "Packet Sequence Number This Packet (PSNTP)",
      "ja": "パケットシーケンス番号このパケット（PSNTP）"
    },
    {
      "indent": 9,
      "text": "16-bit unsigned integer. This field will wrap. It is intended for use while analyzing packet traces.",
      "ja": "16ビット符号なし整数。このフィールドは、ラップします。パケットトレースを分析しながら、それを使用するためのものです。"
    },
    {
      "indent": 9,
      "text": "This field is initialized at a random number and incremented monotonically for each packet of the session flow of the 5-tuple. The random-number initialization is intended to make it harder to spoof and insert such packets.",
      "ja": "このフィールドは、乱数で初期化され、5タプルのセッションフローの各パケットに対して単調にインクリメントされます。乱数の初期化は、それが難しいようなパケットを偽装して挿入するために行うことを意図しています。"
    },
    {
      "indent": 9,
      "text": "Operating systems MUST implement a separate packet sequence number counter per 5-tuple.",
      "ja": "オペレーティングシステムは、5タプルごとに個別のパケットシーケンス番号カウンタを実装しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Packet Sequence Number Last Received (PSNLR)",
      "ja": "パケットシーケンス番号最後に受信した（PSNLR）"
    },
    {
      "indent": 9,
      "text": "16-bit unsigned integer. This is the PSNTP of the packet last received on the 5-tuple.",
      "ja": "16ビット符号なし整数。これが最後の5タプルで受信したパケットのPSNTPです。"
    },
    {
      "indent": 9,
      "text": "This field is initialized to 0.",
      "ja": "このフィールドは0に初期化されます。"
    },
    {
      "indent": 6,
      "text": "Delta Time Last Received (DELTATLR)",
      "ja": "デルタタイム最後に受信した（DELTATLR）"
    },
    {
      "indent": 9,
      "text": "16-bit unsigned integer. The value is set according to the scale in SCALEDTLR.",
      "ja": "16ビット符号なし整数。値はSCALEDTLR中のスケールに応じて設定されます。"
    },
    {
      "indent": 9,
      "text": "Delta Time Last Received = (send time packet n - receive time packet (n - 1))",
      "ja": "デルタタイムラストは（ - 時間パケットを受信（N  -  1）nは時間パケットを送信）=受信しました"
    },
    {
      "indent": 6,
      "text": "Delta Time Last Sent (DELTATLS)",
      "ja": "デルタ時間ダウンロード後期（DELTATLS）"
    },
    {
      "indent": 9,
      "text": "16-bit unsigned integer. The value is set according to the scale in SCALEDTLS.",
      "ja": "16ビット符号なし整数。値はSCALEDTLS中のスケールに応じて設定されます。"
    },
    {
      "indent": 9,
      "text": "Delta Time Last Sent = (receive time packet n - send time packet (n - 1))",
      "ja": "デルタ時間最後に送信=（時間、パケットnを受信 - 送信時パケット（N  -  1））"
    },
    {
      "indent": 0,
      "text": "3.2.2. Base Unit for Time Measurement",
      "section_title": true,
      "ja": "3.2.2. 時間計測のためのベースユニット"
    },
    {
      "indent": 3,
      "text": "A time differential is always a whole number in a CPU; it is the unit specification -- hours, seconds, nanoseconds -- that determines what the numeric value means. For PDM, the base time unit is 1 attosecond (asec). This allows for a common unit and scaling of the time differential among all IP stacks and hardware implementations.",
      "ja": "時間差は、常にCPU全体の数です。数値は何を意味するのか決定する - 時間、秒、ナノ秒 - それはユニット仕様です。 PDMため、基本時間単位は1つのアト秒（ASEC）です。これは、すべてのIPスタックとハードウェア実装の間で共通の単位と時間差のスケーリングを可能にします。"
    },
    {
      "indent": 3,
      "text": "Note that PDM provides the ability to measure both time differentials that are extremely small and time differentials in a Delay/Disruption Tolerant Networking (DTN) environment where the delays may be very great. To store a time differential in just 16 bits that must range in this way will require some scaling of the time-differential value.",
      "ja": "PDMは遅延が非常に大きいかもしれディレイ/破壊耐性ネットワーク（DTN）環境で非常に小さく、時間差が両方とも時間差を測定する能力を提供することに注意してください。このようにしなければならない範囲だけで16ビットの時間差を格納するには時間微分値のいくつかのスケーリングが必要になります。"
    },
    {
      "indent": 3,
      "text": "One issue is the conversion from the native time base in the CPU hardware of whatever device is in use to some number of attoseconds. It might seem that this will be an astronomical number, but the conversion is straightforward. It involves multiplication by an appropriate power of 10 to change the value into a number of attoseconds. Then, to scale the value so that it fits into DELTATLR or DELTATLS, the value is shifted by a number of bits, retaining the 16 high-order or most significant bits. The number of bits shifted becomes the scaling factor, stored as SCALEDTLR or SCALEDTLS, respectively. For additional information on this process, see Appendix B.",
      "ja": "1つの問題は、どのようなデバイスのCPUのハードウェアでネイティブのタイムベースからの変換はアト秒のいくつかの数に使用されています。天文学的数になりますように見えるかもしれませんが、変換が簡単です。これはアト秒の数に値を変更するために10の適切な電源によって乗算することを含みます。次いで、それはDELTATLR又はDELTATLSに収まるように値をスケーリングするために、値が上位16又は最上位ビットを保持するビット数だけシフトされます。ビットの数は、それぞれSCALEDTLR又はSCALEDTLSとして記憶倍率となるシフト。このプロセスの詳細については、付録Bを参照してください。"
    },
    {
      "indent": 0,
      "text": "3.3. Header Placement",
      "section_title": true,
      "ja": "3.3. ヘッダーの配置"
    },
    {
      "indent": 3,
      "text": "The PDM destination option is placed as defined in RFC 8200 [RFC8200]. There may be a choice of where to place the Destination Options header. If using Encapsulating Security Payload (ESP) mode, please see Section 3.4 of this document regarding the placement of the PDM Destination Options header.",
      "ja": "RFC 8200 [RFC8200]で定義されるようPDM宛先オプションが配置されています。宛先オプションヘッダーを配置する場所の選択肢があるかもしれません。カプセル化セキュリティペイロード（ESP）モードを使用している場合は、PDM宛先オプションヘッダーの配置に関するこのドキュメントのセクション3.4を参照してください。"
    },
    {
      "indent": 3,
      "text": "For each IPv6 packet header, PDM MUST NOT appear more than once. However, an encapsulated packet MAY contain a separate PDM associated with each encapsulated IPv6 header.",
      "ja": "各IPv6パケットヘッダーのために、PDMは複数回現れてはなりません。しかし、カプセル化されたパケットは、各カプセル化IPv6ヘッダに関連付けられた別個のPDMを含むかもしれません。"
    },
    {
      "indent": 0,
      "text": "3.4. Header Placement Using IPsec ESP Mode",
      "section_title": true,
      "ja": "3.4.  IPsecのESPモードを使用してヘッダーの配置"
    },
    {
      "indent": 3,
      "text": "IPsec ESP is defined in [RFC4303] and is widely used. Section 3.1.1 of [RFC4303] discusses the placement of Destination Options headers.",
      "ja": "IPsecのESPは、[RFC4303]で定義されており、広く用いられています。 [RFC4303]のセクション3.1.1には、宛先オプションヘッダーの配置について説明します。"
    },
    {
      "indent": 3,
      "text": "The placement of PDM is different, depending on whether ESP is used in tunnel mode or transport mode.",
      "ja": "PDMの配置は、ESPは、トンネルモードあるいはトランスポートモードで使用されているかどうかに応じて、異なっています。"
    },
    {
      "indent": 3,
      "text": "In the ESP case, no 5-tuple is available, as there are no port numbers. ESP flow should be identified only by using SADDR, DADDR, and PROTC. The Security Parameter Index (SPI) numbers SHOULD be ignored when considering the flow over which PDM information is measured.",
      "ja": "ないポート番号が存在しないようにESPの場合には、何5タプルは、利用できません。 ESPの流れはSADDR、DADDR、およびPROTCを使用することによって識別されなければなりません。 PDMの情報を測定する上での流れを考慮すると、セキュリティパラメータインデックス（SPI）の数字は無視されるべきです。"
    },
    {
      "indent": 0,
      "text": "3.4.1. Using ESP Transport Mode",
      "section_title": true,
      "ja": "3.4.1.  ESPトランスポートモードを使用します"
    },
    {
      "indent": 3,
      "text": "Note that destination options may be placed before or after ESP, or both. If using PDM in ESP transport mode, PDM MUST be placed after the ESP header so as not to leak information.",
      "ja": "先のオプションはESPの前または後に配置することができることに注意してください、またはその両方。 ESPトランスポートモードでPDMを使用する場合の情報を漏洩しないように、PDMは、ESPヘッダの後に置かれなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.4.2. Using ESP Tunnel Mode",
      "section_title": true,
      "ja": "3.4.2.  ESPトンネルモードを使用します"
    },
    {
      "indent": 3,
      "text": "Note that in both the outer set of IP headers and the inner set of IP headers, destination options may be placed before or after ESP, or both. A tunnel endpoint that creates a new packet may decide to use PDM independently of the use of PDM of the original packet to enable delay measurements between the two tunnel endpoints.",
      "ja": "IPヘッダーの外側のセットとIPヘッダの内側セットの両方で、宛先オプションはESPの前または後に配置されてもよいことに留意されたい、あるいはその両方。新たなパケットを作成し、トンネルエンドポイントは、2つのトンネルエンドポイント間の遅延測定を可能にするために、元のパケットのPDMの使用独立PDMを使用することを決定することができます。"
    },
    {
      "indent": 0,
      "text": "3.5. Implementation Considerations",
      "section_title": true,
      "ja": "3.5. 実装に関する考慮事項"
    },
    {
      "indent": 0,
      "text": "3.5.1. PDM Activation",
      "section_title": true,
      "ja": "3.5.1.  PDMのアクティベーション"
    },
    {
      "indent": 3,
      "text": "An implementation should provide an interface to enable or disable the use of PDM. This specification recommends having PDM off by default.",
      "ja": "実装は、PDMの使用を有効または無効にするためのインタフェースを提供する必要があります。この仕様は、デフォルトではPDMをオフになるお勧めします。"
    },
    {
      "indent": 3,
      "text": "PDM MUST NOT be turned on merely if a packet is received with a PDM header. The received packet could be spoofed by another device.",
      "ja": "パケットはPDMヘッダで受信された場合PDMは単にオンにしてはいけません。受信したパケットが他のデバイスによって詐称することができます。"
    },
    {
      "indent": 0,
      "text": "3.5.2. PDM Timestamps",
      "section_title": true,
      "ja": "3.5.2.  PDMタイムスタンプ"
    },
    {
      "indent": 3,
      "text": "The PDM timestamps are intended to isolate wire time from server or host time but may necessarily attribute some host processing time to network latency.",
      "ja": "PDMタイムスタンプは、サーバまたはホスト時からワイヤ時間を単離することが意図されているが、必ずしも待ち時間をネットワークにいくつかのホスト処理時間属性もよいです。"
    },
    {
      "indent": 3,
      "text": "Section 10.2 of RFC 2330 [RFC2330] (\"Framework for IP Performance Metrics\") describes two notions of \"wire time\". These notions are only defined in terms of an Internet host H observing an Internet link L at a particular location:",
      "ja": "RFC 2330のセクション10.2 [RFC2330]（「IPパフォーマンス・メトリックのためのフレームワークは、」）「ワイヤ時間」の2つの概念を説明します。これらの概念は、特定の場所でインターネットリンクLを観察インターネットホストHによって定義されます。"
    },
    {
      "indent": 3,
      "text": "+ For a given IP packet P, the \"wire arrival time\" of P at H on L is the first time T at which any bit of P has appeared at H's observational position on L.",
      "ja": "+与えられたIPパケットPについては、L上のHにおけるPの「ワイヤ到着時刻」はPのいずれかのビットが、L.にHの観察位置に現れた時に初めてTであります"
    },
    {
      "indent": 3,
      "text": "+ For a given IP packet P, the \"wire exit time\" of P at H on L is the first time T at which all the bits of P have appeared at H's observational position on L.",
      "ja": "+与えられたIPパケットPについては、L上のHにおけるPの「ワイヤ出口時間」はPの全ビットがL.にHの観察位置に現れているの第1時間Tであります"
    },
    {
      "indent": 3,
      "text": "This specification does not define H's exact observational position on L. That is left for the deployment setups to define. However, the position where PDM timestamps are taken SHOULD be as close to the physical network interface as possible. Not all implementations will be able to achieve the ideal level of measurement.",
      "ja": "この仕様は、展開のセットアップを定義するために放置されたL.上のHの正確な観察位置を定義していません。しかし、PDMのタイムスタンプが取得された位置は、可能な限り物理ネットワーク・インターフェースの近くであるべきです。いないすべての実装は、測定の理想的なレベルを達成することができるようになります。"
    },
    {
      "indent": 0,
      "text": "3.6. Dynamic Configuration Options",
      "section_title": true,
      "ja": "3.6. 動的な設定オプション"
    },
    {
      "indent": 3,
      "text": "If the PDM Destination Options header is used, then it MAY be turned on for all packets flowing through the host, applied to an upper-layer protocol (TCP, UDP, SCTP, etc.), a local port, or IP address only. These are at the discretion of the implementation.",
      "ja": "PDM宛先オプションヘッダが使用される場合、それはホストを通って流れるすべてのパケットのためにターンオンされ、上位層プロトコル（TCP、UDP、SCTP、等）、ローカルポート、またはIPアドレスのみに適用されます。これらは、実装の裁量です。"
    },
    {
      "indent": 0,
      "text": "3.7. Information Access and Storage",
      "section_title": true,
      "ja": "3.7. 情報アクセスとストレージ"
    },
    {
      "indent": 3,
      "text": "Measurement information provided by PDM may be made accessible for higher layers or the user itself. Similar to activating the use of PDM, the implementation may also provide an interface to indicate if received.",
      "ja": "PDMによって提供される測定情報は、上位層またはユーザ自身のためにアクセス可能にすることができます。 PDMの使用を活性化と同様に、実装は、受信したかどうかを示すためのインタフェースを提供することができます。"
    },
    {
      "indent": 3,
      "text": "PDM information may be stored, if desired. If a packet with PDM information is received and the information should be stored, the upper layers may be notified. Furthermore, the implementation should define a configurable maximum lifetime after which the information can be removed as well as a configurable maximum amount of memory that should be allocated for PDM information.",
      "ja": "所望であれば、PDM情報が格納されてもよいです。 PDM情報を有するパケットが受信された情報が格納されなければならない場合、上位レイヤに通知することができます。さらに、実装は、情報がPDM情報に割り当てられるべきメモリの設定可能最大量として同様に除去することができ、その後、設定最大寿命を定義する必要があります。"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "PDM may introduce some new security weaknesses.",
      "ja": "PDMは、いくつかの新しいセキュリティの弱点を導入することができます。"
    },
    {
      "indent": 0,
      "text": "4.1. Resource Consumption and Resource Consumption Attacks",
      "section_title": true,
      "ja": "4.1. リソース消費とリソース消費攻撃"
    },
    {
      "indent": 3,
      "text": "PDM needs to calculate the deltas for time and keep track of the sequence numbers. This means that control blocks that reside in memory may be kept at the end hosts per 5-tuple.",
      "ja": "PDMは、時間のためにデルタを計算し、シーケンス番号を追跡する必要があります。これは、メモリに常駐する制御ブロックは5タプル当たりのエンドホストに保つことができることを意味します。"
    },
    {
      "indent": 3,
      "text": "A limit on how much memory is being used SHOULD be implemented.",
      "ja": "使用されているどのくらいのメモリに制限が実施されるべきです。"
    },
    {
      "indent": 3,
      "text": "Without a memory limit, any time that a control block is kept in memory, an attacker can try to misuse the control blocks to cause excessive resource consumption. This could be used to compromise the end host.",
      "ja": "メモリの制限がなければ、制御ブロックがメモリに保持されている任意の時点では、攻撃者は、過度のリソース消費を引き起こすために制御ブロックを誤用してみてください。これは、エンドホストを危うくするために使用することができます。"
    },
    {
      "indent": 3,
      "text": "PDM is used only at the end hosts, and memory is used only at the end host and not at routers or middleboxes.",
      "ja": "PDMは、エンドホストでのみ使用され、メモリは、エンドホストではなく、ルータ又は中間装置で使用されます。"
    },
    {
      "indent": 0,
      "text": "4.2. Pervasive Monitoring",
      "section_title": true,
      "ja": "4.2.  Pervasiveのモニタリング"
    },
    {
      "indent": 3,
      "text": "Since PDM passes in the clear, a concern arises as to whether the data can be used to fingerprint the system or somehow obtain information about the contents of the payload.",
      "ja": "PDMが明確に通過するため、懸念は、データがシステムに指紋や何とかペイロードの内容に関する情報を得るために使用することができるかどうかの判定が生じます。"
    },
    {
      "indent": 3,
      "text": "Let us discuss fingerprinting of the end host first. It is possible that seeing the pattern of deltas or the absolute values could give some information as to the speed of the end host -- that is, if it is a very fast system or an older, slow device. This may be useful to the attacker. However, if the attacker has access to PDM, the attacker also has access to the entire packet and could make such a deduction based merely on the time frames elapsed between packets WITHOUT PDM.",
      "ja": "私たちは、最初のエンドホストのフィンガープリントを議論してみましょう。それは非常に高速なシステムや古い、低速なデバイスであれば、ある - デルタまたは絶対値のパターンを見てすることは、エンドホストの速度になど、いくつかの情報を与える可能性があります。これは、攻撃者に有用である可能性があります。攻撃者はPDMへのアクセス権を持っている場合は、攻撃者はまた、パケット全体へのアクセス権を持っており、フレームはPDMなしパケット間の経過時間に単に基づいて、このような控除を作ることができます。"
    },
    {
      "indent": 3,
      "text": "As far as deducing the content of the payload, in terms of the application-level information such as web page, user name, user password, and so on, it appears to us that PDM is quite unhelpful in this regard. Having said that, the ability to separate wire time from processing time may potentially provide an attacker with additional information. It is conceivable that an attacker could attempt to deduce the type of application in use by noting the server time and payload length. Some encryption algorithms attempt to obfuscate the packet length to avoid just such vulnerabilities. In the future, encryption algorithms may wish to obfuscate the server time as well.",
      "ja": "限り、このようなWebページ、ユーザー名、ユーザーパスワードなどなど、アプリケーション・レベルの情報の観点から、ペイロードの内容を推測するように、PDMは、この点ではかなり役に立たないであることを私たちに表示されます。処理時間からワイヤ時間を分離する能力は、潜在的に追加情報を攻撃者に提供することができる、と述べました。攻撃者がサーバーの時間とペイロード長に注目することによって、使用中のアプリケーションの種類を推定しようとするとことが考えられます。いくつかの暗号化アルゴリズムは、まさにそのような脆弱性を回避するために、パケット長を難読化しようとします。将来的には、暗号化アルゴリズムは、同様に、サーバの時刻を難読化することを望むかもしれません。"
    },
    {
      "indent": 0,
      "text": "4.3. PDM as a Covert Channel",
      "section_title": true,
      "ja": "4.3. 隠れチャネルとしてPDM"
    },
    {
      "indent": 3,
      "text": "PDM provides a set of fields in the packet that could be used to leak data. But there is no real reason to suspect that PDM would be chosen rather than another part of the payload or another extension header.",
      "ja": "PDMデータを漏洩するために使用することができるパケットのフィールドのセットを提供します。しかし、PDMは、ペイロードまたは別の拡張ヘッダの別の部分ではなく、選択されるであろうことを疑う本当の理由はありません。"
    },
    {
      "indent": 3,
      "text": "A firewall or another device could sanity-check the fields within PDM, but randomly assigned sequence numbers and delta times might be expected to vary widely. The biggest problem, though, is how an attacker would get access to PDM in the first place to leak data. The attacker would have to either compromise the end host or have a Man in the Middle (MitM). It is possible that either one could change the fields, but the other end host would then get sequence numbers and deltas that don't make any sense.",
      "ja": "ファイアウォールまたは別のデバイスは、PDM内のフィールドを健全性チェックができますが、ランダムに割り当てられたシーケンス番号とデルタ時間が大きく異なることが予想される場合があります。最大の問題は、しかし、攻撃者がデータを漏洩した最初の場所でPDMへのアクセスを取得する方法をです。攻撃者は、エンドホストを危うくまたは中間（のMitM）で男を持っているのどちらかだろう。どちらか一方のフィールドを変更できますが、他のエンドホストが、その後どんな意味がありませんシーケンス番号とデルタになるだろうことは可能です。"
    },
    {
      "indent": 3,
      "text": "It is conceivable that someone could compromise an end host and make it start sending packets with PDM without the knowledge of the host. But, again, the bigger problem is the compromise of the end host. Once that is done, the attacker probably has better ways to leak data.",
      "ja": "誰かがエンドホストを侵害し、それがホストの知識がなくてもPDMでのパケットの送信を開始させることが考えられます。しかし、再び、大きな問題は、エンドホストの妥協です。それが完了すると、攻撃者は、おそらくデータを漏洩するためのより良い方法があります。"
    },
    {
      "indent": 3,
      "text": "Having said that, if a PDM-aware middlebox or an implementation (destination host) detects some number of \"nonsensical\" sequence numbers or timing information, it could take action to block this traffic, discard it, or send an alert.",
      "ja": "PDM対応のミドルまたは実装（宛先ホスト）は、「無意味な」シーケンス番号やタイミング情報のいくつかの数を検出した場合、それは、このトラフィックをブロックするために行動を取る、それを破棄、またはアラートを送信することができ、と述べました。"
    },
    {
      "indent": 0,
      "text": "4.4. Timing Attacks",
      "section_title": true,
      "ja": "4.4. タイミング攻撃"
    },
    {
      "indent": 3,
      "text": "The fact that PDM can help in the separation of node processing time from network latency brings value to performance monitoring. Yet, it is this very characteristic of PDM that may be misused to make certain new types of timing attacks against protocols and implementations possible.",
      "ja": "PDMは、ネットワークの遅延からノードの処理時間の分離を助けることができるということは、パフォーマンスの監視に価値をもたらします。しかし、それは可能なプロトコルと実装に対する攻撃のタイミング、特定の新しいタイプを作るために悪用されるかもしれないPDMのこの非常に特徴的です。"
    },
    {
      "indent": 3,
      "text": "Depending on the nature of the cryptographic protocol used, it may be possible to leak the credentials of the device. For example, if an attacker can see that PDM is being used, then the attacker might use PDM to launch a timing attack against the keying material used by the cryptographic protocol.",
      "ja": "使用される暗号化プロトコルの性質に依存し、デバイスの資格情報を漏洩することも可能です。攻撃者はPDMが使用されていることを確認できた場合、攻撃者は、暗号プロトコルによって使用される鍵材料に対するタイミング攻撃を起動するPDMを使用するかもしれません。"
    },
    {
      "indent": 3,
      "text": "An implementation may want to be sure that PDM is enabled only for certain IP addresses or only for some ports. Additionally, the implementation SHOULD require an explicit restart of monitoring after a certain time period (for example, after 1 hour) to make sure that PDM is not accidentally left on (for example, after debugging has been done).",
      "ja": "実装は、PDMは、特定のIPアドレスだけのためにのみいくつかのポートが有効になっていることを確認したいことがあります。また、実装は（デバッグが行われた後、たとえば）PDMが誤っに残されていないことを確認する（例えば、1時間後に）一定期間の後に監視を明示的に再起動を要求すべきです。"
    },
    {
      "indent": 3,
      "text": "Even so, if using PDM, a user \"Consent to be Measured\" SHOULD be a prerequisite for using PDM. Consent is common in enterprises and with some subscription services. The actual content of \"Consent to be Measured\" will differ by site, but it SHOULD make clear that the traffic is being measured for Quality of Service (QoS) and to assist in diagnostics, as well as to make clear that there may be potential risks of certain vulnerabilities if the traffic is captured during a diagnostic session.",
      "ja": "そうであっても、PDM、ユーザー「測定することに同意する」を使用している場合PDMを使用するための前提条件であるべきです。同意は、企業と一部のサブスクリプションサービスと共通です。実際のコンテンツサイトによって異なります「同意を測定すること」、それは明確にすべきであるトラフィックは、サービスの品質（QoS）および診断を支援するだけでなく、可能性があるかもしれないことを明確にするために測定されていること特定の脆弱性のリスクトラフィックが診断セッション中に取得された場合。"
    },
    {
      "indent": 0,
      "text": "5. IANA Considerations",
      "section_title": true,
      "ja": "5. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA has registered a Destination Option Type assignment with the act bits set to 00 and the chg bit set to 0 from the \"Destination Options and Hop-by-Hop Options\" sub-registry of the \"Internet Protocol Version 6 (IPv6) Parameters\" registry [RFC2780] at <https://www.iana.org/assignments/ipv6-parameters/>.",
      "ja": "IANAは0に設定00に設定行為ビット及びCHGビットと宛先オプションタイプの割り当て登録された「宛先オプションとホップバイホップオプション」のサブレジストリ「インターネットプロトコルバージョン6（IPv6）のパラメータ」います<https://www.iana.org/assignments/ipv6-parameters/>でレジストリ[RFC2780]。"
    },
    {
      "indent": 3,
      "text": "Hex Value     Binary Value      Description                 Reference\n              act  chg  rest\n---------------------------------------------------------------------\n0x0F          00   0    01111   Performance and             RFC 8250\n                                Diagnostic Metrics (PDM)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6.参照"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC1122] Braden, R., Ed., \"Requirements for Internet Hosts - Communication Layers\", STD 3, RFC 1122, DOI 10.17487/RFC1122, October 1989, <https://www.rfc-editor.org/info/rfc1122>.",
      "ja": "[RFC1122]ブレーデン、R.、エド、 \"インターネットホストのための要件 - 通信層\"。、STD 3、RFC 1122、DOI 10.17487 / RFC1122、1989年10月、<https://www.rfc-editor.org/info/ RFC1122>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC2681] Almes, G., Kalidindi, S., and M. Zekauskas, \"A Round-trip Delay Metric for IPPM\", RFC 2681, DOI 10.17487/RFC2681, September 1999, <https://www.rfc-editor.org/info/rfc2681>.",
      "ja": "[RFC2681] Almes、G.、Kalidindi、S.、およびM. Zekauskas、 \"往復IPPMの遅延メトリック\"、RFC 2681、DOI 10.17487 / RFC2681、1999年9月、<HTTPS：//www.rfc-editor .ORG /情報/ rfc2681>。"
    },
    {
      "indent": 3,
      "text": "[RFC2780] Bradner, S. and V. Paxson, \"IANA Allocation Guidelines For Values In the Internet Protocol and Related Headers\", BCP 37, RFC 2780, DOI 10.17487/RFC2780, March 2000, <https://www.rfc-editor.org/info/rfc2780>.",
      "ja": "[RFC2780]ブラドナー、S.とV.パクソン、 \"インターネットプロトコルと関連ヘッダーの値のためのIANA配分ガイドライン\"、BCP 37、RFC 2780、DOI 10.17487 / RFC2780、2000年3月、<HTTPS：//www.rfc- editor.org/info/rfc2780>。"
    },
    {
      "indent": 3,
      "text": "[RFC4303] Kent, S., \"IP Encapsulating Security Payload (ESP)\", RFC 4303, DOI 10.17487/RFC4303, December 2005, <https://www.rfc-editor.org/info/rfc4303>.",
      "ja": "[RFC4303]ケント、S.、 \"IPカプセル化セキュリティペイロード（ESP）\"、RFC 4303、DOI 10.17487 / RFC4303、2005年12月、<https://www.rfc-editor.org/info/rfc4303>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B.、 \"RFC 2119個のキーワードに小文字VS大文字の曖昧さ\"、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[RFC8200] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July 2017, <https://www.rfc-editor.org/info/rfc8200>.",
      "ja": "[RFC8200]デアリング、S.とR. Hindenと \"インターネットプロトコル、バージョン6（IPv6）の仕様\"、STD 86、RFC 8200、DOI 10.17487 / RFC8200、2017年7月、<https://www.rfc-editor.org /情報/ rfc8200>。"
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC2330] Paxson, V., Almes, G., Mahdavi, J., and M. Mathis, \"Framework for IP Performance Metrics\", RFC 2330, DOI 10.17487/RFC2330, May 1998, <https://www.rfc-editor.org/info/rfc2330>.",
      "ja": "[RFC2330]パクソン、V.、Almes、G.、Mahdavi、J.、およびM.マティス、 \"IPパフォーマンス・メトリックのためのフレームワーク\"、RFC 2330、DOI 10.17487 / RFC2330、1998年5月、<HTTPS：//www.rfc -editor.org/info/rfc2330>。"
    },
    {
      "indent": 3,
      "text": "[TCPM] Scheffenegger, R., Kuehlewind, M., and B. Trammell, \"Encoding of Time Intervals for the TCP Timestamp Option\", Work in Progress, draft-trammell-tcpm-timestamp-interval-01, July 2013.",
      "ja": "【TCPM] Scheffenegger、R.、Kuehlewind、M.、およびB.トラメル、 \"TCPタイムスタンプオプションのための時間間隔のエンコーディング\"、進歩、ドラフトトラメル-tcpmタイムスタンプ間隔-01、2013年7月に働いています。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Context for PDM",
      "ja": "PDM付録A.コンテキスト"
    },
    {
      "indent": 0,
      "text": "A.1. End-User Quality of Service (QoS)",
      "ja": "A.1。サービスのエンドユーザーの品質（QoS）"
    },
    {
      "indent": 3,
      "text": "The timing values in PDM embedded in the packet will be used to estimate QoS as experienced by an end-user device.",
      "ja": "エンドユーザデバイスによって経験されるようなパケットに埋め込まれたPDMのタイミング値は、QoSを推定するために使用されるであろう。"
    },
    {
      "indent": 3,
      "text": "For many applications, the key user performance indicator is response time. When the end user is an individual, he is generally indifferent to what is happening along the network; what he really cares about is how long it takes to get a response back. But this is not just a matter of individuals' personal convenience. In many cases, rapid response is critical to the business being conducted.",
      "ja": "多くのアプリケーションでは、主要ユーザーのパフォーマンス指標は、応答時間です。エンドユーザーが個人である場合には、彼はネットワークに沿って何が起こっているのかと、一般的に無関心です。彼が本当に気にすることは、それが戻って応答を取得するのにかかる時間の長さです。しかし、これは個人の個人的な利便性だけの問題ではありません。多くの場合、迅速な対応は、事業が行われていることが重要です。"
    },
    {
      "indent": 3,
      "text": "Low, reliable, and acceptable response times are not just \"nice to have\". On many networks, the impact can be financial hardship or can endanger human life. In some cities, the emergency police contact system operates over IP; all levels of law enforcement use IP networks; transactions on our stock exchanges are settled using IP networks. The critical nature of such activities to our daily lives and financial well-being demands a simple solution to support response-time measurements.",
      "ja": "、低信頼性、および許容可能な応答時間は、ちょうど「あると便利」ではありません。多くのネットワークでは、影響は経済的困難であるか、または、人間の生命を危険にさらすことができます。いくつかの都市では、緊急時の警察のコンタクトシステムは、IP上で動作します。法執行機関の利用のIPネットワークのすべてのレベル。当社の証券取引所での取引は、IPネットワークを使用して決済されます。私たちの日常生活と金融幸福にそのような活動の重要な性質は、応答時間の測定をサポートするためのシンプルなソリューションが求められています。"
    },
    {
      "indent": 0,
      "text": "A.2. Need for a Packet Sequence Number (PSN)",
      "ja": "A.2。パケットシーケンス番号（PSN）の必要性"
    },
    {
      "indent": 3,
      "text": "While performing network diagnostics on an end-to-end connection, it often becomes necessary to isolate the factors along the network path responsible for problems. Diagnostic data may be collected at multiple places along the path (if possible), or at the source and destination. Then, in post-collection processing, the diagnostic data corresponding to each packet at different observation points must be matched for proper measurements. A sequence number in each packet provides a sufficient basis for the matching process. If need be, the timing fields may be used along with the sequence number to ensure uniqueness.",
      "ja": "エンドツーエンドの接続にネットワーク診断を実行するが、それは多くの場合、問題を担当するネットワーク経路に沿って要因を分離することが必要になります。診断データは、（可能な場合）、またはソースおよび宛先に経路に沿った複数の場所で収集されてもよいです。次いで、ポスト収集処理において、異なる観測点における各パケットに対応する診断データは、適切な測定のために一致しなければなりません。各パケットのシーケンス番号は、マッチング処理のために十分な基礎を提供します。必要であれば、タイミングフィールドは、一意性を保証するために、シーケンス番号と共に使用することができます。"
    },
    {
      "indent": 3,
      "text": "This method of data collection along the path is of special use for determining where packet loss or packet corruption is happening.",
      "ja": "パスに沿ってデータを収集するこの方法は、パケット損失またはパケットの破損が起こっている場所を決定するための特殊な用途です。"
    },
    {
      "indent": 3,
      "text": "The packet sequence number needs to be unique in the context of the session (5-tuple).",
      "ja": "パケットシーケンス番号は、セッション（5タプル）のコンテキスト内で一意である必要があります。"
    },
    {
      "indent": 0,
      "text": "A.3. Rationale for Defined Solution",
      "ja": "A.3。定義されたソリューションのための理論的根拠"
    },
    {
      "indent": 3,
      "text": "One of the important functions of PDM is to allow you to quickly dispatch the right set of diagnosticians. Within network or server latency, there may be many components. The job of the diagnostician is to rule each one out until the culprit is found.",
      "ja": "PDMの重要な機能の1つは、診断医の右のセットをすぐに派遣できるようにすることです。ネットワークやサーバの待ち時間内には、多くのコンポーネントがあるかもしれません。診断医の仕事は、犯人が見つかるまで各1を除外することです。"
    },
    {
      "indent": 3,
      "text": "PDM will fit into this diagnostic picture by quickly telling you how to escalate. PDM will point to either the network area or the server area. Within the server latency, PDM does not tell you whether the bottleneck is in the IP stack, the application, or buffer allocation. Within the network latency, PDM does not tell you which of the network segments or middleboxes is at fault.",
      "ja": "PDMはすぐにエスカレートする方法を伝えることで、この診断画像にフィットします。 PDMは、ネットワークエリアやサーバエリアのいずれかを指します。サーバーの待ち時間の中で、PDMは、ボトルネックがIPスタック、アプリケーション、またはバッファ割り当てであるかどうかを教えてくれません。ネットワークの待ち時間内では、PDMが故障しているネットワークセグメントやミドルボックスのどのあなたを教えてくれありません。"
    },
    {
      "indent": 3,
      "text": "What PDM does tell you is whether the problem is in the network or the server.",
      "ja": "PDMはあなたを教えて何の問題は、ネットワークまたはサーバーにあるかどうかです。"
    },
    {
      "indent": 0,
      "text": "A.4. Use PDM with Other Headers",
      "ja": "A.4。その他のヘッダとPDMを使用してください"
    },
    {
      "indent": 3,
      "text": "For diagnostics, one may want to use PDM with other headers (Layer 2, Layer 3, etc). For example, if PDM is used by a technician (or tool) looking at a packet capture, within the packet capture, they would have available to them the Layer 2 header, IP header (v6 or v4), TCP header, UDP header, ICMP header, SCTP header, or other headers. All information would be looked at together to make sense of the packet flow. The technician or processing tool could analyze, report, or ignore the data from PDM, as necessary.",
      "ja": "診断のために、一方が他方のヘッダ（レイヤ2、レイヤ3、など）とPDMを使用することもできます。 PDMは、パケットキャプチャを見て技術者（またはツール）で使用された場合、パケットキャプチャの中に、彼らは、レイヤ2ヘッダ、IPヘッダ（V6またはV4）、TCPヘッダ、UDPヘッダを彼らに利用できるだろうICMPヘッダ、SCTPヘッダ、又は他のヘッダ。すべての情報は、パケットフローの意味を理解するために一緒に見えたことでしょう。技術者または処理ツールは、レポートを分析し、またはPDMからのデータを無視し、必要に応じて可能性があります。"
    },
    {
      "indent": 3,
      "text": "For an example of how PDM can help with TCP retransmission problems, please look at Appendix C.",
      "ja": "PDMは、TCPの再送問題を助けることができる方法の例については、付録Cをご覧ください"
    },
    {
      "indent": 0,
      "text": "Appendix B. Timing Considerations",
      "ja": "付録B.タイミングの考慮事項"
    },
    {
      "indent": 0,
      "text": "B.1. Calculations of Time Differentials",
      "ja": "B.1。時間格差の計算"
    },
    {
      "indent": 3,
      "text": "When SCALEDTLR or SCALEDTLS is used, it means that the description of the processing applies equally to SCALEDTLR and SCALEDTLS.",
      "ja": "SCALEDTLR又はSCALEDTLSが使用される場合、それは、処理の説明はSCALEDTLRとSCALEDTLSに等しく適用されることを意味します。"
    },
    {
      "indent": 3,
      "text": "The time counter in a CPU is a binary whole number representing a number of milliseconds (msec), microseconds (usec), or even picoseconds (psec). Representing one of these values as attoseconds (asec) means multiplying by 10 raised to some exponent. Refer to this table of equalities:",
      "ja": "CPU内の時間カウンタは、バイナリ全体（ミリ秒）ミリ秒数を表す数値、マイクロ秒（マイクロ秒）、あるいはピコ秒（ピコ秒）です。アト秒（ASEC）のように、これらの値の1つを表すことは、いくつかの指数に上昇させ10を乗じることを意味します。等式の、この表を参照してください："
    },
    {
      "indent": 6,
      "text": "Base value        = # of sec      = # of asec     1000s of asec\n---------------   -------------   -------------   -------------\n1 second          1 sec           10**18 asec     1000**6 asec\n1 millisecond     10**-3  sec     10**15 asec     1000**5 asec\n1 microsecond     10**-6  sec     10**12 asec     1000**4 asec\n1 nanosecond      10**-9  sec     10**9  asec     1000**3 asec\n1 picosecond      10**-12 sec     10**6  asec     1000**2 asec\n1 femtosecond     10**-15 sec     10**3  asec     1000**1 asec",
      "raw": true
    },
    {
      "indent": 3,
      "text": "For example, if you have a time differential expressed in microseconds, since each microsecond is 10**12 asec, you would multiply your time value by 10**12 to obtain the number of attoseconds. If your time differential is expressed in nanoseconds, you would multiply by 10**9 to get the number of attoseconds.",
      "ja": "あなたは、各マイクロ秒が10 ** 12 ASECあるので、時間差は、マイクロ秒単位で持っている場合たとえば、あなたはアト秒の数を取得する** 12 10で、あなたの時間の値を掛けます。あなたの時間差がナノ秒単位で表現されている場合は、アト秒の数を取得するために10 ** 9を掛けます。"
    },
    {
      "indent": 3,
      "text": "The result is a binary value that will need to be shortened by a number of bits so it will fit into the 16-bit PDM delta field.",
      "ja": "結果は、16ビットPDMデルタフィールドに収まるようにビット数だけ短くする必要がバイナリ値です。"
    },
    {
      "indent": 3,
      "text": "The next step is to divide by 2 until the value is contained in just 16 significant bits. The exponent of the value in the last column of the table is useful here; the initial scaling factor is that exponent multiplied by 10. This is the minimum number of low-order bits to be shifted out or discarded. It represents dividing the time value by 1024 raised to that exponent.",
      "ja": "次のステップは、値がちょうど16の最下位ビットに含まれるまで、2で割ることです。表の最後の列の値の指数は、ここに便利です。最初のスケーリングファクタは、これは下位ビットの最小数がシフトアウトまたは廃棄されるべきである10を乗じ、その指数です。これは、その指数に上昇し1024時間の値を割る表します。"
    },
    {
      "indent": 3,
      "text": "The resulting value may still be too large to fit into 16 bits but can be normalized by shifting out more bits (dividing by 2) until the value fits into the 16-bit delta field. The number of extra bits shifted out is then added to the scaling factor. The scaling factor -- the total number of low-order bits dropped -- is the SCALEDTLR or SCALEDTLS value.",
      "ja": "結果の値は依然として16ビットに収まるには大きすぎるかもしれないが、値は16ビットのデルタフィールドに収まるまで（2で割る）より多くのビットをシフトすることによって正規化することができます。余分なビットの数は、その後、スケーリング係数に加算されるシフトアウト。スケーリングファクタ - 下位ビットの合計数がドロップは -  SCALEDTLR又はSCALEDTLS値です。"
    },
    {
      "indent": 3,
      "text": "For example, say an application has these start and finish timer values (hexadecimal values, in microseconds):",
      "ja": "たとえば、アプリケーションがこれらを（マイクロ秒に16進数値）を開始し、タイマー値を終了していると言います。"
    },
    {
      "indent": 6,
      "text": "Finish:      27C849234 usec    (02:57:58.997556)\n-Start:      27C83F696 usec    (02:57:58.957718)\n==========   ==============    ==========================\nDifference   9B9E usec         0.039838 sec or 39838 usec",
      "raw": true
    },
    {
      "indent": 3,
      "text": "To convert this differential value to binary attoseconds, multiply the number of microseconds by 10**12. Divide by 1024**4, or simply discard 40 bits from the right. The result is 36232, or 8D88 in hex, with a scaling factor or SCALEDTLR/SCALEDTLS value of 40.",
      "ja": "バイナリアト秒にこの差分値を変換するために、10 ** 12マイクロ秒の数を掛け。 ** 4 1024分割、または単に右から40ビットを捨てます。結果は、スケーリングファクタまたは40のSCALEDTLR / SCALEDTLS値と、ヘクスに36232、又は8D88です。"
    },
    {
      "indent": 3,
      "text": "For another example, presume the time differential is larger, say 32.311072 seconds, which is 32311072 usec. Each microsecond is 10**12 asec, so multiply by 10**12, giving the hexadecimal value 1C067FCCAE8120000. Using the initial scaling factor of 40, drop the last 10 characters (40 bits) from that string, giving 1C067FC. This will not fit into a delta field, as it is 25 bits long. Shifting the value to the right another 9 bits results in a delta value of E033, with a resulting scaling factor of 49.",
      "ja": "別の例として、時間差が大きいと推定、32311072マイクロ秒である32.311072秒、と言います。各マイクロ秒は、1​​6進数の値1C067FCCAE8120000を与えるので、乗算** 12 10によって、10 ** 12 ASECあります。 40の最初のスケーリングファクタを使用して、1C067FCを与えて、その文字列から最後の10文字（40ビット）をドロップ。それは25ビット長であるので、これは、デルタフィールドに収まらないだろう。他の9ビットは49の結果として得られるスケーリング係数で、E033のデルタ値をもたらす右に値をシフトします。"
    },
    {
      "indent": 3,
      "text": "When the time-differential value is a small number, regardless of the time unit, the exponent trick given above is not useful in determining the proper scaling value. For example, if the time differential is 3 seconds and you want to convert that directly, you would follow this path:",
      "ja": "時間微分値が少数である場合、に関係なく時間単位の、上記指数トリックは、適切なスケーリング値を決定するのに有用ではありません。時間差は3秒であり、あなたがそれを直接変換したい場合たとえば、あなたはこのパスをたどります。"
    },
    {
      "indent": 5,
      "text": "3 seconds = 3*10**18 asec (decimal) = 29A2241AF62C0000 asec (hexadecimal)",
      "ja": "3秒= 3 * 10 ** 18 ASEC（10進数）= 29A2241AF62C0000 ASEC（16進数）"
    },
    {
      "indent": 3,
      "text": "If you just truncate the last 60 bits, you end up with a delta value of 2 and a scaling factor of 60, when what you really wanted was a delta value with more significant digits. The most precision with which you can store this value in 16 bits is A688, with a scaling factor of 46.",
      "ja": "あなただけの最後の60ビットを切り捨てる場合、あなたはあなたが本当に望んでいたことは、より有効桁数を持つデルタ値だったとき、2のデルタ値と60のスケーリング係数で終わります。あなたは16ビットで、この値を格納可能な最も精度が46のスケーリング係数で、A688です。"
    },
    {
      "indent": 0,
      "text": "B.2. Considerations of This Time-Differential Representation",
      "ja": "B.2。この時間微分表現の考慮事項"
    },
    {
      "indent": 3,
      "text": "There are two considerations to be taken into account with this representation of a time differential. The first is whether there are any limitations on the maximum or minimum time differential that can be expressed using the method of a delta value and a scaling factor. The second is the amount of imprecision introduced by this method.",
      "ja": "時間差のこの表現を考慮に入れるべき2つの考慮事項があります。最初は、デルタ値の方法及びスケーリング係数を用いて表すことができる最大又は最小の時間微分の任意の制限があるかどうかです。第二は、この方法によって導入される不正確さの量です。"
    },
    {
      "indent": 0,
      "text": "B.2.1. Limitations with This Encoding Method",
      "ja": "B.2.1。このエンコード方式と制限事項"
    },
    {
      "indent": 3,
      "text": "The DELTATLS and DELTATLR fields store only the 16 most significant bits of the time-differential value. Thus, the range, excluding the scaling factor, is from 0 to 65535, or a maximum of 2**16 - 1. This method is further described in [TCPM].",
      "ja": "DELTATLSとDELTATLRフィールドは、時間微分値のわずか16個の最上位ビットを記憶します。従って、スケーリングファクタを除く範囲は、0〜65535で、又は2 ** 16の最大 -  1。この方法は、さらに[TCPM]に記載されています。"
    },
    {
      "indent": 3,
      "text": "The actual magnitude of the time differential is determined by the scaling factor. SCALEDTLR and SCALEDTLS are 8-bit unsigned integers, so the scaling factor ranges from 0 to 255. The smallest number that can be represented would have a value of 1 in the delta field and a value of 0 in the associated scale field. This is the representation for 1 attosecond. Clearly, this allows PDM to measure extremely small time differentials.",
      "ja": "時間差の実際の大きさは、スケーリングファクタによって決定されます。表現可能な最小数はデルタフィールドに1の値と関連したスケールフィールドに0の値を有するであろうSCALEDTLRとSCALEDTLSは8ビットの符号なし整数であるので、スケーリング係数は、0から255の範囲です。これは、1つのアト秒の表現です。明らかに、これは、PDMが非常に小さい時間差を測定することができます。"
    },
    {
      "indent": 3,
      "text": "On the other end of the scale, the maximum delta value is 65535, or FFFF in hexadecimal. If the maximum scale value of 255 is used, the time differential represented is 65535*2**255, which is over 3*10**55 years -- essentially, forever. So, there appears to be no real limitation to the time differential that can be represented.",
      "ja": "スケールの他方の端部に、最大デルタ値は65535、または16進数でFFFFです。基本的に、永遠に -  255の最大スケール値が使用されている場合、表現の時間差が55 ** 10 * 3年以上のある65535 * 2 ** 255、です。だから、表現することができる時間微分には本当の制限はないようです。"
    },
    {
      "indent": 0,
      "text": "B.2.2. Loss of Precision Induced by Timer Value Truncation",
      "ja": "B.2.2。タイマ値の切り捨てによって誘導される精度の損失"
    },
    {
      "indent": 3,
      "text": "As PDM specifies the DELTATLR and DELTATLS values as 16-bit unsigned integers, any time that the precision is greater than those 16 bits, there will be truncation of the trailing bits, with an accompanying loss of precision in the value.",
      "ja": "PDMは、16ビットの符号なし整数としてDELTATLRとDELTATLS値を指定するように、精度は、これら16ビットより大きいことを任意の時点で、値の精度添付の損失と、末尾ビットの切り捨てが存在するであろう。"
    },
    {
      "indent": 3,
      "text": "Any time-differential value smaller than 65536 asec can be stored exactly in DELTATLR or DELTATLS, because the representation of this value requires at most 16 bits.",
      "ja": "この値の表現が最大16ビットで必要なので65536 ASECよりも小さい任意の時間微分値が、DELTATLR又はDELTATLSに正確に記憶することができます。"
    },
    {
      "indent": 3,
      "text": "Since the time-differential values in PDM are measured in attoseconds, the range of values that would be truncated to the same encoded value is 2**((Scale) - 1) asec.",
      "ja": "ASEC  -  PDMの時間微分値がアト秒で測定されているので、同一の符号化された値に切り捨てされる値の範囲は2 **（1（スケール））です。"
    },
    {
      "indent": 3,
      "text": "For example, the smallest time differential that would be truncated to fit into a delta field is",
      "ja": "例えば、デルタフィールドに収まるように切り捨てられる最小の時間差があります"
    },
    {
      "indent": 6,
      "text": "1 0000 0000 0000 0000 = 65536 asec",
      "ja": "1 0000 0000 0000 0000 = 65536 ASEC"
    },
    {
      "indent": 3,
      "text": "This value would be encoded as a delta value of 8000 (hexadecimal) with a scaling factor of 1. The value",
      "ja": "この値は、1の値のスケーリング係数と8000（16進数）のデルタ値として符号化されます"
    },
    {
      "indent": 6,
      "text": "1 0000 0000 0000 0001 = 65537 asec",
      "ja": "1 0000 0000 0000 0001 = 65537 ASEC"
    },
    {
      "indent": 3,
      "text": "would also be encoded as a delta value of 8000 with a scaling factor of 1. This actually is the largest value that would be truncated to that same encoded value. When the scale value is 1, the value range is calculated as 2**1 - 1, or 1 asec, which you can see is the difference between these minimum and maximum values.",
      "ja": "1.本のスケーリング係数と8000のデルタ値が実際にその同じ符号化された値に切り捨てられる最大値であるとしても、符号化されるだろう。これらの最小値と最大値の間の差である見ることができる1、又は1 ASEC、 - スケール値が1である場合、値の範囲は2 ** 1として計算されます。"
    },
    {
      "indent": 3,
      "text": "The scaling factor is defined as the number of low-order bits truncated to reduce the size of the resulting value so it fits into a 16-bit delta field. If, for example, you had to truncate 12 bits, the loss of precision would depend on the bits you truncated. The range of these values would be",
      "ja": "スケーリング係数は、それが16ビットのデルタ・フィールドに収まるように得られた値の大きさを減少させるために切り捨て下位ビットの数として定義されます。例えば、あなたが12ビットを切り捨てなければならなかった、場合は、精度の損失は、あなたが切り捨てビットに依存するであろう。これらの値の範囲は次のようになります"
    },
    {
      "indent": 6,
      "text": "0000 0000 0000 = 0 asec",
      "ja": "0000 0000 0000 = 0 ASEC"
    },
    {
      "indent": 9,
      "text": "to",
      "ja": "と"
    },
    {
      "indent": 6,
      "text": "1111 1111 1111 = 4095 asec",
      "ja": "= 1111 1111 1111 4095 ASEC"
    },
    {
      "indent": 3,
      "text": "So, the minimum loss of precision would be 0 asec, where the delta value exactly represents the time differential, and the maximum loss of precision would be 4095 asec. As stated above, the scaling factor of 12 means that the maximum loss of precision is 2**12 - 1 asec, or 4095 asec.",
      "ja": "したがって、精度の最小の損失は、デルタ値が正確に時間差を表しており、精度の最大損失は4095 ASECあろう0 ASEC、あろう。 1 ASEC、又は4095 ASEC  - 上述したように、12のスケーリング係数は、精度の最大損失は、2 ** 12であることを意味します。"
    },
    {
      "indent": 3,
      "text": "Compare this loss of precision to the actual time differential. The range of actual time-differential values that would incur this loss of precision is from",
      "ja": "実際の時間差に精度のこの損失を比較してください。精度の損失を被ることになる実際の時間微分値の範囲からのものです"
    },
    {
      "indent": 3,
      "text": "1000 0000 0000 0000 0000 0000 0000 = 2**27 asec or 134217728 asec",
      "ja": "1000 0000 0000 0000 0000 0000 0000 = 2 ** 27 ASECまたは134217728 ASEC"
    },
    {
      "indent": 6,
      "text": "to",
      "ja": "と"
    },
    {
      "indent": 3,
      "text": "1111 1111 1111 1111 1111 1111 1111 = 2**28 - 1 asec or 268435455 asec",
      "ja": "1111 1111 1111 1111 1111 1111 1111 = 2 ** 28から1 ASEC又は268435455 ASEC"
    },
    {
      "indent": 3,
      "text": "Granted, these are small values, but the point is that any value between these two values will have a maximum loss of precision of 4095 asec, or about 0.00305% for the first value, as encoded, and at most 0.001526% for the second. These maximum-loss percentages are consistent for all scaling values.",
      "ja": "確かに、これらは小さな値であるが、ポイントは、符号化されたように、これら2つの値の間の任意の値は、最初の値の最大4095 ASECの精度の損失、又は約0.00305パーセントを有することであり、そして第二のために最大で0.001526%。これらの最大の損失割合は、すべてのスケーリング値で一致しています。"
    },
    {
      "indent": 0,
      "text": "Appendix C. Sample Packet Flows",
      "ja": "付録C.サンプルパケットフロー"
    },
    {
      "indent": 0,
      "text": "C.1. PDM Flow - Simple Client-Server Traffic",
      "ja": "C.1。 PDMフロー - シンプルなクライアント - サーバトラフィック"
    },
    {
      "indent": 3,
      "text": "Below is a sample simple flow for PDM with one packet sent from Host A and one packet received by Host B. PDM does not require time synchronization between Host A and Host B. The calculations to derive meaningful metrics for network diagnostics are shown below each packet sent or received.",
      "ja": "以下、ホストB. PDMは、ホストAとホストBとの間の時間同期を必要としないことにより、ネットワーク診断のために意味のある指標を導出する計算は、各パケットの下に示されているホストAから送信された一つのパケットとのPDMのサンプル簡単流れであり、1つのパケットを受信送信または受信されました。"
    },
    {
      "indent": 0,
      "text": "C.1.1. Step 1",
      "ja": "C.1.1。ステップ1"
    },
    {
      "indent": 3,
      "text": "Packet 1 is sent from Host A to Host B. The time for Host A is set initially to 10:00AM.",
      "ja": "パケット1は、ホストAのための時間は10:00 AMに最初に設定されているB.をホストするホストAから送信されます。"
    },
    {
      "indent": 3,
      "text": "The time and packet sequence number are saved by the sender internally. The packet sequence number and delta times are sent in the packet.",
      "ja": "時間やパケットシーケンス番号は、内部送信者によって保存されます。パケットシーケンス番号とデルタ時間はパケットで送信されます。"
    },
    {
      "indent": 6,
      "text": "Packet 1",
      "ja": "パケット1"
    },
    {
      "indent": 17,
      "text": "+----------+             +----------+\n|          |             |          |\n|   Host   | ----------> |   Host   |\n|    A     |             |    B     |\n|          |             |          |\n+----------+             +----------+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "PDM Contents:",
      "ja": "PDMの内容："
    },
    {
      "indent": 6,
      "text": "PSNTP : Packet Sequence Number This Packet: 25 PSNLR : Packet Sequence Number Last Received: - DELTATLR : Delta Time Last Received: - SCALEDTLR: Scale of Delta Time Last Received: 0 DELTATLS : Delta Time Last Sent: - SCALEDTLS: Scale of Delta Time Last Sent: 0",
      "ja": "PSNTP：パケットシーケンス番号このパケット：25 PSNLR：パケットシーケンス番号最終受付： -  DELTATLR：デルタ時間最終受付： -  SCALEDTLR：デルタ時間最後のスケールが受信：0 DELTATLS：デルタ時間最後に送信： -  SCALEDTLS：デルタ時間のスケールを最後に送信：0"
    },
    {
      "indent": 6,
      "text": "Internally, within the sender, Host A, it must keep:",
      "ja": "内部的には、送信者、ホストAの中に、それは維持する必要があります："
    },
    {
      "indent": 6,
      "text": "Packet Sequence Number of the last packet sent: 25 Time the last packet was sent: 10:00:00",
      "ja": "送信された最後のパケットのパケットシーケンス番号：最後のパケットが送信された25時間：10:00:00"
    },
    {
      "indent": 3,
      "text": "Note: The initial PSNTP from Host A starts at a random number -- in this case, 25. The time in these examples is shown in seconds for the sake of simplicity.",
      "ja": "注：ホストAからの初期PSNTPは乱数で開始 - この場合には、これらの実施例において25時間は簡略化のために秒単位で示されています。"
    },
    {
      "indent": 0,
      "text": "C.1.2. Step 2",
      "ja": "C.1.2。ステップ2"
    },
    {
      "indent": 3,
      "text": "Packet 1 is received at Host B. Its time is set to 1 hour later than Host A -- in this case, 11:00AM.",
      "ja": "この場合には、11:00  - パケット1は、その時間は、後にホストAよりも1時間に設定されているホストBで受信されます。"
    },
    {
      "indent": 3,
      "text": "Internally, within the receiver, Host B, it must note the following:",
      "ja": "内部的には、受信機の中に、ホストBは、それは次の点に注意しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Packet Sequence Number of the last packet received: 25 Time the last packet was received : 11:00:03",
      "ja": "最後のパケットのパケットシーケンス番号は、受信：最後のパケットが受信された25時間：11時00分03秒"
    },
    {
      "indent": 3,
      "text": "Note: This timestamp is in Host B time. It has nothing whatsoever to do with Host A time. The packet sequence number of the last packet received will become PSNLR, which will be sent out in the packet sent by Host B in the next step. The timestamp of the packet last received (as noted above) will be used as input to calculate the DELTATLR value to be sent out in the packet sent by Host B in the next step.",
      "ja": "注意：このタイムスタンプは、ホストBの時間です。これは、ホストとの時間を行うには全く何の関係もありません。受信された最後のパケットのパケットシーケンス番号は、次のステップで、ホストBによって送信されたパケットで送信されるPSNLR、なろう。 （上述のように）パケットのタイムスタンプは最後に受信した次のステップで、ホストBによって送信されたパケットで送信されるDELTATLR値を計算するための入力として使用されます。"
    },
    {
      "indent": 0,
      "text": "C.1.3. Step 3",
      "ja": "C.1.3。ステップ3"
    },
    {
      "indent": 3,
      "text": "Packet 2 is sent by Host B to Host A. Note that the initial packet sequence number (PSNTP) from Host B starts at a random number -- in this case, 12. Before sending the packet, Host B does a calculation of deltas. Since Host B knows when it is sending the packet and it knows when it received the previous packet, it can do the following calculation:",
      "ja": "ホストBからの最初のパケットのシーケンス番号（PSNTP）は乱数で開始することパケット2はA.注意をホストするホストBによって送信される - この場合には、12パケットを送信する前に、ホストBは、デルタの計算を行います。それは、パケットを送信しているとき、ホストBが知っていて、それが以前のパケットを受信したときに、それは知っているので、それは次の計算を行うことができます。"
    },
    {
      "indent": 6,
      "text": "DELTATLR = send time (packet 2) - receive time (packet 1)",
      "ja": "DELTATLR =時間（パケット2）を送信 - 時間（パケット1）を受信"
    },
    {
      "indent": 3,
      "text": "Note: Both the send time and the receive time are saved internally in Host B. They do not travel in the packet. Only the change in values (delta) is in the packet. This is the DELTATLR value.",
      "ja": "注：送信時間と受信時間の両方が彼らがパケットを旅行していないホストBに内部的に保存されます。値（デルタ）の変化のみがパケットです。これはDELTATLR値です。"
    },
    {
      "indent": 3,
      "text": "Assume that within Host B we have the following:",
      "ja": "ホストBの中に、我々は次のように持っていると仮定します。"
    },
    {
      "indent": 6,
      "text": "Packet Sequence Number of the last packet received: 25 Time the last packet was received: 11:00:03 Packet Sequence Number of this packet: 12 Time this packet is being sent: 11:00:07",
      "ja": "最後のパケットのパケットシーケンス番号は、受信：最後のパケットが受信された25時間：このパケットの11時00分03秒パケットシーケンス番号：このパケットが送信されている12時間：11時00分07秒を"
    },
    {
      "indent": 3,
      "text": "A delta value to be sent out in the packet can now be calculated. DELTATLR becomes:",
      "ja": "パケットで送信されるデルタ値は現在、計算することができます。 DELTATLRは次のようになります。"
    },
    {
      "indent": 6,
      "text": "4 seconds = 11:00:07 - 11:00:03 = 3782DACE9D900000 asec",
      "ja": "4秒= 11時00分07秒 - 午前11時00分03秒= 3782DACE9D900000 ASEC"
    },
    {
      "indent": 3,
      "text": "This is the derived metric: server delay. The time scaling factors must be converted; in this case, the time differential is DE0B, and the scaling factor is 2E, or 46 in decimal. Then, these values, along with the packet sequence numbers, will be sent to Host A as follows:",
      "ja": "サーバ遅延：これは派生メトリックです。時間スケーリング係数を変換する必要があります。この場合、時間差はDE0Bであり、スケーリング係数は2E、又は小数で46です。次のように続いて、これらの値は、パケットのシーケンス番号と一緒に、Aをホストに送信されます。"
    },
    {
      "indent": 6,
      "text": "Packet 2",
      "ja": "パケット2"
    },
    {
      "indent": 17,
      "text": "+----------+             +----------+\n|          |             |          |\n|   Host   | <---------- |   Host   |\n|    A     |             |    B     |\n|          |             |          |\n+----------+             +----------+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "PDM Contents:",
      "ja": "PDMの内容："
    },
    {
      "indent": 6,
      "text": "PSNTP : Packet Sequence Number This Packet: 12 PSNLR : Packet Sequence Number Last Received: 25 DELTATLR : Delta Time Last Received: DE0B (4 seconds) SCALEDTLR: Scale of Delta Time Last Received: 2E (46 decimal) DELTATLS : Delta Time Last Sent: - SCALEDTLS: Scale of Delta Time Last Sent: 0",
      "ja": "受信したパケットシーケンス番号最終：PSNTP：パケットシーケンス番号このパケット：12 PSNLR 25 DELTATLR：デルタ時間最終受付：DE0B（4秒）SCALEDTLR：2E（46進）はDELTATLS：デルタタイムラストは送信デルタ時間最終受付のスケールを： -  SCALEDTLS：デルタ時間最後のスケールが送信：0"
    },
    {
      "indent": 3,
      "text": "The metric left to be calculated is the round-trip delay. This will be calculated by Host A when it receives packet 2.",
      "ja": "メトリックは、ラウンドトリップ遅延で計算する左。それは、パケット2を受信したときにこれは、ホストAによって計算されます。"
    },
    {
      "indent": 0,
      "text": "C.1.4. Step 4",
      "ja": "C.1.4。ステップ4"
    },
    {
      "indent": 3,
      "text": "Packet 2 is received at Host A. Remember that its time is set to 1 hour earlier than Host B. Internally, it must note the following:",
      "ja": "パケット2は、以下の点に注意しなければならない、その時は、内部ホストBよりも早く1時間に設定されていることを忘れないでくださいホストAで受け取られます："
    },
    {
      "indent": 6,
      "text": "Packet Sequence Number of the last packet received: 12 Time the last packet was received : 10:00:12",
      "ja": "最後のパケットのパケットシーケンス番号は、受信：最後のパケットが受信された12時間：10時00分12秒"
    },
    {
      "indent": 3,
      "text": "Note: This timestamp is in Host A time. It has nothing whatsoever to do with Host B time.",
      "ja": "注：このタイムスタンプは、ホストでの時間です。これは、ホストBの時間で行うには全く何の関係もありません。"
    },
    {
      "indent": 3,
      "text": "So, Host A can now calculate total end-to-end time. That is:",
      "ja": "だから、ホストAは現在、全エンド・ツー・エンドの時間を計算することができます。あれは："
    },
    {
      "indent": 6,
      "text": "End-to-End Time = Time Last Received - Time Last Sent",
      "ja": "エンドツーエンドの時間=時間最終受領 - タイム最終送信します"
    },
    {
      "indent": 3,
      "text": "For example, packet 25 was sent by Host A at 10:00:00. Packet 12 was received by Host A at 10:00:12, so:",
      "ja": "例えば、パケット25は、十時00分00秒で、ホストAによって送信されました。パケット12は、そう、10時00分12秒で、ホストAによって受信されました。"
    },
    {
      "indent": 6,
      "text": "End-to-End time = 10:00:12 - 10:00:00 or 12 (server and network round-trip delay combined).",
      "ja": "エンドツーエンドの時間= 10時00分12秒 - 十時00分00秒または12（サーバとネットワークの往復遅延組み合わせ）。"
    },
    {
      "indent": 6,
      "text": "This time may also be called \"total overall Round-Trip Time (RTT)\", which includes network RTT and host response time.",
      "ja": "この時間は、ネットワークRTTとホストの応答時間を含む、「総全体的なラウンドトリップ時間（RTT）」と呼ばれてもよいです。"
    },
    {
      "indent": 3,
      "text": "We will call this derived metric \"Delta Time Last Sent\" (DELTATLS).",
      "ja": "私たちは、この派生メトリック「送信済みデルタタイムラスト」（DELTATLS）を呼び出します。"
    },
    {
      "indent": 3,
      "text": "Round-trip delay can now be calculated. The formula is:",
      "ja": "ラウンドトリップ遅延は現在、計算することができます。式は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "Round-trip delay = (Delta Time Last Sent - Delta Time Last Received)",
      "ja": "ラウンドトリップ遅延=（ - デルタタイムラストは、受信したデルタタイム最後に送信）"
    },
    {
      "indent": 3,
      "text": "Or:",
      "ja": "または："
    },
    {
      "indent": 6,
      "text": "Round-trip delay = 12 - 4 or 8",
      "ja": "往復遅延= 12から4または8"
    },
    {
      "indent": 3,
      "text": "At this point, the only problem is that all metrics are in Host A only and not exposed in a packet. To do that, we need a third packet.",
      "ja": "この時点では、唯一の問題は、すべてのメトリックは、ホストAだけではなく、パケットに暴露しているということです。そのためには、第3のパケットを必要としています。"
    },
    {
      "indent": 3,
      "text": "Note: This simple example assumes one send and one receive. That is done only for purposes of explaining the function of PDM. In cases where there are multiple packets returned, one would take the time in the last packet in the sequence. The calculations of such timings and intelligent processing are the function of post-processing of the data.",
      "ja": "注：この単純な例では、1は、送信と1つの受信を前提としています。それが唯一のPDMの機能を説明する目的のために行われます。返された複数のパケットがある場合には、1は、シーケンス内の最後のパケットに時間がかかるだろう。このようなタイミングとインテリジェント処理の計算は、データの後処理の関数です。"
    },
    {
      "indent": 0,
      "text": "C.1.5. Step 5",
      "ja": "C.1.5。ステップ5"
    },
    {
      "indent": 3,
      "text": "Packet 3 is sent from Host A to Host B.",
      "ja": "パケット3は、BをホストするホストAから送信されます"
    },
    {
      "indent": 17,
      "text": "+----------+             +----------+\n|          |             |          |\n|   Host   | ----------> |   Host   |\n|    A     |             |    B     |\n|          |             |          |\n+----------+             +----------+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "PDM Contents:",
      "ja": "PDMの内容："
    },
    {
      "indent": 6,
      "text": "PSNTP : Packet Sequence Number This Packet: 26 PSNLR : Packet Sequence Number Last Received: 12 DELTATLR : Delta Time Last Received: 0 SCALEDTLS: Scale of Delta Time Last Received 0 DELTATLS : Delta Time Last Sent: A688 (scaled value) SCALEDTLR: Scale of Delta Time Last Received: 30 (48 decimal)",
      "ja": "PSNTP：パケットシーケンス番号このパケット：26 PSNLR：パケットシーケンス番号、最後に受信：12 DELTATLR：デルタ時間最終受付：0 SCALEDTLS：デルタ時間最後に送信：：A688（スケーリングされた値）SCALEDTLR：デルタ時間のスケールが最後に0 DELTATLSを受信するスケールデルタ時間の最終受付：30（48進）"
    },
    {
      "indent": 3,
      "text": "To calculate two-way delay, any packet-capture device may look at these packets and do what is necessary.",
      "ja": "双方向の遅延を計算するには、任意のパケット・キャプチャデバイスは、これらのパケットを見て、必要なものを行うことができます。"
    },
    {
      "indent": 0,
      "text": "C.2. Other Flows",
      "ja": "C.2。他のフロー"
    },
    {
      "indent": 3,
      "text": "What has been discussed so far is a simple flow with one packet sent and one returned. Let's look at how PDM may be useful in other types of flows.",
      "ja": "何これまで議論されてきたことは一つのパケット送信され、1が返されると、単純な流れです。のは、PDMが流れ、他の種類のに有用であり得る方法を見てみましょう。"
    },
    {
      "indent": 0,
      "text": "C.2.1. PDM Flow - One-Way Traffic",
      "ja": "C.2.1。 PDMフロー - ワンウェイトラフィック"
    },
    {
      "indent": 3,
      "text": "The flow on a particular session may not be a send-receive paradigm. Let us consider some other situations. In the case of a one-way flow, one might see the following.",
      "ja": "特定のセッションのフローは、送受信パラダイムではないかもしれません。私たちはいくつかの他の状況を考えてみましょう。一方向の流れの場合、1は、以下を参照してください可能性があります。"
    },
    {
      "indent": 3,
      "text": "Note: The time is expressed in generic units for simplicity. That is, these values do not represent a number of attoseconds, microseconds, or any other real units of time.",
      "ja": "注意：時間は、単純化のための一般的な単位で表されます。つまり、これらの値は、アト秒、マイクロ秒、または時間のいずれかの他の実ユニットの数を表すものではありません。"
    },
    {
      "indent": 3,
      "text": "Packet   Sender      PSN            PSN        Delta Time  Delta Time\n                  This Packet    Last Recvd    Last Recvd  Last Sent\n=====================================================================\n1        Server       1              0              0            0\n2        Server       2              0              0            5\n3        Server       3              0              0           12\n4        Server       4              0              0           20",
      "raw": true
    },
    {
      "indent": 3,
      "text": "What does this mean, and how is it useful?",
      "ja": "何がこの平均を行い、そしてどのようにそれは便利ですか！"
    },
    {
      "indent": 3,
      "text": "In a one-way flow, only the Delta Time Last Sent will be seen as used. Recall that Delta Time Last Sent is the difference between the send of one packet from a device and the next. This is a measure of throughput for the sender -- according to the sender's point of view. That is, it is a measure of how fast the application itself (with stack time included) is able to send packets.",
      "ja": "一方向の流れでは、送信された唯一のデルタタイムラストは、使用されるように見られます。送信デルタ時間最終デバイスと次から一つのパケットの送信との間の差であることを思い出してください。ビューの送信者のポイントに応じて - これは、送信側のスループットの尺度です。つまり、パケットを送信することができますどのくらいの速アプリケーション自体（スタック時間が含まれる）の尺度である、です。"
    },
    {
      "indent": 3,
      "text": "How might this be useful? If one is having a performance issue at the client and sees that packet 2, for example, is sent after 5 time units from the server but takes 10 times that long to arrive at the destination, then one may safely conclude that there are delays in the path, other than at the server, that may be causing the delivery issue for that packet. Such delays may include the network links, middleboxes, etc.",
      "ja": "これはどのように役に立つかもしれませんか？一つは、クライアントでパフォーマンスの問題を有し、かつ、パケット2は、例えば、サーバから5時間単位後に送信されるが、目的地に到着する長い10回を要している、そして1が安全に遅延があることを結論付けることができることを認識した場合そのパケットの配信の問題を引き起こすことができるサーバで以外のパス、、。このような遅延は、リンク、ミドルボックスなどのネットワークを含むこともできます"
    },
    {
      "indent": 3,
      "text": "True one-way traffic is quite rare. What people often mean by \"one-way\" traffic is an application such as FTP where a group of packets (for example, a TCP window size worth) is sent and the sender then waits for acknowledgment. This type of flow would actually fall into the \"multiple-send\" traffic model.",
      "ja": "真の一方通行は非常にまれです。人々はしばしば「一方通行」は、トラフィックは、そのような（例えば、価値がTCPウィンドウサイズ）パケット群が送信され、送信者は、その後の確認応答を待機するFTPなどのアプリケーションです。何を意味します流れのこのタイプは、実際には「複数の送信」トラフィックモデルに陥るでしょう。"
    },
    {
      "indent": 0,
      "text": "C.2.2. PDM Flow - Multiple-Send Traffic",
      "ja": "C.2.2。 PDMフロー - 複数の送信トラフィック"
    },
    {
      "indent": 3,
      "text": "Assume that two packets are sent from the server and then an ACK is sent from the client. For example, a TCP flow will do this, per RFC 1122 [RFC1122], Section 4.2.3. Packets 1 and 2 are sent from the server, and then an ACK is sent from the client. Packet 4 starts a second sequence from the server.",
      "ja": "2つのパケットがサーバから送信された後、ACKがクライアントから送信されていることを前提としています。たとえば、TCPフローは、RFC 1122 [RFC1122]、セクション4.2.3あたりに、これを行います。パケット1と2は、サーバから送信され、その後、ACKがクライアントから送信されます。パケット4は、サーバから第二のシーケンスを開始します。"
    },
    {
      "indent": 3,
      "text": "Packet   Sender      PSN            PSN       Delta Time  Delta Time\n                 This Packet    Last Recvd    Last Recvd  Last Sent\n=====================================================================\n1        Server       1              0              0           0\n2        Server       2              0              0           5\n3        Client       1              2             20           0\n4        Server       3              1             10          15",
      "raw": true
    },
    {
      "indent": 3,
      "text": "How might this be used?",
      "ja": "これはどのように使用されるかもしれませんか？"
    },
    {
      "indent": 3,
      "text": "Notice that in packet 3, the client has a Delta Time Last Received value of 20. Recall that:",
      "ja": "：パケット3に、クライアントはデルタタイム最終ことを20リコールの値を受信して​​いることに注意してください"
    },
    {
      "indent": 6,
      "text": "DELTATLR = send time (packet 3) - receive time (packet 2)",
      "ja": "DELTATLR =時間（パケット3）を送信する - 時間（パケット2）を受信"
    },
    {
      "indent": 3,
      "text": "So, what does one know now? In this case, Delta Time Last Received is the processing time for the client to send the next packet.",
      "ja": "だから、一つは今何を知っていますか？この場合、受信したデルタタイムラストは次のパケットを送信するために、クライアントの処理時間です。"
    },
    {
      "indent": 3,
      "text": "How to interpret this depends on what is actually being sent. Remember that PDM is not being used in isolation; rather, it is used to supplement the fields found in other headers. Let's take two examples:",
      "ja": "これを解釈する方法、実際に送られているかに依存します。 PDMは、単独で使用されていないことに注意してください。むしろ、他のヘッダで見つかったフィールドを補足するために使用されます。のは、2つの例を見てみましょう："
    },
    {
      "indent": 3,
      "text": "1. The client is sending a standalone TCP ACK. One would find this by looking at the payload length in the IPv6 header and the TCP Acknowledgment field in the TCP header. So, in this case, the client is taking 20 time units to send back the ACK. This may or may not be interesting.",
      "ja": "1.クライアントは、スタンドアロンのTCP ACKを送信しています。一つは、TCPヘッダ内のIPv6ヘッダ内のペイロード長とTCP確認応答フィールドを見て、これを見つけるだろう。したがって、この場合には、クライアントがACKを返送する20時間単位を取っています。これは面白いかであってもなくてもよいです。"
    },
    {
      "indent": 3,
      "text": "2. The client is sending data with the packet. Again, one would find this by looking at the payload length in the IPv6 header and the TCP Acknowledgment field in the TCP header. So, in this case, the client is taking 20 time units to send back data. This may represent \"User Think Time\". Again, this may or may not be interesting in isolation. But if there is a performance problem receiving data at the server, then, taken in conjunction with RTT or other packet timing information, this information may be quite interesting.",
      "ja": "2.クライアントは、パケットでデータを送信しています。ここでも、1はTCPヘッダ内のIPv6ヘッダ内のペイロード長とTCP確認応答フィールドを見て、これを見つけるだろう。したがって、この場合には、クライアントがデータを返送するために20時間単位を取っています。これは、「ユーザーの時間を考える」を表すことができます。繰り返しますが、これはあるいは単独で面白いあってもなくてもよいです。サーバーでデータを受信し、パフォーマンス上の問題がある場合しかし、その後、RTTまたは他のパケットタイミング情報と併せて、この情報は非常に興味深いかもしれません。"
    },
    {
      "indent": 3,
      "text": "Of course, one also needs to look at the PSN Last Received field to make sure of the interpretation of this data -- that is, to make sure that the Delta Time Last Received corresponds to the packet of interest.",
      "ja": "つまり、デルタタイム最終関心のパケットに対応して受信していることを確認する - もちろん、人はまた、このデータの解釈を確認するために、最後に受信フィールドPSNを見てする必要があります。"
    },
    {
      "indent": 3,
      "text": "The benefits of PDM are that such information is now available in a uniform manner for all applications and all protocols without extensive changes required to applications.",
      "ja": "PDMの利点は、そのような情報は、アプリケーションに必要な大規模な変更を加えることなく、すべてのアプリケーションおよびすべてのプロトコルのために均一な方法で利用できるようになりましたということです。"
    },
    {
      "indent": 0,
      "text": "C.2.3. PDM Flow - Multiple-Send Traffic with Errors",
      "ja": "C.2.3。 PDMの流れ - エラーと複数の送信トラフィック"
    },
    {
      "indent": 3,
      "text": "Let us now look at a case of how PDM may be able to help in a case of TCP retransmission and add to the information that is sent in the TCP header.",
      "ja": "私たちは今、PDMは、TCP再送の場合に役立つとTCPヘッダに送信された情報に追加することができるかもしれない方法の場合を見てみましょう。"
    },
    {
      "indent": 3,
      "text": "Assume that three packets are sent with each send from the server.",
      "ja": "それぞれに送信された3つのパケットがサーバから送信することを想定しています。"
    },
    {
      "indent": 3,
      "text": "From the server, this is what is seen:",
      "ja": "サーバーから、これは見ているものです。"
    },
    {
      "indent": 3,
      "text": "Pkt Sender    PSN        PSN      Delta Time  Delta Time  TCP   Data\n            This Pkt  Last Recvd  Last Recvd  Last Sent   SEQ   Bytes\n=====================================================================\n1   Server      1        0           0           0        123   100\n2   Server      2        0           0           5        223   100\n3   Server      3        0           0           5        333   100",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The client, however, does not receive all the packets. From the client, this is what is seen for the packets sent from the server:",
      "ja": "クライアントは、しかし、すべてのパケットを受信しません。クライアントから、これは、サーバから送信されるパケットのために見られるものです。"
    },
    {
      "indent": 3,
      "text": "Pkt Sender    PSN        PSN      Delta Time  Delta Time  TCP   Data\n            This Pkt  Last Recvd  Last Recvd  Last Sent   SEQ   Bytes\n=====================================================================\n1   Server     1         0           0           0        123   100\n2   Server     3         0           0           5        333   100",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Let's assume that the server now retransmits the packet. (Obviously, a duplicate acknowledgment sequence for fast retransmit or a retransmit timeout would occur. To illustrate the point, these packets are being left out.)",
      "ja": "のは、サーバーが現在パケットを再送信すると仮定しましょう。 （もちろん、高速再送または再送タイムアウトの重複確認応答シーケンスが発生します。ポイントを説明するために、これらのパケットは除外されています。）"
    },
    {
      "indent": 3,
      "text": "So, if a TCP retransmission is done, then from the client, this is what is seen for the packets sent from the server:",
      "ja": "TCPの再送が行われているのであれば、クライアントから、これは、サーバから送信されるパケットのために見られるものです。"
    },
    {
      "indent": 3,
      "text": "Pkt Sender    PSN        PSN      Delta Time  Delta Time  TCP   Data\n           This Pkt   Last Recvd  Last Recvd  Last Sent   SEQ   Bytes\n=====================================================================\n1   Server    4          0           0           30       223   100",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The server has resent the old packet 2 with a TCP sequence number of 223. The retransmitted packet now has a PSN This Packet value of 4.",
      "ja": "サーバは、再送パケットがPSN 4のこのパケット値を持つ223のTCPシーケンス番号と古いパケット2を再送しています。"
    },
    {
      "indent": 3,
      "text": "The Delta Time Last Sent is 30 -- in other words, the time between sending the packet with a PSN of 3 and this current packet.",
      "ja": "送信デルタタイム最終30である - つまり、3のPSNと、この現在のパケットとパケットを送信するまでの時間。"
    },
    {
      "indent": 3,
      "text": "Let's say that packet 4 is lost again. Then, after some amount of time (RTO), the packet with a TCP sequence number of 223 is resent.",
      "ja": "のは、パケット4が再び失われたとしましょう。その後、ある程度の時間（RTO）の後に、223のTCPシーケンス番号を持つパケットが再送されます。"
    },
    {
      "indent": 3,
      "text": "From the client, this is what is seen for the packets sent from the server:",
      "ja": "クライアントから、これは、サーバから送信されるパケットのために見られるものです。"
    },
    {
      "indent": 3,
      "text": "Pkt Sender    PSN        PSN     Delta Time  Delta Time  TCP   Data\n           This Pkt  Last Recvd  Last Recvd  Last Sent   SEQ   Bytes\n====================================================================\n1   Server    5         0           0           60       223   100",
      "raw": true
    },
    {
      "indent": 3,
      "text": "If this packet now arrives at the destination, one has a very good idea that packets exist that are being sent from the server as retransmissions and not arriving at the client. This is because the PSN of the resent packet from the server is 5 rather than 4. If we had used the TCP sequence number alone, we would never have seen this situation. The TCP sequence number in all situations is 223.",
      "ja": "このパケットは今目的地に到着した場合、1パケットがクライアントに到着し、再送信していないとして、サーバから送信されているものが存在することは非常に良いアイデアを持っています。サーバからの再送パケットのPSNは、我々はTCPシーケンス番号のみを使用していた場合、私たちはこのような状況を見たことはなかっただろう5ではなく4であるためです。すべての状況でTCPシーケンス番号は223です。"
    },
    {
      "indent": 3,
      "text": "This situation would be experienced by the user of the application (the human being actually sitting somewhere) as \"hangs\" or long delays between packets. On large networks, to diagnose problems such as these where packets are lost somewhere on the network, one has to take multiple traces to find out exactly where.",
      "ja": "この状況は、「ハング」またはパケット間の長い遅延などのアプリケーション（人間が実際にどこかに座って）の使用者が経験することでしょう。大規模なネットワークでは、そのようなパケットがネットワーク上のどこかに失われる場合これらのような問題を診断するために、1は正確にどこを見つけるために複数のトレースを取ることがあります。"
    },
    {
      "indent": 3,
      "text": "The first thing to do is to start with doing a trace at the client and the server, so that we can see if the server sent a particular packet and the client received it. If the client did not receive it, then we start tracking back to trace points at the router right after the server and the router right before the client. Did they get these packets that the server has sent? This is a time-consuming activity.",
      "ja": "まず最初に行うには、サーバが特定のパケットを送信し、クライアントがそれを受け取った場合、私たちが見ることができるように、クライアントとサーバーでのトレースをやって起動することです。クライアントがそれを受信しなかった場合、我々は正しい、サーバーとクライアントの前に、ルータの直後ルータでポイントをトレースするために戻って追跡を開始します。彼らは、サーバーが送信したこれらのパケットを取得しましたか？これは時間のかかる作業です。"
    },
    {
      "indent": 3,
      "text": "With PDM, we can speed up the diagnostic time because we may be able to use only the trace taken at the client to see what the server is sending.",
      "ja": "私たちは、サーバーが送信しているかを確認するために、クライアントで撮影されたトレースのみを使用することができる可能性があるため、PDMで、我々は、診断時間をスピードアップすることができます。"
    },
    {
      "indent": 0,
      "text": "Appendix D. Potential Overhead Considerations",
      "ja": "付録D.潜在的なオーバーヘッドの考慮事項"
    },
    {
      "indent": 3,
      "text": "One might wonder about the potential overhead of PDM. First, PDM is entirely optional. That is, a site may choose to implement PDM or not, as they wish. If they are happy with the costs of PDM versus the benefits, then the choice should be theirs.",
      "ja": "一つは、PDMの潜在的なオーバーヘッドについて疑問に思うかもしれません。まず、PDMは完全にオプションです。これは、サイトは、彼らが望むように、PDMを実装するかしないかを選択することも、あります。彼らは対効果PDMのコストに満足している場合は、次の選択が彼らでなければなりません。"
    },
    {
      "indent": 3,
      "text": "Below is a table outlining the potential overhead in terms of additional time to deliver the response to the end user for various assumed RTTs:",
      "ja": "以下、種々の仮定のRTTのためのエンド・ユーザーへの応答を提供するための追加の時間の点で潜在的オーバーヘッドを概説する表です。"
    },
    {
      "indent": 3,
      "text": "Bytes         RTT         Bytes        Bytes      New     Overhead\nin Packet                Per Millisec  in PDM     RTT\n====================================================================\n1000       1000 milli         1        16     1016.000  16.000 milli\n1000        100 milli        10        16      101.600   1.600 milli\n1000         10 milli       100        16       10.160   0.160 milli\n1000          1 milli      1000        16        1.016   0.016 milli",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Below are two examples of actual RTTs for packets traversing large enterprise networks.",
      "ja": "以下の大規模な企業ネットワークを通過するパケットのための実際のRTTの2つの例です。"
    },
    {
      "indent": 3,
      "text": "The first example is for packets going to multiple business partners:",
      "ja": "最初の例では、複数の取引先に行くパケットに対して次のとおりです。"
    },
    {
      "indent": 3,
      "text": "Bytes         RTT         Bytes        Bytes      New     Overhead\nin Packet                Per Millisec  in PDM     RTT\n====================================================================\n1000        17 milli        58         16       17.360   0.360 milli",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The second example is for packets at a large enterprise customer within a data center. Notice that the scale is now in microseconds rather than milliseconds:",
      "ja": "第二の例では、データセンター内の大企業顧客にパケットのためのものです。スケールはなくマイクロミリ秒に今あることに注意してください："
    },
    {
      "indent": 3,
      "text": "Bytes        RTT          Bytes        Bytes      New     Overhead\nin Packet                Per Microsec  in PDM     RTT\n====================================================================\n1000       20 micro         50         16       20.320   0.320 micro",
      "raw": true
    },
    {
      "indent": 3,
      "text": "As with other diagnostic tools, such as packet traces, a certain amount of processing time will be required to create and process PDM. Since PDM is lightweight (has only a few variables), we expect the processing time to be minimal.",
      "ja": "そのようなパケットトレースなどの他の診断ツールと同様に、処理時間の一定量は、PDMを作成し、処理するために必要とされるであろう。 PDMは、軽量である（唯一のいくつかの変数を持っている）ので、我々は、処理時間が最小限であることを期待しています。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Keven Haining, Al Morton, Brian Trammell, David Boyes, Bill Jouris, Richard Scheffenegger, and Rick Troth for their comments and assistance. We would also like to thank Tero Kivinen and Jouni Korhonen for their detailed and perceptive reviews.",
      "ja": "作者は彼らのコメントや支援のためKeven海寧、アル・モートン、ブライアン・トラメル、デビッド・ボイズ、ビルJouris、リチャードScheffenegger、とリックTrothに感謝したいと思います。また、その詳細と知覚レビューのためにTERO KivinenとJouni Korhonenに感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Nalini Elkins Inside Products, Inc. 36A Upper Circle Carmel Valley, CA 93924 United States of America",
      "ja": "アメリカのナリニエルキンズ内部プロダクツ社36Aアッパーサークルカーメルバレー、CA 93924米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 831 659 8360 Email: nalini.elkins@insidethestack.com URI: http://www.insidethestack.com",
      "ja": "電話：+1 831 659 8360 Eメール：nalini.elkins@insidethestack.com URI：http://www.insidethestack.com"
    },
    {
      "indent": 3,
      "text": "Robert M. Hamilton Chemical Abstracts Service A Division of the American Chemical Society 2540 Olentangy River Road Columbus, Ohio 43202 United States of America",
      "ja": "ロバート・M.ハミルトンケミカルアブストラクトサービスアメリカ化学会のA部門2540 Olentangyリバーロードアメリカのコロンバス、オハイオ43202米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 614 447 3600 x2517 Email: rhamilton@cas.org URI: http://www.cas.org",
      "ja": "電話：+1 614 447 3600 x2517メール：rhamilton@cas.org URI：http://www.cas.org"
    },
    {
      "indent": 3,
      "text": "Michael S. Ackermann Blue Cross Blue Shield of Michigan P.O. Box 2888 Detroit, Michigan 48231 United States of America",
      "ja": "ミシガン州の私書箱のマイケル・S.アッカーマンブルークロス・ブルーシールドボックス2888アメリカのデトロイト、ミシガン48231米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 310 460 4080 Email: mackermann@bcbsm.com URI: http://www.bcbsm.com",
      "ja": "電話：+1 310 460 4080 Eメール：mackermann@bcbsm.com URI：http://www.bcbsm.com"
    }
  ]
}