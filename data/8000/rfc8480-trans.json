{
  "title": {
    "text": "RFC 8480 - 6TiSCH Operation Sublayer (6top) Protocol (6P)",
    "ja": "RFC 8480 - 6TiSCH Operation Sublayer（6top）プロトコル（6P）"
  },
  "number": 8480,
  "created_at": "2019-10-23 14:00:18.901913+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                      Q. Wang, Ed.\nRequest for Comments: 8480               Univ. of Sci. and Tech. Beijing\nCategory: Standards Track                                  X. Vilajosana\nISSN: 2070-1721                          Universitat Oberta de Catalunya\n                                                             T. Watteyne\n                                                          Analog Devices\n                                                           November 2018",
      "raw": true
    },
    {
      "indent": 13,
      "text": "6TiSCH Operation Sublayer (6top) Protocol (6P)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document defines the \"IPv6 over the TSCH mode of IEEE 802.15.4e\" (6TiSCH) Operation Sublayer (6top) Protocol (6P), which enables distributed scheduling in 6TiSCH networks. 6P allows neighbor nodes to add/delete Time-Slotted Channel Hopping (TSCH) cells to/on one another. 6P is part of the 6TiSCH Operation Sublayer (6top), the layer just above the IEEE Std 802.15.4 TSCH Medium Access Control layer. 6top is composed of one or more Scheduling Functions (SFs) and the 6top Protocol defined in this document. A 6top SF decides when to add/delete cells, and it triggers 6P Transactions. The definition of SFs is out of scope for this document; however, this document provides the requirements for an SF.",
      "ja": "このドキュメントでは、6TiSCHネットワークでの分散スケジューリングを可能にする「IEEE 802.15.4eのTSCHモードでのIPv6」（6TiSCH）Operation Sublayer（6top）Protocol（6P）を定義しています。 6Pでは、近隣ノードがタイムスロットチャネルホッピング（TSCH）セルを相互に追加/削除できます。 6Pは6TiSCH Operation Sublayer（6top）の一部であり、IEEE Std 802.15.4 TSCH Medium Access Controlレイヤーのすぐ上のレイヤーです。 6topは、このドキュメントで定義されている1つ以上のスケジューリング機能（SF）と6topプロトコルで構成されています。 6top SFは、いつセルを追加/削除するかを決定し、6Pトランザクションをトリガーします。 SFの定義は、このドキュメントの範囲外です。 ただし、このドキュメントはSFの要件を提供します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはインターネット標準化過程の文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、Internet Engineering Task Force（IETF）の製品です。 IETFコミュニティのコンセンサスを表しています。 これは公開レビューを受けており、Internet Engineering Steering Group（IESG）による公開が承認されています。 インターネット標準の詳細については、RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8480.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8480で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2018 IETF Trustおよび文書作成者として特定された人物。 全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書は、BCP 78と、この文書の公開日に有効なIETF文書に関するIETFトラストの法的条項（https://trustee.ietf.org/license-info）の対象となります。 これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているので、注意深く確認してください。 このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseテキストを含める必要があり、Simplified BSD Licenseに記載されている保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Requirements Language ......................................5\n2. 6TiSCH Operation Sublayer (6top) ................................5\n   2.1. Hard/Soft Cells ............................................6\n   2.2. Using 6P with the Minimal 6TiSCH Configuration .............6\n3. 6top Protocol (6P) ..............................................7\n   3.1. 6P Transactions ............................................7\n        3.1.1. 2-Step 6P Transaction ...............................8\n        3.1.2. 3-Step 6P Transaction ..............................10\n   3.2. Message Format ............................................12\n        3.2.1. 6top Information Element (IE) ......................12\n        3.2.2. Generic 6P Message Format ..........................12\n        3.2.3. 6P CellOptions .....................................13\n        3.2.4. 6P CellList ........................................16\n   3.3. 6P Commands and Operations ................................17\n        3.3.1. Adding Cells .......................................17\n        3.3.2. Deleting Cells .....................................19\n        3.3.3. Relocating Cells ...................................21\n        3.3.4. Counting Cells .....................................27\n        3.3.5. Listing Cells ......................................28\n        3.3.6. Clearing the Schedule ..............................30\n        3.3.7. Generic Signaling between SFs ......................31\n   3.4. Protocol Functional Details ...............................31\n        3.4.1. Version Checking ...................................31\n        3.4.2. SFID Checking ......................................32\n        3.4.3. Concurrent 6P Transactions .........................32\n        3.4.4. 6P Timeout .........................................33\n        3.4.5. Aborting a 6P Transaction ..........................33\n        3.4.6. SeqNum Management ..................................33\n        3.4.7. Handling Error Responses ...........................40\n   3.5. Security ..................................................40",
      "raw": true
    },
    {
      "indent": 3,
      "text": "4. Requirements for 6top Scheduling Function (SF) Specifications ..41\n   4.1. SF Identifier (SFID) ......................................41\n   4.2. Requirements for an SF Specification ......................41\n5. Security Considerations ........................................42\n6. IANA Considerations ............................................43\n   6.1. IETF IE Subtype 6P ........................................43\n   6.2. 6TiSCH Parameters Subregistries ...........................43\n        6.2.1. 6P Version Numbers .................................43\n        6.2.2. 6P Message Types ...................................44\n        6.2.3. 6P Command Identifiers .............................44\n        6.2.4. 6P Return Codes ....................................45\n        6.2.5. 6P Scheduling Function Identifiers .................46\n        6.2.6. 6P CellOptions Bitmap ..............................47\n7. References .....................................................48\n   7.1. Normative References ......................................48\n   7.2. Informative References ....................................48\nAppendix A. Recommended Structure of an SF Specification ..........49\nAuthors' Addresses ................................................50",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "All communication in an \"IPv6 over the TSCH mode of IEEE 802.15.4e\" (6TiSCH) network is orchestrated by a schedule [RFC7554]. The schedule is composed of cells, each identified by a [slotOffset,channelOffset] (Section 3.2.4). This specification defines the 6TiSCH Operation Sublayer (6top) Protocol (6P), which is terminated by 6top. 6P allows a node to communicate with a neighbor node to add/delete Time-Slotted Channel Hopping (TSCH) cells to/on one another. This results in distributed schedule management in a 6TiSCH network. 6top is composed of one or more Scheduling Functions (SFs) and the 6top Protocol defined in this document. The definition of SFs is out of scope for this document; however, this document provides the requirements for an SF.",
      "ja": "「IEEE 802.15.4eのTSCHモードでのIPv6」（6TiSCH）ネットワークでのすべての通信は、スケジュール[RFC7554]によって調整されます。 スケジュールはセルで構成され、各セルは[slotOffset、channelOffset]（セクション3.2.4）で識別されます。 この仕様は、6topで終了する6TiSCH Operation Sublayer（6top）Protocol（6P）を定義しています。 6Pでは、ノードが隣接ノードと通信して、タイムスロットチャネルホッピング（TSCH）セルを相互に追加/削除できます。 これにより、6TiSCHネットワークでの分散スケジュール管理が実現します。 6topは、このドキュメントで定義されている1つ以上のスケジューリング機能（SF）と6topプロトコルで構成されています。 SFの定義は、このドキュメントの範囲外です。 ただし、このドキュメントはSFの要件を提供します。"
    },
    {
      "indent": 3,
      "text": "The example network depicted in Figure 1 is used to describe the interaction between nodes. We consider the canonical case where node \"A\" issues 6P Requests (also referred to as \"commands\" in this document) to node \"B\". We use this example throughout this document: node A always represents the node that issues a 6P Request, and node B represents the node that receives this request.",
      "ja": "図1に示すネットワークの例は、ノード間の相互作用を説明するために使用されます。 ノード「A」がノード「B」に6Pリクエスト（このドキュメントでは「コマンド」とも呼ばれる）を発行する標準的なケースを検討します。 このドキュメント全体でこの例を使用します。ノードAは常に6Pリクエストを発行するノードを表し、ノードBはこのリクエストを受信するノードを表します。"
    },
    {
      "indent": 32,
      "text": "    (R)\n    / \\\n   /   \\\n(B)-----(C)\n |       |\n |       |\n(A)     (D)",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 1: A Simple 6TiSCH Network",
      "ja": "図1：シンプルな6TiSCHネットワーク"
    },
    {
      "indent": 3,
      "text": "We consider that node A monitors the communication cells it has in its schedule to node B:",
      "ja": "ノードAは、ノードBへのスケジュールに含まれる通信セルを監視すると考えます。"
    },
    {
      "indent": 3,
      "text": "o If node A determines that the number of link-layer frames it is sending to node B per unit of time exceeds the capacity offered by the TSCH cells it has scheduled to node B, it triggers a 6P Transaction with node B to add one or more cells to the TSCH schedule of both nodes.",
      "ja": "o単位時間あたりにノードBに送信するリンク層フレームの数がノードBにスケジュールしたTSCHセルによって提供される容量を超えるとノードAが判断した場合、ノードBとの6Pトランザクションをトリガーして、1つまたは 両方のノードのTSCHスケジュールにより多くのセル。"
    },
    {
      "indent": 3,
      "text": "o If the traffic is lower than the capacity offered by the TSCH cells it has scheduled to node B, node A triggers a 6P Transaction with node B to delete one or more cells in the TSCH schedule of both nodes.",
      "ja": "oノードBにスケジュールしたTSCHセルが提供する容量よりトラフィックが少ない場合、ノードAはノードBで6Pトランザクションをトリガーして、両方のノードのTSCHスケジュールの1つ以上のセルを削除します。"
    },
    {
      "indent": 3,
      "text": "o Node A MAY also monitor statistics to determine whether collisions are happening on a particular cell to node B. If this feature is enabled, node A communicates with node B to \"relocate\" this particular cell to a different [slotOffset,channelOffset] location in the TSCH schedule.",
      "ja": "oノードAは統計を監視して、特定のセルでノードBへの衝突が発生しているかどうかを判断することもできます。この機能が有効な場合、ノードAはノードBと通信してこの特定のセルを別の[slotOffset、channelOffset] TSCHスケジュール。"
    },
    {
      "indent": 3,
      "text": "This results in distributed schedule management in a 6TiSCH network.",
      "ja": "これにより、6TiSCHネットワークでの分散スケジュール管理が実現します。"
    },
    {
      "indent": 3,
      "text": "The 6top SF defines when to add/delete a cell to/on a neighbor. Different applications require different SFs; this topic is out of scope for this document. Different SFs are expected to be defined in future companion specifications. A node MAY implement multiple SFs and run them at the same time. At least one SF MUST be running. The SFID field contained in all 6P messages allows a node to invoke the appropriate SF on a per-6P Transaction basis.",
      "ja": "6top SFは、近隣にセルを追加/削除するタイミングを定義します。 アプリケーションごとに異なるSFが必要です。 このトピックは、このドキュメントの範囲外です。 将来のコンパニオン仕様では、異なるSFが定義される予定です。 ノードは複数のSFを実装し、同時に実行する場合があります。 少なくとも1つのSFが実行されている必要があります。 すべての6Pメッセージに含まれるSFIDフィールドにより、ノードは6Pトランザクションごとに適切なSFを呼び出すことができます。"
    },
    {
      "indent": 3,
      "text": "Section 2 describes 6top. Section 3 defines 6P. Section 4 provides guidelines on how to define an SF.",
      "ja": "セクション2では、6topについて説明します。 セクション3は6Pを定義しています。 セクション4は、SFの定義方法に関するガイドラインを提供します。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Language",
      "section_title": true,
      "ja": "1.1.  要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. 6TiSCH Operation Sublayer (6top)",
      "section_title": true,
      "ja": "2. 6TiSCH操作サブレイヤー（6top）"
    },
    {
      "indent": 3,
      "text": "As depicted in Figure 2, 6top is the layer just above the IEEE Std 802.15.4 TSCH Medium Access Control (MAC) layer [IEEE802154]. We use \"802.15.4\" as a short version of \"IEEE Std 802.15.4\" in this document.",
      "ja": "図2に示すように、6topはIEEE Std 802.15.4 TSCHメディアアクセス制御（MAC）レイヤー[IEEE802154]のすぐ上のレイヤーです。 このドキュメントでは、「IEEE Std 802.15.4」の短いバージョンとして「802.15.4」を使用します。"
    },
    {
      "indent": 15,
      "text": "                    .\n|                   .                      |\n|             higher layers                |\n+------------------------------------------+\n|                 6top                     |\n+------------------------------------------+\n|          IEEE Std 802.15.4 TSCH          |\n|                   .                      |\n                    .",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 2: 6top in the Protocol Stack",
      "ja": "図2：プロトコルスタックの6top"
    },
    {
      "indent": 3,
      "text": "The roles of 6top are to:",
      "ja": "6topの役割は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Terminate 6P, which allows neighbor nodes to communicate to add/delete cells to/on one another.",
      "ja": "o 6Pを終了します。これにより、近隣ノードが相互にセルを追加/削除するために通信できるようになります。"
    },
    {
      "indent": 3,
      "text": "o Run one or multiple 6top SFs, which define the rules that decide when to add/delete cells.",
      "ja": "oセルを追加/削除するタイミングを決定するルールを定義する1つまたは複数の6top SFを実行します。"
    },
    {
      "indent": 0,
      "text": "2.1. Hard/Soft Cells",
      "section_title": true,
      "ja": "2.1.  ハード/ソフトセル"
    },
    {
      "indent": 3,
      "text": "Each cell in the schedule is either \"hard\" or \"soft\":",
      "ja": "スケジュール内の各セルは、「ハード」または「ソフト」です。"
    },
    {
      "indent": 3,
      "text": "o A soft cell can be read, added, deleted, or updated by 6top.",
      "ja": "oソフトセルは、6topで読み取り、追加、削除、または更新できます。"
    },
    {
      "indent": 3,
      "text": "o A hard cell is read-only for 6top.",
      "ja": "oハードセルは6topでは読み取り専用です。"
    },
    {
      "indent": 3,
      "text": "In the context of this specification, all the cells used by 6top are soft cells. Hard cells can be used, for example, when \"hard-coding\" a schedule [RFC8180].",
      "ja": "この仕様の文脈では、6topが使用するすべてのセルはソフトセルです。 ハードセルは、たとえば、スケジュールを「ハードコーディング」するときに使用できます[RFC8180]。"
    },
    {
      "indent": 0,
      "text": "2.2. Using 6P with the Minimal 6TiSCH Configuration",
      "section_title": true,
      "ja": "2.2.  最小限の6TiSCH構成で6Pを使用する"
    },
    {
      "indent": 3,
      "text": "6P MAY be used alongside the minimal 6TiSCH configuration [RFC8180]. In this case, it is RECOMMENDED to use two slotframes, as depicted in Figure 3:",
      "ja": "6Pは、最小限の6TiSCH構成[RFC8180]とともに使用できます。 この場合、図3に示すように、2つのスロットフレームを使用することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "o Slotframe 0 is used for traffic defined in the minimal 6TiSCH configuration. In Figure 3, Slotframe 0 is five slots long, but it can be shorter or longer.",
      "ja": "o Slotframe 0は、最小6TiSCH構成で定義されたトラフィックに使用されます。 図3では、Slotframe 0は5スロットの長さですが、それより短くても長くてもかまいません。"
    },
    {
      "indent": 3,
      "text": "o 6P allocates cells from Slotframe 1. In Figure 3, Slotframe 1 is 10 slots long, but it can be shorter or longer.",
      "ja": "o 6Pは、Slotframe 1からセルを割り当てます。図3では、Slotframe 1は10スロットの長さですが、それより短くても長くてもかまいません。"
    },
    {
      "indent": 3,
      "text": "                 | 0    1    2    3    4  | 0    1    2    3    4  |\n                 +------------------------+------------------------+\n     Slotframe 0 |    |    |    |    |    |    |    |    |    |    |\n    5 slots long | EB |    |    |    |    | EB |    |    |    |    |\n(Minimal 6TiSCH) |    |    |    |    |    |    |    |    |    |    |\n                 +-------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "              | 0    1    2    3    4    5    6    7    8    9  |\n              +-------------------------------------------------+\n  Slotframe 1 |    |    |    |    |    |    |    |    |    |    |\n10 slots long |    |A->B|    |    |    |    |    |    |B->A|    |\n         (6P) |    |    |    |    |    |    |    |    |    |    |\n              +-------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 3: 2-Slotframe Structure when Using 6P alongside the Minimal 6TiSCH Configuration",
      "ja": "図3：6TiSCHの最小構成とともに6Pを使用する場合の2スロットフレーム構造"
    },
    {
      "indent": 3,
      "text": "The minimal 6TiSCH configuration cell SHOULD be allocated from a slotframe of higher priority than the slotframe used by 6P for dynamic cell allocation. This way, dynamically allocated cells cannot \"mask\" the cells used by the minimal 6TiSCH configuration. 6top MAY support additional slotframes; how to use additional slotframes is out of scope for this document.",
      "ja": "最小の6TiSCH構成セルは、動的なセル割り当てのために6Pによって使用されるスロットフレームよりも高い優先度のスロットフレームから割り当てられる必要があります。 このように、動的に割り当てられたセルは、最小の6TiSCH構成で使用されるセルを「マスク」できません。 6topは追加のスロットフレームをサポートする場合があります。 追加のスロットフレームの使用方法は、このドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "3. 6top Protocol (6P)",
      "section_title": true,
      "ja": "3. 6topプロトコル（6P）"
    },
    {
      "indent": 3,
      "text": "6P enables two neighbor nodes to add/delete/relocate cells in their TSCH schedule. Conceptually, two neighbor nodes \"negotiate\" the location of the cells to add, delete, or relocate in their TSCH schedule.",
      "ja": "6Pでは、2つの近隣ノードがTSCHスケジュールでセルを追加/削除/再配置できます。 概念的には、2つの隣接ノードがセルの場所を「ネゴシエート」して、TSCHスケジュールで追加、削除、または再配置します。"
    },
    {
      "indent": 0,
      "text": "3.1. 6P Transactions",
      "section_title": true,
      "ja": "3.1.  6Pトランザクション"
    },
    {
      "indent": 3,
      "text": "We call \"6P Transaction\" a complete negotiation between two neighbor nodes. A particular 6P Transaction is executed between two nodes as a result of an action triggered by one SF. For a 6P Transaction to succeed, both nodes must use the same SF to handle the particular transaction. A 6P Transaction starts when a node wishes to add/delete/relocate one or more cells with one of its neighbors. A 6P Transaction ends when (1) the cell(s) has been added/deleted/ relocated in the schedule of both nodes or (2) the 6P Transaction has failed.",
      "ja": "「6Pトランザクション」は、2つの隣接ノード間の完全なネゴシエーションと呼ばれます。 特定の6Pトランザクションは、1つのSFによってトリガーされたアクションの結果として2つのノード間で実行されます。 6Pトランザクションを成功させるには、両方のノードが同じSFを使用して特定のトランザクションを処理する必要があります。 6Pトランザクションは、ノードが1つ以上のセルをその近隣の1つと追加/削除/再配置したいときに開始されます。 6Pトランザクションは、（1）両方のノードのスケジュールでセルが追加/削除/再配置されたとき、または（2）6Pトランザクションが失敗したときに終了します。"
    },
    {
      "indent": 3,
      "text": "6P messages exchanged between nodes A and B during a 6P Transaction SHOULD be exchanged on non-shared unicast cells (\"dedicated\" cells) between nodes A and B. If no dedicated cells are scheduled between nodes A and B, shared cells MAY be used.",
      "ja": "6Pトランザクション中にノードAとBの間で交換される6Pメッセージは、ノードAとBの間の非共有ユニキャストセル（「専用」セル）で交換する必要があります。ノードAとBの間に専用セルがスケジュールされていない場合、共有セルを使用できます 。"
    },
    {
      "indent": 3,
      "text": "Keeping consistency between the schedules of the two neighbor nodes is important. A loss of consistency can cause loss of connectivity. One example is when node A has a transmit cell to node B but node B does not have the corresponding reception cell. To verify consistency, neighbor nodes maintain a sequence number (SeqNum). Neighbor nodes exchange the SeqNum as part of each 6P Transaction to detect a possible inconsistency. This mechanism is explained in Section 3.4.6.2.",
      "ja": "2つの隣接ノードのスケジュール間で一貫性を保つことが重要です。 一貫性が失われると、接続が失われる可能性があります。 1つの例は、ノードAにはノードBへの送信セルがあるが、ノードBには対応する受信セルがない場合です。 一貫性を確認するために、隣接ノードはシーケンス番号（SeqNum）を維持します。 隣接ノードは、各6Pトランザクションの一部としてSeqNumを交換して、可能な不整合を検出します。 このメカニズムについては、セクション3.4.6.2で説明しています。"
    },
    {
      "indent": 3,
      "text": "An implementation MUST include a mechanism to associate each scheduled cell with the SF that scheduled it. This mechanism is implementation specific and is out of scope for this document.",
      "ja": "実装には、スケジュールされた各セルを、それをスケジュールしたSFに関連付けるメカニズムを含める必要があります。 このメカニズムは実装固有であり、このドキュメントの範囲外です。"
    },
    {
      "indent": 3,
      "text": "A 6P Transaction can consist of two or three steps. A 2-step transaction is used when node A selects the cells to be allocated. A 3-step transaction is used when node B selects the cells to be allocated. An SF MUST specify whether to use 2-step transactions, 3-step transactions, or both.",
      "ja": "6Pトランザクションは、2つまたは3つのステップで構成できます。 ノードAが割り当てられるセルを選択するとき、2ステップトランザクションが使用されます。 ノードBが割り当てられるセルを選択するとき、3ステップのトランザクションが使用されます。 SFは、2ステップトランザクション、3ステップトランザクション、またはその両方を使用するかどうかを指定する必要があります。"
    },
    {
      "indent": 3,
      "text": "We illustrate 2-step and 3-step transactions using the topology in Figure 1.",
      "ja": "図1のトポロジを使用して、2ステップおよび3ステップのトランザクションを説明します。"
    },
    {
      "indent": 0,
      "text": "3.1.1. 2-Step 6P Transaction",
      "section_title": true,
      "ja": "3.1.1.  2ステップ6Pトランザクション"
    },
    {
      "indent": 3,
      "text": "Figure 4 shows an example 2-step 6P Transaction. In a 2-step transaction, node A selects the candidate cells. Several elements are left out so that the diagram is easier to understand.",
      "ja": "図4は、2ステップ6Pトランザクションの例を示しています。 2ステップトランザクションでは、ノードAは候補セルを選択します。 図を理解しやすくするために、いくつかの要素は省略されています。"
    },
    {
      "indent": 6,
      "text": "          +----------+                           +----------+\n          |  Node A  |                           |  Node B  |\n          +----+-----+                           +-----+----+\n               |                                       |\n               | 6P ADD Request                        |\n               |   Type         = REQUEST              |\n               |   Code         = ADD                  |\n               |   SeqNum       = 123                  |\ncells          |   NumCells     = 2                    |\nlocked         |   CellList     = [(1,2),(2,2),(3,5)]  |\n +--           |-------------------------------------->|\n |             |                                L2 ACK |\n |  6P Timeout |<- - - - - - - - - - - - - - - - - - - |\n |        |    |                                       |\n |        |    | 6P Response                           |\n |        |    |   Type         = RESPONSE             |\n |        |    |   Code         = RC_SUCCESS           |\n |        |    |   SeqNum       = 123                  | cells\n |        |    |   CellList     = [(2,2),(3,5)]        | locked\n +->      X    |<--------------------------------------| --+\n               | L2 ACK                                |   |\n               | - - - - - - - - - - - - - - - - - - ->| <-+\n               |                                       |",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 4: An Example 2-Step 6P Transaction",
      "ja": "図4：2ステップ6Pトランザクションの例"
    },
    {
      "indent": 3,
      "text": "In this example, the 2-step transaction occurs as follows:",
      "ja": "この例では、2ステップトランザクションは次のように発生します。"
    },
    {
      "indent": 3,
      "text": "1. The SF running on node A determines that two extra cells need to be scheduled to node B.",
      "ja": "1.ノードAで実行されているSFは、ノードBに2つの追加セルをスケジュールする必要があると判断します。"
    },
    {
      "indent": 3,
      "text": "2. The SF running on node A selects candidate cells for node B to choose from. Node A MUST select at least as many candidate cells as the number of cells to add. Here, node A selects three candidate cells. Node A locks those candidate cells in its schedule until it receives a 6P Response.",
      "ja": "2.ノードAで実行されているSFは、選択するノードBの候補セルを選択します。 ノードAは、追加するセルの数と少なくとも同じ数の候補セルを選択する必要があります。 ここで、ノードAは3つの候補セルを選択します。 ノードAは、6P応答を受信するまで、スケジュール内の候補セルをロックします。"
    },
    {
      "indent": 3,
      "text": "3. Node A sends a 6P ADD Request to node B, indicating that it wishes to add two cells (the \"NumCells\" value) and specifying the list of three candidate cells (the \"CellList\" value). Each cell in the CellList is a [slotOffset,channelOffset] tuple. This 6P ADD Request is link-layer acknowledged by node B (labeled \"L2 ACK\" in Figure 4).",
      "ja": "3.ノードAは6P ADD要求をノードBに送信し、2つのセル（「NumCells」値）を追加することを示し、3つの候補セルのリスト（「CellList」値）を指定します。 CellListの各セルは[slotOffset、channelOffset]タプルです。 この6P ADD要求は、ノードBによって確認されたリンク層です（図4で「L2 ACK」とラベル付けされています）。"
    },
    {
      "indent": 3,
      "text": "4. After having successfully sent the 6P ADD Request (i.e., receiving the link-layer acknowledgment), node A starts a 6P Timeout to abort the 6P Transaction in the event that no response is received from node B.",
      "ja": "4. 6P ADD要求を正常に送信した後（つまり、リンク層肯定応答を受信した後）、ノードAは6Pタイムアウトを開始して、ノードBから応答が受信されない場合に6Pトランザクションを中止します。"
    },
    {
      "indent": 3,
      "text": "5. The SF running on node B selects two out of the three cells from the CellList of the 6P ADD Request. Node B locks those cells in its schedule until the transmission is successful (i.e., node B receives a link-layer ACK from node A). Node B sends back a 6P Response to node A, indicating the cells it has selected. The response is link-layer acknowledged by node A.",
      "ja": "5.ノードBで実行されているSFは、6P ADD要求のCellListから3つのセルのうち2つを選択します。 ノードBは、送信が成功するまで（つまり、ノードBがノードAからリンク層ACKを受信するまで）、スケジュール内のこれらのセルをロックします。 ノードBは、選択したセルを示す6P応答をノードAに送り返します。 応答は、ノードAによって確認されたリンク層です。"
    },
    {
      "indent": 3,
      "text": "6. Upon completion of this 6P Transaction, two cells from node A to node B have been added to the TSCH schedule of both nodes A and B.",
      "ja": "6.この6Pトランザクションが完了すると、ノードAからノードBへの2つのセルがノードAとBの両方のTSCHスケジュールに追加されました。"
    },
    {
      "indent": 3,
      "text": "7. An inconsistency in the schedule can happen if the 6P Timeout expires when the 6P Response is in the air, if the last link-layer ACK for the 6P Response is lost, or if one of the nodes is power-cycled during the transaction. 6P provides an inconsistency detection mechanism to cope with such situations; see Section 3.4.6.2 for details.",
      "ja": "7. 6P応答が空中にあるときに6Pタイムアウトが切れた場合、6P応答の最後のリンク層ACKが失われた場合、またはトランザクション中にノードの1つが電源を入れ直された場合、スケジュールの不整合が発生する可能性があります 。 6Pは、このような状況に対処するための不一致検出メカニズムを提供します。 詳細については、セクション3.4.6.2を参照してください。"
    },
    {
      "indent": 0,
      "text": "3.1.2. 3-Step 6P Transaction",
      "section_title": true,
      "ja": "3.1.2.  3ステップ6Pトランザクション"
    },
    {
      "indent": 3,
      "text": "Figure 5 shows an example 3-step 6P Transaction. In a 3-step transaction, node B selects the candidate cells. Several elements are left out so that the diagram is easier to understand.",
      "ja": "図5は、3ステップの6Pトランザクションの例を示しています。 3ステップトランザクションでは、ノードBが候補セルを選択します。 図を理解しやすくするために、いくつかの要素は省略されています。"
    },
    {
      "indent": 4,
      "text": "        +----------+                           +----------+\n        |  Node A  |                           |  Node B  |\n        +----+-----+                           +-----+----+\n             |                                       |\n             | 6P ADD Request                        |\n             |   Type         = REQUEST              |\n             |   Code         = ADD                  |\n             |   SeqNum       = 178                  |\n             |   NumCells     = 2                    |\n             |   CellList     = []                   |\n             |-------------------------------------->|\n             |                                L2 ACK |\n  6P Timeout |<- - - - - - - - - - - - - - - - - - - |\n        |    |                                       |\n        |    | 6P Response                           |\n        |    |   Type         = RESPONSE             |\n        |    |   Code         = RC_SUCCESS           |\n        |    |   SeqNum       = 178                  |         cells\n        |    |   CellList     = [(1,2),(2,2),(3,5)]  |        locked\n        X    |<--------------------------------------|          --+\n             | L2 ACK                                |            |\n             | - - - - - - - - - - - - - - - - - - ->| 6P Timeout |\n             |                                       |    |       |\n             | 6P Confirmation                       |    |       |\n             |   Type         = CONFIRMATION         |    |       |\n             |   Code         = RC_SUCCESS           |    |       |\ncells        |   SeqNum       = 178                  |    |       |\nlocked       |   CellList     = [(2,2),(3,5)]        |    |       |\n +--         |-------------------------------------->|    X    <--+\n |           |                                L2 ACK |\n +->         |<- - - - - - - - - - - - - - - - - - - |\n             |                                       |",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 5: An Example 3-Step 6P Transaction",
      "ja": "図5：3ステップ6Pトランザクションの例"
    },
    {
      "indent": 3,
      "text": "In this example, the 3-step transaction occurs as follows:",
      "ja": "この例では、3ステップトランザクションは次のように発生します。"
    },
    {
      "indent": 3,
      "text": "1. The SF running on node A determines that two extra cells need to be scheduled to node B. The SF uses a 3-step transaction, so it does not select candidate cells.",
      "ja": "1.ノードAで実行されているSFは、ノードBに2つの追加セルをスケジュールする必要があると判断します。SFは3ステップトランザクションを使用するため、候補セルを選択しません。"
    },
    {
      "indent": 3,
      "text": "2. Node A sends a 6P ADD Request to node B, indicating that it wishes to add two cells (the \"NumCells\" value), with an empty \"CellList\". This 6P ADD Request is link-layer acknowledged by node B.",
      "ja": "2.ノードAは、空の「CellList」で2つのセル（「NumCells」値）を追加することを示す6P ADD要求をノードBに送信します。 この6P ADD要求は、ノードBによって確認されたリンク層です。"
    },
    {
      "indent": 3,
      "text": "3. After having successfully sent the 6P ADD Request, node A starts a 6P Timeout to abort the transaction in the event that no 6P Response is received from node B.",
      "ja": "3. 6P ADD要求を正常に送信した後、ノードAは、6Pタイムアウトを開始して、ノードBから6P応答が受信されない場合にトランザクションを中止します。"
    },
    {
      "indent": 3,
      "text": "4. The SF running on node B selects three candidate cells and locks them. Node B sends back a 6P Response to node A, indicating the three cells it has selected. The response is link-layer acknowledged by node A.",
      "ja": "4.ノードBで実行されているSFは、3つの候補セルを選択してロックします。 ノードBは、選択した3つのセルを示す6P応答をノードAに送り返します。 応答は、ノードAによって確認されたリンク層です。"
    },
    {
      "indent": 3,
      "text": "5. After having successfully sent the 6P Response, node B starts a 6P Timeout to abort the transaction in the event that no 6P Confirmation is received from node A.",
      "ja": "5. 6P応答を正常に送信した後、ノードBは6Pタイムアウトを開始して、ノードAから6P確認が受信されない場合にトランザクションを中止します。"
    },
    {
      "indent": 3,
      "text": "6. The SF running on node A selects two cells from the CellList field in the 6P Response and locks them. Node A sends back a 6P Confirmation to node B, indicating the cells it selected. The confirmation is link-layer acknowledged by node B.",
      "ja": "6.ノードAで実行されているSFは、6P応答のCellListフィールドから2つのセルを選択し、それらをロックします。 ノードAは、選択したセルを示す6P確認をノードBに送り返します。 確認は、ノードBによって確認されたリンク層です。"
    },
    {
      "indent": 3,
      "text": "7. Upon completion of the 6P Transaction, two cells from node A to node B have been added to the TSCH schedule of both nodes A and B.",
      "ja": "7. 6Pトランザクションが完了すると、ノードAからノードBへの2つのセルがノードAとBの両方のTSCHスケジュールに追加されました。"
    },
    {
      "indent": 3,
      "text": "8. An inconsistency in the schedule can happen if the 6P Timeout expires when the 6P Confirmation is in the air, if the last link-layer ACK for the 6P Confirmation is lost, or if one of the nodes is power-cycled during the transaction. 6P provides an inconsistency detection mechanism to cope with such situations; see Section 3.4.6.2 for details.",
      "ja": "8. 6P確認がオンになっているときに6Pタイムアウトが切れた場合、6P確認の最後のリンク層ACKが失われた場合、またはトランザクション中にノードの1つが電源を入れ直された場合、スケジュールの矛盾が発生する可能性があります 。 6Pは、このような状況に対処するための不一致検出メカニズムを提供します。 詳細については、セクション3.4.6.2を参照してください。"
    },
    {
      "indent": 0,
      "text": "3.2. Message Format",
      "section_title": true,
      "ja": "3.2.  メッセージフォーマット"
    },
    {
      "indent": 0,
      "text": "3.2.1. 6top Information Element (IE)",
      "section_title": true,
      "ja": "3.2.1.  6top情報要素（IE）"
    },
    {
      "indent": 3,
      "text": "6P messages travel over a single hop. 6P messages are carried as payload of an 802.15.4 Payload Information Element (IE) [IEEE802154]. The messages are encapsulated within the Payload IE header. The Group ID is set to the IETF IE value defined in [RFC8137]. The content is encapsulated by a subtype ID, as defined in [RFC8137].",
      "ja": "6Pメッセージは単一のホップを通過します。 6Pメッセージは、802.15.4ペイロード情報要素（IE）[IEEE802154]のペイロードとして搬送されます。 メッセージはペイロードIEヘッダー内にカプセル化されます。 グループIDは[RFC8137]で定義されたIETF IE値に設定されます。 [RFC8137]で定義されているように、コンテンツはサブタイプIDによってカプセル化されます。"
    },
    {
      "indent": 3,
      "text": "Since 6P messages are carried in IEs, IEEE bit/byte ordering applies. Bits within each field in the \"6top IE\" subtype are numbered from 0 (leftmost and least significant) to k-1 (rightmost and most significant), where the length of the field is k bits. Fields that are longer than a single octet are copied to the packet in the order from the octet containing the lowest-numbered bits to the octet containing the highest-numbered bits (little endian).",
      "ja": "6PメッセージはIEで伝送されるため、IEEEビット/バイト順序が適用されます。 「6top IE」サブタイプの各フィールド内のビットには、0（左端および最下位）からk-1（右端および最上位）までの番号が付けられます。フィールドの長さはkビットです。 1オクテットより長いフィールドは、最も小さい番号のビットを含むオクテットから最も大きい番号のビットを含むオクテット（リトルエンディアン）の順にパケットにコピーされます。"
    },
    {
      "indent": 3,
      "text": "This document defines the 6top IE, a subtype of the IETF IE defined in [RFC8137], with subtype SUBID_6TOP. The subtype content of the 6top IE is defined in Section 3.2.2. The length of the 6top IE content is variable.",
      "ja": "このドキュメントは、6top IE、[RFC8137]で定義されたIETF IEのサブタイプ、およびサブタイプSUBID_6TOPを定義します。 6top IEのサブタイプの内容は、セクション3.2.2で定義されています。 6top IEコンテンツの長さは可変です。"
    },
    {
      "indent": 0,
      "text": "3.2.2. Generic 6P Message Format",
      "section_title": true,
      "ja": "3.2.2.  汎用6Pメッセージ形式"
    },
    {
      "indent": 3,
      "text": "All 6P messages follow the generic format shown in Figure 6.",
      "ja": "6Pメッセージはすべて、図6に示す一般的な形式に従います。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Other Fields...\n+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 6: Generic 6P Message Format",
      "ja": "図6：汎用6Pメッセージ形式"
    },
    {
      "indent": 3,
      "text": "6P Version (Version): The version of 6P. Only version 0 is defined in this document. Future specifications may define subsequent versions of 6P.",
      "ja": "6Pバージョン（バージョン）：6Pのバージョン。 このドキュメントでは、バージョン0のみが定義されています。 将来の仕様では、6Pの後続バージョンが定義される可能性があります。"
    },
    {
      "indent": 3,
      "text": "Type (T): The type of message. The message types are defined in Section 6.2.2.",
      "ja": "タイプ（T）：メッセージのタイプ。 メッセージタイプはセクション6.2.2で定義されています。"
    },
    {
      "indent": 3,
      "text": "Reserved (R): Reserved bits. These two bits SHOULD be set to zero when sending the message and MUST be ignored upon reception.",
      "ja": "予約済み（R）：予約済みビット。 これらの2ビットは、メッセージを送信するときにゼロに設定する必要があり（SHOULD）、受信時には無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "Code: The Code field contains a 6P command identifier when the 6P message has a Type value of REQUEST. Section 6.2.3 lists the 6P command identifiers. The Code field contains a 6P return code when the 6P message has a Type value of RESPONSE or CONFIRMATION. Section 6.2.4 lists the 6P return codes. The same return codes are used in both 6P Response and 6P Confirmation messages.",
      "ja": "コード：6Pメッセージのタイプ値がREQUESTの場合、コードフィールドには6Pコマンド識別子が含まれます。 セクション6.2.3は、6Pコマンド識別子をリストしています。 6Pメッセージのタイプ値がRESPONSEまたはCONFIRMATIONである場合、Codeフィールドには6P戻りコードが含まれます。 セクション6.2.4に6Pリターンコードを示します。 6P応答メッセージと6P確認メッセージの両方で同じ戻りコードが使用されます。"
    },
    {
      "indent": 3,
      "text": "6top Scheduling Function Identifier (SFID): The identifier of the SF to use to handle this message. The SFID is defined in Section 4.1.",
      "ja": "6topスケジューリング関数識別子（SFID）：このメッセージの処理に使用するSFの識別子。 SFIDはセクション4.1で定義されています。"
    },
    {
      "indent": 3,
      "text": "SeqNum: The sequence number associated with the 6P Transaction. Used to match the 6P Request, 6P Response, and 6P Confirmation of the same 6P Transaction. The value of SeqNum MUST be different for each new 6P Request issued to the same neighbor and using the same SF. The SeqNum is also used to ensure consistency between the schedules of the two neighbors. Section 3.4.6 details how the SeqNum is managed.",
      "ja": "SeqNum：6Pトランザクションに関連付けられたシーケンス番号。 同じ6Pトランザクションの6P要求、6P応答、および6P確認を照合するために使用されます。 SeqNumの値は、同じネイバーに発行され、同じSFを使用する新しい6P要求ごとに異なる必要があります。 SeqNumは、2つのネイバーのスケジュール間の一貫性を確保するためにも使用されます。 セクション3.4.6では、SeqNumの管理方法について詳しく説明しています。"
    },
    {
      "indent": 3,
      "text": "Other Fields: The list of other fields and how they are used are detailed in Section 3.3.",
      "ja": "その他のフィールド：その他のフィールドのリストとその使用方法については、セクション3.3で詳しく説明しています。"
    },
    {
      "indent": 3,
      "text": "6P Request, 6P Response, and 6P Confirmation messages for a given transaction MUST share the same Version, SFID, and SeqNum values.",
      "ja": "特定のトランザクションの6P要求、6P応答、および6P確認メッセージは、同じバージョン、SFID、およびSeqNum値を共有する必要があります。"
    },
    {
      "indent": 3,
      "text": "Future versions of the 6P message SHOULD maintain the format of the 6P Version, Type, and Code fields for backward compatibility.",
      "ja": "6Pメッセージの将来のバージョンは、後方互換性のために6Pバージョン、タイプ、およびコードフィールドのフォーマットを維持する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.2.3. 6P CellOptions",
      "section_title": true,
      "ja": "3.2.3.  6P CellOptions"
    },
    {
      "indent": 3,
      "text": "An 8-bit 6P CellOptions bitmap is present in the following 6P Requests: ADD, DELETE, COUNT, LIST, and RELOCATE. The format and meaning of this field MAY be redefined by the SF; the routine that parses this field is therefore associated with a specific SF.",
      "ja": "8ビット6P CellOptionsビットマップは、次の6P要求に存在します：ADD、DELETE、COUNT、LIST、およびRELOCATE。 このフィールドの形式と意味は、SFによって再定義される場合があります。 したがって、このフィールドを解析するルーチンは特定のSFに関連付けられています。"
    },
    {
      "indent": 3,
      "text": "o In the 6P ADD Request, the 6P CellOptions bitmap is used to specify what type of cell to add.",
      "ja": "o 6P ADDリクエストでは、6P CellOptionsビットマップを使用して、追加するセルのタイプを指定します。"
    },
    {
      "indent": 3,
      "text": "o In the 6P DELETE Request, the 6P CellOptions bitmap is used to specify what type of cell to delete.",
      "ja": "o 6P DELETEリクエストでは、6P CellOptionsビットマップを使用して、削除するセルのタイプを指定します。"
    },
    {
      "indent": 3,
      "text": "o In the 6P RELOCATE Request, the 6P CellOptions bitmap is used to specify what type of cell to relocate.",
      "ja": "o 6P RELOCATE要求では、6P CellOptionsビットマップを使用して、再配置するセルのタイプを指定します。"
    },
    {
      "indent": 3,
      "text": "o In the 6P COUNT and LIST Requests, the 6P CellOptions bitmap is used as a selector of a particular type of cells.",
      "ja": "o 6P COUNTおよびLISTリクエストでは、6P CellOptionsビットマップが特定のタイプのセルのセレクターとして使用されます。"
    },
    {
      "indent": 3,
      "text": "The content of the 6P CellOptions bitmap applies to all elements in the CellList field. The possible values of the 6P CellOptions are as follows:",
      "ja": "6P CellOptionsビットマップのコンテンツは、CellListフィールドのすべての要素に適用されます。 6P CellOptionsの可能な値は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o TX = 1 (resp. 0) refers to macTxType = TRUE (resp. FALSE) in the macLinkTable of 802.15.4 [IEEE802154].",
      "ja": "o TX = 1（それぞれ0）は、802.15.4 [IEEE802154]のmacLinkTableのmacTxType = TRUE（それぞれFALSE）を指します。"
    },
    {
      "indent": 3,
      "text": "o RX = 1 (resp. 0) refers to macRxType = TRUE (resp. FALSE) in the macLinkTable of 802.15.4.",
      "ja": "o RX = 1（それぞれ0）は、802.15.4のmacLinkTableのmacRxType = TRUE（それぞれFALSE）を指します。"
    },
    {
      "indent": 3,
      "text": "o S = 1 (resp. 0) refers to macSharedType = TRUE (resp. FALSE) in the macLinkTable of 802.15.4.",
      "ja": "o S = 1（それぞれ0）は、802.15.4のmacLinkTableのmacSharedType = TRUE（それぞれFALSE）を指します。"
    },
    {
      "indent": 3,
      "text": "Section 6.2.6 provides the format of the 6P CellOptions bitmap; this format applies unless redefined by the SF. Figure 7 shows the meaning of the 6P CellOptions bitmap for the 6P ADD, DELETE, and RELOCATE Requests (unless redefined by the SF). Figure 8 shows the meaning of the 6P CellOptions bitmap for the 6P COUNT and LIST Requests (unless redefined by the SF).",
      "ja": "セクション6.2.6は、6P CellOptionsビットマップの形式を提供します。 この形式は、SFによって再定義されない限り適用されます。 図7は、6P ADD、DELETE、およびRELOCATE要求に対する6P CellOptionsビットマップの意味を示しています（SFによって再定義されていない場合）。 図8は、6P COUNTおよびLIST要求の6P CellOptionsビットマップの意味を示しています（SFによって再定義されていない場合）。"
    },
    {
      "indent": 3,
      "text": " Note: Here, we assume that node A issues the 6P command to node B.\n+-------------+-----------------------------------------------------+\n| CellOptions | The type of cells B adds/deletes/relocates to its   |\n| Value       | schedule when receiving a 6P ADD/DELETE/RELOCATE    |\n|             | Request from A                                      |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=0,S=0| Invalid combination.  RC_ERR is returned            |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=0,S=0| Add/delete/relocate RX cells at B (TX cells at A)   |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=1,S=0| Add/delete/relocate TX cells at B (RX cells at A)   |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=1,S=0| Add/delete/relocate TX|RX cells at B (and at A)     |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=0,S=1| Invalid combination.  RC_ERR is returned            |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=0,S=1| Add/delete/relocate RX|SHARED cells at B            |\n|             | (TX|SHARED cells at A)                              |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=1,S=1| Add/delete/relocate TX|SHARED cells at B            |\n|             | (RX|SHARED cells at A)                              |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=1,S=1| Add/delete/relocate TX|RX|SHARED cells at B         |\n|             | (and at A)                                          |\n+-------------+-----------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 7: Meaning of the 6P CellOptions Bitmap for the\n         6P ADD, DELETE, and RELOCATE Requests",
      "raw": true
    },
    {
      "indent": 3,
      "text": " Note: Here, we assume that node A issues the 6P command to node B.\n+-------------+-----------------------------------------------------+\n| CellOptions | The type of cells B selects from its schedule when  |\n| Value       | receiving a 6P COUNT or LIST Request from A,        |\n|             | from all the cells B has scheduled with A           |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=0,S=0| All cells                                           |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=0,S=0| All cells marked as RX only                         |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=1,S=0| All cells marked as TX only                         |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=1,S=0| All cells marked as TX and RX only                  |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=0,S=1| All cells marked as SHARED (regardless of TX, RX)   |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=0,S=1| All cells marked as RX and SHARED only              |\n+-------------+-----------------------------------------------------+\n|TX=0,RX=1,S=1| All cells marked as TX and SHARED only              |\n+-------------+-----------------------------------------------------+\n|TX=1,RX=1,S=1| All cells marked as TX, RX, and SHARED              |\n+-------------+-----------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 8: Meaning of the 6P CellOptions Bitmap for the\n              6P COUNT and LIST Requests",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The CellOptions constitute an opaque set of bits, sent unmodified to the SF. The SF MAY redefine the format and meaning of the CellOptions field.",
      "ja": "CellOptionsは、変更されずにSFに送信されるビットの不透明なセットを構成します。 SFは、CellOptionsフィールドの形式と意味を再定義する場合があります。"
    },
    {
      "indent": 0,
      "text": "3.2.4. 6P CellList",
      "section_title": true,
      "ja": "3.2.4.  6P CellList"
    },
    {
      "indent": 3,
      "text": "A CellList field MAY be present in a 6P ADD Request, a 6P DELETE Request, a 6P RELOCATE Request, a 6P Response, or a 6P Confirmation. It is composed of a concatenation of zero or more 6P Cells as defined in Figure 9. The content of the CellOptions field specifies the options associated with all cells in the CellList. This necessarily means that the same options are associated with all cells in the CellList.",
      "ja": "CellListフィールドは、6P ADD要求、6P DELETE要求、6P RELOCATE要求、6P応答、または6P確認に存在する場合があります。 図9で定義されているように、0個以上の6Pセルの連結で構成されます。CellOptionsフィールドの内容は、CellList内のすべてのセルに関連付けられたオプションを指定します。 これは必然的に、同じオプションがCellListのすべてのセルに関連付けられることを意味します。"
    },
    {
      "indent": 3,
      "text": "A 6P Cell is a 4-byte field; its default format is:",
      "ja": "6Pセルは4バイトのフィールドです。 デフォルトの形式は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|          slotOffset           |         channelOffset         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 25,
      "text": "Figure 9: 6P Cell Format",
      "ja": "図9：6Pセル形式"
    },
    {
      "indent": 6,
      "text": "slotOffset: The slot offset of the cell.",
      "ja": "slotOffset：セルのスロットオフセット。"
    },
    {
      "indent": 6,
      "text": "channelOffset: The channel offset of the cell.",
      "ja": "channelOffset：セルのチャネルオフセット。"
    },
    {
      "indent": 3,
      "text": "The CellList is an opaque set of bytes, sent unmodified to the SF. The length of the CellList field is implicit and is determined by the IE Length field of the Payload IE header as defined in 802.15.4. The SF MAY redefine the format of the CellList field; the routine that parses this field is therefore associated with a specific SF.",
      "ja": "CellListは、SFに変更されずに送信される、不透明なバイトのセットです。 CellListフィールドの長さは暗黙的であり、802.15.4で定義されているペイロードIEヘッダーのIE Lengthフィールドによって決定されます。 SFは、CellListフィールドの形式を再定義できます。 したがって、このフィールドを解析するルーチンは特定のSFに関連付けられています。"
    },
    {
      "indent": 0,
      "text": "3.3. 6P Commands and Operations",
      "section_title": true,
      "ja": "3.3.  6Pコマンドと操作"
    },
    {
      "indent": 0,
      "text": "3.3.1. Adding Cells",
      "section_title": true,
      "ja": "3.3.1.  セルを追加する"
    },
    {
      "indent": 3,
      "text": "Cells are added by using the 6P ADD command. The Type field (T) is set to REQUEST. The Code field is set to ADD. Figure 10 defines the format of a 6P ADD Request.",
      "ja": "セルは、6P ADDコマンドを使用して追加されます。 Typeフィールド（T）はREQUESTに設定されます。 [コード]フィールドは[追加]に設定されます。 図10は、6P ADD要求のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Metadata            |  CellOptions  |   NumCells    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| CellList ...\n+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 10: 6P ADD Request Format",
      "ja": "図10：6P ADDリクエストの形式"
    },
    {
      "indent": 3,
      "text": "Metadata: Used as extra signaling to the SF. The contents of the Metadata field are an opaque set of bytes passed unmodified to the SF. The meaning of this field depends on the SF and is out of scope for this document. For example, Metadata can specify in which slotframe to add the cells.",
      "ja": "メタデータ：SFへの追加のシグナリングとして使用されます。 メタデータフィールドの内容は、変更されずにSFに渡される不透明なバイトセットです。 このフィールドの意味はSFによって異なり、このドキュメントの範囲外です。 たとえば、メタデータは、セルを追加するスロットフレームを指定できます。"
    },
    {
      "indent": 3,
      "text": "CellOptions: Indicates the options to associate with the cells to be added. If more than one cell is added (NumCells > 1), the same options are associated with each one. This necessarily means that if node A needs to add multiple cells with different options it needs to initiate multiple 6P ADD Transactions.",
      "ja": "CellOptions：追加するセルに関連付けるオプションを示します。 複数のセルが追加された場合（NumCells> 1）、同じオプションが各セルに関連付けられます。 これは、ノードAが異なるオプションで複数のセルを追加する必要がある場合、複数の6P ADDトランザクションを開始する必要があることを意味します。"
    },
    {
      "indent": 3,
      "text": "NumCells: The number of additional cells node A wants to schedule to node B.",
      "ja": "NumCells：ノードAがノードBにスケジュールする追加セルの数。"
    },
    {
      "indent": 3,
      "text": "CellList: A list of zero or multiple candidate cells. Its length is implicit and is determined by the Length field of the Payload IE header.",
      "ja": "CellList：ゼロまたは複数の候補セルのリスト。 その長さは暗黙的であり、ペイロードIEヘッダーのLengthフィールドによって決定されます。"
    },
    {
      "indent": 3,
      "text": "Figure 11 defines the format of a 6P ADD Response and Confirmation.",
      "ja": "図11は、6P ADD応答および確認のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| CellList ...\n+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 12,
      "text": "Figure 11: 6P ADD Response and Confirmation Format",
      "ja": "図11：6P ADD応答および確認形式"
    },
    {
      "indent": 3,
      "text": "CellList: A list of zero or more 6P Cells.",
      "ja": "CellList：ゼロ個以上の6Pセルのリスト。"
    },
    {
      "indent": 3,
      "text": "Consider the topology in Figure 1; in this case, the SF on node A decides to add NumCells cells to node B.",
      "ja": "図1のトポロジを検討してください。 この場合、ノードAのSFは、ノードBにNumCellsセルを追加することを決定します。"
    },
    {
      "indent": 3,
      "text": "Node A's SF selects NumCandidate cells from its schedule. These are cells that are candidates to be scheduled with node B. The CellOptions field specifies the type of these cells. NumCandidate MUST be greater than or equal to NumCells. How many cells node A selects (NumCandidate) and how that selection is done are specified in the SF and are out of scope for this document. Node A sends a 6P ADD Request to node B that contains the CellOptions, the value of NumCells, and a selection of NumCandidate cells in the CellList. If the NumCandidate cells do not fit in a single packet, this operation MUST be split into multiple independent 6P ADD Requests, each for a subset of the number of cells that eventually need to be added. In the case of a 3-step transaction, the SF is responsible for ensuring that the returned Candidate CellList fits into the 6P Response.",
      "ja": "ノードAのSFは、スケジュールからNumCandidateセルを選択します。 これらは、ノードBでスケジュールされる候補のセルです。CellOptionsフィールドは、これらのセルのタイプを指定します。 NumCandidateはNumCells以上でなければなりません。 ノードAが選択するセルの数（NumCandidate）とその選択方法はSFで指定されており、このドキュメントの範囲外です。 ノードAは、CellOptions、NumCellsの値、およびCellList内のNumCandidateセルの選択を含む6P ADD要求をノードBに送信します。 NumCandidateセルが単一のパケットに収まらない場合、この操作は複数の独立した6P ADD要求に分割する必要があります。各要求は、最終的に追加する必要があるセルの数のサブセットに対応します。 3ステップトランザクションの場合、SFは、返されたCandidate CellListが6P応答に適合するようにする責任があります。"
    },
    {
      "indent": 3,
      "text": "Upon receiving the request, node B checks to see whether the CellOptions are set to a valid value as noted by Figure 7. If this is not the case, a Response with code RC_ERR is returned. If the number of cells in the received CellList in node B is smaller than NumCells, node B MUST return a 6P Response with the RC_ERR_CELLLIST code. Otherwise, node B's SF verifies which of the cells in the CellList it can install in node B's schedule, following the specified CellOptions field. How that selection is done is specified in the SF and is out of scope for this document. The verification can succeed (NumCells cells from the CellList can be used), fail (none of the cells from the CellList can be used), or partially succeed (fewer than NumCells cells from the CellList can be used). In all cases, node B MUST send a 6P Response that includes a return code set to RC_SUCCESS and that specifies the list of cells that were scheduled following the CellOptions field. That list can contain NumCells elements (succeed), 0 elements (fail), or between 0 and NumCells elements (partially succeed).",
      "ja": "要求を受信すると、ノードBは、図7に示すようにCellOptionsが有効な値に設定されているかどうかを確認します。そうでない場合は、コードRC_ERRの応答が返されます。ノードBで受信したCellListのセルの数がNumCellsより小さい場合、ノードBはRC_ERR_CELLLISTコードで6P応答を返さなければなりません。それ以外の場合、ノードBのSFは、指定されたCellOptionsフィールドに従って、ノードBのスケジュールにインストールできるCellList内のセルを確認します。その選択の方法はSFで指定されており、このドキュメントの範囲外です。検証は、成功（CellListのNumCellsセルを使用可能）、失敗（CellListのどのセルも使用不可）、または部分的に成功（CellListのNumCellsセルよりも少ない）を使用できます。すべての場合において、ノードBは、RC_SUCCESSに設定された戻りコードを含み、CellOptionsフィールドに続いてスケジュールされたセルのリストを指定する6P応答を送信する必要があります。そのリストには、NumCells要素（成功）、0要素（失敗）、または0〜NumCells要素（部分的に成功）を含めることができます。"
    },
    {
      "indent": 3,
      "text": "Upon receiving the response, node A adds the cells specified in the CellList according to the CellOptions field.",
      "ja": "応答を受信すると、ノードAは、CellOptionsフィールドに従って、CellListで指定されたセルを追加します。"
    },
    {
      "indent": 0,
      "text": "3.3.2. Deleting Cells",
      "section_title": true,
      "ja": "3.3.2.  セルを削除する"
    },
    {
      "indent": 3,
      "text": "Cells are deleted by using the 6P DELETE command. The Type field (T) is set to REQUEST. The Code field is set to DELETE. Figure 12 defines the format of a 6P DELETE Request.",
      "ja": "セルは、6P DELETEコマンドを使用して削除されます。 Typeフィールド（T）はREQUESTに設定されます。 [コード]フィールドは[削除]に設定されます。 図12は、6P DELETE要求のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |    SeqNum     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Metadata            |  CellOptions  |   NumCells    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| CellList ...\n+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 12: 6P DELETE Request Format",
      "ja": "図12：6P DELETEリクエストの形式"
    },
    {
      "indent": 3,
      "text": "Metadata: Same usage as for the 6P ADD command; see Section 3.3.1. Its format is the same as that in the 6P ADD command, but its content could be different.",
      "ja": "メタデータ：6P ADDコマンドと同じ使用法。 セクション3.3.1を参照してください。 その形式は6P ADDコマンドの形式と同じですが、その内容は異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "CellOptions: Indicates the options that need to be associated with the cells to delete. Only cells matching the CellOptions can be deleted.",
      "ja": "CellOptions：削除するセルに関連付ける必要があるオプションを示します。 CellOptionsに一致するセルのみを削除できます。"
    },
    {
      "indent": 3,
      "text": "NumCells: The number of cells from the specified CellList the sender wants to delete from the schedule of both sender and receiver.",
      "ja": "NumCells：送信者が送信者と受信者の両方のスケジュールから削除したい、指定されたCellListのセルの数。"
    },
    {
      "indent": 3,
      "text": "CellList: A list of zero or more 6P Cells. Its length is determined by the Length field of the Payload IE header.",
      "ja": "CellList：ゼロ個以上の6Pセルのリスト。 その長さは、ペイロードIEヘッダーの長さフィールドによって決まります。"
    },
    {
      "indent": 3,
      "text": "Figure 13 defines the format of a 6P DELETE Response and Confirmation.",
      "ja": "図13は、6P DELETE応答および確認のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| CellList ...\n+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Figure 13: 6P DELETE Response and Confirmation Format",
      "ja": "図13：6P DELETE応答および確認形式"
    },
    {
      "indent": 3,
      "text": "CellList: A list of zero or more 6P Cells.",
      "ja": "CellList：ゼロ個以上の6Pセルのリスト。"
    },
    {
      "indent": 3,
      "text": "The behavior for deleting cells is equivalent to that of adding cells except that:",
      "ja": "セルを削除する動作は、次の点を除いてセルを追加する動作と同等です。"
    },
    {
      "indent": 3,
      "text": "o The nodes delete the cells they agree upon rather than adding them.",
      "ja": "oノードは、追加するのではなく、同意したセルを削除します。"
    },
    {
      "indent": 3,
      "text": "o All cells in the CellList MUST already be scheduled between the two nodes and MUST match the CellOptions field. If node A puts cells in its CellList that are not already scheduled between the two nodes and match the CellOptions field, node B MUST reply with a RC_ERR_CELLLIST return code.",
      "ja": "o CellList内のすべてのセルは、2つのノード間ですでにスケジュールされている必要があり、CellOptionsフィールドと一致する必要があります。 ノードAが2つのノード間でスケジュールされていないセルをCellListに配置し、CellOptionsフィールドと一致する場合、ノードBはRC_ERR_CELLLIST戻りコードで応答する必要があります。"
    },
    {
      "indent": 3,
      "text": "o The CellList in a 6P Request (2-step transaction) or 6P Response (3-step transaction) MUST be empty, contain exactly NumCells cells, or contain more than NumCells cells. The case where the CellList is not empty but contains fewer than NumCells cells is not supported; the RC_ERR_CELLLIST code MUST be returned when the CellList contains fewer than NumCells cells. If the CellList is empty, the SF on the receiving node MUST choose NumCells cells scheduled to the sender matching the CellOptions field and delete them. If the CellList contains more than NumCells cells, the SF on the receiving node chooses exactly NumCells cells from the CellList to delete.",
      "ja": "o 6Pリクエスト（2ステップトランザクション）または6Pレスポンス（3ステップトランザクション）のCellListは、空であるか、NumCellsセルを正確に含むか、NumCellsセルより多く含まれている必要があります。 CellListが空ではなく、NumCellsセルより少ないセルを含む場合はサポートされていません。 CellListに含まれるセルの数がNumCellsより少ない場合、RC_ERR_CELLLISTコードが返されなければなりません。 CellListが空の場合、受信ノードのSFは、CellOptionsフィールドに一致する送信者にスケジュールされたNumCellsセルを選択し、それらを削除する必要があります。 CellListにNumCellsを超えるセルが含まれている場合、受信ノードのSFは削除するCellListからNumCellsのセルを正確に選択します。"
    },
    {
      "indent": 0,
      "text": "3.3.3. Relocating Cells",
      "section_title": true,
      "ja": "3.3.3.  セルの再配置"
    },
    {
      "indent": 3,
      "text": "Cell relocation consists of moving a cell to a different [slotOffset,channelOffset] location in the schedule. The Type field (T) is set to REQUEST. The Code field is set to RELOCATE. Figure 14 defines the format of a 6P RELOCATE Request.",
      "ja": "セルの再配置は、セルをスケジュール内の別の[slotOffset、channelOffset]ロケーションに移動することで構成されます。 Typeフィールド（T）はREQUESTに設定されます。 CodeフィールドはRELOCATEに設定されます。 図14は、6P RELOCATE要求のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Metadata            |  CellOptions  |   NumCells    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Relocation CellList          ...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n| Candidate CellList           ...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 14: 6P RELOCATE Request Format",
      "ja": "図14：6P RELOCATE要求の形式"
    },
    {
      "indent": 3,
      "text": "Metadata: Same usage as for the 6P ADD command; see Section 3.3.1.",
      "ja": "メタデータ：6P ADDコマンドと同じ使用法。 セクション3.3.1を参照してください。"
    },
    {
      "indent": 3,
      "text": "CellOptions: Indicates the options that need to be associated with cells to be relocated.",
      "ja": "CellOptions：再配置するセルに関連付ける必要があるオプションを示します。"
    },
    {
      "indent": 3,
      "text": "NumCells: The number of cells to relocate. MUST be greater than or equal to 1.",
      "ja": "NumCells：再配置するセルの数。 1以上でなければなりません。"
    },
    {
      "indent": 3,
      "text": "Relocation CellList: The list of NumCells 6P Cells to relocate.",
      "ja": "Relocation CellList：再配置するNumCells 6Pセルのリスト。"
    },
    {
      "indent": 3,
      "text": "Candidate CellList: A list of NumCandidate candidate cells for node B to pick from. NumCandidate MUST be 0, equal to NumCells, or greater than NumCells. Its length is determined by the Length field of the Payload IE header.",
      "ja": "候補セルリスト：ノードBが選択するNumCandidate候補セルのリスト。 NumCandidateは、0、NumCellsと等しい、またはNumCellsより大きい必要があります。 その長さは、ペイロードIEヘッダーの長さフィールドによって決まります。"
    },
    {
      "indent": 3,
      "text": "In a 2-step 6P RELOCATE Transaction, node A specifies both (1) the cells it needs to relocate and (2) the list of candidate cells to relocate to. The Relocation CellList MUST contain exactly NumCells entries. The Candidate CellList MUST contain at least NumCells entries (NumCandidate >= NumCells).",
      "ja": "2ステップ6P RELOCATEトランザクションでは、ノードAは（1）再配置する必要があるセルと（2）再配置する候補セルのリストの両方を指定します。 Relocation CellListには、正確にNumCellsエントリが含まれている必要があります。 候補セルリストには、少なくともNumCellsエントリが含まれている必要があります（NumCandidate> = NumCells）。"
    },
    {
      "indent": 3,
      "text": "In a 3-step 6P RELOCATE Transaction, node A specifies only the cells it needs to relocate -- not the list of candidate cells to relocate to. The Candidate CellList MUST therefore be empty.",
      "ja": "3ステップの6P RELOCATEトランザクションでは、ノードAは再配置する必要があるセルのみを指定します。再配置する候補セルのリストは指定しません。 したがって、候補CellListは空でなければなりません。"
    },
    {
      "indent": 3,
      "text": "Figure 15 defines the format of a 6P RELOCATE Response and Confirmation.",
      "ja": "図15は、6P RELOCATE応答および確認のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| CellList ...\n+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 15: 6P RELOCATE Response and Confirmation Format",
      "ja": "図15：6P RELOCATEの応答と確認の形式"
    },
    {
      "indent": 3,
      "text": "CellList: A list of zero or more 6P Cells.",
      "ja": "CellList：ゼロ個以上の6Pセルのリスト。"
    },
    {
      "indent": 3,
      "text": "Node A's SF wants to relocate NumCells cells. Node A creates a 6P RELOCATE Request and indicates the cells it wants to relocate in the Relocation CellList. It also selects NumCandidate cells from its schedule as candidate cells to relocate the cells to, and it puts them in the Candidate CellList. The CellOptions field specifies the type of the cell(s) to relocate. NumCandidate MUST be greater than or equal to NumCells. How many cells it selects (NumCandidate) and how that selection is done are specified in the SF and are out of scope for this document. Node A sends the 6P RELOCATE Request to node B.",
      "ja": "ノードAのSFは、NumCellsセルを再配置したいと考えています。 ノードAは6P RELOCATE Requestを作成し、Relocation CellListで再配置するセルを示します。 また、スケジュールからNumCandidateセルをセルの再配置先の候補セルとして選択し、それらをCandidate CellListに入れます。 CellOptionsフィールドは、再配置するセルのタイプを指定します。 NumCandidateはNumCells以上でなければなりません。 選択するセルの数（NumCandidate）とその選択方法はSFで指定されており、このドキュメントの範囲外です。 ノードAは6P RELOCATE要求をノードBに送信します。"
    },
    {
      "indent": 3,
      "text": "Upon receiving the request, node B checks to see if the length of the Candidate CellList is greater than or equal to NumCells. Node B's SF verifies that all the cells in the Relocation CellList are scheduled with node A and are associated with the options specified in the CellOptions field. If either check fails, node B MUST send a 6P Response to node A with return code RC_ERR_CELLLIST. If both checks pass, node B's SF verifies which of the cells in the Candidate CellList it can install in its schedule. How that selection is done is specified in the SF and is out of scope for this document. That verification for the Candidate CellList can succeed (NumCells cells from the Candidate CellList can be used), fail (none of the cells from the Candidate CellList can be used), or partially succeed (fewer than NumCells cells from the Candidate CellList can be used). In all cases, node B MUST send a 6P Response that includes a return code set to RC_SUCCESS and that specifies the list of cells that will be rescheduled following the CellOptions field. That list can contain NumCells elements (succeed), 0 elements (fail), or between 0 and NumCells elements (partially succeed). If N < NumCells cells appear in the CellList, this means that the first N cells in the Relocation CellList have been relocated and the remainder have not.",
      "ja": "要求を受信すると、ノードBは、候補セルリストの長さがNumCells以上かどうかを確認します。ノードBのSFは、Relocation CellList内のすべてのセルがノードAでスケジュールされ、CellOptionsフィールドで指定されたオプションに関連付けられていることを確認します。どちらかのチェックが失敗した場合、ノードBは戻りコードRC_ERR_CELLLISTを使用してノードAに6P応答を送信する必要があります。両方のチェックに合格すると、ノードBのSFは、候補セルリストのどのセルがスケジュールにインストールできるかを検証します。その選択の方法はSFで指定されており、このドキュメントの範囲外です。 Candidate CellListの検証は成功（Candidate CellListのNumCellsセルを使用可能）、失敗（Candidate CellListのセルはいずれも使用不可）、または部分的に成功（Candidate CellListのNumCellsセルよりも少ない）を使用できます）。すべての場合において、ノードBは、RC_SUCCESSに設定された戻りコードを含み、CellOptionsフィールドに続いて再スケジュールされるセルのリストを指定する6P応答を送信する必要があります。そのリストには、NumCells要素（成功）、0要素（失敗）、または0〜NumCells要素（部分的に成功）を含めることができます。 N <NumCellsセルがCellListに表示される場合、これは、再配置CellListの最初のNセルが再配置され、残りは再配置されていないことを意味します。"
    },
    {
      "indent": 3,
      "text": "Upon receiving the response with code RC_SUCCESS, node A relocates the cells specified in the Relocation CellList of its RELOCATE Request to the new locations specified in the CellList of the 6P Response, in the same order. If the received return code is RC_ERR_CELLLIST, the transaction is aborted and no cell is relocated. In the case of a 2-step transaction, node B relocates the selected cells upon receiving the link-layer ACK for the 6P Response. In the case of a 3-step transaction, node B relocates the selected cells upon receiving the 6P Confirmation.",
      "ja": "コードRC_SUCCESSの応答を受信すると、ノードAは、RELOCATE要求のRelocation CellListで指定されたセルを、6P ResponseのCellListで指定された新しい場所に同じ順序で再配置します。 受信した戻りコードがRC_ERR_CELLLISTの場合、トランザクションは中止され、セルは再配置されません。 2ステップトランザクションの場合、ノードBは、6P応答のリンク層ACKを受信すると、選択したセルを再配置します。 3ステップトランザクションの場合、ノードBは6P確認を受信すると、選択したセルを再配置します。"
    },
    {
      "indent": 3,
      "text": "The SF SHOULD NOT relocate all cells between two nodes at the same time, as this might result in the schedules of both nodes diverging significantly.",
      "ja": "SFは、2つのノード間のすべてのセルを同時に再配置するべきではありません。これにより、両方のノードのスケジュールが大幅に異なる可能性があります。"
    },
    {
      "indent": 3,
      "text": "Figure 16 shows an example of a successful 2-step 6P RELOCATE Transaction.",
      "ja": "図16は、成功した2ステップ6P RELOCATEトランザクションの例を示しています。"
    },
    {
      "indent": 4,
      "text": "        +----------+                           +----------+\n        |  Node A  |                           |  Node B  |\n        +----+-----+                           +-----+----+\n             |                                       |\n             | 6P RELOCATE Request                   |\n             |   Type         = REQUEST              |\n             |   Code         = RELOCATE             |\n             |   SeqNum       = 11                   |\n             |   NumCells     = 2                    |\n             |   R.CellList   = [(1,2),(2,2)]        |\n             |   C.CellList   = [(3,3),(4,3),(5,3)]  |\n             |-------------------------------------->| B prepares\n             |                                L2 ACK | to relocate\n             |<- - - - - - - - - - - - - - - - - - - | (1,2)->(5,3)\n             |                                       | and\n             |                                       | (2,2)->(3,3)\n             | 6P Response                           |\n             |   Code         = RC_SUCCESS           |\n             |   SeqNum       = 11                   |\n             |   CellList     = [(5,3),(3,3)]        |\n A relocates |<--------------------------------------|\n(1,2)->(5,3) | L2 ACK                                |\n         and | - - - - - - - - - - - - - - - - - - ->| B relocates\n(2,2)->(3,3) |                                       | (1,2)->(5,3)\n             |                                       | and\n             |                                       | (2,2)->(3,3)",
      "raw": true
    },
    {
      "indent": 5,
      "text": "Figure 16: Example of a Successful 2-Step 6P RELOCATE Transaction",
      "ja": "図16：成功した2ステップ6P RELOCATEトランザクションの例"
    },
    {
      "indent": 3,
      "text": "Figure 17 shows an example of a partially successful 2-step 6P RELOCATE Transaction.",
      "ja": "図17は、部分的に成功した2ステップ6P RELOCATEトランザクションの例を示しています。"
    },
    {
      "indent": 3,
      "text": "        +----------+                           +----------+\n        |  Node A  |                           |  Node B  |\n        +----+-----+                           +-----+----+\n             |                                       |\n             | 6P RELOCATE Request                   |\n             |   Type         = REQUEST              |\n             |   Code         = RELOCATE             |\n             |   SeqNum       = 199                  |\n             |   NumCells     = 2                    |\n             |   R.CellList   = [(1,2),(2,2)]        |\n             |   C.CellList   = [(3,3),(4,3),(5,3)]  | B prepares\n             |-------------------------------------->| to relocate\n             |                                L2 ACK | (1,2)->(4,3)\n             |<- - - - - - - - - - - - - - - - - - - | but cannot\n             |                                       | relocate (2,2)\n             | 6P Response                           |\n             |   Type         = RESPONSE             |\n             |   Code         = RC_SUCCESS           |\n             |   SeqNum       = 199                  |\n             |   CellList     = [(4,3)]              |\n A relocates |<--------------------------------------|\n(1,2)->(4,3) | L2 ACK                                |\n             | - - - - - - - - - - - - - - - - - - ->| B relocates\n             |                                       | (1,2)->(4,3)\n             |                                       |\n             |                                       |",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 17: Example of a Partially Successful 2-Step 6P\n                 RELOCATE Transaction",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 18 shows an example of a failed 2-step 6P RELOCATE Transaction.",
      "ja": "図18は、失敗した2ステップ6P RELOCATEトランザクションの例を示しています。"
    },
    {
      "indent": 5,
      "text": "      +----------+                           +----------+\n      |  Node A  |                           |  Node B  |\n      +----+-----+                           +-----+----+\n           |                                       |\n           | 6P RELOCATE Request                   |\n           |   Type         = REQUEST              |\n           |   Code         = RELOCATE             |\n           |   SeqNum       = 53                   |\n           |   NumCells     = 2                    |\n           |   R.CellList   = [(1,2),(2,2)]        |\n           |   C.CellList   = [(3,3),(4,3),(5,3)]  |\n           |-------------------------------------->| B cannot\n           |                                L2 ACK | relocate\n           |<- - - - - - - - - - - - - - - - - - - | (1,2)\n           |                                       | or (2,2)\n           | 6P Response                           |\n           |   Type         = RESPONSE             |\n           |   Code         = RC_SUCCESS           |\n           |   SeqNum       = 53                   |\n           |   CellList     = []                   |\n           |<--------------------------------------| B does not\n           | L2 ACK                                | relocate\nA does not | - - - - - - - - - - - - - - - - - - ->|\n  relocate |                                       |\n           |                                       |",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 18: Failed 2-Step 6P RELOCATE Transaction Example",
      "ja": "図18：失敗した2ステップ6P RELOCATEトランザクションの例"
    },
    {
      "indent": 3,
      "text": "Figure 19 shows an example of a successful 3-step 6P RELOCATE Transaction.",
      "ja": "図19は、成功した3ステップ6P RELOCATEトランザクションの例を示しています。"
    },
    {
      "indent": 3,
      "text": "        +----------+                           +----------+\n        |  Node A  |                           |  Node B  |\n        +----+-----+                           +-----+----+\n             |                                       |\n             | 6P RELOCATE Request                   |\n             |   Type         = REQUEST              |\n             |   Code         = RELOCATE             |\n             |   SeqNum       = 11                   |\n             |   NumCells     = 2                    |\n             |   R.CellList   = [(1,2),(2,2)]        |\n             |   C.CellList   = []                   |\n             |-------------------------------------->|\n             |                                L2 ACK |\n             |<- - - - - - - - - - - - - - - - - - - | B identifies\n             |                                       | candidate\n             |                                       | cells\n             | 6P Response                           | (3,3),\n             |   Code         = RC_SUCCESS           | (4,3), and\n             |   SeqNum       = 11                   | (5,3)\n             |   CellList     = [(3,3),(4,3),(5,3)]  |\n  A prepares |<--------------------------------------|\n to relocate | L2 ACK                                |\n(1,2)->(5,3) | - - - - - - - - - - - - - - - - - - ->|\n         and |                                       |\n(2,2)->(3,3) | 6P Confirmation                       |\n             |   Code         = RC_SUCCESS           |\n             |   SeqNum       = 11                   |\n             |   CellList     = [(5,3),(3,3)]        |\n             |-------------------------------------->| B relocates\n             |                                L2 ACK | (1,2)->(5,3)\n A relocates |<- - - - - - - - - - - - - - - - - - - | and\n(1,2)->(5,3) |                                       | (2,2)->(3,3)\n         and |                                       |\n(2,2)->(3,3) |                                       |\n             |                                       |",
      "raw": true
    },
    {
      "indent": 5,
      "text": "Figure 19: Example of a Successful 3-Step 6P RELOCATE Transaction",
      "ja": "図19：成功した3ステップ6P RELOCATEトランザクションの例"
    },
    {
      "indent": 0,
      "text": "3.3.4. Counting Cells",
      "section_title": true,
      "ja": "3.3.4.  細胞を数える"
    },
    {
      "indent": 3,
      "text": "To retrieve the number of scheduled cells node A has with B, node A issues a 6P COUNT command. The Type field (T) is set to REQUEST. The Code field is set to COUNT. Figure 20 defines the format of a 6P COUNT Request.",
      "ja": "ノードAがBで持っているスケジュール済みセルの数を取得するために、ノードAは6P COUNTコマンドを発行します。 Typeフィールド（T）はREQUESTに設定されます。 [コード]フィールドはCOUNTに設定されています。 図20は、6P COUNT要求のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Metadata            |  CellOptions  |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 20: 6P COUNT Request Format",
      "ja": "図20：6P COUNTリクエストの形式"
    },
    {
      "indent": 3,
      "text": "Metadata: Same usage as for the 6P ADD command; see Section 3.3.1. Its format is the same as that in the 6P ADD command, but its content could be different.",
      "ja": "メタデータ：6P ADDコマンドと同じ使用法。 セクション3.3.1を参照してください。 その形式は6P ADDコマンドの形式と同じですが、その内容は異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "CellOptions: Specifies which type of cell to be counted.",
      "ja": "CellOptions：カウントするセルのタイプを指定します。"
    },
    {
      "indent": 3,
      "text": "Figure 21 defines the format of a 6P COUNT Response.",
      "ja": "図21は、6P COUNT応答のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           NumCells            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 21: 6P COUNT Response Format",
      "ja": "図21：6P COUNT応答フォーマット"
    },
    {
      "indent": 3,
      "text": "NumCells: The number of cells that correspond to the fields of the request.",
      "ja": "NumCells：リクエストのフィールドに対応するセルの数。"
    },
    {
      "indent": 3,
      "text": "Node A issues a COUNT command to node B, specifying some cell options. Upon receiving the 6P COUNT Request, node B goes through its schedule and counts the number of cells scheduled with node A in its own schedule that match the cell options in the CellOptions field of the request. Section 3.2.3 details the use of the CellOptions field.",
      "ja": "ノードAは、いくつかのセルオプションを指定して、ノードBにCOUNTコマンドを発行します。 6P COUNT要求を受信すると、ノードBはそのスケジュールを調べ、要求のCellOptionsフィールドのセルオプションと一致する独自のスケジュールでノードAとスケジュールされたセルの数をカウントします。 セクション3.2.3では、CellOptionsフィールドの使用について詳しく説明しています。"
    },
    {
      "indent": 3,
      "text": "Node B issues a 6P Response to node A with return code RC_SUCCESS and with NumCells containing the number of cells that match the request.",
      "ja": "ノードBは、戻りコードRC_SUCCESSと、要求に一致するセルの数を含むNumCellsを使用して、ノードAに6P応答を発行します。"
    },
    {
      "indent": 0,
      "text": "3.3.5. Listing Cells",
      "section_title": true,
      "ja": "3.3.5.  セルのリスト"
    },
    {
      "indent": 3,
      "text": "To retrieve a list of scheduled cells node A has with node B, node A issues a 6P LIST command. The Type field (T) is set to REQUEST. The Code field is set to LIST. Figure 22 defines the format of a 6P LIST Request.",
      "ja": "ノードAがノードBと持っているスケジュール済みセルのリストを取得するために、ノードAは6P LISTコマンドを発行します。 Typeフィールド（T）はREQUESTに設定されます。 [コード]フィールドはLISTに設定されます。 図22は、6P LIST要求のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Metadata            |  CellOptions  |   Reserved    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Offset              |          MaxNumCells          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 22: 6P LIST Request Format",
      "ja": "図22：6P LISTリクエストの形式"
    },
    {
      "indent": 3,
      "text": "Metadata: Same usage as for the 6P ADD command; see Section 3.3.1. Its format is the same as that in the 6P ADD command, but its content could be different.",
      "ja": "メタデータ：6P ADDコマンドと同じ使用法。 セクション3.3.1を参照してください。 その形式は6P ADDコマンドの形式と同じですが、その内容は異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "CellOptions: Specifies which type of cell to be listed.",
      "ja": "CellOptions：リストするセルのタイプを指定します。"
    },
    {
      "indent": 3,
      "text": "Reserved: Reserved bits. These bits SHOULD be set to zero when sending the message and MUST be ignored upon reception.",
      "ja": "予約済み：予約済みビット。 これらのビットは、メッセージを送信するときにゼロに設定する必要があり（SHOULD）、受信時には無視する必要があります。"
    },
    {
      "indent": 3,
      "text": "Offset: The offset of the first scheduled cell that is requested. The mechanism assumes that cells are ordered according to a rule defined in the SF. The rule MUST always order the cells in the same way.",
      "ja": "オフセット：要求された最初のスケジュールされたセルのオフセット。 このメカニズムは、SFで定義されたルールに従ってセルが順序付けられていることを想定しています。 ルールは、常に同じ方法でセルを並べる必要があります。"
    },
    {
      "indent": 3,
      "text": "MaxNumCells: The maximum number of cells to be listed. Node B MAY return fewer than MaxNumCells cells -- for example, if MaxNumCells cells do not fit in the frame.",
      "ja": "MaxNumCells：リストされるセルの最大数。 ノードBは、MaxNumCellsセルがフレームに収まらない場合など、MaxNumCellsセルより少ないセルを返す場合があります。"
    },
    {
      "indent": 3,
      "text": "Figure 23 defines the format of a 6P LIST Response.",
      "ja": "図23は、6P LIST応答のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| CellList ...\n+-+-+-+-+-+-+-+-+-",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 23: 6P LIST Response Format",
      "ja": "図23：6P LIST応答フォーマット"
    },
    {
      "indent": 3,
      "text": "CellList: A list of zero or more 6P Cells.",
      "ja": "CellList：ゼロ個以上の6Pセルのリスト。"
    },
    {
      "indent": 3,
      "text": "When receiving a LIST command, node B returns the cells scheduled with A in its schedule that match the CellOptions field as specified in Section 3.2.3.",
      "ja": "LISTコマンドを受信すると、ノードBは、セクション3.2.3で指定されたCellOptionsフィールドと一致するスケジュールでAでスケジュールされたセルを返します。"
    },
    {
      "indent": 3,
      "text": "When node B receives a LIST Request, the returned CellList in the 6P Response contains between 0 and MaxNumCells cells, starting from the specified offset. Node B SHOULD include as many cells as will fit in the frame. If the response contains the last cell, node B MUST set the Code field in the response to RC_EOL (\"End of List\", as per Figure 38 in Section 6.2.4), indicating to node A that there are no more cells that match the request. Node B MUST return at least one cell, unless the specified offset is beyond the end of B's cell list in its schedule. If node B has fewer than Offset cells that match the request, node B returns an empty CellList and a Code field set to RC_EOL.",
      "ja": "ノードBがLIST要求を受信すると、6P応答で返されるCellListには、指定されたオフセットから始まる0〜MaxNumCellsのセルが含まれます。 ノードBは、フレームに収まるセルをできるだけ多く含める必要があります。 応答に最後のセルが含まれる場合、ノードBは応答のCodeフィールドをRC_EOL（セクション6.2.4の図38の「リストの終わり」）に設定し、一致するセルがないことをノードAに示す必要があります。 リクエスト。 指定されたオフセットがスケジュールのBのセルリストの最後を超えていない限り、ノードBは少なくとも1つのセルを返さなければなりません。 ノードBが要求に一致するオフセットセルより少ない場合、ノードBは空のCellListとRC_EOLに設定されたCodeフィールドを返します。"
    },
    {
      "indent": 0,
      "text": "3.3.6. Clearing the Schedule",
      "section_title": true,
      "ja": "3.3.6.  スケジュールをクリアする"
    },
    {
      "indent": 3,
      "text": "To clear the schedule between nodes A and B (for example, after a schedule inconsistency is detected), node A issues a CLEAR command. The Type field (T) is set to REQUEST. The Code field is set to CLEAR. Figure 24 defines the format of a 6P CLEAR Request.",
      "ja": "ノードAとBの間のスケジュールをクリアするには（たとえば、スケジュールの不整合が検出された後）、ノードAはCLEARコマンドを発行します。 Typeフィールド（T）はREQUESTに設定されます。 [コード]フィールドは[クリア]に設定されます。 図24は、6P CLEARリクエストのフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Metadata            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 24: 6P CLEAR Request Format",
      "ja": "図24：6P CLEARリクエストの形式"
    },
    {
      "indent": 3,
      "text": "Metadata: Same usage as for the 6P ADD command; see Section 3.3.1. Its format is the same as that in the 6P ADD command, but its content could be different.",
      "ja": "メタデータ：6P ADDコマンドと同じ使用法。 セクション3.3.1を参照してください。 その形式は6P ADDコマンドの形式と同じですが、その内容は異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "Figure 25 defines the format of a 6P CLEAR Response.",
      "ja": "図25は、6P CLEAR応答の形式を定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 25: 6P CLEAR Response Format",
      "ja": "図25：6P CLEAR応答フォーマット"
    },
    {
      "indent": 3,
      "text": "When a 6P CLEAR command is issued from node A to node B, both nodes A and B MUST remove all the cells scheduled between them. That is, node A MUST remove all the cells scheduled with node B, and node B MUST remove all the cells scheduled with node A. In a 6P CLEAR command, the SeqNum MUST NOT be checked. In particular, even if the request contains a SeqNum value that would normally cause node B to detect a schedule inconsistency, the transaction MUST NOT be aborted. Upon 6P CLEAR completion, the value of SeqNum MUST be reset to 0.",
      "ja": "6P CLEARコマンドがノードAからノードBに発行されると、ノードAとBの両方は、それらの間でスケジュールされたすべてのセルを削除しなければなりません。 つまり、ノードAはノードBでスケジュールされたすべてのセルを削除する必要があり、ノードBはノードAでスケジュールされたすべてのセルを削除する必要があります。6PCLEARコマンドでは、SeqNumをチェックしてはなりません。 特に、リクエストに通常ノードBがスケジュールの不一致を検出させるSeqNum値が含まれている場合でも、トランザクションを中止してはいけません（MUST NOT）。 6P CLEARが完了すると、SeqNumの値を0にリセットする必要があります。"
    },
    {
      "indent": 3,
      "text": "The return code sent in response to a 6P CLEAR command SHOULD be RC_SUCCESS unless the operation cannot be executed. When the CLEAR operation cannot be executed, the return code MUST be set to RC_RESET.",
      "ja": "6P CLEARコマンドへの応答として送信される戻りコードは、操作を実行できない場合を除き、RC_SUCCESSである必要があります。 CLEAR操作を実行できない場合、戻りコードをRC_RESETに設定する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.3.7. Generic Signaling between SFs",
      "section_title": true,
      "ja": "3.3.7.  SF間の一般的なシグナリング"
    },
    {
      "indent": 3,
      "text": "The 6P SIGNAL message allows the SF implementations on two neighbor nodes to exchange generic commands. The payload in a received SIGNAL message is an opaque set of bytes passed unmodified to the SF. The length of the payload is determined by the Length field of the Payload IE header. How the generic SIGNAL command is used is specified by the SF and is outside the scope of this document. The Type field (T) is set to REQUEST. The Code field is set to SIGNAL. Figure 26 defines the format of a 6P SIGNAL Request.",
      "ja": "6P SIGNALメッセージにより、2つの隣接ノードでのSF実装が汎用コマンドを交換できます。 受信したSIGNALメッセージのペイロードは、変更されずにSFに渡される不透明なバイトセットです。 ペイロードの長さは、ペイロードIEヘッダーの長さフィールドによって決まります。 汎用SIGNALコマンドの使用方法はSFによって指定されており、このドキュメントの範囲外です。 Typeフィールド（T）はREQUESTに設定されます。 CodeフィールドはSIGNALに設定されます。 図26は、6P信号要求の形式を定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|           Metadata            |  payload ...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 26: 6P SIGNAL Request Format",
      "ja": "図26：6P信号要求フォーマット"
    },
    {
      "indent": 3,
      "text": "Metadata: Same usage as for the 6P ADD command; see Section 3.3.1. Its format is the same as that in the 6P ADD command, but its content could be different.",
      "ja": "メタデータ：6P ADDコマンドと同じ使用法。 セクション3.3.1を参照してください。 その形式は6P ADDコマンドの形式と同じですが、その内容は異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "Figure 27 defines the format of a 6P SIGNAL Response.",
      "ja": "図27は、6P信号応答のフォーマットを定義しています。"
    },
    {
      "indent": 5,
      "text": "                     1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version| T | R |     Code      |     SFID      |     SeqNum    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| payload ...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 27: 6P SIGNAL Response Format",
      "ja": "図27：6P信号応答フォーマット"
    },
    {
      "indent": 0,
      "text": "3.4. Protocol Functional Details",
      "section_title": true,
      "ja": "3.4.  プロトコル機能の詳細"
    },
    {
      "indent": 0,
      "text": "3.4.1. Version Checking",
      "section_title": true,
      "ja": "3.4.1.  バージョンチェック"
    },
    {
      "indent": 3,
      "text": "All messages contain a Version field. If multiple protocol versions of 6P have been defined (in future specifications for Version values different from 0), a node MAY implement multiple protocol versions at the same time. When a node receives a 6P message with a version number it does not implement, the node MUST reply with a 6P Response with a return code field set to RC_ERR_VERSION. The format of this 6P Response message MUST be compliant with version 0 and MUST be supported by all future versions of the protocol. This ensures that when node B sends a 6P Response to node A indicating that it does not implement the 6P version in the 6P Request, node A can successfully parse that response.",
      "ja": "すべてのメッセージには、バージョンフィールドが含まれています。 6Pの複数のプロトコルバージョンが定義されている場合（0以外のバージョン値の将来の仕様で）、ノードは複数のプロトコルバージョンを同時に実装できます。 ノードが実装していないバージョン番号の6Pメッセージを受信すると、ノードはRC_ERR_VERSIONに設定されたリターンコードフィールドを持つ6P応答で応答する必要があります。 この6P応答メッセージの形式は、バージョン0に準拠する必要があり、プロトコルのすべての将来のバージョンでサポートされなければなりません。 これにより、ノードBが、6Pリクエストで6Pバージョンを実装していないことを示す6P応答をノードAに送信したときに、ノードAがその応答を正常に解析できます。"
    },
    {
      "indent": 3,
      "text": "When a node supports a version number received in a 6P Request message, the Version field in the 6P Response MUST be the same as the Version field in the corresponding 6P Request. Similarly, in a 3-step transaction, the Version field in the 6P Confirmation MUST match that of the 6P Request and 6P Response of the same transaction.",
      "ja": "ノードが6P要求メッセージで受信したバージョン番号をサポートする場合、6P応答のバージョンフィールドは、対応する6P要求のバージョンフィールドと同じでなければなりません。 同様に、3ステップトランザクションでは、6P確認のバージョンフィールドは、同じトランザクションの6Pリクエストと6Pレスポンスのバージョンフィールドと一致しなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.4.2. SFID Checking",
      "section_title": true,
      "ja": "3.4.2.  SFIDチェック"
    },
    {
      "indent": 3,
      "text": "All messages contain an SFID field. A node MAY support multiple SFs at the same time. When receiving a 6P message with an unsupported SFID, a node MUST reply with a 6P Response with a return code of RC_ERR_SFID. The SFID field in the 6P Response MUST be the same as the SFID field in the corresponding 6P Request. In a 3-step transaction, the SFID field in the 6P Confirmation MUST match that of the 6P Request and the 6P Response of the same transaction.",
      "ja": "すべてのメッセージにはSFIDフィールドが含まれています。 ノードは複数のSFを同時にサポートする場合があります。 サポートされていないSFIDを含む6Pメッセージを受信した場合、ノードはRC_ERR_SFIDの戻りコードで6P応答を返さなければなりません。 6P応答のSFIDフィールドは、対応する6P要求のSFIDフィールドと同じでなければなりません。 3ステップトランザクションでは、6P確認のSFIDフィールドは、同じトランザクションの6P要求と6P応答のSFIDフィールドと一致しなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.4.3. Concurrent 6P Transactions",
      "section_title": true,
      "ja": "3.4.3.  同時6Pトランザクション"
    },
    {
      "indent": 3,
      "text": "Only a single 6P Transaction at a time in a given direction can take place between two neighbors. That is, a node MUST NOT issue a new 6P Request to a given neighbor before the previous 6P Transaction it initiated has finished (or possibly timed out). If a node receives a 6P Request from a given neighbor before having sent the 6P Response to the previous 6P Request from that neighbor, it MUST send back a 6P Response with a return code of RC_RESET (as per Figure 38 in Section 6.2.4) and discard this ongoing second transaction. A node receiving a RC_RESET code MUST abort the second transaction and treat it as though it never happened (i.e., reverting changes to the schedule or SeqNum done by this transaction).",
      "ja": "特定の方向で、一度に1つの6Pトランザクションのみが2つのネイバー間で実行できます。 つまり、ノードは、開始した以前の6Pトランザクションが終了する（またはタイムアウトする可能性がある）前に、指定されたネイバーに新しい6Pリクエストを発行してはなりません。 ノードが特定のネイバーから6Pリクエストを受信してから、そのネイバーから前の6Pリクエストに6Pレスポンスを送信する場合、RC_RESETのリターンコードで6Pレスポンスを返さなければなりません（セクション6.2.4の図38のように） この進行中の2番目のトランザクションを破棄します。 RC_RESETコードを受信するノードは、2番目のトランザクションを中止し、発生しなかったように処理する必要があります（つまり、このトランザクションによって行われたスケジュールまたはSeqNumへの変更を元に戻します）。"
    },
    {
      "indent": 3,
      "text": "Nodes A and B MAY support having two transactions going on at the same time, one in each direction. Similarly, a node MAY support concurrent 6P Transactions with different neighbors. In this case, the cells involved in an ongoing 6P Transaction MUST be \"locked\" until the transaction finishes. For example, in Figure 1, node C can have a different ongoing 6P Transaction with nodes B and R. If a node does not have enough resources to handle concurrent 6P Transactions from different neighbors, it MUST reply with a 6P Response with return code RC_ERR_BUSY (as per Figure 38 in Section 6.2.4). If the requested cells are locked, it MUST reply to that request with a 6P Response with return code RC_ERR_LOCKED (as per Figure 38). The node receiving RC_ERR_BUSY or RC_ERR_LOCKED MAY implement a retry mechanism as defined by the SF.",
      "ja": "ノードAとBは、各方向に1つずつ、同時に実行される2つのトランザクションを持つことをサポートする場合があります。 同様に、ノードは異なるネイバーとの同時6Pトランザクションをサポートする場合があります。 この場合、進行中の6Pトランザクションに関与するセルは、トランザクションが終了するまで「ロック」する必要があります。 たとえば、図1では、ノードCはノードBとノードRで異なる進行中の6Pトランザクションを持つことができます。ノードに異なる近隣からの同時6Pトランザクションを処理するのに十分なリソースがない場合、戻りコードRC_ERR_BUSYで6P応答を返さなければなりません （セクション6.2.4の図38による）。 要求されたセルがロックされている場合、戻りコードRC_ERR_LOCKEDを含む6P応答でその要求に応答する必要があります（図38を参照）。 RC_ERR_BUSYまたはRC_ERR_LOCKEDを受信するノードは、SFで定義されている再試行メカニズムを実装できます。"
    },
    {
      "indent": 0,
      "text": "3.4.4. 6P Timeout",
      "section_title": true,
      "ja": "3.4.4.  6Pタイムアウト"
    },
    {
      "indent": 3,
      "text": "A timeout occurs when the node that successfully sent a 6P Request does not receive the corresponding 6P Response within an amount of time specified by the SF. In a 3-step transaction, a timeout also occurs when a node sending the 6P Response does not receive a 6P Confirmation. When a timeout occurs, the transaction MUST be canceled at the node where the timeout occurs. The value of the 6P Timeout should be greater than the longest possible time it takes to receive the 6P Response or Confirmation. The value of the 6P Timeout hence depends on the number of cells scheduled between the neighbor nodes, the maximum number of link-layer retransmissions, etc. The SF MUST determine the value of the timeout. The value of the timeout is out of scope for this document.",
      "ja": "6P要求を正常に送信したノードが、SFで指定された時間内に対応する6P応答を受信しない場合、タイムアウトが発生します。 3ステップトランザクションでは、6P応答を送信するノードが6P確認を受信しない場合にもタイムアウトが発生します。 タイムアウトが発生すると、タイムアウトが発生したノードでトランザクションをキャンセルする必要があります。 6Pタイムアウトの値は、6P応答または確認の受信にかかる最長時間よりも大きくする必要があります。 したがって、6Pタイムアウトの値は、隣接ノード間でスケジュールされたセルの数、リンク層再送信の最大数などに依存します。SFはタイムアウトの値を決定する必要があります。 タイムアウトの値は、このドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "3.4.5. Aborting a 6P Transaction",
      "section_title": true,
      "ja": "3.4.5.  6Pトランザクションの中止"
    },
    {
      "indent": 3,
      "text": "If the receiver of a 6P Request fails during a 6P Transaction and is unable to complete it, it SHOULD reply to that request with a 6P Response with return code RC_RESET. Upon receiving this 6P Response, the initiator of the 6P Transaction MUST consider the 6P Transaction as having failed.",
      "ja": "6Pトランザクションの間に6Pリクエストの受信者が失敗し、それを完了することができない場合、6Pレスポンスで戻りコードRC_RESETでそのリクエストに応答する必要があります。 この6P応答を受信すると、6Pトランザクションの開始者は、6Pトランザクションが失敗したと見なしなければなりません。"
    },
    {
      "indent": 3,
      "text": "Similarly, in the case of a 3-step transaction, when the receiver of a 6P Response fails during the 6P Transaction and is unable to complete it, it MUST reply to that 6P Response with a 6P Confirmation with return code RC_RESET. Upon receiving this 6P Confirmation, the sender of the 6P Response MUST consider the 6P Transaction as having failed.",
      "ja": "同様に、3ステップトランザクションの場合、6P応答の受信者が6Pトランザクション中に失敗し、完了できない場合、6P応答に戻りコードRC_RESETで6P確認を返さなければなりません。 この6P確認を受信すると、6P応答の送信者は、6Pトランザクションが失敗したと見なさなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.4.6. SeqNum Management",
      "section_title": true,
      "ja": "3.4.6.  シーケンス管理"
    },
    {
      "indent": 3,
      "text": "The SeqNum is the field in the 6top IE header used to match Request, Response, and Confirmation messages for a given transaction. The SeqNum is used to detect and handle duplicate commands (Section 3.4.6.1) and inconsistent schedules (Section 3.4.6.2). Each node remembers the last used SeqNum for each neighbor. That is, a node stores as many SeqNum values as it has neighbors. In the case of supporting multiple SFs at a time, a SeqNum value is maintained per SF and per neighbor. In the remainder of this section, we describe the use of SeqNum between two neighbors; the same happens for each other neighbor, independently.",
      "ja": "SeqNumは、特定のトランザクションの要求、応答、および確認メッセージを照合するために使用される6top IEヘッダーのフィールドです。 SeqNumは、重複したコマンド（セクション3.4.6.1）および矛盾したスケジュール（セクション3.4.6.2）を検出および処理するために使用されます。 各ノードは、各ネイバーに対して最後に使用されたSeqNumを記憶しています。 つまり、ノードには、隣接ノードと同じ数のSeqNum値が格納されます。 一度に複数のSFをサポートする場合、SeqNum値はSFおよびネイバーごとに維持されます。 このセクションの残りの部分では、2つのネイバー間のSeqNumの使用について説明します。 同じことは、他の隣人に対しても独立して起こります。"
    },
    {
      "indent": 3,
      "text": "When a node resets, or after a CLEAR Transaction, it MUST reset SeqNum to 0. The 6P Response and 6P Confirmation for a transaction MUST use the same SeqNum value as that in the request. After every transaction, the SeqNum MUST be incremented by exactly 1.",
      "ja": "ノードがリセットされるか、CLEARトランザクションの後に、ノードはSeqNumを0にリセットしなければなりません。トランザクションの6P応答と6P確認は、リクエストと同じSeqNum値を使用しなければなりません。 すべてのトランザクションの後、SeqNumは正確に1ずつ増加する必要があります。"
    },
    {
      "indent": 3,
      "text": "Specifically, if node A receives the link-layer acknowledgment for its 6P Request, it will increment the SeqNum by exactly 1 after the 6P Transaction ends. This ensures that, for the next 6P Transaction where it sends a 6P Request, the 6P Request will have a different SeqNum.",
      "ja": "具体的には、ノードAが6Pリクエストのリンク層肯定応答を受信した場合、6Pトランザクションが終了した後、SeqNumを正確に1インクリメントします。 これにより、6Pリクエストを送信する次の6Pトランザクションで、6PリクエストのSeqNumが異なることが保証されます。"
    },
    {
      "indent": 3,
      "text": "Similarly, node B increments the SeqNum by exactly 1 after having received the link-layer acknowledgment for the 6P Response (2-step 6P Transaction) or after having sent the link-layer acknowledgment for the 6P Confirmation (3-step 6P Transaction).",
      "ja": "同様に、ノードBは、6P応答のリンク層確認応答を受信した後（2ステップ6Pトランザクション）、または6P確認のリンク層確認応答を送信した後（3ステップ6Pトランザクション）に、SeqNumを正確に1増やします。"
    },
    {
      "indent": 3,
      "text": "When node B receives a 6P Request from node A with SeqNum equal to 0, it checks the stored SeqNum for A. If A is a new neighbor, the stored SeqNum in B will be 0. The transaction can continue. If the stored SeqNum for A in B is different than 0, a potential inconsistency is detected. In this case, B MUST return RC_ERR_SEQNUM with SeqNum=0. The SF of node A MAY decide what to do next, as described in Section 3.4.6.2.",
      "ja": "ノードBがノードAからSeqNumが0の6P要求を受信すると、Aの保存されたSeqNumをチェックします。Aが新しいネイバーの場合、Bに保存されたSeqNumは0になります。トランザクションは続行できます。 BのAの保存されたSeqNumが0以外の場合、潜在的な不整合が検出されます。 この場合、BはSeqNum = 0でRC_ERR_SEQNUMを返さなければなりません。 ノードAのSFは、セクション3.4.6.2で説明されているように、次に何をするかを決定する場合があります。"
    },
    {
      "indent": 3,
      "text": "The SeqNum MUST be implemented as a lollipop counter: it rolls over from 0xFF to 0x01 (not to 0x00). This is used to detect a neighbor reset. Figure 28 lists the possible values of the SeqNum.",
      "ja": "SeqNumはロリポップカウンターとして実装する必要があります：0xFFから0x01（0x00ではなく）にロールオーバーします。 これは、近隣リセットの検出に使用されます。 図28は、SeqNumの可能な値をリストしています。"
    },
    {
      "indent": 15,
      "text": "+-----------+------------------------------+\n|   Value   | Meaning                      |\n+-----------+------------------------------+\n|      0x00 | Clear, or after device reset |\n| 0x01-0xFF | Lollipop counter values      |\n+-----------+------------------------------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 28: Possible Values of the SeqNum",
      "ja": "図28：SeqNumの可能な値"
    },
    {
      "indent": 0,
      "text": "3.4.6.1. Detecting and Handling Duplicate 6P Messages",
      "section_title": true,
      "ja": "3.4.6.1。 重複する6Pメッセージの検出と処理"
    },
    {
      "indent": 3,
      "text": "All 6P commands are link-layer acknowledged. A duplicate message means that a node receives a second 6P Request, Response, or Confirmation. This happens when the link-layer acknowledgment is not received and a link-layer retransmission happens. Duplicate messages are normal and unavoidable.",
      "ja": "すべての6Pコマンドは、リンク層で確認されます。 重複メッセージは、ノードが2番目の6P要求、応答、または確認を受信することを意味します。 これは、リンク層肯定応答が受信されず、リンク層の再送信が発生したときに発生します。 重複したメッセージは正常であり、避けられません。"
    },
    {
      "indent": 3,
      "text": "Figure 29 shows an example 2-step transaction in which node A receives a duplicate 6P Response.",
      "ja": "図29は、ノードAが重複6P応答を受信する2ステップトランザクションの例を示しています。"
    },
    {
      "indent": 4,
      "text": "       +----------+                           +----------+\n       |  Node A  |                           |  Node B  |\n       +----+-----+                           +-----+----+\n            |                                       |\n            | 6P Request (SeqNum=456)               |\n            |-------------------------------------->|\n            |                                L2 ACK |\n            |<- - - - - - - - - - - - - - - - - - - |\n            |                                       |\n            | 6P Response  (SeqNum=456)             |\n            |<--------------------------------------|\n            | L2 ACK                                |\n            | - - - - - - - - - - -X                | no ACK:\n            |                                       | link-layer\n            | 6P Response  (SeqNum=456)             | retransmit\n  duplicate |<--------------------------------------|\n6P Response | L2 ACK                                |\n   received | - - - - - - - - - - - - - - - - - - ->|\n            |                                       |",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 29: Example Duplicate 6P Message",
      "ja": "図29：重複する6Pメッセージの例"
    },
    {
      "indent": 3,
      "text": "Figure 30 shows an example 3-step transaction in which node A receives an out-of-order duplicate 6P Response after having sent a 6P Confirmation.",
      "ja": "図30は、ノードAが6P確認を送信した後、順序が狂った重複6P応答を受信する3ステップトランザクションの例を示しています。"
    },
    {
      "indent": 3,
      "text": "        +----------+                           +----------+\n        |  Node A  |                           |  Node B  |\n        +----+-----+                           +-----+----+\n             |                                       |\n             | 6P Request  (SeqNum=123)              |\n             |-------------------------------------->|\n             |                                L2 ACK |\n             |<- - - - - - - - - - - - - - - - - - - |\n             |                                       |\n             | 6P Response  (SeqNum=123)             |\n             |<--------------------------------------|\n             | L2 ACK                                |\n             | - - - - - - - - - - -X                | no ACK:\n             |                                       | link-layer\n             | 6P Confirmation  (SeqNum=123)         | retransmit\n             |-------------------------------------->|    |\n             |                                L2 ACK |    |\n             |<- - - - - - - - - - - - - - - - - - - |  frame\n             |                                       |  queued\n             | 6P Response  (SeqNum=123)             |    |\n   duplicate |<--------------------------------------| <--+\nout-of-order | L2 ACK                                |\n 6P Response | - - - - - - - - - - - - - - - - - - ->|\n    received |                                       |",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Figure 30: Example Out-of-Order Duplicate 6P Message",
      "ja": "図30：順不同の重複6Pメッセージの例"
    },
    {
      "indent": 3,
      "text": "A node detects a duplicate 6P message when it has the same SeqNum and type as the last frame received from the same neighbor. When receiving a duplicate 6P message, a node MUST send a link-layer acknowledgment but MUST silently ignore the 6P message at 6top.",
      "ja": "ノードは、同じネイバーから受信した最後のフレームと同じSeqNumとタイプを持っている場合、重複する6Pメッセージを検出します。 重複する6Pメッセージを受信した場合、ノードはリンク層確認応答を送信する必要がありますが、6topで6Pメッセージを静かに無視しなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.4.6.2. Detecting and Handling a Schedule Inconsistency",
      "section_title": true,
      "ja": "3.4.6.2。 スケジュールの矛盾の検出と処理"
    },
    {
      "indent": 3,
      "text": "A schedule inconsistency happens when the schedules of nodes A and B are inconsistent -- for example, when node A has a transmit cell to node B, but node B does not have the corresponding receive cell and therefore isn't listening to node A on that cell. A schedule inconsistency results in loss of connectivity.",
      "ja": "スケジュールの不一致は、ノードAとBのスケジュールに一貫性がない場合に発生します。たとえば、ノードAにはノードBへの送信セルがあるが、ノードBには対応する受信セルがないため、ノードAをリッスンしていない場合 そのセル。 スケジュールに矛盾があると、接続が失われます。"
    },
    {
      "indent": 3,
      "text": "The SeqNum field, which is present in each 6P message, is used to detect an inconsistency. The SeqNum field increments by 1 in each message, as detailed in Section 3.4.6. A node computes the expected",
      "ja": "各6Pメッセージに存在するSeqNumフィールドは、不整合を検出するために使用されます。 セクション3.4.6で説明されているように、SeqNumフィールドは各メッセージで1ずつ増加します。 ノードが予想を計算します"
    },
    {
      "indent": 3,
      "text": "SeqNum field for the next 6P Transaction. If a node receives a 6P Request with a SeqNum value that is not the expected value, it has detected an inconsistency.",
      "ja": "次の6PトランザクションのSeqNumフィールド。 ノードが、期待値ではないSeqNum値を持つ6Pリクエストを受信した場合、矛盾を検出しました。"
    },
    {
      "indent": 3,
      "text": "There are two cases in which a schedule inconsistency happens.",
      "ja": "スケジュールの不整合が発生するのは2つの場合です。"
    },
    {
      "indent": 3,
      "text": "The first case is when a node loses state -- for example, when it is power-cycled (turned off, then on). In that case, its SeqNum value is reset to 0. Since the SeqNum is a lollipop counter, its neighbor detects an inconsistency in the next 6P Transaction. This is illustrated in Figures 31 and 32.",
      "ja": "最初のケースは、ノードの状態が失われたときです。たとえば、電源を入れ直したとき（オフになってからオンになったとき）です。 その場合、そのSeqNum値は0にリセットされます。SeqNumはロリポップカウンターであるため、そのネイバーは次の6Pトランザクションで不整合を検出します。 これを図31および32に示します。"
    },
    {
      "indent": 6,
      "text": "     +----------+                           +----------+\n     |  Node A  |                           |  Node B  |\n     +----+-----+                           +-----+----+\nSeqNum=87 |                                       | SeqNum=87\n          |                                       |\n          | 6P Request  (SeqNum=87)               |\n          |-------------------------------------->|\n          |                                L2 ACK |\n          |<- - - - - - - - - - - - - - - - - - - |\n          |                                       |\n          | 6P Response  (SeqNum=87)              |\n          |<--------------------------------------|\n          | L2 ACK                                |\n          | - - - - - - - - - - - - - - - - - - ->|\n          |                                     ==== power-cycle\n          |                                       |\nSeqNum=88 |                                       | SeqNum=0\n          |                                       |\n          | 6P Request (SeqNum=88)                |\n          |-------------------------------------->| Inconsistency\n          |                                L2 ACK | detected\n          |<- - - - - - - - - - - - - - - - - - - |\n          |                                       |\n          | 6P Response (SeqNum=0, RC_ERR_SEQNUM) |\n          |<--------------------------------------|\n          | L2 ACK                                |\n          | - - - - - - - - - - - - - - - - - - ->|",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 31: Example of Inconsistency Because Node B Resets (Detected by Node B)",
      "ja": "図31：ノードBのリセットによる不整合の例（ノードBにより検出）"
    },
    {
      "indent": 3,
      "text": "         +----------+                           +----------+\n         |  Node A  |                           |  Node B  |\n         +----+-----+                           +-----+----+\n    SeqNum=97 |                                       | SeqNum=97\n              |                                       |\n              | 6P Request  (SeqNum=97)               |\n              |-------------------------------------->|\n              |                                L2 ACK |\n              |<- - - - - - - - - - - - - - - - - - - |\n              |                                       |\n              | 6P Response  (SeqNum=97)              |\n              |<--------------------------------------|\n              | L2 ACK                                |\n              | - - - - - - - - - - - - - - - - - - ->|\n              |                                     ==== power-cycle\n              |                                       |\n    SeqNum=98 |                                       | SeqNum=0\n              |                                       |\n              | 6P Request (SeqNum=0)                 |\nInconsistency |<--------------------------------------|\n     detected | L2 ACK                                |\n              |- - - - - - - - - - - - - - - - - - - >|\n              |                                       |\n              | 6P Response (SeqNum=0, RC_ERR_SEQNUM) |\n              |-------------------------------------->|\n              | L2 ACK                                |\n              |<- - - - - - - - - - - - - - - - - - - |",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 32: Example of Inconsistency Because Node B Resets\n                  (Detected by Node A)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The second case is when the maximum number of link-layer retransmissions is reached on the 6P Response of a 2-step transaction (or, equivalently, on a 6P Confirmation of a 3-step transaction). This is illustrated in Figure 33.",
      "ja": "2番目のケースは、2段階トランザクションの6P応答（または、3段階トランザクションの6P確認）でリンク層の再送信の最大数に達した場合です。 これを図33に示します。"
    },
    {
      "indent": 3,
      "text": "       +----------+                           +----------+\n       |  Node A  |                           |  Node B  |\n       +----+-----+                           +-----+----+\n  SeqNum=87 |                                       | SeqNum=87\n            |                                       |\n            | 6P Request  (SeqNum=87)               |\n            |-------------------------------------->|\n            |                                L2 ACK |\n            |<- - - - - - - - - - - - - - - - - - - |\n            |                                       |\n            | 6P Response  (SeqNum=87)              |\n            |<--------------------------------------|\n            | L2 ACK                                |\n            | - - - - - - - - X                     |\n  SeqNum=88 |                                       | no ACK:\n            | 6P Response  (SeqNum=87)              | retrans. 1\n(duplicate) |<--------------------------------------|\n            | L2 ACK                                |\n            | - - - - - - - - X                     |\n            |                                       | no ACK:\n            | 6P Response  (SeqNum=87)              | retrans. 2\n(duplicate) |<--------------------------------------|\n            | L2 ACK                                |\n            | - - - - - - - - X                     |\n            |                                       | max. retrans.:\n            |                                       | inconsistency\n            |                                       | detected",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Figure 33: Example Inconsistency Because of Maximum Link-Layer Retransmissions (where Maximum = 2)",
      "ja": "図33：最大リンク層再送信による不整合の例（最大= 2）"
    },
    {
      "indent": 3,
      "text": "In both cases, node B detects the inconsistency.",
      "ja": "どちらの場合も、ノードBは不整合を検出します。"
    },
    {
      "indent": 3,
      "text": "If the inconsistency is detected during a 6P Transaction (Figure 31), the node that has detected it MUST send back a 6P Response or 6P Confirmation with an error code of RC_ERR_SEQNUM. In this 6P Response or 6P Confirmation, the SeqNum field MUST be set to the value of the sender of the message (0 in the example in Figure 31).",
      "ja": "6Pトランザクション中に不整合が検出された場合（図31）、それを検出したノードは、RC_ERR_SEQNUMのエラーコードで6P応答または6P確認を返送する必要があります。 この6P応答または6P確認では、SeqNumフィールドをメッセージの送信者の値に設定する必要があります（図31の例では0）。"
    },
    {
      "indent": 3,
      "text": "The SF of the node that has detected the inconsistency MUST define how to handle the inconsistency. Three possible ways to do this are as follows:",
      "ja": "不整合を検出したノードのSFは、不整合の処理方法を定義しなければなりません。 これを行うには、次の3つの方法があります。"
    },
    {
      "indent": 3,
      "text": "o Issue a 6P CLEAR Request to clear the schedule, and then rebuild.",
      "ja": "o 6P CLEARリクエストを発行してスケジュールをクリアし、再構築します。"
    },
    {
      "indent": 3,
      "text": "o Issue a 6P LIST Request to retrieve the schedule.",
      "ja": "o 6P LISTリクエストを発行して、スケジュールを取得します。"
    },
    {
      "indent": 3,
      "text": "o Internally \"roll back\" the schedule.",
      "ja": "o内部的にスケジュールを「ロールバック」します。"
    },
    {
      "indent": 3,
      "text": "How to handle an inconsistency is out of scope for this document. The SF defines how to handle an inconsistency.",
      "ja": "矛盾の処理方法は、このドキュメントの範囲外です。 SFは、矛盾の処理方法を定義します。"
    },
    {
      "indent": 0,
      "text": "3.4.7. Handling Error Responses",
      "section_title": true,
      "ja": "3.4.7.  エラー応答の処理"
    },
    {
      "indent": 3,
      "text": "A return code marked as Yes in the \"Is Error?\" column in Figure 38 (Section 6.2.4) indicates an error. When a node receives a 6P Response or 6P Confirmation with an error, it MUST consider the 6P Transaction as having failed. In particular, if this was a response to a 6P ADD, DELETE, or RELOCATE Request, the node MUST NOT add, delete, or relocate any of the cells involved in this 6P Transaction. Similarly, a node sending a 6P Response or a 6P Confirmation with an error code MUST NOT add, delete, or relocate any cells as part of that 6P Transaction. If a node receives an unrecognized return code, the 6P Transaction MUST be considered as having failed. In particular, in a 3-step 6P Transaction, when receiving a 6P Response with a return code that it does not recognize, the requester (node A) MUST send a 6P Confirmation to the responder (node B) with return code RC_ERR and consider the transaction failed. Upon reception of a 6P Confirmation with return code RC_ERR, the responder MUST consider the transaction failed as well. Defining what to do after an error has occurred is out of scope for this document. The SF defines what to do after an error has occurred.",
      "ja": "「エラーですか？」で「はい」とマークされた戻りコード図38（6.2.4項）の列はエラーを示しています。ノードがエラーのある6P応答または6P確認を受信した場合、6Pトランザクションが失敗したと見なさなければなりません。特に、これが6P ADD、DELETE、またはRELOCATE要求への応答であった場合、ノードはこの6Pトランザクションに関与するセルを追加、削除、または再配置してはなりません。同様に、6P応答またはエラーコード付きの6P確認を送信するノードは、その6Pトランザクションの一部としてセルを追加、削除、または再配置してはなりません。ノードが認識できないリターンコードを受け取った場合、6Pトランザクションは失敗したと見なされなければなりません。特に、3ステップ6Pトランザクションでは、認識できないリターンコードを含む6P応答を受信する場合、リクエスター（ノードA）は、レスポンダー（ノードB）にリターンコードRC_ERRを付けて6P確認を送信しなければなりません。トランザクションは失敗しました。応答コードRC_ERRで6P確認を受信すると、レスポンダーはトランザクションも失敗したと見なさなければなりません。エラーが発生した後の処理を定義することは、このドキュメントの範囲外です。 SFは、エラーが発生した後の処理を定義します。"
    },
    {
      "indent": 0,
      "text": "3.5. Security",
      "section_title": true,
      "ja": "3.5.  セキュリティ"
    },
    {
      "indent": 3,
      "text": "6P messages MUST be secured through link-layer security. This is possible because 6P messages are carried as Payload IEs.",
      "ja": "6Pメッセージは、リンク層セキュリティを介して保護する必要があります。 これは、6PメッセージがペイロードIEとして伝送されるため可能です。"
    },
    {
      "indent": 0,
      "text": "4. Requirements for 6top Scheduling Function (SF) Specifications",
      "section_title": true,
      "ja": "4. 6topスケジューリング機能（SF）仕様の要件"
    },
    {
      "indent": 0,
      "text": "4.1. SF Identifier (SFID)",
      "section_title": true,
      "ja": "4.1.  SF識別子（SFID）"
    },
    {
      "indent": 3,
      "text": "Each SF has a 1-byte identifier. Section 6.2.5 defines the rules for applying for an SFID.",
      "ja": "各SFには1バイトの識別子があります。 セクション6.2.5では、SFIDを申請するためのルールを定義しています。"
    },
    {
      "indent": 0,
      "text": "4.2. Requirements for an SF Specification",
      "section_title": true,
      "ja": "4.2.  SF仕様の要件"
    },
    {
      "indent": 3,
      "text": "The specification for an SF",
      "ja": "SFの仕様"
    },
    {
      "indent": 3,
      "text": "o MUST specify an identifier for that SF.",
      "ja": "oそのSFの識別子を指定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "o MUST specify the rule for a node to decide when to add/delete one or more cells to/on a neighbor.",
      "ja": "o 1つまたは複数のセルを近隣に追加/削除するタイミングを決定するノードのルールを指定する必要があります。"
    },
    {
      "indent": 3,
      "text": "o MUST specify the rule for a transaction source to select cells to add to the CellList field in the 6P ADD Request.",
      "ja": "o 6P ADD要求のCellListフィールドに追加するセルを選択するために、トランザクションソースのルールを指定する必要があります。"
    },
    {
      "indent": 3,
      "text": "o MUST specify the rule for a transaction destination to select cells from the CellList to add to its schedule.",
      "ja": "oスケジュールに追加するCellListからセルを選択するために、トランザクション宛先のルールを指定する必要があります。"
    },
    {
      "indent": 3,
      "text": "o MUST specify a value for the 6P Timeout or a rule/equation to calculate it.",
      "ja": "o 6Pタイムアウトの値またはそれを計算するためのルール/方程式を指定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "o MUST specify the rule for ordering cells.",
      "ja": "oセルの順序付け規則を指定する必要があります。"
    },
    {
      "indent": 3,
      "text": "o MUST specify a meaning for the Metadata field in the 6P ADD Request.",
      "ja": "o 6P ADD要求のメタデータフィールドの意味を指定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "o MUST specify the SF behavior of a node when it boots.",
      "ja": "o起動時のノードのSF動作を指定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "o MUST specify how to handle a schedule inconsistency.",
      "ja": "oスケジュールの不整合を処理する方法を指定しなければなりません。"
    },
    {
      "indent": 3,
      "text": "o MUST specify what to do after an error has occurred (the node either sent a 6P Response with an error code or received one).",
      "ja": "oエラーが発生した後の処理を指定する必要があります（ノードはエラーコードを含む6P応答を送信したか、エラーコードを受信しました）。"
    },
    {
      "indent": 3,
      "text": "o MUST specify the list of statistics to gather. Example statistics include the number of transmitted frames to each neighbor. If the SF does not require that statistics be gathered, the SF specification MUST explicitly say so.",
      "ja": "o収集する統計のリストを指定する必要があります。 統計の例には、各ネイバーに送信されたフレームの数が含まれます。 SFが統計を収集することを必要としない場合、SF仕様は明示的にそうする必要があります。"
    },
    {
      "indent": 3,
      "text": "o SHOULD clearly state the application domain the SF is created for.",
      "ja": "o SFが作成されるアプリケーションドメインを明確に述べる必要があります。"
    },
    {
      "indent": 3,
      "text": "o SHOULD contain examples that highlight normal and error scenarios.",
      "ja": "o通常およびエラーのシナリオを強調する例を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "o SHOULD contain a list of current implementations, at least during the Internet-Draft (I-D) state of the document, per [RFC7942].",
      "ja": "o [RFC7942]に従って、少なくともドキュメントのインターネットドラフト（I-D）状態の間、現在の実装のリストを含めるべきです（SHOULD）。"
    },
    {
      "indent": 3,
      "text": "o SHOULD contain a performance evaluation of the scheme, possibly through references to external documents.",
      "ja": "oおそらく外部文書への参照を通じて、スキームのパフォーマンス評価を含めるべきである。"
    },
    {
      "indent": 3,
      "text": "o SHOULD define the format of the SIGNAL command payload and its use.",
      "ja": "o SIGNALコマンドペイロードの形式とその使用法を定義する必要があります。"
    },
    {
      "indent": 3,
      "text": "o MAY redefine the format of the CellList field.",
      "ja": "o CellListフィールドの形式を再定義する場合があります。"
    },
    {
      "indent": 3,
      "text": "o MAY redefine the format of the CellOptions field.",
      "ja": "o CellOptionsフィールドの形式を再定義する場合があります。"
    },
    {
      "indent": 3,
      "text": "o MAY redefine the meaning of the CellOptions field.",
      "ja": "o CellOptionsフィールドの意味を再定義できます。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5.セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "6P messages are carried inside 802.15.4 Payload Information Elements (IEs). Those Payload IEs are encrypted and authenticated at the link layer through CCM* [CCM-Star] (\"CCM\" stands for \"Cipher block Chaining -- Message authentication code\"). 6P benefits from the same level of security as any other Payload IE. 6P does not define its own security mechanisms. In particular, although a key management solution is out of scope for this document, 6P will benefit from the key management solution used in the network. This is relevant, as security attacks such as forgery and misattribution attacks become more damaging when a single key is shared amongst a group of more than two participants.",
      "ja": "6Pメッセージは、802.15.4ペイロード情報要素（IE）内で伝送されます。 これらのペイロードIEは、CCM * [CCM-Star]を介してリンク層で暗号化および認証されます（「CCM」は「Cipher block Chaining-Message authentication code」を表します）。 6Pは、他のペイロードIEと同じレベルのセキュリティを活用できます。 6Pは、独自のセキュリティメカニズムを定義していません。 特に、キー管理ソリューションはこのドキュメントの範囲外ですが、6Pはネットワークで使用されるキー管理ソリューションの恩恵を受けます。 これは、単一のキーが3人以上の参加者のグループ間で共有されると、偽造や誤属性攻撃などのセキュリティ攻撃がより有害になるため、関連性があります。"
    },
    {
      "indent": 3,
      "text": "6P does not provide protection against DoS attacks. Example attacks include not sending confirmation messages in 3-step transactions and sending incorrectly formatted requests. These cases SHOULD be handled by an appropriate policy, such as rate-limiting or time-limited blacklisting of the attacker after several attempts. The effect on the overall network is mostly localized to the two nodes in question, as communication happens in dedicated cells.",
      "ja": "6Pは、DoS攻撃に対する保護を提供しません。 攻撃の例には、3ステップトランザクションで確認メッセージを送信しないことや、誤った形式の要求を送信することが含まれます。 これらのケースは、数回の試行後の攻撃者のレート制限または時間制限ブラックリストなどの適切なポリシーによって処理される必要があります。 専用セルで通信が行われるため、ネットワーク全体への影響は主に問題の2つのノードに限定されます。"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "6.1. IETF IE Subtype 6P",
      "section_title": true,
      "ja": "6.1.  IETF IEサブタイプ6P"
    },
    {
      "indent": 3,
      "text": "This document adds the following number to the \"IEEE Std 802.15.4 IETF IE Subtype IDs\" registry defined by [RFC8137]:",
      "ja": "このドキュメントは、[RFC8137]によって定義された「IEEE Std 802.15.4 IETF IEサブタイプID」レジストリに次の番号を追加します。"
    },
    {
      "indent": 20,
      "text": "+--------+------------+-----------+\n| Value  | Subtype ID | Reference |\n+--------+------------+-----------+\n|   1    | SUBID_6TOP | RFC 8480  |\n+---------------------+-----------+",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 34: IETF IE Subtype SUBID_6TOP",
      "ja": "図34：IETF IEサブタイプSUBID_6TOP"
    },
    {
      "indent": 0,
      "text": "6.2. 6TiSCH Parameters Subregistries",
      "section_title": true,
      "ja": "6.2.  6TiSCHパラメータサブレジストリ"
    },
    {
      "indent": 3,
      "text": "This section defines subregistries within the \"IPv6 Over the TSCH Mode of IEEE 802.15.4e (6TiSCH)\" parameters registry, hereafter referred to as the \"6TiSCH parameters\" registry. Each subregistry is described in a subsection.",
      "ja": "このセクションでは、「IEEE 802.15.4e（6TiSCH）のTSCHモードでのIPv6」パラメータレジストリ（以下「6TiSCHパラメータ」レジストリと呼びます）内のサブレジストリを定義します。 各サブレジストリについては、サブセクションで説明します。"
    },
    {
      "indent": 0,
      "text": "6.2.1. 6P Version Numbers",
      "section_title": true,
      "ja": "6.2.1.  6Pバージョン番号"
    },
    {
      "indent": 3,
      "text": "The name of the subregistry is \"6P Version Numbers\".",
      "ja": "サブレジストリの名前は「6Pバージョン番号」です。"
    },
    {
      "indent": 3,
      "text": "The following note is included in this registry: \"In the 6top Protocol (6P) [RFC8480], there is a field to identify the version of the protocol. This field is 4 bits in size.\"",
      "ja": "このレジストリには、「6top Protocol（6P）[RFC8480]に、プロトコルのバージョンを識別するフィールドがあります。このフィールドのサイズは4ビットです。」"
    },
    {
      "indent": 3,
      "text": "Each entry in the subregistry must include the version in the range 0-15 and a reference to the 6P version's documentation.",
      "ja": "サブレジストリの各エントリには、0〜15の範囲のバージョンと6Pバージョンのドキュメントへの参照が含まれている必要があります。"
    },
    {
      "indent": 3,
      "text": "The initial entry in this subregistry is as follows:",
      "ja": "このサブレジストリの最初のエントリは次のとおりです。"
    },
    {
      "indent": 26,
      "text": "+---------+-----------+\n| Version | Reference |\n+---------+-----------+\n|       0 | RFC 8480  |\n+---------+-----------+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 35: 6P Version Number Entry",
      "ja": "図35：6Pバージョン番号の入力"
    },
    {
      "indent": 3,
      "text": "All other version numbers are Unassigned.",
      "ja": "他のすべてのバージョン番号は未割り当てです。"
    },
    {
      "indent": 3,
      "text": "The IANA policy for future additions to this subregistry is \"IETF Review\" or \"IESG Approval\" as described in [RFC8126].",
      "ja": "[RFC8126]で説明されているように、このサブレジストリへの将来の追加に関するIANAポリシーは、「IETFレビュー」または「IESG承認」です。"
    },
    {
      "indent": 0,
      "text": "6.2.2. 6P Message Types",
      "section_title": true,
      "ja": "6.2.2.  6Pメッセージタイプ"
    },
    {
      "indent": 3,
      "text": "The name of the subregistry is \"6P Message Types\".",
      "ja": "サブレジストリの名前は「6Pメッセージタイプ」です。"
    },
    {
      "indent": 3,
      "text": "The following note is included in this registry: \"In version 0 of the 6top Protocol (6P) [RFC8480], there is a field to identify the type of message. This field is 2 bits in size.\"",
      "ja": "このレジストリには、次の注意事項が含まれています。「6top Protocol（6P）[RFC8480]のバージョン0には、メッセージのタイプを識別するフィールドがあります。このフィールドのサイズは2ビットです。」"
    },
    {
      "indent": 3,
      "text": "Each entry in the subregistry must include the message type in the range b00-b11, the corresponding name, and a reference to the 6P message type's documentation.",
      "ja": "サブレジストリの各エントリには、b00〜b11の範囲のメッセージタイプ、対応する名前、および6Pメッセージタイプのドキュメントへの参照を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Initial entries in this subregistry are as follows:",
      "ja": "このサブレジストリの初期エントリは次のとおりです。"
    },
    {
      "indent": 19,
      "text": "+------+--------------+-----------+\n| Type | Name         | Reference |\n+------+--------------+-----------+\n| b00  | REQUEST      | RFC 8480  |\n| b01  | RESPONSE     | RFC 8480  |\n| b10  | CONFIRMATION | RFC 8480  |\n+------+--------------+-----------+",
      "raw": true
    },
    {
      "indent": 24,
      "text": "Figure 36: 6P Message Types",
      "ja": "図36：6Pメッセージタイプ"
    },
    {
      "indent": 3,
      "text": "All other message types are Unassigned.",
      "ja": "他のすべてのメッセージタイプは未割り当てです。"
    },
    {
      "indent": 3,
      "text": "The IANA policy for future additions to this subregistry is \"IETF Review\" or \"IESG Approval\" as described in [RFC8126].",
      "ja": "[RFC8126]で説明されているように、このサブレジストリへの将来の追加に関するIANAポリシーは、「IETFレビュー」または「IESG承認」です。"
    },
    {
      "indent": 0,
      "text": "6.2.3. 6P Command Identifiers",
      "section_title": true,
      "ja": "6.2.3.  6Pコマンド識別子"
    },
    {
      "indent": 3,
      "text": "The name of the subregistry is \"6P Command Identifiers\".",
      "ja": "サブレジストリの名前は「6Pコマンド識別子」です。"
    },
    {
      "indent": 3,
      "text": "The following note is included in this registry: \"In version 0 of the 6top Protocol (6P) [RFC8480], there is a Code field that is 8 bits in size. In a 6P Request, the value of this Code field is used to identify the command.\"",
      "ja": "このレジストリには、次の注意事項が含まれています。「6top Protocol（6P）[RFC8480]のバージョン0には、サイズが8ビットのCodeフィールドがあります。6PRequestでは、このCodeフィールドの値を使用して コマンドを識別します。」"
    },
    {
      "indent": 3,
      "text": "Each entry in the subregistry must include an identifier in the range 0-255, the corresponding name, and a reference to the 6P command identifier's documentation.",
      "ja": "サブレジストリの各エントリには、0〜255の範囲の識別子、対応する名前、および6Pコマンド識別子のドキュメントへの参照を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Initial entries in this subregistry are as follows:",
      "ja": "このサブレジストリの初期エントリは次のとおりです。"
    },
    {
      "indent": 18,
      "text": "+------------+------------+-----------+\n| Identifier | Name       | Reference |\n+------------+------------+-----------+\n|          0 | Reserved   | RFC 8480  |\n|          1 | ADD        | RFC 8480  |\n|          2 | DELETE     | RFC 8480  |\n|          3 | RELOCATE   | RFC 8480  |\n|          4 | COUNT      | RFC 8480  |\n|          5 | LIST       | RFC 8480  |\n|          6 | SIGNAL     | RFC 8480  |\n|          7 | CLEAR      | RFC 8480  |\n|      8-254 | Unassigned |           |\n|        255 | Reserved   | RFC 8480  |\n+------------+------------+-----------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 37: 6P Command Identifiers",
      "ja": "図37：6Pコマンド識別子"
    },
    {
      "indent": 3,
      "text": "The IANA policy for future additions to this subregistry is \"IETF Review\" or \"IESG Approval\" as described in [RFC8126].",
      "ja": "[RFC8126]で説明されているように、このサブレジストリへの将来の追加に関するIANAポリシーは、「IETFレビュー」または「IESG承認」です。"
    },
    {
      "indent": 0,
      "text": "6.2.4. 6P Return Codes",
      "section_title": true,
      "ja": "6.2.4.  6Pリターンコード"
    },
    {
      "indent": 3,
      "text": "The name of the subregistry is \"6P Return Codes\".",
      "ja": "サブレジストリの名前は「6P Return Codes」です。"
    },
    {
      "indent": 3,
      "text": "The following note is included in this registry: \"In version 0 of the 6top Protocol (6P) [RFC8480], there is a Code field that is 8 bits in size. In a 6P Response or 6P Confirmation, the value of this Code field is used to identify the return code.\"",
      "ja": "このレジストリには、次の注意事項が含まれています。「6top Protocol（6P）[RFC8480]のバージョン0には、サイズが8ビットのコードフィールドがあります。6P応答または6P確認では、このコードフィールドの値 戻りコードを識別するために使用されます。」"
    },
    {
      "indent": 3,
      "text": "Each entry in the subregistry must include a return code in the range 0-255, the corresponding name, the corresponding description, and a reference to the 6P return code's documentation. If the return code corresponds to a Response error, the \"Is Error?\" entry must indicate \"Yes\". Otherwise, \"No\" must be used.",
      "ja": "サブレジストリの各エントリには、0〜255の範囲のリターンコード、対応する名前、対応する説明、および6Pリターンコードのドキュメントへの参照を含める必要があります。 戻りコードが応答エラーに対応する場合、「エラーですか？」 エントリは「はい」を示す必要があります。 それ以外の場合は、「いいえ」を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Initial entries in this subregistry are as follows:",
      "ja": "このサブレジストリの初期エントリは次のとおりです。"
    },
    {
      "indent": 5,
      "text": "+------+-----------------+---------------------------+-----------+\n| Code | Name            | Description               | Is Error? |\n+------+-----------------+---------------------------+-----------+\n|    0 | RC_SUCCESS      | operation succeeded       |        No |\n|    1 | RC_EOL          | end of list               |        No |\n|    2 | RC_ERR          | generic error             |       Yes |\n|    3 | RC_RESET        | critical error, reset     |       Yes |\n|    4 | RC_ERR_VERSION  | unsupported 6P version    |       Yes |\n|    5 | RC_ERR_SFID     | unsupported SFID          |       Yes |\n|    6 | RC_ERR_SEQNUM   | schedule inconsistency    |       Yes |\n|    7 | RC_ERR_CELLLIST | cellList error            |       Yes |\n|    8 | RC_ERR_BUSY     | busy                      |       Yes |\n|    9 | RC_ERR_LOCKED   | cells are locked          |       Yes |\n+------+-----------------+---------------------------+-----------+",
      "raw": true
    },
    {
      "indent": 24,
      "text": "Figure 38: 6P Return Codes",
      "ja": "図38：6Pリターンコード"
    },
    {
      "indent": 3,
      "text": "All other message types are Unassigned.",
      "ja": "他のすべてのメッセージタイプは未割り当てです。"
    },
    {
      "indent": 3,
      "text": "The IANA policy for future additions to this subregistry is \"IETF Review\" or \"IESG Approval\" as described in [RFC8126].",
      "ja": "[RFC8126]で説明されているように、このサブレジストリへの将来の追加に関するIANAポリシーは、「IETFレビュー」または「IESG承認」です。"
    },
    {
      "indent": 0,
      "text": "6.2.5. 6P Scheduling Function Identifiers",
      "section_title": true,
      "ja": "6.2.5.  6Pスケジューリング関数識別子"
    },
    {
      "indent": 3,
      "text": "The name of the subregistry is \"6P Scheduling Function Identifiers\".",
      "ja": "サブレジストリの名前は「6P Scheduling Function Identifiers」です。"
    },
    {
      "indent": 3,
      "text": "The following note is included in this registry: \"In version 0 of the 6top Protocol (6P) [RFC8480], there is a field to identify the Scheduling Function to handle the message. This field is 8 bits in size.\"",
      "ja": "このレジストリには、次の注意が含まれています。「6top Protocol（6P）[RFC8480]のバージョン0には、メッセージを処理するスケジューリング機能を識別するフィールドがあります。このフィールドのサイズは8ビットです。」"
    },
    {
      "indent": 3,
      "text": "Each entry in the subregistry must include an SFID in the range 0-255, the corresponding name, and a reference to the 6P Scheduling Function's documentation.",
      "ja": "サブレジストリの各エントリには、0〜255の範囲のSFID、対応する名前、および6Pスケジューリング機能のドキュメントへの参照を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "There are currently no entries in this subregistry.",
      "ja": "現在、このサブレジストリにはエントリがありません。"
    },
    {
      "indent": 3,
      "text": "+------+---------------------------------+--------------------------+\n| SFID | Name                            | Reference                |\n+------+---------------------------------+--------------------------+\n| 0-255| Unassigned                      |                          |\n+------+---------------------------------+--------------------------+",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 39: SF Identifier (SFID) Entry",
      "ja": "図39：SF識別子（SFID）エントリ"
    },
    {
      "indent": 3,
      "text": "All message types are Unassigned.",
      "ja": "すべてのメッセージタイプは未割り当てです。"
    },
    {
      "indent": 3,
      "text": "The IANA policy for future additions to this subregistry depends on the value of the SFID, as shown in Figure 40. These specifications must follow the guidelines of Section 4.",
      "ja": "図40に示すように、このサブレジストリへの将来の追加に関するIANAポリシーは、SFIDの値に依存します。これらの仕様は、セクション4のガイドラインに従う必要があります。"
    },
    {
      "indent": 16,
      "text": "+-----------+------------------------------+\n|     Range | Registration Procedures      |\n+-----------+------------------------------+\n|     0-127 | IETF Review or IESG Approval |\n|   128-255 | Expert Review                |\n+-----------+------------------------------+",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 40: SF Identifier (SFID): Registration Procedure",
      "ja": "図40：SF識別子（SFID）：登録手順"
    },
    {
      "indent": 0,
      "text": "6.2.6. 6P CellOptions Bitmap",
      "section_title": true,
      "ja": "6.2.6.  6P CellOptionsビットマップ"
    },
    {
      "indent": 3,
      "text": "The name of the subregistry is \"6P CellOptions Bitmap\".",
      "ja": "サブレジストリの名前は「6P CellOptions Bitmap」です。"
    },
    {
      "indent": 3,
      "text": "The following note is included in this registry: \"In version 0 of the 6top Protocol (6P) [RFC8480], there is an optional CellOptions field that is 8 bits in size.\"",
      "ja": "このレジストリには、次の注意事項が含まれています。「6top Protocol（6P）[RFC8480]のバージョン0では、サイズが8ビットのオプションのCellOptionsフィールドがあります。」"
    },
    {
      "indent": 3,
      "text": "Each entry in the subregistry must include a bit position in the range 0-7, the corresponding name, and a reference to the bit's documentation.",
      "ja": "サブレジストリの各エントリには、0〜7の範囲のビット位置、対応する名前、およびビットのドキュメントへの参照を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Initial entries in this subregistry are as follows:",
      "ja": "このサブレジストリの初期エントリは次のとおりです。"
    },
    {
      "indent": 20,
      "text": "+-----+---------------+-----------+\n| bit | Name          | Reference |\n+-----+---------------+-----------+\n|   0 | TX (Transmit) | RFC 8480  |\n|   1 | RX (Receive)  | RFC 8480  |\n|   2 | SHARED        | RFC 8480  |\n| 3-7 | Reserved      |           |\n+-----+---------------+-----------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 41: 6P CellOptions Bitmap",
      "ja": "図41：6P CellOptionsビットマップ"
    },
    {
      "indent": 3,
      "text": "All other message types are Unassigned.",
      "ja": "他のすべてのメッセージタイプは未割り当てです。"
    },
    {
      "indent": 3,
      "text": "The IANA policy for future additions to this subregistry is \"IETF Review\" or \"IESG Approval\" as described in [RFC8126].",
      "ja": "[RFC8126]で説明されているように、このサブレジストリへの将来の追加に関するIANAポリシーは、「IETFレビュー」または「IESG承認」です。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7.参照"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1.  規範的参考文献"
    },
    {
      "indent": 3,
      "text": "[IEEE802154] IEEE, \"IEEE Standard for Low-Rate Wireless Networks\", IEEE 802.15.4, DOI 10.1109/IEEESTD.2016.7460875.",
      "ja": "[IEEE802154] IEEE、「低レートワイヤレスネットワークのIEEE標準」、IEEE 802.15.4、DOI 10.1109 / IEEESTD.2016.7460875。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S.、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC8137] Kivinen, T. and P. Kinney, \"IEEE 802.15.4 Information Element for the IETF\", RFC 8137, DOI 10.17487/RFC8137, May 2017, <https://www.rfc-editor.org/info/rfc8137>.",
      "ja": "[RFC8137] Kivinen、T。、およびP. Kinney、「IETFのIEEE 802.15.4情報要素」、RFC 8137、DOI 10.17487 / RFC8137、2017年5月、<https://www.rfc-editor.org/info/ rfc8137>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2.  参考資料"
    },
    {
      "indent": 3,
      "text": "[CCM-Star] Struik, R., \"Formal Specification of the CCM* Mode of Operation\", IEEE P802.15-4/0537r2, September 2005.",
      "ja": "[CCM-Star] Struik、R。、「CCM *動作モードの正式な仕様」、IEEE P802.15-4 / 0537r2、2005年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC7554] Watteyne, T., Ed., Palattella, M., and L. Grieco, \"Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement\", RFC 7554, DOI 10.17487/RFC7554, May 2015, <https://www.rfc-editor.org/info/rfc7554>.",
      "ja": "[RFC7554] Watteyne、T.、Ed。、Palattella、M.、およびL. Grieco、「モノのインターネット（IoT）でのIEEE 802.15.4eタイムスロットチャネルホッピング（TSCH）の使用：問題ステートメント」、RFC 7554 、DOI 10.17487 / RFC7554、2015年5月、<https://www.rfc-editor.org/info/rfc7554>。"
    },
    {
      "indent": 3,
      "text": "[RFC7942] Sheffer, Y. and A. Farrel, \"Improving Awareness of Running Code: The Implementation Status Section\", BCP 205, RFC 7942, DOI 10.17487/RFC7942, July 2016, <https://www.rfc-editor.org/info/rfc7942>.",
      "ja": "[RFC7942] Sheffer、Y。、およびA. Farrel、「実行中のコードの認識の改善：実装ステータスセクション」、BCP 205、RFC 7942、DOI 10.17487 / RFC7942、2016年7月、<https：//www.rfc-editor。 org / info / rfc7942>。"
    },
    {
      "indent": 3,
      "text": "[RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>.",
      "ja": "[RFC8126] Cotton、M.、Leiba、B。、およびT. Narten、「RFCでIANA考慮事項セクションを記述するためのガイドライン」、BCP 26、RFC 8126、DOI 10.17487 / RFC8126、2017年6月、<https：// www .rfc-editor.org / info / rfc8126>。"
    },
    {
      "indent": 3,
      "text": "[RFC8180] Vilajosana, X., Ed., Pister, K., and T. Watteyne, \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\", BCP 210, RFC 8180, DOI 10.17487/RFC8180, May 2017, <https://www.rfc-editor.org/info/rfc8180>.",
      "ja": "[RFC8180] Vilajosana、X.、Ed。、Pister、K。、およびT. Watteyne、「IEEE 802.15.4e（6TiSCH）構成のTSCHモードでの最小IPv6」、BCP 210、RFC 8180、DOI 10.17487 / RFC8180、 2017年5月、<https://www.rfc-editor.org/info/rfc8180>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Recommended Structure of an SF Specification",
      "ja": "付録A. SF仕様の推奨構造"
    },
    {
      "indent": 3,
      "text": "The following section structure for an SF document is RECOMMENDED:",
      "ja": "SFドキュメントの次のセクション構造が推奨されます。"
    },
    {
      "indent": 3,
      "text": "o Introduction",
      "ja": "oはじめに"
    },
    {
      "indent": 3,
      "text": "o RFC 2119 Requirements Language (if applicable)",
      "ja": "o RFC 2119要件言語（該当する場合）"
    },
    {
      "indent": 3,
      "text": "o Scheduling Function Identifier",
      "ja": "oスケジューリング機能識別子"
    },
    {
      "indent": 3,
      "text": "o Rules for Adding/Deleting Cells",
      "ja": "oセルの追加/削除のルール"
    },
    {
      "indent": 3,
      "text": "o Rules for CellList",
      "ja": "o CellListのルール"
    },
    {
      "indent": 3,
      "text": "o 6P Timeout Value",
      "ja": "o 6Pタイムアウト値"
    },
    {
      "indent": 3,
      "text": "o Rule for Ordering Cells",
      "ja": "oセルの順序付けの規則"
    },
    {
      "indent": 3,
      "text": "o Meaning of the Metadata Field",
      "ja": "oメタデータフィールドの意味"
    },
    {
      "indent": 3,
      "text": "o Node Behavior at Boot",
      "ja": "o起動時のノードの動作"
    },
    {
      "indent": 3,
      "text": "o Schedule Inconsistency Handling",
      "ja": "o不整合処理のスケジュール"
    },
    {
      "indent": 3,
      "text": "o 6P Error Handling",
      "ja": "o 6Pエラー処理"
    },
    {
      "indent": 3,
      "text": "o Examples",
      "ja": "o例"
    },
    {
      "indent": 3,
      "text": "o Implementation Status",
      "ja": "o実装ステータス"
    },
    {
      "indent": 3,
      "text": "o Security Considerations",
      "ja": "oセキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "o IANA Considerations",
      "ja": "o IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "o Normative References (if applicable)",
      "ja": "o規範的参考文献（該当する場合）"
    },
    {
      "indent": 3,
      "text": "o Informative References (if applicable)",
      "ja": "o参考情報（該当する場合）"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Qin Wang (editor) Univ. of Sci. and Tech. Beijing 30 Xueyuan Road Beijing, Hebei 100083 China",
      "ja": "Qin Wang（編集者）大学 の科学。 と技術。 中国100083北京北京30 Xueyuan Road北京"
    },
    {
      "indent": 3,
      "text": "Email: wangqin@ies.ustb.edu.cn",
      "ja": "メール：wangqin@ies.ustb.edu.cn"
    },
    {
      "indent": 3,
      "text": "Xavier Vilajosana Universitat Oberta de Catalunya 156 Rambla Poblenou Barcelona, Catalonia 08018 Spain",
      "ja": "Xavier Vilajosana Universitat Oberta de Catalunya 156 Rambla Poblenouバルセロナ、カタルーニャスペイン"
    },
    {
      "indent": 3,
      "text": "Email: xvilajosana@uoc.edu",
      "ja": "メール：xvilajosana@uoc.edu"
    },
    {
      "indent": 3,
      "text": "Thomas Watteyne Analog Devices 32990 Alvarado-Niles Road, Suite 910 Union City, CA 94587 United States of America",
      "ja": "Thomas Watteyne Analog Devices 32990 Alvarado-Niles Road、Suite 910 Union City、CA 94587アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: thomas.watteyne@analog.com",
      "ja": "メール：thomas.watteyne@analog.com"
    }
  ]
}