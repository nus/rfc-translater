{
  "title": {
    "text": "RFC 8251 - Updates to the Opus Audio Codec",
    "ja": "RFC 8251 - オーパスオーディオコーデックへのアップデート"
  },
  "number": 8251,
  "created_at": "2019-10-27 11:46:51.234687+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                         JM. Valin\nRequest for Comments: 8251                           Mozilla Corporation\nUpdates: 6716                                                     K. Vos\nCategory: Standards Track                                        vocTone\nISSN: 2070-1721                                             October 2017",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Updates to the Opus Audio Codec",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document addresses minor issues that were found in the specification of the Opus audio codec in RFC 6716. It updates the normative decoder implementation included in Appendix A of RFC 6716. The changes fix real and potential security-related issues, as well as minor quality-related issues.",
      "ja": "この文書では、それは規範的デコーダの実装はRFC 6716.の付録Aに変更を含め更新RFC 6716.にオーパスオーディオコーデックの仕様で見つかったマイナーな問題に対処する現実と潜在的なセキュリティ関連の問題を解決するだけでなく、マイナーな品質-関連する問題。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 7841のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8251.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttps://www.rfc-editor.org/info/rfc8251で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2017 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2017 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（https://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2\n2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3\n3.  Stereo State Reset in SILK  . . . . . . . . . . . . . . . . .   3\n4.  Parsing of the Opus Packet Padding  . . . . . . . . . . . . .   4\n5.  Resampler Buffer  . . . . . . . . . . . . . . . . . . . . . .   4\n6.  Integer Wrap-Around in Inverse Gain Computation . . . . . . .   6\n7.  Integer Wrap-Around in LSF Decoding . . . . . . . . . . . . .   7\n8.  Cap on Band Energy  . . . . . . . . . . . . . . . . . . . . .   7\n9.  Hybrid Folding  . . . . . . . . . . . . . . . . . . . . . . .   8\n10. Downmix to Mono . . . . . . . . . . . . . . . . . . . . . . .   9\n11. New Test Vectors  . . . . . . . . . . . . . . . . . . . . . .   9\n12. Security Considerations . . . . . . . . . . . . . . . . . . .  11\n13. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11\n14. Normative References  . . . . . . . . . . . . . . . . . . . .  11\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  11\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "This document addresses minor issues that were discovered in the reference implementation of the Opus codec. Unlike most IETF specifications, RFC 6716 [RFC6716] defines Opus in terms of a normative reference decoder implementation rather than from the associated text description. Appendix A of that RFC includes the reference decoder implementation, which is why only issues affecting the decoder are listed here. An up-to-date implementation of the Opus encoder can be found at <https://opus-codec.org/>.",
      "ja": "この文書では、オーパスコーデックのリファレンス実装で発見されたマイナーな問題に対処します。最もIETF仕様とは異なり、RFC 6716 [RFC6716]は引用規格デコーダ実装のではなく、関連するテキスト記述の用語でオーパスを定義します。そのRFCの付録Aは、デコーダに影響を与える唯一の問題はここにリストされている理由である、参照デコーダの実装が含まれています。オーパスエンコーダの最新の実装では、<https://opus-codec.org/>で見つけることができます。"
    },
    {
      "indent": 3,
      "text": "Some of the changes in this document update normative behavior in a way that requires new test vectors. Only the C implementation is affected, not the English text of the specification. This specification remains fully compatible with RFC 6716 [RFC6716].",
      "ja": "新しいテストベクトルを必要とする方法で、この文書更新規範的行動の変化の一部。唯一のC実装では、仕様のない英語のテキスト、影響を受けています。この仕様は、RFC 6716 [RFC6716]と完全に互換性が残っています。"
    },
    {
      "indent": 3,
      "text": "Note: Due to RFC formatting conventions, lines exceeding the column width in the patch are split using a backslash character. The backslashes at the end of a line and the white space at the beginning of the following line are not part of the patch. Referenced line numbers are approximations. A properly formatted patch including all changes is available at <https://www.ietf.org/proceedings/98/slides/ materials-98-codec-opus-update-00.patch> and has a SHA-1 hash of 029e3aa88fc342c91e67a21e7bfbc9458661cd5f.",
      "ja": "注意：RFCの表記規則のため、パッチの列幅を超える行は、バックスラッシュ文字を使用して分割されています。行と次の行の先頭にある空白の終わりにバックスラッシュは、パッチの一部ではありません。参照される行番号は近似値です。すべての変更を含む、適切にフォーマットされたパッチは、<https://www.ietf.org/proceedings/98/slides/材料-98コーデックオーパス更新-00.patch>で入手可能であり、029e3aa88fc342c91e67a21e7bfbc9458661cd5fのSHA-1ハッシュを有します。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "キーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、 \"SHALL\"、 \"SHOULD\"、 \"ないもの\"、 \"推奨\" \"ない（SHOULD NOT）\"、 \"MAY\"、 \"推奨NOT\"、および「OPTIONAL BCP 14に記載されているように「この文書に解釈されるべきである[RFC2119]、[RFC8174]と、ここで示されるように、それらは、すべて大文字で表示された場合にのみ。"
    },
    {
      "indent": 0,
      "text": "3. Stereo State Reset in SILK",
      "section_title": true,
      "ja": "SILK 3.ステレオの状態リセット"
    },
    {
      "indent": 3,
      "text": "The reference implementation does not reinitialize the stereo state during a mode switch. The old stereo memory can produce a brief impulse (i.e., single sample) in the decoded audio. This can be fixed by changing silk/dec_API.c around line 72:",
      "ja": "リファレンス実装では、モードスイッチの間にステレオ状態を再初期化しません。古いステレオメモリは、復号されたオーディオの短いインパルス（すなわち、単一のサンプル）を生成することができます。これは、線72の周りに絹/ dec_API.cを変化させることによって固定することができます。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n     for( n = 0; n < DECODER_NUM_CHANNELS; n++ ) {\n         ret  = silk_init_decoder( &channel_state[ n ] );\n     }\n+    silk_memset(&((silk_decoder *)decState)->sStereo, 0,\n+                sizeof(((silk_decoder *)decState)->sStereo));\n+    /* Not strictly needed, but it's cleaner that way */\n+    ((silk_decoder *)decState)->prev_decode_only_middle = 0;",
      "raw": true
    },
    {
      "indent": 3,
      "text": " return ret; } <CODE ENDS>",
      "ja": "RETを返します。 } <CODEを終了します>"
    },
    {
      "indent": 3,
      "text": "This change affects the normative output of the decoder, but the amount of change is within the tolerance and is too small to make the test vector check fail.",
      "ja": "この変更は、デコーダの規範的な出力に影響しますが、変化量が許容範囲内にあると失敗するテストベクトルのチェックを行うには小さすぎます。"
    },
    {
      "indent": 0,
      "text": "4. Parsing of the Opus Packet Padding",
      "section_title": true,
      "ja": "オーパスパケットのパディング4.解析"
    },
    {
      "indent": 3,
      "text": "It was discovered that some invalid packets of a very large size could trigger an out-of-bounds read in the Opus packet parsing code responsible for padding. This is due to an integer overflow if the signaled padding exceeds 2^31-1 bytes (the actual packet may be smaller). The code can be fixed by decrementing the (signed) len value, instead of incrementing a separate padding counter. This is done by applying the following changes around line 596 of src/opus_decoder.c:",
      "ja": "これは非常に大きなサイズのいくつかの不正なパケットを引き起こす可能性があることが発見された範囲外のパディングを担当するオーパスパケット解析コードを読み込みます。シグナリングパディングが2 ^ 31-1バイトを超える場合、これは整数オーバーフローに起因するものである（実際のパケットが小さくてもよいです）。コードは、（符号付き）LEN値をデクリメント、代わりに別のパディングカウンタを増分することによって固定することができます。これは、SRC / opus_decoder.cのライン596の周りに次の変更を適用することによって行われます。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n       /* Padding flag is bit 6 */\n       if (ch&0x40)\n       {\n-         int padding=0;\n          int p;\n          do {\n             if (len<=0)\n                return OPUS_INVALID_PACKET;\n             p = *data++;\n             len--;\n-            padding += p==255 ? 254: p;\n+            len -= p==255 ? 254: p;\n          } while (p==255);\n-         len -= padding;\n       }\n<CODE ENDS>",
      "raw": true
    },
    {
      "indent": 3,
      "text": "This packet-parsing issue is limited to reading memory up to about 60 KB beyond the compressed buffer. This can only be triggered by a compressed packet more than about 16 MB long, so it's not a problem for RTP. In theory, it could crash a file decoder (e.g., Opus in Ogg) if the memory just after the incoming packet is out of range, but our attempts to trigger such a crash in a production application built using an affected version of the Opus decoder failed.",
      "ja": "このパケット解析する問題は、圧縮されたバッファを越えて約60 KBにメモリを読みに限定されています。これは、約16以下MB長い圧縮パケットによってトリガすることができますので、RTPのための問題ではありません。ただ、着信パケットの後にメモリが範囲外の場合は理論的には、ファイル復号器（オッグでは例えば、オーパス）をクラッシュする可能性がありますが、私たちの試みはオーパスデコーダの影響を受けるバージョンを使用して構築された本番アプリケーションで、このようなクラッシュを引き起こすために失敗しました。"
    },
    {
      "indent": 0,
      "text": "5. Resampler Buffer",
      "section_title": true,
      "ja": "5.リサンプラーバッファ"
    },
    {
      "indent": 3,
      "text": "The SILK resampler had the following issues:",
      "ja": "SILKリサンプラは、次の問題がありました："
    },
    {
      "indent": 3,
      "text": "1. The calls to memcpy() were using sizeof(opus_int32), but the type of the local buffer was opus_int16.",
      "ja": "1.は、（）はsizeof（opus_int32）を使用していたのmemcpyの呼び出しが、ローカルバッファの種類はopus_int16ました。"
    },
    {
      "indent": 3,
      "text": "2. Because the size was wrong, this potentially allowed the source and destination regions of the memcpy() to overlap on the copy from \"buf\" to \"buf\". We believe that nSamplesIn (number of input samples) is at least fs_in_khZ (sampling rate in kHz), which is at least 8. Since RESAMPLER_ORDER_FIR_12 is only 8, that should not be a problem once the type size is fixed.",
      "ja": "2.サイズが間違っていたので、これは潜在的に「BUF」に「BUF」からコピーで重なるように）（のmemcpyのソースと宛先領域を可能にしました。我々は、型サイズが固定されると、問題にはならないこと、nSamplesIn（入力サンプルの数）RESAMPLER_ORDER_FIR_12のみ8であるので、少なくとも8、少なくともfs_in_khZ（キロヘルツのサンプリングレート）であると考えています。"
    },
    {
      "indent": 3,
      "text": "3. The size of the buffer used RESAMPLER_MAX_BATCH_SIZE_IN, but the data stored in it was actually twice the input batch size (nSamplesIn<<1).",
      "ja": "3.バッファのサイズはRESAMPLER_MAX_BATCH_SIZE_INを使用するが、それに格納されたデータは、実際には2回入力されたバッチサイズ（nSamplesIn << 1）でした。"
    },
    {
      "indent": 3,
      "text": "The code can be fixed by applying the following changes around line 78 of silk/resampler_private_IIR_FIR.c:",
      "ja": "コードは、シルク/ resampler_private_IIR_FIR.cの線78の周りに次の変更を適用することによって固定することができます。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": " )\n {\n     silk_resampler_state_struct *S = \\\n(silk_resampler_state_struct *)SS;\n     opus_int32 nSamplesIn;\n     opus_int32 max_index_Q16, index_increment_Q16;\n-    opus_int16 buf[ RESAMPLER_MAX_BATCH_SIZE_IN + \\\nRESAMPLER_ORDER_FIR_12 ];\n+    opus_int16 buf[ 2*RESAMPLER_MAX_BATCH_SIZE_IN + \\\nRESAMPLER_ORDER_FIR_12 ];",
      "raw": true
    },
    {
      "indent": 3,
      "text": "     /* Copy buffered samples to start of buffer */\n-    silk_memcpy( buf, S->sFIR, RESAMPLER_ORDER_FIR_12 \\\n* sizeof( opus_int32 ) );\n+    silk_memcpy( buf, S->sFIR, RESAMPLER_ORDER_FIR_12 \\\n* sizeof( opus_int16 ) );",
      "raw": true
    },
    {
      "indent": 8,
      "text": "/* Iterate over blocks of frameSizeIn input samples */\nindex_increment_Q16 = S->invRatio_Q16;\nwhile( 1 ) {\n    nSamplesIn = silk_min( inLen, S->batchSize );",
      "raw": true
    },
    {
      "indent": 3,
      "text": "         /* Upsample 2x */\n         silk_resampler_private_up2_HQ( S->sIIR, &buf[ \\\nRESAMPLER_ORDER_FIR_12 ], in, nSamplesIn );",
      "raw": true
    },
    {
      "indent": 3,
      "text": "         max_index_Q16 = silk_LSHIFT32( nSamplesIn, 16 + 1 \\\n);         /* + 1 because 2x upsampling */\n         out = silk_resampler_private_IIR_FIR_INTERPOL( out, \\\nbuf, max_index_Q16, index_increment_Q16 );\n         in += nSamplesIn;\n         inLen -= nSamplesIn;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "         if( inLen > 0 ) {\n             /* More iterations to do; copy last part of \\\nfiltered signal to beginning of buffer */\n-            silk_memcpy( buf, &buf[ nSamplesIn << 1 ], \\\nRESAMPLER_ORDER_FIR_12 * sizeof( opus_int32 ) );\n+            silk_memmove( buf, &buf[ nSamplesIn << 1 ], \\\nRESAMPLER_ORDER_FIR_12 * sizeof( opus_int16 ) );\n         } else {\n             break;\n         }\n     }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "     /* Copy last part of filtered signal to the state for \\\nthe next call */\n-    silk_memcpy( S->sFIR, &buf[ nSamplesIn << 1 ], \\\nRESAMPLER_ORDER_FIR_12 * sizeof( opus_int32 ) );\n+    silk_memcpy( S->sFIR, &buf[ nSamplesIn << 1 ], \\\nRESAMPLER_ORDER_FIR_12 * sizeof( opus_int16 ) );\n }\n<CODE ENDS>",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6. Integer Wrap-Around in Inverse Gain Computation",
      "section_title": true,
      "ja": "6.整数ラップアラウンド逆ゲイン計算で"
    },
    {
      "indent": 3,
      "text": "It was discovered through decoder fuzzing that some bitstreams could produce integer values exceeding 32 bits in LPC_inverse_pred_gain_QA(), causing a wrap-around. The C standard considers this behavior as undefined. The following patch around line 87 of silk/LPC_inv_pred_gain.c detects values that do not fit in a 32-bit integer and considers the corresponding filters unstable:",
      "ja": "これは、ラップアラウンド引き起こし、一部のビットストリームはLPC_inverse_pred_gain_QAに32ビットを超える整数値を生成することができるデコーダ毛羽立ち（）を介して発見されました。 C標準では未定義として、この動作を考慮します。シルク/ LPC_inv_pred_gain.cのライン87の周りに次のパッチは、32ビットの整数に収まらない値を検出し、対応するフィルタが不安定に考えて："
    },
    {
      "indent": 2,
      "text": "<CODE BEGINS>\n         /* Update AR coefficient */\n         for( n = 0; n < k; n++ ) {\n-            tmp_QA = Aold_QA[ n ] - MUL32_FRAC_Q( \\\nAold_QA[ k - n - 1 ], rc_Q31, 31 );\n-            Anew_QA[ n ] = MUL32_FRAC_Q( tmp_QA, rc_mult2 , mult2Q );\n+            opus_int64 tmp64;\n+            tmp_QA = silk_SUB_SAT32( Aold_QA[ n ], MUL32_FRAC_Q( \\\nAold_QA[ k - n - 1 ], rc_Q31, 31 ) );\n+            tmp64 = silk_RSHIFT_ROUND64( silk_SMULL( tmp_QA, \\\nrc_mult2 ), mult2Q);\n+            if( tmp64 > silk_int32_MAX || tmp64 < silk_int32_MIN ) {\n+               return 0;\n+            }\n+            Anew_QA[ n ] = ( opus_int32 )tmp64;\n         }\n<CODE ENDS>",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7. Integer Wrap-Around in LSF Decoding",
      "section_title": true,
      "ja": "7.整数ラップアラウンドLSF復号化する際に"
    },
    {
      "indent": 3,
      "text": "It was discovered -- also from decoder fuzzing -- that an integer wrap-around could occur when decoding bitstreams with extremely large values for the high Line Spectral Frequency (LSF) parameters. The end result of the wrap-around is an illegal read access on the stack, which the authors do not believe is exploitable but should nonetheless be fixed. The following patch around line 137 of silk/ NLSF_stabilize.c prevents the problem:",
      "ja": "それが発見された - また、デコーダファジングから - 高線スペクトル周波数（LSF）パラメータの非常に大きな値とビットストリームを復号するとき整数ラップアラウンド発生する可能性があります。 - ラップアラウンドの最終結果は、著者が悪用可能であるが、それでも固定されなければならないとは考えていないスタック上の違法読み出しアクセス、です。シルク/ NLSF_stabilize.cの線137の周りに次のパッチは、この問題を回避します："
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n           /* Keep delta_min distance between the NLSFs */\n         for( i = 1; i < L; i++ )\n-            NLSF_Q15[i] = silk_max_int( NLSF_Q15[i], \\\nNLSF_Q15[i-1] + NDeltaMin_Q15[i] );\n+            NLSF_Q15[i] = silk_max_int( NLSF_Q15[i], \\\nsilk_ADD_SAT16( NLSF_Q15[i-1], NDeltaMin_Q15[i] ) );",
      "raw": true
    },
    {
      "indent": 3,
      "text": "         /* Last NLSF should be no higher than 1 - NDeltaMin[L] */\n<CODE ENDS>",
      "raw": true
    },
    {
      "indent": 0,
      "text": "8. Cap on Band Energy",
      "section_title": true,
      "ja": "バンドエネルギーに関する8.キャップ"
    },
    {
      "indent": 3,
      "text": "On extreme bitstreams, it is possible for log-domain band energy levels to exceed the maximum single-precision floating point value once converted to a linear scale. This would later cause the decoded values to be NaN (not a number), possibly causing problems in the software using the PCM values. This can be avoided with the following patch around line 552 of celt/quant_bands.c:",
      "ja": "極端なビットストリームには、対数ドメイン帯エネルギーレベルが一旦線形スケールに変換最大単精度浮動小数点値を超えることが可能です。これは、後に復号された値は、おそらくPCM値を使用してソフトウェアで問題が発生し、NaN（非数）であることを引き起こします。これはケルト/ quant_bands.cのライン552の周りに、次のパッチで回避できます。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n       {\n          opus_val16 lg = ADD16(oldEBands[i+c*m->nbEBands],\n                          SHL16((opus_val16)eMeans[i],6));\n+         lg = MIN32(QCONST32(32.f, 16), lg);\n          eBands[i+c*m->nbEBands] = PSHR32(celt_exp2(lg),4);\n       }\n       for (;i<m->nbEBands;i++)\n<CODE ENDS>",
      "raw": true
    },
    {
      "indent": 0,
      "text": "9. Hybrid Folding",
      "section_title": true,
      "ja": "9.ハイブリッド折りたたみ"
    },
    {
      "indent": 3,
      "text": "When encoding in hybrid mode at low bitrate, we sometimes only have enough bits to code a single Constrained-Energy Lapped Transform (CELT) band (8 - 9.6 kHz). When that happens, the second band (CELT band 18, from 9.6 - 12 kHz) cannot use folding because it is wider than the amount already coded and falls back to white noise. Because it can also happen on transients (e.g., stops), it can cause audible pre-echo.",
      "ja": "（ -  9.6キロヘルツ8）低ビットレートでハイブリッドモードで符号化する場合、我々は時々単一制約-エネルギーラップ処理変換（CELT）バンドをコーディングするのに十分なビットを有します。そのような場合、第2の帯域（9.6からCELTバンド18、 -  12キロヘルツ）は、既に符号化された量よりも広く、かつバックホワイトノイズに落ちるので、折り畳みを使用することはできません。それはまた、（例えば、停止）トランジェントに発生する可能性があるので、それは可聴プリエコーを引き起こす可能性があります。"
    },
    {
      "indent": 3,
      "text": "To address the issue, we change the folding behavior so that it is never forced to fall back to Linear Congruential Generator (LCG) due to the first band not containing enough coefficients to fold onto the second band. This is achieved by simply repeating part of the first band in the folding of the second band. This changes the code in celt/bands.c around line 1237:",
      "ja": "原因第2のバンド上に折り畳むのに十分な係数を含まない最初のバンドに戻って線形合同法（LCG）にフォールすることを強制されることはありませんように問題を解決するために、我々は、折りたたみ動作を変更します。これは、単に第2のバンドの折り畳みの最初のバンドの一部を繰り返すことによって達成されます。これは、ライン1237の周りのケルト/ bands.cにコードを変更します。"
    },
    {
      "indent": 2,
      "text": "<CODE BEGINS> b = 0; }",
      "ja": "B = 0 <CODEが開始します>。 }"
    },
    {
      "indent": 2,
      "text": "- if (resynth && M*eBands[i]-N >= M*eBands[start] && \\ (update_lowband || lowband_offset==0)) + if (resynth && (M*eBands[i]-N >= M*eBands[start] || \\ i==start+1) && (update_lowband || lowband_offset==0)) lowband_offset = i;",
      "ja": " - （resynth && M * eBands [I] -N> = M * eBands && \\（update_lowband || lowband_offset == 0）[開始]）+（resynth &&（M * eBands [I] -N> = Mであればなら* eBands [開始] || \\ I ==起動+ 1）&&（update_lowband || lowband_offset == 0））lowband_offset = I。"
    },
    {
      "indent": 2,
      "text": "+      if (i == start+1)\n+      {\n+         int n1, n2;\n+         int offset;\n+         n1 = M*(eBands[start+1]-eBands[start]);\n+         n2 = M*(eBands[start+2]-eBands[start+1]);\n+         offset = M*eBands[start];\n+         /* Duplicate enough of the first band folding data to \\\nbe able to fold the second band.\n+            Copies no data for CELT-only mode. */\n+         OPUS_COPY(&norm[offset+n1], &norm[offset+2*n1 - n2], n2-n1);\n+         if (C==2)\n+            OPUS_COPY(&norm2[offset+n1], &norm2[offset+2*n1 - n2], \\\nn2-n1);\n+      }\n+\n       tf_change = tf_res[i];\n       if (i>=m->effEBands)\n       {\n<CODE ENDS>",
      "raw": true
    },
    {
      "indent": 3,
      "text": "as well as around line 1260:",
      "ja": "同様に行1260周り："
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n          fold_start = lowband_offset;\n          while(M*eBands[--fold_start] > effective_lowband);\n          fold_end = lowband_offset-1;\n-         while(M*eBands[++fold_end] < effective_lowband+N);\n+         while(++fold_end < i && M*eBands[fold_end] < \\\neffective_lowband+N);\n          x_cm = y_cm = 0;\n          fold_i = fold_start; do {\n            x_cm |= collapse_masks[fold_i*C+0];",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 3,
      "text": "The fix does not impact compatibility, because the improvement does not depend on the encoder doing anything special. There is also no reasonable way for an encoder to use the original behavior to improve quality over the proposed change.",
      "ja": "改善が何か特別なことをやってエンコーダに依存しないので修正は、互換性に影響を与えません。提案された変更を超える品質を向上させるために、元の動作を使用するエンコーダのための合理的な方法もありません。"
    },
    {
      "indent": 0,
      "text": "10. Downmix to Mono",
      "section_title": true,
      "ja": "１０。 どｗんみｘ と もの"
    },
    {
      "indent": 3,
      "text": "The last issue is not strictly a bug, but it is an issue that has been reported when downmixing an Opus decoded stream to mono, whether this is done inside the decoder or as a post-processing step on the stereo decoder output. Opus intensity stereo allows optionally coding the two channels 180 degrees out of phase on a per-band basis. This provides better stereo quality than forcing the two channels to be in phase, but when the output is downmixed to mono, the energy in the affected bands is canceled, sometimes resulting in audible artifacts.",
      "ja": "最後の問題は、厳密にバグではありませんが、これはデコーダの内部やステレオデコーダ出力の後処理段階として行われているかどうか、オーパスはモノラルにストリームをデコードしダウンミックス時に報告されている問題です。オーパス強度ステレオは、必要に応じて毎バンドに基づいて二つのチャネル180度位相がずれコーディング可能。これは、位相となるように2つのチャネルを強制よりも良好なステレオ品質を提供するが、出力はモノラルにダウンミックスされた場合、影響を受けたバンドのエネルギーは、しばしば可聴アーチファクトを生じる、キャンセルされます。"
    },
    {
      "indent": 3,
      "text": "As a work-around for this issue, the decoder MAY choose not to apply the 180-degree phase shift. This can be useful when downmixing to mono inside or outside of the decoder (e.g., requested explicitly from an API).",
      "ja": "この問題の回避策として、デコーダは、180度の位相シフトを適用しないこともできます。 （例えば、APIから明示的に要求）デコーダの内部または外部にモノラルにダウンミックスするとき、これは有用であり得ます。"
    },
    {
      "indent": 0,
      "text": "11. New Test Vectors",
      "section_title": true,
      "ja": "11.新しいテストベクトル"
    },
    {
      "indent": 3,
      "text": "Changes in Sections 9 and 10 have sufficient impact on the test vectors to make them fail. For this reason, this document also updates the Opus test vectors. The new test vectors now include two decoded outputs for the same bitstream. The outputs with suffix 'm' do not apply the CELT 180-degree phase shift as allowed in Section 10, while the outputs without the suffix do. An implementation is compliant as long as it passes either set of vectors.",
      "ja": "セクション9と10の変更は、それらを失敗させるためのテストベクトルに対する十分な影響力を持っています。このため、この文書はまた、オーパス・テスト・ベクトルを更新します。新しいテストベクトルは現在、同じビットストリーム用の2つのデコード出力が含まれます。サフィックスを持つ出力が「M」サフィックスなしの出力はないが、セクション10で許可さCELT 180度の位相シフトを適用しません。実装は長い間、それはどちらか渡しベクトルの集合としてとして準拠しています。"
    },
    {
      "indent": 3,
      "text": "Any Opus implementation that passes either the original test vectors from RFC 6716 [RFC6716] or one of the new sets of test vectors is compliant with the Opus specification. However, newer implementations SHOULD be based on the new test vectors rather than the old ones.",
      "ja": "RFC 6716 [RFC6716]またはテストベクトルの新しいセットのいずれかから元のテストベクトルを通過する任意のオーパス実装はオーパス仕様に準拠しています。しかし、新しい実装では、新しいテストベクトルではなく、古いものに基づいている必要があります。"
    },
    {
      "indent": 3,
      "text": "The new test vectors are located at <https://www.ietf.org/proceedings/98/slides/materials-98-codec-opus-newvectors-00.tar.gz>. The SHA-1 hashes of the test vectors are:",
      "ja": "新しいテストベクトルは、<https://www.ietf.org/proceedings/98/slides/materials-98-codec-opus-newvectors-00.tar.gz>に位置しています。テストベクトルのSHA-1ハッシュです。"
    },
    {
      "indent": 3,
      "text": "e49b2862ceec7324790ed8019eb9744596d5be01 testvector01.bit b809795ae1bcd606049d76de4ad24236257135e0 testvector02.bit e0c4ecaeab44d35a2f5b6575cd996848e5ee2acc testvector03.bit a0f870cbe14ebb71fa9066ef3ee96e59c9a75187 testvector04.bit 9b3d92b48b965dfe9edf7b8a85edd4309f8cf7c8 testvector05.bit 28e66769ab17e17f72875283c14b19690cbc4e57 testvector06.bit bacf467be3215fc7ec288f29e2477de1192947a6 testvector07.bit ddbe08b688bbf934071f3893cd0030ce48dba12f testvector08.bit 3932d9d61944dab1201645b8eeaad595d5705ecb testvector09.bit 521eb2a1e0cc9c31b8b740673307c2d3b10c1900 testvector10.bit 6bc8f3146fcb96450c901b16c3d464ccdf4d5d96 testvector11.bit 338c3f1b4b97226bc60bc41038becbc6de06b28f testvector12.bit f5ef93884da6a814d311027918e9afc6f2e5c2c8 testvector01.dec 48ac1ff1995250a756e1e17bd32acefa8cd2b820 testvector02.dec d15567e919db2d0e818727092c0af8dd9df23c95 testvector03.dec 1249dd28f5bd1e39a66fd6d99449dca7a8316342 testvector04.dec b85675d81deef84a112c466cdff3b7aaa1d2fc76 testvector05.dec 55f0b191e90bfa6f98b50d01a64b44255cb4813e testvector06.dec 61e8b357ab090b1801eeb578a28a6ae935e25b7b testvector07.dec a58539ee5321453b2ddf4c0f2500e856b3966862 testvector08.dec bb96aad2cde188555862b7bbb3af6133851ef8f4 testvector09.dec 1b6cdf0413ac9965b16184b1bea129b5c0b2a37a testvector10.dec b1fff72b74666e3027801b29dbc48b31f80dee0d testvector11.dec 98e09bbafed329e341c3b4052e9c4ba5fc83f9b1 testvector12.dec 1e7d984ea3fbb16ba998aea761f4893fbdb30157 testvector01m.dec 48ac1ff1995250a756e1e17bd32acefa8cd2b820 testvector02m.dec d15567e919db2d0e818727092c0af8dd9df23c95 testvector03m.dec 1249dd28f5bd1e39a66fd6d99449dca7a8316342 testvector04m.dec d70b0bad431e7d463bc3da49bd2d49f1c6d0a530 testvector05m.dec 6ac1648c3174c95fada565161a6c78bdbe59c77d testvector06m.dec fc5e2f709693738324fb4c8bdc0dad6dda04e713 testvector07m.dec aad2ba397bf1b6a18e8e09b50e4b19627d479f00 testvector08m.dec 6feb7a7b9d7cdc1383baf8d5739e2a514bd0ba08 testvector09m.dec 1b6cdf0413ac9965b16184b1bea129b5c0b2a37a testvector10m.dec fd3d3a7b0dfbdab98d37ed9aa04b659b9fefbd18 testvector11m.dec 98e09bbafed329e341c3b4052e9c4ba5fc83f9b1 testvector12m.dec",
      "ja": "e49b2862ceec7324790ed8019eb9744596d5be01 testvector01.bit b809795ae1bcd606049d76de4ad24236257135e0 testvector02.bit e0c4ecaeab44d35a2f5b6575cd996848e5ee2acc testvector03.bit a0f870cbe14ebb71fa9066ef3ee96e59c9a75187 testvector04.bit 9b3d92b48b965dfe9edf7b8a85edd4309f8cf7c8 testvector05.bit 28e66769ab17e17f72875283c14b19690cbc4e57 testvector06.bit bacf467be3215fc7ec288f29e2477de1192947a6 testvector07.bit ddbe08b688bbf934071f3893cd0030ce48dba12f testvector08.bit 3932d9d61944dab1201645b8eeaad595d5705ecb testvector09.bit 521eb2a1e0cc9c31b8b740673307c2d3b10c1900 testvector10.bit 6bc8f3146fcb96450c901b16c3d464ccdf4d5d96 testvector11.bit 338c3f1b4b97226bc60bc41038becbc6de06b28f testvector12.bit f5ef93884da6a814d311027918e9afc6f2e5c2c8 testvector01 .dec 48ac1ff1995250a756e1e17bd32acefa8cd2b820 testvector02.dec d15567e919db2d0e818727092c0af8dd9df23c95 testvector03.dec 1249dd28f5bd1e39a66fd6d99449dca7a8316342 testvector04.dec b85675d81deef84a112c466cdff3b7aaa1d2fc76 testvector05.dec 55f0b191e90bfa 6f98b50d01a64b44255cb4813e testvector06.dec 61e8b357ab090b1801eeb578a28a6ae935e25b7b testvector07.dec a58539ee5321453b2ddf4c0f2500e856b3966862 testvector08.dec bb96aad2cde188555862b7bbb3af6133851ef8f4 testvector09.dec 1b6cdf0413ac9965b16184b1bea129b5c0b2a37a testvector10.dec b1fff72b74666e3027801b29dbc48b31f80dee0d testvector11.dec 98e09bbafed329e341c3b4052e9c4ba5fc83f9b1 testvector12.dec 1e7d984ea3fbb16ba998aea761f4893fbdb30157 testvector01m.dec 48ac1ff1995250a756e1e17bd32acefa8cd2b820 testvector02m.dec d15567e919db2d0e818727092c0af8dd9df23c95 testvector03m.dec 1249dd28f5bd1e39a66fd6d99449dca7a8316342 testvector04m.dec d70b0bad431e7d463bc3da49bd2d49f1c6d0a530 testvector05m.dec 6ac1648c3174c95fada565161a6c78bdbe59c77d testvector06m .dec fc5e2f709693738324fb4c8bdc0dad6dda04e713 testvector07m.dec aad2ba397bf1b6a18e8e09b50e4b19627d479f00 testvector08m.dec 6feb7a7b9d7cdc1383baf8d5739e2a514bd0ba08 testvector09m.dec 1b6cdf0413ac9965b16184b1bea129b5c0b2a37a testvector10m.dec fd3d3a7b0dfbdab98d 37ed9aa04b659b9fefbd18 testvector11m.dec 98e09bbafed329e341c3b4052e9c4ba5fc83f9b1 testvector12m.dec"
    },
    {
      "indent": 3,
      "text": "Note that the decoder input bitstream files (.bit) are unchanged.",
      "ja": "デコーダ入力ビットストリームファイル（のBIT）が変更されないことに注意してください。"
    },
    {
      "indent": 0,
      "text": "12. Security Considerations",
      "section_title": true,
      "ja": "12.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document fixes two security issues reported on Opus that affect the reference implementation in RFC 6716 [RFC6716]: CVE-2013-0899 <https://nvd.nist.gov/vuln/detail/CVE-2013-0899> and CVE-2017-0381 <https://nvd.nist.gov/vuln/detail/CVE-2017-0381>. CVE-2013-0899 theoretically could have caused an information leak. The leaked information would have gone through the decoder process before being accessible to the attacker. The update in Section 4 fixes this. CVE-2017-0381 could have resulted in a 16-bit out-of-bounds read from a fixed location. The update in Section 7 fixes this. Beyond the two fixed Common Vulnerabilities and Exposures (CVEs), this document adds no new security considerations beyond those in RFC 6716 [RFC6716].",
      "ja": "CVE-2013-0899 <https://nvd.nist.gov/vuln/detail/CVE-2013-0899>およびCVE-：この文書は、RFC 6716 [RFC6716]でのリファレンス実装に影響を与えるオーパスに報告された2つのセキュリティ問題を修正します2017-0381 <https://nvd.nist.gov/vuln/detail/CVE-2017-0381>。 CVE-2013-0899は、理論的に情報漏洩が発生することがありました。漏洩した情報は、攻撃者がアクセス可能になる前に復号化プロセスを経ています。第4節の修正これで更新。固定位置から読み出し範囲外のCVE-2017-0381は、16ビットをもたらしたかもしれません。第7節の修正これで更新。 2件の固定共通脆弱性（のCVE）を越えて、この文書はRFC 6716 [RFC6716]のものを超えた全く新しいセキュリティの考慮事項を追加しません。"
    },
    {
      "indent": 0,
      "text": "13. IANA Considerations",
      "section_title": true,
      "ja": "13. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document does not require any IANA actions.",
      "ja": "このドキュメントは、IANAのアクションを必要としません。"
    },
    {
      "indent": 0,
      "text": "14. Normative References",
      "section_title": true,
      "ja": "14.引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC6716] Valin, JM., Vos, K., and T. Terriberry, \"Definition of the Opus Audio Codec\", RFC 6716, DOI 10.17487/RFC6716, September 2012, <https://www.rfc-editor.org/info/rfc6716>.",
      "ja": "[RFC6716] Valinは、JM。、ヴォス、K.、およびT. Terriberry、 \"オーパスオーディオコーデックの定義\"、RFC 6716、DOI 10.17487 / RFC6716、2012年9月、<https://www.rfc-editor.org /情報/ rfc6716>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B.、 \"RFC 2119個のキーワードに小文字VS大文字の曖昧さ\"、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "We would like to thank Juri Aedla for reporting the issue with the parsing of the Opus padding. Thanks to Felicia Lim for reporting the LSF integer overflow issue. Also, thanks to Tina le Grand, Jonathan Lennox, and Mark Harris for their feedback on this document.",
      "ja": "私たちは、オーパスパディングの解析で問題を報告し樹里Aedlaに感謝したいと思います。 LSFの整数オーバーフローの問題を報告するためのフェリシア・リムに感謝します。また、このドキュメントの彼らのフィードバックのためのティナ・ル・グラン、ジョナサン・レノックス、そしてマーク・ハリスのおかげ。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Jean-Marc Valin Mozilla Corporation 331 E. Evelyn Avenue Mountain View, CA 94041 United States of America",
      "ja": "ジャンマルクValinはMozillaの株式会社331 E.イヴリン・アベニューカリフォルニア州マウンテンビューアメリカの94041米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 650 903-0800 Email: jmvalin@jmvalin.ca",
      "ja": "電話：+1 650 903-0800 Eメール：jmvalin@jmvalin.ca"
    },
    {
      "indent": 3,
      "text": "Koen Vos vocTone",
      "ja": "公園・ヴォスvocTone"
    },
    {
      "indent": 3,
      "text": "Email: koenvos74@gmail.com",
      "ja": "メール：koenvos74@gmail.com"
    }
  ]
}