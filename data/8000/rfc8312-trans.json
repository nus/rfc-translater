{
  "title": {
    "text": "RFC 8312 - CUBIC for Fast Long-Distance Networks",
    "ja": "RFC 8312 - 高速長距離ネットワーク用CUBIC"
  },
  "number": 8312,
  "created_at": "2019-10-30 01:30:40.828560+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                           I. Rhee\nRequest for Comments: 8312                                          NCSU\nCategory: Informational                                            L. Xu\nISSN: 2070-1721                                                      UNL\n                                                                   S. Ha\n                                                                Colorado\n                                                           A. Zimmermann",
      "raw": true
    },
    {
      "indent": 56,
      "text": "       L. Eggert\nR. Scheffenegger\n          NetApp\n   February 2018",
      "raw": true
    },
    {
      "indent": 17,
      "text": "CUBIC for Fast Long-Distance Networks",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "CUBIC is an extension to the current TCP standards. It differs from the current TCP standards only in the congestion control algorithm on the sender side. In particular, it uses a cubic function instead of a linear window increase function of the current TCP standards to improve scalability and stability under fast and long-distance networks. CUBIC and its predecessor algorithm have been adopted as defaults by Linux and have been used for many years. This document provides a specification of CUBIC to enable third-party implementations and to solicit community feedback through experimentation on the performance of CUBIC.",
      "ja": "CUBICは、現在のTCP規格を拡張したものです。それだけで、送信者側の輻輳制御アルゴリズムでは、現在のTCP規格とは異なります。特に、高速かつ長距離ネットワークの下で拡張性と安定性を向上させるために次関数の代わりに、現在のTCP規格のリニア窓の増加関数を使用しています。 CUBICとその前身のアルゴリズムは、Linuxでデフォルトとして採用されており、多くの年のために使用されています。この文書では、サードパーティの実装を可能にするとCUBICの性能に実験を通して、コミュニティからのフィードバックを募るためにCUBICの仕様を提供します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8312.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttps://www.rfc-editor.org/info/rfc8312で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2018 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（https://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n2. Conventions .....................................................3\n3. Design Principles of CUBIC ......................................4\n4. CUBIC Congestion Control ........................................6\n   4.1. Window Increase Function ...................................6\n   4.2. TCP-Friendly Region ........................................7\n   4.3. Concave Region .............................................8\n   4.4. Convex Region ..............................................8\n   4.5. Multiplicative Decrease ....................................8\n   4.6. Fast Convergence ...........................................9\n   4.7. Timeout ...................................................10\n   4.8. Slow Start ................................................10\n5. Discussion .....................................................10\n   5.1. Fairness to Standard TCP ..................................11\n   5.2. Using Spare Capacity ......................................13\n   5.3. Difficult Environments ....................................13\n   5.4. Investigating a Range of Environments .....................13\n   5.5. Protection against Congestion Collapse ....................14\n   5.6. Fairness within the Alternative Congestion Control\n        Algorithm .................................................14\n   5.7. Performance with Misbehaving Nodes and Outside Attackers ..14\n   5.8. Behavior for Application-Limited Flows ....................14\n   5.9. Responses to Sudden or Transient Events ...................14\n   5.10. Incremental Deployment ...................................14\n6. Security Considerations ........................................15\n7. IANA Considerations ............................................15\n8. References .....................................................15\n   8.1. Normative References ......................................15\n   8.2. Informative References ....................................16\nAcknowledgements ..................................................17\nAuthors' Addresses ................................................18",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The low utilization problem of TCP in fast long-distance networks is well documented in [K03] and [RFC3649]. This problem arises from a slow increase of the congestion window following a congestion event in a network with a large bandwidth-delay product (BDP). [HKLRX06] indicates that this problem is frequently observed even in the range of congestion window sizes over several hundreds of packets. This problem is equally applicable to all Reno-style TCP standards and their variants, including TCP-RENO [RFC5681], TCP-NewReno [RFC6582] [RFC6675], SCTP [RFC4960], and TFRC [RFC5348], which use the same linear increase function for window growth, which we refer to collectively as \"Standard TCP\" below.",
      "ja": "高速の長距離ネットワークにおけるTCPの使用率が低い問題はよく[K03]と[RFC3649]に記述されています。この問題は、大きな帯域幅遅延積（BDP）と、ネットワーク内の輻輳イベント以下の輻輳ウィンドウの緩慢な増加から生じます。 【HKLRX06この問題が頻繁にパケットの数百にわたって輻輳ウィンドウサイズの範囲内でも観察されることを示しています。この問題は、同じ線形を使用するTCP-RENO [RFC5681]を含むすべてのリノスタイルのTCP基準とその変種、TCP-NewRenoの[RFC6582] [RFC6675]、SCTP [RFC4960]、およびTFRC [RFC5348]にも同様に適用可能です私たちは、以下の「標準TCP」としてまとめて参照してください。これは、ウィンドウの成長のための機能を高めます。"
    },
    {
      "indent": 3,
      "text": "CUBIC, originally proposed in [HRX08], is a modification to the congestion control algorithm of Standard TCP to remedy this problem. This document describes the most recent specification of CUBIC. Specifically, CUBIC uses a cubic function instead of a linear window increase function of Standard TCP to improve scalability and stability under fast and long-distance networks.",
      "ja": "CUBICは、もともと[HRX08]で提案され、この問題を解決するための標準的なTCPの輻輳制御アルゴリズムの変形です。この文書では、CUBICの最新の仕様について説明します。具体的には、立方体は、高速かつ長距離ネットワーク下のスケーラビリティと安定性を向上させる代わりに、標準的なTCPの線形窓増加関数の三次関数を使用します。"
    },
    {
      "indent": 3,
      "text": "Binary Increase Congestion Control (BIC-TCP) [XHR04], a predecessor of CUBIC, was selected as the default TCP congestion control algorithm by Linux in the year 2005 and has been used for several years by the Internet community at large. CUBIC uses a similar window increase function as BIC-TCP and is designed to be less aggressive and fairer to Standard TCP in bandwidth usage than BIC-TCP while maintaining the strengths of BIC-TCP such as stability, window scalability, and RTT fairness. CUBIC has already replaced BIC-TCP as the default TCP congestion control algorithm in Linux and has been deployed globally by Linux. Through extensive testing in various Internet scenarios, we believe that CUBIC is safe for testing and deployment in the global Internet.",
      "ja": "バイナリ増加輻輳制御（BIC-TCP）[XHR04]、CUBICの前身は、2005年にLinuxがデフォルトのTCP輻輳制御アルゴリズムとして選ばれた、大規模のインターネットコミュニティによって、数年前から使用されてきました。キュービックはBIC-TCPと同様のウィンドウ増加関数を使用してそのような安定性、窓スケーラビリティ、及びRTT公平性としてBIC-TCPの強度を維持しつつ、BIC-TCPよりも帯域幅の使用に標準TCPに対してより積極的かつ公平であるように設計されています。 CUBICはすでにLinuxでのデフォルトのTCP輻輳制御アルゴリズムとしてBIC-TCPを交換しており、Linuxが世界的に展開されています。様々なインターネットのシナリオにおける広範なテストを通じて、我々はCUBICは、グローバルなインターネットでのテストと展開のために安全であると信じています。"
    },
    {
      "indent": 3,
      "text": "In the following sections, we first briefly explain the design principles of CUBIC, then provide the exact specification of CUBIC, and finally discuss the safety features of CUBIC following the guidelines specified in [RFC5033].",
      "ja": "次のセクションでは、まず簡単に、CUBICの設計原理を説明し、その後CUBICの正確な仕様を提供し、最後に[RFC5033]で指定されたガイドラインに従ってCUBICの安全機能を議論します。"
    },
    {
      "indent": 0,
      "text": "2. Conventions",
      "section_title": true,
      "ja": "2.表記"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. Design Principles of CUBIC",
      "section_title": true,
      "ja": "CUBIC 3.設計原理"
    },
    {
      "indent": 3,
      "text": "CUBIC is designed according to the following design principles:",
      "ja": "CUBICは、以下の設計原理に基づいて設計されています。"
    },
    {
      "indent": 6,
      "text": "Principle 1: For better network utilization and stability, CUBIC uses both the concave and convex profiles of a cubic function to increase the congestion window size, instead of using just a convex function.",
      "ja": "代わりにだけ凸関数を使用する、輻輳ウィンドウサイズを増加させるために、より良いネットワーク利用率と安定性のために、立方体の用途の両方キュービック関数の凹凸プロファイル：原理1。"
    },
    {
      "indent": 6,
      "text": "Principle 2: To be TCP-friendly, CUBIC is designed to behave like Standard TCP in networks with short RTTs and small bandwidth where Standard TCP performs well.",
      "ja": "原則2：TCPフレンドリーにするために、CUBICは短いのRTTおよびStandard TCPがうまく行って小さな帯域幅のネットワークで標準的なTCPのように動作するように設計されています。"
    },
    {
      "indent": 6,
      "text": "Principle 3: For RTT-fairness, CUBIC is designed to achieve linear bandwidth sharing among flows with different RTTs.",
      "ja": "原則3：RTT-公平性のため、CUBICが異なるのRTTとフロー間のリニア帯域幅共有を実現するために設計されています。"
    },
    {
      "indent": 6,
      "text": "Principle 4: CUBIC appropriately sets its multiplicative window decrease factor in order to balance between the scalability and convergence speed.",
      "ja": "原則4：キュービック適切スケーラビリティと収束速度とのバランスをとるために、その乗法窓低減ファクタを設定します。"
    },
    {
      "indent": 3,
      "text": "Principle 1: For better network utilization and stability, CUBIC [HRX08] uses a cubic window increase function in terms of the elapsed time from the last congestion event. While most alternative congestion control algorithms to Standard TCP increase the congestion window using convex functions, CUBIC uses both the concave and convex profiles of a cubic function for window growth. After a window reduction in response to a congestion event is detected by duplicate ACKs or Explicit Congestion Notification-Echo (ECN-Echo) ACKs [RFC3168], CUBIC registers the congestion window size where it got the congestion event as W_max and performs a multiplicative decrease of congestion window. After it enters into congestion avoidance, it starts to increase the congestion window using the concave profile of the cubic function. The cubic function is set to have its plateau at W_max so that the concave window increase continues until the window size becomes W_max. After that, the cubic function turns into a convex profile and the convex window increase begins. This style of window adjustment (concave and then convex) improves the algorithm stability while maintaining high network utilization [CEHRX07]. This is because the window size remains almost constant, forming a plateau around W_max where network utilization is deemed highest. Under steady state, most window size samples of CUBIC are close to W_max, thus promoting high network utilization and stability. Note that those congestion control algorithms using only convex functions to increase the congestion window size have the maximum increments around W_max, and thus introduce a large number of packet bursts around the saturation point of the network, likely causing frequent global loss synchronizations.",
      "ja": "原則1：より良いネットワーク使用率と安定性のために、CUBICは[HRX08]最後の輻輳イベントからの経過時間的に立方窓の増加関数を使用しています。標準TCP最も代替輻輳制御アルゴリズムは凸関数、立方体用途の両方ウィンドウ成長のためのキュービック関数の凹凸プロファイルを使用して輻輳ウィンドウを増やしつつ。輻輳イベントに応答して、ウィンドウの減少が重複ACKまたは明示的輻輳通知エコー（ECN-エコー）のACK [RFC3168]によって検出された後、立方体レジスタがW_maxとして輻輳イベントを持って、乗法減少を行う輻輳ウィンドウサイズ輻輳ウィンドウの。それは輻輳回避に入った後、それは次関数の凹状プロファイルを使用して輻輳ウィンドウが増加し始めます。三次関数は、ウィンドウサイズがW_maxなるまで凹型の窓上昇が続くようW_maxでその台地を持つように設定されています。その後、三次関数は凸形状になり、凸状の窓の増加が開始されます。 【CEHRX07】高いネットワーク使用率を維持しながら、ウィンドウ調整（凹状、次いで凸面）のこのスタイルは、アルゴリズムの安定性を向上させることができます。ウィンドウサイズは、ネットワークの使用率が最も高いとみなされるW_max周りの台地を形成し、ほぼ一定のままだからです。定常状態の下では、CUBICのほとんどのウィンドウサイズのサンプルは、このように高いネットワーク使用率と安定性を促進し、W_maxに近いです。輻輳ウィンドウサイズを増加させるためにのみ凸関数を使用してこれらの輻輳制御アルゴリズムはW_max周り最大増分を有することに留意されたいので、おそらく頻繁なグローバル損失同期を引き起こし、ネットワークの飽和点の周りのパケットバーストの多数を導入します。"
    },
    {
      "indent": 3,
      "text": "Principle 2: CUBIC promotes per-flow fairness to Standard TCP. Note that Standard TCP performs well under short RTT and small bandwidth (or small BDP) networks. There is only a scalability problem in networks with long RTTs and large bandwidth (or large BDP). An alternative congestion control algorithm to Standard TCP designed to be friendly to Standard TCP on a per-flow basis must operate to increase its congestion window less aggressively in small BDP networks than in large BDP networks. The aggressiveness of CUBIC mainly depends on the maximum window size before a window reduction, which is smaller in small BDP networks than in large BDP networks. Thus, CUBIC increases its congestion window less aggressively in small BDP networks than in large BDP networks. Furthermore, in cases when the cubic function of CUBIC increases its congestion window less aggressively than Standard TCP, CUBIC simply follows the window size of Standard TCP to ensure that CUBIC achieves at least the same throughput as Standard TCP in small BDP networks. We call this region where CUBIC behaves like Standard TCP, the \"TCP-friendly region\".",
      "ja": "原則2：CUBICは、標準TCPのフローごとの公平性を促進します。標準TCPが短いRTTと小さい帯域幅（又は小BDP）ネットワークの下で良好に機能することに留意されたいです。長いのRTTと広い帯域幅（または大BDP）とのネットワークでのみスケーラビリティの問題があります。フロー単位で標準のTCPに優しいように設計された標準TCPに代わる輻輳制御アルゴリズムは、大規模なBDPネットワークでより小さなBDPネットワークにあまり積極的に輻輳ウィンドウを増やすように動作する必要があります。 CUBICの攻撃性は、主に大規模なネットワークBDPよりも小さなBDPネットワークに小さい窓減少、前の最大ウィンドウサイズに依存します。したがって、立方体は、大規模ネットワークBDPよりも小さなBDPネットワークにあまり積極的に輻輳ウィンドウを増加させます。また、立方体のキュービック関数はあまり積極的に標準TCPよりも、その輻輳ウィンドウを増加させる場合には、立方体は単にキュービック小さなBDPネットワークにおいて標準TCPと少なくとも同じスループットを達成することを保証するために、標準的なTCPのウィンドウサイズを以下。私たちは、標準TCP、「TCPフレンドリー領域」のようなところCUBIC振る舞うこの地域を呼び出します。"
    },
    {
      "indent": 3,
      "text": "Principle 3: Two CUBIC flows with different RTTs have their throughput ratio linearly proportional to the inverse of their RTT ratio, where the throughput of a flow is approximately the size of its congestion window divided by its RTT. Specifically, CUBIC maintains a window increase rate independent of RTTs outside of the TCP-friendly region, and thus flows with different RTTs have similar congestion window sizes under steady state when they operate outside the TCP-friendly region. This notion of a linear throughput ratio is similar to that of Standard TCP under high statistical multiplexing environments where packet losses are independent of individual flow rates. However, under low statistical multiplexing environments, the throughput ratio of Standard TCP flows with different RTTs is quadratically proportional to the inverse of their RTT ratio [XHR04]. CUBIC always ensures the linear throughput ratio independent of the levels of statistical multiplexing. This is an improvement over Standard TCP. While there is no consensus on particular throughput ratios of different RTT flows, we believe that under wired Internet, use of a linear throughput ratio seems more reasonable than equal throughputs (i.e., the same throughput for flows with different RTTs) or a higher-order throughput ratio (e.g., a quadratical throughput ratio of Standard TCP under low statistical multiplexing environments).",
      "ja": "原則3：別のRTTを持つ2つのキュービックフローは、フローのスループットがほぼそのRTTで割った輻輳ウィンドウのサイズであり、それらのRTT比の逆数に直線的に比例それらのスループット比を有します。具体的には、立方体は、TCP向け領域の外側のRTTの窓上昇率の独立を維持し、従ってそれらはTCP向け領域外で動作するとき、定常状態下で同様の輻輳ウィンドウサイズを有する別のRTTと流れます。リニアスループット比のこの概念は、パケット損失が個々の流量の独立した高統計的多重化環境下で標準TCPと同様です。しかし、低い統計的多重化環境で、標準的なTCPのスループット率が異なるのRTTと流れるそれらのRTT比[XHR04]の逆数に二次比例します。 CUBICは常に、統計的多重化のレベルの線形スループット比の独立を保証します。これは、標準TCPの改良です。 RTTフロー異なるが、我々は、有線インターネットの下で、線形スループット比の使用は、等しいスループットより合理的と思われると信じているの特定のスループット比率のコンセンサスは存在しないが（すなわち、別のRTTを有するフローに対して同じスループット）または高次スループット比（例えば、低い統計多重環境下で標準のTCPのquadraticalスループット比）。"
    },
    {
      "indent": 3,
      "text": "Principle 4: To balance between the scalability and convergence speed, CUBIC sets the multiplicative window decrease factor to 0.7 while Standard TCP uses 0.5. While this improves the scalability of CUBIC, a side effect of this decision is slower convergence, especially under low statistical multiplexing environments. This design choice is following the observation that the author of",
      "ja": "原則4：標準TCPは0.5を使用しながら、0.7スケーラビリティと収束速度、立方体集合乗法窓減少率とのバランスをとります。これはCUBICのスケーラビリティが向上しますが、この決定の副作用は、特に低統計的多重化環境の下で、収束が遅いです。この設計上の選択は、作者のことを観察し、以下れます"
    },
    {
      "indent": 3,
      "text": "HighSpeed TCP (HSTCP) [RFC3649] has made along with other researchers (e.g., [GV02]): the current Internet becomes more asynchronous with less frequent loss synchronizations with high statistical multiplexing. Under this environment, even strict Multiplicative-Increase Multiplicative-Decrease (MIMD) can converge. CUBIC flows with the same RTT always converge to the same throughput independent of statistical multiplexing, thus achieving intra-algorithm fairness. We also find that under the environments with sufficient statistical multiplexing, the convergence speed of CUBIC flows is reasonable.",
      "ja": "高速TCP（HSTCP）[RFC3649]は他の研究者と一緒に（例えば、[GV02]）を行った：現在のインターネットは、高い統計的多重化とより少ない頻度の損失同期でより非同期になります。このような環境下であっても、厳密な乗法-増加乗法-減少（MIMD）が収束することができます。同じRTT立方体フローは常にこのようにイントラアルゴリズムの公平性を達成する、統計的多重化の同じスループット独立に収束します。また、十分な統計的多重化と環境の下で、CUBICフローの収束速度が合理的であることがわかります。"
    },
    {
      "indent": 0,
      "text": "4. CUBIC Congestion Control",
      "section_title": true,
      "ja": "4. CUBIC輻輳制御"
    },
    {
      "indent": 3,
      "text": "The unit of all window sizes in this document is segments of the maximum segment size (MSS), and the unit of all times is seconds. Let cwnd denote the congestion window size of a flow, and ssthresh denote the slow-start threshold.",
      "ja": "この文書に記載されているすべてのウィンドウサイズのユニットは、最大セグメントサイズ（MSS）のセグメントであり、そしてすべての時間の単位は秒です。 cwndはフローの輻輳ウィンドウサイズを示し、スロースタートしきい値を表すSSTHRESHしてみましょう。"
    },
    {
      "indent": 0,
      "text": "4.1. Window Increase Function",
      "section_title": true,
      "ja": "4.1. ウィンドウの増加関数"
    },
    {
      "indent": 3,
      "text": "CUBIC maintains the acknowledgment (ACK) clocking of Standard TCP by increasing the congestion window only at the reception of an ACK. It does not make any change to the fast recovery and retransmit of TCP, such as TCP-NewReno [RFC6582] [RFC6675]. During congestion avoidance after a congestion event where a packet loss is detected by duplicate ACKs or a network congestion is detected by ACKs with ECN-Echo flags [RFC3168], CUBIC changes the window increase function of Standard TCP. Suppose that W_max is the window size just before the window is reduced in the last congestion event.",
      "ja": "キュービックは、ACKの受信時に輻輳ウィンドウを増加させることにより、標準TCPの確認応答（ACK）クロックを維持します。このようなTCP-NewRenoの[RFC6582] [RFC6675]としてTCPの高速リカバリと再送信、に変更を行いません。パケットロスが重複ACKまたはネットワークの輻輳によって検出された輻輳イベントがECN-エコーフラグ[RFC3168]とのACKによって検出された後、輻輳回避の間、立方体は、標準TCPのウィンドウ増加関数を変更します。 W_maxは、ウィンドウが最後の輻輳イベントに減少する直前のウィンドウサイズであると仮定します。"
    },
    {
      "indent": 3,
      "text": "CUBIC uses the following window increase function:",
      "ja": "CUBICは、以下のウィンドウの増加関数を使用しています。"
    },
    {
      "indent": 7,
      "text": "W_cubic(t) = C*(t-K)^3 + W_max (Eq. 1)",
      "ja": "W_cubic（T）= C *（T-K）^ 3 + W_max（式1）"
    },
    {
      "indent": 3,
      "text": "where C is a constant fixed to determine the aggressiveness of window increase in high BDP networks, t is the elapsed time from the beginning of the current congestion avoidance, and K is the time period that the above function takes to increase the current window size to W_max if there are no further congestion events and is calculated using the following equation:",
      "ja": "Cは、高BDPネットワークにおけるウィンドウの増加の攻撃性を決定するために、固定された定数であり、tは現在の輻輳回避の開始からの経過時間であり、Kは、上記の機能は、現在のウィンドウサイズを増加するのにかかる時間でありますW_maxそこにはさらに混雑イベントはありませんし、次の式を用いて算出されている場合："
    },
    {
      "indent": 7,
      "text": "K = cubic_root(W_max*(1-beta_cubic)/C) (Eq. 2)",
      "ja": "K = cubic_root（W_max *（1-beta_cubic）/ C）（式2）"
    },
    {
      "indent": 3,
      "text": "where beta_cubic is the CUBIC multiplication decrease factor, that is, when a congestion event is detected, CUBIC reduces its cwnd to W_cubic(0)=W_max*beta_cubic. We discuss how we set beta_cubic in Section 4.5 and how we set C in Section 5.",
      "ja": "beta_cubic立方乗算低減ファクタであり、輻輳イベントが検出された場合、すなわち、立方体はW_cubicへのCWND（0）= W_max * beta_cubicを減少させます。私たちは、セクション4.5とどのように我々は第5節でCをセットにbeta_cubicを設定する方法について説明します。"
    },
    {
      "indent": 3,
      "text": "Upon receiving an ACK during congestion avoidance, CUBIC computes the window increase rate during the next RTT period using Eq. 1. It sets W_cubic(t+RTT) as the candidate target value of the congestion window, where RTT is the weighted average RTT calculated by Standard TCP.",
      "ja": "輻輳回避中にACKを受信すると、立方体は、式を使用して次のRTTの期間中にウィンドウの増加率を計算します。 1.これは、RTT標準TCPによって計算された加重平均RTTである輻輳ウィンドウの候補目標値としてW_cubic（T + RTT）を設定します。"
    },
    {
      "indent": 3,
      "text": "Depending on the value of the current congestion window size cwnd, CUBIC runs in three different modes.",
      "ja": "現在の輻輳ウィンドウサイズcwndを、3つの異なるモードで実行CUBICの値に応じて。"
    },
    {
      "indent": 3,
      "text": "1. The TCP-friendly region, which ensures that CUBIC achieves at least the same throughput as Standard TCP.",
      "ja": "1.キュービックは、少なくとも標準TCPと同じスループットを達成することを確実にするTCP向け領域。"
    },
    {
      "indent": 3,
      "text": "2. The concave region, if CUBIC is not in the TCP-friendly region and cwnd is less than W_max.",
      "ja": "CUBICは、TCPに優しい地域とのcwndでない場合2.凹型領域は、W_max未満です。"
    },
    {
      "indent": 3,
      "text": "3. The convex region, if CUBIC is not in the TCP-friendly region and cwnd is greater than W_max.",
      "ja": "CUBICは、TCPに優しい地域とのcwndにない場合3.凸領域は、W_maxよりも大きくなります。"
    },
    {
      "indent": 3,
      "text": "Below, we describe the exact actions taken by CUBIC in each region.",
      "ja": "以下では、各地域でCUBICで撮影した正確なアクションを記述する。"
    },
    {
      "indent": 0,
      "text": "4.2. TCP-Friendly Region",
      "section_title": true,
      "ja": "4.2.  TCPフレンドリーリージョン"
    },
    {
      "indent": 3,
      "text": "Standard TCP performs well in certain types of networks, for example, under short RTT and small bandwidth (or small BDP) networks. In these networks, we use the TCP-friendly region to ensure that CUBIC achieves at least the same throughput as Standard TCP.",
      "ja": "標準のTCPは、ネットワークの特定の種類、例えば、短いRTT及び狭い帯域幅（又は小BDP）ネットワーク下で良好に機能します。これらのネットワークでは、我々は、少なくともそのCUBIC達成せ、標準TCPと同じスループットを確保するために、TCPフレンドリーな地域を使用しています。"
    },
    {
      "indent": 3,
      "text": "The TCP-friendly region is designed according to the analysis described in [FHP00]. The analysis studies the performance of an Additive Increase and Multiplicative Decrease (AIMD) algorithm with an additive factor of alpha_aimd (segments per RTT) and a multiplicative factor of beta_aimd, denoted by AIMD(alpha_aimd, beta_aimd). Specifically, the average congestion window size of AIMD(alpha_aimd, beta_aimd) can be calculated using Eq. 3. The analysis shows that AIMD(alpha_aimd, beta_aimd) with alpha_aimd=3*(1-beta_aimd)/(1+beta_aimd) achieves the same average window size as Standard TCP that uses AIMD(1, 0.5).",
      "ja": "TCP向け領域は[FHP00]に記載の解析に基づいて設計されています。分析は、添加剤の増加とalpha_aimd（RTTごとのセグメント）の添加率とAIMD（alpha_aimd、beta_aimd）で表さbeta_aimdの乗算係数と乗算減少（AIMD）アルゴリズムの性能を研究しています。具体的には、AIMDの平均輻輳ウィンドウサイズ（alpha_aimd、beta_aimdは）式を用いて算出することができます。 3.分析は、AIMD alpha_aimd = 3 *（1-beta_aimd）と（alpha_aimd、beta_aimd）/（1 + beta_aimd）がAIMD（1、0.5）を使用する標準TCPと同じ平均ウィンドウサイズを達成することを示しています。"
    },
    {
      "indent": 7,
      "text": "AVG_W_aimd = [ alpha_aimd * (1+beta_aimd) /\n               (2*(1-beta_aimd)*p) ]^0.5 (Eq. 3)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Based on the above analysis, CUBIC uses Eq. 4 to estimate the window size W_est of AIMD(alpha_aimd, beta_aimd) with alpha_aimd=3*(1-beta_cubic)/(1+beta_cubic) and beta_aimd=beta_cubic, which achieves the same average window size as Standard TCP. When receiving an ACK in congestion avoidance (cwnd could be greater than or less than W_max), CUBIC checks whether W_cubic(t) is less than W_est(t). If so, CUBIC is in the TCP-friendly region and cwnd SHOULD be set to W_est(t) at each reception of an ACK.",
      "ja": "上記の分析に基づいて、CUBICは、式を使用しています。 4 alpha_aimd = 3 *（1-beta_cubic）/（+ beta_cubic 1）および標準TCPと同じ平均ウィンドウサイズを達成beta_aimd = beta_cubic、と（alpha_aimd、beta_aimd）AIMDのW_estウィンドウサイズを推定します。 W_cubic（t）はW_est（T）未満であるか否かキュービックチェックは、（CWNDがW_maxより大きいまたは小さいかもしれない）輻輳回避にACKを受信した場合。もしそうであれば、立方体は、TCP向け領域にあり、CWNDは、ACKの各受信時W_est（T）に設定されるべきです。"
    },
    {
      "indent": 7,
      "text": "W_est(t) = W_max*beta_cubic +\n            [3*(1-beta_cubic)/(1+beta_cubic)] * (t/RTT) (Eq. 4)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.3. Concave Region",
      "section_title": true,
      "ja": "4.3. 凹面リージョン"
    },
    {
      "indent": 3,
      "text": "When receiving an ACK in congestion avoidance, if CUBIC is not in the TCP-friendly region and cwnd is less than W_max, then CUBIC is in the concave region. In this region, cwnd MUST be incremented by (W_cubic(t+RTT) - cwnd)/cwnd for each received ACK, where W_cubic(t+RTT) is calculated using Eq. 1.",
      "ja": "輻輳回避にACKを受信した場合CUBICがTCP向け領域ではなく、CWNDがW_max未満である場合、次いでキュービックは、凹状領域です。この領域では、CWNDがインクリメントされなければならない（W_cubic（T + RTT） -  CWND）それぞれについて/ CWND W_cubic（T + RTT）は、式を用いて計算されるACKを受信しました。 1。"
    },
    {
      "indent": 0,
      "text": "4.4. Convex Region",
      "section_title": true,
      "ja": "4.4. 凸部"
    },
    {
      "indent": 3,
      "text": "When receiving an ACK in congestion avoidance, if CUBIC is not in the TCP-friendly region and cwnd is larger than or equal to W_max, then CUBIC is in the convex region. The convex region indicates that the network conditions might have been perturbed since the last congestion event, possibly implying more available bandwidth after some flow departures. Since the Internet is highly asynchronous, some amount of perturbation is always possible without causing a major change in available bandwidth. In this region, CUBIC is being very careful by very slowly increasing its window size. The convex profile ensures that the window increases very slowly at the beginning and gradually increases its increase rate. We also call this region the \"maximum probing phase\" since CUBIC is searching for a new W_max. In this region, cwnd MUST be incremented by (W_cubic(t+RTT) - cwnd)/cwnd for each received ACK, where W_cubic(t+RTT) is calculated using Eq. 1.",
      "ja": "輻輳回避にACKを受信した場合CUBICがTCP向け領域ではなく、CWNDがより大きい又はW_maxに等しい場合、次いでキュービックは凸領域です。凸部は、ネットワークの状態は、おそらくいくつかのフロー出発した後、より多くの利用可能な帯域幅を意味している、最後の輻輳イベント以来乱されている可能性がありますことを示しています。インターネットは非常に非同期なので、摂動のいくつかの量は、利用可能な帯域幅に大きな変化を生じさせることなく、常に可能です。この領域では、CUBICは、非常にゆっくりとそのウィンドウサイズを増加させることにより、非常に慎重にされています。凸状のプロファイルは、ウィンドウが最初に非常にゆっくりと増加し、徐々にその増加率を増加させることを保証します。我々はまた、この地域CUBICが新しいW_maxを探しているので、「最大プロービング・フェーズ」と呼びます。この領域では、CWNDがインクリメントされなければならない（W_cubic（T + RTT） -  CWND）それぞれについて/ CWND W_cubic（T + RTT）は、式を用いて計算されるACKを受信しました。 1。"
    },
    {
      "indent": 0,
      "text": "4.5. Multiplicative Decrease",
      "section_title": true,
      "ja": "4.5. 乗算減少"
    },
    {
      "indent": 3,
      "text": "When a packet loss is detected by duplicate ACKs or a network congestion is detected by ECN-Echo ACKs, CUBIC updates its W_max, cwnd, and ssthresh as follows. Parameter beta_cubic SHOULD be set to 0.7.",
      "ja": "パケット損失は、重複ACKによって検出されるか、次のようにネットワークの輻輳がECN-エコーのACK立方更新によってそのW_max、CWNDおよびSSTHRESHを検出された場合。パラメータbeta_cubicは0.7に設定されるべきです。"
    },
    {
      "indent": 6,
      "text": "W_max = cwnd; // save window size before reduction ssthresh = cwnd * beta_cubic; // new slow-start threshold ssthresh = max(ssthresh, 2); // threshold is at least 2 MSS cwnd = cwnd * beta_cubic; // window reduction",
      "ja": "W_max = CWND。 //削減SSTHRESH = CWND * beta_cubic前に、ウィンドウサイズを保存します。 //新しいスロースタートしきい値SSTHRESH = MAX（SSTHRESH、2）; //閾値は、少なくとも2 MSS CWND = CWND * beta_cubicあります。 //ウィンドウの削減"
    },
    {
      "indent": 3,
      "text": "A side effect of setting beta_cubic to a value bigger than 0.5 is slower convergence. We believe that while a more adaptive setting of beta_cubic could result in faster convergence, it will make the analysis of CUBIC much harder. This adaptive adjustment of beta_cubic is an item for the next version of CUBIC.",
      "ja": "0.5よりも大きな値にbeta_cubic設定の副作用はより遅い収束あります。私たちは、beta_cubicのより適応設定が速く収束につながる可能性がありながら、それはCUBICの解析がはるかに困難になりますと信じています。 beta_cubicのこの適応調整はCUBICの次のバージョンのためのアイテムです。"
    },
    {
      "indent": 0,
      "text": "4.6. Fast Convergence",
      "section_title": true,
      "ja": "4.6. 高速コンバージェンス"
    },
    {
      "indent": 3,
      "text": "To improve the convergence speed of CUBIC, we add a heuristic in CUBIC. When a new flow joins the network, existing flows in the network need to give up some of their bandwidth to allow the new flow some room for growth if the existing flows have been using all the bandwidth of the network. To speed up this bandwidth release by existing flows, the following mechanism called \"fast convergence\" SHOULD be implemented.",
      "ja": "CUBICの収束速度を向上させるために、我々はCUBICでヒューリスティックを追加します。新しいフローがネットワークに参加すると、ネットワーク内の既存のフローが既存のフローは、ネットワークのすべての帯域幅を使用している場合は、新しい流れに成長のためのいくつかのスペースを確保するために、その帯域幅の一部を放棄する必要があります。既存のフローによって、この帯域幅のリリースをスピードアップするには、「高速コンバージェンス」と呼ばれ、次のメカニズムが実装されるべきです。"
    },
    {
      "indent": 3,
      "text": "With fast convergence, when a congestion event occurs, before the window reduction of the congestion window, a flow remembers the last value of W_max before it updates W_max for the current congestion event. Let us call the last value of W_max to be W_last_max.",
      "ja": "それは現在の輻輳イベントのためW_maxを更新する前に高速コンバージェンスを使用すると、輻輳イベントが発生した場合、輻輳ウィンドウの窓の減少の前に、流れはW_maxの最後の値を記憶しています。私たちはW_last_maxするW_maxの最後の値を呼びましょう。"
    },
    {
      "indent": 6,
      "text": "if (W_max < W_last_max){ // should we make room for others W_last_max = W_max; // remember the last W_max W_max = W_max*(1.0+beta_cubic)/2.0; // further reduce W_max } else { W_last_max = W_max // remember the last W_max }",
      "ja": "（W_max <W_last_maxは）{//我々は他の人W_last_max = W_maxのための部屋を作る必要がある場合。 //覚えている最後のW_max W_max = W_max *（1.0 + beta_cubic）/2.0; //さらに他} W_maxを削減{W_last_max = W_max //覚えている最後のW_max}"
    },
    {
      "indent": 3,
      "text": "At a congestion event, if the current value of W_max is less than W_last_max, this indicates that the saturation point experienced by this flow is getting reduced because of the change in available bandwidth. Then we allow this flow to release more bandwidth by reducing W_max further. This action effectively lengthens the time for this flow to increase its congestion window because the reduced W_max forces the flow to have the plateau earlier. This allows more time for the new flow to catch up to its congestion window size.",
      "ja": "W_maxの現在値がW_last_max未満の場合、輻輳のイベントで、これはこの流れが経験した飽和点があるため、利用可能な帯域幅の変更により減少しつつあることを示しています。その後、我々は、この流れはさらにW_maxを減らすことによって、より多くの帯域幅を解放することができます。このアクションは、効果的に低減W_maxがプラトー以前持っている流れを強制するので、この流れは、その輻輳ウィンドウを増加させるための時間が長くなります。これは、その輻輳ウィンドウサイズに追いつくために、新しい流れのためのより多くの時間を確保できます。"
    },
    {
      "indent": 3,
      "text": "The fast convergence is designed for network environments with multiple CUBIC flows. In network environments with only a single CUBIC flow and without any other traffic, the fast convergence SHOULD be disabled.",
      "ja": "高速コンバージェンスは、複数のCUBICのフローとネットワーク環境のために設計されています。一つだけCUBIC流れとし、他のトラフィックのないネットワーク環境では、高速コンバージェンスを無効にする必要があります。"
    },
    {
      "indent": 0,
      "text": "4.7. Timeout",
      "section_title": true,
      "ja": "4.7. タイムアウト"
    },
    {
      "indent": 3,
      "text": "In case of timeout, CUBIC follows Standard TCP to reduce cwnd [RFC5681], but sets ssthresh using beta_cubic (same as in Section 4.5) that is different from Standard TCP [RFC5681].",
      "ja": "タイムアウトの場合には、立方体はCWND [RFC5681]を減少させるために、標準TCPに従うが、セットは、標準TCP [RFC5681]は異なるbeta_cubic（セクション4.5と同じ）を用いSSTHRESH。"
    },
    {
      "indent": 3,
      "text": "During the first congestion avoidance after a timeout, CUBIC increases its congestion window size using Eq. 1, where t is the elapsed time since the beginning of the current congestion avoidance, K is set to 0, and W_max is set to the congestion window size at the beginning of the current congestion avoidance.",
      "ja": "タイムアウト後の最初の輻輳回避の間、立方体は、式を使用して輻輳ウィンドウサイズを増加させます。図1に示すように、tは現在の輻輳回避の開始からの経過時間であり、Kは0に設定され、そしてW_maxは、現在の輻輳回避の開始時に輻輳ウィンドウサイズに設定されています。"
    },
    {
      "indent": 0,
      "text": "4.8. Slow Start",
      "section_title": true,
      "ja": "4.8. スロースタート"
    },
    {
      "indent": 3,
      "text": "CUBIC MUST employ a slow-start algorithm, when the cwnd is no more than ssthresh. Among the slow-start algorithms, CUBIC MAY choose the standard TCP slow start [RFC5681] in general networks, or the limited slow start [RFC3742] or hybrid slow start [HR08] for fast and long-distance networks.",
      "ja": "cwndがssthreshを以下であるとき、スロースタートアルゴリズムを採用しなければならないCUBIC。スロースタートアルゴリズムのうち、立方体高速かつ長距離ネットワークのための一般的なネットワークにおける標準TCPスロースタート[RFC5681]、または限定されたスロースタート[RFC3742]またはハイブリッドスロースタート[HR08]を選ぶかもしれません。"
    },
    {
      "indent": 3,
      "text": "In the case when CUBIC runs the hybrid slow start [HR08], it may exit the first slow start without incurring any packet loss and thus W_max is undefined. In this special case, CUBIC switches to congestion avoidance and increases its congestion window size using Eq. 1, where t is the elapsed time since the beginning of the current congestion avoidance, K is set to 0, and W_max is set to the congestion window size at the beginning of the current congestion avoidance.",
      "ja": "キュービックハイブリッドスロースタート[HR08]を実行した場合には、任意のパケット損失を招くことなく、最初のスロースタートを終了してもよく、したがってW_maxは未定義です。この特別な場合には、立方体スイッチ輻輳回避および式を使用して輻輳ウィンドウサイズを増加させます。図1に示すように、tは現在の輻輳回避の開始からの経過時間であり、Kは0に設定され、そしてW_maxは、現在の輻輳回避の開始時に輻輳ウィンドウサイズに設定されています。"
    },
    {
      "indent": 0,
      "text": "5. Discussion",
      "section_title": true,
      "ja": "5.ディスカッション"
    },
    {
      "indent": 3,
      "text": "In this section, we further discuss the safety features of CUBIC following the guidelines specified in [RFC5033].",
      "ja": "このセクションでは、我々はさらに、[RFC5033]で指定されたガイドラインに従ってCUBICの安全機能を議論します。"
    },
    {
      "indent": 3,
      "text": "With a deterministic loss model where the number of packets between two successive packet losses is always 1/p, CUBIC always operates with the concave window profile, which greatly simplifies the performance analysis of CUBIC. The average window size of CUBIC can be obtained by the following function:",
      "ja": "二つの連続するパケット損失との間のパケットの数は常に1 / Pである決定論的損失モデルと、立方体は常に大きくCUBICの性能解析を単純化する凹状のウィンドウプロファイルで動作します。 CUBICの平均ウィンドウのサイズは、以下の関数によって得ることができます。"
    },
    {
      "indent": 7,
      "text": "AVG_W_cubic = [C*(3+beta_cubic)/(4*(1-beta_cubic))]^0.25 *\n                (RTT^0.75) / (p^0.75) (Eq. 5)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "With beta_cubic set to 0.7, the above formula is reduced to:",
      "ja": "0.7に設定beta_cubicと、上記式をに低減されます。"
    },
    {
      "indent": 7,
      "text": "AVG_W_cubic = (C*3.7/1.2)^0.25 * (RTT^0.75) / (p^0.75) (Eq. 6)",
      "ja": "AVG_W_cubic =（C * 3.7 / 1.2）^ 0.25 *（RTT ^ 0.75）/（P ^ 0.75）（式6）"
    },
    {
      "indent": 3,
      "text": "We will determine the value of C in the following subsection using Eq. 6.",
      "ja": "私たちは、式を使用して、次のサブセクションでCの値を決定します。 6。"
    },
    {
      "indent": 0,
      "text": "5.1. Fairness to Standard TCP",
      "section_title": true,
      "ja": "5.1. 標準のTCPへの公正さ"
    },
    {
      "indent": 3,
      "text": "In environments where Standard TCP is able to make reasonable use of the available bandwidth, CUBIC does not significantly change this state.",
      "ja": "標準TCPは、利用可能な帯域幅の合理的な利用をすることができる環境では、CUBIC大幅にこの状態を変更しません。"
    },
    {
      "indent": 3,
      "text": "Standard TCP performs well in the following two types of networks:",
      "ja": "標準のTCPはネットワーク、次の2つのタイプにも実行されます。"
    },
    {
      "indent": 3,
      "text": "1. networks with a small bandwidth-delay product (BDP)",
      "section_title": true,
      "ja": "小さな帯域幅遅延積1.ネットワーク（BDP）"
    },
    {
      "indent": 3,
      "text": "2. networks with a short RTTs, but not necessarily a small BDP",
      "section_title": true,
      "ja": "2.短いのRTTを持つネットワーク、必ずしも必要ではないが、小さなBDP"
    },
    {
      "indent": 3,
      "text": "CUBIC is designed to behave very similarly to Standard TCP in the above two types of networks. The following two tables show the average window sizes of Standard TCP, HSTCP, and CUBIC. The average window sizes of Standard TCP and HSTCP are from [RFC3649]. The average window size of CUBIC is calculated using Eq. 6 and the CUBIC TCP-friendly region for three different values of C.",
      "ja": "CUBICは、ネットワークの上記2種類の標準TCPに非常に同様に動作するように設計されています。次の2つの表は、Standard TCP、HSTCP、およびCUBICの平均ウィンドウサイズを示しています。標準TCPとHSTCPの平均ウィンドウサイズは、[RFC3649]からのものです。 CUBICの平均ウィンドウサイズは、式を用いて計算されます。 6およびCの3つの異なる値についてCUBIC TCPフレンドリー地域"
    },
    {
      "indent": 3,
      "text": "+--------+----------+-----------+------------+-----------+----------+\n|   Loss |  Average |   Average |      CUBIC |     CUBIC |    CUBIC |\n| Rate P |    TCP W |   HSTCP W |   (C=0.04) |   (C=0.4) |    (C=4) |\n+--------+----------+-----------+------------+-----------+----------+\n|  10^-2 |       12 |        12 |         12 |        12 |       12 |\n|  10^-3 |       38 |        38 |         38 |        38 |       59 |\n|  10^-4 |      120 |       263 |        120 |       187 |      333 |\n|  10^-5 |      379 |      1795 |        593 |      1054 |     1874 |\n|  10^-6 |     1200 |     12279 |       3332 |      5926 |    10538 |\n|  10^-7 |     3795 |     83981 |      18740 |     33325 |    59261 |\n|  10^-8 |    12000 |    574356 |     105383 |    187400 |   333250 |\n+--------+----------+-----------+------------+-----------+----------+",
      "raw": true
    },
    {
      "indent": 34,
      "text": "Table 1",
      "ja": "表1"
    },
    {
      "indent": 3,
      "text": "Table 1 describes the response function of Standard TCP, HSTCP, and CUBIC in networks with RTT = 0.1 seconds. The average window size is in MSS-sized segments.",
      "ja": "表1は、= 0.1秒のRTTを有するネットワークにおける標準TCP、HSTCP、立方晶の応答関数を記述する。平均ウィンドウのサイズは、MSSサイズのセグメントです。"
    },
    {
      "indent": 3,
      "text": "+--------+-----------+-----------+------------+-----------+---------+\n|   Loss |   Average |   Average |      CUBIC |     CUBIC |   CUBIC |\n| Rate P |     TCP W |   HSTCP W |   (C=0.04) |   (C=0.4) |   (C=4) |\n+--------+-----------+-----------+------------+-----------+---------+\n|  10^-2 |        12 |        12 |         12 |        12 |      12 |\n|  10^-3 |        38 |        38 |         38 |        38 |      38 |\n|  10^-4 |       120 |       263 |        120 |       120 |     120 |\n|  10^-5 |       379 |      1795 |        379 |       379 |     379 |\n|  10^-6 |      1200 |     12279 |       1200 |      1200 |    1874 |\n|  10^-7 |      3795 |     83981 |       3795 |      5926 |   10538 |\n|  10^-8 |     12000 |    574356 |      18740 |     33325 |   59261 |\n+--------+-----------+-----------+------------+-----------+---------+",
      "raw": true
    },
    {
      "indent": 34,
      "text": "Table 2",
      "ja": "表2"
    },
    {
      "indent": 3,
      "text": "Table 2 describes the response function of Standard TCP, HSTCP, and CUBIC in networks with RTT = 0.01 seconds. The average window size is in MSS-sized segments.",
      "ja": "表2は、= 0.01秒のRTTを有するネットワークにおける標準TCP、HSTCP、立方晶の応答関数を記述する。平均ウィンドウのサイズは、MSSサイズのセグメントです。"
    },
    {
      "indent": 3,
      "text": "Both tables show that CUBIC with any of these three C values is more friendly to TCP than HSTCP, especially in networks with a short RTT where TCP performs reasonably well. For example, in a network with RTT = 0.01 seconds and p=10^-6, TCP has an average window of 1200 packets. If the packet size is 1500 bytes, then TCP can achieve an average rate of 1.44 Gbps. In this case, CUBIC with C=0.04 or C=0.4 achieves exactly the same rate as Standard TCP, whereas HSTCP is about ten times more aggressive than Standard TCP.",
      "ja": "両方のテーブルは、これらの3つのCの値のいずれかとキュービックは、特にTCPは、合理的に実行短いRTTを有するネットワークにおいて、HSTCPよりTCPがより友好的であることを示しています。例えば、RTT = 0.01秒であり、p = 10 ^ -6を有するネットワークにおいて、TCP 1200のパケットの平均窓を有しています。パケットサイズが1500バイトである場合、TCPは1.44 Gbpsの平均レートを達成することができます。 HSTCP標準TCPよりも約10倍、より積極的であるのに対し、この場合、C立方体= 0.04又はC = 0.4は、標準TCPと全く同じ速度を達成します。"
    },
    {
      "indent": 3,
      "text": "We can see that C determines the aggressiveness of CUBIC in competing with other congestion control algorithms for bandwidth. CUBIC is more friendly to Standard TCP, if the value of C is lower. However, we do not recommend setting C to a very low value like 0.04, since CUBIC with a low C cannot efficiently use the bandwidth in long RTT and high-bandwidth networks. Based on these observations and our experiments, we find C=0.4 gives a good balance between TCP-friendliness and aggressiveness of window increase. Therefore, C SHOULD be set to 0.4. With C set to 0.4, Eq. 6 is reduced to:",
      "ja": "私たちは、Cは、帯域幅のために、他の輻輳制御アルゴリズムと競合してCUBICの攻撃性を決定していることがわかります。 Cの値が低い場合CUBICは、標準TCPにより優しいです。しかし、我々は効率的に長いRTTと高帯域幅のネットワークで帯域幅を使用することはできません低いCとCUBIC以来、0.04のように非常に低い値にCを設定することはお勧めしません。これらの観察と実験に基づいて、我々はC = 0.4は、ウィンドウの増加のTCP-親しみやすさと攻撃性の間の良好なバランスを与える見つけます。このため、Cは0.4に設定されるべきです。 Cで0.4、式に設定されます。 6はに縮小されています。"
    },
    {
      "indent": 6,
      "text": "AVG_W_cubic = 1.054 * (RTT^0.75) / (p^0.75) (Eq. 7)",
      "ja": "AVG_W_cubic = 1.054 *（RTT ^ 0.75）/（P ^ 0.75）（式7）"
    },
    {
      "indent": 3,
      "text": "Eq. 7 is then used in the next subsection to show the scalability of CUBIC.",
      "ja": "式。 7は、その後、CUBICのスケーラビリティを示すために、次のサブセクションで使用されています。"
    },
    {
      "indent": 0,
      "text": "5.2. Using Spare Capacity",
      "section_title": true,
      "ja": "5.2. 予備の容量を使用します"
    },
    {
      "indent": 3,
      "text": "CUBIC uses a more aggressive window increase function than Standard TCP under long RTT and high-bandwidth networks.",
      "ja": "CUBICは、長いRTTの下で標準的なTCPおよび高帯域幅のネットワークよりも、より積極的な窓の増加関数を使用しています。"
    },
    {
      "indent": 3,
      "text": "The following table shows that to achieve the 10 Gbps rate, Standard TCP requires a packet loss rate of 2.0e-10, while CUBIC requires a packet loss rate of 2.9e-8.",
      "ja": "以下の表は、標準TCP、10Gbpsの速度を達成することを示しているキュービックが2.9E-8のパケット損失率を必要とする、2.0E-10のパケットロス率を必要とします。"
    },
    {
      "indent": 6,
      "text": "+------------------+-----------+---------+---------+---------+\n| Throughput(Mbps) | Average W | TCP P   | HSTCP P | CUBIC P |\n+------------------+-----------+---------+---------+---------+\n|                1 |       8.3 | 2.0e-2  | 2.0e-2  | 2.0e-2  |\n|               10 |      83.3 | 2.0e-4  | 3.9e-4  | 2.9e-4  |\n|              100 |     833.3 | 2.0e-6  | 2.5e-5  | 1.4e-5  |\n|             1000 |    8333.3 | 2.0e-8  | 1.5e-6  | 6.3e-7  |\n|            10000 |   83333.3 | 2.0e-10 | 1.0e-7  | 2.9e-8  |\n+------------------+-----------+---------+---------+---------+",
      "raw": true
    },
    {
      "indent": 34,
      "text": "Table 3",
      "ja": "表3"
    },
    {
      "indent": 3,
      "text": "Table 3 describes the required packet loss rate for Standard TCP, HSTCP, and CUBIC to achieve a certain throughput. We use 1500-byte packets and an RTT of 0.1 seconds.",
      "ja": "表3は、標準TCP、HSTCP、および特定のスループットを達成する立方ために必要なパケット損失率を記載しています。当社は、1500バイトのパケットと0.1秒のRTTを使用します。"
    },
    {
      "indent": 3,
      "text": "Our test results in [HKLRX06] indicate that CUBIC uses the spare bandwidth left unused by existing Standard TCP flows in the same bottleneck link without taking away much bandwidth from the existing flows.",
      "ja": "[HKLRX06]における当社のテスト結果は、CUBIC標準TCPは、既存のフローから多くの帯域幅を奪うことなく、同じボトルネックリンクに流れ、既存で未使用のスペアの帯域幅を使用していることを示しています。"
    },
    {
      "indent": 0,
      "text": "5.3. Difficult Environments",
      "section_title": true,
      "ja": "5.3. 困難な環境"
    },
    {
      "indent": 3,
      "text": "CUBIC is designed to remedy the poor performance of TCP in fast and long-distance networks.",
      "ja": "CUBICは、高速かつ長距離ネットワークにおけるTCPのパフォーマンスの低下を改善するために設計されています。"
    },
    {
      "indent": 0,
      "text": "5.4. Investigating a Range of Environments",
      "section_title": true,
      "ja": "5.4. 環境の範囲を調査"
    },
    {
      "indent": 3,
      "text": "CUBIC has been extensively studied by using both NS-2 simulation and test-bed experiments covering a wide range of network environments. More information can be found in [HKLRX06].",
      "ja": "キュービックは広範囲NS-2シミュレーション及びネットワーク環境の広い範囲をカバーするテストベッド実験の両方を使用して研究されてきました。詳しくは、[HKLRX06]に見出すことができます。"
    },
    {
      "indent": 3,
      "text": "Same as Standard TCP, CUBIC is a loss-based congestion control algorithm. Because CUBIC is designed to be more aggressive (due to a faster window increase function and bigger multiplicative decrease factor) than Standard TCP in fast and long-distance networks, it can fill large drop-tail buffers more quickly than Standard TCP and increase the risk of a standing queue [KWAF17]. In this case, proper queue sizing and management [RFC7567] could be used to reduce the packet queuing delay.",
      "ja": "標準のTCPと同じ、CUBICは損失ベースの輻輳制御アルゴリズムです。 CUBICは、高速かつ長距離ネットワークに標準TCPよりも（これは速いの窓増加関数と大きな乗算減少量）がより積極的になるように設計されているので、それはより速く、標準TCPよりも大きなドロップテールバッファを記入し、リスクを増大させることができます[KWAF17]スタンディングキューの。この場合、適切なキューのサイズ設定と管理[RFC7567]はキューイング遅延、パケットを減らすために使用することができます。"
    },
    {
      "indent": 0,
      "text": "5.5. Protection against Congestion Collapse",
      "section_title": true,
      "ja": "5.5. 輻輳崩壊に対する保護"
    },
    {
      "indent": 3,
      "text": "With regard to the potential of causing congestion collapse, CUBIC behaves like Standard TCP since CUBIC modifies only the window adjustment algorithm of TCP. Thus, it does not modify the ACK clocking and Timeout behaviors of Standard TCP.",
      "ja": "TCPの輻輳崩壊立方修正ので、標準TCPのようなキュービック振る舞うのみウィンドウ調整アルゴリズムを引き起こす可能性に関して。したがって、ACKクロッキングとStandard TCPのタイムアウト動作を変更しません。"
    },
    {
      "indent": 0,
      "text": "5.6. Fairness within the Alternative Congestion Control Algorithm",
      "section_title": true,
      "ja": "5.6. 代替の輻輳制御アルゴリズム内の公平性の"
    },
    {
      "indent": 3,
      "text": "CUBIC ensures convergence of competing CUBIC flows with the same RTT in the same bottleneck links to an equal throughput. When competing flows have different RTTs, their throughput ratio is linearly proportional to the inverse of their RTT ratios. This is true independent of the level of statistical multiplexing in the link.",
      "ja": "キュービックは、等しいスループットに同じボトルネックリンクで同じRTT立方体フロー競合の収束を保証します。競合フローが異なるのRTTを有する場合、そのスループットの比は、それらのRTT比の逆数に直線的に比例します。これは、リンク内の統計多重のレベルの真の独立しています。"
    },
    {
      "indent": 0,
      "text": "5.7. Performance with Misbehaving Nodes and Outside Attackers",
      "section_title": true,
      "ja": "5.7. ふらちなノードおよび外部の攻撃者によるパフォーマンス"
    },
    {
      "indent": 3,
      "text": "This is not considered in the current CUBIC.",
      "ja": "これは、現在のCUBICでは考慮されていません。"
    },
    {
      "indent": 0,
      "text": "5.8. Behavior for Application-Limited Flows",
      "section_title": true,
      "ja": "5.8. アプリケーションが制限されたフローのための行動"
    },
    {
      "indent": 3,
      "text": "CUBIC does not raise its congestion window size if the flow is currently limited by the application instead of the congestion window. In case of long periods when cwnd has not been updated due to the application rate limit, such as idle periods, t in Eq. 1 MUST NOT include these periods; otherwise, W_cubic(t) might be very high after restarting from these periods.",
      "ja": "フローは、現在のアプリケーションの代わりに、輻輳ウィンドウによって制限されている場合は、その輻輳ウィンドウサイズを上昇させないCUBIC。 CWNDは、アイドル期間、式中tと、アプリケーションによるレート制限に更新されていない長期間の場合。図1は、これらの期間を含めることはできません。それ以外の場合は、W_cubic（t）は、これらの期間から再起動した後に、非常に高いかもしれません。"
    },
    {
      "indent": 0,
      "text": "5.9. Responses to Sudden or Transient Events",
      "section_title": true,
      "ja": "5.9. 突然または一時的事象への対応"
    },
    {
      "indent": 3,
      "text": "If there is a sudden congestion, a routing change, or a mobility event, CUBIC behaves the same as Standard TCP.",
      "ja": "突然の渋滞、ルーティングの変更、またはモビリティ・イベントがある場合は、CUBICは、Standard TCPと同じように動作します。"
    },
    {
      "indent": 0,
      "text": "5.10. Incremental Deployment",
      "section_title": true,
      "ja": "5.10. インクリメンタル展開"
    },
    {
      "indent": 3,
      "text": "CUBIC requires only the change of TCP senders, and it does not make any changes to TCP receivers. That is, a CUBIC sender works correctly with the Standard TCP receivers. In addition, CUBIC does not require any changes to the routers and does not require any assistance from the routers.",
      "ja": "CUBICは、TCPの送信者の変更のみを必要とし、それがTCP受信機は変更されません。それはCUBIC送信者は、標準TCP受信機で正しく動作、です。また、CUBICは、ルータへの変更を必要とせず、ルータからの支援を必要としません。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This proposal makes no changes to the underlying security of TCP. More information about TCP security concerns can be found in [RFC5681].",
      "ja": "この提案は、TCPの基本的なセキュリティを変更しません。 TCPのセキュリティ上の問題の詳細については、[RFC5681]で見つけることができます。"
    },
    {
      "indent": 0,
      "text": "7. IANA Considerations",
      "section_title": true,
      "ja": "7. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document does not require any IANA actions.",
      "ja": "このドキュメントは、IANAのアクションを必要としません。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8.参照文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, DOI 10.17487/RFC3168, September 2001, <https://www.rfc-editor.org/info/rfc3168>.",
      "ja": "\"IPへの明示的輻輳通知の追加（ECN）\" [RFC3168]ラマクリシュナン、K.、フロイド、S.、およびD.ブラック、RFC 3168、DOI 10.17487 / RFC3168、2001年9月、<https：//でWWW。 rfc-editor.org/info/rfc3168>。"
    },
    {
      "indent": 3,
      "text": "[RFC3649] Floyd, S., \"HighSpeed TCP for Large Congestion Windows\", RFC 3649, DOI 10.17487/RFC3649, December 2003, <https://www.rfc-editor.org/info/rfc3649>.",
      "ja": "[RFC3649]フロイド、S.、 \"大混雑Windows用の高速TCP\"、RFC 3649、DOI 10.17487 / RFC3649、2003年12月、<https://www.rfc-editor.org/info/rfc3649>。"
    },
    {
      "indent": 3,
      "text": "[RFC3742] Floyd, S., \"Limited Slow-Start for TCP with Large Congestion Windows\", RFC 3742, DOI 10.17487/RFC3742, March 2004, <https://www.rfc-editor.org/info/rfc3742>.",
      "ja": "[RFC3742]フロイド、S.、 \"大混雑のWindowsとのTCPのための限定スロースタート\"、RFC 3742、DOI 10.17487 / RFC3742、2004年3月、<https://www.rfc-editor.org/info/rfc3742>。"
    },
    {
      "indent": 3,
      "text": "[RFC4960] Stewart, R., Ed., \"Stream Control Transmission Protocol\", RFC 4960, DOI 10.17487/RFC4960, September 2007, <https://www.rfc-editor.org/info/rfc4960>.",
      "ja": "[RFC4960]スチュワート、R.、エド。、 \"ストリーム制御伝送プロトコル\"、RFC 4960、DOI 10.17487 / RFC4960、2007年9月、<https://www.rfc-editor.org/info/rfc4960>。"
    },
    {
      "indent": 3,
      "text": "[RFC5033] Floyd, S. and M. Allman, \"Specifying New Congestion Control Algorithms\", BCP 133, RFC 5033, DOI 10.17487/RFC5033, August 2007, <https://www.rfc-editor.org/info/rfc5033>.",
      "ja": "[RFC5033]フロイド、S.、およびM.オールマン、 \"新しい輻輳制御アルゴリズムの指定\"、BCP 133、RFC 5033、DOI 10.17487 / RFC5033、2007年8月、<https://www.rfc-editor.org/info/rfc5033 >。"
    },
    {
      "indent": 3,
      "text": "[RFC5348] Floyd, S., Handley, M., Padhye, J., and J. Widmer, \"TCP Friendly Rate Control (TFRC): Protocol Specification\", RFC 5348, DOI 10.17487/RFC5348, September 2008, <https://www.rfc-editor.org/info/rfc5348>.",
      "ja": "[RFC5348]フロイド、S.、ハンドレー、M.、Padhye、J.、およびJ.ウィトマー、 \"TCPフレンドリーレート制御（TFRC）：プロトコル仕様\"、RFC 5348、DOI 10.17487 / RFC5348、2008年9月<HTTPS： //www.rfc-editor.org/info/rfc5348>。"
    },
    {
      "indent": 3,
      "text": "[RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009, <https://www.rfc-editor.org/info/rfc5681>.",
      "ja": "[RFC5681]オールマン、M.、パクソン、V.、およびE.ブラントン、 \"TCP輻輳制御\"、RFC 5681、DOI 10.17487 / RFC5681、2009年9月、<https://www.rfc-editor.org/info/ rfc5681>。"
    },
    {
      "indent": 3,
      "text": "[RFC6582] Henderson, T., Floyd, S., Gurtov, A., and Y. Nishida, \"The NewReno Modification to TCP's Fast Recovery Algorithm\", RFC 6582, DOI 10.17487/RFC6582, April 2012, <https://www.rfc-editor.org/info/rfc6582>.",
      "ja": "[RFC6582]ヘンダーソン、T.、フロイド、S.、Gurtov、A.、およびY.西田、 \"TCPの速い回復アルゴリズムへのNewRenoの変更\"、RFC 6582、DOI 10.17487 / RFC6582、2012年4月、<https：//でwww.rfc-editor.org/info/rfc6582>。"
    },
    {
      "indent": 3,
      "text": "[RFC6675] Blanton, E., Allman, M., Wang, L., Jarvinen, I., Kojo, M., and Y. Nishida, \"A Conservative Loss Recovery Algorithm Based on Selective Acknowledgment (SACK) for TCP\", RFC 6675, DOI 10.17487/RFC6675, August 2012, <https://www.rfc-editor.org/info/rfc6675>.",
      "ja": "[RFC6675]ブラントン、E.、オールマン、M.、王、L.、Jarvinen、I.、古城、M.、およびY.西田、 \"TCPのための選択的確認応答（SACK）に基づいて、保存的損失回復アルゴリズム\"、 RFC 6675、DOI 10.17487 / RFC6675、2012年8月、<https://www.rfc-editor.org/info/rfc6675>。"
    },
    {
      "indent": 3,
      "text": "[RFC7567] Baker, F., Ed. and G. Fairhurst, Ed., \"IETF Recommendations Regarding Active Queue Management\", BCP 197, RFC 7567, DOI 10.17487/RFC7567, July 2015, <https://www.rfc-editor.org/info/rfc7567>.",
      "ja": "[RFC7567]ベーカー、F.、エド。そして、G. Fairhurst、エド。、 \"アクティブキュー管理に関するIETF勧告\"、BCP 197、RFC 7567、DOI 10.17487 / RFC7567、2015年7月、<https://www.rfc-editor.org/info/rfc7567>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B.、 \"RFC 2119個のキーワードに小文字VS大文字の曖昧さ\"、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[CEHRX07] Cai, H., Eun, D., Ha, S., Rhee, I., and L. Xu, \"Stochastic Ordering for Internet Congestion Control and its Applications\", In Proceedings of IEEE INFOCOM, DOI 10.1109/INFCOM.2007.111, May 2007.",
      "ja": "IEEE INFOCOM、DOI 10.1109 / INFCOMの議事録において【CEHRX07]カイ、H.、ウン、D.、ハ、S.、李、I.、およびL.徐、 \"インターネット輻輳制御とその応用のための確率論的順序\"、 .2007.111、2007年5月。"
    },
    {
      "indent": 3,
      "text": "[FHP00] Floyd, S., Handley, M., and J. Padhye, \"A Comparison of Equation-Based and AIMD Congestion Control\", May 2000.",
      "ja": "【FHP00]フロイド、S.、ハンドレー、M.、およびJ. Padhye、 \"式ベースおよびAIMD輻輳制御の比較\"、2000年5月。"
    },
    {
      "indent": 3,
      "text": "[GV02] Gorinsky, S. and H. Vin, \"Extended Analysis of Binary Adjustment Algorithms\", Technical Report TR2002-29, Department of Computer Sciences, The University of Texas at Austin, August 2002.",
      "ja": "[GV02] Gorinsky、S.およびH.ヴィン、「バイナリ調整アルゴリズムの拡張分析」、技術報告書TR2002-29、コンピュータ科学科、オースチン、2002年8月のテキサス大学。"
    },
    {
      "indent": 3,
      "text": "[HKLRX06] Ha, S., Kim, Y., Le, L., Rhee, I., and L. Xu, \"A Step toward Realistic Performance Evaluation of High-Speed TCP Variants\", International Workshop on Protocols for Fast Long-Distance Networks.",
      "ja": "[HKLRX06]ハ、S.、キム、Y.、ル、L.、李承晩、I.、およびL.徐、「高速TCP変異体の現実的な性能評価に向けたステップ」、高速ロングのためのプロトコルに関する国際ワークショップ-Distanceネットワーク。"
    },
    {
      "indent": 3,
      "text": "[HR08] Ha, S. and I. Rhee, \"Hybrid Slow Start for High-Bandwidth and Long-Distance Networks\", International Workshop on Protocols for Fast Long-Distance Networks.",
      "ja": "[HR08]ハ、S.およびI.李承晩、「高帯域幅と長距離ネットワーク向けハイブリッドスロースタート」、高速長距離ネットワークのプロトコルに関する国際ワークショップ。"
    },
    {
      "indent": 3,
      "text": "[HRX08] Ha, S., Rhee, I., and L. Xu, \"CUBIC: A New TCP-Friendly High-Speed TCP Variant\", ACM SIGOPS Operating System Review, DOI 10.1145/1400097.1400105, July 2008.",
      "ja": "[HRX08]ハ、S.、李承晩、I.、およびL.徐、 \"CUBIC：新しいTCPフレンドリー高速TCPバリアント\"、ACM SIGOPSオペレーティングシステムのレビュー、DOI 10.1145 / 1400097.1400105、2008年7月。"
    },
    {
      "indent": 3,
      "text": "[K03] Kelly, T., \"Scalable TCP: Improving Performance in HighSpeed Wide Area Networks\", ACM SIGCOMM Computer Communication Review, DOI 10.1145/956981.956989, April 2003.",
      "ja": "[K03]ケリー、T.、 \"スケーラブルTCP：高速広域ネットワークにおけるパフォーマンスの向上\"、ACM SIGCOMMコンピュータコミュニケーションレビュー、DOI 10.1145 / 956981.956989、2003年4月。"
    },
    {
      "indent": 3,
      "text": "[KWAF17] Khademi, N., Welzl, M., Armitage, G., and G. Fairhurst, \"TCP Alternative Backoff with ECN (ABE)\", Work in Progress, draft-ietf-tcpm-alternativebackoff-ecn-05, December 2017.",
      "ja": "【KWAF17] Khademi、N.、Welzl、M.、アーミテージ、G.、およびG. Fairhurst、 \"ECN（ABE）とTCP代替バックオフ\"、進行中で働いて、ドラフトIETF-tcpm-alternativebackoff-ECN-05、 2017年12月。"
    },
    {
      "indent": 3,
      "text": "[XHR04] Xu, L., Harfoush, K., and I. Rhee, \"Binary Increase Congestion Control for Fast, Long Distance Networks\", In Proceedings of IEEE INFOCOM, DOI 10.1109/INFCOM.2004.1354672, March 2004.",
      "ja": "IEEE INFOCOM、DOI 10.1109 / INFCOM.2004.1354672、2004年3月の議事録[XHR04]徐、L.、Harfoush、K.、およびI.李承晩、 \"高速、長距離ネットワーク向けのバイナリ増加輻輳制御\"、。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Alexander Zimmermann and Lars Eggert have received funding from the European Union's Horizon 2020 research and innovation program 2014-2018 under grant agreement No. 644866 (SSICLOPS). This document reflects only the authors' views and the European Commission is not responsible for any use that may be made of the information it contains.",
      "ja": "アレクサンダー・ツィンマーマンとラースエッゲルトは、付与契約番号644866（SSICLOPS）の下で、欧州連合（EU）のホライゾン2020年の研究と技術革新プログラム2014年から2018年から資金提供を受けています。この文書では、唯一の著者の見解を反映しており、欧州委員会は、それが含まれている情報を用いることができる任意の使用については責任を負いません。"
    },
    {
      "indent": 3,
      "text": "The work of Lisong Xu was partially supported by the National Science Foundation (NSF) under Grant No. 1526253. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.",
      "ja": "Lisong徐の仕事の一部は、この資料に発現し、任意の意見、所見、および結論や勧告は著者のものであり、必ずしもNSFの見解を反映するものではありません認可番号1526253.の下で国立科学財団（NSF）によってサポートされていました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Injong Rhee North Carolina State University Department of Computer Science Raleigh, NC 27695-7534 United States of America Email: rhee@ncsu.edu",
      "ja": "コンピュータサイエンスローリーのInjong李承晩ノースカロライナ州立大学の学科、NC 27695-7534アメリカ合衆国Eメール：rhee@ncsu.edu"
    },
    {
      "indent": 3,
      "text": "Lisong Xu University of Nebraska-Lincoln Department of Computer Science and Engineering Lincoln, NE 68588-0115 United States of America",
      "ja": "コンピュータ理工学リンカーン、ネブラスカアメリカの68588-0115米国のネブラスカ大学リンカーン部門のLisong徐大学"
    },
    {
      "indent": 3,
      "text": "Email: xu@unl.edu",
      "ja": "メール：xu@unl.edu"
    },
    {
      "indent": 3,
      "text": "Sangtae Ha University of Colorado at Boulder Department of Computer Science Boulder, CO 80309-0430 United States of America Email: sangtae.ha@colorado.edu",
      "ja": "コンピュータサイエンスボルダーのボルダー部門でのコロラド州のSangtaeハ大学、CO 80309-0430アメリカ合衆国Eメール：sangtae.ha@colorado.edu"
    },
    {
      "indent": 3,
      "text": "Alexander Zimmermann Phone: +49 175 5766838 Email: alexander.zimmermann@rwth-aachen.de",
      "ja": "アレクサンダー・ツィンマーマン電話：+49 175 5766838 Eメール：alexander.zimmermann@rwth-aachen.de"
    },
    {
      "indent": 3,
      "text": "Lars Eggert NetApp Sonnenallee 1 Kirchheim 85551 Germany Phone: +49 151 12055791 Email: lars@netapp.com",
      "ja": "ラースEggertのNetAppのSonnenallee 1キルヒハイム85551ドイツ電話：+49 151 12055791 Eメール：lars@netapp.com"
    },
    {
      "indent": 3,
      "text": "Richard Scheffenegger NetApp Am Europlatz 2 Vienna 1120 Austria Email: rs.ietf@gmx.at",
      "ja": "リチャードScheffenegger NetAppのアムEuroplatz 2ウィーンオーストリア1120 Eメール：rs.ietf@gmx.at"
    }
  ]
}