{
  "title": {
    "text": "RFC 8305 - Happy Eyeballs Version 2: Better Connectivity Using Concurrency",
    "ja": "RFC 8305 - ハッピー眼球バージョン2：より良い接続が並行処理を使用して"
  },
  "number": 8305,
  "created_at": "2019-10-29 23:29:26.242585+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                       D. Schinazi\nRequest for Comments: 8305                                      T. Pauly\nObsoletes: 6555                                               Apple Inc.\nCategory: Standards Track                                  December 2017\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 4,
      "text": "Happy Eyeballs Version 2: Better Connectivity Using Concurrency",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "Many communication protocols operating over the modern Internet use hostnames. These often resolve to multiple IP addresses, each of which may have different performance and connectivity characteristics. Since specific addresses or address families (IPv4 or IPv6) may be blocked, broken, or sub-optimal on a network, clients that attempt multiple connections in parallel have a chance of establishing a connection more quickly. This document specifies requirements for algorithms that reduce this user-visible delay and provides an example algorithm, referred to as \"Happy Eyeballs\". This document obsoletes the original algorithm description in RFC 6555.",
      "ja": "現代のインターネット利用のホスト名上で動作する多くの通信プロトコル。これらは、多くの場合、複数のIPアドレスに解決するのは、それぞれ異なる性能と接続性の特性を有することができます。特定のアドレスまたはアドレスファミリー（IPv4またはIPv6）は、ブロックされた壊れた、またはネットワーク上の次善できるので、並行して複数の接続を試みるクライアントは、より迅速に接続を確立する機会を有します。この文書では、ユーザに見える遅延を低減し、「ハッピー眼球」と呼ぶ例アルゴリズムを提供するアルゴリズムの要件を指定します。この文書は、RFC 6555の元のアルゴリズム記述を廃止します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 7841のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8305.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttps://www.rfc-editor.org/info/rfc8305で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2017 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2017 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（https://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n  1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3\n2.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   4\n3.  Hostname Resolution Query Handling  . . . . . . . . . . . . .   4\n  3.1.  Handling Multiple DNS Server Addresses  . . . . . . . . .   5\n4.  Sorting Addresses . . . . . . . . . . . . . . . . . . . . . .   6\n5.  Connection Attempts . . . . . . . . . . . . . . . . . . . . .   7\n6.  DNS Answer Changes during Happy Eyeballs Connection Setup . .   8\n7.  Supporting IPv6-Only Networks with NAT64 and DNS64  . . . . .   8\n  7.1.  IPv4 Address Literals . . . . . . . . . . . . . . . . . .   8\n  7.2.  Hostnames with Broken AAAA Records  . . . . . . . . . . .   9\n  7.3.  Virtual Private Networks  . . . . . . . . . . . . . . . .  10\n8.  Summary of Configurable Values  . . . . . . . . . . . . . . .  10\n9.  Limitations . . . . . . . . . . . . . . . . . . . . . . . . .  11\n  9.1.  Path Maximum Transmission Unit Discovery  . . . . . . . .  11\n  9.2.  Application Layer . . . . . . . . . . . . . . . . . . . .  11\n  9.3.  Hiding Operational Issues . . . . . . . . . . . . . . . .  11\n10. Security Considerations . . . . . . . . . . . . . . . . . . .  12\n11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12\n12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  12\n  12.1.  Normative References . . . . . . . . . . . . . . . . . .  12\n  12.2.  Informative References . . . . . . . . . . . . . . . . .  13\nAppendix A.  Differences from RFC 6555  . . . . . . . . . . . . .  14\nAcknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  15\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  15",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "Many communication protocols operating over the modern Internet use hostnames. These often resolve to multiple IP addresses, each of which may have different performance and connectivity characteristics. Since specific addresses or address families (IPv4 or IPv6) may be blocked, broken, or sub-optimal on a network, clients that attempt multiple connections in parallel have a chance of establishing a connection more quickly. This document specifies requirements for algorithms that reduce this user-visible delay and provides an example algorithm.",
      "ja": "現代のインターネット利用のホスト名上で動作する多くの通信プロトコル。これらは、多くの場合、複数のIPアドレスに解決するのは、それぞれ異なる性能と接続性の特性を有することができます。特定のアドレスまたはアドレスファミリー（IPv4またはIPv6）は、ブロックされた壊れた、またはネットワーク上の次善できるので、並行して複数の接続を試みるクライアントは、より迅速に接続を確立する機会を有します。この文書では、ユーザに見える遅延を低減し、例えばアルゴリズムを提供するアルゴリズムの要件を指定します。"
    },
    {
      "indent": 3,
      "text": "This document defines the algorithm for \"Happy Eyeballs\", a technique for reducing user-visible delays on dual-stack hosts. This definition obsoletes the original description in [RFC6555]. Now that this approach has been deployed at scale and measured for several years, the algorithm specification can be refined to improve its reliability and general applicability.",
      "ja": "この文書では、「ハッピー眼球」、デュアルスタックホスト上のユーザに見える遅延を低減する技術のためのアルゴリズムを定義します。この定義は、[RFC6555]の元の記述を時代遅れ。今、このアプローチはスケールで展開され、数年前から測定されていることを、アルゴリズムの仕様では、その信頼性と一般的な適用性を向上させるために洗練することができます。"
    },
    {
      "indent": 3,
      "text": "The Happy Eyeballs algorithm of racing connections to resolved addresses has several stages to avoid delays to the user whenever possible, while preferring the use of IPv6. This document discusses how to handle DNS queries when starting a connection on a dual-stack client, how to create an ordered list of destination addresses to which to attempt connections, and how to race the connection attempts.",
      "ja": "解決したアドレスへの接続をレースのハッピー眼球アルゴリズムは、IPv6の使用を好む一方で、ユーザーに可能な限り遅延を回避するには、いくつかの段階があります。この文書では、接続を試みると宛先アドレスの順序付きリストを作成する、そしてどのように接続試行をレースする方法を、デュアルスタッククライアントの接続を開始するときにDNSクエリを処理する方法について説明します。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Language",
      "section_title": true,
      "ja": "1.1. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "キーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、 \"SHALL\"、 \"SHOULD\"、 \"ないもの\"、 \"推奨\" \"ない（SHOULD NOT）\"、 \"MAY\"、 \"推奨NOT\"、および「OPTIONAL [RFC2119]、[RFC8174]場合で説明したように「この文書に解釈されるべきであり、そしてここに示されているように、それらは、すべて大文字で表示された場合にのみ。"
    },
    {
      "indent": 0,
      "text": "2. Overview",
      "section_title": true,
      "ja": "2.概要"
    },
    {
      "indent": 3,
      "text": "This document defines a method of connection establishment, named the \"Happy Eyeballs Connection Setup\". This approach has several distinct phases:",
      "ja": "この文書は、「ハッピー眼球接続設定」という名前の接続確立の方法を定義します。このアプローチは、いくつかの異なるフェーズがあります。"
    },
    {
      "indent": 3,
      "text": "1. Initiation of asynchronous DNS queries [Section 3]",
      "section_title": true,
      "ja": "非同期DNSクエリの1開始[3章]"
    },
    {
      "indent": 3,
      "text": "2. Sorting of resolved destination addresses [Section 4]",
      "section_title": true,
      "ja": "解決宛先アドレスの2ソート[4章]"
    },
    {
      "indent": 3,
      "text": "3. Initiation of asynchronous connection attempts [Section 5]",
      "section_title": true,
      "ja": "非同期接続の試行の開始3 [5章]"
    },
    {
      "indent": 3,
      "text": "4. Establishment of one connection, which cancels all other attempts [Section 5]",
      "ja": "他のすべての試みをキャンセルつの接続の確立4、[5章]"
    },
    {
      "indent": 3,
      "text": "Note that this document assumes that the preference policy for the host destination address favors IPv6 over IPv4. IPv6 has many desirable properties designed to be improvements over IPv4 [RFC8200]. If the host is configured to have a different preference, the recommendations in this document can be easily adapted.",
      "ja": "このドキュメントは、ホスト先アドレスの優先政策がIPv4上でIPv6を支持することを前提としています。 IPv6は、IPv4の[RFC8200]を超える改善であるように設計され、多くの望ましい特性を有します。ホストは、異なる優先度を有するように構成されている場合は、この文書に記載されている推奨事項は容易に適合させることができます。"
    },
    {
      "indent": 0,
      "text": "3. Hostname Resolution Query Handling",
      "section_title": true,
      "ja": "3.ホスト名解決の問い合わせ処理"
    },
    {
      "indent": 3,
      "text": "When a client has both IPv4 and IPv6 connectivity and is trying to establish a connection with a named host, it needs to send out both AAAA and A DNS queries. Both queries SHOULD be made as soon after one another as possible, with the AAAA query made first and immediately followed by the A query.",
      "ja": "クライアントがIPv4とIPv6の両方の接続性を持っており、指定されたホストとの接続を確立しようとしているとき、それは両方のAAAAとDNSクエリを送信する必要があります。 AAAAクエリが最初に、すぐに問い合わせが続い作られたとの両方のクエリは、できるだけすぐ後に互いを行うべきです。"
    },
    {
      "indent": 3,
      "text": "Implementations SHOULD NOT wait for both families of answers to return before attempting connection establishment. If one query fails to return or takes significantly longer to return, waiting for the second address family can significantly delay the connection establishment of the first one. Therefore, the client SHOULD treat DNS resolution as asynchronous. Note that if the platform does not offer an asynchronous DNS API, this behavior can be simulated by making two separate synchronous queries on different threads, one per address family.",
      "ja": "実装は、接続の確立を試みる前に戻すための答えの両方の家族を待つべきではありません。 1つのクエリが返すことに失敗したか、戻るにはかなり時間がかかる場合は、第2のアドレスファミリを待っていることは非常に最初の1の接続確立を遅らせることができます。そのため、クライアントは非同期としてDNS解決を扱うべきです。プラットフォームは、非同期DNSのAPIを提供していない場合は、この動作は異なるスレッド上に2つの別々の同期のクエリ、アドレスファミリごとに1を作ることによってシミュレートすることができることに注意してください。"
    },
    {
      "indent": 3,
      "text": "The algorithm proceeds as follows: if a positive AAAA response (a response with at least one valid AAAA record) is received first, the first IPv6 connection attempt is immediately started. If a positive A response is received first due to reordering, the client SHOULD wait a short time for the AAAA response to ensure that preference is given to IPv6 (it is common for the AAAA response to follow the A response by a few milliseconds). This delay will be referred to as the \"Resolution Delay\". The recommended value for the Resolution Delay is 50 milliseconds. If a positive AAAA response is received within the Resolution Delay period, the client immediately starts the IPv6 connection attempt. If a negative AAAA response (no error, no data) is received within the Resolution Delay period or the AAAA response has not been received by the end of the Resolution Delay period, the client SHOULD proceed to sorting addresses (see Section 4) and staggered connection attempts (see Section 5) using any IPv4 addresses returned so far. If the AAAA response arrives while these connection attempts are in progress but before any connection has been established, then the newly received IPv6 addresses are incorporated into the list of available candidate addresses (see Section 6) and the process of connection attempts will continue with the IPv6 addresses added, until one connection is established.",
      "ja": "アルゴリズムは次のように進行する：正AAAA応答（少なくとも1枚の有効なAAAAレコードと応答）が最初に受信した場合、最初のIPv6接続試行は即座に開始されます。肯定応答は、並べ替えが原因で最初に受信された場合、クライアントはその好みがIPv6に与えられていることを確認するためにAAAA応答のための短い時間を待たなければならない（AAAA応答が数ミリ秒の応答を追跡することが一般的です）。この遅延は、「解像度遅延」と呼ぶことにします。解像度遅延の推奨値は50ミリ秒です。正AAAA応答は解像度遅延期間内に受信された場合、クライアントはすぐにIPv6接続の試行を開始します。負AAAA応答（エラーなし、データなし）が決議遅延期間内に受信されたか、AAAA応答は解像度遅延期間の終了によって受信されていない場合は、クライアントがアドレスをソートするに進めるべき（セクション4を参照）、千鳥任意のIPv4アドレスを使用して接続の試行は、（第5節を参照）これまでに返されました。これらの接続の試みが進行中であるが、任意の接続が確立される前に、その後、新たに受信したIPv6アドレスが使用可能な候補アドレスのリストに組み込まれている間、AAAA応答が到着した場合に進みます接続試行のプロセス（第6節を参照してください） 1つの接続が確立されるまで、IPv6アドレスは、追加しました。"
    },
    {
      "indent": 0,
      "text": "3.1. Handling Multiple DNS Server Addresses",
      "section_title": true,
      "ja": "3.1. 複数のDNSサーバーアドレスの取り扱い"
    },
    {
      "indent": 3,
      "text": "If multiple DNS server addresses are configured for the current network, the client may have the option of sending its DNS queries over IPv4 or IPv6. In keeping with the Happy Eyeballs approach, queries SHOULD be sent over IPv6 first (note that this is not referring to the sending of AAAA or A queries, but rather the address of the DNS server itself and IP version used to transport DNS messages). If DNS queries sent to the IPv6 address do not receive responses, that address may be marked as penalized and queries can be sent to other DNS server addresses.",
      "ja": "複数のDNSサーバーのアドレスは、現在のネットワーク用に設定されている場合、クライアントはIPv4またはIPv6上でそのDNSクエリーを送信するオプションを有することができます。ハッピー眼球のアプローチに沿って、クエリは最初の（これはAAAAまたはクエリの送信ではなく、DNSメッセージを輸送するために使用されるDNSサーバ自体とIPバージョンのアドレスを参照されていないことに注意）は、IPv6上で送信されるべきです。 IPv6アドレスに送信されたDNSクエリが応答を受信しない場合は、ペナルティとしてそのアドレスをマークすることができるとクエリは、他のDNSサーバーのアドレスに送信することができます。"
    },
    {
      "indent": 3,
      "text": "As native IPv6 deployments become more prevalent and IPv4 addresses are exhausted, it is expected that IPv6 connectivity will have preferential treatment within networks. If a DNS server is configured to be accessible over IPv6, IPv6 should be assumed to be the preferred address family.",
      "ja": "ネイティブIPv6の展開がより普及し、IPv4アドレスが枯渇しているように、IPv6接続がネットワーク内の優遇を持つことが期待されます。 DNSサーバーがIPv6を介してアクセスできるように構成されている場合は、IPv6が優先アドレスファミリであると想定されなければなりません。"
    },
    {
      "indent": 3,
      "text": "Client systems SHOULD NOT have an explicit limit to the number of DNS servers that can be configured, either manually or by the network. If such a limit is required by hardware limitations, the client SHOULD use at least one address from each address family from the available list.",
      "ja": "クライアントシステムは、手動またはネットワークにより、構成することができDNSサーバの数に明示的な制限を持つべきではありません。そのような制限はハードウェアの制限により要求される場合、クライアントは、利用可能なリストから、各アドレスファミリーから少なくとも1つのアドレスを使用する必要があります。"
    },
    {
      "indent": 0,
      "text": "4. Sorting Addresses",
      "section_title": true,
      "ja": "4.ソートアドレス"
    },
    {
      "indent": 3,
      "text": "Before attempting to connect to any of the resolved destination addresses, the client should define the order in which to start the attempts. Once the order has been defined, the client can use a simple algorithm for racing each option after a short delay (see Section 5). It is important that the ordered list involve all addresses from both families that have been received by this point, as this allows the client to get the racing effect of Happy Eyeballs for the entire list, not just the first IPv4 and first IPv6 addresses.",
      "ja": "解決宛先アドレスのいずれかに接続しようとする前に、クライアントが試みを開始する順序を定義する必要があります。順序が定義されると、クライアントは短い遅延の後、各オプションをレース用に単純なアルゴリズムを使用することができます（セクション5を参照）。これは、クライアントがリスト全体だけでなく、最初にIPv4と最初のIPv6アドレスのための幸せな眼球のレースの効果を得ることができますように、順序付きリストは、この時点で受信された両方の家族からのすべてのアドレスを含んでいることが重要です。"
    },
    {
      "indent": 3,
      "text": "First, the client MUST sort the addresses received up to this point using Destination Address Selection ([RFC6724], Section 6).",
      "ja": "まず、クライアントは、宛先アドレスの選択（[RFC6724]、セクション6）を使用して、この時点までに受信アドレスをソートしなければなりません。"
    },
    {
      "indent": 3,
      "text": "If the client is stateful and has a history of expected round-trip times (RTTs) for the routes to access each address, it SHOULD add a Destination Address Selection rule between rules 8 and 9 that prefers addresses with lower RTTs. If the client keeps track of which addresses it used in the past, it SHOULD add another Destination Address Selection rule between the RTT rule and rule 9, which prefers used addresses over unused ones. This helps servers that use the client's IP address during authentication, as is the case for TCP Fast Open [RFC7413] and some Hypertext Transport Protocol (HTTP) cookies. This historical data MUST NOT be used across different network interfaces and SHOULD be flushed whenever a device changes the network to which it is attached.",
      "ja": "クライアントがステートフルであり、各アドレスにアクセスするためのルートの予想往復時間（RTTの）の歴史を持っている場合、それは下のRTTとアドレスを好むルール8と9の間宛先アドレスの選択ルールを追加する必要があります。クライアントは、それが過去に使用どのアドレスを追跡している場合、それは未使用のものより使用されているアドレスを好むRTTルールとルール9、間に別の宛先アドレスの選択ルールを追加する必要があります。 TCP高速を開き、[RFC7413]といくつかのハイパーテキスト転送プロトコル（HTTP）クッキーの場合のようにこれは、認証時にクライアントのIPアドレスを使用するサーバーに役立ちます。この履歴データは、異なるネットワークインタフェースを横切って使用してはいけません、デバイスは、それが接続されているネットワークを変更するたびにフラッシュされるべきです。"
    },
    {
      "indent": 3,
      "text": "Next, the client SHOULD modify the ordered list to interleave address families. Whichever address family is first in the list should be followed by an address of the other address family; that is, if the first address in the sorted list is IPv6, then the first IPv4 address should be moved up in the list to be second in the list. An implementation MAY want to favor one address family more by allowing multiple addresses of that family to be attempted before trying the other family. The number of contiguous addresses of the first address family will be referred to as the \"First Address Family Count\" and can be a configurable value. This is performed to avoid waiting through a long list of addresses from a given address family if connectivity over that address family is impaired.",
      "ja": "次に、クライアントはアドレスファミリをインターリーブする順序付きリストを変更する必要があります。どちらのアドレスファミリは、リストの最初に他のアドレスファミリのアドレスが従うべきです。ソートされたリストの最初のアドレスがIPv6である場合、すなわち、最初のIPv4アドレスは、リストの2番目であることがリストに移動されるべきです。実装は、その家族の複数のアドレスは、他の家族をしようとする前に試みられるようにすることによって、より一つのアドレスファミリを支持することをお勧めします。最初のアドレスファミリの連続したアドレスの数は、「最初のアドレスファミリカウント」と呼ぶことにすると、設定値にすることができます。これは、そのアドレスファミリを超える接続が損なわれている場合は与えられたアドレスファミリからのアドレスの長いリストを待っ避けるために行われます。"
    },
    {
      "indent": 3,
      "text": "Note that the address selection described in this section only applies to destination addresses; Source Address Selection ([RFC6724], Section 5) is performed once per destination address and is out of scope of this document.",
      "ja": "このセクションで説明するアドレス選択は、宛先アドレスのみに適用されることに注意してください。ソースアドレス選択（[RFC6724]、セクション5）は宛先アドレスごとに一度行われ、この文書の範囲外です。"
    },
    {
      "indent": 0,
      "text": "5. Connection Attempts",
      "section_title": true,
      "ja": "5.接続試行"
    },
    {
      "indent": 3,
      "text": "Once the list of addresses received up to this point has been constructed, the client will attempt to make connections. In order to avoid unreasonable network load, connection attempts SHOULD NOT be made simultaneously. Instead, one connection attempt to a single address is started first, followed by the others in the list, one at a time. Starting a new connection attempt does not affect previous attempts, as multiple connection attempts may occur in parallel. Once one of the connection attempts succeeds (generally when the TCP handshake completes), all other connections attempts that have not yet succeeded SHOULD be canceled. Any address that was not yet attempted as a connection SHOULD be ignored. At that time, the asynchronous DNS query MAY be canceled as new addresses will not be used for this connection. However, the DNS client resolver SHOULD still process DNS replies from the network for a short period of time (recommended to be 1 second), as they will populate the DNS cache and can be used for subsequent connections.",
      "ja": "この時点までに受け取ったアドレスのリストが構築されると、クライアントが接続を試みます。無理なネットワーク負荷を避けるために、接続試行を同時に行うべきではありません。代わりに、単一のアドレスへの1つの接続の試みは、リスト、一度に一つで他の人に続いて、最初に起動されます。複数の接続の試みが並行して発生する可能性があり、新しい接続試行を開始すると、以前の試みには影響しません。接続試行の一つは、（TCPハンドシェイクが完了し、通常時に）成功すると、まだ成功していない他のすべての接続の試みをキャンセルする必要があります。まだ接続として行われませんでした任意のアドレスは無視されるべきです。新しいアドレスは、この接続に使用されることはありませんように、その時点では、非同期DNSクエリがキャンセルされる場合があります。しかし、DNSクライアントリゾルバは、まだ彼らはDNSキャッシュを移入し、以降の接続のために使用することができるようDNSは、（1秒であることをお勧めします）短時間のネットワークからの返信を処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "A simple implementation can have a fixed delay for how long to wait before starting the next connection attempt. This delay is referred to as the \"Connection Attempt Delay\". One recommended value for a default delay is 250 milliseconds. A more nuanced implementation's delay should correspond to the time when the previous attempt is sending its second TCP SYN, based on the TCP's retransmission timer [RFC6298]. If the client has historical RTT data gathered from other connections to the same host or prefix, it can use this information to influence its delay. Note that this algorithm should only try to approximate the time of the first SYN retransmission, and not any further retransmissions that may be influenced by exponential timer back off.",
      "ja": "単純な実装は、次の接続試行を開始する前に待機する時間のために固定遅延を持つことができます。この遅延は、「接続試行の遅延」と呼ばれています。デフォルトの遅延のための一つの推奨値は250ミリ秒です。より微妙な実装の遅延は、以前の試みは、TCPの再送タイマ[RFC6298]に基づいて、その第二のTCP SYNを送信している時間に対応しなければなりません。クライアントが同じホストまたはプレフィックスに他の接続から集められた歴史的なRTTデータを持っている場合、それは、その遅延に影響を与えるために、この情報を使用することができます。このアルゴリズムは唯一のバックオフ指数タイマーによって影響され得る任意のさらなる再送信を最初のSYN再送の時間を概算してみてください、とはならないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "The Connection Attempt Delay MUST have a lower bound, especially if it is computed using historical data. More specifically, a subsequent connection MUST NOT be started within 10 milliseconds of the previous attempt. The recommended minimum value is 100 milliseconds, which is referred to as the \"Minimum Connection Attempt Delay\". This minimum value is required to avoid congestion collapse in the presence of high packet-loss rates. The Connection Attempt Delay SHOULD have an upper bound, referred to as the \"Maximum Connection Attempt Delay\". The current recommended value is 2 seconds.",
      "ja": "接続試行の遅延は、それが過去のデータを用いて計算される場合は特に、下限を持たなければなりません。具体的には、後続の接続は、前回の試行の10ミリ秒以内に開始されてはなりません。推奨される最小値は「最小接続試行の遅延」と呼ばれる100ミリ秒です。この最小値は、高いパケット損失率の存在下での輻輳崩壊を回避するために必要です。ディレイ上限を持つべきである（SHOULD）接続の試みが、「最大接続試行の遅延」と呼ばれます。現在の推奨値は2秒です。"
    },
    {
      "indent": 0,
      "text": "6. DNS Answer Changes during Happy Eyeballs Connection Setup",
      "section_title": true,
      "ja": "ハッピー眼球接続設定中の6 DNS回答の変更"
    },
    {
      "indent": 3,
      "text": "If, during the course of connection establishment, the DNS answers change by either adding resolved addresses (for example due to DNS push notifications [DNS-PUSH]) or removing previously resolved addresses (for example, due to expiry of the TTL on that DNS record), the client should react based on its current progress.",
      "ja": "、接続確立の過程で、DNS回答起因そのDNS上のTTLの期限切れに、例えば（または削除以前に解決されたアドレス（これはDNSプッシュ通知[DNS-PUSH]になど）のいずれかで添加すること解決アドレスによって変更した場合レコードが）、クライアントは現在の進捗状況に基づいて反応する必要があります。"
    },
    {
      "indent": 3,
      "text": "If an address is removed from the list that already had a connection attempt started, the connection attempt SHOULD NOT be canceled, but rather be allowed to continue. If the removed address had not yet had a connection attempt started, it SHOULD be removed from the list of addresses to try.",
      "ja": "アドレスが既に接続試行が開始されたリストから削除された場合、接続の試行がキャンセルされるべきものではなく、継続させること。削除アドレスがまだ接続試行が開始されなかった場合、それはしようとするアドレスのリストから削除する必要があります。"
    },
    {
      "indent": 3,
      "text": "If an address is added to the list, it should be sorted into the list of addresses not yet attempted according to the rules above (see Section 4).",
      "ja": "アドレスがリストに追加された場合、それはまだ上記の規則に従って試みられていないアドレスのリストに分類されるべきである（セクション4を参照）。"
    },
    {
      "indent": 0,
      "text": "7. Supporting IPv6-Only Networks with NAT64 and DNS64",
      "section_title": true,
      "ja": "7. NAT64とDNS64でのIPv6のみのネットワークをサポート"
    },
    {
      "indent": 3,
      "text": "While many IPv6 transition protocols have been standardized and deployed, most are transparent to client devices. The combined use of NAT64 [RFC6146] and DNS64 [RFC6147] is a popular solution that is being deployed and requires changes in client devices. One possible way to handle these networks is for the client device networking stack to implement 464XLAT [RFC6877]. 464XLAT has the advantage of not requiring changes to user space software; however, it requires per-packet translation if the application is using IPv4 literals and does not encourage client application software to support native IPv6. On platforms that do not support 464XLAT, the Happy Eyeballs engine SHOULD follow the recommendations in this section to properly support IPv6-only networks with NAT64 and DNS64.",
      "ja": "多くのIPv6移行プロトコルが標準化され、配備されているが、ほとんどがクライアントデバイスに対して透過的です。 NAT64 [RFC6146]とDNS64 [RFC6147]の併用が展開され、クライアントデバイスの変更を必要とされている人気の高いソリューションです。これらのネットワークを処理するための1つの可能な方法は、464XLAT [RFC6877]を実装するためのネットワークスタッククライアントデバイスのためです。 464XLATは、ユーザ空間のソフトウェアへの変更を必要としないという利点があります。しかし、それはアプリケーションがIPv4リテラルを使用している場合、パケット単位の変換を必要とネイティブIPv6をサポートするために、クライアントアプリケーションソフトウェアを奨励していません。 464XLATをサポートしていないプラットフォームでは、ハッピー眼球エンジンが適切にNAT64とDNS64とIPv6のみのネットワークをサポートするために、このセクションの推奨事項に従ってください。"
    },
    {
      "indent": 3,
      "text": "The features described in this section SHOULD only be enabled when the host detects one of these networks. A simple heuristic to achieve that is to check if the network offers routable IPv6 addressing, does not offer routable IPv4 addressing, and offers a DNS resolver address.",
      "ja": "ホストは、これらのネットワークのいずれかを検出したときに、このセクションで説明する機能のみを有効にする必要があります。それを達成するための簡単なヒューリスティックは、ネットワークアドレッシングルーティング可能なIPv6を提供しています場合はルーティング可能なIPv4アドレスを提供していません、チェックすることで、DNSリゾルバアドレスを提供しています。"
    },
    {
      "indent": 0,
      "text": "7.1. IPv4 Address Literals",
      "section_title": true,
      "ja": "7.1.  IPv4アドレスリテラル"
    },
    {
      "indent": 3,
      "text": "If client applications or users wish to connect to IPv4 address literals, the Happy Eyeballs engine will need to perform NAT64 address synthesis for them. The solution is similar to \"Bump-in-the-Host\" [RFC6535] but is implemented inside the Happy Eyeballs library.",
      "ja": "クライアントアプリケーションまたはユーザーは、IPv4アドレスリテラルに接続したい場合は、ハッピー眼球エンジンは、彼らのためにNAT64アドレス合成を実行する必要があります。ソリューションは、の「bump-in-the-ホスト」[RFC6535]に似ていますが、ハッピー眼球ライブラリ内に実装されます。"
    },
    {
      "indent": 3,
      "text": "When an IPv4 address is passed into the library instead of a hostname, the device queries the network for the NAT64 prefix using \"Discovery of the IPv6 Prefix Used for IPv6 Address Synthesis\" [RFC7050] and then synthesizes an appropriate IPv6 address (or several) using the encoding described in \"IPv6 Addressing of IPv4/ IPv6 Translators\" [RFC6052]. The synthesized addresses are then inserted into the list of addresses as if they were results from DNS queries; connection attempts follow the algorithm described above (see Section 5).",
      "ja": "IPv4アドレスがホスト名の代わりにライブラリに渡されると、デバイスは、「IPv6アドレスの合成に用いたIPv6プレフィックスの発見」[RFC7050]と適切なIPv6アドレス（または複数）の合成を使用して、NAT64プレフィックスのネットワークを照会します[RFC6052]の「IPv6は、IPv4 / IPv6の翻訳者のアドレス指定」で説明しエンコードを使用。それらはDNSクエリからの結果であるかのように合成アドレスは、その後、アドレスのリストに挿入されます。接続試行（セクション5を参照）は、上述のアルゴリズムに従います。"
    },
    {
      "indent": 0,
      "text": "7.2. Hostnames with Broken AAAA Records",
      "section_title": true,
      "ja": "7.2. 壊れたAAAAレコードを持つホスト名"
    },
    {
      "indent": 3,
      "text": "At the time of writing, there exist a small but non-negligible number of hostnames that resolve to valid A records and broken AAAA records, which we define as AAAA records that contain seemingly valid IPv6 addresses but those addresses never reply when contacted on the usual ports. These can be, for example, caused by:",
      "ja": "執筆時点では、我々は一見有効なIPv6アドレスを含むAAAAレコードとして定義しますが、通常に接触したとき、それらのアドレスが返信決して有効なAレコードと壊れたAAAAレコードに解決されるホスト名の小さいが無視できない数が存在しますポート。これらは、例えば、によって引き起こされる可能性があります。"
    },
    {
      "indent": 3,
      "text": "o Mistyping of the IPv6 address in the DNS zone configuration",
      "ja": "DNSゾーンの設定でIPv6アドレスのOタイプミス"
    },
    {
      "indent": 3,
      "text": "o Routing black holes",
      "ja": "ブラックホールルーティングO"
    },
    {
      "indent": 3,
      "text": "o Service outages",
      "ja": "Oサービスの停止"
    },
    {
      "indent": 3,
      "text": "While an algorithm complying with the other sections of this document would correctly handle such hostnames on a dual-stack network, they will not necessarily function correctly on IPv6-only networks with NAT64 and DNS64. Since DNS64 recursive resolvers rely on the authoritative name servers sending negative (\"no error no answer\") responses for AAAA records in order to synthesize, they will not synthesize records for these particular hostnames and will instead pass through the broken AAAA record.",
      "ja": "このドキュメントの他のセクションに準拠アルゴリズムが正しくデュアルスタックネットワーク上のホスト名などを扱うだろうが、彼らは必ずしもNAT64とDNS64とIPv6専用ネットワーク上で正しく機能しません。 DNS64再帰リゾルバが合成するためにAAAAレコードのマイナス（「エラーなし無回答」）応答を送信する権威ネームサーバに依存しているので、彼らはこれらの特定のホスト名のレコードを合成しなくなり、代わりに壊れたAAAAレコードを通過することになります。"
    },
    {
      "indent": 3,
      "text": "In order to support these scenarios, the client device needs to query the DNS for the A record and then perform local synthesis. Since these types of hostnames are rare and, in order to minimize load on DNS servers, this A query should only be performed when the client has given up on the AAAA records it initially received. This can be achieved by using a longer timeout, referred to as the \"Last Resort Local Synthesis Delay\"; the delay is recommended to be 2 seconds. The timer is started when the last connection attempt is fired. If no connection attempt has succeeded when this timer fires, the device queries the DNS for the IPv4 address and, on reception of a valid A record, treats it as if it were provided by the application (see Section 7.1).",
      "ja": "これらのシナリオをサポートするために、クライアントデバイスは、AレコードのDNSを照会して、地元の合成を実行する必要があります。ホスト名のこれらのタイプは、DNSサーバーの負荷を最小限に抑えるために、稀とされているので、クライアントは、それが最初に受信AAAAレコードをあきらめたときに、このクエリにのみ実行する必要があります。これは、「ラストリゾートローカル合成遅延」と呼ばれる長いタイムアウトを使用することによって達成することができます。遅延は2秒であることをお勧めします。最後の接続試行が発射されたときにタイマーが開始されます。このタイマーが起動すると、デバイスは有効なレコードの受信時に、IPv4アドレスのためのDNSを照会したときには接続の試みが成功しなかった場合、それは、アプリケーションによって提供されたかのように、それを処理します（7.1節を参照してください）。"
    },
    {
      "indent": 0,
      "text": "7.3. Virtual Private Networks",
      "section_title": true,
      "ja": "7.3. 仮想プライベートネットワーク"
    },
    {
      "indent": 3,
      "text": "Some Virtual Private Networks (VPNs) may be configured to handle DNS queries from the device. The configuration could encompass all queries or a subset such as \"*.internal.example.com\". These VPNs can also be configured to only route part of the IPv4 address space, such as 192.0.2.0/24. However, if an internal hostname resolves to an external IPv4 address, these can cause issues if the underlying network is IPv6-only. As an example, let's assume that \"www.internal.example.com\" has exactly one A record, 198.51.100.42, and no AAAA records. The client will send the DNS query to the company's recursive resolver and that resolver will reply with these records. The device now only has an IPv4 address to connect to and no route to that address. Since the company's resolver does not know the NAT64 prefix of the underlying network, it cannot synthesize the address. Similarly, the underlying network's DNS64 recursive resolver does not know the company's internal addresses, so it cannot resolve the hostname. Because of this, the client device needs to resolve the A record using the company's resolver and then locally synthesize an IPv6 address, as if the resolved IPv4 address were provided by the application (Section 7.1).",
      "ja": "いくつかの仮想プライベートネットワーク（VPN）は、デバイスからのDNSクエリを処理するように構成することができます。構成は、このような「* .internal.example.com」として、すべてのクエリまたはサブセットを包含することができます。これらのVPNはまた、192.0.2.0/24として、IPv4アドレス空間の唯一のルート部に構成することができます。内部ホスト名が外部のIPv4アドレスに解決される場合、基盤となるネットワークがIPv6のみである場合は、これらの問題を引き起こす可能性があります。一例として、のは「www.internal.example.com」は正確に一つのレコード、198.51.100.42、無AAAAレコードを持っていると仮定しましょう。クライアントは、同社の再帰リゾルバにDNSクエリを送信し、そのリゾルバはこれらのレコードを返信します。デバイスは、現在のみに接続するIPv4アドレスとそのアドレスにないルートが設定されています。同社のリゾルバは、基礎となるネットワークのNAT64プレフィックスを知らないので、それはアドレスを合成することができません。同様に、基礎となるネットワークのDNS64再帰リゾルバは、企業の内部アドレスを知らないので、ホスト名を解決することはできません。このため、クライアントデバイスは、同社のリゾルバを使用してレコードを解決する必要があると決議IPv4アドレスがアプリケーション（7.1節）によって提供されたかのようにローカルに、IPv6アドレスを合成します。"
    },
    {
      "indent": 0,
      "text": "8. Summary of Configurable Values",
      "section_title": true,
      "ja": "設定可能な値の8概要"
    },
    {
      "indent": 3,
      "text": "The values that may be configured as defaults on a client for use in Happy Eyeballs are as follows:",
      "ja": "次のようにハッピー眼球で使用するためのクライアントのデフォルトとして設定することができる値は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Resolution Delay (Section 3): The time to wait for a AAAA response after receiving an A response. Recommended to be 50 milliseconds.",
      "ja": "O解像度遅延（第3節）：A応答を受信した後、AAAAの応答を待つ時間。 50ミリ秒であることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "o First Address Family Count (Section 4): The number of addresses belonging to the first address family (such as IPv6) that should be attempted before attempting another address family. Recommended to be 1; 2 may be used to more aggressively favor a particular address family.",
      "ja": "O最初のアドレスファミリー・カウント（第4節）：別のアドレスファミリを試みる前に試みるべきである（IPv6など）最初のアドレスファミリに属する​​アドレスの数。 1であることをお勧めします。図2は、より積極的に、特定のアドレスファミリを有利にするためにも使用できます。"
    },
    {
      "indent": 3,
      "text": "o Connection Attempt Delay (Section 5): The time to wait between connection attempts in the absence of RTT data. Recommended to be 250 milliseconds.",
      "ja": "O接続試行遅延（セクション5）：RTTデータが存在しない状態での接続試行の間待機する時間。 250ミリ秒であることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "o Minimum Connection Attempt Delay (Section 5): The minimum time to wait between connection attempts. Recommended to be 100 milliseconds. MUST NOT be less than 10 milliseconds.",
      "ja": "O最小接続試行遅延（セクション5）：接続の試行の間に待機する最小時間。 100ミリ秒であることをお勧めします。 10ミリ秒未満にすることはできません。"
    },
    {
      "indent": 3,
      "text": "o Maximum Connection Attempt Delay (Section 5): The maximum time to wait between connection attempts. Recommended to be 2 seconds.",
      "ja": "O最大接続試行遅延（セクション5）：接続の試行の間に待機する最大時間。 2秒であることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "o Last Resort Local Synthesis Delay (Section 7.2): The time to wait after starting the last IPv6 attempt and before sending the A query. Recommended to be 2 seconds.",
      "ja": "Oラストリゾート局所合成遅延（7.2節）：最後のIPv6の試行を開始した後、クエリを送信する前に待機する時間。 2秒であることをお勧めします。"
    },
    {
      "indent": 3,
      "text": "The delay values described in this section were determined empirically by measuring the timing of connections on a very wide set of production devices. They were picked to reduce wait times noticed by users while minimizing load on the network. As time passes, it is expected that the properties of networks will evolve. For that reason, it is expected that these values will change over time. Implementors should feel welcome to use different values without changing this specification. Since IPv6 issues are expected to be less common, the delays SHOULD be increased with time as client software is updated.",
      "ja": "このセクションで説明した遅延値は、製造装置の非常に広いセットの接続のタイミングを測定することによって経験的に決定しました。これらは、ネットワークへの負荷を最小限に抑えながら、ユーザーに気づか待ち時間を減らすために採取しました。時間が経過するにつれて、ネットワークの性質が進化していくことが期待されます。そのため、これらの値は、時間の経過とともに変化することが予想されます。実装者はこの仕様を変更することなく、異なる値を使用して大歓迎を感じるはずです。 IPv6の問題はあまり一般的であると予想されるので、クライアントソフトウェアが更新されると、遅延は時間とともに増加されるべきです。"
    },
    {
      "indent": 0,
      "text": "9. Limitations",
      "section_title": true,
      "ja": "9.制限事項"
    },
    {
      "indent": 3,
      "text": "Happy Eyeballs will handle initial connection failures at the TCP/IP layer; however, other failures or performance issues may still affect the chosen connection.",
      "ja": "ハッピー眼球は、TCP / IP層での初期接続の失敗を処理します。しかし、他の障害やパフォーマンスの問題がまだ選ばれた接続に影響を与える可能性があります。"
    },
    {
      "indent": 0,
      "text": "9.1. Path Maximum Transmission Unit Discovery",
      "section_title": true,
      "ja": "9.1. パス最大伝送ユニットディスカバリー"
    },
    {
      "indent": 3,
      "text": "Since Happy Eyeballs is only active during the initial handshake and TCP does not pass the initial handshake, issues related to MTU can be masked and go unnoticed during Happy Eyeballs. Solving this issue is out of scope of this document. One solution is to use \"Packetization Layer Path MTU Discovery\" [RFC4821].",
      "ja": "ハッピー眼球が最初のハンドシェイク時にのみ有効で、TCPは、初期ハンドシェイクを通らないので、MTUに関連する問題は、マスクされ、幸せな眼球の間に気付かないことができます。この問題を解決することは、この文書の範囲外です。一つの解決策は、「パケット化レイヤのパスMTUディスカバリ」[RFC4821]を使用することです。"
    },
    {
      "indent": 0,
      "text": "9.2. Application Layer",
      "section_title": true,
      "ja": "9.2. アプリケーション層"
    },
    {
      "indent": 3,
      "text": "If the DNS returns multiple addresses for different application servers, the application itself may not be operational and functional on all of them. Common examples include Transport Layer Security (TLS) and HTTP.",
      "ja": "DNSは、異なるアプリケーションサーバのための複数のアドレスを返す場合、アプリケーション自体は、それらのすべての操作と機能的ではないかもしれません。一般的な例としては、トランスポート層セキュリティ（TLS）とHTTPが含まれます。"
    },
    {
      "indent": 0,
      "text": "9.3. Hiding Operational Issues",
      "section_title": true,
      "ja": "9.3. 運用上の問題を非表示にします"
    },
    {
      "indent": 3,
      "text": "It has been observed in practice that Happy Eyeballs can hide issues in networks. For example, if a misconfiguration causes IPv6 to consistently fail on a given network while IPv4 is still functional, Happy Eyeballs may impair the operator's ability to notice the issue. It is recommended that network operators deploy external means of monitoring to ensure functionality of all address families.",
      "ja": "それは幸せな眼球がネットワークの問題を非表示にすることができ、実際に観察されています。 IPv4のはまだ機能している間、設定ミスがIPv6が一貫与えられたネットワーク上で失敗した場合、ハッピー眼球が問題に気づくためのオペレータの能力を損なう可能性があります。ネットワーク事業者は、すべてのアドレスファミリの機能を確保するために、監視の外部手段を展開することをお勧めします。"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Note that applications should not rely upon a stable hostname-to-address mapping to ensure any security properties, since DNS results may change between queries. Happy Eyeballs may make it more likely that subsequent connections to a single hostname use different IP addresses.",
      "ja": "DNSの結果は、クエリの間で変更される可能性があるため、アプリケーションがどのようなセキュリティ性を確保するために安定したホスト名からアドレスへのマッピングに頼るべきではないことに注意してください。ハッピー眼球は、単一のホスト名に後続の接続は、異なるIPアドレスを使用すること、それは可能性が高いことがあります。"
    },
    {
      "indent": 0,
      "text": "11. IANA Considerations",
      "section_title": true,
      "ja": "11. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document does not require any IANA actions.",
      "ja": "このドキュメントは、IANAのアクションを必要としません。"
    },
    {
      "indent": 0,
      "text": "12. References",
      "section_title": true,
      "ja": "12.参考文献"
    },
    {
      "indent": 0,
      "text": "12.1. Normative References",
      "section_title": true,
      "ja": "12.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC4821] Mathis, M. and J. Heffner, \"Packetization Layer Path MTU Discovery\", RFC 4821, DOI 10.17487/RFC4821, March 2007, <https://www.rfc-editor.org/info/rfc4821>.",
      "ja": "[RFC4821]マシス、M.とJ. Heffner、 \"パケット化レイヤのパスMTUディスカバリ\"、RFC 4821、DOI 10.17487 / RFC4821、2007年3月、<https://www.rfc-editor.org/info/rfc4821>。"
    },
    {
      "indent": 3,
      "text": "[RFC6052] Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X. Li, \"IPv6 Addressing of IPv4/IPv6 Translators\", RFC 6052, DOI 10.17487/RFC6052, October 2010, <https://www.rfc-editor.org/info/rfc6052>.",
      "ja": "[RFC6052]バオ、C.、のHuitema、C.、Bagnulo、M.、Boucadair、M.、およびX.李、RFC 6052、DOI 10.17487 / RFC6052、2010年10月の \"IPv6は、IPv4 / IPv6の翻訳者のアドレス指定\"、< https://www.rfc-editor.org/info/rfc6052>。"
    },
    {
      "indent": 3,
      "text": "[RFC6146] Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful NAT64: Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146, April 2011, <https://www.rfc-editor.org/info/rfc6146>.",
      "ja": "[RFC6146] Bagnulo、M.、マシューズ、P.、およびI.バンBeijnum、 \"ステートフルNAT64：IPv4のサーバーへのIPv6クライアントからのネットワークアドレスとプロトコル変換\"、RFC 6146、DOI 10.17487 / RFC6146、2011年4月、<HTTPS： //www.rfc-editor.org/info/rfc6146>。"
    },
    {
      "indent": 3,
      "text": "[RFC6147] Bagnulo, M., Sullivan, A., Matthews, P., and I. van Beijnum, \"DNS64: DNS Extensions for Network Address Translation from IPv6 Clients to IPv4 Servers\", RFC 6147, DOI 10.17487/RFC6147, April 2011, <https://www.rfc-editor.org/info/rfc6147>.",
      "ja": "[RFC6147] Bagnulo、M.、サリバン、A.、マシューズ、P.、およびI.バンBeijnum、 \"DNS64：IPv4のサーバーへのIPv6クライアントからのネットワークアドレス変換のためのDNS拡張機能\"、RFC 6147、DOI 10.17487 / RFC6147、4月2011年、<https://www.rfc-editor.org/info/rfc6147>。"
    },
    {
      "indent": 3,
      "text": "[RFC6298] Paxson, V., Allman, M., Chu, J., and M. Sargent, \"Computing TCP's Retransmission Timer\", RFC 6298, DOI 10.17487/RFC6298, June 2011, <https://www.rfc-editor.org/info/rfc6298>.",
      "ja": "[RFC6298]パクソン、V.、オールマン、M.、チュー、J.、およびM.サージェント、 \"コンピューティングTCPの再送信タイマー\"、RFC 6298、DOI 10.17487 / RFC6298、2011年6月、<HTTPS：//www.rfc- editor.org/info/rfc6298>。"
    },
    {
      "indent": 3,
      "text": "[RFC6535] Huang, B., Deng, H., and T. Savolainen, \"Dual-Stack Hosts Using \"Bump-in-the-Host\" (BIH)\", RFC 6535, DOI 10.17487/RFC6535, February 2012, <https://www.rfc-editor.org/info/rfc6535>.",
      "ja": "[RFC6535]黄、B.は、トウは、H。、およびT. Savolainenのは、<2012年2月、RFC 6535、DOI 10.17487 / RFC6535、 \"（BIH）の \"bump-in-the-ホスト\" デュアルスタックホストが使用します\" https://www.rfc-editor.org/info/rfc6535>。"
    },
    {
      "indent": 3,
      "text": "[RFC6555] Wing, D. and A. Yourtchenko, \"Happy Eyeballs: Success with Dual-Stack Hosts\", RFC 6555, DOI 10.17487/RFC6555, April 2012, <https://www.rfc-editor.org/info/rfc6555>.",
      "ja": "[RFC6555]ウイング、D.とA. Yourtchenko、 \"ハッピー眼球：デュアルスタックホストと成功\"、RFC 6555、DOI 10.17487 / RFC6555、2012年4月、<https://www.rfc-editor.org/info/ rfc6555>。"
    },
    {
      "indent": 3,
      "text": "[RFC6724] Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown, \"Default Address Selection for Internet Protocol Version 6 (IPv6)\", RFC 6724, DOI 10.17487/RFC6724, September 2012, <https://www.rfc-editor.org/info/rfc6724>.",
      "ja": "[RFC6724]ターラー、D.、エド。、Draves、R.、松本、A.、およびT. CHOWN、 \"インターネットプロトコルバージョン6（IPv6）のためのデフォルトのアドレス選択\"、RFC 6724、DOI 10.17487 / RFC6724、2012年9月、<https://www.rfc-editor.org/info/rfc6724>。"
    },
    {
      "indent": 3,
      "text": "[RFC7050] Savolainen, T., Korhonen, J., and D. Wing, \"Discovery of the IPv6 Prefix Used for IPv6 Address Synthesis\", RFC 7050, DOI 10.17487/RFC7050, November 2013, <https://www.rfc-editor.org/info/rfc7050>.",
      "ja": "[RFC7050] Savolainenの、T.、Korhonen、J.、およびD.翼、 \"IPv6アドレスの合成に用いたIPv6プレフィックスの発見\"、RFC 7050、DOI 10.17487 / RFC7050、2013年11月、<HTTPS：//www.rfc -editor.org/info/rfc7050>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B.、 \"RFC 2119個のキーワードに小文字VS大文字の曖昧さ\"、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 0,
      "text": "12.2. Informative References",
      "section_title": true,
      "ja": "12.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[DNS-PUSH] Pusateri, T. and S. Cheshire, \"DNS Push Notifications\", Work in Progress, draft-ietf-dnssd-push-13, October 2017.",
      "ja": "[DNS-PUSH] Pusateri、T.及びS.チェシャー、 \"DNSプッシュ通知\"、進行中で働いて、ドラフトIETF-dnssdプッシュ-13、2017年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC6877] Mawatari, M., Kawashima, M., and C. Byrne, \"464XLAT: Combination of Stateful and Stateless Translation\", RFC 6877, DOI 10.17487/RFC6877, April 2013, <https://www.rfc-editor.org/info/rfc6877>.",
      "ja": "[RFC6877]馬渡、M.、川島、M.、およびC.バーン、 \"464XLAT：ステートフルとステートレス翻訳の組み合わせ\"、RFC 6877、DOI 10.17487 / RFC6877、2013年4月、<HTTPS：//www.rfc-editor .ORG /情報/ rfc6877>。"
    },
    {
      "indent": 3,
      "text": "[RFC7413] Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014, <https://www.rfc-editor.org/info/rfc7413>.",
      "ja": "[RFC7413]チェン、Y.、チュー、J.、ラダクリシュナン、S.、およびA.ジェイン、 \"TCP高速開く\"、RFC 7413、DOI 10.17487 / RFC7413、2014年12月、<HTTPS：//www.rfc-editor .ORG /情報/ rfc7413>。"
    },
    {
      "indent": 3,
      "text": "[RFC8200] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July 2017, <https://www.rfc-editor.org/info/rfc8200>.",
      "ja": "[RFC8200]デアリング、S.とR. Hindenと \"インターネットプロトコル、バージョン6（IPv6）の仕様\"、STD 86、RFC 8200、DOI 10.17487 / RFC8200、2017年7月、<https://www.rfc-editor.org /情報/ rfc8200>。"
    },
    {
      "indent": 1,
      "text": "Appendix A. Differences from",
      "ja": "からの付録A.の違い"
    },
    {
      "indent": 3,
      "text": "\"Happy Eyeballs: Success with Dual-Stack Hosts\" [RFC6555] mostly concentrates on how to stagger connections to a hostname that has a AAAA and an A record. This document additionally discusses:",
      "ja": "「ハッピー眼球：デュアルスタックホストと成功」[RFC6555]は、主にAAAAとレコードを持っているホスト名への接続をずらす方法に集中します。この文書では、さらに説明します。"
    },
    {
      "indent": 3,
      "text": "o how to perform DNS queries to obtain these addresses",
      "ja": "Oこれらのアドレスを取得するためにDNSクエリを実行する方法"
    },
    {
      "indent": 3,
      "text": "o how to handle multiple addresses from each address family",
      "ja": "各アドレスファミリから複数のアドレスを処理する方法O"
    },
    {
      "indent": 3,
      "text": "o how to handle DNS updates while connections are being raced",
      "ja": "O DNS更新を処理する方法の接続がレースをしている間、"
    },
    {
      "indent": 3,
      "text": "o how to leverage historical information",
      "ja": "履歴情報を活用する方法O"
    },
    {
      "indent": 3,
      "text": "o how to support IPv6-only networks with NAT64 and DNS64",
      "ja": "O NAT64とDNS64とIPv6のみのネットワークをサポートする方法"
    },
    {
      "indent": 3,
      "text": "Note that a simple implementation of the algorithm described in this document is still compliant with the previous specification [RFC6555]. Implementations should take the new considerations into account when applicable to optimize their behavior.",
      "ja": "この文書に記載されたアルゴリズムの単純な実装はまだ前仕様[RFC6555]に準拠していることに留意されたいです。その動作を最適化する際に適用可能な実装は考慮に入れ、新たな検討事項を取る必要があります。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors thank Dan Wing, Andrew Yourtchenko, and everyone else who worked on the original Happy Eyeballs design [RFC6555], Josh Graessley, Stuart Cheshire, and the rest of team at Apple that helped implement and instrument this algorithm, and Jason Fesler and Paul Saab who helped measure and refine this algorithm. The authors would also like to thank Fred Baker, Nick Chettle, Lorenzo Colitti, Igor Gashinsky, Geoff Huston, Jen Linkova, Paul Hoffman, Philip Homburg, Warren Kumari, Erik Nygren, Jordi Palet Martinez, Rui Paulo, Stephen Strowes, Jinmei Tatuya, Dave Thaler, Joe Touch, and James Woodyatt for their input and contributions.",
      "ja": "著者はダン・ウィング、アンドリューYourtchenko、オリジナルハッピー眼球の設計[RFC6555]、ジョシュGraessley、スチュアートチェシャー、このアルゴリズムを実装し、楽器助けたアップルのチームの残りの部分で働いた皆、そしてジェイソンFeslerとポールに感謝しますこのアルゴリズムを測定し、洗練助けサーブ。著者らはまた、フレッド・ベイカー、ニックChettle、ロレンツォColitti、イゴールGashinsky、ジェフ・ヒューストン、ジェンLinkova、ポール・ホフマン、フィリップ・ホンブルク、ウォーレン・クマリ、エリックNygren、ジョルディPaletマルティネス、ルイサンパウロ、スティーブンStrowes、神明達也に感謝したいと思いますその入力と貢献のためのデーブターラー、ジョー・タッチ、そしてジェームズWoodyatt。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "David Schinazi Apple Inc. 1 Infinite Loop Cupertino, California 95014 United States of America",
      "ja": "デビッドSchinaziされたApple Inc. 1無限ループクパチーノ、カリフォルニアアメリカの95014米国"
    },
    {
      "indent": 3,
      "text": "Email: dschinazi@apple.com",
      "ja": "メール：dschinazi@apple.com"
    },
    {
      "indent": 3,
      "text": "Tommy Pauly Apple Inc. 1 Infinite Loop Cupertino, California 95014 United States of America",
      "ja": "トミーポーリーされたApple Inc. 1無限ループクパチーノ、カリフォルニアアメリカの95014米国"
    },
    {
      "indent": 3,
      "text": "Email: tpauly@apple.com",
      "ja": "メール：tpauly@apple.com"
    }
  ]
}