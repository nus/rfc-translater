{
  "title": {
    "text": "RFC 8565 - Hypertext Jeopardy Protocol (HTJP/1.0)",
    "ja": "RFC 8565 - ハイパーテキストJeopardy状態プロトコル（HTJP / 1.0）"
  },
  "number": 8565,
  "created_at": "2019-10-30 06:18:31.331244+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                     E. Fokschaner\nRequest for Comments: 8565                                  1 April 2019\nCategory: Informational\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Hypertext Jeopardy Protocol (HTJP/1.0)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The Hypertext Jeopardy Protocol (HTJP) inverts the request/response semantics of the Hypertext Transfer Protocol (HTTP). Using conventional HTTP, one connects to a server, asks a question, and expects a correct answer. Using HTJP, one connects to a server, sends an answer, and expects a correct question. This document specifies the semantics of HTJP.",
      "ja": "ハイパーテキストJeopardy状態プロトコル（HTJP）は、ハイパーテキスト転送プロトコル（HTTP）の要求/応答の意味を反転させます。従来のHTTPを使用して、一つは、サーバーに接続する質問をして、正しい答えを期待しています。 HTJPを使用して、1は、サーバに接続答えを送信し、正しい質問を期待しています。この文書では、HTJPのセマンティクスを指定します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not candidates for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "これは、独立して、他のRFCストリームの、RFCシリーズへの貢献です。 RFC Editorはその裁量でこの文書を公開することを選択し、実装や展開のためにその値についての声明を出すていません。 RFC編集者によって公表のために承認された文書はインターネットStandardのどんなレベルの候補ではありません。 RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8565.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttps://www.rfc-editor.org/info/rfc8565で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2019 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2019 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（https://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2\n2.  Conventions Used in This Document . . . . . . . . . . . . . .   3\n3.  Comparison with HTTP  . . . . . . . . . . . . . . . . . . . .   3\n4.  Response and Request Semantics  . . . . . . . . . . . . . . .   4\n  4.1.  Applicability of Postel's Robustness Principle  . . . . .   4\n  4.2.  Identifying the Server Associated with an HTJP Response .   5\n  4.3.  Temporal Considerations . . . . . . . . . . . . . . . . .   5\n  4.4.  Pseudo-Valid HTJP Messages  . . . . . . . . . . . . . . .   6\n  4.5.  HTTP Responses That Are Not Requestable . . . . . . . . .   6\n5.  Caches and Proxies  . . . . . . . . . . . . . . . . . . . . .   7\n6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   7\n7.  Security Considerations . . . . . . . . . . . . . . . . . . .   7\n  7.1.  Securing HTTP against HTJP  . . . . . . . . . . . . . . .   7\n    7.1.1.  Anti-HTJP-Nonce Header  . . . . . . . . . . . . . . .   8\n  7.2.  HTJPS . . . . . . . . . . . . . . . . . . . . . . . . . .   8\n8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   9\n  8.1.  Normative References  . . . . . . . . . . . . . . . . . .   9\n  8.2.  Informative References  . . . . . . . . . . . . . . . . .  10\nAppendix A.  Hypertext Double Jeopardy Protocol . . . . . . . . .  11\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  11\nAuthor's Address  . . . . . . . . . . . . . . . . . . . . . . . .  11",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Hypertext Jeopardy Protocol (HTJP) 1.0 is a stateless application-level response/request protocol that functions as the semantic inverse of the Hypertext Transfer Protocol (HTTP) 1.1 .",
      "ja": "ハイパーテキストJeopardy状態プロトコル（HTJP）1.0は、ハイパーテキスト転送プロトコル（HTTP）1.1のセマンティック逆数として機能するステートレスなアプリケーションレベルの応答/要求プロトコルです。"
    },
    {
      "indent": 3,
      "text": "It can roughly be specified in relation to HTTP by the following rules:",
      "ja": "これは、おおよそ以下のルールにより、HTTPとの関係で指定することができます。"
    },
    {
      "indent": 3,
      "text": "o Where an HTTP client would send an HTTP request message, an HTJP client would send an HTTP response message.",
      "ja": "HTTPクライアントは、HTTPリクエストメッセージを送信する場所O、HTJPクライアントは、HTTP応答メッセージを送信します。"
    },
    {
      "indent": 3,
      "text": "o Where an HTTP server would send an HTTP response message, an HTJP server would send an HTTP request message.",
      "ja": "HTTPサーバは、HTTPレスポンスメッセージを送信する場所O、HTJPサーバは、HTTPリクエストメッセージを送信します。"
    },
    {
      "indent": 3,
      "text": "o The HTTP request sent as an HTJP response should be an HTTP request that (if sent to the appropriate HTTP server) would elicit the HTTP response sent in the HTJP request.",
      "ja": "O HTJP応答として送信されるHTTPリクエストは、（適切なHTTPサーバに送信された場合）HTJP要求で送信されたHTTP応答を引き出すであろうHTTPリクエストであるべきです。"
    },
    {
      "indent": 3,
      "text": "HTJP is compatible with the HTTP/1.1 specification, at least in spirit, if not in letter.",
      "ja": "HTJPはならない文字で、少なくとも精神で、HTTP / 1.1仕様と互換性があります。"
    },
    {
      "indent": 3,
      "text": "HTJP has novel applications in all the following areas:",
      "ja": "HTJPは、以下のすべての分野における新規アプリケーションがあります。"
    },
    {
      "indent": 3,
      "text": "o Generative automated testing of HTTP implementations and HTTP-based applications.",
      "ja": "OジェネレーティブHTTP実装の自動テストおよびHTTPベースのアプリケーション。"
    },
    {
      "indent": 3,
      "text": "o Monitoring of HTTP-based applications in production.",
      "ja": "生産のHTTPベースのアプリケーションのOの監視。"
    },
    {
      "indent": 3,
      "text": "o Forensic and diagnostic reconstruction of HTTP requests from HTTP response logs.",
      "ja": "HTTPレスポンスログからのHTTPリクエストの法医学と診断復興O。"
    },
    {
      "indent": 3,
      "text": "o Discovery of first-party and third-party security vulnerabilities.",
      "ja": "Oファーストパーティとサードパーティのセキュリティの脆弱性の発見。"
    },
    {
      "indent": 0,
      "text": "2. Conventions Used in This Document",
      "section_title": true,
      "ja": "この文書で使用される2.表記"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. Comparison with HTTP",
      "section_title": true,
      "ja": "HTTPと3の比較"
    },
    {
      "indent": 3,
      "text": "It is a little-known fact that HTTP/1.1 already defines itself to be its own inverse mode of operation. Section 3.1 of RFC 7230 [RFC7230], which describes the start line of the HTTP message format, states:",
      "ja": "HTTP / 1.1はすでに操作の独自の逆モードであることを自分自身を定義することをほとんど知られていない事実です。 HTTPメッセージフォーマットの開始ラインを記述するRFC 7230 [RFC7230]のセクション3.1、状態："
    },
    {
      "indent": 6,
      "text": "In theory, a client could receive requests and a server could receive responses, distinguishing them by their different start-line formats, but, in practice, servers are implemented to only expect a request [...] and clients are implemented to only expect a response.",
      "ja": "理論的には、クライアントが要求を受け取ることができるし、サーバが応答を受け取ることができ、それらの異なるスタートライン形式でそれらを区別する、しかし、実際には、サーバーは、[...]のみの要求を期待するために実装され、クライアントが唯一の期待に実装されています応答。"
    },
    {
      "indent": 3,
      "text": "It is only convention that HTTP clients send HTTP requests and that HTTP servers send HTTP responses. Therefore, HTJP is just HTTP with some alternative conventions. It is not a distinct protocol. Furthermore, since all messages in HTJP are indistinguishable from HTTP messages, an HTJP peer would have no way of identifying itself explicitly as using HTJP rather than HTTP.",
      "ja": "これは、HTTPクライアントがHTTPリクエストを送信し、そのHTTPサーバは、HTTPレスポンスを送信することを唯一の大会です。したがって、HTJPはちょうどHTTPいくつかの代替の規則です。それは明確なプロトコルではありません。 HTJP内のすべてのメッセージは、HTTPメッセージから区別できないので、HTJPピアは、明示的にHTTPではなくHTJPを使用して、自身を特定する方法はありません。"
    },
    {
      "indent": 3,
      "text": "Therefore, we describe HTJP as a \"pseudo-protocol\" in order to distinguish clients, servers, and conversations that are using the HTTP conventions laid out in this document from those that use conventions that are more commonly associated with HTTP.",
      "ja": "したがって、我々は、より一般的にHTTPに関連付けられている規則を使用するものから、この文書にレイアウトされたHTTPの規則を使用しているクライアント、サーバ、および会話を区別するために「擬似プロトコル」としてHTJPを記述する。"
    },
    {
      "indent": 0,
      "text": "4. Response and Request Semantics",
      "section_title": true,
      "ja": "4.レスポンスとリクエストセマンティクス"
    },
    {
      "indent": 3,
      "text": "An HTJP request MUST be an HTTP response message. An HTJP response message MUST be an HTTP request message that, if issued to the appropriate HTTP server, would elicit the HTTP response specified by the HTJP request being replied to.",
      "ja": "HTJP要求は、HTTPレスポンスメッセージでなければなりません。 HTJP応答メッセージは、適切なHTTPサーバに発行された場合、に答えたさHTJP要求で指定されたHTTPレスポンスを引き出すだろうHTTPリクエストメッセージでなければなりません。"
    },
    {
      "indent": 3,
      "text": "As described in Section 3, HTJP is unconventional but valid HTTP, and so the entirety of the HTTP specification (as defined in [RFC7230], [RFC7231], [RFC7232], [RFC7233], [RFC7234], and [RFC7235]) MUST be respected when doing so is consistent with HTJP's unique semantics.",
      "ja": "第3節で説明したように、HTJPは、型にはまらないが、有効なHTTPであり、HTTP仕様（[RFC7230]で定義されるように、[RFC7231]、[RFC7232]、[RFC7233]、[RFC7234]及び[RFC7235]）のように全体HTJP独自のセマンティックと一致しているそう際に尊重されなければなりません。"
    },
    {
      "indent": 3,
      "text": "The following example illustrates a typical message exchange for an HTJP request concerning the same hypothetical server from Section 2.1 of RFC 7230 [RFC7230].",
      "ja": "次の例では、RFC 7230 [RFC7230]のセクション2.1から同じ仮定のサーバに関するHTJP要求のための典型的なメッセージ交換を示します。"
    },
    {
      "indent": 3,
      "text": "Client request:",
      "ja": "クライアントの要求："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK Date: Mon, 27 Jul 2009 12:28:53 GMT Server: Apache Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT ETag: \"34aa387-d-1568eb00\" Accept-Ranges: bytes Content-Length: 51 Vary: Accept-Encoding Content-Type: text/plain",
      "ja": "HTTP / 1.1 200 OK日：月、2009年7月27日12時28分53秒GMTサーバー：ApacheののLast-Modified：水曜日、2009年7月22日19時15分56秒GMTのETagを： \"34aa387-D-1568eb00\" のAccept-範囲：バイトコンテンツの長さ：51ヴァリ：-受け入れエンコードのContent-Type：/プレーンテキストを"
    },
    {
      "indent": 5,
      "text": "Hello World! My payload includes a trailing CRLF.",
      "ja": "\"こんにちは世界\"私のペイロードは、末尾のCRLFを含んでいます。"
    },
    {
      "indent": 3,
      "text": "Server response:",
      "ja": "サーバーの応答："
    },
    {
      "indent": 5,
      "text": "GET /hello.txt HTTP/1.1 Host: www.example.com",
      "ja": "GET /hello.txt HTTP / 1.1ホスト：www.example.com"
    },
    {
      "indent": 0,
      "text": "4.1. Applicability of Postel's Robustness Principle",
      "section_title": true,
      "ja": "4.1. ポステルの頑健性原理の適用"
    },
    {
      "indent": 3,
      "text": "Implementations of HTJP SHOULD respect Postel's Robustness Principle [IAB-PROTOCOL-MAINTENANCE].",
      "ja": "HTJPの実装は、ポステルのロバスト性原理[IAB-PROTOCOLメンテナンス]を尊重すべきです。"
    },
    {
      "indent": 3,
      "text": "Applied to HTJP, Postel's Robustness Principle implies that, given the choice of multiple valid HTJP responses for an HTJP request, one SHOULD prefer a response that is more adherent to the HTTP standard or uses fewer HTTP features. For example, sometimes a User-Agent header has no bearing on the HTTP response from an HTTP server. On seeing such a response in an HTJP request, an HTJP server could validly respond with a practically unlimited number of permutations on the User-Agent header value. However, it SHOULD prefer to respond with an HTTP request that has no User-Agent header whatsoever, in keeping with Postel's Robustness Principle.",
      "ja": "HTJPに適用され、ポステルの頑健性原理はHTJP要求のための複数の有効なHTJP応答の選択肢を考えると、1はHTTP標準により付着性であるか、少ないHTTP機能を使用して応答を好むべきである、ということを意味します。例えば、時々User-Agentヘッダは、HTTPサーバからHTTPレスポンスにはベアリングを有していません。 HTJP要求で、このような応答を見に、HTJPサーバが有効にUser-Agentヘッダの値の順列の事実上無制限の数に対応できます。しかし、それはポステルの頑健性の原則を踏まえて、一切のUser-Agentヘッダを持っていないHTTPリクエストに応答することを好むべきです。"
    },
    {
      "indent": 3,
      "text": "The same consideration applies when encountering an HTJP request for which there are both valid and \"pseudo-valid\" (Section 4.4) HTJP responses available.",
      "ja": "利用できる有効な「擬似有効」（セクション4.4）HTJP応答の両方が存在しているためHTJP要求に遭遇したとき、同じ考慮が適用されます。"
    },
    {
      "indent": 0,
      "text": "4.2. Identifying the Server Associated with an HTJP Response",
      "section_title": true,
      "ja": "4.2.  HTJP応答に関連付けられたサーバーの識別"
    },
    {
      "indent": 3,
      "text": "It may be of interest to a user of HTJP to try issuing an HTJP response as an HTTP request to the appropriate server. This brings up the issue of correctly identifying the host to which the HTJP response should be sent. Much of the time this will be able to be determined from the Host header field of the HTJP response. The Host header is required by conformant HTTP/1.1 requests. In the case that the Host header is not present (for example, if the HTJP response is an HTTP/1.0 request rather than HTTP/1.1), an HTJP response MAY use the absolute URI form in the HTTP request line, to add clarity about the target host if it would be validly accepted by the server. This specific example is complicated by the fact that prior to HTTP/1.1 it was not required that implementations accept the absolute URI form. For this reason, it is also possible to phrase the HTJP response as an HTTP request to a Forward Proxy server, which would have accepted, indeed needed, the absolute URI request line prior to and after HTTP/1.1. As a last resort, it may be possible to heuristically derive the target host of an HTJP response from the HTJP request; for example, the HTJP request may have absolute references to other HTTP resources that seem to come from the same host.",
      "ja": "これは、適切なサーバにHTTPリクエストとしてHTJP応答を発行しようとするHTJPのユーザにとって重要である可能性があります。これは正しくHTJP応答を送信すべきホストを特定の問題が表示されます。時間の多くは、これはHTJP応答のホストヘッダフィールドから決定することができるであろう。ホストヘッダーは準拠HTTP / 1.1リクエストによって要求されます。 （HTJP応答がHTTP / 1.0リクエストではなく、HTTP / 1.1である場合、例えば、）ホストヘッダが存在しないである場合には、HTJP応答は、約明瞭さを加えるために、HTTPリクエストラインに絶対URI形式を使用するかもしれターゲットホストには、有効にサーバーによって受け入れられるかどう。この具体例は前HTTP / 1.1には実装が絶対URI形式を受け入れることが必要とされなかったという事実によって複雑になります。このため、フレーズにも、実際に必要な、前にHTTP / 1.1と後の絶対URI要求ラインを受け入れていたフォワードプロキシサーバへのHTTP要求としてHTJP応答可能です。最後の手段として、ヒューリスティックHTJP要求からHTJP応答のターゲットホストを導出することが可能です。例えば、HTJP要求が同じホストから来ているように見える他のHTTPリソースへの絶対参照を有することができます。"
    },
    {
      "indent": 0,
      "text": "4.3. Temporal Considerations",
      "section_title": true,
      "ja": "4.3. 時間的な考慮事項"
    },
    {
      "indent": 3,
      "text": "When an HTJP response is issued, there is no guarantee that, by the time the response is received by an HTJP client, the HTTP server that is associated with said response will still reply with it. Providing any guarantee about \"when\" an HTTP server would reply with said response is obviously a theoretically unsolvable problem and therefore outside the scope of this HTJP specification. It is only required that the HTJP response be correct at some point in the range of the 32-bit Unix Timestamp; see \"Seconds Since the Epoch\" (Section 4.16) of Unix General Concepts [UNIX-General-Concepts].",
      "ja": "HTJP応答が発行されると、応答がHTJPクライアントによって受信された時点で、関連付けられているHTTPサーバが応答がまだそれに答えるだろうと述べ、保証はありません。いかなる保証を提供することで応答でしょうHTTPサーバが応答が明らかに理論的に解決不可能な問題であるため、このHTJP仕様の範囲外で言った「とき」。それだけHTJP応答が32ビットのUnixタイムスタンプの範囲の中でいくつかの点で正確であることが要求されます。 Unixの一般的な概念[UNIX-汎用概念]の「エポックからの秒数」（セクション4.16）を参照してください。"
    },
    {
      "indent": 3,
      "text": "HTJP servers that are responding with an HTTP request for a volatile resource, and with high confidence in the time range at which the resource would be in the state described by the HTJP request, MAY add a Date header to the HTJP response. This is in conformance with the ability for HTTP requests to carry a Date header; see Section 7.1.1.2 of [RFC7231].",
      "ja": "HTJPの揮発性リソースに対するHTTP要求に応答しているサーバ、およびリソースはHTJP要求によってこの状態にあるはずの時間帯に高い信頼度では、HTJP応答にDateヘッダを加えるかもしれ。これは、Dateヘッダを運ぶためにHTTPリクエストのための能力に適合しています。 [RFC7231]のセクション7.1.1.2を参照してください。"
    },
    {
      "indent": 3,
      "text": "HTJP clients can try to demand more temporal certainty by adding a Date header to their HTTP response, embedding criteria for the time of the HTTP response in the HTTP response itself. Of course, the client might still only receive that exact HTTP response if it manages to deliver the HTTP request at the precise time of the previously requested Date header, and even then it is still not guaranteed due to HTTP caching et cetera.",
      "ja": "HTJPクライアントはHTTPレスポンス自体におけるHTTP応答の時間基準を埋め込み、そのHTTPレスポンスにDateヘッダを追加することによって、より多くの時間的確実性を要求しようとすることができます。それは以前に要求された日付ヘッダの正確な時にHTTPリクエストを提供するために管理している場合もちろん、クライアントはまだだけで正確なHTTPレスポンスを受信することがあり、その場合でも、それはまだによるHTTPキャッシングエトセトラに保証するものではありません。"
    },
    {
      "indent": 0,
      "text": "4.4. Pseudo-Valid HTJP Messages",
      "section_title": true,
      "ja": "4.4. 擬似有効HTJPメッセージ"
    },
    {
      "indent": 3,
      "text": "In the wild, HTTP clients and servers have been known to occasionally exchange HTTP messages that are not conformant to any HTTP specification. For this reason, we will identify a class of messages that are, on the one hand, invalid HTTP messages, yet at the same time, correctly answerable HTJP requests or correct answers to an HTJP request, as \"pseudo-valid\" HTJP messages.",
      "ja": "野生では、HTTPクライアントとサーバは時折任意のHTTP仕様に準拠していないHTTPメッセージを交換することが知られています。このような理由から、私たちは、一方では、不正なHTTPメッセージ、まだ同時に、正しく釈明HTJP要求または「擬似有効」HTJPメッセージなどHTJP要求に正解、上、あるメッセージのクラスを識別します。"
    },
    {
      "indent": 3,
      "text": "Consider, for example, an HTTP server that erroneously reports a Content-Length header field of zero when sending an HTTP payload of non-zero length. Despite this HTTP message violating the HTTP specification, it is possible for an HTJP server to receive such a message and correctly respond to it, satisfying the HTJP semantics in doing so.",
      "ja": "例えば、非ゼロ長のHTTPペイロードを送信する際に誤ってゼロのContent-Lengthヘッダフィールドを報告するHTTPサーバを考えます。 HTJPサーバは、このようなメッセージが表示され、正しくそうすることでHTJPセマンティクスを満たす、それに応答するためにHTTPの仕様に違反し、このHTTPメッセージにもかかわらず、それが可能です。"
    },
    {
      "indent": 3,
      "text": "This applies to both HTJP requests and HTJP responses. There may be times when the only valid HTJP response is an invalid HTTP request. When there are both valid and invalid HTTP requests that could satisfy the HTJP request, Postel's Robustness Principle SHOULD be applied, as described in Section 4.1.",
      "ja": "これはHTJP要求とHTJP応答の両方に適用されます。唯一の有効なHTJP応答が無効なHTTPリクエストである場合があるかもしれません。 HTJP要求を満たすことができ、両方の有効および無効なHTTP要求がある場合、セクション4.1で説明したように、ポステルの頑健性の原則は、適用されるべきです。"
    },
    {
      "indent": 0,
      "text": "4.5. HTTP Responses That Are Not Requestable",
      "section_title": true,
      "ja": "4.5. 要求可能されていないHTTP応答"
    },
    {
      "indent": 3,
      "text": "Given that an HTJP response MUST be an HTTP request, and that HTTP requests do not have a status field (such as a status code), there is no way for an HTJP response to signal a failure in response to an HTJP request, via a status code or otherwise. The correct HTJP response to an HTJP request when a server cannot determine an HTTP request that elicits the HTTP response is to not respond at all. The HTJP responder MAY close the connection; however, the HTJP requester MUST NOT interpret the closing of the connection as a response. This can have issues when HTJP servers are hosted behind non-HTJP-aware HTTP proxies, as the proxy may inject a 5xx HTTP response, which could be misinterpreted as an HTJP response. See more on proxies in Section 5.",
      "ja": "HTJP応答がHTTPリクエストでなければならない、そのHTTP要求が（例えば、ステータスコードなど）ステータス・フィールドを持っていないことを考えると、経由して、HTJP応答がHTJP要求への応答に失敗したことを合図するための方法はありませんステータスコードまたはそれ以外の場合は。サーバはHTTPレスポンスが全く応答しないことです誘発HTTPリクエストを決定することはできませんHTJP要求に対する正しいHTJP応答。 HTJP応答者は、接続を閉じてもよい（MAY）。しかし、HTJP依頼者は応答として、接続の閉鎖を解釈してはなりません。これは、プロキシがHTJP応答として誤って解釈される可能性がの5xx HTTPレスポンスを、注入することができるようHTJPサーバは、非HTJP対応のHTTPプロキシの後ろにホストされているとき、問題を持つことができます。第5節でのプロキシの詳細を参照してください。"
    },
    {
      "indent": 0,
      "text": "5. Caches and Proxies",
      "section_title": true,
      "ja": "5.キャッシュとプロキシ"
    },
    {
      "indent": 3,
      "text": "Despite being valid HTTP traffic, support for caching and proxying of HTJP traffic is unfortunately not widespread. It is estimated that currently approximately 0.0% of all HTTP-aware intermediaries gracefully handle HTJP traffic. For this reason, it is currently RECOMMENDED that HTJP should not be deployed behind an HTTP proxying or caching layer. Support will likely increase proportionally to HTJP's popularity in production.",
      "ja": "有効なHTTPトラフィックであるにもかかわらず、HTJPトラフィックのキャッシュとプロキシのサポートは残念ながら普及していないです。現在では、すべてのHTTP対応の仲介の約0.0％が正常HTJPトラフィックを処理すると推定されています。このため、現在HTJPがHTTPプロキシまたはキャッシング層の背後に展開すべきではないことが推奨されます。サポートは、おそらく生産でHTJPの人気に比例して増加します。"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "In order that implementations of this specification can operate correctly, and in accordance with [BCP90], the following new HTTP header field would need to be registered in the \"Message Headers\" registry maintained at <https://www.iana.org/assignments/message-headers/>. To find out the details of this registration, an application should send an HTJP request to a suitable server specifying the Anti-HTJP-Nonce value that the server would have supplied had the IANA registration been made.",
      "ja": "この仕様の実装が正しく動作することができ、そして[BCP90]に従って、次の新たなHTTPヘッダフィールドは<https://www.iana.org/で維持「メッセージヘッダ」レジストリに登録される必要があるようにするために割り当て/メッセージのヘッダー/>。この登録の詳細を調べるには、アプリケーションはIANA登録が行われていたサーバが供給しているであろうとアンチHTJP-Nonceの値を指定して、適切なサーバにHTJP要求を送信する必要があります。"
    },
    {
      "indent": 5,
      "text": "+-------------------+----------+---------------+---------------+\n| Header Field Name | Protocol | Status        | Reference     |\n+-------------------+----------+---------------+---------------+\n| Anti-HTJP-Nonce   | http     | informational | Section 7.1.1 |\n+-------------------+----------+---------------+---------------+",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7.セキュリティの考慮事項"
    },
    {
      "indent": 0,
      "text": "7.1. Securing HTTP against HTJP",
      "section_title": true,
      "ja": "7.1.  HTJPに対してHTTPのセキュリティ保護"
    },
    {
      "indent": 3,
      "text": "An incomplete implementation of HTJP is inadvisable from a security perspective. A complete implementation of HTJP may have interesting security features that are worthy of detailed examination. Due to its semantics, the issuing of a successfully authorized HTTP response to an HTJP server will result in a reply containing the HTTP request that elicits said response, including any credentials, tokens, cookies, or other authorization materials that were required to elicit that response.",
      "ja": "HTJPの不完全な実装では、セキュリティの観点からお勧めできません。 HTJPの完全な実装は、詳細な検討の価値がある、興味深いセキュリティ機能を有することができます。その意味論のため、HTJPサーバに成功し、許可HTTPレスポンスの発行は、その応答を惹起することを要求された資格情報、トークン、クッキー、または他の認証材を含む応答を、言っ誘発HTTPリクエストを含む応答になります。"
    },
    {
      "indent": 3,
      "text": "As an example:",
      "ja": "例として："
    },
    {
      "indent": 3,
      "text": "Client request:",
      "ja": "クライアントの要求："
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 200 OK Date: Mon, 27 Jul 2009 12:28:53 GMT Content-Length: 61 Content-Type: text/plain",
      "ja": "HTTP / 1.1 200 OK日：月、2009年7月27日12時28分53秒GMTのコンテンツの長さ：61のContent-Type：text / plainの"
    },
    {
      "indent": 5,
      "text": "Some predictable information accessed using authorization.",
      "ja": "いくつかの予測可能な情報には、認証を使用してアクセス。"
    },
    {
      "indent": 3,
      "text": "Server response: (line breaks in the Authorization header are for RFC formatting)",
      "ja": "サーバーの応答：（Authorizationヘッダーでの改行は、RFCの書式設定のためのものです）"
    },
    {
      "indent": 5,
      "text": "GET /information.txt HTTP/1.1 Host: authorised-usage-service.example.com Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiJodGpwIiwibmFtZSI6IkV2ZXJ5b25lIiwiaWF0IjowfQ. JOL-kIObgTI0MzFfm1yVFFkIo1xf7DZGjY_oedRBZW0",
      "ja": "GET /information.txt HTTP / 1.1ホスト：authorised-usage-service.example.com認証：ベアラeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9。 eyJzdWIiOiJodGpwIiwibmFtZSI6IkV2ZXJ5b25lIiwiaWF0IjowfQ。 JOL-kIObgTI0MzFfm1yVFFkIo1xf7DZGjY_oedRBZW0"
    },
    {
      "indent": 3,
      "text": "Given that we cannot prevent anyone from attempting to implement HTJP, it is RECOMMENDED to consider how HTJP impacts security when using HTTP.",
      "ja": "我々はHTJPを実装しようとするから誰を防ぐことができないことを考えると、HTTPを使用した場合どのようにHTJP影響を与えるセキュリティを検討することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "Note that it was only possible to query for the credentialed HTTP request because the response to the authorized request was predictable. HTTP servers could mitigate this vulnerability exposed by HTJP by only serving a response that is at least as secret as the credentials themselves in response to an authorized request.",
      "ja": "許可要求に対する応答が予測可能だったので、資格認定HTTPリクエストを照会するだけで可能であったことに注意してください。 HTTPサーバーのみ許可要求に応答して、少なくとも資格情報そのものとしての秘密のようである応答を提供することによってHTJPによって公開されたこの脆弱性を軽減することができます。"
    },
    {
      "indent": 0,
      "text": "7.1.1. Anti-HTJP-Nonce Header",
      "section_title": true,
      "ja": "7.1.1. アンチHTJP-ナンスヘッダー"
    },
    {
      "indent": 3,
      "text": "A generic solution to this problem is to use an \"Anti-HTJP-Nonce\" HTTP header in HTTP responses. The value of an \"Anti-HTJP-Nonce\" header SHOULD be a cryptographically secure random number in any encoding that is valid for an HTTP header value. The length of this number SHOULD be determined by the producer of the HTTP response, accounting for their method of random number generation and their threat model.",
      "ja": "この問題に対する一般的な解決策は、HTTP応答で「アンチHTJP-ナンス」HTTPヘッダーを使用することです。 「抗HTJP-ノンス」ヘッダの値は、HTTPヘッダー値に有効である任意のエンコーディングに暗号学的に安全な乱数であるべきです。この数の長さは、乱数生成のそれらの方法およびそれらの脅威モデルを占め、HTTPレスポンスの生産者によって決定されるべきです。"
    },
    {
      "indent": 0,
      "text": "7.2. HTJPS",
      "section_title": true,
      "ja": "7.2.  HTJPS"
    },
    {
      "indent": 3,
      "text": "HTJP, being just HTTP, has most of the same security concerns and features as HTTP itself. For example, the use of HTJP over an encrypted connection, such as TLS 1.3 [RFC8446], similar to HTTP Secure (HTTPS), is referred to as HTJP Secure (HTJPS). However, it is important to note that, unlike with HTTPS, it is not expected that the hostname you are securely communicating with is the same hostname as featured in the Host headers or absolute URIs of the HTJP messages themselves, as HTJP messages are typically referring to other HTTP hosts. This excludes the case of a server that supports both conventional HTTP and HTJP, where it is possible to make HTJP requests securely to the same host that is also the subject of the HTJP requests being made.",
      "ja": "HTJPは、単にHTTPであること、HTTP自体と同じセキュリティ上の懸念や機能のほとんどを持っています。例えば、（HTTPS）、セキュアHTTPと同様例えばTLS 1.3のような暗号化接続を介しHTJPの使用、[RFC8446]は、（HTJPS）セキュアHTJPと呼ばれています。しかし、HTTPSとは異なり、HTJPメッセージは、一般的に言及されているとして、あなたがしっかりと通信しているホスト名がホストヘッダーまたはHTJPメッセージ自体の絶対的なURIで特色と同じホスト名であることが期待されていない、ということに注意することが重要です他のHTTPホストへ。また、行われHTJP要求の対象である同じホストに安全HTJP要求を行うことが可能であり、従来のHTTPとHTJPの両方をサポートするサーバーの場合を除きます。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8.参照文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <https://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230]フィールディング、R.、エド。及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：メッセージの構文およびルーティング\"、RFC 7230、DOI 10.17487 / RFC7230、2014年6月、<https://www.rfc-editor.org/info/ rfc7230>。"
    },
    {
      "indent": 3,
      "text": "[RFC7231] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\", RFC 7231, DOI 10.17487/RFC7231, June 2014, <https://www.rfc-editor.org/info/rfc7231>.",
      "ja": "[RFC7231]フィールディング、R.、エド。そして、J. Reschke、エド、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：セマンティクスおよびコンテンツ\"、RFC 7231、DOI 10.17487 / RFC7231、2014年6月、<https://www.rfc-editor.org/info/rfc7231 >。"
    },
    {
      "indent": 3,
      "text": "[RFC7232] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\", RFC 7232, DOI 10.17487/RFC7232, June 2014, <https://www.rfc-editor.org/info/rfc7232>.",
      "ja": "[RFC7232]フィールディング、R.、エド。そして、J. Reschke、エド、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：条件付きリクエスト\"、RFC 7232、DOI 10.17487 / RFC7232、2014年6月、<https://www.rfc-editor.org/info/rfc7232> 。"
    },
    {
      "indent": 3,
      "text": "[RFC7233] Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\", RFC 7233, DOI 10.17487/RFC7233, June 2014, <https://www.rfc-editor.org/info/rfc7233>.",
      "ja": "[RFC7233]フィールディング、R.、エド、ラフォン、Y.、エド、及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：範囲要求\"。。。、RFC 7233、DOI 10.17487 / RFC7233 6月2014年、<https://www.rfc-editor.org/info/rfc7233>。"
    },
    {
      "indent": 3,
      "text": "[RFC7234] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\", RFC 7234, DOI 10.17487/RFC7234, June 2014, <https://www.rfc-editor.org/info/rfc7234>.",
      "ja": "[RFC7234]フィールディング、R.、エド、ノッティンガム、M.、エド、及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：キャッシュ\"。。。、RFC 7234、DOI 10.17487 / RFC7234、2014年6月、<https://www.rfc-editor.org/info/rfc7234>。"
    },
    {
      "indent": 3,
      "text": "[RFC7235] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Authentication\", RFC 7235, DOI 10.17487/RFC7235, June 2014, <https://www.rfc-editor.org/info/rfc7235>.",
      "ja": "[RFC7235]フィールディング、R.、エド。及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：認証\"、RFC 7235、DOI 10.17487 / RFC7235、2014年6月、<https://www.rfc-editor.org/info/rfc7235>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B.、 \"RFC 2119個のキーワードに小文字VS大文字の曖昧さ\"、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[UNIX-General-Concepts] \"General Concepts\", Chapter 4 of \"The Open Group Base Specifications, Issue 7\", 2018 edition, IEEE Std 1003.1-2017, 2018, <http://pubs.opengroup.org/ onlinepubs/9699919799/basedefs/V1_chap04.html>.",
      "ja": "[UNIX-汎用概念] \"一般的な概念\"、第4章 \"Open Groupの基本仕様、7号\"、2018年版、IEEE STD 1003.1から2017、2018、<http://pubs.opengroup.org/ onlinepubs / 9699919799 / basedefs / V1_chap04.html>。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[BCP90] Klyne, G., Nottingham, M., and J. Mogul, \"Registration Procedures for Message Header Fields\", BCP 90, RFC 3864, September 2004, <https://www.rfc-editor.org/info/bcp90>.",
      "ja": "[BCP90] Klyne、G.、ノッティンガム、M.、およびJ.モーグル、 \"メッセージヘッダフィールドの登録手順\"、BCP 90、RFC 3864、2004年9月、<https://www.rfc-editor.org/info / bcp90>。"
    },
    {
      "indent": 3,
      "text": "[IAB-PROTOCOL-MAINTENANCE] Thomson, M., \"The Harmful Consequences of the Robustness Principle\", Work in Progress, draft-iab-protocol-maintenance-02, March 2019.",
      "ja": "[IAB-PROTOCOL-MAINTENANCE]トムソン、M.、 \"頑健性原則の有害な結果\" が進行中で働いて、ドラフトIABプロトコル・メンテナンス-02、2019年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC8446] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018, <https://www.rfc-editor.org/info/rfc8446>.",
      "ja": "[RFC8446]レスコラ、E.、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.3\"、RFC 8446、DOI 10.17487 / RFC8446、2018年8月、<https://www.rfc-editor.org/info/rfc8446>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Hypertext Double Jeopardy Protocol",
      "ja": "付録A.ハイパーテキスト二重の危険プロトコル"
    },
    {
      "indent": 3,
      "text": "Also worth mentioning, in case one encounters it in the wild, is the Hypertext Double Jeopardy Protocol (HTJ2P). The Hypertext Double Jeopardy Protocol 1.0 is a stateless application-level request/ response protocol that functions as the inverse of the Hypertext Jeopardy Protocol (HTJP) 1.0 .",
      "ja": "また、価値が言及、1は野生でそれに遭遇した場合には、ハイパーテキスト二重の危険プロトコル（HTJ2P）です。ハイパーテキスト二重の危険プロトコル1.0は、ハイパーテキストJeopardy状態プロトコル（HTJP）1.0の逆数として機能するステートレスなアプリケーションレベル要求/応答プロトコルです。"
    },
    {
      "indent": 3,
      "text": "An HTJ2P response MUST be an HTTP response which would be issued for an HTTP request delivered as the HTJ2P request. Implementations of HTJ2P have groundbreaking potential in the fields of HTTP caching, and in the implementation of HTJP.",
      "ja": "HTJ2P応答はHTJ2P要求として配信HTTPリクエストのために発行されるだろうHTTPレスポンスでなければなりません。 HTJ2Pの実装はHTTPキャッシングの分野での可能性を画期的、かつHTJPの実装でいます。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The author thanks Alex Trebek for his distinguished contributions to culture and society. The author thanks Peter Phillips for the suggestion of the Anti-HTJP-Nonce header. The author also wishes to thank anyone who has ever built a tool or a technology that made people ask \"Why?\".",
      "ja": "文化や社会への彼の著名な貢献のための著者のおかげでアレックス・トレベック。アンチHTJP-Nonceのヘッダの提案のための著者のおかげでピーター・フィリップス。著者はまた、これまでのツールや、人々は「なぜ？」と作られた技術を構築したことのある人に感謝したいです。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Edmund Fokschaner",
      "ja": "エドモンドFokschaner"
    },
    {
      "indent": 3,
      "text": "Email: edfokschaner@gmail.com",
      "ja": "メール：edfokschaner@gmail.com"
    }
  ]
}