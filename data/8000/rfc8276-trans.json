{
  "title": {
    "text": "RFC 8276 - File System Extended Attributes in NFSv4",
    "ja": "RFC 8276 - NFSv4のファイルシステム拡張属性"
  },
  "number": 8276,
  "created_at": "2019-10-27 17:55:47.631966+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                           M. Naik\nRequest for Comments: 8276                                       Nutanix\nCategory: Standards Track                                       M. Eshel\nISSN: 2070-1721                                              IBM Almaden\n                                                           December 2017",
      "raw": true
    },
    {
      "indent": 16,
      "text": "File System Extended Attributes in NFSv4",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes an optional feature extending the NFSv4 protocol. This feature allows extended attributes (hereinafter also referred to as xattrs) to be interrogated and manipulated using NFSv4 clients. Xattrs are provided by a file system to associate opaque metadata, not interpreted by the file system, with files and directories. Such support is present in many modern local file systems. New file attributes are provided to allow clients to query the server for xattr support, with that support consisting of new operations to get and set xattrs on file system objects.",
      "ja": "この文書では、NFSv4のプロトコルを拡張するオプションの機能について説明します。この機能は、拡張属性（以下もxattrsとも呼ばれる）尋問とのNFSv4クライアントを使用して操作することを可能にします。 Xattrsは、ファイルやディレクトリで、ファイルシステムによって解釈されない、不透明なメタデータを関連付けるために、ファイルシステムによって提供されています。このようなサポートは、多くの近代的なローカルファイルシステムに存在しています。新しいファイル属性は、クライアントがそのサポートがファイル・システム・オブジェクトのxattrsを取得および設定するための新しい事業からなるとともに、xattrのサポートのためにサーバーを照会することを可能にするために設けられています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 7841のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8276.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttps://www.rfc-editor.org/info/rfc8276で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2017 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2017 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（https://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4\n  1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   5\n2.  Uses of Extended Attributes . . . . . . . . . . . . . . . . .   5\n3.  Functional Gaps Due to Lack of NFSv4 Extended Attribute\n    Support . . . . . . . . . . . . . . . . . . . . . . . . . . .   5\n4.  File System Support for Extended Attributes . . . . . . . . .   6\n5.  Namespaces  . . . . . . . . . . . . . . . . . . . . . . . . .   7\n6.  Relationship with Named Attributes  . . . . . . . . . . . . .   7\n7.  XDR Description . . . . . . . . . . . . . . . . . . . . . . .   8\n  7.1.  Code Components Licensing Notice  . . . . . . . . . . . .   9\n  7.2.  XDR for Xattr Extension . . . . . . . . . . . . . . . . .  11\n8.  Protocol Extensions . . . . . . . . . . . . . . . . . . . . .  11\n  8.1.  New Definitions . . . . . . . . . . . . . . . . . . . . .  11\n  8.2.  New Attribute . . . . . . . . . . . . . . . . . . . . . .  12\n    8.2.1.  xattr_support . . . . . . . . . . . . . . . . . . . .  12\n  8.3.  New Error Definitions . . . . . . . . . . . . . . . . . .  12\n    8.3.1.  NFS4ERR_NOXATTR (Error Code 10095)  . . . . . . . . .  12\n    8.3.2.  NFS4ERR_XATTR2BIG (Error Code 10096)  . . . . . . . .  13\n  8.4.  New Operations  . . . . . . . . . . . . . . . . . . . . .  13\n    8.4.1.  GETXATTR - Get an Extended Attribute of a File  . . .  14\n    8.4.2.  SETXATTR - Set an Extended Attribute of a File  . . .  15\n    8.4.3.  LISTXATTRS - List Extended Attributes of a File . . .  17\n    8.4.4.  REMOVEXATTR - Remove an Extended Attribute of a File   18\n    8.4.5.  Valid Errors  . . . . . . . . . . . . . . . . . . . .  19\n  8.5.  Modifications to Existing Operations  . . . . . . . . . .  21\n  8.6.  Numeric Values Assigned to Protocol Extensions  . . . . .  22\n  8.7.  Caching . . . . . . . . . . . . . . . . . . . . . . . . .  23\n  8.8.  Xattrs and File Locking . . . . . . . . . . . . . . . . .  25\n  8.9.  pNFS Considerations . . . . . . . . . . . . . . . . . . .  25\n9.  Security Considerations . . . . . . . . . . . . . . . . . . .  25\n10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  25\n11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  26\n  11.1.  Normative References . . . . . . . . . . . . . . . . . .  26\n  11.2.  Informative References . . . . . . . . . . . . . . . . .  27\nAcknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  28\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  28",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "Extended attributes, also called xattrs, are a means to associate opaque metadata with file system objects, organized as key/value pairs. They are especially useful when they add information that is not, or cannot be, present in the associated object itself. User-space applications can arbitrarily create, interrogate, and modify the key/value pairs.",
      "ja": "またxattrs呼ばれる拡張属性は、キー/値のペアとして編成されたファイルシステムオブジェクト、不透明なメタデータを関連付けるための手段です。彼らは、関連するオブジェクト自体に存在しない、またはできない情報を、追加するときに特に便利です。ユーザ空間のアプリケーションは任意に作成、問い合わせ、およびキー/値のペアを変更することができます。"
    },
    {
      "indent": 3,
      "text": "Extended attributes are file system agnostic; applications use an interface not specific to any file system to manipulate them. Applications are not concerned about how the key/value pairs are stored internally within the underlying file system. All major operating systems provide facilities to access and modify extended attributes. Many user-space tools allow xattrs to be included together with regular attributes that need to be preserved when objects are updated, moved, or copied.",
      "ja": "拡張属性には依存しないファイルシステムです。アプリケーションは、それらを操作するために、任意のファイルシステムに固有ではないインタフェースを使用します。アプリケーションは、キー/値ペアが基本的なファイルシステム内で内部的に保存されているかを心配していません。すべての主要なオペレーティングシステムは、拡張属性にアクセスして変更する機能を提供します。多くのユーザ空間のツールはxattrsは、オブジェクトが更新されたときに保存する必要が通常の属性と一緒に含めることができるように、移動、またはコピー。"
    },
    {
      "indent": 3,
      "text": "Extended attributes have not previously been included within the NFSv4 specification. Some issues that need to be addressed in order to be included are that, as with named attributes, some aspects of the handling of xattrs are not precisely defined and xattrs are not formally documented by any standard such as POSIX [POSIX]. Nevertheless, it appears that xattrs are widely deployed, and their support in modern disk-based file systems is nearly universal.",
      "ja": "拡張属性は、以前のNFSv4仕様に含まれていません。含まれるためには対処する必要があるいくつかの問題は、名前付き属性を持つよう、xattrsの取り扱いのいくつかの側面が正確に定義されていないとxattrsが正式なPOSIX [POSIX]など任意の標準によって文書化されていない、ということです。それにもかかわらず、xattrsが広く展開されており、近代的なディスクベースのファイルシステムでのサポートはほぼ普遍的であることが表示されます。"
    },
    {
      "indent": 3,
      "text": "There is no current specification of how xattrs could be mapped to any existing file attributes defined in the NFSv4 protocol [RFC5661] [RFC7530] [RFC7862]. As a result, most NFSv4 client implementations ignore application-specified xattrs. This state of affairs results in data loss if one copies, over the NFSv4 protocol, a file with xattrs from one file system to another that also supports xattrs.",
      "ja": "xattrsはNFSv4のプロトコル[RFC5661] [RFC7530] [RFC7862]で定義された既存のファイル属性にマッピングすることができる方法のない現在の仕様ではありません。その結果、ほとんどのNFSv4クライアントの実装では、アプリケーションが指定したxattrsを無視します。事務のこの状態は、データの損失につながる場合はNFSv4プロトコル上の1つのコピー、またxattrsをサポートして別のファイルシステムからxattrsを持つファイル。"
    },
    {
      "indent": 3,
      "text": "There is thus a need to provide a means by which such data loss can be avoided. This will involve exposing xattrs within the NFSv4 protocol, despite the lack of completely compatible file system implementations.",
      "ja": "そのようなデータの損失を回避することができる手段を提供する必要があります。これは、完全に互換性のあるファイルシステム実装の欠如にもかかわらず、のNFSv4プロトコル内xattrsを露出含むであろう。"
    },
    {
      "indent": 3,
      "text": "This document discusses (in Section 5) the reasons that NFSv4-named attributes, as currently standardized in [RFC5661], are unsuitable for representing xattrs. Instead, it describes a separate protocol mechanism to support xattrs. As a consequence, xattrs and named attributes will both be OPTIONAL features with servers free to support either, both, or neither.",
      "ja": "このドキュメント（セクション5）として現在[RFC5661]で標準化NFSv4の名前の属性が、xattrsを表現するため不適当であることの理由を説明します。代わりに、それはxattrsをサポートするために、別のプロトコルのメカニズムについて説明します。その結果、xattrsと命名された属性は、その両方をサポートして自由にサーバ、両方、またはどちらとオプション機能となります。"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Uses of Extended Attributes",
      "section_title": true,
      "ja": "拡張属性の使用方法2"
    },
    {
      "indent": 3,
      "text": "Applications can store tracking information in extended attributes. Examples include storing metadata identifying the application that created the file, a tag to indicate when the file was last verified by a data integrity scrubber, or a tag to hold a checksum/crypto hash of the file contents along with the date of that signature. Xattrs can also be used for decorations or annotations. For example, a file downloaded from a web server can be tagged with the URL, which can be convenient if its source has to be determined in the future. Likewise, an email attachment, when saved, can be tagged with the message-id of the email, making it possible to trace the original message.",
      "ja": "アプリケーションは、拡張属性に追跡情報を格納することができます。例には、格納したファイルを作成したアプリケーションを特定するメタデータ、ファイルデータの整合性スクラバーによって最後に確認されたときを示すためのタグ、又はその署名の日付と一緒にファイルの内容のチェックサム/暗号ハッシュを保持するタグが含まれます。 Xattrsも装飾や注釈のために使用することができます。例えば、Webサーバからダウンロードしたファイルは、そのソースが、将来的に決定されなければならない場合に便利なことができ、URLでタグ付けすることができます。同様に、保存された電子メールの添付ファイルは、それが可能な元のメッセージを追跡すること、電子メールのメッセージIDでタグ付けすることができます。"
    },
    {
      "indent": 3,
      "text": "Applications may need to behave differently when handling files of varying types. For example, file managers, such as GNOMEs, offer unique icons, different click behavior, and special lists of operations to perform depending on the file format. This can be achieved by looking at the file extension (Windows), or the type can be interpreted by inspecting it (Unix MIME type). Some file managers generate this information on the fly; others generate the information once and then cache it. Those that cache the information tend to put it in a custom database. The file manager must work to keep this database in sync with the files, which can change without the file manager's knowledge. A better approach is to dispense with the custom database and store such metadata in extended attributes. This is easier to maintain, provides faster access, and is readily accessible by applications [Love].",
      "ja": "アプリケーションは、さまざまな種類のファイルを扱う際に異なる動作をする必要があるかもしれません。たとえば、GNOMEたちなどのファイルマネージャは、ファイル形式に応じて、実行するために独自のアイコン、異なるクリック動作、およびオペレーションの特殊なリストを提供します。これは、ファイルの拡張子（Windowsの場合）を調べることで達成することができ、またはタイプは（UnixのMIMEタイプ）検査によって解釈することができます。一部のファイルマネージャはその場で、この情報を生成します。他の人が一度情報を生成し、それをキャッシュします。情報をキャッシュするものは、カスタムデータベースにそれを置く傾向があります。ファイルマネージャは、ファイルマネージャの知識なしに変更することができ、ファイル、と同期して、このデータベースを維持するために働かなければなりません。より良いアプローチは、カスタムデータベースを省略し、拡張属性で、このようなメタデータを格納することです。これは、保守が容易で高速なアクセスを提供し、アプリケーションの[愛]によって容易にアクセス可能です。"
    },
    {
      "indent": 0,
      "text": "3. Functional Gaps Due to Lack of NFSv4 Extended Attribute Support",
      "section_title": true,
      "ja": "NFSv4の拡張属性のサポートが不足しているため3.機能のギャップ"
    },
    {
      "indent": 3,
      "text": "In addition to the prospect of data loss (discussed in Section 1) that arises from use of xattrs on local file systems, application use of xattrs poses further difficulties given the current lack of xattr support within NFSv4. As a result, certain applications may not be supported by NFSv4 or may be supported in an unsatisfactory way. Some examples are discussed below.",
      "ja": "ローカルファイルシステム上のxattrsの使用に起因するデータの損失（セクション1で説明した）の見通しに加えて、xattrsのアプリケーションの使用は、NFSv4の内れるxattrサポートの現在の欠如を与え、さらに問題を提起します。結果として、特定のアプリケーションはNFSv4のによってサポートされていないか、または不満足な方法で支持することができます。いくつかの例を以下に説明されています。"
    },
    {
      "indent": 3,
      "text": "Swift, the OpenStack distributed object store, uses xattrs to store an object's metadata along with all the data together in one file. Swift-on-File [Swift] transfers the responsibility of maintaining object durability and availability to the underlying file system. At the time of writing, this requires a native file system client to mount the volumes. Xattr support in NFSv4 would open up the possibility of storing and consuming data from other storage systems and facilitate the migration of data between different backend storage systems.",
      "ja": "スウィフト、OpenStackの分散オブジェクトストアは、一つのファイルにまとめ、すべてのデータと共に、オブジェクトのメタデータを格納するためにxattrsを使用しています。スウィフト・オン・ファイル[スウィフト]は基本的なファイルシステムへのオブジェクトの耐久性と可用性を維持する責任を転送します。執筆時点では、これは、ボリュームをマウントするネイティブファイルシステムクライアントが必要です。 NFSv4の内れるxattrサポートは、他のストレージシステムからのデータを格納し、消費の可能性を開いて、異なるバックエンド・ストレージ・システム間のデータの移行を容易にするであろう。"
    },
    {
      "indent": 3,
      "text": "Baloo, the file indexing and search framework for Key Distribution Exchange (KDE), has moved to storing metadata such as tags, ratings, and comments in file system xattrs instead of a custom database for simplicity. Starting with KDE Plasma 5.1, NFS is no longer supported due to its lack of xattr support [KDE].",
      "ja": "Baloo、ファイルのインデックスとキー配布所（KDE）の検索フレームワークは、そのようなタグ、評価、および代わりに簡単にするためにカスタムデータベースのファイルシステムxattrsのコメントなどのメタデータを保存するに移動しました。 KDEプラズマ5.1以降では、NFSは、もはや原因xattrのサポート[KDE]の欠如にサポートされていません。"
    },
    {
      "indent": 0,
      "text": "4. File System Support for Extended Attributes",
      "section_title": true,
      "ja": "拡張属性4.ファイルシステムのサポート"
    },
    {
      "indent": 3,
      "text": "Extended attributes are supported by most modern file systems.",
      "ja": "拡張属性は、最も近代的なファイルシステムによってサポートされています。"
    },
    {
      "indent": 3,
      "text": "Some of the file systems that support extended attributes in Linux are as follows: ext3, ext4, JFS, XFS, and Btrfs. The getfattr and setfattr utilities can be used to retrieve and set xattrs. The names of the extended attributes must be prefixed by the name of the category and a dot; hence, these categories are generally qualified as namespaces. Currently, four namespaces exist: user, trusted, security, and system [Linux]. Recommendations on how they should be used have been published [freedesktop].",
      "ja": "EXT3、ext4は、JFS、XFS、とはBtrfsを次のようにLinuxでの拡張属性をサポートするファイルシステムのいくつかはあります。 getfattrとsetfattrユーティリティはxattrsを取得し、設定するために使用することができます。拡張属性の名前は、カテゴリとドットの名前を付ける必要があります。したがって、これらのカテゴリは、一般的に名前空間として認定されています。現在、4つの名前空間が存在します。ユーザーは、信頼できる、セキュリティ、およびシステム[Linuxの]。彼らが使用されるべき方法についての勧告は、[freedesktop]公開されています。"
    },
    {
      "indent": 3,
      "text": "FreeBSD supports extended attributes in two universal namespaces -- user and system -- although individual file systems are allowed to implement additional namespaces [FreeBSD].",
      "ja": "個々のファイルシステムは、追加の名前空間[FreeBSDの]を実装するために許可されているが、 - ユーザーとシステム -  FreeBSDは2つのユニバーサル名前空間の拡張属性をサポートしています。"
    },
    {
      "indent": 3,
      "text": "Some file systems have facilities that are capable of storing both extended attributes and named attributes. For discussion regarding the relationship between these features, see Section 5. Solaris 9 and later provide file \"forks\", logically represented as files within a hidden directory that is associated with the target file [fsattr]. In the New Technology File System (NTFS), extended attributes may be stored within \"file streams\" [NTFS].",
      "ja": "一部のファイルシステムは拡張属性と命名された属性の両方を記憶することができる設備が整っています。これらの機能との関係についての議論については、セクション5のSolaris 9を参照し、後で論理的にターゲットファイル[fsattr]に関連付けられている隠しディレクトリ内のファイルとして表されるファイル「フォーク」を、提供しています。新技術ファイルシステム（NTFS）では、拡張属性は、[NTFS]「ファイルストリーム」内に格納することができます。"
    },
    {
      "indent": 3,
      "text": "Xattrs can be retrieved and set through system calls or shell commands and are generally supported by user-space tools that preserve other file attributes. For example, the \"rsync\" remote copy program will correctly preserve user-extended attributes between Linux/ext4 and OSX/hfs by stripping off the Linux-specific \"user.\" prefix.",
      "ja": "Xattrsが取得され、システムコールやシェルコマンドを介して設定し、一般的に他のファイル属性を保持するユーザ空間のツールでサポートされていることができます。たとえば、「rsyncの」リモートコピープログラムが正しくLinux固有のストリッピングして、Linux / ext4のとOSX / HFSの間でユーザーの拡張属性を保持します「ユーザーを。」接頭辞。"
    },
    {
      "indent": 0,
      "text": "5. Namespaces",
      "section_title": true,
      "ja": "5.名前空間"
    },
    {
      "indent": 3,
      "text": "Operating systems may define multiple \"namespaces\" in which xattrs can be set. Namespaces are more than organizational classes; the operating system may enforce different access policies and allow different capabilities depending on the namespace. Linux, for example, defines \"security\", \"system\", \"trusted\", and \"user\" namespaces, the first three being specific to Linux [freedesktop].",
      "ja": "オペレーティングシステムはxattrsを設定することができる複数の「名前空間」を定義することができます。名前空間は、組織クラス以上です。オペレーティング・システムは、異なるアクセスポリシーを適用し、名前空間に応じて、異なる機能を可能にすることができます。 Linuxは、例えば、「セキュリティ」、「システム」、「信頼できる」、および「ユーザー」の名前空間を定義するのLinux [freedesktop]に特異的である最初の三つ。"
    },
    {
      "indent": 3,
      "text": "Implementations generally agree on the semantics of a \"user\" namespace, which allows applications to store arbitrary user attribute data with file system objects. Access to this namespace is controlled via the normal file system attributes. As such, getting and setting xattrs from the user namespace can be considered interoperable across platforms and vendor implementations. Attributes from other namespaces are typically platform specific.",
      "ja": "実装は、一般的なアプリケーションは、ファイル・システム・オブジェクトと、任意のユーザー属性データを格納することができ、「ユーザー」の名前空間のセマンティクスに同意するものとします。この名前空間へのアクセスは、通常のファイルシステム属性を介して制御されます。そのため、ユーザーの名前空間からxattrsを取得および設定するプラットフォームやベンダーの実装間で相互運用可能と考えることができます。他の名前空間からの属性は、通常、プラットフォーム固有のものです。"
    },
    {
      "indent": 3,
      "text": "This document provides support for namespaces related to user-managed metadata only, thus avoiding the need to specify the semantics applicable to particular system-interpreted xattrs. The values of xattrs are considered application data just as the contents of named attributes, files, and symbolic links are. Servers have a responsibility to store whatever value the client specifies and to return it on demand. Xattr keys and values MUST NOT be interpreted by the NFS clients and servers, as such behavior would lead to non-interoperable implementations. If there were a need to specify one or more attributes that servers need to act upon, the appropriate semantics would be specified by adding a new attribute for the purpose as provided for by [RFC5661] and [RFC8178].",
      "ja": "この文書では、このように特定のシステム・解釈xattrsに適用セマンティクスを指定する必要がなくなり、唯一のユーザ管理されたメタデータに関連する名前空間のサポートを提供します。 xattrsの値は、単に名前の属性、ファイルの内容として、アプリケーションデータとみなされ、かつシンボリックリンクです。サーバーは、クライアントが指定するどのような値格納するためのオンデマンドでそれを返すために責任を持っています。そのような行動は、非相互運用可能な実装につながるようxattrのキーと値は、NFSクライアントとサーバによって解釈してはなりません。サーバが作用する必要がある1つ以上の属性を指定する必要があった場合は、適切なセマンティクスは、[RFC5661]と[RFC8178]によってのために提供される目的のために新しい属性を追加することによって指定されるだろう。"
    },
    {
      "indent": 0,
      "text": "6. Relationship with Named Attributes",
      "section_title": true,
      "ja": "指定された属性を持つ6.関係"
    },
    {
      "indent": 3,
      "text": "[RFC7530] defines named attributes as opaque byte streams that are associated with a directory or file and referred to by a string name. Named attributes are intended to be used by client applications as a method to associate application-specific data with a regular file or directory. Although this makes xattrs similar in concept and use to named attributes, there are important semantic differences.",
      "ja": "[RFC7530]は、ディレクトリやファイルに関連付けられており、文字列名によって参照されている不透明なバイトストリームとして指定された属性を定義します。名前付き属性は、通常のファイルまたはディレクトリとアプリケーション固有のデータを関連付けるための方法として、クライアントアプリケーションによって使用されることを意図しています。これは、指定された属性の概念と使用中の同様のxattrsになりますが、重要な意味の違いがあります。"
    },
    {
      "indent": 3,
      "text": "File systems typically define operations to get and set individual xattrs as being atomic, although collectively they may be independent. Xattrs generally have size limits ranging from a few bytes to several kilobytes; the maximum supported size is not universally defined and is usually restricted by the file system. Similar to Access Control Lists (ACLs), the amount of xattr data exchanged between the client and server for get/set operations can be considered to fit in a single COMPOUND request, bounded by the channel's negotiated maximum size for requests. Named attributes, on the other hand, are unbounded data streams and do not impose atomicity requirements.",
      "ja": "集合的に、彼らは独立していてもよいが、ファイルシステムは、典型的には、アトミックであるとして個々xattrsを取得および設定するための操作を定義します。 Xattrsは、一般的に数バイトから数キロバイトまでのサイズ制限があります。サポートされる最大サイズは、普遍的に定義されておらず、通常はファイルシステムによって制限されています。アクセス制御リスト（ACL）と同様に、xattrのデータ量が取得/設定操作のために、クライアントとサーバ間で交換要求用チャネルの交渉された最大サイズに囲まれた単一の化合物の要求に合うように考えることができます。名前付き属性は、他の一方で、無制限のデータ・ストリームであり、アトミック要件を課していません。"
    },
    {
      "indent": 3,
      "text": "Individual named attributes are analogous to files and are opened and closed just as files are. Caching of the data for these needs to be handled just as data caching is for ordinary files following close-to-open semantics. Xattrs, on the other hand, have caching requirements similar to other file attributes.",
      "ja": "個々の名前の属性は、ファイルに類似しているとファイルがあると同じように開閉されます。これらのニーズは単なるデータキャッシュとして扱われるため、データのキャッシングは近いツーオープンセマンティクス以下の一般的なファイルのためのものです。 Xattrsは、他の一方で、他のファイル属性に類似のキャッシング要件があります。"
    },
    {
      "indent": 3,
      "text": "Named attributes and xattrs have different semantics and are treated by applications as belonging to disjoint namespaces. As a result, mapping from one to the other would be, at best, a compromise. Despite these differences, the underlying file system structure used to store named attributes is generally capable of storing xattrs. However, the converse is typically not the case because of the size limits applicable to xattrs.",
      "ja": "名前付き属性とxattrsは異なる意味を持ち、互いに独立な名前空間に属するものとしてアプリケーションによって処理されています。その結果、一方から他方へのマッピングは、最高の状態で、妥協点だろう。これらの違いにもかかわらず、指定された属性を格納するために使用される基礎となるファイルシステム構造はxattrsを格納する一般的に可能です。しかしながら、逆はxattrsために適用可能なサイズ制限典型的には当てはまりません。"
    },
    {
      "indent": 3,
      "text": "While it might be possible to write guidance about how a client can use the named attribute mechanism to act like xattrs, such as by carving out some namespace and specifying locking primitives to enforce atomicity constraints on individual get/set operations, such an approach is sufficiently problematic; thus, it will not be attempted here. A client application trying to use xattrs through named attributes with a server that supported xattrs directly would get a lower level of service and could fail to cooperate on a local application running on the server unless the server file system defined its own interoperability constraints. File systems that already implement xattrs and named attributes natively would need additional guidance such as reserving a named attribute namespace specifically for implementation purposes.",
      "ja": "それは、クライアントがそのようないくつかの名前空間を切り開くと、個々の取得/設定操作のアトミック性制約を強制するためのロックプリミティブを指定することなどxattrs、のように行動するという名前の属性のメカニズムを使用する方法についてのガイダンスを書くことは可能かもしれませんが、そのようなアプローチは十分にあります問題;したがって、それはここで試行されることはありません。直接xattrsをサポートするサーバと命名された属性によってxattrsを使用しようとしているクライアントアプリケーションは、サービスの低水準になるだろうし、サーバーのファイル・システムは、独自の相互運用性の制約を定義していない限り、サーバー上で実行されているローカルアプリケーションに連携に失敗することがありました。すでにネイティブxattrsと命名された属性を実装するファイルシステムは、このような実装の目的のために特別に名前付き属性の名前空間を確保するなどの追加のガイダンスが必要になります。"
    },
    {
      "indent": 0,
      "text": "7. XDR Description",
      "section_title": true,
      "ja": "7. XDR説明"
    },
    {
      "indent": 3,
      "text": "This document contains the External Data Representation (XDR) [RFC4506] description of the extended attributes. The XDR description is embedded in this document in a way that makes it simple for the reader to extract into a ready-to-compile form. The reader can feed this document into the following shell script to produce the machine-readable XDR description of extended attributes:",
      "ja": "この文書では、拡張属性の外部データ表現（XDR）[RFC4506]の記述が含まれています。 XDRの説明は、それが単純な読者がすぐにコンパイル形式に抽出することを可能にするように、この文書に埋め込まれています。読者は、拡張属性の機械可読XDR記述を生成するために、次のシェル・スクリプトにこの文書を供給することができます。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "#! /bin/sh grep '^ *///' $* | sed 's?^ */// ??' | sed 's?^ *///$??'",
      "ja": "＃！ / binに/ SHのはgrep '^ * ///' $ * | SEDの？^ * /// ?? ' | SEDの？^ * /// $ ?? '"
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 3,
      "text": "That is, if the above script is stored in a file called \"extract.sh\", and this document is in a file called \"spec.txt\", then the reader can do:",
      "ja": "上記のスクリプトは、その後、読者が行うことができ、「extract.sh」と呼ばれるファイルに保存されており、この文書は「spec.txt」というファイルになっている場合には、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "sh extract.sh < spec.txt > xattr_prot.x",
      "ja": "SH extract.sh <spec.txt> xattr_prot.x"
    },
    {
      "indent": 3,
      "text": "The effect of the script is to remove leading white space from each line, plus a sentinel sequence of \"///\".",
      "ja": "スクリプトの効果は、主要な白の各ラインからのスペース、プラス「///」のセンチネル配列を除去することです。"
    },
    {
      "indent": 3,
      "text": "The initial section of the embedded XDR file header follows. Subsequent XDR descriptions, with the sentinel sequence, are embedded throughout the document.",
      "ja": "埋め込みXDRファイルヘッダの最初のセクションは、以下の通りです。後続のXDRの説明は、センチネル配列と、文書全体に埋め込まれています。"
    },
    {
      "indent": 3,
      "text": "Note that the XDR code contained in this document depends on types from the NFSv4.2 nfs4_prot.x file [RFC7863]. This includes both nfs types that end with a 4, such as nfs_cookie4, count4, etc., as well as more-generic types, such as opaque and bool.",
      "ja": "この文書に含まれるXDRコードは[RFC7863]ファイルnfs4_prot.x NFSv4.2の種類に依存することに留意されたいです。これは、等nfs_cookie4、count4、ならびにそのような不透明でブールのようなより汎用タイプとして4で終わるNFSタイプ、の両方を含みます。"
    },
    {
      "indent": 3,
      "text": "To produce a compilable XDR file, the following procedure is suggested:",
      "ja": "コンパイルXDRファイルを作成するには、以下の手順が推奨されます。"
    },
    {
      "indent": 3,
      "text": "o Extract the file nfs4_prot.x as described in [RFC7863].",
      "ja": "[RFC7863]に記載されているようにOファイルnfs4_prot.xを抽出します。"
    },
    {
      "indent": 3,
      "text": "o Extract xattr_prot.x from this document as described above.",
      "ja": "上記のようにOこの文書から抽出xattr_prot.x。"
    },
    {
      "indent": 3,
      "text": "o Apply any changes required for other extensions to be included together with the xattr extension.",
      "ja": "Oれるxattr拡張と一緒に含まれる他の拡張機能に必要なすべての変更を適用します。"
    },
    {
      "indent": 3,
      "text": "o Perform modifications to nfs4_prot.x as described by comments within xattr_prot.x.",
      "ja": "O xattr_prot.x内のコメントによって記載されるようにnfs4_prot.xする変更を実行。"
    },
    {
      "indent": 3,
      "text": "o Extend the unions nfs_argop4 and nfs_resop4 to include cases for the new operations defined in this document.",
      "ja": "Oこの文書で定義された新しい操作の例を含めるために労働組合のnfs_argop4とnfs_resop4を拡張します。"
    },
    {
      "indent": 3,
      "text": "o Combine the XDR files for the base NFSv4.2 protocol and all needed extensions by either concatenating the relevant XDR files or using file inclusion.",
      "ja": "O関連のXDRファイルを連結したり、ファイルのインクルードを使用していずれかの方法でベースNFSv4.2プロトコルと必要なすべての機能拡張のためにXDRファイルを結合します。"
    },
    {
      "indent": 0,
      "text": "7.1. Code Components Licensing Notice",
      "section_title": true,
      "ja": "7.1. コードコンポーネントのライセンスに関するお知らせ"
    },
    {
      "indent": 3,
      "text": "Both the XDR description and the scripts used for extracting the XDR description are Code Components as described in \"Legal Provisions Relating to IETF Documents\", Section 4 of [LEGAL]. These Code Components are licensed according to the terms of that document.",
      "ja": "「IETFドキュメントに関連法規定」、[法的]のセクション4で説明したようにXDR記述とXDR記述を抽出するために使用されるスクリプトの両方は、コード構成要素です。これらのコードコンポーネントは、その文書の条項に従ってライセンスされています。"
    },
    {
      "indent": 6,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 6,
      "text": "/// /*\n///  * Copyright (c) 2017 IETF Trust and the persons identified\n///  * as authors of the code.  All rights reserved.\n///  *\n///  * Redistribution and use in source and binary forms, with\n///  * or without modification, are permitted provided that the\n///  * following conditions are met:\n///  *\n///  * o Redistributions of source code must retain the above\n///  *   copyright notice, this list of conditions and the\n///  *   following disclaimer.\n///  *\n///  * o Redistributions in binary form must reproduce the above\n///  *   copyright notice, this list of conditions and the\n///  *   following disclaimer in the documentation and/or other\n///  *   materials provided with the distribution.\n///  *\n///  * o Neither the name of Internet Society, IETF or IETF\n///  *   Trust, nor the names of specific contributors, may be\n///  *   used to endorse or promote products derived from this\n///  *   software without specific prior written permission.\n///  *\n///  *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n///  *   AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED\n///  *   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n///  *   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n///  *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n///  *   EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n///  *   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n///  *   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n///  *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n///  *   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n///  *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n///  *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n///  *   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n///  *   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n///  *   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n///  *\n///  * This code was derived from RFC 8276.\n///  * Please reproduce this note if possible.\n///  */",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "7.2. XDR for Xattr Extension",
      "section_title": true,
      "ja": "7.2.  xattrの拡張のためのXDR"
    },
    {
      "indent": 5,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 5,
      "text": "/// /*\n///  * xattr_prot.x\n///  */",
      "raw": true
    },
    {
      "indent": 5,
      "text": "/// /*\n///  * The following includes statements that are for example only.\n///  * The actual XDR definition files are generated separately\n///  * and independently and are likely to have a different name.\n///  * %#include <rpc_prot.x>\n///  * %#include <nfsv42.x>\n///  */",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8. Protocol Extensions",
      "section_title": true,
      "ja": "8.プロトコル拡張"
    },
    {
      "indent": 3,
      "text": "This section documents extensions to the NFSv4 protocol operations to allow xattrs to be queried and modified by clients. A new attribute is added to allow clients to determine if the file system being accessed provides support for xattrs. New operations are defined to allow xattr keys and values to be queried and set. In addition, the ACCESS operation is extended by adding new mask bits to provide access information relating to xattrs.",
      "ja": "xattrsは、クライアントによって照会および変更することができるようにするのNFSv4プロトコル動作にこのセクションでは、文書の拡張子。新しい属性がアクセスされているファイルシステムがxattrsのためのサポートを提供する場合、クライアントが決定できるようにするために追加されます。新しい操作は、xattrのキーと値を照会して設定することができるように定義されています。また、アクセス動作がxattrsに関するアクセス情報を提供するために、新たなマスクビットを追加することによって拡張されます。"
    },
    {
      "indent": 3,
      "text": "These changes follow applicable guidelines for valid NFSv4 XDR protocol extension, as specified in [RFC8178], and obey the rules for extensions capable of being made without a change in minor version number.",
      "ja": "これらの変更は、[RFC8178]で指定されるように、有効なNFSv4のXDRプロトコル拡張のために適用可能なガイドラインに従うと、マイナーバージョン番号を変えずに作られているのが可能な拡張のための規則に従います。"
    },
    {
      "indent": 0,
      "text": "8.1. New Definitions",
      "section_title": true,
      "ja": "8.1. 新しい定義"
    },
    {
      "indent": 6,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 6,
      "text": "/// typedef component4     xattrkey4;\n/// typedef opaque         xattrvalue4<>;",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 3,
      "text": "Each xattr is a key/value pair. xattrkey4 is a string denoting the xattr key name and an attrvalue4, which is a variable-length string that identifies the value of the xattr. The handling of xattrkey4 with regard to internationalization-related issues is the same as that for NFSv4 file names and named attribute names, as described in [RFC7530]. Any regular file or directory may have a set of extended",
      "ja": "各xattrのは、キー/値のペアです。 xattrkey4はれるxattrキー名とれるxattrの値を識別する可変長の文字列であるattrvalue4を示す文字列です。 [RFC7530]で説明したように国際化関連の問題に関してxattrkey4の取り扱いは、NFSv4のファイル名と名前の属性名と同じです。任意の通常のファイルまたはディレクトリは、拡張のセットを持っていること"
    },
    {
      "indent": 3,
      "text": "attributes, each consisting of a key and associated value. The NFS client or server MUST NOT interpret the contents of xattrkey4 or xattrvalue4.",
      "ja": "属性は、各キーと関連する値からなります。 NFSクライアントまたはサーバがxattrkey4またはxattrvalue4の内容を解釈してはいけません。"
    },
    {
      "indent": 0,
      "text": "8.2. New Attribute",
      "section_title": true,
      "ja": "8.2. 新規属性"
    },
    {
      "indent": 3,
      "text": "The per-fs read-only attribute described below may be used to determine if xattrs are supported. Servers need not support this attribute, and some NFSv4.2 servers may be unaware of its existence. Before interrogating this attribute using GETATTR, a client should determine whether it is a supported attribute by interrogating the supported_attrs attribute.",
      "ja": "FS単位の読み取り専用以下に記述された属性xattrsがサポートされているかどうかを決定するために使用されてもよいです。サーバはこの属性をサポートする必要はありません、といくつかのNFSv4.2サーバーでは、その存在に気づいていないかもしれません。 GETATTRを使用してこの属性を問い合わせる前に、クライアントは、それがsupported_attrs属性を問い合わせることによってサポートされる属性であるかどうかを判断する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.2.1. xattr_support",
      "section_title": true,
      "ja": "8.2.1.  xattr_support"
    },
    {
      "indent": 3,
      "text": "xattr_support is set to True, if the object's file system supports extended attributes.",
      "ja": "オブジェクトのファイルシステムが拡張属性をサポートしている場合xattr_supportは、Trueに設定されています。"
    },
    {
      "indent": 3,
      "text": "Since xattr_support is not a REQUIRED attribute, the server need not support it. However, a client may reasonably assume that a server (or file system) that does not support the xattr_support attribute does not provide xattr support, and it acts on that basis.",
      "ja": "xattr_supportは必須の属性ではないので、サーバはそれをサポートする必要はありません。ただし、クライアントは、合理的xattr_support属性をサポートしていないサーバ（またはファイルシステム）がxattrのサポートを提供していないと仮定して、それはそれに基づいて動作します。"
    },
    {
      "indent": 3,
      "text": "Note that the protocol does not enforce any limits on the number of keys, the length of a key, the size of a value, or the total size of xattrs that are allowed for a file. The server file system MAY impose additional limits. In addition, a single xattr key or value exchanged between the client and server for get/set operations is limited by the channel's negotiated maximum size for requests and responses.",
      "ja": "プロトコルは、キーの数、キーの長さ、値のサイズ、又はファイルのために許可されxattrsの合計サイズ上の任意の制限を強制しないことに留意されたいです。サーバーのファイルシステムには、追加の制限を課すことができます。また、単一xattrのキーや値が要求と応答のためのチャネルの交渉された最大サイズによって制限され、クライアントと取得/設定操作のためのサーバー間で交換しました。"
    },
    {
      "indent": 0,
      "text": "8.3. New Error Definitions",
      "section_title": true,
      "ja": "8.3. 新しいエラーの定義"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// /* Following lines are to be added to enum nfsstat4 */\n/// /*\n///  NFS4ERR_NOXATTR        = 10095, /* xattr does not exist    */\n///  NFS4ERR_XATTR2BIG      = 10096  /* xattr value is too big  */\n/// */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.3.1. NFS4ERR_NOXATTR (Error Code 10095)",
      "section_title": true,
      "ja": "8.3.1.  NFS4ERR_NOXATTR（エラーコード10095）"
    },
    {
      "indent": 3,
      "text": "The specified xattr does not exist or the server is unable to retrieve it.",
      "ja": "指定されるxattrは存在しないか、またはサーバがそれを取得することができません。"
    },
    {
      "indent": 0,
      "text": "8.3.2. NFS4ERR_XATTR2BIG (Error Code 10096)",
      "section_title": true,
      "ja": "8.3.2.  NFS4ERR_XATTR2BIG（エラーコード10096）"
    },
    {
      "indent": 3,
      "text": "The size of the xattr value specified as part of a SETXATTR operation, or the collective size of all xattrs of the file resulting from the SETXATTR operation, is bigger than that supported by the underlying file system.",
      "ja": "SETXATTR操作の一部として指定されるxattr値の大きさ、またはSETXATTR操作から得られたファイルの全てxattrsの集合サイズは、基礎となるファイルシステムによってサポートされるものよりも大きいです。"
    },
    {
      "indent": 0,
      "text": "8.4. New Operations",
      "section_title": true,
      "ja": "8.4. 新事業"
    },
    {
      "indent": 3,
      "text": "Applications need to perform the following operations on a given file's extended attributes [Love]:",
      "ja": "アプリケーションは、指定したファイルの拡張属性[愛]で次の操作を実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "o Given a file, return a list of all of the file's assigned extended attribute keys.",
      "ja": "Oファイルを指定すると、ファイルに割り当てられた拡張属性キーのすべてのリストを返します。"
    },
    {
      "indent": 3,
      "text": "o Given a file and a key, return the corresponding value.",
      "ja": "Oファイルおよびキーを指定すると、対応する値を返します。"
    },
    {
      "indent": 3,
      "text": "o Given a file, a key, and a value, assign that value to the key.",
      "ja": "Oファイル、キー、および値を考えると、キーにその値を割り当てます。"
    },
    {
      "indent": 3,
      "text": "o Given a file and a key, remove that extended attribute from the file.",
      "ja": "Oファイルおよびキーを指定すると、ファイルからその拡張属性を削除します。"
    },
    {
      "indent": 3,
      "text": "In order to meet these requirements, this section introduces four new OPTIONAL operations: GETXATTR, SETXATTR, LISTXATTRS and REMOVEXATTR. These operations are to query, set, list, and remove xattrs, respectively. A server MUST support all four operations when they are directed to a file system that supports the xattr_support attribute and returns TRUE when it is interrogated. For file systems that either do not support the xattr_support attribute or return FALSE when the xattr_support attribute is interrogated, all of the above operations MUST NOT be supported. GETXATTR allows obtaining the value of an xattr key, SETXATTR allows creating or replacing an xattr key with a value, LISTXATTRS enumerates all the xattrs names, and REMOVEXATTR allows deleting a single xattr.",
      "ja": "GETXATTR、SETXATTR、LISTXATTRSとREMOVEXATTR：これらの要件を満たすために、このセクションでは、4つの新しいオプションの操作を紹介します。これらの操作は、クエリセット、リスト、およびそれぞれ、xattrsを削除します。それらはxattr_support属性をサポートしており、それが尋問されたときにTRUEを返し、ファイルシステムに向けられたときに、サーバーはすべての4つの操作をサポートしなければなりません。どちらかがxattr_support属性をサポートするかxattr_support属性が尋問されたときにはFALSEを返していないファイルシステムの場合は、上記のすべての操作がサポートされてはなりません。 GETXATTRはれるxattrキーの値を得ることができ、SETXATTR値とれるxattrキーを作成または交換でき、LISTXATTRSは全てxattrs名を列挙し、そしてREMOVEXATTR単一れるxattrを削除することができます。"
    },
    {
      "indent": 3,
      "text": "Note that some server implementations may not be aware of the existence of these operations, thereby a client cannot always expect that issuing one of them will either succeed or return NFS4ERR_NOTSUPP. In some cases, NFS4ERR_OP_ILLEGAL may be returned or the request may encounter an XDR decode error on the server. As a result, clients should only issue these operations after determining that support is present.",
      "ja": "一部のサーバーの実装は、これらの操作の存在を知らないかもしれないことに注意し、それによって、クライアントは常にそれらのいずれかを発行することは成功するかNFS4ERR_NOTSUPPを返します。どちらかと期待することはできません。いくつかの場合において、NFS4ERR_OP_ILLEGALが返されることがあり、または要求は、サーバ上のXDRデコードエラーが発生する場合があります。その結果、クライアントは、サポートが存在することを決定した後、これらの操作を発行する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.4.1. GETXATTR - Get an Extended Attribute of a File",
      "section_title": true,
      "ja": "8.4.1.  GETXATTR  - ファイルの拡張属性を取得します。"
    },
    {
      "indent": 0,
      "text": "8.4.1.1. ARGUMENTS",
      "section_title": true,
      "ja": "8.4.1.1。 ARGUMENTS"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// struct GETXATTR4args {\n///         /* CURRENT_FH: file */\n///         xattrkey4     gxa_name;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.1.2. RESULTS",
      "section_title": true,
      "ja": "8.4.1.2。結果"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// union GETXATTR4res switch (nfsstat4 gxr_status) {\n///  case NFS4_OK:\n///         xattrvalue4   gxr_value;\n///  default:\n///         void;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.1.3. DESCRIPTION",
      "section_title": true,
      "ja": "8.4.1.3。 DESCRIPTION"
    },
    {
      "indent": 3,
      "text": "The GETXATTR operation will obtain the value for the given extended attribute key for the file system object specified by the current filehandle.",
      "ja": "GETXATTR動作は、現在のファイルハンドルで指定されたファイル・システム・オブジェクトの指定された拡張属性キーの値を取得します。"
    },
    {
      "indent": 3,
      "text": "The server will fetch the xattr value for the key that the client requests if xattrs are supported by the server for the target file system. If the server does not support xattrs on the target file system, then it MUST NOT return a value and MUST return the NFS4ERR_NOTSUPP error or another error indicating the request was not understood. The server also MUST return NFS4ERR_NOXATTR if it supports xattrs on the target but cannot obtain the requested data. If the xattr value contained in the server response is such as to cause the channel's negotiated maximum response size to be exceeded, then the server MUST return NFS4ERR_REP_TOO_BIG in gxr_status.",
      "ja": "サーバはxattrsは、ターゲット・ファイル・システムのサーバによってサポートされている場合、クライアントが要求したキーのxattrの値を取得します。サーバーは、ターゲット・ファイル・システム上のxattrsをサポートしていない場合、それは値を返してはならないと要求を理解していなかった示すNFS4ERR_NOTSUPPエラーや別のエラーを返さなければなりません。また、サーバは、それがターゲットにxattrsをサポートしている場合NFS4ERR_NOXATTRを返さなければならないが、要求されたデータを取得することはできません。チャネルの交渉された最大応答サイズを超えることはさせるように、サーバーの応答に含まれるxattr値がこのような場合、サーバーはgxr_statusでNFS4ERR_REP_TOO_BIGを返さなければなりません。"
    },
    {
      "indent": 0,
      "text": "8.4.1.4. IMPLEMENTATION",
      "section_title": true,
      "ja": "8.4.1.4。実装"
    },
    {
      "indent": 3,
      "text": "Clients that have cached an xattr may avoid the need to do a GETXATTR by determining if the change attribute is the same as it was when the xattr was fetched. If the client does not hold a delegation for the file in question, it can obtain the change attribute with a GETATTR request and compare that change attribute's value to the change attribute value fetched when the xattr value was obtained. This handling is similar to how a client would revalidate other file attributes such as ACLs.",
      "ja": "xattrのをキャッシュしているクライアントは、xattrのがフェッチされたとき、それがあったように変化属性が同じであるかどうかを決定することによってGETXATTRを行う必要性を回避することができます。クライアントは、問題のファイルの委任を保持していない場合は、GETATTR要求に変化属性を得ることができ、xattrの値が得られたときにフェッチ変化属性値にその変化属性の値を比較します。この処理は、クライアントがACLなど、他のファイル属性を再検証する方法をに似ています。"
    },
    {
      "indent": 3,
      "text": "When responding to such a GETATTR, the server will, if there is an OPEN_DELEGATE_WRITE delegation held by another client for the file in question, either obtain the actual current value of these attributes from the client holding the delegation by using the CB_GETATTR callback or revoke the delegation. See Section 18.7.4 of [RFC5661] for details.",
      "ja": "このようGETATTRに応答するとき、サーバは、問題のファイルのために別のクライアントが保持しているOPEN_DELEGATE_WRITE代表団があります場合は、どちらかCB_GETATTRコールバックを使用して委任を保持しているクライアントから、これらの属性の実際の電流値を取得または取り消します委任。詳細については、[RFC5661]のセクション18.7.4を参照してください。"
    },
    {
      "indent": 0,
      "text": "8.4.2. SETXATTR - Set an Extended Attribute of a File",
      "section_title": true,
      "ja": "8.4.2.  SETXATTR  - ファイルの拡張属性を設定します。"
    },
    {
      "indent": 0,
      "text": "8.4.2.1. ARGUMENTS",
      "section_title": true,
      "ja": "8.4.2.1。 ARGUMENTS"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// enum setxattr_option4 { /// SETXATTR4_EITHER = 0, /// SETXATTR4_CREATE = 1, /// SETXATTR4_REPLACE = 2 /// };",
      "ja": "///列挙setxattr_option4 {/// SETXATTR4_EITHER = 0、/// SETXATTR4_CREATE = 1、/// SETXATTR4_REPLACE = 2 ///}。"
    },
    {
      "indent": 3,
      "text": "/// struct SETXATTR4args {\n///         /* CURRENT_FH: file */\n///         setxattr_option4 sxa_option;\n///         xattrkey4        sxa_key;\n///         xattrvalue4      sxa_value;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.2.2. RESULTS",
      "section_title": true,
      "ja": "8.4.2.2。結果"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// union SETXATTR4res switch (nfsstat4 sxr_status) {\n///  case NFS4_OK:\n///         change_info4      sxr_info;\n///  default:\n///         void;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.2.3. DESCRIPTION",
      "section_title": true,
      "ja": "8.4.2.3。 DESCRIPTION"
    },
    {
      "indent": 3,
      "text": "The SETXATTR operation changes one extended attribute of a file system object. The change desired is specified by sxa_option. SETXATTR4_CREATE is used to associate the given value with the given extended attribute key for the file system object specified by the current filehandle. The server MUST return NFS4ERR_EXIST if the attribute key already exists. SETXATTR4_REPLACE is also used to set an xattr, but the server MUST return NFS4ERR_NOXATTR if the attribute key does not exist. By default (SETXATTR4_EITHER), the extended attribute will be created if need be, or its value will be replaced if the attribute exists.",
      "ja": "SETXATTR操作は、ファイル・システム・オブジェクトの1つの拡張属性を変更します。所望の変化はsxa_optionによって指定されます。 SETXATTR4_CREATEは、現在のファイルハンドルで指定されたファイル・システム・オブジェクトの指定された拡張属性キーで指定された値を関連付けるために使用されます。属性キーがすでに存在する場合、サーバーはNFS4ERR_EXISTを返さなければなりません。 SETXATTR4_REPLACEもxattrのを設定するために使用されますが、属性キーが存在しない場合、サーバーはNFS4ERR_NOXATTRを返さなければなりません。デフォルト（SETXATTR4_EITHER）することで、必要であれば、拡張属性が作成される、または属性が存在する場合はその値が置き換えられます。"
    },
    {
      "indent": 3,
      "text": "If the xattr key and value contained in the client request are such that the request would exceed the channel's negotiated maximum request size, then the server MUST return NFS4ERR_REQ_TOO_BIG in sxr_status. If the server file system imposes additional limits on the size of the key name or value, it MAY return NFS4ERR_XATTR2BIG.",
      "ja": "クライアントの要求に含まれるxattrのキーと値は、要求がチャネルの交渉された最大要求サイズを超えてしまうようなものである場合、サーバはsxr_statusでNFS4ERR_REQ_TOO_BIGを返さなければなりません。サーバーのファイルシステムは、キー名または値の大きさに追加の制限を課している場合、それはNFS4ERR_XATTR2BIGを返す場合があります。"
    },
    {
      "indent": 3,
      "text": "A successful SETXATTR MUST change the file time_metadata and change attributes if the xattr is created or the value assigned to xattr changes. However, it is not necessary to change these attributes if there has been no actual change in the xattr value. Avoiding attribute change in such situations is desirable as it avoids unnecessary cache invalidation.",
      "ja": "成功SETXATTRは、ファイルtime_metadataを変更し、xattrの作成または値が変更をxattrのために割り当てられている場合、属性を変更する必要があります。しかし、xattrの値には実際の変更がなかった場合は、これらの属性を変更する必要はありません。それは、不要なキャッシュの無効化を避けるような状況での属性の変更を避けることが望ましいです。"
    },
    {
      "indent": 3,
      "text": "On success, the server returns the change_info4 information in sxr_info. With the atomic field of the change_info4 data type, the server will indicate if the before and after change attributes were obtained atomically with respect to the SETXATTR operation. This allows the client to determine if its cached xattrs are still valid after the operation. See Section 8.7 for a discussion on xattr caching.",
      "ja": "成功すると、サーバーはsxr_infoで変化_info4情報を返します。前と後の変更属性がSETXATTR操作に対するアトミック得られた場合には変化_info4データ型の原子分野、意志が示すサーバ。これは、キャッシュされたxattrsが操作後まだ有効である場合、クライアントが決定することができます。 xattrのキャッシングに関する議論については、セクション8.7を参照してください。"
    },
    {
      "indent": 0,
      "text": "8.4.2.4. IMPLEMENTATION",
      "section_title": true,
      "ja": "8.4.2.4。実装"
    },
    {
      "indent": 3,
      "text": "If the object whose xattr is being changed has a file delegation that is held by a client other than the one doing the SETXATTR, the delegation(s) must be recalled, and the operation cannot proceed to actually change the xattr until each such delegation is returned or revoked. In all cases in which delegations are recalled, the server is likely to return one or more NFS4ERR_DELAY errors while the delegation(s) remains outstanding, although it might not do that if the delegations are returned quickly.",
      "ja": "そのxattrの変更されているオブジェクトがSETXATTRをやっ以外のクライアントによって保持されているファイルの委任がある場合は、代表団（S）がリコールされている必要があり、このような各代表団があるまで、操作は、実際れるxattrを変更するために進むことができません返却または取り消します。代表団がリコールされているすべての場合において、サーバは、委任（s）は、優れたまま、それは代表団がすぐに返される場合があることを行うではないかもしれないが、一つ以上のNFS4ERR_DELAYエラーを返す可能性があります。"
    },
    {
      "indent": 0,
      "text": "8.4.3. LISTXATTRS - List Extended Attributes of a File",
      "section_title": true,
      "ja": "8.4.3.  LISTXATTRS  - ファイルのリスト拡張属性"
    },
    {
      "indent": 0,
      "text": "8.4.3.1. ARGUMENTS",
      "section_title": true,
      "ja": "8.4.3.1。 ARGUMENTS"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// struct LISTXATTRS4args {\n///         /* CURRENT_FH: file */\n///         nfs_cookie4    lxa_cookie;\n///         count4         lxa_maxcount;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.3.2. RESULTS",
      "section_title": true,
      "ja": "8.4.3.2。結果"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// struct LISTXATTRS4resok {\n///         nfs_cookie4    lxr_cookie;\n///         xattrkey4      lxr_names<>;\n///         bool           lxr_eof;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union LISTXATTRS4res switch (nfsstat4 lxr_status) {\n///  case NFS4_OK:\n///         LISTXATTRS4resok  lxr_value;\n///  default:\n///         void;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.3.3. DESCRIPTION",
      "section_title": true,
      "ja": "8.4.3.3。 DESCRIPTION"
    },
    {
      "indent": 3,
      "text": "The LISTXATTRS operation retrieves a variable number of extended attribute keys from the file system object specified by the current filehandle, along with information to allow the client to request additional attribute keys in a subsequent LISTXATTRS.",
      "ja": "LISTXATTRS操作は、クライアントが後続LISTXATTRSに追加の属性キーを要求することを可能にする情報とともに、現在のファイルハンドルに指定されたファイル・システム・オブジェクトから拡張属性キーの可変数を取得します。"
    },
    {
      "indent": 3,
      "text": "The arguments contain a cookie value that represents where the LISTXATTRS should start within the list of xattrs. A value of 0 (zero) for lxa_cookie is used to start reading at the beginning of the list. For subsequent LISTXATTRS requests, the client specifies a cookie value that is provided by the server on a previous LISTXATTRS request.",
      "ja": "引数はLISTXATTRSがxattrsのリストの中に開始すべき場所を表すクッキー値が含まれています。 lxa_cookie 0（ゼロ）の値は、リストの先頭に読み取りを開始するために使用されます。その後のLISTXATTRS要求の場合、クライアントは以前LISTXATTRS要求にサーバーによって提供されたクッキーの値を指定します。"
    },
    {
      "indent": 3,
      "text": "The lxa_maxcount value of the argument is the maximum number of bytes for the result. This maximum size represents all of the data being returned within the LISTXATTRS4resok structure and includes the XDR overhead. The server may return less data. If the server is unable to return a single xattr name within the maxcount limit, the error NFS4ERR_TOOSMALL will be returned to the client.",
      "ja": "引数のlxa_maxcount値は、結果の最大バイト数です。この最大サイズはLISTXATTRS4resok構造内に返されるすべてのデータを表し、XDRオーバーヘッドを含みます。サーバーは、少ないデータを返すことがあります。サーバがMAXCOUNT制限内に単一れるxattr名を返すことができない場合は、エラーNFS4ERR_TOOSMALLがクライアントに返されます。"
    },
    {
      "indent": 3,
      "text": "On successful return, the server's response will provide a list of extended attribute keys. The \"lxr_eof\" flag has a value of TRUE if there are no more keys for the object.",
      "ja": "成功のリターンで、サーバの応答は、拡張属性キーのリストを提供します。オブジェクトのための複数のキーが存在しない場合、「lxr_eof」フラグがTRUEの値を有します。"
    },
    {
      "indent": 3,
      "text": "The cookie value is only meaningful to the server and is used as a \"bookmark\" for the xattr key. As mentioned, this cookie is used by the client for subsequent LISTXATTRS operations so that it may continue listing keys. The cookie is similar in concept to a READDIR cookie or the READ offset but should not be interpreted as such by the client.",
      "ja": "クッキー値は、サーバーにのみ意味がありかつれるxattrキーの「しおり」として使用されています。前述のように、それはキーをリスト続けることができるように、このクッキーは、その後のLISTXATTRS操作のためにクライアントによって使用されます。クッキーはREADDIRクッキーやオフセットREADの概念と似ていますが、クライアントによってそのように解釈すべきではありません。"
    },
    {
      "indent": 3,
      "text": "On success, the current filehandle retains its value.",
      "ja": "成功すると、現在のファイルハンドルは、その値を保持します。"
    },
    {
      "indent": 0,
      "text": "8.4.3.4. IMPLEMENTATION",
      "section_title": true,
      "ja": "8.4.3.4。実装"
    },
    {
      "indent": 3,
      "text": "The handling of a cookie is similar to that of the READDIR operation. It should be a rare occurrence that a server is unable to continue properly listing xattrs with the provided cookie. The server should make every effort to avoid this condition since the application at the client may not be able to properly handle this type of failure.",
      "ja": "クッキーの取り扱いはREADDIR操作の場合と同様です。これは、サーバが提供するクッキーとxattrsをリストアップし、適切に継続することができないまれな出来事でなければなりません。サーバーは、クライアントのアプリケーションが正常にこのタイプの障害を処理することができない場合がありますので、この状態を回避するためにあらゆる努力をする必要があります。"
    },
    {
      "indent": 0,
      "text": "8.4.4. REMOVEXATTR - Remove an Extended Attribute of a File",
      "section_title": true,
      "ja": "8.4.4.  REMOVEXATTR  - ファイルの拡張属性を削除します"
    },
    {
      "indent": 0,
      "text": "8.4.4.1. ARGUMENTS",
      "section_title": true,
      "ja": "8.4.4.1。 ARGUMENTS"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// struct REMOVEXATTR4args {\n///         /* CURRENT_FH: file */\n///         xattrkey4      rxa_name;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.4.2. RESULTS",
      "section_title": true,
      "ja": "8.4.4.2。結果"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// union REMOVEXATTR4res switch (nfsstat4 rxr_status) {\n///  case NFS4_OK:\n///         change_info4      rxr_info;\n///  default:\n///         void;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.4.4.3. DESCRIPTION",
      "section_title": true,
      "ja": "8.4.4.3。 DESCRIPTION"
    },
    {
      "indent": 3,
      "text": "The REMOVEXATTR operation deletes one extended attribute of a file system object specified by rxa_name. The server MUST return NFS4ERR_NOXATTR if the attribute key does not exist.",
      "ja": "REMOVEXATTR操作がrxa_nameで指定されたファイル・システム・オブジェクトの1つの拡張属性を削除します。属性キーが存在しない場合、サーバーはNFS4ERR_NOXATTRを返さなければなりません。"
    },
    {
      "indent": 3,
      "text": "A successful REMOVEXATTR MUST change the file time_metadata and change attributes.",
      "ja": "成功REMOVEXATTRは、ファイルtime_metadataを変更し、属性を変更する必要があります。"
    },
    {
      "indent": 3,
      "text": "Similar to SETXATTR, the server communicates the value of the change attribute immediately prior to, and immediately following, a successful REMOVEXATTR operation in rxr_info. This allows the client to determine if its cached xattrs are still valid after the operation. See Section 8.7 for a discussion on xattr caching.",
      "ja": "SETXATTRと同様に、サーバーは、変更の値はrxr_infoに成功REMOVEXATTR操作の前にすぐに属性、および直後の通信を行います。これは、キャッシュされたxattrsが操作後まだ有効である場合、クライアントが決定することができます。 xattrのキャッシングに関する議論については、セクション8.7を参照してください。"
    },
    {
      "indent": 0,
      "text": "8.4.4.4. IMPLEMENTATION",
      "section_title": true,
      "ja": "8.4.4.4。実装"
    },
    {
      "indent": 3,
      "text": "If the object whose xattr is being removed has a file delegation that is held by a client other than the one doing the REMOVEXATTR, the delegation(s) must be recalled, and the operation cannot proceed to delete the xattr until each such delegation is returned or revoked. In all cases in which delegations are recalled, the server is likely to return one or more NFS4ERR_DELAY errors while the delegation(s) remains outstanding, although it might not do that if the delegations are returned quickly.",
      "ja": "そのxattrの削除されたオブジェクトがREMOVEXATTRをやっ以外のクライアントによって保持されているファイルの委任がある場合は、代表団（S）がリコールされている必要があり、このような各代表団が返されるまでの動作は、xattrのを削除するために進むことができませんまたは取り消します。代表団がリコールされているすべての場合において、サーバは、委任（s）は、優れたまま、それは代表団がすぐに返される場合があることを行うではないかもしれないが、一つ以上のNFS4ERR_DELAYエラーを返す可能性があります。"
    },
    {
      "indent": 0,
      "text": "8.4.5. Valid Errors",
      "section_title": true,
      "ja": "8.4.5. 有効なエラー"
    },
    {
      "indent": 3,
      "text": "This section contains a table that gives the valid error returns for each new protocol operation. The error code NFS4_OK (indicating no error) is not listed but should be understood to be returnable by all new operations. The error values for all other operations are defined in Section 13.2 of [RFC7530] and Section 11.2 of [RFC7862].",
      "ja": "このセクションでは、それぞれの新しいプロトコル動作のための有効なエラーリターンを与えるテーブルが含まれています。 （エラーがないことを示す）エラーコードNFS4_OKが表示されていないが、すべての新しい操作によって返却であると理解されるべきです。他のすべての操作のエラー値は[RFC7530]及び[RFC7862]のセクション11.2の13.2節で定義されています。"
    },
    {
      "indent": 3,
      "text": "+-------------+-----------------------------------------------------+\n| Operation   | Errors                                              |\n+-------------+-----------------------------------------------------+\n| GETXATTR    | NFS4ERR_ACCESS, NFS4ERR_BADXDR,                     |\n|             | NFS4ERR_DEADSESSION, NFS4ERR_DELAY,                 |\n|             | NFS4ERR_FHEXPIRED, NFS4ERR_INVAL, NFS4ERR_IO,       |\n|             | NFS4ERR_MOVED, NFS4ERR_NAMETOOLONG,                 |\n|             | NFS4ERR_NOFILEHANDLE, NFS4ERR_NOTSUPP,              |\n|             | NFS4ERR_NOXATTR, NFS4ERR_OP_NOT_IN_SESSION,         |\n|             | NFS4ERR_PERM, NFS4ERR_REP_TOO_BIG,                  |\n|             | NFS4ERR_REP_TOO_BIG_TO_CACHE, NFS4ERR_REQ_TOO_BIG,  |\n|             | NFS4ERR_RETRY_UNCACHED_REP, NFS4ERR_SERVERFAULT,    |\n|             | NFS4ERR_STALE, NFS4ERR_TOO_MANY_OPS,                |\n|             | NFS4ERR_WRONG_TYPE                                  |\n| SETXATTR    | NFS4ERR_ACCESS, NFS4ERR_BADCHAR, NFS4ERR_BADXDR,    |\n|             | NFS4ERR_DEADSESSION, NFS4ERR_DELAY, NFS4ERR_DQUOT,  |\n|             | NFS4ERR_EXIST, NFS4ERR_FHEXPIRED, NFS4ERR_INVAL,    |\n|             | NFS4ERR_IO, NFS4ERR_MOVED, NFS4ERR_NAMETOOLONG,     |\n|             | NFS4ERR_NOFILEHANDLE, NFS4ERR_NOSPC,                |\n|             | NFS4ERR_NOXATTR, NFS4ERR_OP_NOT_IN_SESSION,         |\n|             | NFS4ERR_PERM, NFS4ERR_REP_TOO_BIG,                  |\n|             | NFS4ERR_REP_TOO_BIG_TO_CACHE, NFS4ERR_REQ_TOO_BIG,  |\n|             | NFS4ERR_RETRY_UNCACHED_REP, NFS4ERR_ROFS,           |\n|             | NFS4ERR_SERVERFAULT, NFS4ERR_STALE,                 |\n|             | NFS4ERR_TOO_MANY_OPS, NFS4ERR_WRONG_TYPE,           |\n|             | NFS4ERR_XATTR2BIG                                   |\n| LISTXATTRS  | NFS4ERR_ACCESS, NFS4ERR_DEADSESSION, NFS4ERR_DELAY, |\n|             | NFS4ERR_INVAL, NFS4ERR_IO, NFS4ERR_MOVED,           |\n|             | NFS4ERR_NAMETOOLONG, NFS4ERR_NOFILEHANDLE,          |\n|             | NFS4ERR_NOTSUPP, NFS4ERR_NOXATTR,                   |\n|             | NFS4ERR_OP_NOT_IN_SESSION, NFS4ERR_PERM,            |\n|             | NFS4ERR_REP_TOO_BIG, NFS4ERR_REP_TOO_BIG_TO_CACHE,  |\n|             | NFS4ERR_REQ_TOO_BIG, NFS4ERR_RETRY_UNCACHED_REP,    |\n|             | NFS4ERR_SERVERFAULT, NFS4ERR_STALE,                 |\n|             | NFS4ERR_TOO_MANY_OPS, NFS4ERR_WRONG_TYPE            |\n| REMOVEXATTR | NFS4ERR_ACCESS, NFS4ERR_BADCHAR, NFS4ERR_BADXDR,    |\n|             | NFS4ERR_DEADSESSION, NFS4ERR_DELAY, NFS4ERR_DQUOT,  |\n|             | NFS4ERR_EXIST, NFS4ERR_INVAL, NFS4ERR_IO,           |\n|             | NFS4ERR_LOCKED, NFS4ERR_MOVED, NFS4ERR_NAMETOOLONG, |\n|             | NFS4ERR_NOFILEHANDLE, NFS4ERR_NOSPC,                |\n|             | NFS4ERR_NOXATTR,, NFS4ERR_OLD_STATEID,              |\n|             | NFS4ERR_OPENMODE, NFS4ERR_OP_NOT_IN_SESSION,        |\n|             | NFS4ERR_PERM, NFS4ERR_RETRY_UNCACHED_REP,           |\n|             | NFS4ERR_ROFS, NFS4ERR_SERVERFAULT, NFS4ERR_STALE,   |\n|             | NFS4ERR_TOO_MANY_OPS, NFS4ERR_WRONG_TYPE            |\n+-------------+-----------------------------------------------------+",
      "raw": true
    },
    {
      "indent": 12,
      "text": "Valid Error Returns for Each New Protocol Operation",
      "ja": "それぞれの新しいプロトコル動作のための有効なエラーを返します"
    },
    {
      "indent": 0,
      "text": "8.5. Modifications to Existing Operations",
      "section_title": true,
      "ja": "8.5. 既存事業への変更"
    },
    {
      "indent": 3,
      "text": "In order to provide fine-grained access control to query or modify extended attributes, new access rights are defined that can be checked to determine if the client is permitted to perform the xattr operation.",
      "ja": "拡張属性を照会または変更するファイングレイン・アクセス・コントロールを提供するために、新しいアクセス権が定義されているクライアントは、xattrの操作を実行するために許可されているかどうかを判断するためにチェックすることができます。"
    },
    {
      "indent": 3,
      "text": "Note that in general, as explained in Section 18.1.4 of [RFC5661], a client cannot reliably perform an access check with only current file attributes and must verify access with the server.",
      "ja": "一般的には、[RFC5661]のセクション18.1.4で説明したように、クライアントは確実にのみ、現在のファイル属性とアクセスチェックを実行することはできませんし、サーバーとのアクセスを確認しなければならないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "This section extends the semantics of the ACCESS operation documented in Section 18.1 of [RFC5661]. Three new access permissions can be requested:",
      "ja": "このセクションでは、[RFC5661]のセクション18.1に記載のアクセス動作のセマンティクスを拡張します。三社の新しいアクセス許可を要求することができます。"
    },
    {
      "indent": 3,
      "text": "ACCESS4_XAREAD Query a file or directory for its xattr value given a key.",
      "ja": "ACCESS4_XAREADクエリキー与えられたそのxattrの値のためのファイルまたはディレクトリ。"
    },
    {
      "indent": 3,
      "text": "ACCESS4_XAWRITE Modify xattr keys and/or values of a file or directory.",
      "ja": "ACCESS4_XAWRITEはxattrのキーおよび/またはファイルやディレクトリの値を変更します。"
    },
    {
      "indent": 3,
      "text": "ACCESS4_XALIST Query a file or directory to list its xattr keys.",
      "ja": "ACCESS4_XALISTクエリは、ファイルまたはディレクトリがそのxattrのキーを一覧表示します。"
    },
    {
      "indent": 3,
      "text": "As with the existing access permissions, the results of ACCESS are advisory in nature, with no implication that such access will be allowed or denied in the future.",
      "ja": "既存のアクセス許可を持つように、アクセスの結果は、このようなアクセスは、将来的に許可または拒否されることはありません意味合いで、自然の中で助言しています。"
    },
    {
      "indent": 3,
      "text": "The rules for the client and server follow:",
      "ja": "クライアントとサーバーのフォローのための規則："
    },
    {
      "indent": 3,
      "text": "o If the client is sending ACCESS in order to determine if the user can read an xattr of the file with GETXATTR, the client should set ACCESS4_XAREAD in the request's access field.",
      "ja": "ユーザーがGETXATTRでファイルのxattrのを読むことができるかどうかを判断するために、クライアントがアクセスを送信している場合は、O、クライアントはリクエストのアクセスフィールドでACCESS4_XAREADを設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "o If the client is sending ACCESS in order to determine if the user can modify an xattr of the file with SETXATTR or REMOVEXATTR, the client should set ACCESS4_XAWRITE in the request's access field.",
      "ja": "ユーザーがSETXATTRまたはREMOVEXATTRでファイルのxattrのを修正することができるかどうかを決定するために、クライアントがアクセスを送信している場合は、O、クライアントはリクエストのアクセスフィールドでACCESS4_XAWRITEを設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "o If the client is sending ACCESS in order to determine if the user can list the xattr keys of the file with LISTXATTRS, the client should set ACCESS4_XALIST in the request's access field.",
      "ja": "ユーザーがLISTXATTRSでファイルのxattrのキーを一覧表示することができるかどうかを決定するために、クライアントがアクセスを送信している場合は、O、クライアントはリクエストのアクセスフィールドでACCESS4_XALISTを設定する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.6. Numeric Values Assigned to Protocol Extensions",
      "section_title": true,
      "ja": "8.6. プロトコル拡張に割り当てられた数値"
    },
    {
      "indent": 3,
      "text": "This section lists the numeric values that are assigned new attributes and operations to implement the xattr feature. To avoid inconsistent assignments, these have been checked against the most recent protocol version [RFC5661] and the current minor version [RFC7862]. Development of interoperable prototypes is possible using these values.",
      "ja": "このセクションでは、xattrの機能を実装するための新しい属性と操作を割り当てられている数値を示しています。矛盾した割り当てを避けるために、これらは、最新のプロトコルバージョン[RFC5661]と現在のマイナーバージョン[RFC7862]に対してチェックされています。相互運用可能試作品の開発は、これらの値を使用して可能です。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * ACCESS - Check Access Rights\n///  */\n/// const ACCESS4_XAREAD    = 0x00000040;\n/// const ACCESS4_XAWRITE   = 0x00000080;\n/// const ACCESS4_XALIST    = 0x00000100;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * New NFSv4 attribute\n///  */\n/// typedef bool            fattr4_xattr_support;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * New RECOMMENDED Attribute\n///  */\n/// const FATTR4_XATTR_SUPPORT = 82;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * New NFSv4 operations\n///  */\n/// /* Following lines are to be added to enum nfs_opnum4 */\n/// /*\n/// OP_GETXATTR                = 72,\n/// OP_SETXATTR                = 73,\n/// OP_LISTXATTRS              = 74,\n/// OP_REMOVEXATTR             = 75,\n/// */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * New cases for Operation arrays\n///  */\n/// /* Following lines are to be added to nfs_argop4 */\n/// /*\n/// case OP_GETXATTR:      GETXATTR4args opgetxattr;\n/// case OP_SETXATTR:      SETXATTR4args opsetxattr;\n/// case OP_LISTXATTRS:    LISTXATTRS4args oplistxattrs;\n/// case OP_REMOVEXATTR:   REMOVEXATTR4args opremovexattr;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// */",
      "ja": "／／／ ＊／"
    },
    {
      "indent": 3,
      "text": "/// /* Following lines are to be added to nfs_resop4 */\n/// /*\n/// case OP_GETXATTR:      GETXATTR4res opgetxattr;\n/// case OP_SETXATTR:      SETXATTR4res opsetxattr;\n/// case OP_LISTXATTRS:    LISTXATTRS4res oplistxattrs;\n/// case OP_REMOVEXATTR:   REMOVEXATTR4res opremovexattr;\n/// */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "8.7. Caching",
      "section_title": true,
      "ja": "8.7. キャッシング"
    },
    {
      "indent": 3,
      "text": "The caching behavior for extended attributes is similar to other file attributes such as ACLs and is affected by whether or not OPEN delegation has been granted to a client.",
      "ja": "拡張属性のためのキャッシュ動作は、ACLなど、他のファイル属性に似ており、OPEN委任がクライアントに付与されているかどうかに影響されます。"
    },
    {
      "indent": 3,
      "text": "Xattrs obtained from, or sent to, the server may be cached and clients can use them to avoid subsequent GETXATTR requests, provided that the client can ensure that the cached value has not been subsequently modified by another client. Such assurance can be based on the client holding a delegation for the file in question or the client interrogating the change attribute to make sure that any cached value is still valid. Such caching may be read-only or write-through.",
      "ja": "Xattrsから得た、またはに送られ、サーバがキャッシュされると、クライアントは、クライアントがキャッシュされた値が、その後、別のクライアントによって変更されていないことを確認することができれば、その後のGETXATTR要求を、避けるためにそれらを使用することができます。このような保証は、問題のファイルまたは任意のキャッシュされた値がまだ有効であることを確認するために、変化属性を問い合わせるクライアントの委任を保持しているクライアントに基づくことができます。このようなキャッシュは読み取り専用またはライトスルーすることができます。"
    },
    {
      "indent": 3,
      "text": "When a delegation is in effect, some operations by a second client to a delegated file will cause the server to recall the delegation through a callback. For individual operations, we describe, under IMPLEMENTATION, when such operations are required to effect a recall.",
      "ja": "代表団が有効な場合、委任ファイルの2番目のクライアントによる一部の操作は、サーバーがコールバックを通じて委任をリコールするようになります。個々の操作のために、私たちは、このような操作はリコールを行うために必要とされている場合、実装の下で、説明します。"
    },
    {
      "indent": 3,
      "text": "The result of local caching is that the individual xattrs maintained on clients may not be up to date. Changes made in one order on the server may be seen in a different order on one client and in a third order on another client. In order to limit problems that may arise due to separate operations to obtain individual xattrs and other file attributes, a client should treat xattrs just like other file attributes with respect to caching as detailed in Section 10.6 of [RFC7530]. A client may validate its cached version of an xattr for a file by fetching the change attribute and assuming that if the change attribute has the same value as it did when the attributes were cached, then xattrs have not changed. If the client holds a delegation that ensures that the change attribute cannot be modified by another client, it can dispense with actual interrogation of the change attribute.",
      "ja": "ローカルキャッシュの結果は、クライアント上で維持し、個々のxattrsが最新ではないかもしれないということです。サーバー上の1つの順序で行われた変更は1つのクライアント上で、別のクライアント上の三ために、異なる順序で見ることができます。 [RFC7530]のセクション10.6で説明するように、個々のxattrsおよびその他のファイル属性を取得するために起因する別の操作に発生する可能性のある問題を制限するために、単に他のファイルと同様xattrsを扱う必要があり、クライアントは、キャッシュに対して属性。クライアントは、変化属性を取得し、変化属性は、属性がキャッシュされた時にそれがなかったのと同じ値を持つ場合、そのxattrsが変更されていないと仮定することにより、ファイルのxattrの、そのキャッシュされたバージョンを検証することができます。クライアントが変更属性が別のクライアントによって変更することができないことを保証委任を保持している場合、それは変化属性の実際の尋問で済ますことができます。"
    },
    {
      "indent": 3,
      "text": "When a client is changing xattrs of a file, it needs to determine whether there have been changes made to the file by other clients. It does this by using the change attribute as reported before and after the change operation (SETXATTR or REMOVEXATTR) in the associated change_info4 value returned for the operation. The server is able to communicate to the client whether the change_info4 data is provided atomically with respect to the change operation. If the change values are provided atomically, the client has a basis for determining, given proper care, whether other clients are modifying the file in question.",
      "ja": "クライアントは、ファイルのxattrsを変更した場合、それは他のクライアントでファイルの変更があったかどうかを決定する必要があります。これは、前と操作のために返される関連する変化_info4値の変更操作（SETXATTRまたはREMOVEXATTR）の後に報告されたように変化属性を使用してこれを行います。サーバは変化_info4データが変更操作に関してアトミックに設けられているかどうかをクライアントに通信することができます。変更値をアトミックに提供されている場合、クライアントは他のクライアントが問題のファイルを変更しているかどうか、判断する、与えられた適切なケアのための基礎を持っています。"
    },
    {
      "indent": 3,
      "text": "An effective way to enable the client to make this determination simply is for it to serialize all xattr changes made to a specific file. When this is done, and the server provides before and after values of the change attribute atomically, the client can simply compare the after value of the change attribute from one operation with the before value on the subsequent change operation modifying the file. When these are equal, the client is assured that no other client is modifying the file in question.",
      "ja": "それは、特定のファイルに対して行われたすべてのxattrの変更を直列化するために、この決意をするために、クライアントを有効にする効果的な方法は、単純です。変更の値がアトミック属性の前と後にこれが行われ、サーバが提供されている場合、クライアントは、単にファイルを変更し、その後の変更操作の前の値を持つ一つの操作からの変更属性の値の後に比較することができます。これらが等しい場合、クライアントは、他のクライアントは、問題のファイルを変更していないことが保証されます。"
    },
    {
      "indent": 3,
      "text": "If the comparison indicates that the file was updated by another client, the xattr cache associated with the modified file is purged from the client. If the comparison indicates no modification, the xattr cache can be updated on the client to reflect the file operation, and the associated timeout can be extended. The post-operation change value needs to be saved as the basis for future change_info4 comparisons.",
      "ja": "比較は、ファイルが別のクライアントによって更新されたことを示している場合、修正されたファイルに関連付けられているxattrのキャッシュは、クライアントからパージされます。比較は何も変更がないことを示す場合は、xattrのキャッシュはファイル操作を反映するために、クライアント上で更新することができ、および関連するタイムアウトを延長することができます。術後変化値は、将来の変化_info4比較のための基礎として保存する必要があります。"
    },
    {
      "indent": 3,
      "text": "Xattr caching requires that the client revalidate xattr cache data by inspecting the change attribute of a file at the point when an xattr was cached. This requires that the server update the change attribute when xattrs are modified. For a client to use the change_info4 information appropriately and correctly, the server must report the pre- and post-operation change attribute values atomically. When the server is unable to report the before and after values atomically with respect to the xattr update operation, the server must indicate that fact in the change_info4 return value. When the information is not atomically reported, the client should not assume that other clients have not changed the xattrs.",
      "ja": "xattrのキャッシングは、クライアントがxattrのがキャッシュされた時点でファイルの変更属性を調べることによって、xattrのキャッシュデータを再検証する必要があります。これはxattrsが変更されると、サーバーが変更属性を更新する必要があります。適切かつ正確に変化_info4情報を使用するクライアントの場合、サーバーは、前後の動作変更がアトミック属性値を報告しなければなりません。サーバがxattrの更新操作に対するアトミック前後の値を報告することができない場合は、サーバーは変化_info4の戻り値であることを示す必要があります。情報がアトミックに報告されていない場合、クライアントは他のクライアントがxattrsを変更していないことを仮定するべきではありません。"
    },
    {
      "indent": 3,
      "text": "The protocol does not provide support for write-back caching of xattrs. As such, all modifications to xattrs should be done by requests to the server. The server should perform such updates synchronously.",
      "ja": "プロトコルはxattrsのライトバックキャッシュのサポートを提供していません。そのため、xattrsに対するすべての変更は、サーバーへのリクエストによって行われるべきです。サーバーは同期な更新を実行する必要があります。"
    },
    {
      "indent": 0,
      "text": "8.8. Xattrs and File Locking",
      "section_title": true,
      "ja": "8.8.  Xattrsとファイルロック"
    },
    {
      "indent": 3,
      "text": "Xattr operations, for the most part, function independent of operations related to file locking state. For example, xattrs can be interrogated and modified without a corresponding OPEN operation. The server does not need to check for locks that conflict with xattr access or modify operations. For example, another OPEN specified with OPEN4_SHARE_DENY_READ or OPEN4_SHARE_DENY_BOTH does not prevent access to or modification of xattrs. Note that the server MUST still verify that the client is allowed to perform the xattr operation on the basis of access permissions.",
      "ja": "れるxattr動作は、大部分は、操作の機能の独立した状態をロックファイルに関連します。例えば、xattrsは、対応するOPEN操作なし問い合わせ及び修正することができます。サーバーは、xattrのアクセスとの競合や変更操作ロックをチェックする必要はありません。例えば、別のOPENはへのアクセスまたはxattrsの変更を防ぐことはできませんOPEN4_SHARE_DENY_READまたはOPEN4_SHARE_DENY_BOTHで指定されました。サーバがまだクライアントがアクセス権限に基づいてxattrの操作を実行することが許可されていることを確認しなければならないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "However, the presence of delegations may dictate how xattr operations interact with the state-related logic. Xattrs cannot be modified when a delegation for the corresponding file is held by another client. On the other hand, xattrs can be interrogated despite the holding of a write delegation by another client since updates are write-through to the server.",
      "ja": "しかし、代表団の存在は、xattrの操作は、状態関連のロジックとの対話方法を指示することができます。対応するファイルのための委任が別のクライアントによって保持されているときXattrsを変更することはできません。更新はサーバーにライトスルーされているので、一方、xattrsは、別のクライアントによって書き込み代表団の保持にもかかわらず、尋問することができます。"
    },
    {
      "indent": 0,
      "text": "8.9. pNFS Considerations",
      "section_title": true,
      "ja": "8.9.  pNFSの上の考慮事項"
    },
    {
      "indent": 3,
      "text": "All xattr operations are sent to the metadata server, which is responsible for fetching data from and effecting necessary changes to persistent storage.",
      "ja": "すべてのxattrの操作はからデータをフェッチし、永続ストレージに必要な変更を行うための責任があるメタデータ・サーバに送信されます。"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Since xattrs are application data, security issues are exactly the same as those relating to the storing of file data and named attributes. Clients MUST NOT accord any system-interpreted semantics to xattrs, since their use is restricted to user-managed metadata only as explained in Section 5. Extended attributes are various sorts of application data, and the fact that the means of reference is slightly different in each case should not be considered security relevant. As such, the additions to the NFS protocol for supporting extended attributes do not alter the security considerations of the NFSv4 protocol [RFC7530].",
      "ja": "xattrsは、アプリケーションデータであるため、セキュリティ上の問題は正確にファイルデータと命名された属性の保存に関連したものと同じです。その使用は、参照する手段が、わずかに異なっていることを、さまざまなアプリケーションデータの種類、および事実を5.拡張属性のセクションで説明しているだけのようにユーザーが管理されたメタデータに制限されているので、クライアントは、xattrsに任意のシステム・解釈のセマンティクスをアコードてはなりませんそれぞれのケースでは、セキュリティが関連すると考えるべきではありません。そのため、拡張属性をサポートするためのNFSプロトコルへの追加は、NFSv4のプロトコル[RFC7530]のセキュリティの考慮事項を変更しません。"
    },
    {
      "indent": 0,
      "text": "10. IANA Considerations",
      "section_title": true,
      "ja": "10. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "The addition of xattr support to the NFSv4 protocol does not require any actions by IANA. This document limits xattr names to the user namespace, where application developers are allowed to define and use attributes as needed. Unlike named attributes, there is no namespace identifier associated with xattrs that may require registration.",
      "ja": "NFSv4のプロトコルへのxattrのサポートの追加は、IANAによって任意のアクションを必要としません。このドキュメントの制限れるxattr名、アプリケーション開発者は、必要に応じて属性を定義して使用することを許可されたユーザーの名前空間へ。名前の属性とは異なり、登録が必要な場合がありますxattrsに関連付けられた名前空間識別子がありません。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11.参考文献"
    },
    {
      "indent": 0,
      "text": "11.1. Normative References",
      "section_title": true,
      "ja": "11.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[LEGAL] IETF Trust, \"Legal Provisions Relating to IETF Documents\", Version 5.0, March 2015, <http://trustee.ietf.org/docs/ IETF-Trust-License-Policy.pdf>.",
      "ja": "[LEGAL] IETFトラスト、 \"IETFドキュメントに関連法規定\"、バージョン5.0、2015年3月、<http://trustee.ietf.org/docs/ IETF-トラスト・ライセンス・Policy.pdf>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC4506] Eisler, M., Ed., \"XDR: External Data Representation Standard\", STD 67, RFC 4506, DOI 10.17487/RFC4506, May 2006, <https://www.rfc-editor.org/info/rfc4506>.",
      "ja": "[RFC4506]アイスラー、M.、エド、 \"XDR：外部データ表現標準\"。、STD 67、RFC 4506、DOI 10.17487 / RFC4506、2006年5月、<https://www.rfc-editor.org/info/rfc4506 >。"
    },
    {
      "indent": 3,
      "text": "[RFC5661] Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed., \"Network File System (NFS) Version 4 Minor Version 1 Protocol\", RFC 5661, DOI 10.17487/RFC5661, January 2010, <https://www.rfc-editor.org/info/rfc5661>.",
      "ja": "[RFC5661] Shepler、S.編、アイスラー、M.、編、及びD. Noveck編、 \"ネットワークファイルシステム（NFS）バージョン4マイナーバージョン1つのプロトコル\"、RFC 5661、DOI 10.17487 / RFC5661、 2010年1月、<https://www.rfc-editor.org/info/rfc5661>。"
    },
    {
      "indent": 3,
      "text": "[RFC7530] Haynes, T., Ed. and D. Noveck, Ed., \"Network File System (NFS) Version 4 Protocol\", RFC 7530, DOI 10.17487/RFC7530, March 2015, <https://www.rfc-editor.org/info/rfc7530>.",
      "ja": "[RFC7530]ヘインズ、T.、エド。そして、D. Noveck、エド。、 \"ネットワークファイルシステム（NFS）バージョン4プロトコル\"、RFC 7530、DOI 10.17487 / RFC7530、2015年3月、<https://www.rfc-editor.org/info/rfc7530>。"
    },
    {
      "indent": 3,
      "text": "[RFC7862] Haynes, T., \"Network File System (NFS) Version 4 Minor Version 2 Protocol\", RFC 7862, DOI 10.17487/RFC7862, November 2016, <https://www.rfc-editor.org/info/rfc7862>.",
      "ja": "[RFC7862]ヘインズ、T.、 \"ネットワークファイルシステム（NFS）バージョン4マイナーバージョン2プロトコル\"、RFC 7862、DOI 10.17487 / RFC7862、2016年11月、<https://www.rfc-editor.org/info/rfc7862 >。"
    },
    {
      "indent": 3,
      "text": "[RFC7863] Haynes, T., \"Network File System (NFS) Version 4 Minor Version 2 External Data Representation Standard (XDR) Description\", RFC 7863, DOI 10.17487/RFC7863, November 2016, <https://www.rfc-editor.org/info/rfc7863>.",
      "ja": "[RFC7863]ヘインズ、T.、 \"ネットワークファイルシステム（NFS）バージョン4マイナーバージョン2外部データ表現標準（XDR）の説明\"、RFC 7863、DOI 10.17487 / RFC7863、2016年11月、<HTTPS：//www.rfc- editor.org/info/rfc7863>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B.、 \"RFC 2119個のキーワードに小文字VS大文字の曖昧さ\"、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[RFC8178] Noveck, D., \"Rules for NFSv4 Extensions and Minor Versions\", RFC 8178, DOI 10.17487/RFC8178, July 2017, <https://www.rfc-editor.org/info/rfc8178>.",
      "ja": "[RFC8178] Noveck、D.、 \"NFSv4の拡張とマイナーバージョンの規則\"、RFC 8178、DOI 10.17487 / RFC8178、2017年7月、<https://www.rfc-editor.org/info/rfc8178>。"
    },
    {
      "indent": 0,
      "text": "11.2. Informative References",
      "section_title": true,
      "ja": "11.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[FreeBSD] FreeBSD, \"FreeBSD Manual Pages - extattr\", FreeBSD System Calls Manual, January 2008, <http://www.freebsd.org/ cgi/man.cgi?query=extattr&sektion=9>.",
      "ja": "[FreeBSDの] FreeBSDの、 \"FreeBSDのマニュアルページ -  extattrは\"、FreeBSDシステムマニュアル、2008年1月、<？http://www.freebsd.org/ CGI / man.cgiクエリ= extattr＆sektion = 9>を呼び出します。"
    },
    {
      "indent": 3,
      "text": "[freedesktop] freedesktop, \"Guidelines for extended attributes\", May 2013, <http://www.freedesktop.org/wiki/ CommonExtendedAttributes>.",
      "ja": "[freedesktop] freedesktop、 \"拡張属性のためのガイドライン\"、2013年5月、<http://www.freedesktop.org/wiki/ CommonExtendedAttributes>。"
    },
    {
      "indent": 3,
      "text": "[fsattr] Oracle, \"fsattr - extended file attributes\", Man Pages Section 5: Standards, Environments, and Macros, <http://docs.oracle.com/cd/E19253-01/816-5175/6mbba7f02>.",
      "ja": "[fsattr] Oracleは、 \"fsattr  - 拡張ファイル属性\"、マニュアルページセクション5：標準、環境、マクロ、<http://docs.oracle.com/cd/E19253-01/816-5175/6mbba7f02>。"
    },
    {
      "indent": 3,
      "text": "[KDE] Handa, V., \"Extended Attributes Updates\", August 2014, <http://vhanda.in/blog/2014/08/ extended-attributes-updates/>.",
      "ja": "[KDE]半田、V.、 \"拡張属性更新\"、2014年8月、<http://vhanda.in/blog/2014/08/拡張属性-アップデート/>。"
    },
    {
      "indent": 3,
      "text": "[Linux] The Linux man-pages project, \"Linux Programmer's Manual: xattr(7)\", Linux man pages: Section 7, September 2017, <http://man7.org/linux/man-pages/man7/xattr.7.html>.",
      "ja": "[Linuxの] Linuxのマン・ページのプロジェクト、 \"Linuxのプログラマーズ・マニュアル：xattrの（7）\"、Linuxのmanページ：第7節、2017年9月、<http://man7.org/linux/man-pages/man7/xattr。 7.html>。"
    },
    {
      "indent": 3,
      "text": "[Love] Love, R., \"Linux System Programming: Talking Directly to the Kernel and C Library\", O'Reilly Media, Inc., February 2009.",
      "ja": "[愛]愛、R.、「Linuxのシステムプログラミング：カーネルとCライブラリに直接話す」、オライリーメディア社、2009年2月。"
    },
    {
      "indent": 3,
      "text": "[NTFS] Microsoft, \"File Streams\", <http://msdn.microsoft.com/en-us/library/windows/desktop/aa364404(v=vs.85).aspx>.",
      "ja": "[NTFS]マイクロソフト、 \"ファイルストリーム\"、<http://msdn.microsoft.com/en-us/library/windows/desktop/aa364404（V = VS.85）.aspxの>。"
    },
    {
      "indent": 3,
      "text": "[POSIX] The Open Group, \"System Interfaces of The Open Group Base Specifications Issue 7\", IEEE Std 1003.1, 2016 Edition (HTML Version), ISBN 1937218812, September 2016, <http://pubs.opengroup.org/onlinepubs/9699919799/>.",
      "ja": "[POSIX]オープングループ、 \"Open Groupの基本仕様問題7のシステムインタフェース\"、IEEE STD 1003.1、2016年版（HTML版）、ISBN 1937218812、2016年9月、<http://pubs.opengroup.org/onlinepubs/ 9699919799 />。"
    },
    {
      "indent": 3,
      "text": "[Swift] The OpenStack Foundation Wiki, \"Swift-on-File\", July 2015, <https://wiki.openstack.org/wiki/Swiftonfile>.",
      "ja": "[スウィフト] OpenStackの財団Wikiの、 \"スウィフト・オン・ファイル\"、2015年7月、<https://wiki.openstack.org/wiki/Swiftonfile>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document has attempted to capture the discussion on adding xattrs to the NFSv4 protocol from many participants on the IETF NFSv4 mailing list. Those who provided valuable input and comments on draft versions of this document include: Tom Haynes, Christoph Hellwig, Nico Williams, Dave Noveck, Benny Halevy, and Andreas Gruenbacher.",
      "ja": "この文書は、IETF NFSv4のメーリングリスト上の多くの参加者からのNFSv4プロトコルにxattrsを追加することについての議論を捕獲しようとしています。この文書の草案に貴重な入力とコメントを提供した者は、次のとおりです。トム・ヘインズ、クリストフHellwigさん、ニコ・ウィリアムズ、デイヴNoveck、ベニー・アレヴィ、およびアンドレアスGruenbacherを。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Manoj Naik Nutanix 1740 Technology Drive, Suite 150 San Jose, CA 95110 United States of America",
      "ja": "アメリカのManojさんナイクニュータニックス1740テクノロジードライブ、スイート150サンノゼ、CA 95110米国"
    },
    {
      "indent": 3,
      "text": "Email: manoj.naik@nutanix.com",
      "ja": "メール：manoj.naik@nutanix.com"
    },
    {
      "indent": 3,
      "text": "Marc Eshel IBM Almaden 650 Harry Road San Jose, CA 95120 United States of America",
      "ja": "マルク・Eshel IBMアルマデン650ハリーの道サンノゼ、CAアメリカの95120米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 408-927-1894 Email: eshel@us.ibm.com",
      "ja": "電話：+1 408-927-1894電子メール：eshel@us.ibm.com"
    }
  ]
}