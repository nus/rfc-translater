{
  "title": {
    "text": "RFC 8688 - A Session Initiation Protocol (SIP) Response Code for Rejected Calls",
    "ja": "RFC 8688 - 拒否されたコールのセッション開始プロトコル（SIP）応答コード"
  },
  "number": 8688,
  "created_at": "2020-03-10 17:16:08.358444+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                       E.W. Burger\nRequest for Comments: 8688                         Georgetown University\nCategory: Standards Track                                       B. Nagda\nISSN: 2070-1721                    Massachusetts Institute of Technology\n                                                           December 2019",
      "raw": true
    },
    {
      "indent": 2,
      "text": "A Session Initiation Protocol (SIP) Response Code for Rejected Calls",
      "ja": "拒否されたコールのセッション開始プロトコル（SIP）応答コード"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document defines the 608 (Rejected) Session Initiation Protocol (SIP) response code. This response code enables calling parties to learn that an intermediary rejected their call attempt. No one will deliver, and thus answer, the call. As a 6xx code, the caller will be aware that future attempts to contact the same User Agent Server will likely fail. The initial use case driving the need for the 608 response code is when the intermediary is an analytics engine. In this case, the rejection is by a machine or other process. This contrasts with the 607 (Unwanted) SIP response code in which a human at the target User Agent Server indicates the user did not want the call. In some jurisdictions, this distinction is important. This document also defines the use of the Call-Info header field in 608 responses to enable rejected callers to contact entities that blocked their calls in error. This provides a remediation mechanism for legal callers that find their calls blocked.",
      "ja": "このドキュメントでは、608（拒否）Session Initiation Protocol（SIP）応答コードを定義しています。 この応答コードにより、発信者は、仲介者が通話の試行を拒否したことを知ることができます。 誰もコールを配信せず、したがって、応答しません。 6xxコードとして、呼び出し元は、同じユーザーエージェントサーバーに接続しようとする将来の試行が失敗する可能性が高いことを認識します。 608応答コードの必要性を促進する最初のユースケースは、仲介者が分析エンジンである場合です。 この場合、拒否は機械または他のプロセスによるものです。 これは、ターゲットUser Agent Serverの人間がユーザーが呼び出しを望んでいないことを示す607（望ましくない）SIP応答コードとは対照的です。 一部の法域では、この区別が重要です。 また、このドキュメントでは、608応答のCall-Infoヘッダーフィールドの使用を定義して、拒否された発信者が、呼び出しを誤ってブロックしたエンティティに連絡できるようにします。 これにより、通話がブロックされていることを発見した正当な発信者に修復メカニズムが提供されます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これはインターネット標準化過程の文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、Internet Engineering Task Force（IETF）の製品です。 IETFコミュニティのコンセンサスを表しています。 これは公開レビューを受けており、Internet Engineering Steering Group（IESG）による公開が承認されています。 インターネット標準の詳細については、RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8688.",
      "ja": "このドキュメントの現在のステータス、エラッタ、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8688で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2019 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2019 IETF Trustおよび文書の著者として特定された人物。 全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "このドキュメントは、このドキュメントの公開日に有効なBCP 78およびIETFトラストのIETFドキュメントに関連する法的条項（https://trustee.ietf.org/license-info）の対象となります。 これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているので、注意深く確認してください。 このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseテキストを含める必要があり、Simplified BSD Licenseに記載されている保証なしで提供されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction 2. Terminology 3. Protocol Operation 3.1. Intermediary Operation 3.2. JWS Construction 3.2.1. JOSE Header 3.2.2. JWT Payload 3.2.3. JWS Signature 3.3. UAC Operation 3.4. Legacy Interoperation 3.5. Announcement Requirements 4. Examples 4.1. Full Exchange 4.2. Web Site jCard 4.3. Multi-modal jCard 4.4. Legacy Interoperability 5. IANA Considerations 5.1. SIP Response Code 5.2. SIP Feature-Capability Indicator 5.3. JSON Web Token Claim 5.4. Call-Info Purpose 6. Security Considerations 7. References 7.1. Normative References 7.2. Informative References Acknowledgements Authors' Addresses",
      "ja": "1. はじめに2.用語3.プロトコル操作3.1。 中間操作3.2。 JWSの構築3.2.1。 JOSEヘッダー3.2.2。 JWTペイロード3.2.3。 JWS署名3.3。 UAC操作3.4。 レガシー相互運用3.5。 発表要件4.例4.1。 完全な交換4.2。 WebサイトjCard 4.3。 マルチモーダルjCard 4.4。 レガシー相互運用性5. IANAの考慮事項5.1。 SIP応答コード5.2。 SIP機能機能インジケータ5.3。 JSON Web Token Claim 5.4。 Call-Info目的6.セキュリティに関する考慮事項7.参照7.1。 規範的参考資料7.2。 参考情報謝辞著者のアドレス"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The IETF has been addressing numerous issues surrounding how to handle unwanted and, depending on the jurisdiction, illegal calls [RFC5039]. Secure Telephone Identity Revisited (STIR) [RFC7340] and Signature-based Handling of Asserted information using toKENs (SHAKEN) [SHAKEN] address the cryptographic signing and attestation, respectively, of signaling to ensure the integrity and authenticity of the asserted caller identity.",
      "ja": "IETFは、管轄によっては不法な呼び出し[RFC5039]を処理する方法を取り巻く多くの問題に取り組んできました。 Secure Telephone Identity Revisited（STIR）[RFC7340]およびtoKENを使用したアサートされた情報の署名ベースの処理（SHAKEN）[SHAKEN]は、アサートされた発信者IDの整合性と信頼性を確保するために、それぞれシグナリングの暗号化署名と認証に対処します。"
    },
    {
      "indent": 3,
      "text": "This document describes a new Session Initiation Protocol (SIP) [RFC3261] response code, 608, which allows calling parties to learn that an intermediary rejected their call. As described below, we need a distinct indicator to differentiate between a user rejection and an intermediary's rejection of a call. In some jurisdictions, service providers may not be permitted to block calls, even if unwanted by the user, unless there is an explicit user request. Moreover, users may misidentify the nature of a caller.",
      "ja": "このドキュメントでは、新しいセッション開始プロトコル（SIP）[RFC3261]応答コード608について説明します。これにより、発信者は、仲介者が呼び出しを拒否したことを知ることができます。 以下で説明するように、ユーザーの拒否と仲介者による通話の拒否を区別するための明確なインジケーターが必要です。 一部の法域では、明示的なユーザーリクエストがない限り、サービスプロバイダーは、ユーザーが望まない場合でも、呼び出しをブロックすることを許可されない場合があります。 さらに、ユーザーは発信者の性質を誤認する可能性があります。"
    },
    {
      "indent": 3,
      "text": "For example, a legitimate caller may call a user who finds the call to be unwanted. However, instead of marking the call as unwanted, the user may mark the call as illegal. With that information, an analytics engine may determine to block all calls from that source. However, in some jurisdictions, blocking calls from that source for other users may not be legal. Likewise, one can envision jurisdictions that allow an operator to block such calls, but only if there is a remediation mechanism in place to address false positives.",
      "ja": "たとえば、正当な発信者は、その通話が不要であると判断したユーザーに電話をかけることがあります。 ただし、コールを不要としてマークする代わりに、ユーザーはコールを違法としてマークする場合があります。 その情報を使用して、分析エンジンはそのソースからのすべての呼び出しをブロックすることを決定できます。 ただし、一部の法域では、他のユーザーに対するそのソースからの呼び出しをブロックすることは合法ではありません。 同様に、オペレーターがそのような呼び出しをブロックできるようにする管轄区域を構想することができますが、これは誤検知に対処するための修復メカニズムがある場合のみです。"
    },
    {
      "indent": 3,
      "text": "Some call-blocking services may return responses such as 604 (Does Not Exist Anywhere). This might be a strategy to try to get a destination's address removed from a calling database. However, other network elements might also interpret this to mean the user truly does not exist, which might result in the user not being able to receive calls from anyone, even if they wanted to receive the calls. In many jurisdictions, providing such false signaling is also illegal.",
      "ja": "一部のコールブロッキングサービスは、604（Does Not Exist Anywhere）などの応答を返す場合があります。 これは、呼び出し元データベースから宛先のアドレスを削除しようとする戦略かもしれません。 ただし、他のネットワーク要素もこれを解釈して、ユーザーが本当に存在しないことを意味する場合があります。その結果、ユーザーは、電話を受信したい場合でも、誰からも電話を受信できなくなります。 多くの法域では、このような誤った信号を提供することも違法です。"
    },
    {
      "indent": 3,
      "text": "The 608 response code addresses this need of remediating falsely blocked calls. Specifically, this code informs the SIP User Agent Client (UAC) that an intermediary blocked the call and provides a redress mechanism that allows callers to contact the operator of the intermediary.",
      "ja": "608応答コードは、誤ってブロックされた呼び出しを修正するというこのニーズに対処します。 具体的には、このコードは、仲介者が呼び出しをブロックしたことをSIPユーザーエージェントクライアント（UAC）に通知し、発信者が仲介者のオペレーターに連絡できるようにする救済メカニズムを提供します。"
    },
    {
      "indent": 3,
      "text": "In the current call handling ecosystem, users can explicitly reject a call or later mark a call as being unwanted by issuing a 607 SIP response code (Unwanted) [RFC8197]. Figures 1 and 2 show the operation of the 607 SIP response code. The User Agent Server (UAS) indicates the call was unwanted. As [RFC8197] explains, not only does the called party desire to reject that call, they can let their proxy know that they consider future calls from that source unwanted. Upon receipt of the 607 response from the UAS, the proxy may send unwanted call indicators, such as the value of the From header field and other information elements, to a call analytics engine. For various reasons described in [RFC8197], if a network operator receives multiple reports of unwanted calls, that may indicate that the entity placing the calls is likely to be a source of unwanted calls for many people. As such, other customers of the service provider may want the service provider to automatically reject calls on their behalf.",
      "ja": "現在の通話処理エコシステムでは、ユーザーは607 SIP応答コード（不要）[RFC8197]を発行することにより、通話を明示的に拒否したり、後で不要であるとマークしたりできます。図1および2は、607 SIP応答コードの動作を示しています。ユーザーエージェントサーバー（UAS）は、呼び出しが不要であることを示します。 [RFC8197]が説明するように、被呼者はその呼を拒否したいだけでなく、そのソースからの将来の呼は望ましくないと考えることをプロキシに知らせることができます。 UASから607応答を受信すると、プロキシはFromヘッダーフィールドの値やその他の情報要素などの不要なコールインジケータをコール分析エンジンに送信できます。 [RFC8197]で説明されているさまざまな理由により、ネットワークオペレータが不要な呼び出しの複数のレポートを受信した場合、呼び出しを行っているエンティティが多くの人々の不要な呼び出しのソースである可能性が高いことを示す場合があります。そのため、サービスプロバイダーの他の顧客は、サービスプロバイダーに代わってコールを自動的に拒否することができます。"
    },
    {
      "indent": 3,
      "text": "There is another value of the 607 rejection code. Presuming the proxy forwards the response code to the UAC, the calling UAC or intervening proxies will also learn the user is not interested in receiving calls from that sender.",
      "ja": "607拒否コードには別の値があります。 プロキシが応答コードをUACに転送すると仮定すると、呼び出しUACまたは介在するプロキシは、ユーザーがその送信者からの呼び出しを受信することに興味がないことも学習します。"
    },
    {
      "indent": 12,
      "text": "                   +-----------+\n                   |   Call    |\n                   | Analytics |\n                   |  Engine   |\n                   +-----------+\n                      ^     | (likely not SIP)\n                      |     v\n                   +-----------+\n+-----+    607     |  Called   |    607    +-----+\n| UAC | <--------- |  Party    | <-------- | UAS |\n+-----+            |  Proxy    |           +-----+\n                   +-----------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 1: Unwanted (607) Call Flow",
      "ja": "図1：不要な（607）コールフロー"
    },
    {
      "indent": 3,
      "text": "For calls rejected with a 607 from a legitimate caller, receiving a 607 response code can inform the caller to stop attempting to call the user. Moreover, if a legitimate caller believes the user is rejecting their calls in error, they can use other channels to contact the user. For example, if a pharmacy calls a user to let them know their prescription is available for pickup and the user mistakenly thinks the call is unwanted and issues a 607 response code, the pharmacy, having an existing relationship with the customer, can send the user an email or push a note to the pharmacist to ask the customer to consider not rejecting their calls in the future.",
      "ja": "正当な発信者からの607で拒否されたコールの場合、607応答コードを受信すると、発信者にユーザーへの発信の試行を停止するよう通知できます。 さらに、正当な発信者が、ユーザーが誤って通話を拒否していると考える場合、他のチャネルを使用してユーザーに連絡できます。 たとえば、薬局がユーザーに電話して処方箋が受け取り可能であることを伝え、ユーザーが誤って電話が不要であると判断し、607応答コードを発行した場合、薬局は顧客と既存の関係を持ち、ユーザーを送信できます 電子メールを送信するか、薬剤師にメモを押して、今後電話を拒否しないように検討するようお客様に依頼します。"
    },
    {
      "indent": 3,
      "text": "Many systems that allow the user to mark the call unwanted (e.g., with the 607 response code) also allow the user to change their mind and unmark such calls. This mechanism is relatively easy to implement as the user usually has a direct relationship with the service provider that is blocking calls.",
      "ja": "ユーザーが（たとえば、607応答コードを使用して）呼び出しに不要なマークを付けることができる多くのシステムでは、ユーザーが気を変えてそのような呼び出しのマークを解除することもできます。 ユーザーは通常、呼び出しをブロックしているサービスプロバイダーと直接的な関係があるため、このメカニズムは比較的簡単に実装できます。"
    },
    {
      "indent": 3,
      "text": "However, things become more complicated if an intermediary, such as a third-party provider of call management services that classifies calls based on the relative likelihood that the call is unwanted, misidentifies the call as unwanted. Figure 3 shows this case. Note that the UAS typically does not receive an INVITE since the called party proxy rejects the call on behalf of the user. In this situation, it would be beneficial for the caller to learn who rejected the call so they can correct the misidentification.",
      "ja": "ただし、通話が望ましくない相対的な可能性に基づいて通話を分類する通話管理サービスのサードパーティプロバイダーなどの仲介者が、通話を不要と誤認すると、事態はより複雑になります。 図3はこのケースを示しています。 UASは通常、着信側プロキシがユーザーに代わってコールを拒否するため、INVITEを受信しないことに注意してください。 このような状況では、発信者が誤認を修正できるように、誰が通話を拒否したかを知ることが有益です。"
    },
    {
      "indent": 8,
      "text": "                 +--------+         +-----------+\n                 | Called |         |   Call    |\n+-----+          | Party  |         | Analytics |   +-----+\n| UAC |          | Proxy  |         |  Engine   |   | UAS |\n+-----+          +--------+         +-----------+   +-----+\n   |  INVITE         |                    |            |\n   | --------------> |  Is call OK?       |            |\n   |                 |------------------->|            |\n   |                 |                    |            |\n   |                 |               Yes  |            |\n   |                 |<-------------------|            |\n   |                 |                    |            |\n   |                 | INVITE             |            |\n   |                 | ------------------------------> |\n   |                 |                    |            |\n   |                 |                    |       607  |\n   |                 | <------------------------------ |\n   |                 |                    |            |\n   |                 |  Unwanted call     |            |\n   |            607  | -----------------> |            |\n   | <-------------- |  indicators        |            |\n   |                 |                    |            |",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 2: Unwanted (607) Ladder Diagram",
      "ja": "図2：不要な（607）ラダー図"
    },
    {
      "indent": 14,
      "text": "                   +-----------+\n                   |   Call    |\n                   | Analytics |\n                   |  Engine   |\n                   +-----------+\n                      ^     | (likely not SIP)\n                      |     v\n                   +-----------+\n+-----+    608     |  Called   |           +-----+\n| UAC | <--------- |  Party    |           | UAS |\n+-----+            |  Proxy    |           +-----+\n                   +-----------+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 3: Rejected (608) Call Flow",
      "ja": "図3：拒否された（608）コールフロー"
    },
    {
      "indent": 3,
      "text": "In this situation, one might consider having the intermediary use the 607 response code. 607 indicates to the caller that the subscriber does not want the call. However, [RFC8197] specifies that one of the uses of 607 is to inform analytics engines that a user (human) has rejected a call. The problem here is that network elements downstream from the intermediary might interpret the 607 as coming from a user (human) who has marked the call as unwanted, as opposed to coming from an algorithm using statistics or machine learning to reject the call. An algorithm can be vulnerable to the base-rate fallacy [BaseRate] rejecting the call. In other words, those downstream entities should not rely on another entity \"deciding\" the call is unwanted. By distinguishing between a (human) user rejection and an intermediary engine's statistical rejection, a downstream network element that sees a 607 response code can weigh it as a human rejection in its call analytics, versus deciding whether to consider a 608 at all, and if so, weighing it appropriately.",
      "ja": "この場合、仲介者に607応答コードを使用させることを検討するかもしれません。 607は、サブスクライバーが通話を望まないことを発信者に示します。ただし、[RFC8197]は、607の使用の1つが、ユーザー（人間）が呼び出しを拒否したことを分析エンジンに通知することであると指定しています。ここでの問題は、統計または機械学習を使用して呼び出しを拒否するアルゴリズムから来るのではなく、仲介者から下流のネットワーク要素が、607を、呼び出しを不要とマークしたユーザー（人間）からのものとして解釈する可能性があることです。アルゴリズムは、呼び出しを拒否する基本レートの誤り[BaseRate]に対して脆弱です。言い換えれば、これらのダウンストリームエンティティは、コールが不要であると「決定」する別のエンティティに依存すべきではありません。 （人間の）ユーザー拒否と中間エンジンの統計的拒否を区別することにより、607応答コードを見るダウンストリームネットワーク要素は、呼び出し分析で人間の拒否としてそれを比較することができ、608を考慮するかどうかを決定するそのため、適切に計量します。"
    },
    {
      "indent": 3,
      "text": "It is useful for blocked callers to have a redress mechanism. One can imagine that some jurisdictions will require it. However, we must be mindful that most of the calls that intermediaries block will, in fact, be illegal and eligible for blocking. Thus, providing alternate contact information for a user would be counterproductive to protecting that user from illegal communications. This is another reason we do not propose to simply allow alternate contact information in a 607 response message.",
      "ja": "ブロックされた発信者が救済メカニズムを持っていると便利です。 一部の管轄区域ではそれが必要になることが想像できます。 ただし、仲介者がブロックする呼び出しのほとんどは、実際には違法であり、ブロックの対象となることに注意する必要があります。 したがって、ユーザーに別の連絡先情報を提供すると、そのユーザーを違法な通信から保護するのに逆効果になります。 これは、607応答メッセージで代替連絡先情報を単に許可することを提案しないもう1つの理由です。"
    },
    {
      "indent": 3,
      "text": "Why do we not use the same mechanism an analytics service provider offers their customers? Specifically, why not have the analytics service provider allow the called party to correct a call blocked in error? The reason is that while there is an existing relationship between the customer (called party) and the analytics service provider, it is unlikely there is a relationship between the caller and the analytics service provider. Moreover, there are numerous call blocking providers in the ecosystem. Therefore, we need a mechanism for indicating an intermediary rejected a call that also provides contact information for the operator of that intermediary without exposing the target user's contact information.",
      "ja": "分析サービスプロバイダーが顧客に提供するのと同じメカニズムを使用しないのはなぜですか？ 具体的には、アナリティクスサービスプロバイダーに、着信者がエラーでブロックされたコールを修正することを許可しない理由を教えてください。 その理由は、顧客（着信側）と分析サービスプロバイダーの間に既存の関係があるが、発信者と分析サービスプロバイダーの間に関係がある可能性は低いからです。 さらに、エコシステムには多数のコールブロッキングプロバイダーがあります。 したがって、ターゲットユーザーの連絡先情報を公開せずに、仲介者が呼び出しを拒否したことを示すメカニズムが必要です。"
    },
    {
      "indent": 3,
      "text": "The protocol described in this document uses existing SIP protocol mechanisms for specifying the redress mechanism. In the Call-Info header field passed back to the UAC, we send additional information specifying a redress address. We choose to encode the redress address using jCard [RFC7095]. As we will see later in this document, this information needs to have its own application-layer integrity protection. Thus, we use jCard rather than vCard [RFC6350], as we have a marshaling mechanism for creating a JavaScript Object Notation (JSON) [RFC8259] object, such as a jCard, and a standard integrity format for such an object, namely, JSON Web Signature (JWS) [RFC7515]. The SIP community is familiar with this concept as it is the mechanism used by STIR [RFC8224].",
      "ja": "このドキュメントで説明するプロトコルは、救済メカニズムを指定するために既存のSIPプロトコルメカニズムを使用します。 UACに返されるCall-Infoヘッダーフィールドでは、救済アドレスを指定する追加情報を送信します。 jCard [RFC7095]を使用して、アドレスをエンコードすることを選択します。 このドキュメントの後半で説明するように、この情報には独自のアプリケーション層の整合性保護が必要です。 したがって、jCardなどのJavaScript Object Notation（JSON）[RFC8259]オブジェクトを作成するためのマーシャリングメカニズムと、そのようなオブジェクト（JSON）の標準の整合性フォーマットがあるため、vCard [RFC6350]ではなくjCardを使用します。 Web署名（JWS）[RFC7515]。 SIPコミュニティは、STIR [RFC8224]で使用されるメカニズムであるため、この概念に精通しています。"
    },
    {
      "indent": 3,
      "text": "Integrity protecting the jCard with a cryptographic signature might seem unnecessary at first, but it is essential to preventing potential network attacks. Section 6 describes the attack and why we sign the jCard in more detail.",
      "ja": "暗号署名でjCardを保護する整合性は最初は不要に思えるかもしれませんが、潜在的なネットワーク攻撃を防ぐために不可欠です。 セクション6では、攻撃とjCardに署名する理由について詳しく説明します。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はBCP 14 [RFC2119] [RFC8174]で説明されているように、すべて大文字の場合にのみ解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. Protocol Operation",
      "section_title": true,
      "ja": "3. プロトコル操作"
    },
    {
      "indent": 3,
      "text": "This section uses the term \"intermediary\" to mean the entity that acts as a SIP UAS on behalf of the user in the network as opposed to the user's UAS (usually, but not necessarily, their phone). The intermediary could be a back-to-back user agent (B2BUA) or a SIP Proxy.",
      "ja": "このセクションでは、「中間」という用語を使用して、ユーザーのUAS（通常は電話ではありませんが、通常）ではなく、ネットワーク内のユーザーに代わってSIP UASとして機能するエンティティを意味します。 仲介者は、バックツーバックユーザーエージェント（B2BUA）またはSIPプロキシです。"
    },
    {
      "indent": 3,
      "text": "Figure 4 shows an overview of the call flow for a rejected call.",
      "ja": "図4は、拒否されたコールのコールフローの概要を示しています。"
    },
    {
      "indent": 8,
      "text": "                 +--------+         +-----------+\n                 | Called |         |   Call    |\n+-----+          | Party  |         | Analytics |   +-----+\n| UAC |          | Proxy  |         |  Engine   |   | UAS |\n+-----+          +--------+         +-----------+   +-----+\n   |  INVITE         |                    |            |\n   | --------------> |  Is call OK?       |            |\n   |                 |------------------->|            |\n   |                 |                    |            |\n   |                 |               Yes  |            |\n   |                 |<-------------------|            |\n   |                 |                    |            |\n   |                 | INVITE             |            |\n   |                 | ------------------------------> |\n   |                 |                    |            |\n   |                 |                    |       607  |\n   |                 | <------------------------------ |\n   |                 |                    |            |\n   |                 |  Unwanted call     |            |\n   |            607  | -----------------> |            |\n   | <-------------- |  indicators        |            |\n   |                 |                    |            |",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 4: Rejected (608) Ladder Diagram",
      "ja": "図4：拒否された（608）ラダー図"
    },
    {
      "indent": 0,
      "text": "3.1. Intermediary Operation",
      "section_title": true,
      "ja": "3.1. 仲介業務"
    },
    {
      "indent": 3,
      "text": "An intermediary MAY issue the 608 response code in a failure response for an INVITE, MESSAGE, SUBSCRIBE, or other out-of-dialog SIP [RFC3261] request to indicate that an intermediary rejected the offered communication as unwanted by the user. An intermediary MAY issue the 608 as the value of the \"cause\" parameter of a SIP reason-value in a Reason header field [RFC3326].",
      "ja": "仲介者は、INVITE、MESSAGE、SUBSCRIBE、またはその他の非SIP SIP [RFC3261]要求に対する失敗応答で608応答コードを発行して、提供された通信をユーザーが望まないものとして拒否したことを示すことができます。 仲介者は、Reasonヘッダーフィールド[RFC3326]のSIP理由値の「原因」パラメータの値として608を発行するかもしれません。"
    },
    {
      "indent": 3,
      "text": "If an intermediary issues a 608 code and there are no indicators the calling party will use the contents of the Call-Info header field for malicious purposes (see Section 6), the intermediary MUST include a Call-Info header field in the response.",
      "ja": "仲介者が608コードを発行し、発呼者が悪意のある目的でCall-Infoヘッダーフィールドの内容を使用するインジケータがない場合（セクション6を参照）、仲介者は応答にCall-Infoヘッダーフィールドを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "If there is a Call-Info header field, it MUST have the \"purpose\" parameter of \"jwscard\". The value of the Call-Info header field MUST refer to a valid JSON Web Signature (JWS) [RFC7515] encoding of a jCard [RFC7095] object. The following section describes the construction of the JWS.",
      "ja": "Call-Infoヘッダーフィールドがある場合、「jwscard」の「purpose」パラメーターが必要です。 Call-Infoヘッダーフィールドの値は、jCard [RFC7095]オブジェクトの有効なJSON Web Signature（JWS）[RFC7515]エンコーディングを参照する必要があります。 次のセクションでは、JWSの構築について説明します。"
    },
    {
      "indent": 3,
      "text": "Proxies need to be mindful that a downstream intermediary may reject the attempt with a 608 while other paths may still be in progress. In this situation, the requirements stated in Section 16.7 of [RFC3261] apply. Specifically, the proxy should cancel pending transactions and must not create any new branches. Note this is not a new requirement but simply pointing out the existing 6xx protocol mechanism in SIP.",
      "ja": "プロキシは、他のパスがまだ進行中の場合でも、ダウンストリーム仲介者が608での試行を拒否する可能性があることに注意する必要があります。 この状況では、[RFC3261]のセクション16.7に記載されている要件が適用されます。 具体的には、プロキシは保留中のトランザクションをキャンセルし、新しいブランチを作成しないでください。 これは新しい要件ではなく、SIPの既存の6xxプロトコルメカニズムを指しているだけです。"
    },
    {
      "indent": 0,
      "text": "3.2. JWS Construction",
      "section_title": true,
      "ja": "3.2. JWSの構築"
    },
    {
      "indent": 3,
      "text": "The intermediary constructs the JWS of the jCard as follows.",
      "ja": "仲介者は、次のようにjCardのJWSを構築します。"
    },
    {
      "indent": 0,
      "text": "3.2.1. JOSE Header",
      "section_title": true,
      "ja": "3.2.1. JOSEヘッダー"
    },
    {
      "indent": 3,
      "text": "The Javascript Object Signing and Encryption (JOSE) header MUST include the typ, alg, and x5u parameters from JWS [RFC7515]. The typ parameter MUST have the value \"vcard+json\". Implementations MUST support ES256 as JSON Web Algorithms (JWA) [RFC7518] defines it and MAY support other registered signature algorithms. Finally, the x5u parameter MUST be a URI that resolves to the public key certificate corresponding to the key used to digitally sign the JWS.",
      "ja": "Javascript Object Signing and Encryption（JOSE）ヘッダーには、JWS [RFC7515]からのtyp、alg、およびx5uパラメーターを含める必要があります。 typパラメータの値は「vcard + json」でなければなりません。 実装は、JSON Web Algorithms（JWA）[RFC7518]が定義するES256をサポートしなければならず、他の登録済み署名アルゴリズムをサポートする場合があります。 最後に、x5uパラメータは、JWSにデジタル署名するために使用されるキーに対応する公開キー証明書に解決されるURIでなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.2.2. JWT Payload",
      "section_title": true,
      "ja": "3.2.2. JWTペイロード"
    },
    {
      "indent": 3,
      "text": "The payload contains two JSON values. The first JSON Web Token (JWT) claim that MUST be present is the \"iat\" (issued at) claim [RFC7519]. The \"iat\" MUST be set to the date and time of the issuance of the 608 response. This mandatory component protects the response from replay attacks.",
      "ja": "ペイロードには2つのJSON値が含まれます。 存在しなければならない最初のJSON Web Token（JWT）クレームは、「iat」（発行）クレーム[RFC7519]です。 「iat」は、608応答の発行日時に設定する必要があります。 この必須コンポーネントは、リプレイ攻撃からの応答を保護します。"
    },
    {
      "indent": 3,
      "text": "The second JWT claim that MUST be present is the \"jcard\" claim. The value of the jcard [RFC7095] claim is a JSON array conforming to the JSON jCard data format defined in [RFC7095]. Section 5.3 describes the registration. In the construction of the jcard claim, the \"jcard\" MUST include at least one of the URL, EMAIL, TEL, or ADR properties. UACs supporting this specification MUST be prepared to receive a full jCard. Call originators (at the UAC) can use the information returned by the jCard to contact the intermediary that rejected the call to appeal the intermediary's blocking of the call attempt. What the intermediary does if the blocked caller contacts the intermediary is outside the scope of this document.",
      "ja": "存在しなければならない2番目のJWTクレームは、「jcard」クレームです。 jcard [RFC7095]クレームの値は、[RFC7095]で定義されたJSON jCardデータ形式に準拠するJSON配列です。 セクション5.3で登録について説明します。 jcardクレームの構築では、「jcard」にはURL、EMAIL、TEL、またはADRプロパティの少なくとも1つを含める必要があります。 この仕様をサポートするUACは、完全なjCardを受信する準備をする必要があります。 （UACの）コール発信者は、jCardによって返された情報を使用して、コールを拒否した仲介者に連絡し、仲介者によるコール試行のブロックをアピールできます。 ブロックされた発信者が仲介者に連絡した場合の仲介者の行為は、このドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "3.2.3. JWS Signature",
      "section_title": true,
      "ja": "3.2.3. JWS署名"
    },
    {
      "indent": 3,
      "text": "JWS [RFC7515] specifies the procedure for calculating the signature over the jCard JWT. Section 4 of this document has a detailed example on constructing the JWS, including the signature.",
      "ja": "JWS [RFC7515]は、jCard JWTで署名を計算する手順を指定します。 このドキュメントのセクション4には、署名を含むJWSの構築に関する詳細な例があります。"
    },
    {
      "indent": 0,
      "text": "3.3. UAC Operation",
      "section_title": true,
      "ja": "3.3. UAC操作"
    },
    {
      "indent": 3,
      "text": "A UAC conforming to this specification MUST include the sip.608 feature-capability indicator in the Feature-Caps header field of the INVITE request.",
      "ja": "この仕様に準拠するUACは、INVITE要求のFeature-Capsヘッダーフィールドにsip.608機能機能インジケータを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Upon receiving a 608 response, UACs perform normal SIP processing for 6xx responses.",
      "ja": "608応答を受信すると、UACは6xx応答に対して通常のSIP処理を実行します。"
    },
    {
      "indent": 3,
      "text": "As for the disposition of the jCard itself, the UAC MUST check the \"iat\" claim in the JWT. As noted in Section 3.2.2, we are concerned about replay attacks. Therefore, the UAC MUST reject jCards that come with an expired \"iat\". The definition of \"expired\" is a matter of local policy. A reasonable value would be on the order of a minute due to clock drift and the possibility of the playing of an audio announcement before the delivery of the 608 response.",
      "ja": "jCard自体の処理については、UACはJWTの「iat」クレームをチェックする必要があります。 セクション3.2.2で述べたように、リプレイ攻撃が心配です。 したがって、UACは、有効期限が切れた「iat」が付いたjCardを拒否する必要があります。 「期限切れ」の定義は、ローカルポリシーの問題です。 608応答の配信前にクロックドリフトと音声アナウンスが再生される可能性があるため、妥当な値は1分程度です。"
    },
    {
      "indent": 0,
      "text": "3.4. Legacy Interoperation",
      "section_title": true,
      "ja": "3.4. レガシー相互運用"
    },
    {
      "indent": 3,
      "text": "If the UAC indicates support for 608 and the intermediary issues a 608, life is good, as the UAC will receive all the information it needs to remediate an erroneous block by an intermediary. However, what if the UAC does not understand 608? For example, how can we support callers from a legacy, non-SIP, public-switched network connecting to the SIP network via a media gateway?",
      "ja": "UACが608のサポートを示し、仲介者が608を発行した場合、UACは仲介者による誤ったブロックを修正するために必要なすべての情報を受け取るため、寿命は良好です。 しかし、UACが608を理解しない場合はどうなりますか？ たとえば、メディアゲートウェイを介してSIPネットワークに接続するレガシーの非SIPパブリックスイッチドネットワークからの発信者をどのようにサポートできますか？"
    },
    {
      "indent": 3,
      "text": "We address this situation by having the first network element that conforms with this specification play an announcement. See Section 3.5 for requirements on the announcement. The simple rule is a network element that inserts the sip.608 feature capability MUST be able to convey at a minimum how to contact the operator of the intermediary that rejected the call attempt.",
      "ja": "この状況に対処するには、この仕様に準拠する最初のネットワーク要素にアナウンスをさせます。 発表の要件については、セクション3.5を参照してください。 単純なルールは、sip.608機能機能を挿入するネットワーク要素であり、コール試行を拒否した仲介者のオペレーターへの連絡方法を最低限伝えることができなければなりません。"
    },
    {
      "indent": 3,
      "text": "The degenerate case is the intermediary is the only element that understands the semantics of the 608 response code. Obviously, any SIP device will understand that a 608 response code is a 6xx error. However, there are no other elements in the call path that understand the meaning of the value of the Call-Info header field. The intermediary knows this is the case as the INVITE request will not have the sip.608 feature capability. In this case, one can consider the intermediary to be the element \"inserting\" a virtual sip.608 feature capability. If the caveats described in Sections 3.5 and 6 do not hold, the intermediary MUST play the announcement.",
      "ja": "縮退の場合は、仲介者が608応答コードのセマンティクスを理解する唯一の要素です。 明らかに、SIPデバイスは608応答コードが6xxエラーであることを理解します。 ただし、呼び出しパスには、Call-Infoヘッダーフィールドの値の意味を理解する他の要素はありません。 仲介者は、INVITE要求にはsip.608機能機能がないため、これが事実であることを知っています。 この場合、仲介者は仮想sip.608機能機能を「挿入」する要素であると考えることができます。 セクション3.5および6で説明されている警告が保持されない場合、仲介者はアナウンスを再生する必要があります。"
    },
    {
      "indent": 3,
      "text": "Now we take the case where a network element that understands the 608 response code receives an INVITE for further processing. A network element conforming with this specification MUST insert the sip.608 feature capability per the behaviors described in Section 4.2 of [RFC6809].",
      "ja": "ここで、608応答コードを理解するネットワーク要素が、さらに処理するためにINVITEを受信する場合を考えます。 この仕様に準拠するネットワーク要素は、[RFC6809]のセクション4.2で説明されている動作ごとにsip.608機能機能を挿入する必要があります。"
    },
    {
      "indent": 3,
      "text": "Do note that even if a network element plays an announcement describing the contents of the 608 response message, the network element MUST forward the 608 response code message as the final response to the INVITE.",
      "ja": "ネットワーク要素が608応答メッセージの内容を説明するアナウンスを再生する場合でも、ネットワーク要素は608応答コードメッセージをINVITEへの最終応答として転送しなければならないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "One aspect of using a feature capability is that only the network elements that will either consume (UAC) or play an announcement (media gateway, session border controller (SBC) [RFC7092], or proxy) need to understand the sip.608 feature capability. If the other network elements conform to Section 16.6 of [RFC3261], they will pass header fields such as \"Feature-Caps: *;+sip.608\" unmodified and without need for upgrade.",
      "ja": "機能機能を使用する1つの側面は、sip.608機能機能を理解する必要があるのは、アナウンスメント（メディアゲートウェイ、セッションボーダーコントローラー（SBC）[RFC7092]、またはプロキシ）を消費（UAC）または再生するネットワーク要素のみです。 。 他のネットワーク要素が[RFC3261]のセクション16.6に準拠している場合、「Feature-Caps：*; + sip.608」などのヘッダーフィールドを変更せずに、アップグレードの必要なしに渡します。"
    },
    {
      "indent": 3,
      "text": "Because the ultimate disposition of the call attempt will be a 600-class response, the network element conveying the announcement in the legacy direction MUST use the 183 Session Progress response to establish the media session. Because of the small chance the UAC is an extremely old legacy device and is using UDP, the UAC MUST include support for 100rel [RFC3262] in its INVITE, the network element conveying the announcement MUST Require 100rel in the 183, and the UAC MUST issue a Provisional Response ACKnowledgement (PRACK) to which the network element MUST respond 200 OK PRACK.",
      "ja": "呼び出し試行の最終的な性質は600クラスの応答になるため、レガシー方向にアナウンスメントを伝えるネットワーク要素は、183 Session Progress応答を使用してメディアセッションを確立する必要があります。 UACは非常に古いレガシーデバイスであり、UDPを使用している可能性が低いため、UACはINVITEに100rel [RFC3262]のサポートを含めなければならず、アナウンスメントを伝えるネットワーク要素は183に100relを要求しなければならず、UACは ネットワーク要素が200 OK PRACKに応答しなければならない暫定応答確認（PRACK）。"
    },
    {
      "indent": 0,
      "text": "3.5. Announcement Requirements",
      "section_title": true,
      "ja": "3.5. 発表要件"
    },
    {
      "indent": 3,
      "text": "There are a few requirements on the element that handles the announcement for legacy interoperation.",
      "ja": "レガシー相互運用のアナウンスメントを処理する要素には、いくつかの要件があります。"
    },
    {
      "indent": 3,
      "text": "As noted above, the element that inserts the sip.608 feature capability is responsible for conveying the information referenced by the Call-Info header field in the 608 response message. However, this specification does not mandate how to convey that information.",
      "ja": "上記のように、sip.608機能機能を挿入する要素は、608応答メッセージのCall-Infoヘッダーフィールドによって参照される情報を伝達する役割を果たします。 ただし、この仕様では、その情報の伝達方法を義務付けていません。"
    },
    {
      "indent": 3,
      "text": "Let us take the case where a telecommunications service provider controls the element inserting the sip.608 feature capability. It would be reasonable to expect the service provider would play an announcement in the media path towards the UAC (caller). It is important to note the network element should be mindful of the media type requested by the UAC as it formulates the announcement. For example, it would make sense for an INVITE that only indicated audio codecs in the Session Description Protocol (SDP) [RFC4566] to result in an audio announcement. Likewise, if the INVITE only indicated real-time text [RFC4103] and the network element can render the information in the requested media format, the network element should send the information in a text format.",
      "ja": "電気通信サービスプロバイダーがsip.608機能機能を挿入する要素を制御する場合を考えてみましょう。 サービスプロバイダーがUAC（発信者）へのメディアパスでアナウンスを行うことを期待するのは合理的です。 ネットワーク要素は、UACがアナウンスメントを作成するときに要求するメディアタイプに注意する必要があることに注意することが重要です。 たとえば、セッション記述プロトコル（SDP）[RFC4566]でオーディオコーデックのみを示したINVITEがオーディオアナウンスメントにつながるのは理にかなっています。 同様に、INVITEがリアルタイムテキスト[RFC4103]のみを示し、ネットワーク要素が要求されたメディア形式で情報をレンダリングできる場合、ネットワーク要素は情報をテキスト形式で送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "It is also possible for the network element inserting the sip.608 feature capability to be under the control of the same entity that controls the UAC. For example, a large call center might have legacy UACs, but have a modern outbound calling proxy that understands the full semantics of the 608 response code. In this case, it is enough for the outbound calling proxy to digest the Call-Info information and handle the information digitally rather than \"transcoding\" the Call-Info information for presentation to the caller.",
      "ja": "sip.608機能機能を挿入するネットワーク要素が、UACを制御する同じエンティティの制御下にあることも可能です。 たとえば、大規模なコールセンターにはレガシーUACがありますが、608応答コードの完全なセマンティクスを理解する最新の発信呼び出しプロキシがあります。 この場合、発信側のプロキシがCall-Info情報をダイジェストし、発信者に提示するためにCall-Info情報を「トランスコード」するのではなく、デジタルで情報を処理するだけで十分です。"
    },
    {
      "indent": 0,
      "text": "4. Examples",
      "section_title": true,
      "ja": "4. 例"
    },
    {
      "indent": 3,
      "text": "These examples are not normative, do not include all protocol elements, and may have errors. Review the protocol documents for actual syntax and semantics of the protocol elements.",
      "ja": "これらの例は規範的ではなく、すべてのプロトコル要素が含まれているわけではなく、エラーがある場合があります。 プロトコル要素の実際の構文とセマンティクスについては、プロトコルドキュメントを確認してください。"
    },
    {
      "indent": 0,
      "text": "4.1. Full Exchange",
      "section_title": true,
      "ja": "4.1. 完全交換"
    },
    {
      "indent": 3,
      "text": "Given an INVITE, shamelessly taken from [SHAKEN], with the line breaks in the Identity header field for display purposes only:",
      "ja": "[SHAKEN]から恥知らずに取得されたINVITEを指定すると、表示目的でのみIdentityヘッダーフィールドに改行が入ります。"
    },
    {
      "indent": 3,
      "text": "INVITE sip:+12155550113@tel.one.example.net SIP/2.0\nMax-Forwards: 69\nContact: <sip:+12155550112@[2001:db8::12]:50207;rinstance=9da3088f3>\nTo: <sip:+12155550113@tel.one.example.net>\nFrom: \"Alice\" <sip:+12155550112@tel.two.example.net>;tag=614bdb40\nCall-ID: 79048YzkxNDA5NTI1MzA0OWFjOTFkMmFlODhiNTI2OWQ1ZTI\nP-Asserted-Identity: \"Alice\"<sip:+12155550112@tel.two.example.net>,\n    <tel:+12155550112>\nCSeq: 2 INVITE\nAllow: SUBSCRIBE, NOTIFY, INVITE, ACK, CANCEL, BYE, REFER, INFO,\n    MESSAGE, OPTIONS\nContent-Type: application/sdp\nDate: Tue, 16 Aug 2016 19:23:38 GMT\nFeature-Caps: *;+sip.608\nIdentity: eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwicHB0Ijoic2hha2V\nuIiwieDV1IjoiaHR0cDovL2NlcnQuZXhhbXBsZTIubmV0L2V4YW1wbGUuY2VydCJ9.eyJ\nhdHRlc3QiOiJBIiwiZGVzdCI6eyJ0biI6IisxMjE1NTU1MDExMyJ9LCJpYXQiOiIxNDcx\nMzc1NDE4Iiwib3JpZyI6eyJ0biI6IisxMjE1NTU1MDExMiJ9LCJvcmlnaWQiOiIxMjNlN\nDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2NTU0NDAwMCJ9.QAht_eFqQlaoVrnEV56Qly-OU\ntsDGifyCcpYjWcaR661Cz1hutFH2BzIlDswTahO7ujjqsWjeoOb4h97whTQJg;info=\n<http://cert.example2.net/example.cert>;alg=ES256\nContent-Length: 153",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0\no=- 13103070023943130 1 IN IP6 2001:db8::177\nc=IN IP6 2001:db8::177\nt=0 0\nm=audio 54242 RTP/AVP 0\na=sendrecv",
      "raw": true
    },
    {
      "indent": 3,
      "text": "An intermediary could reply:",
      "ja": "仲介者は返信できます："
    },
    {
      "indent": 3,
      "text": "SIP/2.0 608 Rejected\nVia: SIP/2.0/UDP [2001:db8::177]:60012;branch=z9hG4bK-524287-1\nFrom: \"Alice\" <sip:+12155550112@tel.two.example.net>;tag=614bdb40\nTo: <sip:+12155550113@tel.one.example.net>\nCall-ID: 79048YzkxNDA5NTI1MzA0OWFjOTFkMmFlODhiNTI2OWQ1ZTI\nCSeq: 2 INVITE\nCall-Info: <https://block.example.net/complaint-jws>;purpose=jwscard",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The location https://block.example.net/complaint-jws resolves to a JWS. One would construct the JWS as follows.",
      "ja": "ロケーションhttps://block.example.net/complaint-jwsはJWSに解決されます。 次のようにJWSを構築します。"
    },
    {
      "indent": 3,
      "text": "The JWS header of this example jCard could be:",
      "ja": "このサンプルjCardのJWSヘッダーは次のようになります。"
    },
    {
      "indent": 3,
      "text": "{ \"alg\":\"ES256\",\n  \"typ\":\"vcard+json\",\n  \"x5u\":\"https://certs.example.net/reject_key.cer\"\n}",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Now, let us construct a minimal jCard. For this example, the jCard refers the caller to an email address, remediation@blocker.example.net:",
      "ja": "それでは、最小限のjCardを作成しましょう。 この例では、jCardは発信者を電子メールアドレスremediation@blocker.example.netに参照します。"
    },
    {
      "indent": 3,
      "text": "[\"vcard\", [ [\"version\", {}, \"text\", \"4.0\"], [\"fn\", {}, \"text\", \"Robocall Adjudication\"], [\"email\", {\"type\":\"work\"}, \"text\", \"remediation@blocker.example.net\"] ] ]",
      "ja": "[\"vcard\"、[[\"version\"、{}、 \"text\"、 \"4.0\"]、[\"fn\"、{}、 \"text\"、 \"Robocall Adjudication\"]、[\"email\"、{\"type\" ： \"work\"}、 \"text\"、 \"remediation@blocker.example.net\"]]]"
    },
    {
      "indent": 3,
      "text": "With this jCard, we can now construct the JWT:",
      "ja": "このjCardを使用して、JWTを構築できます。"
    },
    {
      "indent": 3,
      "text": "{\n  \"iat\":1546008698,\n  \"jcard\":[\"vcard\",\n    [\n      [\"version\", {}, \"text\", \"4.0\"],\n      [\"fn\", {}, \"text\", \"Robocall Adjudication\"],\n      [\"email\", {\"type\":\"work\"},\n       \"text\", \"remediation@blocker.example.net\"]\n    ]\n  ]\n}",
      "raw": true
    },
    {
      "indent": 3,
      "text": "To calculate the signature, we need to encode the JSON Object Signing and Encryption (JOSE) header and JWT into base64url. As an implementation note, one can trim whitespace in the JSON objects to save a few bytes. UACs MUST be prepared to receive pretty-printed, compact, or bizarrely formatted JSON. For the purposes of this example, we leave the objects with pretty whitespace. Speaking of pretty vs. machine formatting, these examples have line breaks in the base64url encodings for ease of publication in the RFC format. The specification of base64url allows for these line breaks, and the decoded text works just fine. However, those extra line-break octets would affect the calculation of the signature. Implementations MUST NOT insert line breaks into the base64url encodings of the JOSE header or JWT. This also means UACs MUST be prepared to receive arbitrarily long octet streams from the URI referenced by the Call-Info header field.",
      "ja": "署名を計算するには、JSON Object Signing and Encryption（JOSE）ヘッダーとJWTをbase64urlにエンコードする必要があります。 実装ノートとして、JSONオブジェクト内の空白を削除して、数バイトを節約できます。 UACは、きれいに印刷された、コンパクトな、または奇妙にフォーマットされたJSONを受信する準備をする必要があります。 この例の目的のために、オブジェクトにはきれいな空白を残します。 きれいなフォーマットとマシンのフォーマットについて言えば、これらの例では、RFC形式での公開を容易にするためにbase64urlエンコーディングに改行があります。 base64urlの仕様ではこれらの改行が許可されており、デコードされたテキストは正常に機能します。 ただし、これらの余分な改行オクテットは、署名の計算に影響します。 実装は、JOSEヘッダーまたはJWTのbase64urlエンコーディングに改行を挿入してはいけません。 これは、Call-Infoヘッダーフィールドによって参照されるURIから任意の長いオクテットストリームを受信するためにUACを準備する必要があることも意味します。"
    },
    {
      "indent": 3,
      "text": "base64url of JOSE header:",
      "ja": "JOSEヘッダーのbase64url："
    },
    {
      "indent": 3,
      "text": "eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJkK2pzb24iLCJ4NXUiOiJodHRwczov L2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9rZXkuY2VyIn0=",
      "ja": "eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJkK2pzb24iLCJ4NXUiOiJodHRwczov L2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9rZXkuY2VyIn0 ="
    },
    {
      "indent": 3,
      "text": "base64url of JWT:",
      "ja": "JWTのbase64url："
    },
    {
      "indent": 3,
      "text": "eyJpYXQiOjE1NDYwMDg2OTgsImpjYXJkIjpbInZjYXJkIixbWyJ2ZXJzaW9uIix7\nfSwidGV4dCIsIjQuMCJdLFsiZm4iLHt9LCJ0ZXh0IiwiUm9ib2NhbGwgQWRqdWRp\nY2F0aW9uIl0sWyJlbWFpbCIseyJ0eXBlIjoid29yayJ9LCJ0ZXh0IiwicmVtZWRp\nYXRpb25AYmxvY2tlci5leGFtcGxlLm5ldCJdXV19",
      "raw": true
    },
    {
      "indent": 3,
      "text": "In this case, the object to sign (remembering this is just a single long line; the line breaks are for ease of review but do not appear in the actual object) is as follows:",
      "ja": "この場合、署名するオブジェクト（これは単なる1本の長い行であることに注意してください。改行は確認を容易にするためのものですが、実際のオブジェクトには表示されません）："
    },
    {
      "indent": 3,
      "text": "eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJk\nK2pzb24iLCJ4NXUiOiJodHRwczovL2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9r\nZXkuY2VyIn0.eyJpYXQiOjE1NDYwMDg2OTgsImpjYXJkIjpbInZjYXJkIixbWyJ2\nZXJzaW9uIix7fSwidGV4dCIsIjQuMCJdLFsiZm4iLHt9LCJ0ZXh0IiwiUm9ib2Nh\nbGwgQWRqdWRpY2F0aW9uIl0sWyJlbWFpbCIseyJ0eXBlIjoid29yayJ9LCJ0ZXh0\nIiwicmVtZWRpYXRpb25AYmxvY2tlci5leGFtcGxlLm5ldCJdXV19",
      "raw": true
    },
    {
      "indent": 3,
      "text": "We use the following X.509 PKCS #8-encoded Elliptic Curve Digital Signature Algorithm (ECDSA) key, also shamelessly taken from [SHAKEN], as an example key for signing the hash of the above text. Do NOT use this key in real life! It is for example purposes only. At the very least, we would strongly recommend encrypting the key at rest.",
      "ja": "上記のテキストのハッシュに署名するためのキーの例として、次のX.509 PKCS＃8でエンコードされた楕円曲線デジタル署名アルゴリズム（ECDSA）キーを使用します。 このキーは実際には使用しないでください！ これは単なる例です。 少なくとも、保管中のキーを暗号化することを強くお勧めします。"
    },
    {
      "indent": 3,
      "text": "-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgi7q2TZvN9VDFg8Vy\nqCP06bETrR2v8MRvr89rn4i+UAahRANCAAQWfaj1HUETpoNCrOtp9KA8o0V79IuW\nARKt9C1cFPkyd3FBP4SeiNZxQhDrD0tdBHls3/wFe8++K2FrPyQF9vuh\n-----END PRIVATE KEY-----",
      "raw": true
    },
    {
      "indent": 3,
      "text": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8HNbQd/TmvCKwPKHkMF9fScavGeH\n78YTU8qLS8I5HLHSSmlATLcslQMhNC/OhlWBYC626nIlo7XeebYS7Sb37g==\n-----END PUBLIC KEY-----",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The resulting JWS, using the above key on the above object, renders the following ECDSA P-256 SHA-256 digital signature.",
      "ja": "結果のJWSは、上記のオブジェクトで上記のキーを使用して、次のECDSA P-256 SHA-256デジタル署名をレンダリングします。"
    },
    {
      "indent": 3,
      "text": "7uz2SADRvPFOQOO_UgF2ZTUjPlDTegtPrYB04UHBMwBD6g9AmL 5harLJdTKDSTtH-LOV1jwJaGRUOUJiwP27ag",
      "ja": "7uz2SADRvPFOQOO_UgF2ZTUjPlDTegtPrYB04UHBMwBD6g9AmL 5harLJdTKDSTtH-LOV1jwJaGRUOUJiwP27ag"
    },
    {
      "indent": 3,
      "text": "Thus, the JWS stored at https://blocker.example.net/complaints-jws would contain:",
      "ja": "したがって、https：//blocker.example.net/complaints-jwsに保存されているJWSには次のものが含まれます。"
    },
    {
      "indent": 3,
      "text": "eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJkK2pzb24iLCJ4NXUiOiJodHRwczovL 2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9rZXkuY2VyIn0.eyJpYXQiOjE1NDYwMD g2OTgsImpjYXJkIjpbInZjYXJkIixbWyJ2ZXJzaW9uIix7fSwidGV4dCIsIjQuMCJ dLFsiZm4iLHt9LCJ0ZXh0IiwiUm9ib2NhbGwgQWRqdWRpY2F0aW9uIl0sWyJlbWFp bCIseyJ0eXBlIjoid29yayJ9LCJ0ZXh0IiwicmVtZWRpYXRpb25AYmxvY2tlci5le GFtcGxlLm5ldCJdXV19.7uz2SADRvPFOQOO_UgF2ZTUjPlDTegtPrYB04UHBMwBD6 g9AmL5harLJdTKDSTtH-LOV1jwJaGRUOUJiwP27ag",
      "ja": "eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJkK2pzb24iLCJ4NXUiOiJodHRwczovL2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9rZXkuY2VyIn0.eyJpYXQiOjE1NDYwMD g2OTgsImpjYXJkIjpbInZjYXJkIixbWyJ2ZXJzaW9uIix7fSwidGV4dCIsIjQuMCJ dLFsiZm4iLHt9LCJ0ZXh0IiwiUm9ib2NhbGwgQWRqdWRpY2F0aW9uIl0sWyJlbWFp bCIseyJ0eXBlIjoid29yayJ9LCJ0ZXh0IiwicmVtZWRpYXRpb25AYmxvY2tlci5le GFtcGxlLm5ldCJdXV19.7uz2SADRvPFOQOO_UgF2ZTUjPlDTegtPrYB04UHBMwBD6 g9AmL5harLJdTKDSTtH-LOV1jwJaGRUOUJiwP27ag"
    },
    {
      "indent": 0,
      "text": "4.2. Web Site jCard",
      "section_title": true,
      "ja": "4.2. WebサイトjCard"
    },
    {
      "indent": 3,
      "text": "For an intermediary that provides a Web site for adjudication, the jCard could contain the following. Note that we do not show the calculation of the JWS; the URI reference in the Call-Info header field would be to the JWS of the signed jCard.",
      "ja": "裁定のためのWebサイトを提供する仲介業者の場合、jCardには次のものが含まれます。 JWSの計算は示していないことに注意してください。 Call-InfoヘッダーフィールドのURI参照は、署名されたjCardのJWSになります。"
    },
    {
      "indent": 3,
      "text": "[\"vcard\",\n  [\n    [\"version\", {}, \"text\", \"4.0\"],\n    [\"fn\", {}, \"text\", \"Robocall Adjudication\"],\n    [\"url\", {\"type\":\"work\"},\n     \"text\", \"https://blocker.example.net/adjudication-form\"]\n  ]\n]",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.3. Multi-modal jCard",
      "section_title": true,
      "ja": "4.3. マルチモーダルjCard"
    },
    {
      "indent": 3,
      "text": "For an intermediary that provides a telephone number and a postal address, the jCard could contain the following. Note that we do not show the calculation of the JWS; the URI reference in the Call-Info header field would be to the JWS of the signed jCard.",
      "ja": "電話番号と住所を提供する仲介業者の場合、jCardには以下を含めることができます。 JWSの計算は示していないことに注意してください。 Call-InfoヘッダーフィールドのURI参照は、署名されたjCardのJWSになります。"
    },
    {
      "indent": 3,
      "text": "[\"vcard\", [ [\"version\", {}, \"text\", \"4.0\"], [\"fn\", {}, \"text\", \"Robocall Adjudication\"], [\"adr\", {\"type\":\"work\"}, \"text\", [\"Argument Clinic\", \"12 Main St\",\"Anytown\",\"AP\",\"000000\",\"Somecountry\"] ] [\"tel\", {\"type\":\"work\"}, \"uri\", \"tel:+1-555-555-0112\"] ] ]",
      "ja": "[\"vcard\"、[[\"version\"、{}、 \"text\"、 \"4.0\"]、[\"fn\"、{}、 \"text\"、 \"Robocall Adjudication\"]、[\"adr\"、{\"type\" ： \"work\"}、 \"text\"、[\"Argument Clinic\"、 \"12 Main St\"、 \"Anytown\"、 \"AP\"、 \"000000\"、 \"Somecountry\"]] [\"tel\"、{\"type\"： \" work \"}、\" uri \"、\" tel：+ 1-555-555-0112 \"]]]"
    },
    {
      "indent": 3,
      "text": "Note that it is up to the UAC to decide which jCard contact modality, if any, it will use.",
      "ja": "使用するjCardコンタクトモダリティがある場合、それを決定するのはUAC次第であることに注意してください。"
    },
    {
      "indent": 0,
      "text": "4.4. Legacy Interoperability",
      "section_title": true,
      "ja": "4.4. レガシー相互運用性"
    },
    {
      "indent": 3,
      "text": "Figure 5 depicts a call flow illustrating legacy interoperability. In this non-normative example, we see a UAC that does not support the full semantics for 608. However, there is an SBC that does support 608. Per [RFC6809], the SBC can insert \"*;+sip.608\" into the Feature-Caps header field for the INVITE. When the intermediary, labeled \"Called Party Proxy\" in the figure, rejects the call, it knows it can simply perform the processing described in this document. Since the intermediary saw the sip.608 feature capability, it knows it does not need to send any media describing whom to contact in the event of an erroneous rejection. For illustrative purposes, the figure shows generic SIP Proxies in the flow. Their presence or absence or the number of proxies is not relevant to the operation of the protocol. They are in the figure to show that proxies that do not understand the sip.608 feature capability can still participate in a network offering 608 services.",
      "ja": "図5は、レガシー相互運用性を示すコールフローを示しています。 この非規範的な例では、608の完全なセマンティクスをサポートしないUACがあります。ただし、608をサポートするSBCがあります。[RFC6809]に従って、SBCは「*; + sip.608」を挿入できます INVITEのFeature-Capsヘッダーフィールド。 図で「Called Party Proxy」とラベル付けされた仲介者がコールを拒否すると、このドキュメントで説明されている処理を簡単に実行できることがわかります。 仲介者はsip.608機能機能を確認したため、誤って拒否された場合に連絡する相手を説明するメディアを送信する必要がないことを認識しています。 説明のために、図はフロー内の一般的なSIPプロキシを示しています。 それらの有無またはプロキシの数は、プロトコルの動作とは関係ありません。 これらは、sip.608機能の機能を理解していないプロキシが、608サービスを提供するネットワークに参加できることを示しています。"
    },
    {
      "indent": 9,
      "text": "                                                  +---------+\n                                                  |  Call   |\n                                                  |Analytics|\n                                                  | Engine  |\n                                                  +--+--+---+\n                                                     ^  |\n                                                     |  |\n                                                     |  v\n                                                   +-+--+-+\n+---+    +-----+    +---+    +-----+    +-----+    |Called|\n|UAC+----+Proxy+----+SBC+----+Proxy+----+Proxy+----+Party |\n+---+    +-----+    +---+    +-----+    +-----+    |Proxy |\n  |                   |                            +------+\n  | INVITE            |                               |\n  |------------------>|                               |\n  |                   | INVITE                        |\n  |                   |------------------------------>|\n  |                   | Feature-Caps: *;+sip.608      |\n  |                   |                               |\n  |                   |                  608 Rejected |\n  |                   |<------------------------------|\n  |               183 |              Call-Info: <...> |\n  |<------------------|    [path for Call-Info elided |\n  |     SDP for media |     for illustration purposes]|\n  |                   |                               |\n  | PRACK             |                               |\n  |------------------>|                               |\n  |                   |                               |\n  |      200 OK PRACK |                               |\n  |<------------------|                               |\n  |                   |                               |\n  |<== Announcement ==|                               |\n  |                   |                               |\n  |      608 Rejected |                               |\n  |<------------------|                               |\n  |  Call-Info: <...> |                               |\n  |                   |                               |",
      "raw": true
    },
    {
      "indent": 25,
      "text": "Figure 5: Legacy Operation",
      "ja": "図5：レガシー操作"
    },
    {
      "indent": 3,
      "text": "When the SBC receives the 608 response code, it correlates that with the original INVITE from the UAC. The SBC remembers that it inserted the sip.608 feature capability, which means it is responsible for somehow alerting the UAC the call failed and disclosing whom to contact. At this point, the SBC can play a prompt, either natively or through a mechanism such as NETANN [RFC4240], that sends the relevant information in the appropriate media to the UAC. Since this is a potentially long transaction and there is a chance the UAC is using an unreliable transport protocol, the UAC will have indicated support for provisional responses, the SBC will indicate it requires a PRACK from the UAC in the 183 response, the UAC will provide the PRACK, and the SBC will acknowledge receipt of the PRACK before playing the announcement.",
      "ja": "SBCは608応答コードを受信すると、それをUACからの元のINVITEと関連付けます。 SBCは、sip.608機能機能を挿入したことを覚えています。つまり、コールが失敗したことをUACに何らかの形で通知し、連絡先を開示する責任があります。 この時点で、SBCはネイティブまたはNETANN [RFC4240]などのメカニズムを介して、適切なメディアの関連情報をUACに送信するプロンプトを再生できます。 これは潜在的に長いトランザクションであり、UACが信頼できないトランスポートプロトコルを使用している可能性があるため、UACは暫定応答のサポートを示し、SBCは183応答でUACからのPRACKが必要であることを示し、UACは PRACKを提供すると、SBCはアナウンスを再生する前にPRACKの受信を確認します。"
    },
    {
      "indent": 3,
      "text": "As an example, the SBC could extract the FN and TEL jCard fields and play something like a special information tone (see Section 6.21.2.1 of Telcordia [SR-2275] or Section 7 of ITU-T E.180 [ITU.E.180.1998]), followed by \"Your call has been rejected by...\", followed by a text-to-speech translation of the FN text, followed by \"You can reach them on...\", followed by a text-to-speech translation of the telephone number in the TEL field.",
      "ja": "例として、SBCはFNおよびTEL jCardフィールドを抽出し、特別な情報トーンのようなものを再生できます（Telcordia [SR-2275]のセクション6.21.2.1またはITU-T E.180 [ITU.E.のセクション7を参照してください。 180.1998]）、「あなたの電話は…によって拒否されました」、FNテキストのテキスト読み上げ翻訳、「...に到達できます」、テキスト- TELフィールドの電話番号の音声翻訳。"
    },
    {
      "indent": 3,
      "text": "Note that the SBC also still sends the full 608 response code, including the Call-Info header field, towards the UAC.",
      "ja": "SBCは、Call-Infoヘッダーフィールドを含む完全な608応答コードもUACに送信することに注意してください。"
    },
    {
      "indent": 0,
      "text": "5. IANA Considerations",
      "section_title": true,
      "ja": "5. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "5.1. SIP Response Code",
      "section_title": true,
      "ja": "5.1. SIP応答コード"
    },
    {
      "indent": 3,
      "text": "This document defines a new SIP response code, 608, in the \"Response Codes\" subregistry of the \"Session Initiation Protocol (SIP) Parameters\" registry defined in [RFC3261].",
      "ja": "このドキュメントは、[RFC3261]で定義された「Session Initiation Protocol（SIP）Parameters」レジストリの「Response Codes」サブレジストリで、新しいSIP応答コード608を定義します。"
    },
    {
      "indent": 3,
      "text": "Response code: 608 Description: Rejected Reference: RFC 8688",
      "ja": "応答コード：608説明：拒否された参照：RFC 8688"
    },
    {
      "indent": 0,
      "text": "5.2. SIP Feature-Capability Indicator",
      "section_title": true,
      "ja": "5.2. SIP機能機能インジケータ"
    },
    {
      "indent": 3,
      "text": "This document defines the feature capability, sip.608, in the \"SIP Feature-Capability Indicator Registration Tree\" registry defined in [RFC6809].",
      "ja": "このドキュメントでは、[RFC6809]で定義されている「SIP機能-機能インジケータ登録ツリー」レジストリで機能機能sip.608を定義しています。"
    },
    {
      "indent": 3,
      "text": "Name: sip.608 Description: This feature-capability indicator, when included in a Feature-Caps header field of an INVITE request, indicates that the entity associated with the indicator will be responsible for indicating to the caller any information contained in the 608 SIP response code, specifically, the value referenced by the Call-Info header field. Reference: RFC 8688",
      "ja": "名前：sip.608説明：この機能機能インジケーターは、INVITE要求のFeature-Capsヘッダーフィールドに含まれている場合、インジケーターに関連付けられたエンティティが、608 SIPに含まれる情報を発信者に示す責任があることを示します。 応答コード、具体的には、Call-Infoヘッダーフィールドによって参照される値。 参照：RFC 8688"
    },
    {
      "indent": 0,
      "text": "5.3. JSON Web Token Claim",
      "section_title": true,
      "ja": "5.3. JSON Web Token Claim"
    },
    {
      "indent": 3,
      "text": "This document defines the new JSON Web Token claim in the \"JSON Web Token Claims\" subregistry created by [RFC7519]. Section 3.2.2 defines the syntax. The required information is:",
      "ja": "このドキュメントは、[RFC7519]によって作成された「JSON Web Token Claims」サブレジストリで新しいJSON Web Tokenクレームを定義します。 セクション3.2.2は構文を定義します。 必要な情報は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "Claim Name: jcard Claim Description: jCard data Change Controller: IESG Reference: RFC 8688, [RFC7095]",
      "ja": "要求名：jcard要求の説明：jCardデータ変更コントローラー：IESGリファレンス：RFC 8688、[RFC7095]"
    },
    {
      "indent": 0,
      "text": "5.4. Call-Info Purpose",
      "section_title": true,
      "ja": "5.4. 呼び出し情報の目的"
    },
    {
      "indent": 3,
      "text": "This document defines the new predefined value \"jwscard\" for the \"purpose\" header field parameter of the Call-Info header field. This modifies the \"Header Field Parameters and Parameter Values\" subregistry of the \"Session Initiation Protocol (SIP) Parameters\" registry by adding this RFC as a reference to the line for the header field \"Call-Info\" and parameter name \"purpose\":",
      "ja": "このドキュメントでは、Call-Infoヘッダーフィールドの「purpose」ヘッダーフィールドパラメーターの新しい事前定義値「jwscard」を定義しています。 これは、ヘッダーフィールド「Call-Info」およびパラメーター名「purpose」の行への参照としてこのRFCを追加することにより、「Session Initiation Protocol（SIP）Parameters」レジストリーの「Header Field Parameters and Parameter Values」サブレジストリを変更します。"
    },
    {
      "indent": 3,
      "text": "Header Field: Call-Info Parameter Name: purpose Predefined Values: Yes Reference: RFC 8688",
      "ja": "ヘッダーフィールド：Call-Infoパラメーター名：purpose事前定義値：はい参照：RFC 8688"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Intermediary operators need to be mindful to whom they are sending the 608 response. The intermediary could be rejecting a truly malicious caller. This raises two issues. The first is the caller, now alerted that an intermediary is automatically rejecting their call attempts, may change their call behavior to defeat call-blocking systems. The second, and more significant risk, is that by providing a contact in the Call-Info header field, the intermediary may be giving the malicious caller a vector for attack. In other words, the intermediary will be publishing an address that a malicious actor may use to launch an attack on the intermediary. Because of this, intermediary operators may wish to configure their response to only include a Call-Info header field for INVITE, or other signed initiating methods, that pass validation by STIR [RFC8224].",
      "ja": "中間オペレータは、608応答を送信する相手に注意する必要があります。 仲介者は、真に悪意のある発信者を拒否している可能性があります。 これには2つの問題があります。 1つ目は発信者であり、現在、仲介者が自動的に通話の試行を拒否していることを警告されており、通話動作を変更して通話ブロッキングシステムを無効にする可能性があります。 2番目の、より重大なリスクは、Call-Infoヘッダーフィールドに連絡先を提供することにより、仲介者が悪意のある発信者に攻撃のベクトルを与える可能性があることです。 言い換えれば、仲介者は、悪意のある攻撃者が仲介者に対する攻撃を開始するために使用する可能性のあるアドレスを公開します。 このため、中間オペレータは、STIR [RFC8224]による検証に合格する、INVITEまたはその他の署名された開始メソッドのCall-Infoヘッダーフィールドのみを含めるように応答を構成することができます。"
    },
    {
      "indent": 3,
      "text": "Another risk is as follows. Consider an attacker that floods a proxy that supports the sip.608 feature. However, the SDP in the INVITE request refers to a victim device. Moreover, the attacker somehow knows there is a 608-aware gateway connecting to the victim who is on a segment that lacks the sip.608 feature capability. Because the mechanism described here can result in sending an audio file to the target of the SDP, an attacker could use the mechanism described by this document as an amplification attack, given a SIP INVITE can be under 1 kilobyte and an audio file can be hundreds of kilobytes. One remediation for this is for devices that insert a sip.608 feature capability to only transmit media to what is highly likely to be the actual source of the call attempt. A method for this is to only play media in response to a STIR-signed INVITE that passes validation. Beyond requiring a valid STIR signature on the INVITE, the intermediary can also use remediation procedures such as doing the connectivity checks specified by Interactive Connectivity Establishment [RFC8445]. If the target did not request the media, the check will fail.",
      "ja": "別のリスクは次のとおりです。 sip.608機能をサポートするプロキシをフラッディングする攻撃者を考えます。ただし、INVITE要求のSDPは、被害者のデバイスを指します。さらに、攻撃者は、sip.608機能が不足しているセグメント上にいる被害者に接続する608対応ゲートウェイがあることをどういうわけか知っています。ここで説明するメカニズムは、SDPのターゲットに音声ファイルを送信する可能性があるため、SIP INVITEが1キロバイト未満で、音声ファイルが数百になる可能性がある場合、攻撃者はこのドキュメントで説明するメカニズムを増幅攻撃として使用できますキロバイトの。これに対する1つの改善策は、sip.608機能機能を挿入して、コール試行の実際の発信元である可能性が非常に高いメディアにのみメディアを送信するデバイスです。この方法は、検証に合格したSTIR署名済みINVITEに応じてのみメディアを再生することです。 INVITEで有効なSTIR署名を要求する以外に、仲介者は、Interactive Connectivity Establishment [RFC8445]で指定された接続性チェックを行うなどの修復手順を使用することもできます。ターゲットがメディアを要求しなかった場合、チェックは失敗します。"
    },
    {
      "indent": 3,
      "text": "Yet another risk is a malicious intermediary that generates a malicious 608 response with a jCard referring to a malicious agent. For example, the recipient of a 608 may receive a TEL URI in the vCard. When the recipient calls that address, the malicious agent could ask for personally identifying information. However, instead of using that information to verify the recipient's identity, they are phishing the information for nefarious ends. A similar scenario can unfold if the malicious agent inserts a URI that points to a phishing or other site. As such, we strongly recommend the recipient validates to whom they are communicating with if asking to adjudicate an erroneously rejected call attempt. Since we may also be concerned about intermediate nodes modifying contact information, we can address both issues with a single solution. The remediation is to require the intermediary to sign the jCard. Signing the jCard provides integrity protection. In addition, one can imagine mechanisms such as used by [SHAKEN].",
      "ja": "さらに別のリスクは、悪意のあるエージェントを参照するjCardで悪意のある608応答を生成する悪意のある仲介者です。たとえば、608の受信者はvCardでTEL URIを受信できます。受信者がそのアドレスに電話をかけると、悪意のあるエージェントは個人を特定する情報を要求する可能性があります。ただし、その情報を使用して受信者の身元を確認する代わりに、悪意のある目的で情報をフィッシングしています。悪意のあるエージェントがフィッシングサイトまたは他のサイトを指すURIを挿入すると、同様のシナリオが展開する可能性があります。そのため、受信者は、誤って拒否された通話の試行を判断するように依頼する場合、通信相手と検証することを強くお勧めします。中間ノードが連絡先情報を変更することも懸念される可能性があるため、単一のソリューションで両方の問題に対処できます。修復は、仲介者にjCardへの署名を要求することです。 jCardに署名すると、整合性が保護されます。さらに、[SHAKEN]で使用されるようなメカニズムを想像することができます。"
    },
    {
      "indent": 3,
      "text": "Similarly, one can imagine an adverse agent that maliciously spoofs a 608 response with a victim's contact address to many active callers who may then all send redress requests to the specified address (the basis for a denial-of-service attack). The process would occur as follows: (1) a malicious agent senses INVITE requests from a variety of UACs and (2) spoofs 608 responses with an unsigned redress address before the intended receivers can respond, causing (3) the UACs to all contact the redress address at once. The jCard encoding allows the UAC to verify the blocking intermediary's identity before contacting the redress address. Specifically, because the sender signs the jCard, we can cryptographically trace the sender of the jCard. Given the protocol machinery of having a signature, one can apply local policy to decide whether to believe that the sender of the jCard represents the owner of the contact information found in the jCard. This guards against a malicious agent spoofing 608 responses.",
      "ja": "同様に、多くのアクティブな発信者に被害者の連絡先アドレスを使用して608応答を悪意を持って偽装し、すべてが指定されたアドレスに救済要求を送信する可能性のある逆エージェントを想像できます（DoS攻撃の根拠）。プロセスは次のように発生します：（1）悪意のあるエージェントがさまざまなUACからのINVITE要求を検知し、（2）意図された受信者が応答する前に無署名のアドレスでスプーフィング608応答し、（3）UACがすべてに連絡するすぐにアドレスを修正します。 jCardエンコードにより、UACは、救済アドレスに連絡する前に、ブロッキング仲介者の身元を確認できます。具体的には、送信者がjCardに署名するため、jCardの送信者を暗号で追跡できます。署名を持つプロトコルメカニズムを考えると、ローカルポリシーを適用して、jCardの送信者がjCardで見つかった連絡先情報の所有者を表すと信じるかどうかを決定できます。これにより、悪意のあるエージェントが608の応答をスプーフィングするのを防ぎます。"
    },
    {
      "indent": 3,
      "text": "Specifically, one could use policies around signing certificate issuance as a mechanism for traceback to the entity issuing the jCard. One check could be verifying that the identity of the subject of the certificate relates to the To header field of the initial SIP request, similar to validating that the intermediary was vouching for the From header field of a SIP request with that identity. Note that we are only protecting against a malicious intermediary and not a hidden intermediary attack (formerly known as a \"man-in-the-middle attack\"). Thus, we only need to ensure the signature is fresh, which is why we include \"iat\". For most implementations, we assume that the intermediary has a single set of contact points and will generate the jCard on demand. As such, there is no need to directly correlate HTTPS fetches to specific calls. However, since the intermediary is in control of the jCard and Call-Info response, an intermediary may choose to encode per-call information in the URI returned in a given 608 response. However, if the intermediary does go that route, the intermediary MUST use a non-deterministic URI reference mechanism and be prepared to return dummy responses to URI requests referencing calls that do not exist so that attackers attempting to glean call metadata by guessing URIs (and thus calls) will not get any actionable information from the HTTPS GET.",
      "ja": "具体的には、jCardを発行するエンティティへのトレースバックのメカニズムとして、証明書発行の署名に関するポリシーを使用できます。 1つのチェックは、証明書のサブジェクトのIDが最初のSIP要求のToヘッダーフィールドに関連していることを確認することです。これは、仲介者がそのIDを持つSIP要求のFromヘッダーフィールドを保証していることの検証と同様です。弊社は、悪意のある仲介者のみを保護し、隠れた仲介者攻撃（以前は「中間者攻撃」として知られていました）からは保護していないことに注意してください。したがって、署名が新しいことを確認するだけでよいため、「iat」を含めます。ほとんどの実装では、仲介者は単一の接点セットを持ち、オンデマンドでjCardを生成すると想定しています。そのため、HTTPSフェッチを特定の呼び出しに直接関連付ける必要はありません。ただし、仲介者はjCardおよびCall-Info応答を制御しているため、特定の608応答で返されたURIの呼び出しごとの情報をエンコードすることを選択できます。ただし、仲介者がそのルートをたどる場合、仲介者は非決定的なURI参照メカニズムを使用し、存在しない呼び出しを参照するURI要求にダミーの応答を返すように準備する必要があります。そのため、攻撃者はURIを推測して呼び出しメタデータを収集しようとします（そしてしたがって、呼び出し）はHTTPS GETから実用的な情報を取得しません。"
    },
    {
      "indent": 3,
      "text": "Since the decision of whether to include Call-Info in the 608 response is a matter of policy, one thing to consider is whether a legitimate caller can ascertain whom to contact without including such information in the 608. For example, in some jurisdictions, if only the terminating service provider can be the intermediary, the caller can look up who the terminating service provider is based on the routing information for the dialed number. Thus, the Call-Info jCard could be redundant information. However, the factors going into a particular service provider's or jurisdiction's choice of whether to include Call-Info is outside the scope of this document.",
      "ja": "Call Infoを608応答に含めるかどうかの決定はポリシーの問題であるため、考慮すべき1つのことは、正当な発信者が608にそのような情報を含めずに連絡先を確認できるかどうかです。 着信サービスプロバイダーのみが仲介者になることができ、発信者は着信サービスプロバイダーがダイヤル番号のルーティング情報に基づいているかどうかを調べることができます。 したがって、Call-Info jCardは冗長な情報になる可能性があります。 ただし、特定のサービスプロバイダーまたは管轄区がCall-Infoを含めるかどうかを選択する要因は、このドキュメントの範囲外です。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7. 参考文献"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S.、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC3261] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A., Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP: Session Initiation Protocol\", RFC 3261, DOI 10.17487/RFC3261, June 2002, <https://www.rfc-editor.org/info/rfc3261>.",
      "ja": "[RFC3261]ローゼンバーグ、J。、シュルズリンネ、H。、カマリロ、G。、ジョンストン、A。、ピーターソン、J。、スパークス、R。、ハンドリー、M。、およびE.スクーラー、「SIP：Session Initiation Protocol」 、RFC 3261、DOI 10.17487 / RFC3261、2002年6月、<https://www.rfc-editor.org/info/rfc3261>。"
    },
    {
      "indent": 3,
      "text": "[RFC3262] Rosenberg, J. and H. Schulzrinne, \"Reliability of Provisional Responses in Session Initiation Protocol (SIP)\", RFC 3262, DOI 10.17487/RFC3262, June 2002, <https://www.rfc-editor.org/info/rfc3262>.",
      "ja": "[RFC3262]ローゼンバーグ、J。およびH.シュルズリンネ、「セッション開始プロトコル（SIP）での暫定応答の信頼性」、RFC 3262、DOI 10.17487 / RFC3262、2002年6月、<https://www.rfc-editor.org/ info / rfc3262>。"
    },
    {
      "indent": 3,
      "text": "[RFC3326] Schulzrinne, H., Oran, D., and G. Camarillo, \"The Reason Header Field for the Session Initiation Protocol (SIP)\", RFC 3326, DOI 10.17487/RFC3326, December 2002, <https://www.rfc-editor.org/info/rfc3326>.",
      "ja": "[RFC3326] Schulzrinne、H.、Oran、D。、およびG. Camarillo、「セッション開始プロトコル（SIP）の理由ヘッダーフィールド」、RFC 3326、DOI 10.17487 / RFC3326、2002年12月、<https：// www .rfc-editor.org / info / rfc3326>。"
    },
    {
      "indent": 3,
      "text": "[RFC6809] Holmberg, C., Sedlacek, I., and H. Kaplan, \"Mechanism to Indicate Support of Features and Capabilities in the Session Initiation Protocol (SIP)\", RFC 6809, DOI 10.17487/RFC6809, November 2012, <https://www.rfc-editor.org/info/rfc6809>.",
      "ja": "[RFC6809] Holmberg、C.、Sedlacek、I。、およびH. Kaplan、「セッション開始プロトコル（SIP）の機能および機能のサポートを示すメカニズム」、RFC 6809、DOI 10.17487 / RFC6809、2012年11月、<https ：//www.rfc-editor.org/info/rfc6809>。"
    },
    {
      "indent": 3,
      "text": "[RFC7095] Kewisch, P., \"jCard: The JSON Format for vCard\", RFC 7095, DOI 10.17487/RFC7095, January 2014, <https://www.rfc-editor.org/info/rfc7095>.",
      "ja": "[RFC7095] Kewisch、P。、「jCard：vCardのJSON形式」、RFC 7095、DOI 10.17487 / RFC7095、2014年1月、<https://www.rfc-editor.org/info/rfc7095>。"
    },
    {
      "indent": 3,
      "text": "[RFC7515] Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Signature (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May 2015, <https://www.rfc-editor.org/info/rfc7515>.",
      "ja": "[RFC7515]ジョーンズ、M。、ブラッドリー、J。、およびN.咲村、「JSON Web Signature（JWS）」、RFC 7515、DOI 10.17487 / RFC7515、2015年5月、<https://www.rfc-editor.org / info / rfc7515>。"
    },
    {
      "indent": 3,
      "text": "[RFC7518] Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518, DOI 10.17487/RFC7518, May 2015, <https://www.rfc-editor.org/info/rfc7518>.",
      "ja": "[RFC7518]ジョーンズ、M。、「JSON Web Algorithms（JWA）」、RFC 7518、DOI 10.17487 / RFC7518、2015年5月、<https://www.rfc-editor.org/info/rfc7518>。"
    },
    {
      "indent": 3,
      "text": "[RFC7519] Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015, <https://www.rfc-editor.org/info/rfc7519>.",
      "ja": "[RFC7519]ジョーンズ、M。、ブラッドリー、J。、およびN.サキムラ、「JSON Web Token（JWT）」、RFC 7519、DOI 10.17487 / RFC7519、2015年5月、<https://www.rfc-editor.org / info / rfc7519>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[BaseRate] Bar-Hillel, M., \"The Base-Rate Fallacy in Probability Judgements\", April 1977, <https://apps.dtic.mil/docs/citations/ADA045772>.",
      "ja": "[BaseRate] Bar-Hillel、M.、「確率判定における基本レートの誤り」、1977年4月、<https://apps.dtic.mil/docs/citations/ADA045772>。"
    },
    {
      "indent": 3,
      "text": "[ITU.E.180.1998] ITU-T, \"Technical characteristics of tones for the telephone service\", ITU-T Recommendation E.180/Q.35, March 1998.",
      "ja": "[ITU.E.180.1998] ITU-T、「電話サービスのトーンの技術的特性」、ITU-T勧告E.180 / Q.35、1998年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4103] Hellstrom, G. and P. Jones, \"RTP Payload for Text Conversation\", RFC 4103, DOI 10.17487/RFC4103, June 2005, <https://www.rfc-editor.org/info/rfc4103>.",
      "ja": "[RFC4103] Hellstrom、G。、およびP. Jones、「テキスト会話のRTPペイロード」、RFC 4103、DOI 10.17487 / RFC4103、2005年6月、<https://www.rfc-editor.org/info/rfc4103>。"
    },
    {
      "indent": 3,
      "text": "[RFC4240] Burger, E., Ed., Van Dyke, J., and A. Spitzer, \"Basic Network Media Services with SIP\", RFC 4240, DOI 10.17487/RFC4240, December 2005, <https://www.rfc-editor.org/info/rfc4240>.",
      "ja": "[RFC4240] Burger、E.、Ed。、Van Dyke、J。、およびA. Spitzer、「SIPを使用した基本ネットワークメディアサービス」、RFC 4240、DOI 10.17487 / RFC4240、2005年12月、<https：//www.rfc -editor.org/info/rfc4240>。"
    },
    {
      "indent": 3,
      "text": "[RFC4566] Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session Description Protocol\", RFC 4566, DOI 10.17487/RFC4566, July 2006, <https://www.rfc-editor.org/info/rfc4566>.",
      "ja": "[RFC4566] Handley、M.、Jacobson、V。、およびC. Perkins、「SDP：Session Description Protocol」、RFC 4566、DOI 10.17487 / RFC4566、2006年7月、<https://www.rfc-editor.org/ info / rfc4566>。"
    },
    {
      "indent": 3,
      "text": "[RFC5039] Rosenberg, J. and C. Jennings, \"The Session Initiation Protocol (SIP) and Spam\", RFC 5039, DOI 10.17487/RFC5039, January 2008, <https://www.rfc-editor.org/info/rfc5039>.",
      "ja": "[RFC5039]ローゼンバーグ、J。およびC.ジェニングス、「セッション開始プロトコル（SIP）およびスパム」、RFC 5039、DOI 10.17487 / RFC5039、2008年1月、<https://www.rfc-editor.org/info/ rfc5039>。"
    },
    {
      "indent": 3,
      "text": "[RFC6350] Perreault, S., \"vCard Format Specification\", RFC 6350, DOI 10.17487/RFC6350, August 2011, <https://www.rfc-editor.org/info/rfc6350>.",
      "ja": "[RFC6350] Perreault、S。、「vCard Format Specification」、RFC 6350、DOI 10.17487 / RFC6350、2011年8月、<https://www.rfc-editor.org/info/rfc6350>。"
    },
    {
      "indent": 3,
      "text": "[RFC7092] Kaplan, H. and V. Pascual, \"A Taxonomy of Session Initiation Protocol (SIP) Back-to-Back User Agents\", RFC 7092, DOI 10.17487/RFC7092, December 2013, <https://www.rfc-editor.org/info/rfc7092>.",
      "ja": "[RFC7092] Kaplan、H。、およびV. Pascual、「セッション開始プロトコル（SIP）バックツーバックユーザーエージェントの分類」、RFC 7092、DOI 10.17487 / RFC7092、2013年12月、<https：//www.rfc -editor.org/info/rfc7092>。"
    },
    {
      "indent": 3,
      "text": "[RFC7340] Peterson, J., Schulzrinne, H., and H. Tschofenig, \"Secure Telephone Identity Problem Statement and Requirements\", RFC 7340, DOI 10.17487/RFC7340, September 2014, <https://www.rfc-editor.org/info/rfc7340>.",
      "ja": "[RFC7340] Peterson、J.、Schulzrinne、H。、およびH. Tschofenig、「Secure Telephone Identity Problem Statement and Requirements」、RFC 7340、DOI 10.17487 / RFC7340、2014年9月、<https：//www.rfc-editor。 org / info / rfc7340>。"
    },
    {
      "indent": 3,
      "text": "[RFC8197] Schulzrinne, H., \"A SIP Response Code for Unwanted Calls\", RFC 8197, DOI 10.17487/RFC8197, July 2017, <https://www.rfc-editor.org/info/rfc8197>.",
      "ja": "[RFC8197] Schulzrinne、H.、「不要なコールのSIP応答コード」、RFC 8197、DOI 10.17487 / RFC8197、2017年7月、<https://www.rfc-editor.org/info/rfc8197>。"
    },
    {
      "indent": 3,
      "text": "[RFC8224] Peterson, J., Jennings, C., Rescorla, E., and C. Wendt, \"Authenticated Identity Management in the Session Initiation Protocol (SIP)\", RFC 8224, DOI 10.17487/RFC8224, February 2018, <https://www.rfc-editor.org/info/rfc8224>.",
      "ja": "[RFC8224] Peterson、J.、Jennings、C.、Rescorla、E。、およびC. Wendt、「セッション開始プロトコル（SIP）での認証済みID管理」、RFC 8224、DOI 10.17487 / RFC8224、2018年2月、<https ：//www.rfc-editor.org/info/rfc8224>。"
    },
    {
      "indent": 3,
      "text": "[RFC8259] Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", STD 90, RFC 8259, DOI 10.17487/RFC8259, December 2017, <https://www.rfc-editor.org/info/rfc8259>.",
      "ja": "[RFC8259] Bray、T.、Ed。、「JavaScriptオブジェクト表記（JSON）データ交換フォーマット」、STD 90、RFC 8259、DOI 10.17487 / RFC8259、2017年12月、<https://www.rfc-editor.org / info / rfc8259>。"
    },
    {
      "indent": 3,
      "text": "[RFC8445] Keranen, A., Holmberg, C., and J. Rosenberg, \"Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal\", RFC 8445, DOI 10.17487/RFC8445, July 2018, <https://www.rfc-editor.org/info/rfc8445>.",
      "ja": "[RFC8445] Keranen、A.、Holmberg、C。、およびJ. Rosenberg、「Interactive Connectivity Establishment（ICE）：ネットワークアドレス変換（NAT）トラバーサルのプロトコル」、RFC 8445、DOI 10.17487 / RFC8445、2018年7月、< https://www.rfc-editor.org/info/rfc8445>。"
    },
    {
      "indent": 3,
      "text": "[SHAKEN] ATIS/SIP Forum IP-INNI Task Group, \"Signature-based Handling of Asserted information using toKENs (SHAKEN)\", ATIS 1000074, January 2017, <https://www.sipforum.org/download/sip-forum-twg-10- signature-based-handling-of-asserted-information-using-tokens-shaken-pdf/?wpdmdl=2813>.",
      "ja": "[SHAKEN] ATIS / SIPフォーラムIP-INNIタスクグループ、「toKENを使用したアサートされた情報の署名ベースの処理（SHAKEN）」、ATIS 1000074、2017年1月、<https://www.sipforum.org/download/sip-forum -twg-10-トークンベースのアサートされた情報の使用トークンを使用したシェイク-pdf /？wpdmdl = 2813>。"
    },
    {
      "indent": 3,
      "text": "[SR-2275] Telcordia, \"Telcordia Notes on the Networks\", Telcordia SR-2275, October 2000.",
      "ja": "[SR-2275] Telcordia、「Telcordia Notes on the Networks」、Telcordia SR-2275、2000年10月。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document liberally lifts from [RFC8197] in its text and structure. However, the mechanism and purpose of 608 is quite different than 607. Any errors are the current editor's and not the editor of RFC 8197. Thanks also go to Ken Carlberg of the FCC, Russ Housley, Paul Kyzivat, and Tolga Asveren for their suggestions on improving the document. Tolga's suggestion to provide a mechanism for legacy interoperability served to expand the document by 50%. In addition, Tolga came up with the jCard attack. Finally, Christer Holmberg, as always, provided a close reading and fixed a SIP feature-capability bug found by Yehoshua Gev.",
      "ja": "このドキュメントは、テキストと構造において[RFC8197]から自由に持ち上げられます。 ただし、608のメカニズムと目的は607とはまったく異なります。エラーは現在のエディターのものであり、RFC 8197のエディターではありません。提案については、FCCのKen Carlberg、Russ Housley、Paul Kyzivat、およびTolga Asverenに感謝します ドキュメントの改善について。 従来の相互運用性のためのメカニズムを提供するというTolgaの提案は、ドキュメントを50％拡大するのに役立ちました。 さらに、TolgaはjCard攻撃を考案しました。 最後に、Christer Holmbergは、いつものように、読み物を提供し、Yehoshua Gevが発見したSIP機能のバグを修正しました。"
    },
    {
      "indent": 3,
      "text": "Of course, we appreciated the close read and five pages of comments from our estimable Area Director, Adam Roach. In addition, we received valuable comments during IETF Last Call and JWT review from Ines Robles, Mike Jones, and Brian Campbell, and IESG review from Alissa Cooper, Eric Vyncke, Alexey Melnikov, Benjamin Kaduk, Barry Leiba, and with most glee, Warren Kumari.",
      "ja": "もちろん、私たちは、エリアディレクターであるAdam Roachからの綿密な読みと5ページのコメントに感謝しました。 さらに、IETFラストコールおよびJWTのレビュー中に、イネスローブルズ、マイクジョーンズ、ブライアンキャンベルから貴重なコメントを受け取りました。 くまり。"
    },
    {
      "indent": 3,
      "text": "Finally, Bhavik Nagda provided clarifying edits as well and, more especially, wrote and tested an implementation of the 608 response code in Kamailio. Code is available at https://github.com/ nagdab/608_Implementation. Grace Chuan from MIT regenerated and verified the JWT while working at the FCC.",
      "ja": "最後に、Bhavik Nagdaは明確な編集も提供し、特にKamailioの608応答コードの実装を作成およびテストしました。 コードはhttps://github.com/ nagdab / 608_Implementationで入手できます。 MITのGrace Chuanは、FCCでの作業中にJWTを再生成および検証しました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Eric W. Burger Georgetown University 37th & O St, NW Washington, DC 20057 United States of America",
      "ja": "エリック・W・バーガージョージタウン大学37th＆O St、NW Washington、DC 20057アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: eburger@standardstrack.com",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Bhavik Nagda Massachusetts Institute of Technology 77 Massachusetts Avenue Cambridge, MA 02139 United States of America",
      "ja": "Bhavik Nagdaマサチューセッツ工科大学77 Massachusetts Avenue Cambridge、MA 02139アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: nagdab@gmail.com",
      "raw": true
    }
  ]
}