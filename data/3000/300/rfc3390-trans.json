{
  "title": {
    "text": "RFC 3390 - Increasing TCP's Initial Window",
    "ja": "RFC 3390 - TCPの初期ウィンドウを増やします"
  },
  "number": 3390,
  "created_at": "2019-10-27 18:08:24.444537+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                          M. Allman\nRequest for Comments: 3390                                  BBN/NASA GRC\nObsoletes: 2414                                                 S. Floyd\nUpdates: 2581                                                       ICIR\nCategory: Standards Track                                   C. Partridge\n                                                        BBN Technologies\n                                                            October 2002",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Increasing TCP's Initial Window",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2002). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2002）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document specifies an optional standard for TCP to increase the permitted initial window from one or two segment(s) to roughly 4K bytes, replacing RFC 2414. It discusses the advantages and disadvantages of the higher initial window, and includes discussion of experiments and simulations showing that the higher initial window does not lead to congestion collapse. Finally, this document provides guidance on implementation issues.",
      "ja": "この文書は、略4Kバイトに一つまたは二つのセグメント（S）からの許可初期ウィンドウを増加させるためにTCPのための任意の標準を指定し、RFC 2414を交換するより高い初期ウィンドウの利点と欠点について説明し、実験やシミュレーションの議論を含みます高い初期ウィンドウが輻輳崩壊につながるものではないことを示しています。最後に、この文書は、実装上の問題に関するガイダンスを提供します。"
    },
    {
      "indent": 0,
      "text": "Terminology",
      "ja": "用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はありますRFC 2119 [RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "1. TCP Modification",
      "section_title": true,
      "ja": "1. TCP修正"
    },
    {
      "indent": 3,
      "text": "This document obsoletes [RFC2414] and updates [RFC2581] and specifies an increase in the permitted upper bound for TCP's initial window from one or two segment(s) to between two and four segments. In most cases, this change results in an upper bound on the initial window of roughly 4K bytes (although given a large segment size, the permitted initial window of two segments may be significantly larger than 4K bytes).",
      "ja": "このドキュメントは[RFC2414]とアップデート[RFC2581]を時代遅れに1つのまたは2つのセグメント（S）から2〜4つのセグメントの間にTCPの初期ウィンドウの許容上限の増加を指定します。略4Kバイトの初期ウィンドウの上限でほとんどの場合、この変更は、結果（大きいセグメントサイズ与えられているが、二つのセグメントの許容初期ウィンドウは、4Kバイトよりも大幅に大きくてもよいです）。"
    },
    {
      "indent": 3,
      "text": "The upper bound for the initial window is given more precisely in (1):",
      "ja": "初期ウィンドウの上限は、（1）でより正確に与えられます："
    },
    {
      "indent": 9,
      "text": "min (4*MSS, max (2*MSS, 4380 bytes)) (1)",
      "ja": "分（4 * MSS、MAX（2 * MSS 4380バイト））（1）"
    },
    {
      "indent": 3,
      "text": "Note: Sending a 1500 byte packet indicates a maximum segment size (MSS) of 1460 bytes (assuming no IP or TCP options). Therefore, limiting the initial window's MSS to 4380 bytes allows the sender to transmit three segments initially in the common case when using 1500 byte packets.",
      "ja": "注1500バイトのパケットを送信すると（全くIPまたはTCPオプションを想定していない）1460バイトの最大セグメントサイズ（MSS）を示します。したがって、4380バイトに初期ウィンドウのMSSを制限する1500個のバイトのパケットを使用した場合、送信者が共通の場合には、最初に三つのセグメントを送信することを可能にします。"
    },
    {
      "indent": 3,
      "text": "Equivalently, the upper bound for the initial window size is based on the MSS, as follows:",
      "ja": "次のように等価的に、初期ウィンドウサイズの上限は、MSSに基づいています。"
    },
    {
      "indent": 7,
      "text": "If (MSS <= 1095 bytes)\n    then win <= 4 * MSS;\nIf (1095 bytes < MSS < 2190 bytes)\n    then win <= 4380;\nIf (2190 bytes <= MSS)\n    then win <= 2 * MSS;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "This increased initial window is optional: a TCP MAY start with a larger initial window. However, we expect that most general-purpose TCP implementations would choose to use the larger initial congestion window given in equation (1) above.",
      "ja": "TCPは、より大きな初期ウィンドウで開始することがあります。これはオプションで、最初のウィンドウを増加させました。しかし、我々は、最も汎用的なTCPの実装は、上記の式（1）で与えられた大きな初期輻輳ウィンドウを使用することを選択するだろうと期待しています。"
    },
    {
      "indent": 3,
      "text": "This upper bound for the initial window size represents a change from RFC 2581 [RFC2581], which specified that the congestion window be initialized to one or two segments.",
      "ja": "初期ウィンドウサイズに結合し、この上部は、輻輳ウィンドウは、1つのまたは2つのセグメントに初期化されることを指定RFC 2581 [RFC2581]からの変化を表します。"
    },
    {
      "indent": 3,
      "text": "This change applies to the initial window of the connection in the first round trip time (RTT) of data transmission following the TCP three-way handshake. Neither the SYN/ACK nor its acknowledgment (ACK) in the three-way handshake should increase the initial window size above that outlined in equation (1). If the SYN or SYN/ACK is lost, the initial window used by a sender after a correctly transmitted SYN MUST be one segment consisting of MSS bytes.",
      "ja": "この変更は、TCP 3ウェイハンドシェイク、次のデータ伝送の最初のラウンドトリップ時間（RTT）での接続の初期ウィンドウに適用されます。 SYN / ACKもスリーウェイハンドシェイクでの肯定応答（ACK）も、式（1）で概説した前記初期ウィンドウサイズを増やすべきです。 SYNまたはSYN / ACKが失われた場合、正しく送信SYN後に送信者によって使用される初期ウィンドウがMSSバイトからなる一つのセグメントでなければなりません。"
    },
    {
      "indent": 3,
      "text": "TCP implementations use slow start in as many as three different ways: (1) to start a new connection (the initial window); (2) to restart transmission after a long idle period (the restart window); and (3) to restart transmission after a retransmit timeout (the loss window). The change specified in this document affects the value of the initial window. Optionally, a TCP MAY set the restart window to the minimum of the value used for the initial window and the current value of cwnd (in other words, using a larger value for the restart window should never increase the size of cwnd). These changes do NOT change the loss window, which must remain 1 segment of MSS bytes (to permit the lowest possible window size in the case of severe congestion).",
      "ja": "TCPの実装は、最大3つの異なる方法でスロースタートを使用します。（1）新たな接続（初期画面）を起動します。 （2）長いアイドル期間（再起動ウィンドウ）の後に送信を再起動します。 （3）再送タイムアウト（損失ウィンドウ）の後に送信を再開します。この文書で指定された変更は、初期ウィンドウの値に影響を与えます。必要に応じて、TCPは（つまり、再起動のウィンドウのためのより大きな値を使用してのcwndのサイズを大きくすることはありません）初期ウィンドウに使用される値の最小値とのcwndの現在の値に再起動画面を設定することができます。これらの変更は、MSSバイト（ひどい混雑の場合は可能な限り低いウィンドウサイズを可能にするため）の1つのセグメントでなければならない損失ウィンドウを、変更しないでください。"
    },
    {
      "indent": 0,
      "text": "2. Implementation Issues",
      "section_title": true,
      "ja": "2.実装の問題"
    },
    {
      "indent": 3,
      "text": "When larger initial windows are implemented along with Path MTU Discovery [RFC1191], and the MSS being used is found to be too large, the congestion window `cwnd' SHOULD be reduced to prevent large bursts of smaller segments. Specifically, `cwnd' SHOULD be reduced by the ratio of the old segment size to the new segment size.",
      "ja": "大きい初期ウィンドウがパスMTU探索[RFC1191]、および使用されるMSSと一緒に実装されたときには大きすぎることが見出され、輻輳ウィンドウCWND `」は小さなセグメントの大バーストを防ぐために、低減されるべきです。具体的には、 `CWND」は新しいセグメントサイズに古いセグメントサイズの比によって低減されるべきです。"
    },
    {
      "indent": 3,
      "text": "When larger initial windows are implemented along with Path MTU Discovery [RFC1191], alternatives are to set the \"Don't Fragment\" (DF) bit in all segments in the initial window, or to set the \"Don't Fragment\" (DF) bit in one of the segments. It is an open question as to which of these two alternatives is best; we would hope that implementation experiences will shed light on this question. In the first case of setting the DF bit in all segments, if the initial packets are too large, then all of the initial packets will be dropped in the network. In the second case of setting the DF bit in only one segment, if the initial packets are too large, then all but one of the initial packets will be fragmented in the network. When the second case is followed, setting the DF bit in the last segment in the initial window provides the least chance for needless retransmissions when the initial segment size is found to be too large, because it minimizes the chances of duplicate ACKs triggering a Fast Retransmit. However, more attention needs to be paid to the interaction between larger initial windows and Path MTU Discovery.",
      "ja": "大きな初期ウィンドウがパスMTUディスカバリー[RFC1191]と一緒に実装されている場合は、代替案は、初期ウィンドウ内のすべてのセグメントで「フラグメントはいけない」（DF）ビットを設定するために、または「フラグメントしない」を設定する（DFですセグメントのいずれかで）ビット。それは最善であるこれら二つの選択肢のどちらにとして未解決の問題です。我々は、実装の経験が、この質問に光を当てることを願っています。最初のパケットが大きすぎる場合、すべてのセグメントでDFビットを設定する最初のケースでは、すべての最初のパケットは、ネットワーク内の削除されます。唯一つのセグメントにDFビットを設定する第2のケースで、最初のパケットはすべて、その後、大きすぎるが、最初のパケットの1つがネットワーク内で断片化される場合。第二ケースが続く場合、初期セグメントサイズが大きすぎることが見出される場合、それは高速再送信をトリガ重複ACKの可能性を最小限に抑えるため、最初のウィンドウ内の最後のセグメントでDFビットを設定することは、不必要再送信のための少なくとも機会を提供します。しかし、より多くの注意は、より大きな初期ウィンドウとパスMTUディスカバリーの間の相互作用に支払われる必要があります。"
    },
    {
      "indent": 3,
      "text": "The larger initial window specified in this document is not intended as encouragement for web browsers to open multiple simultaneous TCP connections, all with large initial windows. When web browsers open simultaneous TCP connections to the same destination, they are working against TCP's congestion control mechanisms [FF99], regardless of the size of the initial window. Combining this behavior with larger initial windows further increases the unfairness to other traffic in the network. We suggest the use of HTTP/1.1 [RFC2068] (persistent TCP connections and pipelining) as a way to achieve better performance of web transfers.",
      "ja": "この文書で指定された大きな初期ウィンドウは、Webブラウザは、すべての大規模な初期ウィンドウで、複数の同時TCP接続をオープンするために奨励するものではありません。 Webブラウザは、同じ宛先への同時TCP接続を開くと、彼らは関係なく、初期ウィンドウのサイズと、TCPの輻輳制御メカニズム[FF99]不利に働いています。大きな初期ウィンドウでこの動作を組み合わせることで、さらに、ネットワーク内の他のトラフィックに不公平が増加します。私たちは、ウェブ転送のパフォーマンスを向上するための方法として、HTTP / 1.1 [RFC2068]（持続的なTCP接続およびパイプライン）の使用を示唆しています。"
    },
    {
      "indent": 0,
      "text": "3. Advantages of Larger Initial Windows",
      "section_title": true,
      "ja": "大きな初期のWindowsの3利点"
    },
    {
      "indent": 3,
      "text": "1. When the initial window is one segment, a receiver employing delayed ACKs [RFC1122] is forced to wait for a timeout before generating an ACK. With an initial window of at least two segments, the receiver will generate an ACK after the second data segment arrives. This eliminates the wait on the timeout (often up to 200 msec, and possibly up to 500 msec [RFC1122]).",
      "ja": "初期ウィンドウが一つのセグメント、遅延ACKを用いた受信機[RFC1122]はACKを生成する前にタイムアウトを待つことを余儀なくされている1。第二のデータセグメントが到着した後に、少なくとも二つのセグメントの最初のウィンドウで、受信側はACKを生成します。これは、（多くの場合、200ミリ秒までの、そしておそらく500ミリ秒まで[RFC1122]）のタイムアウトの待ち時間がなくなります。"
    },
    {
      "indent": 3,
      "text": "2. For connections transmitting only a small amount of data, a larger initial window reduces the transmission time (assuming at most moderate segment drop rates). For many email (SMTP [Pos82]) and web page (HTTP [RFC1945, RFC2068]) transfers that are less than 4K bytes, the larger initial window would reduce the data transfer time to a single RTT.",
      "ja": "データの少量を伝送接続2.、大きい初期ウィンドウは、（せいぜい中等度のセグメント降下率を仮定して）送信時間を減少させます。 4Kバイト未満である多くの電子メール（SMTP [Pos82]）ウェブページ（HTTP [RFC1945、RFC2068]）を転送するための、より大きな初期ウィンドウは、単一のRTTへのデータ転送時間を減少させるであろう。"
    },
    {
      "indent": 3,
      "text": "3. For connections that will be able to use large congestion windows, this modification eliminates up to three RTTs and a delayed ACK timeout during the initial slow-start phase. This will be of particular benefit for high-bandwidth large-propagation-delay TCP connections, such as those over satellite links.",
      "ja": "大混雑の窓を使用することができます接続の場合は3、この変更は、最初のスロースタートフェーズ中3つのRTTと遅延ACKタイムアウトまで排除します。これは、衛星リンクを介したものなどの高帯域幅の大伝播遅延TCP接続のために特に有益であろう。"
    },
    {
      "indent": 0,
      "text": "4. Disadvantages of Larger Initial Windows for the Individual Connection",
      "ja": "個々の接続のための大規模な初期のWindowsの4.デメリット"
    },
    {
      "indent": 3,
      "text": "In high-congestion environments, particularly for routers that have a bias against bursty traffic (as in the typical Drop Tail router queues), a TCP connection can sometimes be better off starting with an initial window of one segment. There are scenarios where a TCP connection slow-starting from an initial window of one segment might not have segments dropped, while a TCP connection starting with an initial window of four segments might experience unnecessary retransmits due to the inability of the router to handle small bursts. This could result in an unnecessary retransmit timeout. For a large-window connection that is able to recover without a retransmit timeout, this could result in an unnecessarily-early transition from the slow-start to the congestion-avoidance phase of the window increase algorithm. These premature segment drops are unlikely to occur in uncongested networks with sufficient buffering or in moderately-congested networks where the congested router uses active queue management (such as Random Early Detection [FJ93, RFC2309]).",
      "ja": "特に（典型的なドロップテールルータキューのように）バーストトラフィックに対してバイアスを有するルータの高輻輳環境で、TCP接続が時々一つのセグメントの最初のウィンドウで開始したほうが良いことができます。 4つのセグメントの初期ウィンドウから始まるTCP接続が原因小さなバーストを処理するためのルータのできないために不要な再送が発生する可能性がありながら、1つのセグメントの初期ウィンドウからスロー始まるTCP接続がセグメントが落ちていない可能性がありますシナリオがありますが、 。これにより、不要な再送タイムアウトにつながる可能性があります。再送タイムアウトせずに回復することができる大画面接続の場合、これはスロースタートからウィンドウ増加アルゴリズムの輻輳回避フェーズを不必要に早期遷移が生じる可能性があります。これら早期セグメント滴が十分な緩衝または（例えば、ランダム早期検出[FJ93、RFC2309]など）輻輳ルータはアクティブキュー管理を使用して適度に輻輳ネットワークで非輻輳ネットワークで発生しにくいです。"
    },
    {
      "indent": 3,
      "text": "Some TCP connections will receive better performance with the larger initial window even if the burstiness of the initial window results in premature segment drops. This will be true if (1) the TCP connection recovers from the segment drop without a retransmit timeout, and (2) the TCP connection is ultimately limited to a small congestion window by either network congestion or by the receiver's advertised window.",
      "ja": "いくつかのTCP接続は時期尚早セグメントにおける初期ウィンドウ結果のバースト性が低下しても大きな初期ウィンドウでより良いパフォーマンスを受け取ることになります。 （1）TCP接続は再送信タイムアウトせずにセグメント損失から回復、及び（2）TCP接続が最終的にいずれかのネットワークの輻輳によって、または受信機の広告ウィンドウによって小さな輻輳ウィンドウに制限されている場合、これは真であろう。"
    },
    {
      "indent": 0,
      "text": "5. Disadvantages of Larger Initial Windows for the Network",
      "section_title": true,
      "ja": "ネットワークのための大規模な初期のWindowsの5デメリット"
    },
    {
      "indent": 3,
      "text": "In terms of the potential for congestion collapse, we consider two separate potential dangers for the network. The first danger would be a scenario where a large number of segments on congested links were duplicate segments that had already been received at the receiver. The second danger would be a scenario where a large number of segments on congested links were segments that would be dropped later in the network before reaching their final destination.",
      "ja": "輻輳崩壊の可能性に関しては、我々は、ネットワークのための2つの別々の潜在的な危険性を考慮してください。最初の危険性が輻輳したリンク上の多数のセグメントが既に受信機で受信された重複セグメントたシナリオであろう。第二の危険性が輻輳したリンク上の多数のセグメントが、それらの最終宛先に到達する前に、後でネットワークにドロップされるセグメントたシナリオであろう。"
    },
    {
      "indent": 3,
      "text": "In terms of the negative effect on other traffic in the network, a potential disadvantage of larger initial windows would be that they increase the general packet drop rate in the network. We discuss these three issues below.",
      "ja": "ネットワーク内の他のトラフィックにマイナスの効果の点では、大きな初期ウィンドウの潜在的な欠点は、ネットワークの一般的なパケットのドロップ率を上げることになります。我々は、これら3つの問題を議論します。"
    },
    {
      "indent": 3,
      "text": "Duplicate segments:",
      "ja": "重複セグメント："
    },
    {
      "indent": 7,
      "text": "As described in the previous section, the larger initial window\ncould occasionally result in a segment dropped from the initial\nwindow, when that segment might not have been dropped if the\nsender had slow-started from an initial window of one segment.\nHowever, Appendix A shows that even in this case, the larger\ninitial window would not result in the transmission of a large\nnumber of duplicate segments.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Segments dropped later in the network:",
      "ja": "セグメントは、ネットワークの後半で落とさ："
    },
    {
      "indent": 7,
      "text": "How much would the larger initial window for TCP increase the\nnumber of segments on congested links that would be dropped\nbefore reaching their final destination?  This is a problem that\ncan only occur for connections with multiple congested links,\nwhere some segments might use scarce bandwidth on the first\ncongested link along the path, only to be dropped later along the\npath.",
      "raw": true
    },
    {
      "indent": 7,
      "text": "First, many of the TCP connections will have only one congested link along the path. Segments dropped from these connections do not \"waste\" scarce bandwidth, and do not contribute to congestion collapse.",
      "ja": "まず、TCPコネクションの多くは、パスに沿って一つだけ混雑のリンクを持つことになります。セグメントは希少な帯域幅を「無駄」していない、と輻輳崩壊に寄与しないこれらの接続から落下しました。"
    },
    {
      "indent": 7,
      "text": "However, some network paths will have multiple congested links, and segments dropped from the initial window could use scarce bandwidth along the earlier congested links before ultimately being dropped on subsequent congested links. To the extent that the drop rate is independent of the initial window used by TCP segments, the problem of congested links carrying segments that will be dropped before reaching their destination will be similar for TCP connections that start by sending four segments or one segment.",
      "ja": "ただし、一部のネットワークパスは、複数の輻輳したリンクを持つことになり、そして最終的に、後続の輻輳したリンク上にドロップされる前に、以前の輻輳したリンクに沿って希少な帯域幅を使用することができますセグメントは、初期ウィンドウから低下しました。ドロップ率がTCPセグメントによって使用される初期ウィンドウから独立している程度に、その宛先に到達する前にドロップされたセグメントを運ぶ輻輳リンクの問題は、4つのセグメントまたは1つのセグメントを送信することによって開始するTCP接続のために同様であろう。"
    },
    {
      "indent": 3,
      "text": "An increased packet drop rate:",
      "ja": "増加したパケットのドロップ率："
    },
    {
      "indent": 7,
      "text": "For a network with a high segment drop rate, increasing the TCP\ninitial window could increase the segment drop rate even further.\nThis is in part because routers with Drop Tail queue management\nhave difficulties with bursty traffic in times of congestion.\nHowever, given uncorrelated arrivals for TCP connections, the\nlarger TCP initial window should not significantly increase the\nsegment drop rate.  Simulation-based explorations of these issues\nare discussed in Section 7.2.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "These potential dangers for the network are explored in simulations and experiments described in the section below. Our judgment is that while there are dangers of congestion collapse in the current Internet (see [FF99] for a discussion of the dangers of congestion collapse from an increased deployment of UDP connections without end-to-end congestion control), there is no such danger to the network from increasing the TCP initial window to 4K bytes.",
      "ja": "ネットワークのためのこれらの潜在的な危険性は、以下のセクションで説明したシミュレーションや実験で検討されています。私たちの判断は、現在のインターネットでの輻輳崩壊の危険性が（エンドツーエンドの輻輳制御を行わないUDP接続の増加展開から輻輳崩壊の危険性についての議論のための[FF99]を参照）がある一方で、そのようなが存在しないということです4KバイトにTCP初期ウィンドウを増やすからネットワークに危険。"
    },
    {
      "indent": 0,
      "text": "6. Interactions with the Retransmission Timer",
      "section_title": true,
      "ja": "再送信タイマー6.相互作用"
    },
    {
      "indent": 3,
      "text": "Using a larger initial burst of data can exacerbate existing problems with spurious retransmit timeouts on low-bandwidth paths, assuming the standard algorithm for determining the TCP retransmission timeout (RTO) [RFC2988]. The problem is that across low-bandwidth network paths on which the transmission time of a packet is a large portion of the round-trip time, the small packets used to establish a TCP connection do not seed the RTO estimator appropriately. When the first window of data packets is transmitted, the sender's retransmit timer could expire before the acknowledgments for those packets are received. As each acknowledgment arrives, the retransmit timer is generally reset. Thus, the retransmit timer will not expire as long as an acknowledgment arrives at least once a second, given the one-second minimum on the RTO recommended in RFC 2988.",
      "ja": "データの大きな初期バーストを使用することにより、TCPの再送タイムアウト（RTO）[RFC2988]を決定するための標準的なアルゴリズムを仮定し、低帯域幅パス上のスプリアス再送タイムアウトと既存の問題を悪化させることができます。問題は、パケットの伝送時間が往復時間の大部分であり、その上に低帯域幅のネットワークパスを横切って、TCP接続を確立するために使用される小さいパケットは適切RTO推定をシードしないことです。データ・パケットの最初のウィンドウが送信されると、これらのパケットの確認応答が受信される前に、送信者の再送信タイマーが期限切れになる可能性があります。各確認応答が到着すると、再送信タイマーは一般的にリセットされます。確認がRTOは、RFC 2988で推奨に1秒の最小与えられ、少なくとも1秒に1回届くようしたがって、再送信タイマーは限り期限切れになりません。"
    },
    {
      "indent": 3,
      "text": "For instance, consider a 9.6 Kbps link. The initial RTT measurement will be on the order of 67 msec, if we simply consider the transmission time of 2 packets (the SYN and SYN-ACK), each consisting of 40 bytes. Using the RTO estimator given in [RFC2988], this yields an initial RTO of 201 msec (67 + 4*(67/2)). However, we round the RTO to 1 second as specified in RFC 2988. Then assume we send an initial window of one or more 1500-byte packets (1460 data bytes plus overhead). Each packet will take on the order of 1.25 seconds to transmit. Therefore, the RTO will fire before the ACK for the first packet returns, causing a spurious timeout. In this case, a larger initial window of three or four packets exacerbates the problems caused by this spurious timeout.",
      "ja": "例えば、9.6 Kbpsのリンクを考えます。我々は、単に2つのパケット（SYNおよびSYN-ACK）、40バイトからなるそれぞれの伝送時間を考慮すれば、最初のRTT測定は、67ミリ秒のオーダーであろう。 [RFC2988]で与えられたRTO推定器を使用して、これは201ミリ秒の初期RTOを生じる（67 + 4 *（2分の67）） RFC 2988.に指定されているようしかし、我々はその後、我々は、1つ以上の1500バイトのパケット（1460データバイト+オーバーヘッド）の初期画面を送信すると仮定し、1秒にRTOを丸めます。各パケットは、送信するために1.25秒の順になります。したがって、RTOは、スプリアスタイムアウトを引き起こし、最初のパケットが戻るためのACKの前に起動します。この場合、3つのまたは4つのパケットの大きい初期ウィンドウは、このスプリアスタイムアウトによる問題を悪化させます。"
    },
    {
      "indent": 3,
      "text": "One way to deal with this problem is to make the RTO algorithm more conservative. During the initial window of data, for instance, the RTO could be updated for each acknowledgment received. In addition, if the retransmit timer expires for some packet lost in the first window of data, we could leave the exponential-backoff of the retransmit timer engaged until at least one valid RTT measurement, that involves a data packet, is received.",
      "ja": "この問題に対処する一つの方法は、RTOアルゴリズムは、より保守的にすることです。データの初期ウィンドウの間に、例えば、RTOは、受信した各受信確認のために更新することができます。再送信タイマーは、データの最初のウィンドウで失われたいくつかのパケットのための有効期限が切れた場合に加えて、我々はデータパケットを必要とする少なくとも1回の有効なRTTの測定まで従事して再送信タイマーの指数バックオフを残すことができ、受信されます。"
    },
    {
      "indent": 3,
      "text": "Another method would be to refrain from taking an RTT sample during connection establishment, leaving the default RTO in place until TCP takes a sample from a data segment and the corresponding ACK. While this method likely helps prevent spurious retransmits, it also may slow the data transfer down if loss occurs before the RTO is seeded. The use of limited transmit [RFC3042] to aid a TCP connection in recovering from loss using fast retransmit rather than the RTO timer mitigates the performance degradation caused by using the high default RTO during the initial window of data transmission.",
      "ja": "もう一つの方法は、TCPがデータセグメント及び対応するACKからサンプルを取るまで、所定の位置にデフォルトRTOを、接続確立時RTTのサンプルを取って残し控えることであろう。このメソッドは、可能性の高いスプリアス再送を防ぐことができますしながら、RTOを播種する前に損失が発生した場合、それはまた、下りのデータ転送が遅くなることがあります。高速再送信ではなく、RTOタイマを使用して、損失から回復中のTCP接続を助けるために限られた送信を使用する[RFC3042]は、データ送信の初期画面中に高いデフォルトRTOを用いることによる性能低下を軽減します。"
    },
    {
      "indent": 3,
      "text": "This specification leaves the decision about what to do (if anything) with regards to the RTO, when using a larger initial window, to the implementer. However, the RECOMMENDED approach is to refrain from sampling the RTT during the three-way handshake, keeping the default RTO in place until an RTT sample involving a data packet is taken. In addition, it is RECOMMENDED that TCPs use limited transmit [RFC3042].",
      "ja": "この仕様は、（どちらかといえば）実装に、RTO、大きな初期ウィンドウを使用してに関してどうするかについての決定を残します。ただし、推奨されるアプローチは、データパケットを含むRTTサンプルが取られるまで、所定の位置にデフォルトRTOを保ち、3ウェイハンドシェイク中にRTTのサンプリングを控えることです。加えて、のTCPは限ら送信[RFC3042]を使用することをお勧めします。"
    },
    {
      "indent": 0,
      "text": "7. Typical Levels of Burstiness for TCP Traffic.",
      "section_title": true,
      "ja": "TCPトラフィックのバースト性の7典型的なレベル。"
    },
    {
      "indent": 3,
      "text": "Larger TCP initial windows would not dramatically increase the burstiness of TCP traffic in the Internet today, because such traffic is already fairly bursty. Bursts of two and three segments are already typical of TCP [Flo97]; a delayed ACK (covering two previously unacknowledged segments) received during congestion avoidance causes the congestion window to slide and two segments to be sent. The same delayed ACK received during slow start causes the window to slide by two segments and then be incremented by one segment, resulting in a three-segment burst. While not necessarily typical, bursts of four and five segments for TCP are not rare. Assuming delayed ACKs, a single dropped ACK causes the subsequent ACK to cover four previously unacknowledged segments. During congestion avoidance this leads to a four-segment burst, and during slow start a five-segment burst is generated.",
      "ja": "そのようなトラフィックは、すでにかなりバースト性であるため、より大きなTCP初期ウィンドウは劇的に、今日のインターネットではTCPトラフィックのバースト性を増加させないでしょう。 2つのおよび3つのセグメントのバーストが既にTCP [Flo97]の典型的なものです。輻輳回避は、輻輳ウィンドウをスライドさせると二つのセグメントを送信する時（二以前に未確認のセグメントをカバーする）遅延ACKが受信されました。同じ遅延ACKは、スロースタート中に受信したウィンドウは、2つのセグメントによりスライドするようにした後、3セグメントのバーストをもたらす、一つのセグメントだけインクリメントさせます。必ずしも一般的ではないが、TCPのための4つ及び5つのセグメントのバーストは稀ではありません。遅延ACKを仮定すると、単一のACKは、4つの以前に未確認のセグメントをカバーするために、後続のACKを引き起こす低下しました。輻輳回避中、この4つのセグメントバーストをもたらし、低速時5セグメントバーストが生成され始めます。"
    },
    {
      "indent": 3,
      "text": "There are also changes in progress that reduce the performance problems posed by moderate traffic bursts. One such change is the deployment of higher-speed links in some parts of the network, where a burst of 4K bytes can represent a small quantity of data. A second change, for routers with sufficient buffering, is the deployment of queue management mechanisms such as RED, which is designed to be tolerant of transient traffic bursts.",
      "ja": "適度なトラフィックバーストによってもたらされるパフォーマンスの問題を軽減進行中の変化もあります。一つのこのような変化は、4Kバイトのバーストは、データの小さな量を表すことができるネットワークの一部で高速リンクの展開です。第2の変更は、十分なバッファリングルータに、このような過渡的なトラフィックバーストの耐性であるように設計されているREDなどキュー管理メカニズムの導入です。"
    },
    {
      "indent": 0,
      "text": "8. Simulations and Experimental Results",
      "section_title": true,
      "ja": "8.シミュレーションと実験結果"
    },
    {
      "indent": 0,
      "text": "8.1 Studies of TCP Connections using that Larger Initial Window",
      "section_title": true,
      "ja": "その大きな初期ウィンドウを使用してTCP接続の8.1研究"
    },
    {
      "indent": 3,
      "text": "This section surveys simulations and experiments that explore the effect of larger initial windows on TCP connections. The first set of experiments explores performance over satellite links. Larger initial windows have been shown to improve the performance of TCP connections over satellite channels [All97b]. In this study, an initial window of four segments (512 byte MSS) resulted in throughput improvements of up to 30% (depending upon transfer size). [KAGT98] shows that the use of larger initial windows results in a decrease in transfer time in HTTP tests over the ACTS satellite system. A study involving simulations of a large number of HTTP transactions over hybrid fiber coax (HFC) indicates that the use of larger initial windows decreases the time required to load WWW pages [Nic98].",
      "ja": "このセクションでは、TCPコネクション上の大きな初期ウィンドウの影響を探る調査のシミュレーションと実験。実験の最初のセットは、衛星回線でのパフォーマンスを探ります。大きな初期ウィンドウでは、衛星放送チャンネル[All97b]上のTCP接続のパフォーマンスを改善することが示されています。本研究では、4つのセグメント（512バイトMSS）の初期ウィンドウは、（転送サイズに応じて）30％までのスループットの改善をもたらしました。 【KAGT98] ACTS衛星システム上HTTPテストの転送時間の減少が大きい初期ウィンドウ結果を使用することを示しています。ハイブリッドファイバ同軸（HFC）でHTTPトランザクションの多数のシミュレーションを含む研究が大きい初期ウィンドウの使用は、WWWページ[Nic98]をロードするのに必要な時間を減少させることを示しています。"
    },
    {
      "indent": 3,
      "text": "A second set of experiments explored TCP performance over dialup modem links. In experiments over a 28.8 bps dialup channel [All97a, AHO98], a four-segment initial window decreased the transfer time of a 16KB file by roughly 10%, with no accompanying increase in the drop rate. A simulation study [RFC2416] investigated the effects of using a larger initial window on a host connected by a slow modem link and a router with a 3 packet buffer. The study concluded that for the scenario investigated, the use of larger initial windows was not harmful to TCP performance.",
      "ja": "実験の第2のセットは、ダイヤルアップモデムリンク上のTCP性能を検討しました。 28.8 BPSダイアルアップチャネル[All97a、AHO98]上の実験では、4セグメント初期ウィンドウは、ドロップ率に伴う増加に伴って、およそ10％の16キロバイトのファイルの転送時間を減少させました。シミュレーション研究[RFC2416]は3パケットバッファと低速のモデムリンクとルーターで接続されたホスト上の大きな初期ウィンドウを使用した場合の効果を調べました。研究では、調査したシナリオのために、より大きな初期ウィンドウを使用すると、TCP性能に有害ではないと結論付けました。"
    },
    {
      "indent": 3,
      "text": "Finally, [All00] illustrates that the percentage of connections at a particular web server that experience loss in the initial window of data transmission increases with the size of the initial congestion window. However, the increase is in line with what would be expected from sending a larger burst into the network.",
      "ja": "最後に、[All00は初期輻輳ウィンドウのサイズとデータ送信増加の初期画面に損失が発生する特定のWebサーバに接続のパーセンテージことを示します。しかし、増加は、ネットワークに大きなバーストを送ることから予測されるものと一致しています。"
    },
    {
      "indent": 0,
      "text": "8.2 Studies of Networks using Larger Initial Windows",
      "section_title": true,
      "ja": "大きな初期のWindowsを用いた研究ネットワークの8.2"
    },
    {
      "indent": 3,
      "text": "This section surveys simulations and experiments investigating the impact of the larger window on other TCP connections sharing the path. Experiments in [All97a, AHO98] show that for 16 KB transfers to 100 Internet hosts, four-segment initial windows resulted in a small increase in the drop rate of 0.04 segments/transfer. While the drop rate increased slightly, the transfer time was reduced by roughly 25% for transfers using the four-segment (512 byte MSS) initial window when compared to an initial window of one segment.",
      "ja": "パスを共有する他のTCPコネクション上の大きなウィンドウの影響を調査このセクションでは、調査のシミュレーションと実験。 [All97a、AHO98]における実験は、100台のインターネットホストへの16KB転送のため、4セグメント初期ウィンドウは0.04セグメント/転送の低下率のわずかな増加をもたらしたことを示しています。ドロップ率がわずかに増加し、転送時間は、一つのセグメントの初期ウィンドウと比較した場合、4セグメント（512バイトMSS）の初期ウィンドウを使用して転送を約25％減少しました。"
    },
    {
      "indent": 3,
      "text": "A simulation study in [RFC2415] explores the impact of a larger initial window on competing network traffic. In this investigation, HTTP and FTP flows share a single congested gateway (where the number of HTTP and FTP flows varies from one simulation set to another). For each simulation set, the paper examines aggregate link utilization and packet drop rates, median web page delay, and network power for the FTP transfers. The larger initial window generally resulted in increased throughput, slightly-increased packet drop rates, and an increase in overall network power. With the exception of one scenario, the larger initial window resulted in an increase in the drop rate of less than 1% above the loss rate experienced when using a one-segment initial window; in this scenario, the drop rate increased from 3.5% with one-segment initial windows, to 4.5% with four-segment initial windows. The overall conclusions were that increasing the TCP initial window to three packets (or 4380 bytes) helps to improve perceived performance.",
      "ja": "[RFC2415]のシミュレーション研究では、ネットワークトラフィックを競合上の大きな初期ウィンドウの影響を探ります。この調査では、HTTPとFTPは、（HTTPとFTPの数が他に設定する1つのシミュレーションによって異なるフロー）単一の輻輳ゲートウェイを共有して流れます。 FTP転送の各シミュレーションセットの場合は、紙が集約リンクの利用率とパケットのドロップ率を調べ、中央値はWebページの遅延、およびネットワーク・パワー。初期ウィンドウが大きいほど、一般的にスループットの向上、わずかに増加したパケットドロップ率、およびネットワーク全体の消費電力の増加をもたらしました。あるシナリオを除いて、大きい初期ウィンドウは、ワンセグメント初期ウィンドウを使用する際に損失率以上の1％未満が経験の低下率の増加をもたらしました。このシナリオでは、ドロップ率は4セグメント初期ウィンドウで4.5％に、1セグメントの初期ウィンドウで3.5％から増加しました。全体的な結論は3つのパケット（または4380バイト）にTCP初期ウィンドウを大きくすると、体感的なパフォーマンスを向上させることができますということでした。"
    },
    {
      "indent": 3,
      "text": "Morris [Mor97] investigated larger initial windows in a highly congested network with transfers of 20K in size. The loss rate in networks where all TCP connections use an initial window of four segments is shown to be 1-2% greater than in a network where all connections use an initial window of one segment. This relationship held in scenarios where the loss rates with one-segment initial windows ranged from 1% to 11%. In addition, in networks where connections used an initial window of four segments, TCP connections spent more time waiting for the retransmit timer (RTO) to expire to resend a segment than was spent using an initial window of one segment. The time spent waiting for the RTO timer to expire represents idle time when no useful work was being accomplished for that connection. These results show that in a very congested environment, where each connection's share of the bottleneck bandwidth is close to one segment, using a larger initial window can cause a perceptible increase in both loss rates and retransmit timeouts.",
      "ja": "モリス[Mor97]は、サイズが20Kの転送に非常に混雑したネットワーク内の大きい初期ウィンドウを調べました。すべてのTCP接続は、4つのセグメントの初期ウィンドウを使用するネットワーク内の損失率は、すべての接続が一つのセグメントの初期ウィンドウを使用するネットワークに比べて1~2％大きいことが示されています。この関係は、ワンセグメント初期ウィンドウと損失率は、1％から11％の範囲であったシナリオに保持します。また、接続は4つのセグメントの初期ウィンドウを使用するネットワークにおいて、TCP接続が一つのセグメントの初期ウィンドウを使用して費やしたよりもセグメントを再送信するために期限切れにする再送信タイマー（RTO）を待っているより多くの時間を費やしました。期限切れにRTOタイマーを待って過ごした時間は、有用な作業は、その接続のために達成されませんでしたアイドル時間を表します。これらの結果は、大きな初期ウィンドウを使用してボトルネック帯域の各接続のシェアは1つのセグメントに近い非常に混雑した環境、で損失率および再送タイムアウトの両方における知覚の増加を引き起こす可能性があることを示しています。"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document discusses the initial congestion window permitted for TCP connections. Changing this value does not raise any known new security issues with TCP.",
      "ja": "このドキュメントでは、TCP接続のために許可された初期輻輳ウィンドウについて説明します。この値を変更すると、TCPとの任意の既知の新たなセキュリティ上の問題を提起しません。"
    },
    {
      "indent": 0,
      "text": "10. Conclusion",
      "section_title": true,
      "ja": "10.おわりに"
    },
    {
      "indent": 3,
      "text": "This document specifies a small change to TCP that will likely be beneficial to short-lived TCP connections and those over links with long RTTs (saving several RTTs during the initial slow-start phase).",
      "ja": "この文書では、おそらく短命TCP接続と長いのRTT（初期スロースタートフェーズの間に、いくつかのRTTを節約）とのリンクの上にものに有益であるTCPに小さな変更を指定します。"
    },
    {
      "indent": 0,
      "text": "11. Acknowledgments",
      "section_title": true,
      "ja": "11.謝辞"
    },
    {
      "indent": 3,
      "text": "We would like to acknowledge Vern Paxson, Tim Shepard, members of the End-to-End-Interest Mailing List, and members of the IETF TCP Implementation Working Group for continuing discussions of these issues and for feedback on this document.",
      "ja": "私たちは、これらの問題の議論を継続するために、このドキュメントについてのフィードバックのためにバーン・パクソン、ティム・シェパード、エンドツーエンド・インタレストメーリングリストのメンバー、およびIETF TCP実装作業部会のメンバーを確認したいと思います。"
    },
    {
      "indent": 0,
      "text": "12. References",
      "section_title": true,
      "ja": "12.参考文献"
    },
    {
      "indent": 3,
      "text": "[AHO98] Mark Allman, Chris Hayes, and Shawn Ostermann, An Evaluation of TCP with Larger Initial Windows, March 1998. ACM Computer Communication Review, 28(3), July 1998. URL \"http://roland.lerc.nasa.gov/~mallman/papers/initwin.ps\".",
      "ja": "//roland.lerc.nasa：大きな初期のWindows、1998年3月ACMコンピュータコミュニケーションレビュー、28（3）、1998年7月URLは「httpと[AHO98]マーク・オールマン、クリス・ヘイズ、およびショーンOstermann、TCPのアン評価。 GOV /〜mallman /論文/ initwin.ps」。"
    },
    {
      "indent": 3,
      "text": "[All97a] Mark Allman. An Evaluation of TCP with Larger Initial Windows. 40th IETF Meeting -- TCP Implementations WG. December, 1997. Washington, DC.",
      "ja": "[All97a]マークオールマン。大きな初期のWindowsでのTCPの評価。第40回IETFミーティング -  TCP実装WG。 12月、1997年ワシントンD.C.。"
    },
    {
      "indent": 3,
      "text": "[All97b] Mark Allman. Improving TCP Performance Over Satellite Channels. Master's thesis, Ohio University, June 1997.",
      "ja": "[All97b]マークオールマン。衛星チャネル上でTCPの性能を向上させます。修士論文、オハイオ大学、1997年6月。"
    },
    {
      "indent": 3,
      "text": "[All00] Mark Allman. A Web Server's View of the Transport Layer. ACM Computer Communication Review, 30(5), October 2000.",
      "ja": "[All00]マークオールマン。トランスポート層のWeb Serverのビュー。 ACMコンピュータコミュニケーションレビュー、30（5）、2000年10月。"
    },
    {
      "indent": 3,
      "text": "[FF96] Fall, K., and Floyd, S., Simulation-based Comparisons of Tahoe, Reno, and SACK TCP. Computer Communication Review, 26(3), July 1996.",
      "ja": "【FF96】秋、K.、及びフロイド、S.、タホ、リノ、およびSACK TCPのシミュレーションベースの比較。コンピュータコミュニケーションレビュー、26（3）、1996年7月。"
    },
    {
      "indent": 3,
      "text": "[FF99] Sally Floyd, Kevin Fall. Promoting the Use of End-to-End Congestion Control in the Internet. IEEE/ACM Transactions on Networking, August 1999. URL \"http://www.icir.org/floyd/end2end-paper.html\".",
      "ja": "[FF99]サリー・フロイド、ケビン秋。インターネットでのエンドツーエンドの輻輳制御の利用促進。ネットワーキング、1999年8月URL \"http://www.icir.org/floyd/end2end-paper.html\" 上のIEEE / ACM取引。"
    },
    {
      "indent": 3,
      "text": "[FJ93] Floyd, S., and Jacobson, V., Random Early Detection gateways for Congestion Avoidance. IEEE/ACM Transactions on Networking, V.1 N.4, August 1993, p. 397-413.",
      "ja": "[FJ93]フロイド、S.、およびヤコブソン、V.、輻輳回避のためのランダム早期検出ゲートウェイ。ネットワーキング、V.1 N.4、1993年8月、P上のIEEE / ACM取引。 397から413まで。"
    },
    {
      "indent": 3,
      "text": "[Flo94] Floyd, S., TCP and Explicit Congestion Notification. Computer Communication Review, 24(5):10-23, October 1994.",
      "ja": "【Flo94]フロイド、S.、TCPと明示的輻輳通知。コンピュータコミュニケーションレビュー、24（5）：10-23、1994年10月。"
    },
    {
      "indent": 3,
      "text": "[Flo96] Floyd, S., Issues of TCP with SACK. Technical report, January 1996. Available from http://www-nrg.ee.lbl.gov/floyd/.",
      "ja": "[Flo96]フロイド、S.、SACKとTCPの問題。技術レポート、http://www-nrg.ee.lbl.gov/floyd/から1996年1月に利用できます。"
    },
    {
      "indent": 3,
      "text": "[Flo97] Floyd, S., Increasing TCP's Initial Window. Viewgraphs, 40th IETF Meeting - TCP Implementations WG. December, 1997. URL \"ftp://ftp.ee.lbl.gov/talks/sf-tcp-ietf97.ps\".",
      "ja": "[Flo97]フロイド、S.、TCPの初期ウィンドウを増やします。ビューグラフ、第40回IETFミーティング -  TCP実装WG。 12月、1997年URL \"ftp://ftp.ee.lbl.gov/talks/sf-tcp-ietf97.ps\"。"
    },
    {
      "indent": 3,
      "text": "[KAGT98] Hans Kruse, Mark Allman, Jim Griner, Diepchi Tran. HTTP Page Transfer Rates Over Geo-Stationary Satellite Links. March 1998. Proceedings of the Sixth International Conference on Telecommunication Systems. URL \"http://roland.lerc.nasa.gov/~mallman/papers/nash98.ps\".",
      "ja": "[KAGT98]ハンス・クルーゼ、マーク・オールマン、ジム・Griner、Diepchiトラン。ジオ静止衛星リンク上でHTTPページ転送レート。通信システムの第6回国際会議の1998年3月議事。 URL \"http://roland.lerc.nasa.gov/~mallman/papers/nash98.ps\"。"
    },
    {
      "indent": 3,
      "text": "[Mor97] Robert Morris. Private communication, 1997. Cited for acknowledgement purposes only.",
      "ja": "[Mor97]ロバート・モリス。確認のみを目的として引用プライベート通信、1997年。"
    },
    {
      "indent": 3,
      "text": "[Nic98] Kathleen Nichols. Improving Network Simulation With Feedback, Proceedings of LCN 98, October 1998. URL \"http://www.computer.org/proceedings/lcn/8810/8810toc.htm\".",
      "ja": "【Nic98]キャサリン・ニコルズ。フィードバックしてネットワークシミュレーションの改善、LCN 98の議事録、1998年10月URL「http://www.computer.org/proceedings/lcn/8810/8810toc.htm」。"
    },
    {
      "indent": 3,
      "text": "[Pos82] Postel, J., \"Simple Mail Transfer Protocol\", STD 10, RFC 821, August 1982.",
      "ja": "[Pos82]ポステル、J.、 \"簡易メール転送プロトコル\"、STD 10、RFC 821、1982年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC1122] Braden, R., \"Requirements for Internet Hosts -- Communication Layers\", STD 3, RFC 1122, October 1989.",
      "ja": "[RFC1122]ブレーデン、R.、 \"インターネットホストのための要件 - 通信層\"、STD 3、RFC 1122、1989年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC1191] Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191, November 1990.",
      "ja": "[RFC1191]モーグル、J.およびS.デアリング、 \"パスMTUディスカバリ\"、RFC 1191、1990年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC1945] Berners-Lee, T., Fielding, R. and H. Nielsen, \"Hypertext Transfer Protocol -- HTTP/1.0\", RFC 1945, May 1996.",
      "ja": "[RFC1945]バーナーズ=リー、T.、フィールディング、R.、およびH.ニールセン、 \"ハイパーテキスト転送プロトコル -  HTTP / 1.0\"、RFC 1945、1996年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC2068] Fielding, R., Mogul, J., Gettys, J., Frystyk, H. and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616, January 1997.",
      "ja": "[RFC2068]フィールディング、R.、モーグル、J.、ゲティス、J.、Frystyk、H.、およびT.バーナーズ - リー、 \"ハイパーテキスト転送プロトコル -  HTTP / 1.1\"、RFC 2616、1997年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2309] Braden, B., Clark, D., Crowcroft, J., Davie, B., Deering, S., Estrin, D., Floyd, S., Jacobson, V., Minshall, G., Partridge, C., Peterson, L., Ramakrishnan, K., Shenker, S., Wroclawski, J. and L. Zhang, \"Recommendations on Queue Management and Congestion Avoidance in the Internet\", RFC 2309, April 1998.",
      "ja": "[RFC2309]ブレーデン、B.、クラーク、D.、クロウクロフト、J.、デイビー、B.、デアリング、S.、Estrin、D.、フロイド、S.、ヤコブソン、V.、Minshall、G.、ヤマウズラ、 C.、ピーターソン、L.、ラマクリシュナン、K.、Shenker、S.、Wroclawski、J.とL.チャン、 \"インターネットの待ち行列管理と輻輳回避の推薦\"、RFC 2309、1998年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC2414] Allman, M., Floyd, S. and C. Partridge, \"Increasing TCP's Initial Window\", RFC 2414, September 1998.",
      "ja": "[RFC2414]オールマン、M.、フロイド、S.とC.ヤマウズラ、 \"増加するTCPの初期ウィンドウ\"、RFC 2414、1998年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC2415] Poduri, K. and K. Nichols, \"Simulation Studies of Increased Initial TCP Window Size\", RFC 2415, September 1998.",
      "ja": "[RFC2415] Poduri、K.とK.ニコルズ、 \"増加した初期のTCPウィンドウサイズのシミュレーション研究\"、RFC 2415、1998年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC2416] Shepard, T. and C. Partridge, \"When TCP Starts Up With Four Packets Into Only Three Buffers\", RFC 2416, September 1998.",
      "ja": "[RFC2416]シェパード、T.とC.パートリッジ、RFC 2416、1998年9月「TCPは3つしかバッファに4つのパケットで起動」。"
    },
    {
      "indent": 3,
      "text": "[RFC2581] Allman, M., Paxson, V. and W. Stevens, \"TCP Congestion Control\", RFC 2581, April 1999.",
      "ja": "[RFC2581]オールマン、M.、パクソン、V.とW.スティーブンス、 \"TCP輻輳制御\"、RFC 2581、1999年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC2821] Klensin, J., \"Simple Mail Transfer Protocol\", RFC 2821, April 2001.",
      "ja": "[RFC2821] Klensin、J.、 \"簡易メール転送プロトコル\"、RFC 2821、2001年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC2988] Paxson, V. and M. Allman, \"Computing TCP's Retransmission Timer\", RFC 2988, November 2000.",
      "ja": "[RFC2988]パクソン、V.とM.オールマン、 \"コンピューティングTCPの再送信タイマー\"、RFC 2988、2000年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC3042] Allman, M., Balakrishnan, H. and S. Floyd, \"Enhancing TCP's Loss Recovery Using Limited Transmit\", RFC 3042, January 2001.",
      "ja": "[RFC3042]オールマン、M.、バラクリシュナン、H.とS.フロイド、 \"株式会社トランスミットを使用したTCPの損失回復の強化\"、RFC 3042、2001年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC3168] Ramakrishnan, K.K., Floyd, S. and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, September 2001.",
      "ja": "\"IPへの明示的輻輳通知の追加（ECN）\" [RFC3168]ラマクリシュナン、K.K.、フロイド、S.、およびD.ブラック、RFC 3168、2001年9月。"
    },
    {
      "indent": 0,
      "text": "Appendix A - Duplicate Segments",
      "ja": "付録A  - 重複セグメント"
    },
    {
      "indent": 3,
      "text": "In the current environment (without Explicit Congestion Notification [Flo94] [RFC2481]), all TCPs use segment drops as indications from the network about the limits of available bandwidth. We argue here that the change to a larger initial window should not result in the sender retransmitting a large number of duplicate segments that have already arrived at the receiver.",
      "ja": "現在の環境で（明示的輻輳通知なし[Flo94] [RFC2481]）は、すべてのTCP利用セグメントは、利用可能な帯域幅の制限に関するネットワークからの指示として低下します。私たちは、大きな初期ウィンドウへの変更は、すでに受信機に到着した重複した多数のセグメントを再送する送信者になってはならないことをここで主張しています。"
    },
    {
      "indent": 3,
      "text": "If one segment is dropped from the initial window, there are three different ways for TCP to recover: (1) Slow-starting from a window of one segment, as is done after a retransmit timeout, or after Fast Retransmit in Tahoe TCP; (2) Fast Recovery without selective acknowledgments (SACK), as is done after three duplicate ACKs in Reno TCP; and (3) Fast Recovery with SACK, for TCP where both the sender and the receiver support the SACK option [MMFR96]. In all three cases, if a single segment is dropped from the initial window, no duplicate segments (i.e., segments that have already been received at the receiver) are transmitted. Note that for a TCP sending four 512-byte segments in the initial window, a single segment drop will not require a retransmit timeout, but can be recovered by using the Fast Retransmit algorithm (unless the retransmit timer expires prematurely). In addition, a single segment dropped from an initial window of three segments might be repaired using the fast retransmit algorithm, depending on which segment is dropped and whether or not delayed ACKs are used. For example, dropping the first segment of a three segment initial window will always require waiting for a timeout, in the absence of Limited Transmit [RFC3042]. However, dropping the third segment will always allow recovery via the fast retransmit algorithm, as long as no ACKs are lost.",
      "ja": "一つのセグメントが初期ウィンドウから削除された場合、TCPは、回復するための3つの異なる方法がある：（1）遅い開始再送タイムアウトの後、又は高速再送信後タホTCPで行われるように、一つのセグメントの窓からは、選択的確認応答（SACK）なし（2）高速回復、リノTCPで3個の重複ACKの後に行われているように、そして送信者と受信者の両方がSACKオプション[MMFR96]をサポートするTCP SACKため、（3）高速回復。単一セグメントが初期ウィンドウから削除された場合、3つすべての場合において、重複セグメント（すなわち、既に受信機で受信されたセグメント）が送信されません。初期ウィンドウの4つの512バイトのセグメントを送信するTCPのために、単一のセグメント降下が再送タイムアウトを必要としないが、（再送信タイマが早期満了しない限り）高速再送信アルゴリズムを用いて回収することができることに留意されたいです。加えて、単一のセグメントは三つのセグメントの最初の窓から落とされたセグメントが削除され、遅延されたACKが使用されているか否かによって、高速再送アルゴリズムを使用して修復されるかもしれません。例えば、3つのセグメント初期ウィンドウの最初のセグメントを削除すると常に限定ミット[RFC3042]の非存在下で、タイムアウトを待っている必要があります。しかし、第三のセグメントをドロップすると、常に限り何のACKが失われないよう、高速再送アルゴリズムを経由して回復を可能にします。"
    },
    {
      "indent": 3,
      "text": "Next we consider scenarios where the initial window contains two to four segments, and at least two of those segments are dropped. If all segments in the initial window are dropped, then clearly no duplicate segments are retransmitted, as the receiver has not yet received any segments. (It is still a possibility that these dropped segments used scarce bandwidth on the way to their drop point; this issue was discussed in Section 5.)",
      "ja": "次は、最初のウィンドウは2〜4個のセグメントを含み、これらのセグメントの少なくとも二つがドロップされるシナリオを検討してください。初期ウィンドウ内のすべてのセグメントが削除された場合、受信機がまだセグメントを受信して​​いないとして、その後、明らかに重複セグメントは、再送信されません。 （;この問題は、セクション5で説明したこれらのドロップセグメントは、それらのドロップポイントへの道に乏しい帯域幅を使用する可能性まだあります）"
    },
    {
      "indent": 3,
      "text": "When two segments are dropped from an initial window of three segments, the sender will only send a duplicate segment if the first two of the three segments were dropped, and the sender does not receive a packet with the SACK option acknowledging the third segment.",
      "ja": "二つのセグメントは、3つのセグメントの初期ウィンドウから削除されたとき、三つのセグメントの最初の二つは、ドロップされた場合、送信者は、重複セグメントが送信され、送信者は、第3のセグメントを認めるSACKオプションでパケットを受信しません。"
    },
    {
      "indent": 3,
      "text": "When two segments are dropped from an initial window of four segments, an examination of the six possible scenarios (which we don't go through here) shows that, depending on the position of the dropped packets, in the absence of SACK the sender might send one duplicate segment. There are no scenarios in which the sender sends two duplicate segments.",
      "ja": "2つのセグメントは4つのセグメントの初期ウィンドウから削除された場合、（我々はここを経由しません）6の可能なシナリオの検討は、SACKが存在しない場合に、送信者かもしれませんが、ドロップされたパケットの位置に応じて、ことを示してい1つの重複セグメントを送信します。送信者が2つの重複セグメントを送信する何のシナリオはありません。"
    },
    {
      "indent": 3,
      "text": "When three segments are dropped from an initial window of four segments, then, in the absence of SACK, it is possible that one duplicate segment will be sent, depending on the position of the dropped segments.",
      "ja": "三つのセグメントは4つのセグメントの初期ウィンドウから削除されたとき、その後、SACKの非存在下では、1つの重複セグメントはドロップされたセグメントの位置に応じて、送信されることが可能です。"
    },
    {
      "indent": 3,
      "text": "The summary is that in the absence of SACK, there are some scenarios with multiple segment drops from the initial window where one duplicate segment will be transmitted. There are no scenarios in which more than one duplicate segment will be transmitted. Our conclusion is than the number of duplicate segments transmitted as a result of a larger initial window should be small.",
      "ja": "要約は、複数のセグメントの一つの重複セグメントが送信される初期ウィンドウから落下してSACKが存在しない場合に、いくつかのシナリオがあることです。複数の重複セグメントが送信されるには何のシナリオはありません。私たちの結論は小さくすべき大きな初期ウィンドウの結果として送信される重複セグメントの数よりもです。"
    },
    {
      "indent": 0,
      "text": "Author's Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Mark Allman BBN Technologies/NASA Glenn Research Center 21000 Brookpark Rd MS 54-5 Cleveland, OH 44135 EMail: mallman@bbn.com http://roland.lerc.nasa.gov/~mallman/",
      "ja": "マーク・オールマンBBNテクノロジーズ/ NASAグレンリサーチセンター21000ブルックパークRdのMS 54-5クリーブランド、オハイオ州44135 Eメール：mallman@bbn.com http://roland.lerc.nasa.gov/~mallman/"
    },
    {
      "indent": 3,
      "text": "Sally Floyd ICSI Center for Internet Research 1947 Center St, Suite 600 Berkeley, CA 94704 Phone: +1 (510) 666-2989 EMail: floyd@icir.org http://www.icir.org/floyd/",
      "ja": "インターネットリサーチのためのサリーフロイドICSIセンター1947センターセント、スイート600バークレー、CA 94704電話：+1（510）666から2989 Eメール：floyd@icir.org http://www.icir.org/floyd/"
    },
    {
      "indent": 3,
      "text": "Craig Partridge BBN Technologies 10 Moulton St Cambridge, MA 02138 EMail: craig@bbn.com",
      "ja": "クレイグ・パートリッジBBNテクノロジーズ10モールトンセントケンブリッジ、MA 02138 Eメール：craig@bbn.com"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2002). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2002）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "了承"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}