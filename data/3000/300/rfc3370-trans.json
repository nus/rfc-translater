{
  "title": {
    "text": "RFC 3370 - Cryptographic Message Syntax (CMS) Algorithms",
    "ja": "RFC 3370 - 暗号メッセージ構文（CMS）アルゴリズム"
  },
  "number": 3370,
  "created_at": "2019-10-27 11:41:15.032679+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         R. Housley\nRequest for Comments: 3370                              RSA Laboratories\nObsoletes: 2630, 3211                                        August 2002\nCategory: Standards Track",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Cryptographic Message Syntax (CMS) Algorithms",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2002). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2002）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes the conventions for using several cryptographic algorithms with the Cryptographic Message Syntax (CMS). The CMS is used to digitally sign, digest, authenticate, or encrypt arbitrary message contents.",
      "ja": "この文書は、暗号メッセージ構文（CMS）で、いくつかの暗号化アルゴリズムを使用するための規則について説明します。 CMSは、デジタル、署名ダイジェスト認証、または任意のメッセージ内容を暗号化するために使用されます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1     Introduction ...............................................  2\n1.1   Changes Since RFC 2630 .....................................  2\n1.2   Terminology ................................................  2\n2     Message Digest Algorithms ..................................  3\n2.1   SHA-1 ......................................................  3\n2.2   MD5 ........................................................  3\n3     Signature Algorithms .......................................  4\n3.1   DSA ........................................................  4\n3.2   RSA ........................................................  5\n4     Key Management Algorithms ..................................  6\n4.1   Key Agreement Algorithms ...................................  6\n4.1.1 X9.42 Ephemeral-Static Diffie-Hellman ......................  7\n4.1.2 X9.42 Static-Static Diffie-Hellman .........................  8\n4.2   Key Transport Algorithms ...................................  9\n4.2.1 RSA (PKCS #1 v1.5) ......................................... 10\n4.3   Symmetric Key-Encryption Key Algorithms .................... 10\n4.3.1 Triple-DES Key Wrap ........................................ 11\n4.3.2 RC2 Key Wrap ............................................... 12\n4.4   Key Derivation Algorithms .................................. 12",
      "raw": true
    },
    {
      "indent": 3,
      "text": "4.4.1 PBKDF2 ..................................................... 13\n5     Content Encryption Algorithms .............................. 13\n5.1   Triple-DES CBC ............................................. 14\n5.2   RC2 CBC .................................................... 14\n6     Message Authentication Code (MAC) Algorithms ............... 15\n6.1   HMAC with SHA-1 ............................................ 15\n7     ASN.1 Module ............................................... 16\n8     References ................................................. 18\n9     Security Considerations .................................... 20\n10    Acknowledgments ............................................ 22\n11    Author's Address ........................................... 23\n12    Full Copyright Statement ................................... 24",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1 Introduction",
      "ja": "1はじめに"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax (CMS) [CMS] is used to digitally sign, digest, authenticate, or encrypt arbitrary message contents. This companion specification describes the use of common cryptographic algorithms with the CMS. Implementations of the CMS may support these algorithms; implementations of the CMS may also support other algorithms as well. However, if an implementation chooses to support one of the algorithms discussed in this document, then the implementation MUST do so as described in this document.",
      "ja": "暗号メッセージ構文（CMS）[CMS]はデジタル、署名ダイジェスト認証、または任意のメッセージ内容を暗号化するために使用されます。このコンパニオン仕様はCMSと共通の暗号化アルゴリズムの使用を記載しています。 CMSの実装は、これらのアルゴリズムをサポートすること。 CMSの実装はまた、同様に他のアルゴリズムをサポートすることができます。実装は、この文書で説明したアルゴリズムのいずれかをサポートすることを選択した場合は、この文書に記載されているようしかし、実装は、そうしなければなりません。"
    },
    {
      "indent": 3,
      "text": "The CMS values are generated using ASN.1 [X.208-88], using BER-encoding [X.209-88]. Algorithm identifiers (which include ASN.1 object identifiers) identify cryptographic algorithms, and some algorithms require additional parameters. When needed, parameters are specified with an ASN.1 structure. The algorithm identifier for each algorithm is specified, and when needed, the parameter structure is specified. The fields in the CMS employed by each algorithm are identified.",
      "ja": "CMS値は、BERコード[X.209-88]を使用して、[X.208-88] ASN.1を用いて生成されます。 （ASN.1オブジェクト識別子を含む）アルゴリズム識別子は、暗号化アルゴリズムを識別し、いくつかのアルゴリズムは、追加のパラメータを必要とします。必要な場合は、パラメーターはASN.1構造に指定されています。各アルゴリズムのためのアルゴリズム識別子が指定され、必要なときに、パラメータ構造が指定されています。各アルゴリズムで採用CMSのフィールドが識別されます。"
    },
    {
      "indent": 1,
      "text": "1.1 Changes Since",
      "section_title": true,
      "ja": "1.1からの変更点"
    },
    {
      "indent": 3,
      "text": "This document obsoletes section 12 of RFC 2630 [OLDCMS]. RFC 3369 [CMS] obsoletes the rest of RFC 2630. Separation of the protocol and algorithm specifications allows each one to be updated without impacting the other. However, the conventions for using additional algorithms with the CMS are likely to be specified in separate documents.",
      "ja": "この文書は、RFC 2630 [OLDCMS]のセクション12を時代遅れ。 RFC 3369 [CMS]は、プロトコルとアルゴリズムの仕様の2630分離は、それぞれ、一方が他方に影響を与えずに更新することを可能にするRFCの残りの部分を廃止します。しかし、CMSで追加のアルゴリズムを使用するための規則は、別の文書で指定される可能性が高いです。"
    },
    {
      "indent": 0,
      "text": "1.2 Terminology",
      "section_title": true,
      "ja": "1.2用語"
    },
    {
      "indent": 3,
      "text": "In this document, the key words MUST, MUST NOT, REQUIRED, SHOULD, SHOULD NOT, RECOMMENDED, and MAY are to be interpreted as described in [STDWORDS].",
      "ja": "この文書では、キーワードは、REQUIRED、推奨、およびMAYは[STDWORDS]で説明されるように解釈されるべきではないSHOULD NOTしなければならないしなければなりません。"
    },
    {
      "indent": 0,
      "text": "2 Message Digest Algorithms",
      "ja": "2個のメッセージダイジェストアルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support SHA-1 or MD5.",
      "ja": "このセクションでは、SHA-1やMD5をサポートするCMS実装によって使われたコンベンションを指定します。"
    },
    {
      "indent": 3,
      "text": "Digest algorithm identifiers are located in the SignedData digestAlgorithms field, the SignerInfo digestAlgorithm field, the DigestedData digestAlgorithm field, and the AuthenticatedData digestAlgorithm field.",
      "ja": "ダイジェストアルゴリズム識別子はSignedDataのdigestAlgorithmsフィールド、のSignerInfo digestAlgorithmフィールド、DigestedData digestAlgorithmフィールド、およびAuthenticatedData digestAlgorithmフィールドに位置しています。"
    },
    {
      "indent": 3,
      "text": "Digest values are located in the DigestedData digest field and the Message Digest authenticated attribute. In addition, digest values are input to signature algorithms.",
      "ja": "ダイジェスト値がDigestedDataダイジェストフィールドとメッセージダイジェスト認証された属性に位置しています。また、ダイジェスト値が署名アルゴリズムに入力されます。"
    },
    {
      "indent": 0,
      "text": "2.1 SHA-1",
      "section_title": true,
      "ja": "２。１ しゃー１"
    },
    {
      "indent": 3,
      "text": "The SHA-1 message digest algorithm is defined in FIPS Pub 180-1 [SHA1]. The algorithm identifier for SHA-1 is:",
      "ja": "SHA1メッセージは、アルゴリズムは、FIPSパブ180-1 [SHA1]で定義されているダイジェスト。 SHA-1アルゴリズム識別子です。"
    },
    {
      "indent": 6,
      "text": "sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    oiw(14) secsig(3) algorithm(2) 26 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "There are two possible encodings for the SHA-1 AlgorithmIdentifier parameters field. The two alternatives arise from the fact that when the 1988 syntax for AlgorithmIdentifier was translated into the 1997 syntax, the OPTIONAL associated with the AlgorithmIdentifier parameters got lost. Later the OPTIONAL was recovered via a defect report, but by then many people thought that algorithm parameters were mandatory. Because of this history some implementations encode parameters as a NULL element and others omit them entirely. The correct encoding is to omit the parameters field; however, implementations MUST also handle a SHA-1 AlgorithmIdentifier parameters field which contains a NULL.",
      "ja": "SHA-1のAlgorithmIdentifierパラメータフィールドのための2つの可能なエンコーディングがあります。 2つの選択肢がいるAlgorithmIdentifierのための1988年の構文が1997年の構文に翻訳されたとき、のAlgorithmIdentifierパラメータに関連付けられたオプションが失われてしまったという事実から生じます。その後、オプションは、不具合報告を経て回収されたが、その後で、多くの人々は、アルゴリズムパラメータが必須だと考えました。このため歴史のいくつかの実装は、NULL要素などのパラメータをエンコードし、他の人がそれらを完全に省略します。正しいエンコーディングパラメータフィールドを省略することです。しかし、実装はまた、NULLを含んSHA-1のAlgorithmIdentifierパラメータフィールドを処理する必要があります。"
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field is OPTIONAL. If present, the parameters field MUST contain a NULL. Implementations MUST accept SHA-1 AlgorithmIdentifiers with absent parameters. Implementations MUST accept SHA-1 AlgorithmIdentifiers with NULL parameters. Implementations SHOULD generate SHA-1 AlgorithmIdentifiers with absent parameters.",
      "ja": "AlgorithmIdentifierパラメータフィールドはオプションです。存在する場合、パラメータフィールドはNULLを含まなければなりません。実装は存在しないパラメータを持つSHA-1 AlgorithmIdentifiersを受け入れなければなりません。実装はNULLパラメータを持つSHA-1 AlgorithmIdentifiersを受け入れなければなりません。実装は存在しないパラメータを持つSHA-1 AlgorithmIdentifiersを生成する必要があります。"
    },
    {
      "indent": 0,
      "text": "2.2 MD5",
      "section_title": true,
      "ja": "2.2 MD5"
    },
    {
      "indent": 3,
      "text": "The MD5 digest algorithm is defined in RFC 1321 [MD5]. The algorithm identifier for MD5 is:",
      "ja": "MD5ダイジェストアルゴリズムは[MD5] RFC 1321で定義されています。 MD5のためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) digestAlgorithm(2) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field MUST be present, and the parameters field MUST contain NULL. Implementations MAY accept the MD5 AlgorithmIdentifiers with absent parameters as well as NULL parameters.",
      "ja": "AlgorithmIdentifierパラメータフィールドが存在しなければならない、とパラメータフィールドがNULLを含まなければなりません。実装は存在しないパラメータだけでなく、NULLパラメータでMD5 AlgorithmIdentifiersを受け入れることができます。"
    },
    {
      "indent": 0,
      "text": "3 Signature Algorithms",
      "ja": "3個の署名アルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support DSA or RSA (PKCS #1 v1.5).",
      "ja": "このセクションでは、DSAまたはRSA（PKCS＃1 V1.5）をサポートするCMS実装によって使われたコンベンションを指定します。"
    },
    {
      "indent": 3,
      "text": "Signature algorithm identifiers are located in the SignerInfo signatureAlgorithm field of SignedData. Also, signature algorithm identifiers are located in the SignerInfo signatureAlgorithm field of countersignature attributes.",
      "ja": "署名アルゴリズム識別子はSignedDataのののSignerInfoのsignatureAlgorithm分野に位置しています。また、署名アルゴリズム識別子は副署属性のSignerInfoののsignatureAlgorithm分野に位置しています。"
    },
    {
      "indent": 3,
      "text": "Signature values are located in the SignerInfo signature field of SignedData. Also, signature values are located in the SignerInfo signature field of countersignature attributes.",
      "ja": "署名値は、のSignedDataののSignerInfo署名フィールドに配置されます。また、署名値は副署属性のSignerInfoの署名フィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "3.1 DSA",
      "section_title": true,
      "ja": "3.1 DSA"
    },
    {
      "indent": 3,
      "text": "The DSA signature algorithm is defined in FIPS Pub 186 [DSS]. DSA MUST be used with the SHA-1 message digest algorithm.",
      "ja": "DSA署名アルゴリズムは、FIPSパブ186 [DSS]で定義されています。 DSAは、SHA-1メッセージダイジェストアルゴリズムを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The algorithm identifier for DSA subject public keys in certificates is:",
      "ja": "証明書の中のDSA対象の公開鍵のためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "id-dsa OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) x9-57 (10040) x9cm(4) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "DSA signature validation requires three parameters, commonly called p, q, and g. When the id-dsa algorithm identifier is used, the AlgorithmIdentifier parameters field is optional. If present, the AlgorithmIdentifier parameters field MUST contain the three DSA parameter values encoded using the Dss-Parms type. If absent, the subject DSA public key uses the same DSA parameters as the certificate issuer.",
      "ja": "DSA署名の検証は、一般的にP、Q、及びGと呼ばれる3つのパラメータを必要とします。 ID-DSAアルゴリズム識別子が使用されるとき、AlgorithmIdentifierパラメタ分野は任意です。存在する場合、AlgorithmIdentifierパラメタ分野はDSS-PARMSタイプを用いて符号化3つのDSAパラメータ値を含まなければなりません。存在しない場合は、サブジェクトDSA公開鍵は、証明書発行者と同じDSAパラメータを使用します。"
    },
    {
      "indent": 6,
      "text": "Dss-Parms ::= SEQUENCE {\n  p INTEGER,\n  q INTEGER,\n  g INTEGER  }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "When the id-dsa algorithm identifier is used, the DSA public key, commonly called Y, MUST be encoded as an INTEGER. The output of this encoding is carried in the certificate subject public key.",
      "ja": "ID-DSAアルゴリズム識別子が使用される場合、一般にYと呼ばれるDSA公開鍵は、INTEGERとしてコード化されなければなりません。このエンコーディングの出力は、証明書のサブジェクトの公開鍵で運ばれます。"
    },
    {
      "indent": 6,
      "text": "Dss-Pub-Key ::= INTEGER  -- Y",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The algorithm identifier for DSA with SHA-1 signature values is:",
      "ja": "SHA-1署名の値を有するDSAアルゴリズム識別子です。"
    },
    {
      "indent": 6,
      "text": "id-dsa-with-sha1 OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) x9-57 (10040) x9cm(4) 3 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "When the id-dsa-with-sha1 algorithm identifier is used, the AlgorithmIdentifier parameters field MUST be absent.",
      "ja": "ID-DSA-WITH-SHA1アルゴリズム識別子が使用されるとき、AlgorithmIdentifierパラメタ分野は存在してはなりません。"
    },
    {
      "indent": 3,
      "text": "When signing, the DSA algorithm generates two values, commonly called r and s. To transfer these two values as one signature, they MUST be encoded using the Dss-Sig-Value type:",
      "ja": "署名するとき、DSAアルゴリズムは、一般的にR及びSと呼ばれる2つの値を生成します。 1つのシグネチャとして、これら2つの値を転送するために、彼らは、DSS-SIG-value型を用いて符号化されなければなりません。"
    },
    {
      "indent": 6,
      "text": "Dss-Sig-Value ::= SEQUENCE {\n  r INTEGER,\n  s INTEGER }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3.2 RSA",
      "section_title": true,
      "ja": "3.2 RSA"
    },
    {
      "indent": 3,
      "text": "The RSA (PKCS #1 v1.5) signature algorithm is defined in RFC 2437 [NEWPKCS#1]. RFC 2437 specifies the use of the RSA signature algorithm with the SHA-1 and MD5 message digest algorithms.",
      "ja": "RSA（PKCS＃1 V1.5）署名アルゴリズムは、RFC 2437で定義されている[NEWPKCS＃1]。 RFC 2437は、SHA-1およびMD5メッセージダイジェストアルゴリズムとRSA署名アルゴリズムの使用を指定します。"
    },
    {
      "indent": 3,
      "text": "The algorithm identifier for RSA subject public keys in certificates is:",
      "ja": "証明書におけるRSA対象の公開鍵のためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "When the rsaEncryption algorithm identifier is used, the AlgorithmIdentifier parameters field MUST contain NULL.",
      "ja": "rsaEncryptionアルゴリズム識別子を使用する場合、AlgorithmIdentifierパラメタ分野はNULLを含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "When the rsaEncryption algorithm identifier is used, the RSA public key, which is composed of a modulus and a public exponent, MUST be encoded using the RSAPublicKey type. The output of this encoding is carried in the certificate subject public key.",
      "ja": "rsaEncryptionアルゴリズム識別子が使用されるとき、弾性率および公開指数で構成されているRSA公開鍵は、のRSAPublicKeyタイプを用いて符号化されなければなりません。このエンコーディングの出力は、証明書のサブジェクトの公開鍵で運ばれます。"
    },
    {
      "indent": 6,
      "text": "RSAPublicKey ::= SEQUENCE {\n   modulus INTEGER, -- n\n   publicExponent INTEGER } -- e",
      "raw": true
    },
    {
      "indent": 3,
      "text": "CMS implementations that include the RSA (PKCS #1 v1.5) signature algorithm MUST also implement the SHA-1 message digest algorithm. Such implementations SHOULD also support the MD5 message digest algorithm.",
      "ja": "RSA（PKCS＃1 V1.5）が含まれるCMS実装は署名アルゴリズムは、SHA-1メッセージダイジェストアルゴリズムを実装しなければなりません。そのような実装はまた、MD5メッセージダイジェストアルゴリズムをサポートすべきです。"
    },
    {
      "indent": 3,
      "text": "The rsaEncryption algorithm identifier is used to identify RSA (PKCS #1 v1.5) signature values regardless of the message digest algorithm employed. CMS implementations that include the RSA (PKCS #1 v1.5) signature algorithm MUST support the rsaEncryption signature value algorithm identifier, and CMS implementations MAY support RSA (PKCS #1 v1.5) signature value algorithm identifiers that specify both the RSA (PKCS #1 v1.5) signature algorithm and the message digest algorithm.",
      "ja": "rsaEncryptionアルゴリズム識別子に関係なくメッセージのRSA（PKCS＃1 V1.5）署名値を識別アルゴリズムが使用消化するために使用されます。 RSA（PKCSの両方を指定するRSA（PKCS＃1 V1.5）署名アルゴリズムはrsaEncryption署名値アルゴリズム識別子をサポートしなければなりません、そしてCMS実装はRSA（PKCS＃1 V1.5を）をサポートすることができる署名値アルゴリズムの識別子を含むCMS実装＃1 V1.5）署名アルゴリズムとメッセージダイジェストアルゴリズム。"
    },
    {
      "indent": 3,
      "text": "The algorithm identifier for RSA (PKCS #1 v1.5) with SHA-1 signature values is:",
      "ja": "SHA-1署名の値を有するRSA（PKCS＃1 V1.5）のためのアルゴリズム識別子です。"
    },
    {
      "indent": 6,
      "text": "sha1WithRSAEncryption OBJECT IDENTIFIER ::= { iso(1)\n    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The algorithm identifier for RSA (PKCS #1 v1.5) with MD5 signature values is:",
      "ja": "MD5署名値を有するRSAのためのアルゴリズム識別子（PKCS＃1 V1.5）です。"
    },
    {
      "indent": 6,
      "text": "md5WithRSAEncryption OBJECT IDENTIFIER ::= { iso(1)\n    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 4 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "When the rsaEncryption, sha1WithRSAEncryption, or md5WithRSAEncryption signature value algorithm identifiers are used, the AlgorithmIdentifier parameters field MUST be NULL.",
      "ja": "rsaEncryption、sha1WithRSAEncryption、又はmd5WithRSAEncryption署名値アルゴリズム識別子が使用されるとき、AlgorithmIdentifierパラメタ分野はNULLでなければなりません。"
    },
    {
      "indent": 3,
      "text": "When signing, the RSA algorithm generates a single value, and that value is used directly as the signature value.",
      "ja": "署名するとき、RSAアルゴリズムは、単一の値を生成し、その値を署名値として直接使用されます。"
    },
    {
      "indent": 0,
      "text": "4 Key Management Algorithms",
      "ja": "4個のキー管理アルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS accommodates the following general key management techniques: key agreement, key transport, previously distributed symmetric key-encryption keys, and passwords.",
      "ja": "鍵合意、キー輸送、以前に分配された左右対称キー暗号化キー、およびパスワード：CMSには、以下の一般的な鍵管理技術を収納します。"
    },
    {
      "indent": 0,
      "text": "4.1 Key Agreement Algorithms",
      "section_title": true,
      "ja": "4.1鍵共有アルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support key agreement using X9.42 Ephemeral-Static Diffie-Hellman (X9.42 E-S D-H) and X9.42 Static-Static Diffie-Hellman (X9.42 S-S D-H).",
      "ja": "このセクションでは、X9.42エフェメラル静的ディフィ - ヘルマン（X9.42 E-S D-H）とX9.42静的静的ディフィ - ヘルマン（X9.42 S-S D-H）を使用して鍵合意をサポートするCMS実装によって用いられる規則を指定します。"
    },
    {
      "indent": 3,
      "text": "When a key agreement algorithm is used, a key-encryption algorithm is also needed. Therefore, when key agreement is supported, a key-encryption algorithm MUST be provided for each content-encryption algorithm. The key wrap algorithms for Triple-DES and RC2 are described in RFC 3217 [WRAP].",
      "ja": "鍵合意アルゴリズムが使用されている場合は、鍵暗号化アルゴリズムも必要とされています。鍵合意がサポートされている場合ので、鍵の暗号化アルゴリズムは、各コンテンツの暗号化アルゴリズムのために提供されなければなりません。トリプルDESとRC2のためのキーラップアルゴリズムは、RFC 3217 [WRAP]に記載されています。"
    },
    {
      "indent": 3,
      "text": "For key agreement of RC2 key-encryption keys, 128 bits MUST be generated as input to the key expansion process used to compute the RC2 effective key [RC2].",
      "ja": "RC2鍵暗号鍵の鍵合意のために、128ビットRC2有効なキー[RC2]を計算するために使用される鍵拡張プロセスへの入力として生成しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Key agreement algorithm identifiers are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm fields.",
      "ja": "キー合意アルゴリズム識別子はEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "Key wrap algorithm identifiers are located in the KeyWrapAlgorithm parameters within the EnvelopedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm fields.",
      "ja": "キーラップアルゴリズム識別子はEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmフィールド内KeyWrapAlgorithmパラメータに位置しています。"
    },
    {
      "indent": 3,
      "text": "Wrapped content-encryption keys are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field. Wrapped message-authentication keys are located in the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field.",
      "ja": "ラップされたコンテンツの暗号化キーはEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに位置しています。ラップされたメッセージ認証キーはAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "4.1.1 X9.42 Ephemeral-Static Diffie-Hellman",
      "section_title": true,
      "ja": "4.1.1 X9.42エフェメラル-静的ディフィー・ヘルマン"
    },
    {
      "indent": 3,
      "text": "Ephemeral-Static Diffie-Hellman key agreement is defined in RFC 2631 [DH-X9.42]. When using Ephemeral-Static Diffie-Hellman, the EnvelopedData RecipientInfos KeyAgreeRecipientInfo field is used as follows:",
      "ja": "エフェメラル静的のDiffie-Hellman鍵合意は、[DH-X9.42] RFC 2631で定義されています。エフェメラル静的ディフィ - ヘルマンを使用する場合、以下のように、EnvelopedDataののrecipientInfos KeyAgreeRecipientInfoフィールドが使用されています。"
    },
    {
      "indent": 6,
      "text": "version MUST be 3.",
      "ja": "バージョンは3でなければなりません。"
    },
    {
      "indent": 6,
      "text": "originator MUST be the originatorKey alternative. The originatorKey algorithm field MUST contain the dh-public-number object identifier with absent parameters. The originatorKey publicKey field MUST contain the sender's ephemeral public key. The dh-public-number object identifier is:",
      "ja": "発信者はoriginatorKeyの選択肢でなければなりません。 originatorKeyアルゴリズムフィールドが存在しないパラメータでDH-公開番号オブジェクト識別子を含まなければなりません。 originatorKey公開フィールドは、送信者のはかない公開鍵を含まなければなりません。 DH-公開番号オブジェクト識別子は次のとおりです。"
    },
    {
      "indent": 9,
      "text": "dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) ansi-x942(10046) number-type(2) 1 }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "ukm may be present or absent. CMS implementations MUST support ukm being absent, and CMS implementations SHOULD support ukm being present. When present, the ukm is used to ensure that a different key-encryption key is generated when the ephemeral private key might be used more than once.",
      "ja": "UKMは存在するか又は存在しなくてもよいです。 CMS実装は不在であるUKMをサポートしなければなりません、そしてCMS実装が存在するUKMをサポートしなければなりません。存在する場合、UKMは短命秘密鍵が複数回使用されるかもしれないときに別のキー暗号化キーが生成されることを保証するために使用されます。"
    },
    {
      "indent": 6,
      "text": "keyEncryptionAlgorithm MUST be the id-alg-ESDH algorithm identifier. The algorithm identifier parameter field for id-alg-ESDH is KeyWrapAlgorithm, and this parameter MUST be present. The KeyWrapAlgorithm denotes the symmetric encryption algorithm used to encrypt the content-encryption key with the pairwise key-encryption key generated using the X9.42 Ephemeral-Static Diffie-Hellman key agreement algorithm. Triple-DES and RC2 key wrap algorithms are described in RFC 3217 [WRAP]. The id-alg-ESDH algorithm identifier and parameter syntax is:",
      "ja": "keyEncryptionAlgorithmは、ID-ALG-ESDHアルゴリズム識別子でなければなりません。 ID-ALG-ESDHためのアルゴリズム識別子パラメータフィールドはKeyWrapAlgorithmであり、このパラメータが存在しなければなりません。 KeyWrapAlgorithmはX9.42エフェメラル・スタティックのDiffie-Hellman鍵合意アルゴリズムを使用して生成されたペアワイズキーと暗号化キーを使用して、コンテンツ暗号化キーを暗号化するために使用される対称暗号化アルゴリズムを示しています。トリプルDESとRC2キーラップアルゴリズムは、RFC 3217 [WRAP]に記載されています。 ID-ALG-ESDHアルゴリズム識別子とパラメータ構文は次のとおりです。"
    },
    {
      "indent": 9,
      "text": "id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n    alg(3) 5 }",
      "raw": true
    },
    {
      "indent": 9,
      "text": "KeyWrapAlgorithm ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 6,
      "text": "recipientEncryptedKeys contains an identifier and an encrypted key for each recipient. The RecipientEncryptedKey KeyAgreeRecipientIdentifier MUST contain either the issuerAndSerialNumber identifying the recipient's certificate or the RecipientKeyIdentifier containing the subject key identifier from the recipient's certificate. In both cases, the recipient's certificate contains the recipient's static public key. RecipientEncryptedKey EncryptedKey MUST contain the content-encryption key encrypted with the X9.42 Ephemeral-Static Diffie-Hellman generated pairwise key-encryption key using the algorithm specified by the KeyWrapAlgorithm.",
      "ja": "recipientEncryptedKeysは、識別子と受信者ごとに暗号化キーが含まれています。 RecipientEncryptedKey KeyAgreeRecipientIdentifierを含まなければならないのいずれかissuerAndSerialNumberは、受信者の証明書または受信者の証明書のサブジェクトキー識別子を含むRecipientKeyIdentifierを識別する。どちらの場合も、受信者の証明書は、受信者の静的な公開鍵が含まれています。 RecipientEncryptedKey EncryptedKeyにはX9.42エフェメラル-静的ディフィー・ヘルマンで暗号化されたコンテンツ暗号化キーが含まれているKeyWrapAlgorithmで指定されたアルゴリズムを使用した対の鍵暗号鍵を生成しなければなりません。"
    },
    {
      "indent": 0,
      "text": "4.1.2 X9.42 Static-Static Diffie-Hellman",
      "section_title": true,
      "ja": "4.1.2 X9.42スタティックスタティックディフィー・ヘルマン"
    },
    {
      "indent": 3,
      "text": "Static-Static Diffie-Hellman key agreement is defined in RFC 2631 [DH-X9.42]. When using Static-Static Diffie-Hellman, the EnvelopedData RecipientInfos KeyAgreeRecipientInfo and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo fields are used as follows:",
      "ja": "静的静的のDiffie-Hellman鍵合意は、[DH-X9.42] RFC 2631で定義されています。静的静的ディフィ - ヘルマンを使用する場合、以下のように、EnvelopedDataののrecipientInfos KeyAgreeRecipientInfoとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfoフィールドが使用されています。"
    },
    {
      "indent": 6,
      "text": "version MUST be 3.",
      "ja": "バージョンは3でなければなりません。"
    },
    {
      "indent": 6,
      "text": "originator MUST be either the issuerAndSerialNumber or subjectKeyIdentifier alternative. In both cases, the originator's certificate contains the sender's static public key. RFC 3279 [CERTALGS] specifies the AlgorithmIdentifier parameters syntax and values that are included in the originator's certificate. The originator's certificate subject public key information field MUST contain the dh-public-number object identifier:",
      "ja": "発信者はissuerAndSerialNumberまたはsubjectKeyIdentifier代替のいずれかでなければなりません。どちらの場合も、発信者の証明書は、送信者の静的な公開鍵が含まれています。 RFC 3279 [CERTALGS]は、発信者の証明書に含まれているAlgorithmIdentifierパラメータの構文と値を指定します。発信者の証明書のサブジェクトの公開鍵情報フィールドには、DH-公開番号オブジェクト識別子を含まなければなりません："
    },
    {
      "indent": 9,
      "text": "dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) ansi-x942(10046) number-type(2) 1 }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "ukm MUST be present. The ukm ensures that a different key-encryption key is generated for each message between the same sender and recipient.",
      "ja": "UKMが存在しなければなりません。 UKMは異なる鍵暗号化鍵が同じ送信者と受信者との間の各メッセージのために生成されることを保証します。"
    },
    {
      "indent": 6,
      "text": "keyEncryptionAlgorithm MUST be the id-alg-SSDH algorithm identifier. The algorithm identifier parameter field for id-alg-SSDH is KeyWrapAlgorihtm, and this parameter MUST be present. The KeyWrapAlgorithm denotes the symmetric encryption algorithm used to encrypt the content-encryption key with the pairwise key-encryption key generated using the X9.42 Static-Static Diffie-Hellman key agreement algorithm. Triple-DES and RC2 key wrap algorithms are described in RFC 3217 [WRAP]. The id-alg-SSDH algorithm identifier and parameter syntax is:",
      "ja": "keyEncryptionAlgorithmは、ID-ALG-SSDHアルゴリズム識別子でなければなりません。 ID-ALG-SSDHためのアルゴリズム識別子パラメータフィールドはKeyWrapAlgorihtmであり、このパラメータが存在しなければなりません。 KeyWrapAlgorithmはX9.42スタティックスタティックのDiffie-Hellman鍵合意アルゴリズムを使用して生成されたペアワイズキーと暗号化キーを使用して、コンテンツ暗号化キーを暗号化するために使用される対称暗号化アルゴリズムを示しています。トリプルDESとRC2キーラップアルゴリズムは、RFC 3217 [WRAP]に記載されています。 ID-ALG-SSDHアルゴリズム識別子とパラメータの構文は次のとおりです。"
    },
    {
      "indent": 9,
      "text": "id-alg-SSDH OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n    alg(3) 10 }",
      "raw": true
    },
    {
      "indent": 9,
      "text": "KeyWrapAlgorithm ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 6,
      "text": "recipientEncryptedKeys contains an identifier and an encrypted key for each recipient. The RecipientEncryptedKey KeyAgreeRecipientIdentifier MUST contain either the issuerAndSerialNumber identifying the recipient's certificate or the RecipientKeyIdentifier containing the subject key identifier from the recipient's certificate. In both cases, the recipient's certificate contains the recipient's static public key. RecipientEncryptedKey EncryptedKey MUST contain the content-encryption key encrypted with the X9.42 Static-Static Diffie-Hellman generated pairwise key-encryption key using the algorithm specified by the KeyWrapAlgortihm.",
      "ja": "recipientEncryptedKeysは、識別子と受信者ごとに暗号化キーが含まれています。 RecipientEncryptedKey KeyAgreeRecipientIdentifierを含まなければならないのいずれかissuerAndSerialNumberは、受信者の証明書または受信者の証明書のサブジェクトキー識別子を含むRecipientKeyIdentifierを識別する。どちらの場合も、受信者の証明書は、受信者の静的な公開鍵が含まれています。 RecipientEncryptedKey EncryptedKeyにはX9.42スタティックスタティックディフィー・ヘルマンで暗号化されたコンテンツ暗号化キーが含まれているKeyWrapAlgortihmで指定されたアルゴリズムを使用した対の鍵暗号鍵を生成しなければなりません。"
    },
    {
      "indent": 0,
      "text": "4.2 Key Transport Algorithms",
      "section_title": true,
      "ja": "4.2主な交通アルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support key transport using RSA (PKCS #1 v1.5).",
      "ja": "このセクションでは、RSA（PKCS＃1 V1.5）を使用して、キートランスポートをサポートするCMS実装によって使われたコンベンションを指定します。"
    },
    {
      "indent": 3,
      "text": "Key transport algorithm identifiers are located in the EnvelopedData RecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithm field.",
      "ja": "キートランスポートアルゴリズム識別子はEnvelopedDataののrecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithmフィールドに位置しています。"
    },
    {
      "indent": 3,
      "text": "Key transport encrypted content-encryption keys are located in the EnvelopedData RecipientInfos KeyTransRecipientInfo encryptedKey field.",
      "ja": "主な輸送暗号化されたコンテンツ暗号化キーはEnvelopedDataののrecipientInfos KeyTransRecipientInfo EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "4.2.1 RSA (PKCS #1 v1.5)",
      "section_title": true,
      "ja": "4.2.1 RSA（PKCS＃1 V1.5）"
    },
    {
      "indent": 3,
      "text": "The RSA key transport algorithm is the RSA encryption scheme defined in RFC 2313 [PKCS#1], block type is 02, where the message to be encrypted is the content-encryption key. The algorithm identifier for RSA (PKCS #1 v1.5) is:",
      "ja": "RSA鍵トランスポートアルゴリズムは、RFC 2313で定義されているRSA暗号化方式は、[PKCS＃1]、ブロックタイプは、暗号化されるメッセージは、コンテンツ暗号化キーである場合、02です。 RSA（PKCS＃1 V1.5）のためのアルゴリズム識別子です。"
    },
    {
      "indent": 6,
      "text": "rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field MUST be present, and the parameters field MUST contain NULL.",
      "ja": "AlgorithmIdentifierパラメータフィールドが存在しなければならない、とパラメータフィールドがNULLを含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "When using a Triple-DES content-encryption key, CMS implementations MUST adjust the parity bits for each DES key comprising the Triple-DES key prior to RSA encryption.",
      "ja": "トリプルDESコンテンツ暗号化キーを使用する場合、CMS実装はRSA暗号化の前にトリプルDES鍵を含む各DESキーのパリティビットを調整しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The use of RSA (PKCS #1 v1.5) encryption, as defined in RFC 2313 [PKCS#1], to provide confidentiality has a known vulnerability. The vulnerability is primarily relevant to usage in interactive applications rather than to store-and-forward environments. Further information and proposed countermeasures are discussed in the Security Considerations section of this document and RFC 3218 [MMA].",
      "ja": "機密性を提供するために、RFC 2313で定義されているRSA（PKCS＃1 V1.5）暗号化の使用[PKCS＃1]は、既知の脆弱性を有しています。この脆弱性は、対話型アプリケーションではなく、ストアアンドフォワードの環境への使用に主に関連しています。さらなる情報提案対策がこの文書およびRFC 3218 [MMA]のセキュリティの考慮事項のセクションで説明されています。"
    },
    {
      "indent": 3,
      "text": "Note that the same RSA encryption scheme is also defined in RFC 2437 [NEWPKCS#1]. Within RFC 2437, this RSA encryption scheme is called RSAES-PKCS1-v1_5.",
      "ja": "同じRSA暗号方式はまた、RFC 2437で定義されていることに注意してください[NEWPKCS＃1]。 RFC 2437の中で、このRSA暗号化方式は、RSAES-PKCS1-v1_5のと呼ばれています。"
    },
    {
      "indent": 0,
      "text": "4.3 Symmetric Key-Encryption Key Algorithms",
      "section_title": true,
      "ja": "4.3対称キー暗号化キーアルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support symmetric key-encryption key management using Triple-DES or RC2 key-encryption keys. When RC2 is supported, RC2 128-bit keys MUST be used as key-encryption keys, and they MUST be used with the RC2ParameterVersion parameter set to 58. A CMS implementation MAY support mixed key-encryption and content-encryptionalgorithms. For example, a 40-bit RC2 content-encryption key MAY be wrapped with a 168-bit Triple-DES key-encryption key or with a 128-bit RC2 key-encryption key.",
      "ja": "このセクションでは、トリプルDESを使用して、対称鍵暗号鍵管理やRC2キー暗号化キーをサポートするCMS実装によって使われたコンベンションを指定します。 RC2がサポートされている場合には、RC2 128ビットキーは、キー暗号化キーとして使用されなければならない、と彼らはCMSの実装が混在キー暗号化とコンテンツencryptionalgorithmsをサポートするかもしれ58にRC2ParameterVersionパラメータセットを使用しなければなりません。例えば、40ビットのRC2コンテンツ暗号化キーは168ビットトリプルDES鍵暗号化キーまたは128ビットのRC2キー暗号化キーで巻き付けられてもよいです。"
    },
    {
      "indent": 3,
      "text": "Key wrap algorithm identifiers are located in the EnvelopedData RecipientInfos KEKRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KEKRecipientInfo keyEncryptionAlgorithm fields.",
      "ja": "キーラップアルゴリズム識別子はEnvelopedDataののrecipientInfos KEKRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KEKRecipientInfo keyEncryptionAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "Wrapped content-encryption keys are located in the EnvelopedData RecipientInfos KEKRecipientInfo encryptedKey field. Wrapped message-authentication keys are located in the AuthenticatedData RecipientInfos KEKRecipientInfo encryptedKey field.",
      "ja": "ラップされたコンテンツの暗号化キーはEnvelopedDataののrecipientInfos KEKRecipientInfo EncryptedKeyにフィールドに位置しています。ラップされたメッセージ認証キーはAuthenticatedDataのrecipientInfos KEKRecipientInfo EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 3,
      "text": "The output of a key agreement algorithm is a key-encryption key, and this key-encryption key is used to encrypt the content-encryption key. To support key agreement, key wrap algorithm identifiers are located in the KeyWrapAlgorithm parameter of the EnvelopedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm fields. However, only key agreement algorithms that inherently provide authentication ought to be used with AuthenticatedData. Wrapped content-encryption keys are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field, wrapped message-authentication keys are located in the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field.",
      "ja": "鍵合意アルゴリズムの出力は、キー暗号化キーであり、このキーの暗号化キーは、コンテンツ暗号化キーを暗号化するために使用されます。鍵合意をサポートするために、キーラップアルゴリズム識別子はEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmフィールドのKeyWrapAlgorithmパラメータに位置しています。しかし、本質的に認証を提供する唯一の鍵合意アルゴリズムがAuthenticatedDataで使用されるべきです。ラップされたコンテンツの暗号化キーはEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに配置されている、包まれたメッセージ認証キーはAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "4.3.1 Triple-DES Key Wrap",
      "section_title": true,
      "ja": "4.3.1トリプルDESキーラップ"
    },
    {
      "indent": 3,
      "text": "A CMS implementation MAY support mixed key-encryption and content-encryption algorithms. For example, a 128-bit RC2 content-encryption key MAY be wrapped with a 168-bit Triple-DES key-encryption key.",
      "ja": "CMSの実装では、混合キー暗号化とコンテンツの暗号化アルゴリズムをサポートするかもしれません。例えば、128ビットのRC2コンテンツ暗号化キーは、168ビットTriple-DESのキー暗号化キーで包まれるかもしれません。"
    },
    {
      "indent": 3,
      "text": "Triple-DES key encryption has the algorithm identifier:",
      "ja": "トリプルDES鍵暗号アルゴリズムの識別子があります。"
    },
    {
      "indent": 6,
      "text": "id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameter field MUST be NULL.",
      "ja": "AlgorithmIdentifierパラメータフィールドはNULLでなければなりません。"
    },
    {
      "indent": 3,
      "text": "The key wrap algorithm used to encrypt a Triple-DES content-encryption key with a Triple-DES key-encryption key is specified in section 3.1 of RFC 3217 [WRAP]. The corresponding key unwrap algorithm is specified in section 3.2 of RFC 3217 [WRAP].",
      "ja": "トリプルDES鍵暗号化鍵とトリプルDESコンテンツ暗号化キーを暗号化するために使用されるキーラップアルゴリズムは、RFC 3217 [WRAP]のセクション3.1で指定されています。対応するキーアンラップアルゴリズムは、RFC 3217のセクション3.2 [WRAP]で指定されています。"
    },
    {
      "indent": 3,
      "text": "Out-of-band distribution of the Triple-DES key-encryption key used to encrypt the Triple-DES content-encryption key is beyond the scope of this document.",
      "ja": "トリプルDESコンテンツ暗号化キーを暗号化するために使用されるトリプルDESのキー暗号化キーのアウト・オブ・バンド分布は、このドキュメントの範囲を超えています。"
    },
    {
      "indent": 0,
      "text": "4.3.2 RC2 Key Wrap",
      "section_title": true,
      "ja": "4.3.2 RC2キーラップ"
    },
    {
      "indent": 3,
      "text": "A CMS implementation MAY support mixed key-encryption and content-encryption algorithms. For example, a 128-bit RC2 content-encryption key MAY be wrapped with a 168-bit Triple-DES key-encryption key. Similarly, a 40-bit RC2 content-encryption key MAY be wrapped with a 128-bit RC2 key-encryption key.",
      "ja": "CMSの実装では、混合キー暗号化とコンテンツの暗号化アルゴリズムをサポートするかもしれません。例えば、128ビットのRC2コンテンツ暗号化キーは、168ビットTriple-DESのキー暗号化キーで包まれるかもしれません。同様に、40ビットのRC2コンテンツ暗号化キーは、128ビットのRC2キー暗号化キーでラップされるかもしれません。"
    },
    {
      "indent": 3,
      "text": "RC2 key encryption has the algorithm identifier:",
      "ja": "RC2鍵暗号アルゴリズムの識別子があります。"
    },
    {
      "indent": 6,
      "text": "id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameter field MUST be RC2wrapParameter:",
      "ja": "AlgorithmIdentifierパラメータフィールドはRC2wrapParameterでなければなりません。"
    },
    {
      "indent": 6,
      "text": "RC2wrapParameter ::= RC2ParameterVersion",
      "raw": true
    },
    {
      "indent": 6,
      "text": "RC2ParameterVersion ::= INTEGER",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The RC2 effective-key-bits (key size) greater than 32 and less than 256 is encoded in the RC2ParameterVersion. For the effective-key-bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120, and 58 respectively. These values are not simply the RC2 key length. Note that the value 160 must be encoded as two octets (00 A0), because the one octet (A0) encoding represents a negative number.",
      "ja": "RC2有効なキービット（キーサイズ）32より大きく256未満はRC2ParameterVersionで符号化されます。 40、64、及び128の実効キー・ビットについて、rc2ParameterVersion値は、それぞれ160、120、および58です。これらの値は、単にRC2キーの長さではありません。 1つのオクテット（A0）符号が負の数を表すための値160は、2つのオクテット（00 A0）として符号化されなければならないことに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "RC2 128-bit keys MUST be used as key-encryption keys, and they MUST be used with the RC2ParameterVersion parameter set to 58.",
      "ja": "RC2 128ビットキーは、キー暗号化キーとして使用されなければならない、と彼らは58に設定されRC2ParameterVersionパラメータで使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The key wrap algorithm used to encrypt a RC2 content-encryption key with a RC2 key-encryption key is specified in section 4.1 of RFC 3217 [WRAP]. The corresponding key unwrap algorithm is specified 4.2 of RFC 3217 [WRAP].",
      "ja": "RC2鍵暗号化鍵とRC2コンテンツ暗号化キーを暗号化するために使用されるキーラップアルゴリズムは、RFC 3217 [WRAP]のセクション4.1で指定されています。対応するキーアンラップアルゴリズムは、RFC 3217 [WRAP]の4.2指定されています。"
    },
    {
      "indent": 3,
      "text": "Out-of-band distribution of the RC2 key-encryption key used to encrypt the RC2 content-encryption key is beyond of the scope of this document.",
      "ja": "アウトオブバンドRC2コンテンツ暗号化キーを暗号化するために使用RC2キー暗号化キーの分布は、この文書の範囲を超えています。"
    },
    {
      "indent": 0,
      "text": "4.4 Key Derivation Algorithms",
      "section_title": true,
      "ja": "4.4鍵の導出アルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support password-based key management using PBKDF2.",
      "ja": "このセクションでは、PBKDF2を使用してパスワードベースのキー管理をサポートするCMS実装によって使われたコンベンションを指定します。"
    },
    {
      "indent": 3,
      "text": "Key derivation algorithms are used to convert a password into a key-encryption key as part of the password-based key management technique.",
      "ja": "キー導出アルゴリズムは、パスワードベースの鍵管理技術の一環として、キー暗号化キーにパスワードを変換するために使用されています。"
    },
    {
      "indent": 3,
      "text": "Key derivation algorithm identifiers are located in the EnvelopedData RecipientInfos PasswordRecipientInfo keyDerivationAlgorithm and AuthenticatedData RecipientInfos PasswordRecipientInfo keyDerivationAlgorithm fields.",
      "ja": "キー導出アルゴリズム識別子はEnvelopedDataののrecipientInfos PasswordRecipientInfo keyDerivationAlgorithmとAuthenticatedDataのrecipientInfos PasswordRecipientInfo keyDerivationAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "The key-encryption key that is derived from the password is used to encrypt the content-encryption key.",
      "ja": "パスワードから導出されるキー暗号化キーは、コンテンツ暗号化キーを暗号化するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The content-encryption keys encrypted with password-derived key-encryption keys are located in the EnvelopedData RecipientInfos PasswordRecipientInfo encryptedKey field. The message-authentication keys encrypted with password-derived key-encryption keys are located in the AuthenticatedData RecipientInfos PasswordRecipientInfo encryptedKey field.",
      "ja": "パスワード由来の鍵暗号鍵で暗号化コンテンツの暗号化キーはEnvelopedDataののrecipientInfos PasswordRecipientInfo EncryptedKeyにフィールドに位置しています。パスワード由来の鍵暗号鍵で暗号化されたメッセージ認証キーはAuthenticatedDataのrecipientInfos PasswordRecipientInfo EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "4.4.1 PBKDF2",
      "section_title": true,
      "ja": "4.4.1 PBKDF2"
    },
    {
      "indent": 3,
      "text": "The PBKDF2 key derivation algorithm is specified in RFC 2898 [PKCS#5]. The KeyDerivationAlgorithmIdentifer identifies the key-derivation algorithm, and any associated parameters used to derive the key-encryption key from the user-supplied password. The algorithm identifier for the PBKDF2 key derivation algorithm is:",
      "ja": "PBKDF2鍵導出アルゴリズムは、[PKCS＃5] RFC 2898で指定されています。 KeyDerivationAlgorithmIdentiferは、キー導出アルゴリズムを識別し、ユーザが入力したパスワードから鍵暗号化鍵を導出するために使用される任意の関連パラメータ。 PBKDF2鍵導出アルゴリズムのためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "id-PBKDF2 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) pkcs(1) pkcs-5(5) 12 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameter field MUST be PBKDF2-params:",
      "ja": "AlgorithmIdentifierパラメータフィールドはPBKDF2-のparamsでなければなりません。"
    },
    {
      "indent": 6,
      "text": "PBKDF2-params ::= SEQUENCE {\n  salt CHOICE {\n    specified OCTET STRING,\n    otherSource AlgorithmIdentifier },\n  iterationCount INTEGER (1..MAX),\n  keyLength INTEGER (1..MAX) OPTIONAL,\n  prf AlgorithmIdentifier\n    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Within the PBKDF2-params, the salt MUST use the specified OCTET STRING.",
      "ja": "PBKDF2-のparams内では、塩は、指定されたオクテット文字列を使用しなければなりません。"
    },
    {
      "indent": 0,
      "text": "5 Content Encryption Algorithms",
      "ja": "5個のコンテンツの暗号化アルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support content encryption using Three-Key Triple-DES in CBC mode, Two-Key Triple-DES in CBC mode, or RC2 in CBC mode.",
      "ja": "このセクションでは、CBCモードの3キートリプルDES、CBCモードで2キートリプルDES CBCモード、またはRC2を使用して、コンテンツの暗号化をサポートするCMS実装によって使われたコンベンションを指定します。"
    },
    {
      "indent": 3,
      "text": "Content encryption algorithm identifiers are located in the EnvelopedData EncryptedContentInfo contentEncryptionAlgorithm and the EncryptedData EncryptedContentInfo contentEncryptionAlgorithm fields.",
      "ja": "コンテンツ暗号化アルゴリズム識別子はEnvelopedDataのEncryptedContentInfo contentEncryptionAlgorithmとはEncryptedData EncryptedContentInfo contentEncryptionAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "Content encryption algorithms are used to encipher the content located in the EnvelopedData EncryptedContentInfo encryptedContent field and the EncryptedData EncryptedContentInfo encryptedContent field.",
      "ja": "コンテンツの暗号化アルゴリズムは、EnvelopedDataのEncryptedContentInfo暗号化コンテンツフィールドとはEncryptedData EncryptedContentInfo暗号化コンテンツフィールドにあるコンテンツを暗号化するために使用されています。"
    },
    {
      "indent": 0,
      "text": "5.1 Triple-DES CBC",
      "section_title": true,
      "ja": "5.1トリプルDES CBC"
    },
    {
      "indent": 3,
      "text": "The Triple-DES algorithm is described in ANSI X9.52 [3DES]. The Triple-DES is composed from three sequential DES [DES] operations: encrypt, decrypt, and encrypt. Three-Key Triple-DES uses a different key for each DES operation. Two-Key Triple-DES uses one key for the two encrypt operations and a different key for the decrypt operation. The same algorithm identifiers are used for Three-Key Triple-DES and Two-Key Triple-DES. The algorithm identifier for Triple-DES in Cipher Block Chaining (CBC) mode is:",
      "ja": "トリプルDESアルゴリズムは、ANSI X9.52 [3DES]に記載されています。トリプルDESは、3つの連続DES [DES]動作から構成されています、暗号解読および暗号。スリーキートリプルDESは、各DES操作のために異なるキーを使用しています。 2キートリプルDESは、1〜2つの暗号化操作のためのキーと復号化処理のために異なるキーを使用しています。同じアルゴリズム識別子は三キートリプルDESと2キートリプルDESのために使用されています。暗号ブロック連鎖（CBC）モードでのトリプルDESアルゴリズムの識別子です。"
    },
    {
      "indent": 6,
      "text": "des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field MUST be present, and the parameters field must contain a CBCParameter:",
      "ja": "AlgorithmIdentifierパラメータフィールドが存在しなければならない、とパラメータフィールドがCBCParameterが含まれている必要があります。"
    },
    {
      "indent": 6,
      "text": "CBCParameter ::= IV",
      "raw": true
    },
    {
      "indent": 6,
      "text": "IV ::= OCTET STRING  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 0,
      "text": "5.2 RC2 CBC",
      "section_title": true,
      "ja": "5.2 RC2 CBC"
    },
    {
      "indent": 3,
      "text": "The RC2 algorithm is described in RFC 2268 [RC2]. The algorithm identifier for RC2 in CBC mode is:",
      "ja": "RC2アルゴリズムは、RFC 2268 [RC2]に記載されています。 CBCモードのRC2のためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) encryptionAlgorithm(3) 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field MUST be present, and the parameters field MUST contain a RC2CBCParameter:",
      "ja": "AlgorithmIdentifierパラメータフィールドが存在しなければならない、とパラメータフィールドがRC2CBCParameterを含まなければなりません："
    },
    {
      "indent": 6,
      "text": "RC2CBCParameter ::= SEQUENCE {\n  rc2ParameterVersion INTEGER,\n  iv OCTET STRING  }  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The RC2 effective-key-bits (key size) greater than 32 and less than 256 is encoded in the rc2ParameterVersion. For the effective-key-bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120, and 58 respectively. These values are not simply the RC2 key length. Note that the value 160 must be encoded as two octets (00 A0), since the one octet (A0) encoding represents a negative number.",
      "ja": "RC2有効なキービット（キーサイズ）32より大きく256未満はrc2ParameterVersionで符号化されます。 40、64、及び128の実効キー・ビットについて、rc2ParameterVersion値は、それぞれ160、120、および58です。これらの値は、単にRC2キーの長さではありません。 1つのオクテット（A0）符号が負の数を表すための値160は、2つのオクテット（00 A0）として符号化されなければならないことに留意されたいです。"
    },
    {
      "indent": 0,
      "text": "6 Message Authentication Code Algorithms",
      "ja": "6個のメッセージ認証コードアルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section specifies the conventions employed by CMS implementations that support the HMAC with SHA-1 message authentication code (MAC).",
      "ja": "このセクションでは、SHA-1メッセージ認証コード（MAC）でHMACをサポートするCMS実装によって用いられる規則を指定します。"
    },
    {
      "indent": 3,
      "text": "MAC algorithm identifiers are located in the AuthenticatedData macAlgorithm field.",
      "ja": "MACアルゴリズム識別子はAuthenticatedData macAlgorithmフィールドに位置しています。"
    },
    {
      "indent": 3,
      "text": "MAC values are located in the AuthenticatedData mac field.",
      "ja": "MACバルブは、認証されたデータのMACフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "6.1 HMAC with SHA-1",
      "section_title": true,
      "ja": "SHA-1と6.1 HMAC"
    },
    {
      "indent": 3,
      "text": "The HMAC with SHA-1 algorithm is described in RFC 2104 [HMAC]. The algorithm identifier for HMAC with SHA-1 is:",
      "ja": "SHA-1アルゴリズムでHMACは、RFC 2104 [HMAC]に記載されています。 SHA-1 HMACアルゴリズム識別子です。"
    },
    {
      "indent": 6,
      "text": "hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1)\n   identified-organization(3) dod(6) internet(1) security(5)\n   mechanisms(5) 8 1 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "There are two possible encodings for the HMAC with SHA-1 AlgorithmIdentifier parameters field. The two alternatives arise from the fact that when the 1988 syntax for the AlgorithmIdentifier type was translated into the 1997 syntax, the OPTIONAL associated with the AlgorithmIdentifier parameters got lost. Later the OPTIONAL was recovered via a defect report, but by then many people thought that algorithm parameters were mandatory. Because of this history some implementations may encode parameters as a NULL while others omit them entirely.",
      "ja": "SHA-1のAlgorithmIdentifierパラメータフィールドを持つHMACのための2つの可能なエンコーディングがあります。 2つの選択肢がいるAlgorithmIdentifierタイプのため1988年の構文が1997年の構文に翻訳されたとき、のAlgorithmIdentifierパラメータに関連付けられたオプションが失われてしまったという事実から生じます。その後、オプションは、不具合報告を経て回収されたが、その後で、多くの人々は、アルゴリズムパラメータが必須だと考えました。他の人がそれらを完全に省略しながらこのため履歴の一部の実施形態は、NULLなどのパラメータを符号化することができます。"
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field is OPTIONAL. If present, the parameters field MUST contain a NULL. Implementations MUST accept HMAC with SHA-1 AlgorithmIdentifiers with absent parameters. Implementations MUST accept HMAC with SHA-1 AlgorithmIdentifiers with NULL parameters. Implementations SHOULD generate HMAC with SHA-1 AlgorithmIdentifiers with absent parameters.",
      "ja": "AlgorithmIdentifierパラメータフィールドはオプションです。存在する場合、パラメータフィールドはNULLを含まなければなりません。実装は存在しないパラメータを持つSHA-1 AlgorithmIdentifiersでHMACを受け入れなければなりません。実装はNULLパラメータを持つSHA-1 AlgorithmIdentifiersとHMACを受け入れなければなりません。実装は存在しないパラメータを持つSHA-1 AlgorithmIdentifiersでHMACを生成する必要があります。"
    },
    {
      "indent": 0,
      "text": "7 ASN.1 Module",
      "ja": "7 ASN.1モジュール"
    },
    {
      "indent": 3,
      "text": "CryptographicMessageSyntaxAlgorithms { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0) cmsalg-2001(16) }",
      "ja": "CryptographicMessageSyntaxAlgorithms {ISO（1）部材本体（2）米国（840）RSADSI（113549）PKCS（1）PKCS-9（9）SMIME（16）モジュール（0）CMSALG-2001（16）}"
    },
    {
      "indent": 3,
      "text": "DEFINITIONS IMPLICIT TAGS ::=\nBEGIN",
      "raw": true
    },
    {
      "indent": 3,
      "text": "-- EXPORTS All -- The types and values defined in this module are exported for use -- in the other ASN.1 modules. Other applications may use them for -- their own purposes.",
      "ja": " - このモジュールで定義されたタイプと値が使用のためにエクスポートされる -   - 他のASN.1モジュールにすべてをエクスポートします。独自の目的 - 他のアプリケーションがためにそれらを使用することができます。"
    },
    {
      "indent": 3,
      "text": "IMPORTS -- Imports from RFC 3280 [PROFILE], Appendix A.1 AlgorithmIdentifier FROM PKIX1Explicit88 { iso(1) identified-organization(3) dod(6) internet(1) security(5) mechanisms(5) pkix(7) mod(0) pkix1-explicit(18) } ;",
      "ja": "RFC 3280 [PROFILE]、付録A.1のAlgorithmIdentifier PKIX1Explicit88 FROM {ISO（1）同定された組織（3）DOD（6）インターネット（1）セキュリティ（5）メカニズム（5）PKIX（7）MODからの輸入 - 輸入（0）pkix1、明示的な（18）}。"
    },
    {
      "indent": 3,
      "text": "-- Algorithm Identifiers",
      "ja": " - アルゴリズムの識別子"
    },
    {
      "indent": 3,
      "text": "sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    oiw(14) secsig(3) algorithm(2) 26 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) digestAlgorithm(2) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-dsa OBJECT IDENTIFIER ::=  { iso(1) member-body(2) us(840)\n    x9-57(10040) x9cm(4) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)\n    us(840) x9-57(10040) x9cm(4) 3 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "md5WithRSAEncryption OBJECT IDENTIFIER ::= { iso(1)\n    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 4 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "sha1WithRSAEncryption OBJECT IDENTIFIER ::= { iso(1)\n    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) ansi-x942(10046) number-type(2) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-alg-SSDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 10 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) encryptionAlgorithm(3) 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    dod(6) internet(1) security(5) mechanisms(5) 8 1 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-PBKDF2 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) pkcs(1) pkcs-5(5) 12 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "-- Public Key Types",
      "ja": " - 公開鍵の種類"
    },
    {
      "indent": 3,
      "text": "Dss-Pub-Key ::= INTEGER  -- Y",
      "raw": true
    },
    {
      "indent": 3,
      "text": "RSAPublicKey ::= SEQUENCE {\n  modulus INTEGER,  -- n\n  publicExponent INTEGER }  -- e",
      "raw": true
    },
    {
      "indent": 3,
      "text": "DHPublicKey ::= INTEGER  -- y = g^x mod p",
      "raw": true
    },
    {
      "indent": 3,
      "text": "-- Signature Value Types",
      "ja": " - 署名値の種類"
    },
    {
      "indent": 3,
      "text": "Dss-Sig-Value ::= SEQUENCE {\n  r INTEGER,\n  s INTEGER }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "-- Algorithm Identifier Parameter Types",
      "ja": " - アルゴリズム識別子パラメータ型"
    },
    {
      "indent": 3,
      "text": "Dss-Parms ::= SEQUENCE {\n  p INTEGER,\n  q INTEGER,\n  g INTEGER }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "DHDomainParameters ::= SEQUENCE {\n  p INTEGER,  -- odd prime, p=jq +1\n  g INTEGER,  -- generator, g\n  q INTEGER,  -- factor of p-1\n  j INTEGER OPTIONAL,  -- subgroup factor\n  validationParms ValidationParms OPTIONAL }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "ValidationParms ::= SEQUENCE {\n  seed BIT STRING,\n  pgenCounter INTEGER }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "KeyWrapAlgorithm ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 3,
      "text": "RC2wrapParameter ::= RC2ParameterVersion",
      "raw": true
    },
    {
      "indent": 3,
      "text": "RC2ParameterVersion ::= INTEGER",
      "raw": true
    },
    {
      "indent": 3,
      "text": "CBCParameter ::= IV",
      "raw": true
    },
    {
      "indent": 3,
      "text": "IV ::= OCTET STRING  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "RC2CBCParameter ::= SEQUENCE {\n  rc2ParameterVersion INTEGER,\n  iv OCTET STRING  }  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "PBKDF2-params ::= SEQUENCE {\n  salt CHOICE {\n    specified OCTET STRING,\n    otherSource AlgorithmIdentifier },\n  iterationCount INTEGER (1..MAX),\n  keyLength INTEGER (1..MAX) OPTIONAL,\n  prf AlgorithmIdentifier\n    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "END -- of CryptographicMessageSyntaxAlgorithms",
      "ja": "END  - 暗号メッセージ構文アルゴリズムの"
    },
    {
      "indent": 0,
      "text": "8 References",
      "ja": "8つの参考文献"
    },
    {
      "indent": 3,
      "text": "[3DES] American National Standards Institute. ANSI X9.52-1998, Triple Data Encryption Algorithm Modes of Operation. 1998.",
      "ja": "[3DES]米国規格協会。 ANSI X9.52-1998、オペレーションのトリプルデータ暗号化アルゴリズムモード。 1998。"
    },
    {
      "indent": 3,
      "text": "[CERTALGS] Bassham, L., Housley, R. and W. Polk, \"Algorithms and Identifiers for the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 3279, April 2002.",
      "ja": "[CERTALGS] Bassham、L.、Housley氏、R.とW.ポーク、RFC 3279、2002年4月 \"インターネットX.509公開鍵暗号基盤証明書と証明書失効リスト（CRL）プロフィールのためのアルゴリズムと識別子\"。"
    },
    {
      "indent": 3,
      "text": "[CMS] Housley, R., \"Cryptographic Message Syntax\", RFC 3269, August 2002.",
      "ja": "[CMS] Housley氏、R.、 \"暗号メッセージ構文\"、RFC 3269、2002年8月。"
    },
    {
      "indent": 3,
      "text": "[DES] American National Standards Institute. ANSI X3.106, \"American National Standard for Information Systems - Data Link Encryption\". 1983.",
      "ja": "[DES]米国規格協会。 ANSI X3.106、「情報システムのためのアメリカ国立標準 - データリンク暗号化」。 1983。"
    },
    {
      "indent": 3,
      "text": "[DH-X9.42] Rescorla, E., \"Diffie-Hellman Key Agreement Method\", RFC 2631, June 1999.",
      "ja": "[DH-X9.42]レスコラ、E.、 \"ディフィー・ヘルマン鍵共有方式\"、RFC 2631、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[DSS] National Institute of Standards and Technology. FIPS Pub 186: Digital Signature Standard. 19 May 1994.",
      "ja": "標準技術[DSS]国立研究所。 FIPSパブ186：デジタル署名標準。 1994年5月19日。"
    },
    {
      "indent": 3,
      "text": "[HMAC] Krawczyk, H., \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, February 1997.",
      "ja": "[HMAC] Krawczyk、H.、 \"HMAC：メッセージ認証のための鍵付きハッシュ\"、RFC 2104、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[MD5] Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321, April 1992.",
      "ja": "[MD5] Rivest氏、R.、 \"MD5メッセージダイジェストアルゴリズム\"、RFC 1321、1992年4月。"
    },
    {
      "indent": 3,
      "text": "[MMA] Rescorla, E., \"Preventing the Million Message Attack on CMS\", RFC 3218, January 2002.",
      "ja": "[MMA]レスコラ、E.、 \"CMS上の百万メッセージ攻撃の防止\"、RFC 3218、2002年1月。"
    },
    {
      "indent": 3,
      "text": "[MODES] National Institute of Standards and Technology. FIPS Pub 81: DES Modes of Operation. 2 December 1980.",
      "ja": "[MODES]米国国立標準技術研究所が。 FIPSパブ81：DES運転モード。 1980年12月2日。"
    },
    {
      "indent": 3,
      "text": "[NEWPKCS#1] Kaliski, B. and J. Staddon, \"PKCS #1: RSA Encryption, Version 2.0, RFC 2437, October 1998.",
      "ja": "[NEWPKCS＃1] Kaliski、B.及びJ. Staddon、「PKCS＃1：RSA暗号化、バージョン2.0、RFC 2437、1998年10月。"
    },
    {
      "indent": 3,
      "text": "[OLDCMS] Housley, R., \"Cryptographic Message Syntax\", RFC 2630, June 1999.",
      "ja": "[OLDCMS] Housley氏、R.、 \"暗号メッセージ構文\"、RFC 2630、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[PKCS#1] Kaliski, B, \"PKCS #1: RSA Encryption, Version 2.0\", RFC 2437, October, 1998.",
      "ja": "[PKCS＃1] Kaliski、B、 \"PKCS＃1：RSA暗号化、バージョン2.0\"、RFC 2437、1998年10月。"
    },
    {
      "indent": 3,
      "text": "[PKCS#5] Kaliski, B., \"PKCS #5: Password-Based Cryptography Specification\", RFC 2898, September 2000.",
      "ja": "[PKCS＃5] Kaliski、B.、 \"PKCS＃5：パスワードベースの暗号化仕様\"、RFC 2898、2000年9月。"
    },
    {
      "indent": 3,
      "text": "[PROFILE] Housley, R., Ford, W., Polk, W. and D. Solo, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 3280, April 2002.",
      "ja": "[PROFILE] Housley氏、R.、フォード、W.、ポーク、W.およびD.ソロ、 \"インターネットX.509公開鍵暗号基盤証明書と証明書失効リスト（CRL）プロフィール\"、RFC 3280、2002年4月。"
    },
    {
      "indent": 3,
      "text": "[RANDOM] Eastlake, D., Crocker, S. and J. Schiller, \"Randomness Recommendations for Security, RFC 1750, December 1994.",
      "ja": "[RANDOM]イーストレイク、D.、クロッカー、S.とJ.シラー、「セキュリティ、RFC 1750、1994年12月の乱数勧告。"
    },
    {
      "indent": 3,
      "text": "[RC2] Rivest, R., \"A Description of the RC2 (r) Encryption Algorithm\", RFC 2268, March 1998.",
      "ja": "[RC2]リベスト、R.、 \"RC2（R）暗号化アルゴリズムの説明\"、RFC 2268、1998年3月。"
    },
    {
      "indent": 3,
      "text": "[SHA1] National Institute of Standards and Technology. FIPS Pub 180-1: Secure Hash Standard. 17 April 1995.",
      "ja": "[SHA1]アメリカ国立標準技術研究所。 FIPSパブ180-1：セキュアハッシュ標準。 1995年4月17日。"
    },
    {
      "indent": 3,
      "text": "[STDWORDS] Bradner, S., \"Key Words for Use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[STDWORDS]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[WRAP] Housley, R., \"Triple-DES and RC2 Key Wrapping\", RFC 3217, December 2001.",
      "ja": "[WRAP] Housley氏、R.、 \"トリプルDESとRC2キーラッピング\"、RFC 3217、2001年12月。"
    },
    {
      "indent": 3,
      "text": "[X.208-88] CCITT. Recommendation X.208: Specification of Abstract Syntax Notation One (ASN.1). 1988.",
      "ja": "【X.208-88] CCITT。勧告X.208：抽象構文記法1（ASN.1）の仕様。 1988。"
    },
    {
      "indent": 3,
      "text": "[X.209-88] CCITT. Recommendation X.209: Specification of Basic Encoding Rules for Abstract Syntax Notation One (ASN.1). 1988.",
      "ja": "【X.209-88] CCITT。勧告X. 209：抽象構文記法1（ASN.1）のための基本的な符号化規則の仕様。 1988。"
    },
    {
      "indent": 0,
      "text": "9 Security Considerations",
      "ja": "9セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The CMS provides a method for digitally signing data, digesting data, encrypting data, and authenticating data. This document identifies the conventions for using several cryptographic algorithms for use with the CMS.",
      "ja": "CMSは、デジタル、データに署名データを消化し、データを暗号化し、データを認証するための方法を提供します。この文書では、CMSで使用するために、いくつかの暗号アルゴリズムを使用するための規則を特定します。"
    },
    {
      "indent": 3,
      "text": "Implementations must protect the signer's private key. Compromise of the signer's private key permits masquerade.",
      "ja": "実装は署名者の秘密鍵を保護しなければなりません。署名者の秘密鍵の許可の妥協を装います。"
    },
    {
      "indent": 3,
      "text": "Implementations must protect the key management private key, the key-encryption key, and the content-encryption key. Compromise of the key management private key or the key-encryption key may result in the disclosure of all contents protected with that key. Similarly, compromise of the content-encryption key may result in disclosure of the associated encrypted content.",
      "ja": "実装は、鍵管理、秘密鍵、鍵暗号化キー、およびコンテンツ暗号化キーを保護しなければなりません。鍵管理秘密鍵またはキー暗号化キーの妥協はそのキーで保護されているすべてのコンテンツの公開をもたらすことができます。同様に、コンテンツ暗号化鍵の妥協は、関連する暗号化コンテンツの開示をもたらし得ます。"
    },
    {
      "indent": 3,
      "text": "Implementations must protect the key management private key and the message-authentication key. Compromise of the key management private key permits masquerade of authenticated data. Similarly, compromise of the message-authentication key may result in undetectable modification of the authenticated content.",
      "ja": "実装は、鍵管理秘密鍵とメッセージ認証キーを保護しなければなりません。鍵管理秘密鍵の許可の妥協が認証されたデータを装います。同様に、メッセージ認証鍵の妥協は、認証されたコンテンツの検出不可能な変形をもたらすことができます。"
    },
    {
      "indent": 3,
      "text": "The key management technique employed to distribute message-authentication keys must itself provide authentication, otherwise the content is delivered with integrity from an unknown source. Neither RSA [PKCS#1, NEWPKCS#1] nor Ephemeral-Static Diffie-Hellman [DH-X9.42] provide the necessary data origin authentication. Static-Static Diffie-Hellman [DH-X9.42] does provide the necessary data origin authentication when both the originator and recipient public keys are bound to appropriate identities in X.509 certificates [PROFILE].",
      "ja": "メッセージ認証キーを配布するために用いられる鍵管理技術自体が認証を提供しなければならない、そうでなければコンテンツが未知のソースからの完全性と送達されます。 RSA [PKCS＃1、NEWPKCS＃1]もエフェメラル静的ディフィ - ヘルマン[DH-X9.42]も、必要なデータ発信元認証を提供します。静的 - 静的のDiffie-Hellmanは[DH-X9.42]は、発信者と受信者の両方の公開鍵はX.509証明書で適切なアイデンティティ[PROFILE]にバインドされたときに、必要なデータ発信元認証を提供します。"
    },
    {
      "indent": 3,
      "text": "When more than two parties share the same message-authentication key, data origin authentication is not provided. Any party that knows the message-authentication key can compute a valid MAC, therefore the content could originate from any one of the parties.",
      "ja": "二つ以上の当事者が同じメッセージ認証キーを共有する場合、データ発信元認証は提供されません。メッセージ認証キーを知っている当事者は、したがって、コンテンツは、当事者のいずれかの由来ができ、有効なMACを計算することができます。"
    },
    {
      "indent": 3,
      "text": "Implementations must randomly generate content-encryption keys, message-authentication keys, initialization vectors (IVs), one-time values (such as the k value when generating a DSA signature), and padding. Also, the generation of public/private key pairs relies on a random numbers. The use of inadequate pseudo-random number generators (PRNGs) to generate cryptographic such values can result in little or no security. An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute force searching the whole key space. The generation of quality random numbers is difficult. RFC 1750 [RANDOM] offers important guidance in this area, and Appendix 3 of FIPS Pub 186 [DSS] provides one quality PRNG technique.",
      "ja": "実装はランダムに（例えば、k値としてDSA署名を生成する）、コンテンツ暗号鍵、メッセージ認証キー、初期化ベクトル（IV）、ワンタイム値を生成し、パディングしなければなりません。また、公開鍵/秘密鍵ペアの生成は、乱数に依存しています。暗号のような値を生成するために不十分な疑似乱数発生器（のPRNG）の使用は、ほとんどまたは全くセキュリティをもたらすことができます。攻撃者はそれをはるかに簡単に全体のキースペースを検索結果として起こる小さい可能性はなく、ブルートフォースを探し、キーを生成PRNG環境を再現するかもしれません。品質の乱数の生成が困難です。 RFC 1750 [RANDOM]はこの領域で重要な指導を提供し、FIPSパブ186の付録3 [DSS]は1つの品質PRNGの技術を提供します。"
    },
    {
      "indent": 3,
      "text": "When using key agreement algorithms or previously distributed symmetric key-encryption keys, a key-encryption key is used to encrypt the content-encryption key. If the key-encryption and content-encryption algorithms are different, the effective security is determined by the weaker of the two algorithms. If, for example, content is encrypted with 168-bit Triple-DES and the Triple-DES content-encryption key is wrapped with a 40-bit RC2 key, then at most 40 bits of protection is provided. A trivial search to determine the value of the 40-bit RC2 key can recover Triple-DES key, and then the Triple-DES key can be used to decrypt the content. Therefore, implementers must ensure that key-encryption algorithms are as strong or stronger than content-encryption algorithms.",
      "ja": "鍵合意アルゴリズムまたは以前に分散対称鍵暗号化キーを使用する場合、キー暗号化キーは、コンテンツ暗号化キーを暗号化するために使用されます。キー暗号化とコンテンツの暗号化アルゴリズムが異なる場合は、効果的なセキュリティは、2つのアルゴリズムの弱いにより決定されます。例えば、コンテンツは168ビットTriple-DESおよびトリプルDESコンテンツ暗号鍵で暗号化され、場合、保護の最大40ビットが提供され、40ビットのRC2キーで包まれます。 40ビットのRC2キーの値を決定するために些細な検索は、トリプルDES鍵を回復することができ、その後、トリプルDES鍵はコンテンツを復号するために使用することができます。そのため、実装者は、キー暗号化アルゴリズムがように強いか、コンテンツの暗号化アルゴリズムよりも強いことを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "RFC 3217 [WRAP] specifies key wrap algorithms used to encrypt a Triple-DES content-encryption key with a Triple-DES key-encryption key [3DES] or to encrypt a RC2 content-encryption key with a RC2 key-encryption key [RC2]. The key wrap algorithms makes use of CBC mode [MODES]. These key wrap algorithms have been reviewed for use with Triple-DES and RC2. They have not been reviewed for use with other cryptographic modes or other encryption algorithms. Therefore, if a CMS implementation wishes to support ciphers in addition to Triple-DES or RC2, then additional key wrap algorithms need to be defined to support the additional ciphers.",
      "ja": "RFC 3217 [WRAP]はトリプルDESのキー暗号化キー[3DES]またはRC2 [RC2キー暗号化キーとRC2コンテンツ暗号化キーを暗号化するとのトリプルDES、コンテンツ暗号化キーを暗号化するために使用されるキーラップアルゴリズムを指定します]。キーラップアルゴリズムはCBCモード[MODES]を使用しています。これらのキーラップアルゴリズムがトリプルDESやRC2で使用するために検討されています。彼らは、他の暗号モードや他の暗号化アルゴリズムで使用するために検討されていません。 CMSの実装では、トリプルDESまたはRC2に加えて、暗号をサポートすることを希望する場合したがって、その後、追加のキーラップアルゴリズムが追加の暗号をサポートするために定義する必要があります。"
    },
    {
      "indent": 3,
      "text": "Implementers should be aware that cryptographic algorithms become weaker with time. As new cryptanalysis techniques are developed and computing performance improves, the work factor to break a particular cryptographic algorithm will reduce. Therefore, cryptographic algorithm implementations should be modular allowing new algorithms to be readily inserted. That is, implementers should be prepared to regularly update the set of algorithms in their implementations.",
      "ja": "実装者は、暗号化アルゴリズムは、時間とともに弱くなることに注意する必要があります。新しい暗号解読技術が開発され、コンピューティング性能が向上しているように、特定の暗号アルゴリズムを破る仕事率が低下します。したがって、暗号アルゴリズムの実装を容易に挿入するモジュラー可能新しいアルゴリズムであるべきです。それは、実装者が定期的に彼らの実装でアルゴリズムのセットを更新するために準備しなければならない、です。"
    },
    {
      "indent": 3,
      "text": "Users of the CMS, particularly those employing the CMS to support interactive applications, should be aware that RSA (PKCS #1 v1.5), as specified in RFC 2313 [PKCS#1], is vulnerable to adaptive chosen ciphertext attacks when applied for encryption purposes. Exploitation of this identified vulnerability, revealing the result of a particular RSA decryption, requires access to an oracle which will respond to a large number of ciphertexts (based on currently available results, hundreds of thousands or more), which are constructed adaptively in response to previously-received replies providing information on the successes or failures of attempted decryption operations. As a result, the attack appears significantly less feasible to perpetrate for store-and-forward S/MIME environments than for directly interactive protocols. Where the CMS constructs are applied as an intermediate encryption layer within an interactive request-response communications environment, exploitation could be more feasible.",
      "ja": "CMSのユーザは、特にCMSを用いたものは、RFC 2313で指定されるようにするために適用される場合RSA（PKCS＃1 V1.5）は、[PKCS＃1]、選択暗号文攻撃を適応するために脆弱であることに注意する必要があり、インタラクティブなアプリケーションをサポートするために暗号化の目的。この識別された脆弱性の悪用は、特定のRSA復号の結果明らかに、暗号文の多数に応答するOracleへのアクセス（現在利用可能な結果に基づいて、数千以上の数百）に応じて適応的に構成され、必要未遂の復号操作の成功または失敗に関する情報を提供する前に、受信した回答。その結果、攻撃が直接、対話型のプロトコルよりもストアアンドフォワードS / MIME環境のために犯すために大幅に少ない可能表示されます。 CMS構築物は、対話型要求応答通信環境内の中間の暗号化層として適用されている場合は、搾取は、より実現可能である可能性があります。"
    },
    {
      "indent": 3,
      "text": "An updated version of PKCS #1 has been published, PKCS #1 Version 2.0 [NEWPKCS#1]. This updated document supersedes RFC 2313. PKCS #1 Version 2.0 preserves support for the encryption padding format defined in PKCS #1 Version 1.5 [PKCS#1], and it also defines a new alternative. To resolve the adaptive chosen ciphertext vulnerability, the PKCS #1 Version 2.0 specifies and recommends use of Optimal Asymmetric Encryption Padding (OAEP) when RSA encryption is used to provide confidentiality. Designers of protocols and systems employing CMS for interactive environments should either consider usage of OAEP, or should ensure that information which could reveal the success or failure of attempted PKCS #1 Version 1.5 decryption operations is not provided. Support for OAEP will likely be added to a future version of the CMS algorithm specification.",
      "ja": "PKCS＃1の更新版公開されている、PKCS＃1バージョン2.0 [NEWPKCS＃1]。この更新された文書では、[1のPKCS＃]をPKCS＃1バージョン1.5で定義された暗号化パディングフォーマットのためのRFC 2313 PKCS＃1バージョン2.0ジャムのサポートを優先し、それはまた、新たな選択肢を定義します。適応的選択暗号文の脆弱性、PKCS＃1バージョン2.0指定を解決し、RSAの暗号化は機密性を提供するために使用されたときに最適な非対称暗号パディング（OAEP）の使用を推奨しています。インタラクティブな環境のためのCMSを利用したプロトコルやシステムの設計者は、OAEPの使用を考慮しなければならないのいずれか、または試行PKCS＃1バージョン1.5の復号操作の成功または失敗を明らかにする可能性があり、その情報が提供されていないことを確認する必要があります。 OAEPのサポートはおそらくCMSアルゴリズム仕様の将来のバージョンに追加されます。"
    },
    {
      "indent": 3,
      "text": "See RFC 3218 [MMA] for more information about thwarting the adaptive chosen ciphertext vulnerability in PKCS #1 Version 1.5 implementations.",
      "ja": "PKCS＃で1バージョン1.5の実装を適応的選択暗号文の脆弱性を阻止詳細については、RFC 3218 [MMA]を参照してください。"
    },
    {
      "indent": 0,
      "text": "10 Acknowledgments",
      "ja": "10の謝辞"
    },
    {
      "indent": 3,
      "text": "This document is the result of contributions from many professionals. I appreciate the hard work of all members of the IETF S/MIME Working Group. I extend a special thanks to Rich Ankney, Simon Blake-Wilson, Tim Dean, Steve Dusse, Carl Ellison, Peter Gutmann, Bob Jueneman, Stephen Henson, Paul Hoffman, Scott Hollenbeck, Don Johnson, Burt Kaliski, John Linn, John Pawling, Blake Ramsdell, Francois Rousseau, Jim Schaad, and Dave Solo for their efforts and support.",
      "ja": "この文書は、多くの専門家からの貢献の結果です。私は、IETF S / MIME作業部会のメンバー全員のハードワークに感謝します。私は、リッチAnkney、サイモン・ブレイク・ウィルソン、ティム・ディーン、スティーブDusse、カール・エリソン、ピーター・ガットマン、ボブJueneman、スティーブン・ヘンソン、ポール・ホフマン、スコットホレンベック、ドン・ジョンソン、バート・カリスキー、ジョン・リン、ジョンPawlingに特別な感謝を拡張します彼らの努力と支援のためのブレイクRamsdell、フランソワ・ルソー、ジムSchaad、とDaveソロ。"
    },
    {
      "indent": 0,
      "text": "11 Author Address",
      "ja": "11作者のアドレス"
    },
    {
      "indent": 3,
      "text": "Russell Housley RSA Laboratories 918 Spring Knoll Drive Herndon, VA 20170 EMail: rhousley@rsasecurity.com",
      "ja": "ラッセルHousleyのRSA Laboratories社918春小山Driveハーンドン、VA 20170 Eメール：rhousley@rsasecurity.com"
    },
    {
      "indent": 0,
      "text": "12. Full Copyright Statement",
      "section_title": true,
      "ja": "12.完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2002). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2002）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "了承"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}