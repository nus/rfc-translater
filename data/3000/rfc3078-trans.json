{
  "title": {
    "text": "RFC 3078 - Microsoft Point-To-Point Encryption (MPPE) Protocol",
    "ja": "RFC 3078 - Microsoft Point-to-Point暗号化（MPPE）プロトコル"
  },
  "number": 3078,
  "created_at": "2019-10-22 14:40:08.420134+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                            G. Pall\nRequest for Comments: 3078                         Microsoft Corporation\nCategory: Informational                                          G. Zorn\nUpdates: 2118                                              cisco Systems\n                                                              March 2001",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Microsoft Point-To-Point Encryption (MPPE) Protocol",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。それはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2001). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2001）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The Point-to-Point Protocol (PPP) provides a standard method for transporting multi-protocol datagrams over point-to-point links.",
      "ja": "ポイントツーポイントプロトコル（PPP）は、ポイントツーポイントリンク上でマルチプロトコルデータグラムを輸送するための標準的な方法を提供します。"
    },
    {
      "indent": 3,
      "text": "The PPP Compression Control Protocol provides a method to negotiate and utilize compression protocols over PPP encapsulated links.",
      "ja": "PPP圧縮制御プロトコルはPPPカプセル化されたリンクの上に圧縮プロトコルを交渉して利用する方法を提供します。"
    },
    {
      "indent": 3,
      "text": "This document describes the use of the Microsoft Point to Point Encryption (MPPE) to enhance the confidentiality of PPP-encapsulated packets.",
      "ja": "このドキュメントは、PPPカプセル化パケットの機密性を高めるために、暗号化（MPPE）をポイントするマイクロソフトポイントの使用を記載しています。"
    },
    {
      "indent": 0,
      "text": "Specification of Requirements",
      "ja": "要件の仕様"
    },
    {
      "indent": 3,
      "text": "In this document, the key words \"MAY\", \"MUST, \"MUST NOT\", \"optional\", \"recommended\", \"SHOULD\", and \"SHOULD NOT\" are to be interpreted as described in [5].",
      "ja": "この文書に記載されている、キーワード \"MAY\"、「MUST、 \"MUST NOT\"、 \"オプション\"、 \"推奨\"、 \"SHOULD\"、および \"the\" [5]で説明されるように解釈されるべきではありません。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "The Microsoft Point to Point Encryption scheme is a means of representing Point to Point Protocol (PPP) packets in an encrypted form.",
      "ja": "マイクロソフトポイントは、暗号化方式をポイントするために暗号化された形式でプロトコル（PPP）パケットをポイントツーポイントを表現する手段です。"
    },
    {
      "indent": 3,
      "text": "MPPE uses the RSA RC4 [3] algorithm to provide data confidentiality. The length of the session key to be used for initializing encryption tables can be negotiated. MPPE currently supports 40-bit and 128-bit session keys.",
      "ja": "MPPEは、データの機密性を提供するために、RSA RC4 [3]のアルゴリズムを使用しています。暗号化テーブルを初期化するために使用されるセッションキーの長さを交渉することができます。 MPPEは現在、40ビットおよび128ビットのセッションキーをサポートしています。"
    },
    {
      "indent": 3,
      "text": "MPPE session keys are changed frequently; the exact frequency depends upon the options negotiated, but may be every packet.",
      "ja": "MPPEセッションキーは頻繁に変更されています。正確な周波数は、交渉したオプションによって異なりますが、すべてのパケットであってもよいです。"
    },
    {
      "indent": 3,
      "text": "MPPE is negotiated within option 18 [4] in the Compression Control Protocol.",
      "ja": "MPPEは、圧縮制御プロトコルでのオプション18 [4]の中に交渉されています。"
    },
    {
      "indent": 0,
      "text": "2. Configuration Option Format",
      "section_title": true,
      "ja": "2.構成オプションのフォーマット"
    },
    {
      "indent": 3,
      "text": "Description",
      "ja": "説明"
    },
    {
      "indent": 6,
      "text": "The CCP Configuration Option negotiates the use of MPPE on the link. By default (i.e., if the negotiation of MPPE is not attempted), no encryption is used. If, however, MPPE negotiation is attempted and fails, the link SHOULD be terminated.",
      "ja": "CCP構成オプションは、リンク上のMPPEの使用を交渉します。 （MPPEのネゴシエーションが試行されていない場合、すなわち、）デフォルトでは、暗号化は使用されません。しかし、MPPE交渉を試みて失敗した場合、リンクが終了されるべき。"
    },
    {
      "indent": 3,
      "text": "A summary of the CCP Configuration Option format is shown below. The fields are transmitted from left to right.",
      "ja": "CCP設定オプション形式の詳細は、以下の通りです。フィールドは左から右に送信されます。"
    },
    {
      "indent": 6,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|      Type     |    Length     |        Supported Bits         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|        Supported Bits         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Type",
      "ja": "タイプ"
    },
    {
      "indent": 6,
      "text": "18",
      "ja": "１８"
    },
    {
      "indent": 3,
      "text": "Length",
      "ja": "長さ"
    },
    {
      "indent": 6,
      "text": "6",
      "ja": "６"
    },
    {
      "indent": 3,
      "text": "Supported Bits",
      "ja": "サポートされているビット"
    },
    {
      "indent": 6,
      "text": "This field is 4 octets, most significant octet first.",
      "ja": "このフィールドは、最初の4つのオクテットは、最上位オクテットです。"
    },
    {
      "indent": 6,
      "text": "   3                   2                   1\n 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|             |H|                               |M|S|L|D|     |C|\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The 'C' bit is used by MPPC [4] and is not discussed further in this memo. The 'D' bit is obsolete; although some older peers may attempt to negotiate this option, it SHOULD NOT be accepted. If the 'L' bit is set (corresponding to a value of 0x20 in the least significant octet), this indicates the desire of the sender to negotiate the use of 40-bit session keys. If the 'S' bit is set (corresponding to a value of 0x40 in the least significant octet), this indicates the desire of the sender to negotiate the use of 128-bit session keys. If the 'M' bit is set (corresponding to a value of 0x80 in the least significant octet), this indicates the desire of the sender to negotiate the use of 56-bit session keys. If the 'H' bit is set (corresponding to a value of 0x01 in the most significant octet), this indicates that the sender wishes to negotiate the use of stateless mode, in which the session key is changed after the transmission of each packet (see section 10, below). In the following discussion, the 'S', 'M' and 'L' bits are sometimes referred to collectively as \"encryption options\".",
      "ja": "「C」ビット[4] MPPCによって使用され、このメモでさらに議論されていません。 「D」ビットが時代遅れです。一部の古いピアがこのオプションを交渉しようとするかもしれないが、それは受け入れられない（SHOULD NOT）。 「L」ビット（最下位オクテットでの0x20の値に相当）に設定されている場合、これは40ビットのセッションキーの使用を交渉するために、送信者の欲求を示します。 「S」ビット（最下位オクテットで0x40の値に相当）に設定されている場合、これは、128ビットのセッションキーの使用を交渉するために、送信者の欲求を示します。 「M」ビット（最下位オクテットでは0x80の値に相当）に設定されている場合、これは56ビットのセッションキーの使用を交渉するために、送信者の欲求を示します。 「H」ビット（最も重要なオクテットでは0x01の値に相当）に設定されている場合、これは、（セッション鍵は、各パケットの送信後に変更されて、送信者がステートレスモードの使用を交渉することを望むことを示します）以下、セクション10を参照してください。以下の説明では、「S」、「M」及び「L」ビットは総称し、「暗号化オプション」と呼ばれます。"
    },
    {
      "indent": 3,
      "text": "All other bits are reserved and MUST be set to 0.",
      "ja": "他のすべてのビットは予約され、0に設定しなければなりません。"
    },
    {
      "indent": 0,
      "text": "2.1. Option Negotiation",
      "section_title": true,
      "ja": "2.1。オプションのネゴシエーション"
    },
    {
      "indent": 3,
      "text": "MPPE options are negotiated as described in [2]. In particular, the negotiation initiator SHOULD request all of the options it supports. The responder SHOULD NAK with a single encryption option (note that stateless mode may always be negotiated, independent of and in addition to an encryption option). If the responder supports more than one encryption option in the set requested by the initiator, the option selected SHOULD be the \"strongest\" option offered. Informally, the strength of the MPPE encryption options may be characterized as follows:",
      "ja": "[2]で説明されるようにMPPEオプションがネゴシエートされています。具体的には、交渉開始剤は、それがサポートするすべてのオプションを要求する必要があります。レスポンダは、単一の暗号化オプションとNAK（の独立した暗号化オプションに加えて、ステートレスモードは常に交渉される可能性があることに注意）する必要があります。レスポンダは、イニシエータによって要求されたセットの中に複数の暗号化オプションをサポートしている場合は、選択したオプションが提供され、「最強」のオプションであるべきです。次のように非公式に、MPPE暗号化オプションの強度を特徴付けることができます。"
    },
    {
      "indent": 6,
      "text": "STRONGEST 128-bit encryption ('S' bit set) 56-bit encryption ('M' bit set) 40-bit encryption ('L' bit set) WEAKEST",
      "ja": "最強の128ビット暗号化（「S」ビット・セット）56ビットの暗号化（「M」ビットセット）40ビットの暗号化（「L」ビット・セット）最も弱いです"
    },
    {
      "indent": 3,
      "text": "This characterization takes into account the generally accepted strength of the cipher.",
      "ja": "この特性は、アカウントに暗号の一般的に受け入れられた強さを取ります。"
    },
    {
      "indent": 3,
      "text": "The initiator SHOULD then either send another request containing the same option(s) as the responder's NAK or cancel the negotiation, dropping the connection.",
      "ja": "イニシエータは、どちらの応答者のNAKと同じオプション（複数可）を含む別の要求を送信したり、接続をドロップ、交渉を中止すべきです。"
    },
    {
      "indent": 0,
      "text": "3. MPPE Packets",
      "section_title": true,
      "ja": "3. MPPEパケット"
    },
    {
      "indent": 3,
      "text": "Before any MPPE packets are transmitted, PPP MUST reach the Network-Layer Protocol phase and the CCP Control Protocol MUST reach the Opened state.",
      "ja": "任意のMPPEパケットが送信される前に、PPPはネットワーク層プロトコルフェーズに達しなければならないとCCP制御プロトコルはOpened状態に達しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Exactly one MPPE datagram is encapsulated in the PPP Information field. The PPP Protocol field indicates type 0x00FD for all encrypted datagrams.",
      "ja": "正確に一つのMPPEデータグラムはPPPの情報分野でカプセル化されています。 PPPプロトコルフィールドはすべて暗号化されたデータグラムのための0x00FDを入力示しています。"
    },
    {
      "indent": 3,
      "text": "The maximum length of the MPPE datagram transmitted over a PPP link is the same as the maximum length of the Information field of a PPP encapsulated packet.",
      "ja": "PPPリンクを介して送信されるMPPEデータグラムの最大長は、PPPカプセル化されたパケットの情報フィールドの最大長さと同じです。"
    },
    {
      "indent": 3,
      "text": "Only packets with PPP Protocol numbers in the range 0x0021 to 0x00FA are encrypted. Other packets are not passed thru the MPPE processor and are sent with their original PPP Protocol numbers.",
      "ja": "0x00FAの範囲0x0021でPPPプロトコル番号を持つパケットだけが暗号化されています。その他のパケットはMPPEプロセッサに通していないと、元のPPPプロトコル番号が送信されます。"
    },
    {
      "indent": 6,
      "text": "Padding",
      "ja": "パディング"
    },
    {
      "indent": 9,
      "text": "It is recommended that padding not be used with MPPE. If the sender uses padding it MUST negotiate the Self-Describing-Padding Configuration option [10] during LCP phase and use self-describing pads.",
      "ja": "パディングはMPPEで使用されていないことをお勧めします。送信者がパディングを使用している場合には、LCPフェーズで自己記述-パディングの設定オプション[10]を交渉し、自己記述のパッドを使用しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Reliability and Sequencing",
      "ja": "信頼性とシーケンシング"
    },
    {
      "indent": 9,
      "text": "The MPPE scheme does not require a reliable link. Instead, it relies on a 12-bit coherency count in each packet to keep the encryption tables synchronized. If stateless mode has not been negotiated and the coherency count in the received packet does not match the expected count, the receiver MUST send a CCP Reset-Request packet to cause the resynchronization of the RC4 tables.",
      "ja": "MPPE方式は、信頼性の高いリンクを必要としません。代わりに、同期の暗号化テーブルを維持するために、各パケット内の12ビットの一貫性の数に依存しています。ステートレスモードが交渉されていないと、受信したパケットで一貫性のカウントが予想される数と一致しない場合、受信機は、RC4テーブルの再同期を引き起こすCCPリセット-Requestパケットを送らなければなりません。"
    },
    {
      "indent": 9,
      "text": "MPPE expects packets to be delivered in sequence.",
      "ja": "MPPEは、パケットが順番に配信されると予想しています。"
    },
    {
      "indent": 9,
      "text": "MPPE MAY be used over a reliable link, as described in \"PPP Reliable Transmission\" [6], but this typically just adds unnecessary overhead since only the coherency count is required.",
      "ja": "「PPP信頼できる送信」[6]で説明したようにMPPEは、信頼性の高いリンク上で使用することができるが、これは通常、ちょうどのみ一貫性カウントが必要とされているので、不必要なオーバーヘッドを追加します。"
    },
    {
      "indent": 6,
      "text": "Data Expansion",
      "ja": "データ拡張"
    },
    {
      "indent": 9,
      "text": "The MPPE scheme does not expand or compress data. The number of octets input to and output from the MPPE processor are the same.",
      "ja": "MPPE方式は、データを展開または圧縮されません。 MPPEプロセッサからオクテットへの入力及び出力の数は同じです。"
    },
    {
      "indent": 0,
      "text": "3.1. Packet Format",
      "section_title": true,
      "ja": "3.1。パケットフォーマット"
    },
    {
      "indent": 3,
      "text": "A summary of the MPPE packet format is shown below. The fields are transmitted from left to right.",
      "ja": "MPPEパケットフォーマットの概要は以下に示されています。フィールドは左から右に送信されます。"
    },
    {
      "indent": 6,
      "text": " 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|          PPP Protocol         |A|B|C|D|    Coherency Count    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|      Encrypted Data...\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "PPP Protocol",
      "ja": "PPPプロトコル"
    },
    {
      "indent": 9,
      "text": "The PPP Protocol field is described in the Point-to-Point Protocol Encapsulation [1].",
      "ja": "PPPプロトコルフィールドは、ポイントツーポイントプロトコルカプセル化[1]に記載されています。"
    },
    {
      "indent": 9,
      "text": "When MPPE is successfully negotiated by the PPP Compression Control Protocol, the value of this field is 0x00FD. This value MAY be compressed when Protocol-Field-Compression is negotiated.",
      "ja": "MPPEが正常にPPP圧縮制御プロトコルによって交渉されている場合、このフィールドの値は0x00FDです。プロトコルフィールド圧縮が交渉されている場合、この値は、圧縮することができます。"
    },
    {
      "indent": 6,
      "text": "Bit A",
      "ja": "ビットA"
    },
    {
      "indent": 9,
      "text": "This bit indicates that the encryption tables were initialized before this packet was generated. The receiver MUST re-initialize its tables with the current session key before decrypting this packet. This bit is referred to as the FLUSHED bit in this document. If the stateless option has been negotiated, this bit MUST be set on every encrypted packet. Note that MPPC and MPPE both recognize the FLUSHED bit; therefore, if the stateless option is negotiated, it applies to both MPPC and MPPE.",
      "ja": "このビットは、このパケットが生成される前に暗号化テーブルが初期化されたことを示しています。受信機はこのパケットを解読する前に、現在のセッションキーを使用してテーブルを再初期化する必要があります。このビットは、この文書のFLUSHEDビットと呼ばれています。ステートレスオプションが交渉されている場合、このビットは、すべて暗号化されたパケットに設定しなければなりません。 MPPCとMPPEの両方FLUSHEDビットを認識することに注意してください。ステートレスオプションが交渉されている場合ので、それはMPPCとMPPEの両方に適用されます。"
    },
    {
      "indent": 6,
      "text": "Bit B",
      "ja": "ビットB"
    },
    {
      "indent": 9,
      "text": "This bit does not have any significance in MPPE.",
      "ja": "このビットはMPPE内の任意の意味を持っていません。"
    },
    {
      "indent": 6,
      "text": "Bit C",
      "ja": "ビットC"
    },
    {
      "indent": 9,
      "text": "This bit does not have any significance in MPPE.",
      "ja": "このビットはMPPE内の任意の意味を持っていません。"
    },
    {
      "indent": 6,
      "text": "Bit D",
      "ja": "ビットD"
    },
    {
      "indent": 9,
      "text": "This bit set to 1 indicates that the packet is encrypted. This bit set to 0 means that this packet is not encrypted.",
      "ja": "1に設定され、このビットは、パケットが暗号化されていることを示しています。 0に設定され、このビットは、このパケットが暗号化されていないことを意味します。"
    },
    {
      "indent": 6,
      "text": "Coherency Count",
      "ja": "コヒーレンシカウント"
    },
    {
      "indent": 9,
      "text": "The coherency count is used to assure that the packets are sent in proper order and that no packet has been dropped. It is a monotonically increasing counter which incremented by 1 for each packet sent. When the counter reaches 4095 (0x0FFF), it is reset to 0.",
      "ja": "一貫性カウントは、パケットが適切な順序で送信され、何のパケットが廃棄されていないことをされていることを確実にするために使用されます。これは、送信されたパケットごとに1ずつ増加単調に増加するカウンタです。カウンタが（0x0FFF）4095に達すると、0にリセットされます。"
    },
    {
      "indent": 6,
      "text": "Encrypted Data",
      "ja": "暗号化データ"
    },
    {
      "indent": 9,
      "text": "The encrypted data begins with the protocol field. For example, in case of an IP packet (0x0021 followed by an IP header), the MPPE processor will first encrypt the protocol field and then encrypt the IP header.",
      "ja": "暗号化されたデータは、プロトコル・フィールドで始まります。例えば、IPパケット（IPヘッダに続く0x0021）の場合には、MPPEプロセッサは、第1のプロトコル・フィールドを暗号化し、IPヘッダを暗号化します。"
    },
    {
      "indent": 9,
      "text": "If the packet contains header compression, the MPPE processor is applied AFTER header compression is performed and MUST be applied to the compressed header as well. For example, if a packet contained the protocol type 0x002D (for a compressed TCP/IP header), the MPPE processor would first encrypt 0x002D and then it would encrypt the compressed Van-Jacobsen TCP/IP header.",
      "ja": "パケットは、ヘッダ圧縮が含まれている場合、ヘッダ圧縮が行われ、同様に圧縮されたヘッダーに適用されなければならない後、MPPEプロセッサが適用されます。パケットが（圧縮されたTCP / IPヘッダの）プロトコルタイプ0x002Dが含まれている場合、例えば、MPPEプロセッサは最初0x002Dを暗号化するであろうし、それは、圧縮されたVAN-ヤコブセンTCP / IPヘッダを暗号化することになります。"
    },
    {
      "indent": 6,
      "text": "Implementation Note",
      "ja": "実装上の注意"
    },
    {
      "indent": 9,
      "text": "If both MPPE and MPPC are negotiated on the same link, the MPPE processor MUST be invoked after the MPPC processor by the sender and the MPPE processor MUST be invoked before the MPPC processor by the receiver.",
      "ja": "MPPEとMPPCの両方が同じリンク上でネゴシエートされる場合、MPPEプロセッサは、受信機によってMPPCプロセッサ前に呼び出されなければならない送信者とMPPEプロセッサによってMPPCプロセッサの後に呼び出されなければなりません。"
    },
    {
      "indent": 0,
      "text": "4. Initial Session Keys",
      "section_title": true,
      "ja": "4.初期セッション鍵"
    },
    {
      "indent": 3,
      "text": "In the current implementation, initial session keys are derived from peer credentials; however, other derivation methods are possible. For example, some authentication methods (such as Kerberos [8] and TLS [9]) produce session keys as side effects of authentication; these keys may be used by MPPE in the future. For this reason, the techniques used to derive initial MPPE session keys are described in separate documents.",
      "ja": "現在の実装では、最初のセッション鍵は、ピア認証情報から導出されます。しかし、他の導出方法が可能です。例えば、いくつかの認証方法（Kerberosなど[8]およびTLS [9]）認証の副作用としてセッション鍵を生成します。これらのキーは、将来的にはMPPEで使用することができます。このため、初期MPPEセッションキーを導出するために使用される技術は、別の文献に記載されています。"
    },
    {
      "indent": 0,
      "text": "5. Initializing RC4 Using a Session Key",
      "section_title": true,
      "ja": "5.セッションキーを使用したRC4の初期化"
    },
    {
      "indent": 3,
      "text": "Once an initial session key has been derived, the RC4 context is initialized as follows:",
      "ja": "最初のセッション鍵が導出されたら、次のように、RC4コンテキストが初期化されます。"
    },
    {
      "indent": 6,
      "text": "rc4_key(RC4Key, Length_Of_Key, Initial_Session_Key)",
      "ja": "rc4_key（RC4Key、Length_Of_Key、Initial_Session_Key）"
    },
    {
      "indent": 0,
      "text": "6. Encrypting Data",
      "section_title": true,
      "ja": "6.データ暗号化"
    },
    {
      "indent": 3,
      "text": "Once initialized, data is encrypted using the following function and transmitted with the CCP and MPPE headers.",
      "ja": "初期化されると、データは次の関数を使用して暗号化し、CCPとMPPEヘッダーで送信されます。"
    },
    {
      "indent": 6,
      "text": "EncryptedData = rc4(RC4Key, Length_Of_Data, Data)",
      "ja": "EncryptedData = RC4（RC4Key、Length_Of_Data、データ）"
    },
    {
      "indent": 0,
      "text": "7. Changing Keys",
      "section_title": true,
      "ja": "7.変更キー"
    },
    {
      "indent": 0,
      "text": "7.1. Stateless Mode Key Changes",
      "section_title": true,
      "ja": "7.1。ステートレスモードキーの変更"
    },
    {
      "indent": 3,
      "text": "If stateless encryption has been negotiated, the session key changes every time the coherency count changes; i.e., on every packet. In stateless mode, the sender MUST change its key before encrypting and transmitting each packet and the receiver MUST change its key after receiving, but before decrypting, each packet (see \"Synchronization\", below).",
      "ja": "ステートレス暗号化が交渉されている場合は、セッションキーは、コヒーレンシカウント変更するたびに変更します。すなわち、すべてのパケットに。ステートレスモードでは、送信者は、各パケットを暗号化して送信する前にそのキーを変更する必要があり、受信機が受信した後、そのキーを変更する必要がありますが、復号化の前に、各パケットは（以下、「同期」を参照してください）。"
    },
    {
      "indent": 0,
      "text": "7.2. Stateful Mode Key Changes",
      "section_title": true,
      "ja": "7.2。ステートフルモードキーの変更"
    },
    {
      "indent": 3,
      "text": "If stateful encryption has been negotiated, the sender MUST change its key before encrypting and transmitting any packet in which the low order octet of the coherency count equals 0xFF (the \"flag\" packet), and the receiver MUST change its key after receiving, but before decrypting, a \"flag\" packet (see \"Synchronization\", below).",
      "ja": "ステートフルな暗号化がネゴシエートされている場合は、送信者は、コヒーレンシ・カウントの下位のオクテットが0xFF（「旗」パケット）に等しく、及び受信機が受信した後、そのキーを変更する必要がありますがここですべてのパケットを暗号化して送信する前にそのキーを変更する必要があります復号化の前に、「フラグ」パケット（以下、「同期」を参照）。"
    },
    {
      "indent": 0,
      "text": "7.3. The MPPE Key Change Algorithm",
      "section_title": true,
      "ja": "7.3。 MPPEキーの変更アルゴリズム"
    },
    {
      "indent": 3,
      "text": "The following method is used to change keys:",
      "ja": "以下の方法は、キーを変更するために使用されます。"
    },
    {
      "indent": 6,
      "text": "/*\n * SessionKeyLength is 8 for 40-bit keys, 16 for 128-bit keys.\n *\n * SessionKey is the same as StartKey in the first call for\n * a given session.\n */",
      "raw": true
    },
    {
      "indent": 6,
      "text": "void GetNewKeyFromSHA( IN unsigned char *StartKey, IN unsigned char *SessionKey, IN unsigned long SessionKeyLength OUT unsigned char *InterimKey ) { unsigned char Digest[20];",
      "ja": "無効GetNewKeyFromSHA（unsigned long型SessionKeyLength OUT unsigned char型IN unsigned charのIN * StartKey、unsigned char型IN * SESSIONKEY、* InterimKey）{unsigned charのダイジェスト[20]。"
    },
    {
      "indent": 9,
      "text": "ZeroMemory(Digest, 20);",
      "ja": "ZeroMemory（ダイジェスト、20）。"
    },
    {
      "indent": 9,
      "text": "/*\n * SHAInit(), SHAUpdate() and SHAFinal()\n * are an implementation of the Secure\n * Hash Algorithm [7]\n */",
      "raw": true
    },
    {
      "indent": 9,
      "text": "SHAInit(Context);\nSHAUpdate(Context, StartKey, SessionKeyLength);\nSHAUpdate(Context, SHApad1, 40);\nSHAUpdate(Context, SessionKey, SessionKeyLength);\nSHAUpdate(Context, SHApad2, 40);\nSHAFinal(Context, Digest);",
      "raw": true
    },
    {
      "indent": 6,
      "text": " MoveMemory(InterimKey, Digest, SessionKeyLength); }",
      "ja": "MoveMemory（InterimKey、ダイジェスト、SessionKeyLength）。 }"
    },
    {
      "indent": 3,
      "text": "The RC4 tables are re-initialized using the newly created interim key:",
      "ja": "RC4テーブルは、新しく作成された暫定鍵を使用して再初期化されています。"
    },
    {
      "indent": 6,
      "text": "rc4_key(RC4Key, Length_Of_Key, InterimKey)",
      "ja": "rc4_key（RC4Key、Length_Of_Key、InterimKey）"
    },
    {
      "indent": 3,
      "text": "Finally, the interim key is encrypted using the new tables to produce a new session key:",
      "ja": "最後に、中間鍵は、新たなセッションキーを生成するために新しいテーブルを使用して暗号化されています。"
    },
    {
      "indent": 6,
      "text": "SessionKey = rc4(RC4Key, Length_Of_Key, InterimKey)",
      "ja": "SESSIONKEY = RC4（RC4Key、Length_Of_Key、InterimKey）"
    },
    {
      "indent": 3,
      "text": "For 40-bit session keys the most significant three octets of the new session key are now set to 0xD1, 0x26 and 0x9E respectively; for 56- bit keys, the most significant octet is set to 0xD1.",
      "ja": "40ビットのセッションキーのための新たなセッションキーの最も重要な3つのオクテットは、現在、それぞれ0xD1、0x26と0x9Eに設定されています。 、56ビットキーのために、最も重要なオクテットは0xD1に設定されています。"
    },
    {
      "indent": 3,
      "text": "Finally, the RC4 tables are re-initialized using the new session key:",
      "ja": "最後に、RC4テーブルには、新しいセッションキーを使用して再初期化されています。"
    },
    {
      "indent": 6,
      "text": "rc4_key(RC4Key, Length_Of_Key, SessionKey)",
      "ja": "rc4_key（RC4Key、Length_Of_Key、SESSIONKEY）"
    },
    {
      "indent": 0,
      "text": "8. Synchronization",
      "section_title": true,
      "ja": "8.同期"
    },
    {
      "indent": 3,
      "text": "Packets may be lost during transfer. The following sections describe synchronization for both the stateless and stateful cases.",
      "ja": "パケットは転送中に失われる可能性があります。次のセクションでは、両方のステートレスとステートフル例の同期について説明します。"
    },
    {
      "indent": 0,
      "text": "8.1. Stateless Synchronization",
      "section_title": true,
      "ja": "8.1。ステートレス同期"
    },
    {
      "indent": 3,
      "text": "If stateless encryption has been negotiated and the coherency count in the received packet (C1) is greater than the coherency count in the last packet previously received (C2), the receiver MUST perform N = C1 - C2 key changes before decrypting the packet, in order to ensure that its session key is synchronized with the session key of the sender. Normally, the value of N will be 1; however, if intervening packets have been lost, N may be greater than 1. For example, if C1 = 5 and C2 = 02 then N = 3 key changes are required.",
      "ja": "ステートレス暗号化がネゴシエートされており、受信したパケット（C1）でコヒーレンシカウントが最後のパケットで一貫カウントよりも大きい場合に、以前に、受信機が実行しなければならない（C2）を受信N = C1  -  C2で、パケットを解読する前にキー変更そのセッション鍵は、送信者のセッションキーと同期していることを確実にするため。通常、Nの値が1になります。介在するパケットが失われた場合はC1 = 5、C2 = 02次に、N = 3つのキーの変更が必要な場合は、Nは、例えば、1より大きいとすることができます。"
    },
    {
      "indent": 3,
      "text": "Since the FLUSHED bit is set on every packet if stateless encryption was negotiated, the transmission of CCP Reset-Request packets is not required for synchronization.",
      "ja": "ステートレス暗号化が交渉された場合FLUSHEDビットはパケットごとに設定されているので、CCPリセット-Requestパケットの送信は、同期のために必要ありません。"
    },
    {
      "indent": 0,
      "text": "8.2. Stateful Synchronization",
      "section_title": true,
      "ja": "8.2。ステートフル同期"
    },
    {
      "indent": 3,
      "text": "If stateful encryption has been negotiated, the sender MUST change its key before encrypting and transmitting any packet in which the low order octet of the coherency count equals 0xFF (the \"flag\" packet), and the receiver MUST change its key after receiving, but before decrypting, a \"flag\" packet. However, the \"flag\" packet may be lost. If this happens, the low order octet of the coherency count in the received packet will be less than that in the last packet previously received. In this case, the receiver MUST perform a key change before decrypting the newly received packet, (since the sender will have changed its key before transmitting the packet), then send a CCP Reset-Request packet (see below). It is possible that 256 or more consecutive packets could be lost; the receiver SHOULD detect this condition and perform the number of key changes necessary to resynchronize with the sender.",
      "ja": "ステートフルな暗号化がネゴシエートされている場合は、送信者は、コヒーレンシ・カウントの下位のオクテットが0xFF（「旗」パケット）に等しく、及び受信機が受信した後、そのキーを変更する必要がありますがここですべてのパケットを暗号化して送信する前にそのキーを変更する必要があります復号化の前に、「フラグ」パケット。しかし、「フラグ」パケットが失われる可能性があります。この問題が発生した場合、受信したパケットにおける一貫性・カウントの下位のオクテットは、以前に受信した最後のパケットよりも少なくなります。この場合、受信機は、（下記参照）CCPリセット要求パケットを送信し、次いで、（送信側がパケットを送信する前に、そのキーを変更しているので）、新たに受信したパケットを復号化する前に、キー変更を実行しなければなりません。 256以上の連続したパケットが失われる可能性があります。受信機は、この状態を検出し、送信側と再同期するために必要な鍵の変更の数を実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "If packet loss is detected while using stateful encryption, the receiver MUST drop the packet and send a CCP Reset-Request packet without data. After transmitting the CCP Reset-Request packet, the receiver SHOULD silently discard all packets until a packet is received with the FLUSHED bit set. On receiving a packet with the FLUSHED bit set, the receiver MUST set its coherency count to the one received in that packet and re-initialize its RC4 tables using the current session key:",
      "ja": "ステートフル暗号化を使用している間、パケットロスが検出された場合、受信機は、パケットをドロップし、データなしCCPリセット要求パケットを送信しなければなりません。パケットがフラッシュビットセットで受信されるまで、CCPリセット要求パケットを送信した後、受信機は静かにすべてのパケットを破棄すべきです。 FLUSHEDビットセットでパケットを受信すると、受信機は、そのパケット内の受信した1つに、そのコヒーレンシ・カウントを設定しなければなりません、そして、現在のセッション鍵を使用して、RC4テーブルを再初期化します。"
    },
    {
      "indent": 6,
      "text": "rc4_key(RC4Key, Length_Of_Key, SessionKey)",
      "ja": "rc4_key（RC4Key、Length_Of_Key、SESSIONKEY）"
    },
    {
      "indent": 3,
      "text": "When the sender receives a CCP Reset-Request packet, it MUST re-initialize its own RC4 tables using the same method and set the FLUSHED bit in the next packet sent. Thus synchronization is achieved without a CCP Reset-Ack packet.",
      "ja": "送信者がCCPリセット要求パケットを受信すると、同じ方法を用いて、自身のRC4テーブルを再初期化して送信された次のパケット中の追い出されたビットを設定しなければなりません。したがって同期はCCPリセット-Ackパケットなしに達成されます。"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Because of the way that the RC4 tables are reinitialized during stateful synchronization, it is possible that two packets may be encrypted using the same key. For this reason, the stateful mode SHOULD NOT be used in lossy network environments (e.g., layer two tunnels on the Internet).",
      "ja": "そのためRC4テーブルがステートフル同期中に再初期化されている方法で、2つのパケットが同じキーを使用して暗号化される可能性があります。この理由のために、ステートフルモードは非可逆ネットワーク環境（インターネット上の例えば、2つのトンネル層）で使用すべきではありません。"
    },
    {
      "indent": 3,
      "text": "Since the MPPE negotiation is not integrity protected, an active attacker could alter the strength of the keys used by modifying the Supported Bits field of the CCP Configuration Option packet. The effects of this attack can be minimized through appropriate peer configuration, however.",
      "ja": "MPPE交渉が完全性保護されていないので、アクティブな攻撃者は、CCP設定オプションパケットのサポートされているビットフィールドを変更することで使用されるキーの強さを変えることができます。この攻撃の影響は、しかし、適切なピア設定によって最小限に抑えることができます。"
    },
    {
      "indent": 3,
      "text": "Peers MUST NOT transmit user data until the MPPE negotiation is complete.",
      "ja": "MPPEのネゴシエーションが完了するまで、ピアは、ユーザデータを送信してはなりません。"
    },
    {
      "indent": 3,
      "text": "It is possible that an active attacker could modify the coherency count of a packet, causing the peers to lose synchronization.",
      "ja": "アクティブな攻撃者は、ピアが同期を失うことを引き起こして、パケットの一貫性の数を変更する可能性があります。"
    },
    {
      "indent": 3,
      "text": "An active denial-of-service attack could be mounted by methodically inverting the value of the 'D' bit in the MPPE packet header.",
      "ja": "アクティブサービス拒否攻撃は、系統的MPPEパケットヘッダの「D」ビットの値を反転させて取り付けることができます。"
    },
    {
      "indent": 0,
      "text": "10. References",
      "section_title": true,
      "ja": "10.参考文献"
    },
    {
      "indent": 3,
      "text": "[1] Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\", STD 51, RFC 1661, July 1994.",
      "ja": "[1]シンプソン、W.、エディタ、 \"ポイントツーポイントプロトコル（PPP）\"、STD 51、RFC 1661、1994年7月。"
    },
    {
      "indent": 3,
      "text": "[2] Rand, D., \"The PPP Compression Control Protocol (CCP)\", RFC 1962, June 1996.",
      "ja": "[2]ランド、D.、 \"PPP圧縮制御プロトコル（CCP）\"、RFC 1962、1996年6月。"
    },
    {
      "indent": 3,
      "text": "[3] RC4 is a proprietary encryption algorithm available under license from RSA Data Security Inc. For licensing information, contact:",
      "ja": "[3] RC4は情報、接触のライセンスについては、RSAデータセキュリティ社からライセンスの下で利用可能な独自の暗号化アルゴリズムは次のとおりです。"
    },
    {
      "indent": 18,
      "text": "RSA Data Security, Inc.\n100 Marine Parkway\nRedwood City, CA 94065-1031",
      "raw": true
    },
    {
      "indent": 3,
      "text": "[4] Pall, G., \"Microsoft Point-to-Point Compression (MPPC) Protocol\", RFC 2118, March 1997.",
      "ja": "[4]ポール、G.、 \"マイクロソフトポイントツーポイント圧縮（MPPC）プロトコル\"、RFC 2118、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[5] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[5]ブラドナーのは、S.は、BCP 14、RFC 2119、1997年3月の \"RFCsにおける使用のためのレベルを示すために\"。"
    },
    {
      "indent": 3,
      "text": "[6] Rand, D., \"PPP Reliable Transmission\", RFC 1663, July 1994.",
      "ja": "[6]ランド、D.、 \"PPP信頼性の高い伝送\"、RFC 1663、1994年7月。"
    },
    {
      "indent": 3,
      "text": "[7] \"Secure Hash Standard\", Federal Information Processing Standards Publication 180-1, National Institute of Standards and Technology, April 1995.",
      "ja": "[7]、連邦情報処理規格180-1公報、米国国立標準技術研究所、1995年4月「ハッシュ標準セキュア」。"
    },
    {
      "indent": 3,
      "text": "[8] Kohl, J. and C. Neuman \"The Kerberos Network Authentication System (V5)\", RFC 1510, September 1993.",
      "ja": "[8]コールズ、J.及びC.ノイマン \"ケルベロスネットワーク認証システム（V5）\"、RFC 1510、1993年9月。"
    },
    {
      "indent": 3,
      "text": "[9] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC 2246, January 1999.",
      "ja": "[9]ダークス、T.とC.アレン、 \"TLSプロトコルバージョン1.0\"、RFC 2246、1999年1月。"
    },
    {
      "indent": 3,
      "text": "[10] Simpson, W., Editor, \"PPP LCP Extensions\", RFC 1570, January 1994.",
      "ja": "[10]シンプソン、W.、エディタ、 \"PPP LCP拡張機能\"、RFC 1570、1994年1月。"
    },
    {
      "indent": 0,
      "text": "11. Acknowledgements",
      "section_title": true,
      "ja": "11.謝辞"
    },
    {
      "indent": 3,
      "text": "Anthony Bell, Richard B. Ward, Terence Spies and Thomas Dimitri, all of Microsoft Corporation, significantly contributed to the design and development of MPPE.",
      "ja": "アンソニー・ベル、リチャード・B.ウォード、テレンスのスパイとトーマス・ディミトリ、Microsoft Corporationの全ては、大幅MPPEの設計と開発に貢献しました。"
    },
    {
      "indent": 3,
      "text": "Additional thanks to Robert Friend, Joe Davies, Jody Terrill, Archie Cobbs, Mark Deuser, and Jeff Haag, for useful feedback.",
      "ja": "有用なフィードバックのためのロバート・フレンド、ジョー・デイヴィス、ジョディ・テリル、アーチーCobbs、マーク・Deuser、そしてジェフ・ハーグへの追加のおかげで、。"
    },
    {
      "indent": 0,
      "text": "12. Authors' Addresses",
      "section_title": true,
      "ja": "12.著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Questions about this memo can be directed to:",
      "ja": "このメモに関する質問に向けることができます。"
    },
    {
      "indent": 3,
      "text": "Gurdeep Singh Pall Microsoft Corporation One Microsoft Way Redmond, Washington 98052 USA",
      "ja": "ガーディープ・シンポールマイクロソフト社1つのマイクロソフト道、レッドモンド、ワシントン98052 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425 882 8080 Fax: +1 425 936 7329 EMail: gurdeep@microsoft.com",
      "ja": "電話：+1 425 882 8080ファックス：+1 425 936 7329 Eメール：gurdeep@microsoft.com"
    },
    {
      "indent": 3,
      "text": "Glen Zorn cisco Systems 500 108th Avenue N.E. Suite 500 Bellevue, Washington 98004 USA",
      "ja": "グレンツォルンシスコシステムズ500第108アベニューN.E.スイート500ベルビュー、ワシントン98004 USA"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425 438 8218 Fax: +1 425 438 1848 EMail: gwz@cisco.com",
      "ja": "電話：+1 425 438 8218ファックス：+1 425 438 1848 Eメール：gwz@cisco.com"
    },
    {
      "indent": 0,
      "text": "13. Full Copyright Statement",
      "section_title": true,
      "ja": "13.完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2001). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2001）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "了承"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}