{
  "title": {
    "text": "RFC 2951 - TELNET Authentication Using KEA and SKIPJACK",
    "ja": "RFC 2951 - KEAとSKIPJACKを使用するTELNET認証"
  },
  "number": 2951,
  "created_at": "2019-11-01 15:35:38.727621+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         R. Housley\nRequest for Comments: 2951                                    T. Horting\nCategory: Informational                                           P. Yee\n                                                                  SPYRUS\n                                                          September 2000",
      "raw": true
    },
    {
      "indent": 14,
      "text": "TELNET Authentication Using KEA and SKIPJACK",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。それはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2000）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document defines a method to authenticate TELNET using the Key Exchange Algorithm (KEA), and encryption of the TELNET stream using SKIPJACK. Two encryption modes are specified; one provides data integrity and the other does not. The method relies on the TELNET Authentication Option.",
      "ja": "この文書では、鍵交換アルゴリズム（KEA）、およびSKIPJACKを使用してTELNETストリームの暗号化を使用してTELNETを認証する方法を定義します。 2つの暗号化モードが指定されています。 1は、データの整合性を提供し、他にはありません。この方法は、TELNET認証オプションに依存しています。"
    },
    {
      "indent": 0,
      "text": "1. Command Names and Codes",
      "section_title": true,
      "ja": "1.コマンド名とコード"
    },
    {
      "indent": 3,
      "text": "AUTHENTICATION 37",
      "ja": "認証37"
    },
    {
      "indent": 5,
      "text": "Authentication Commands:",
      "ja": "認証コマンド："
    },
    {
      "indent": 7,
      "text": "IS 0 SEND 1 REPLY 2 NAME 3",
      "ja": "0 SEND 1 REPLY 2 NAME 3"
    },
    {
      "indent": 5,
      "text": "Authentication Types:",
      "ja": "認証タイプ："
    },
    {
      "indent": 7,
      "text": "KEA_SJ 12 KEA_SJ_INTEG 13",
      "ja": "KEA_SJ 12 KEA_SJ_INTEG 13"
    },
    {
      "indent": 5,
      "text": "Modifiers:",
      "ja": "修飾子："
    },
    {
      "indent": 7,
      "text": "AUTH_WHO_MASK 1 AUTH_CLIENT_TO_SERVER 0 AUTH_SERVER_TO CLIENT 1",
      "ja": "AUTH_WHO_MASK 1 AUTH_CLIENT_TO_SERVER 0 AUTH_SERVER_TOクライアント1"
    },
    {
      "indent": 7,
      "text": "AUTH_HOW_MASK 2 AUTH_HOW_ONE_WAY 0 AUTH_HOW_MUTUAL 2",
      "ja": "AUTH_HOW_MASK 2 AUTH_HOW_ONE_WAY 0 AUTH_HOW_MUTUAL 2"
    },
    {
      "indent": 7,
      "text": "ENCRYPT_MASK 20 ENCRYPT_OFF 0 ENCRYPT_USING_TELOPT 4 ENCRYPT_AFTER_EXCHANGE 16 ENCRYPT_RESERVED 20",
      "ja": "ENCRYPT_MASK 20 ENCRYPT_OFF 0 ENCRYPT_USING_TELOPT 4 ENCRYPT_AFTER_EXCHANGE 16 ENCRYPT_RESERVED 20"
    },
    {
      "indent": 7,
      "text": "INI_CRED_FWD_MASK 8 INI_CRED_FWD_OFF 0 INI_CRED_FWD_ON 8",
      "ja": "INI_CRED_FWD_MASK 8 INI_CRED_FWD_OFF 0 INI_CRED_FWD_ON 8"
    },
    {
      "indent": 5,
      "text": "Sub-option Commands:",
      "ja": "サブオプションのコマンド："
    },
    {
      "indent": 7,
      "text": "KEA_CERTA_RA 1 KEA_CERTB_RB_IVB_NONCEB 2 KEA_IVA_RESPONSEB_NONCEA 3 KEA_RESPONSEA 4",
      "ja": "KEA_CERTA_RA 1 KEA_CERTB_RB_IVB_NONCEB KEA_IVA_RESPONSEB_NONCEA 2 3 4 KEA_RESPONSEA"
    },
    {
      "indent": 0,
      "text": "2. TELNET Security Extensions",
      "section_title": true,
      "ja": "2. TELNETセキュリティ拡張機能"
    },
    {
      "indent": 3,
      "text": "TELNET, as a protocol, has no concept of security. Without negotiated options, it merely passes characters back and forth between the NVTs represented by the two TELNET processes. In its most common usage as a protocol for remote terminal access (TCP port 23), TELNET normally connects to a server that requires user-level authentication through a user name and password in the clear. The server does not authenticate itself to the user.",
      "ja": "TELNETは、プロトコルとして、セキュリティの概念がありません。交渉されたオプションがなければ、それは単に2つのTELNETプロセスによって表されるNVTsの間で前後に文字を渡します。リモート端末アクセス（TCPポート23）のためのプロトコルとして最も一般的な使用法では、TELNETは通常、明確にユーザー名とパスワードによるユーザレベルの認証が必要なサーバーに接続します。サーバーは、ユーザーに自分自身を認証しません。"
    },
    {
      "indent": 3,
      "text": "The TELNET Authentication Option provides for:",
      "ja": "TELNET認証オプションを提供します："
    },
    {
      "indent": 5,
      "text": "*  User authentication -- replacing or augmenting the normal host\n   password mechanism;\n*  Server authentication -- normally done in conjunction with user\n   authentication;\n*  Session parameter negotiation -- in particular, encryption key\n   and attributes;\n*  Session protection -- primarily encryption of the data and\n   embedded command stream, but the encryption algorithm may also\n   provide data integrity.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "In order to support these security services, the two TELNET entities must first negotiate their willingness to support the TELNET Authentication Option. Upon agreeing to support this option, the parties are then able to perform sub-option negotiations to determine the authentication protocol to be used, and possibly the remote user name to be used for authorization checking. Encryption is negotiated along with the type of the authentication.",
      "ja": "これらのセキュリティサービスをサポートするために、2つのTELNET実体は、最初のTELNET認証オプションをサポートする意欲を交渉しなければなりません。このオプションをサポートすることに同意したら、その後、締約国は、使用する認証プロトコルを決定するサブオプション交渉、そしておそらく許可検査に使用するリモートユーザ名を実行することができます。暗号化は、認証のタイプと一緒に交渉しています。"
    },
    {
      "indent": 3,
      "text": "Authentication and parameter negotiation occur within an unbounded series of exchanges. The server proposes a preference-ordered list of authentication types (mechanisms) that it supports. In addition to listing the mechanisms it supports, the server qualifies each mechanism with a modifier that specifies whether encryption of data is desired. The client selects one mechanism from the list and responds to the server indicating its choice and the first set of authentication data needed for the selected authentication type. The client may ignore a request to encrypt data and so indicate, but the server may also terminate the connection if the client refuses encryption. The server and the client then proceed through whatever number of iterations is required to arrive at the requested authentication.",
      "ja": "認証とパラメータのネゴシエーションは、取引所の無限のシリーズ内で発生します。サーバはそれがサポートする認証タイプ（メカニズム）の優先度順のリストを提案しています。それがサポートするメカニズムをリストに加えて、サーバは、データの暗号化が必要であるかどうかを指定する修飾子を持つ各機構を修飾します。クライアントはリストから1つのメカニズムを選択し、その選択と選択した認証タイプのために必要な認証データの最初のセットを示すサーバーに応答します。クライアントは、データを暗号化し、その旨の要求を無視するかもしれませんが、クライアントが暗号化を拒否した場合、サーバーは、接続を終了させることができます。サーバとクライアントは、反復回数が要求された認証に到着するために必要なものは何でもを進めます。"
    },
    {
      "indent": 3,
      "text": "Encryption is started immediately after the Authentication Option is completed.",
      "ja": "認証オプションが完了した後に暗号化がすぐに開始されます。"
    },
    {
      "indent": 0,
      "text": "3. Use of Key Exchange Algorithm (KEA)",
      "section_title": true,
      "ja": "鍵交換アルゴリズムの3.（KEA）"
    },
    {
      "indent": 3,
      "text": "This paper specifies the method in which KEA is used to achieve TELNET Authentication. KEA (in conjunction with SKIPJACK) [4] provides authentication and confidentiality. Integrity may also be provided.",
      "ja": "本論文では、KEAはTELNET認証を達成するために使用される方法を指定します。 （SKIPJACKと共に）KEA [4]認証および機密性を提供します。整合性を提供することもできます。"
    },
    {
      "indent": 3,
      "text": "TELNET entities may use KEA to provide mutual authentication and support for the setup of data encryption keys. A simple token format and set of exchanges delivers these services.",
      "ja": "TELNETエンティティは、データ暗号化キーの設定のための相互認証とサポートを提供するためにKEAを使用することができます。交換の簡単なトークン形式とのセットは、これらのサービスを提供しています。"
    },
    {
      "indent": 3,
      "text": "NonceA and NonceB used in this exchange are 64-bit bit strings. The client generates NonceA, and the server generates NonceB. The nonce value is selected randomly. The nonce is sent in a big endian form. The encryption of the nonce will be done with the same mechanism that the session will use, detailed in the next section.",
      "ja": "この交換で使用NonceAとNonceBは、64ビットのビット列です。クライアントはNonceAを生成し、サーバがNonceBを生成します。ノンス値がランダムに選択されます。ナンスは、ビッグエンディアン形式で送信されます。ナンスの暗号化は、次のセクションで詳述したセッションが使用するのと同じメカニズムで行われます。"
    },
    {
      "indent": 3,
      "text": "Ra and Rb used in this exchange are 1024 bit strings and are defined by the KEA Algorithm [4].",
      "ja": "この交換で使用さRaおよびRbは、1024ビット列であり、KEAアルゴリズム[4]によって定義されます。"
    },
    {
      "indent": 3,
      "text": "The IVa and IVb are 24 byte Initialization Vectors. They are composed of \"THIS IS NOT LEAF\" followed by 8 random bytes.",
      "ja": "IVaおよびIVbは、24バイトの初期化ベクトルです。これらは、ランダムな8バイトに続いて「これはLEAFされていません」で構成されています。"
    },
    {
      "indent": 3,
      "text": "CertA is the client's certificate. CertB is the server's certificate. Both certificates are X.509 certificates [6] that contain KEA public keys [7]. The client must validate the server's certificate before using the KEA public key it contains. Likewise, the server must validate the client's certificate before using the KEA public key it contains.",
      "ja": "CERTAは、クライアントの証明書です。 CertBは、サーバーの証明書です。両方の証明書はKEA公開鍵[7]を含むX.509証明書[6]です。クライアントは、それが含まれているKEA公開鍵を使用する前に、サーバーの証明書を検証しなければなりません。同様に、サーバはそれが含まれているKEA公開鍵を使用する前に、クライアントの証明書を検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "On completing these exchanges, the parties have a common SKIPJACK key. Mutual authentication is provided by verification of the certificates used to establish the SKIPJACK encryption key and successful use of the derived SKIPJACK session key. To protect against active attacks, encryption will take place after successful authentication. There will be no way to turn off encryption and safely turn it back on; repeating the entire authentication is the only safe way to restart it. If the user does not want to use encryption, he may disable encryption after the session is established.",
      "ja": "これらの交換を完了した上で、当事者が共通SKIPJACKキーを持っています。相互認証は、カツオの暗号化キーと派生SKIPJACKセッションキーの使用の成功を確立するために使用される証明書の検証により提供されます。アクティブな攻撃から保護するために、暗号化は、認証が成功した後に行われます。暗号化をオフにして、無事に戻ってそれをオンにする方法はありません。全体の認証を繰り返すことは、それを再起動する唯一の安全な方法です。ユーザーが暗号化を使用したくない場合は、セッションが確立された後、彼は、暗号化を無効にすることがあります。"
    },
    {
      "indent": 0,
      "text": "3.1. SKIPJACK Modes",
      "section_title": true,
      "ja": "3.1。 SKIPJACKモード"
    },
    {
      "indent": 3,
      "text": "There are two distinct modes for encrypting TELNET streams; one provides integrity and the other does not. Because TELNET is normally operated in a character-by-character mode, the SKIPJACK with stream integrity mechanism requires the transmission of 4 bytes for every TELNET data byte. However, a simplified mode SKIPJACK without integrity mechanism will only require the transmission of one byte for every TELNET data byte.",
      "ja": "TELNETストリームを暗号化するための2つの異なるモードがあります。 1は、整合性を提供し、他にはありません。 TELNETは、通常、文字単位モードで動作しているため、ストリームの整合性のメカニズムとSKIPJACKは、すべてのTELNETデータバイトのための4バイトの伝送を必要とします。しかし、整合性のメカニズムのない簡易モードのSKIPJACKはすべてのTELNETデータバイト1バイトの送信が必要になります。"
    },
    {
      "indent": 3,
      "text": "The cryptographic mode for SKIPJACK with stream integrity is Cipher Feedback on 32 bits of data (CFB-32) and the mode of SKIPJACK is Cipher Feedback on 8 bits of data (CFB-8).",
      "ja": "ストリームの整合性SKIPJACKのための暗号化モードは、32ビットのデータ（CFB-32）およびSKIPJACKのモードで暗号フィードバックデータの8ビット（CFB-8）で暗号フィードバックされます。"
    },
    {
      "indent": 0,
      "text": "3.1.1. SKIPJACK without stream integrity",
      "section_title": true,
      "ja": "3.1.1。ストリームの整合性のないSKIPJACK"
    },
    {
      "indent": 3,
      "text": "The first and least complicated mode uses SKIPJACK CFB-8. This mode provides no stream integrity.",
      "ja": "最初と最も複雑なモードがSKIPJACK CFB-8を使用しています。このモードには、ストリームの整合性を提供していません。"
    },
    {
      "indent": 3,
      "text": "For SKIPJACK without stream integrity, the two-octet authentication type pair is KEA_SJ AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF. This indicates that the SKIPJACK without integrity mechanism will be used for mutual authentication and TELNET stream encryption. Figure 1 illustrates the authentication mechanism of KEA followed by SKIPJACK without stream integrity.",
      "ja": "ストリームの整合性のないSKIPJACKについては、2オクテットの認証タイプのペアはKEA_SJのAUTH_CLIENT_TO_SERVERあり| AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF。これは、整合性のメカニズムのないSKIPJACKは、相互認証とTELNETストリームの暗号化に使用されることを示します。図1は、KEAの認証機構は、ストリームの完全性なしSKIPJACK続い示します。"
    },
    {
      "indent": 0,
      "text": "---------------------------------------------------------------------\n Client (Party A)                   Server (Party B)",
      "raw": true
    },
    {
      "indent": 36,
      "text": "<-- IAC DO AUTHENTICATION",
      "ja": "< -  IAC DO認証"
    },
    {
      "indent": 1,
      "text": "IAC WILL AUTHENTICATION -->",
      "ja": "IAC WILL認証 - >"
    },
    {
      "indent": 36,
      "text": "<-- IAC SB AUTHENTICATION SEND\n    <list of authentication options>\n    IAC SE",
      "raw": true
    },
    {
      "indent": 1,
      "text": "IAC SB AUTHENTICATION NAME <user name> -->",
      "ja": "IAC SB認証名<ユーザー名>  - >"
    },
    {
      "indent": 1,
      "text": "IAC SB AUTHENTICATION IS KEA_SJ AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_CERTA_RA CertA||Ra IAC SE -->",
      "ja": "IAC SB認証はKEA_SJ AUTH_CLIENT_TO_SERVER IS | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_CERTA_RA CERTA || RaはIAC SE  - >"
    },
    {
      "indent": 36,
      "text": "<-- IAC SB AUTHENTICATION REPLY\n    KEA_SJ\n    AUTH_CLIENT_TO_SERVER |\n        AUTH_HOW_MUTUAL |\n        ENCRYPT_AFTER_EXCHANGE |\n        INI_CRED_FWD_OFF\n    IVA_RESPONSEB_NONCEA\n    KEA_CERTB_RB_IVB_NONCEB\n    CertB||Rb||IVb||\n        Encrypt( NonceB )\n    IAC SE",
      "raw": true
    },
    {
      "indent": 1,
      "text": "IAC SB AUTHENTICATION IS KEA_SJ AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_IVA_RESPONSEB_NONCEA IVa||Encrypt( (NonceB XOR 0x0C12)||NonceA ) IAC SE -->",
      "ja": "IAC SB認証はKEA_SJ AUTH_CLIENT_TO_SERVER IS | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_IVA_RESPONSEB_NONCEAのIVa ||暗号化（（NonceB XOR 0x0C12）|| NonceA）IAC SE  - >"
    },
    {
      "indent": 1,
      "text": "Client (Party A) Server (Party B)",
      "ja": "クライアント（当事者A）サーバー（乙）"
    },
    {
      "indent": 1,
      "text": "<client begins encryption> <-- IAC SB AUTHENTICATION REPLY KEA_SJ AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_RESPONSEA Encrypt( NonceA XOR 0x0C12 ) IAC SE",
      "ja": "| IAC SB認証REPLY KEA_SJ AUTH_CLIENT_TO_SERVER  -  <<クライアントは、暗号化始まり>をAUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_RESPONSEA暗号化（NonceA XOR 0x0C12）IAC SE"
    },
    {
      "indent": 0,
      "text": "                                        <server begins encryption>\n---------------------------------------------------------------------\n                              Figure 1.",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3.1.2. SKIPJACK with stream integrity",
      "section_title": true,
      "ja": "3.1.2。ストリームの整合性とSKIPJACK"
    },
    {
      "indent": 3,
      "text": "SKIPJACK with stream integrity is more complicated. It uses the SHA-1 [3] one-way hash function to provide integrity of the encryption stream as follows:",
      "ja": "ストリームの整合性を持つSKIPJACKはより複雑です。それは次のように暗号化ストリームの整合性を提供するために、SHA-1 [3]一方向ハッシュ関数を使用しています。"
    },
    {
      "indent": 7,
      "text": "Set H0 to be the SHA-1 hash of a zero-length string.\nCn is the nth character in the TELNET stream.\nHn = SHA-1( Hn-1||Cn ), where Hn is the hash value\n     associated with the nth character in the stream.\nICVn is set to the three most significant bytes of Hn.\nTransmit Encrypt( Cn||ICVn ).",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The ciphertext that is transmitted is the SKIPJACK CFB-32 encryption of ( Cn||ICVn ). The receiving end of the TELNET link reverses the process, first decrypting the ciphertext, separating Cn and ICVn, recalculating Hn, recalculating ICVn, and then comparing the received ICVn with the recalculated ICVn. Integrity is indicated if the comparison succeeds, and Cn can then be processed normally as part of the TELNET stream. Failure of the comparison indicates some loss of integrity, whether due to active manipulation or loss of cryptographic synchronization. In either case, the only recourse is to drop the TELNET connection and start over.",
      "ja": "送信された暗号文は、（CN || ICVn）のSKIPJACK CFB-32暗号化です。 TELNETリンクの受信端はまず、Hnの再計算、CNおよびICVnを分離し、暗号文を復号ICVnを再計算し、再計算ICVnで受信ICVnを比較し、プロセスを反転させます。比較が成功した場合に整合性が示され、Cnが次にTELNETストリームの一部として正常に処理することができます。比較の失敗は、アクティブな操作や暗号同期の損失に起因するかどうか、整合性のある損失を示しています。いずれの場合においても、唯一の頼みの綱は、telnet接続を削除して最初からやり直すことです。"
    },
    {
      "indent": 3,
      "text": "For SKIPJACK with stream integrity, the two-octet authentication type pair is KEA_SJ_INTEG AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF. This indicates that the KEA SKIPJACK with integrity mechanism will be used for mutual authentication and TELNET stream encryption. Figure 2 illustrates the authentication mechanism of KEA SKIPJACK with stream integrity.",
      "ja": "ストリームの整合性とSKIPJACKのために、2オクテットの認証タイプのペアがKEA_SJ_INTEG AUTH_CLIENT_TO_SERVERあり| AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF。これは、整合性のメカニズムとKEA SKIPJACKは、相互認証とTELNETストリームの暗号化に使用されることを示します。図2は、ストリームの完全性とKEA SKIPJACKの認証メカニズムを示します。"
    },
    {
      "indent": 0,
      "text": "---------------------------------------------------------------------\n Client (Party A)                   Server (Party B)",
      "raw": true
    },
    {
      "indent": 36,
      "text": "<-- IAC DO AUTHENTICATION",
      "ja": "< -  IAC DO認証"
    },
    {
      "indent": 1,
      "text": "IAC WILL AUTHENTICATION -->",
      "ja": "IAC WILL認証 - >"
    },
    {
      "indent": 36,
      "text": "<-- IAC SB AUTHENTICATION SEND\n    <list of authentication options>\n    IAC SE",
      "raw": true
    },
    {
      "indent": 1,
      "text": "IAC SB AUTHENTICATION NAME <user name> -->",
      "ja": "IAC SB認証名<ユーザー名>  - >"
    },
    {
      "indent": 1,
      "text": "IAC SB AUTHENTICATION IS KEA_SJ_INTEG AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_CERTA_RA CertA||Ra IAC SE -->",
      "ja": "IAC SB認証はKEA_SJ_INTEG AUTH_CLIENT_TO_SERVER IS | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_CERTA_RA CERTA || RaはIAC SE  - >"
    },
    {
      "indent": 36,
      "text": "<-- IAC SB AUTHENTICATION REPLY\n    KEA_SJ_INTEG\n    AUTH_CLIENT_TO_SERVER |\n        AUTH_HOW_MUTUAL |\n        ENCRYPT_AFTER_EXCHANGE |\n        INI_CRED_FWD_OFF\n    IVA_RESPONSEB_NONCEA\n    KEA_CERTB_RB_IVB_NONCEB\n    CertB||Rb||IVb||\n        Encrypt( NonceB )\n    IAC SE",
      "raw": true
    },
    {
      "indent": 1,
      "text": "IAC SB AUTHENTICATION IS KEA_SJ_INTEG AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_IVA_RESPONSEB_NONCEA IVa||Encrypt( (NonceB XOR 0x0D12)||NonceA ) IAC SE -->",
      "ja": "IAC SB認証はKEA_SJ_INTEG AUTH_CLIENT_TO_SERVER IS | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_IVA_RESPONSEB_NONCEAのIVa ||暗号化（（NonceB XOR 0x0D12）|| NonceA）IAC SE  - >"
    },
    {
      "indent": 1,
      "text": "Client (Party A) Server (Party B)",
      "ja": "クライアント（当事者A）サーバー（乙）"
    },
    {
      "indent": 1,
      "text": "<client begins encryption> <-- IAC SB AUTHENTICATION REPLY KEA_SJ_INTEG AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_RESPONSEA Encrypt( NonceA XOR 0x0D12 ) IAC SE",
      "ja": "<クライアントは、暗号化を開始します> < -  IAC SB認証REPLY KEA_SJ_INTEG AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL | ENCRYPT_AFTER_EXCHANGE | INI_CRED_FWD_OFF KEA_RESPONSEA暗号化（NonceA XOR 0x0D12）IAC SE"
    },
    {
      "indent": 0,
      "text": "                                        <server begins encryption>\n---------------------------------------------------------------------\n                              Figure 2",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4.0. Security Considerations",
      "section_title": true,
      "ja": "4.0。セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This entire memo is about security mechanisms. For KEA to provide the authentication discussed, the implementation must protect the private key from disclosure. Likewise, the SKIPJACK keys must be protected from disclosure.",
      "ja": "この全体のメモは、セキュリティ・メカニズムについてです。 KEAが議論認証を提供するために、実装は、開示から秘密鍵を保護しなければなりません。同様に、SKIPJACKキーは開示から保護されなければなりません。"
    },
    {
      "indent": 3,
      "text": "Implementations must randomly generate KEA private keys, initialization vectors (IVs), and nonces. The use of inadequate pseudo-random number generators (PRNGs) to generate cryptographic keys can result in little or no security. An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute force searching the whole key space. The generation of quality random numbers is difficult. RFC 1750 [8] offers important guidance in this area, and Appendix 3 of FIPS Pub 186 [9] provides one quality PRNG technique.",
      "ja": "実装はランダムにKEA秘密鍵、初期化ベクトル（IV）、およびナンスを生成する必要があります。暗号鍵を生成するために不十分な疑似乱数発生器（のPRNG）の使用は、ほとんどまたは全くセキュリティをもたらすことができます。攻撃者はそれをはるかに簡単に全体のキースペースを検索結果として起こる小さい可能性はなく、ブルートフォースを探し、キーを生成PRNG環境を再現するかもしれません。品質の乱数の生成が困難です。 RFC 1750 [8]この領域で重要な指導を提供し、FIPSパブ186の付録3 [9] 1つの品質PRNGの技術を提供します。"
    },
    {
      "indent": 3,
      "text": "By linking the enabling of encryption as a side effect of successful authentication, protection is provided against an active attacker. If encryption were enabled as a separate negotiation, it would provide a window of vulnerability from when the authentication completes, up to and including the negotiation to turn on encryption. The only safe way to restart encryption, if it is turned off, is to repeat the entire authentication process.",
      "ja": "成功した認証の副作用として暗号化の有効化をリンクすることで、保護がアクティブな攻撃者に対して提供されます。暗号化が別々の交渉として有効になっていた場合、それは最高の暗号化をオンにする交渉を含めへと、認証が完了したときから、脆弱性の窓を提供します。それがオフになっている場合は、暗号化を再起動する唯一の安全な方法は、全体の認証プロセスを繰り返すことです。"
    },
    {
      "indent": 0,
      "text": "5. IANA Considerations",
      "section_title": true,
      "ja": "5. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "The authentication types KEA_SJ and KEA_SJ_INTEG and their associated suboption values are registered with IANA. Any suboption values used to extend the protocol as described in this document must be registered with IANA before use. IANA is instructed not to issue new suboption values without submission of documentation of their use.",
      "ja": "認証タイプKEA_SJとKEA_SJ_INTEGとそれに関連するサブオプションの値は、IANAに登録されています。この文書に記載されているようにプロトコルを拡張するために使用される任意のサブオプションの値は、使用前にIANAに登録されなければなりません。 IANAは、それらの使用の文書の提出せずに新しいサブオプション値を発行しないように指示されます。"
    },
    {
      "indent": 0,
      "text": "6.0. Acknowledgements",
      "section_title": true,
      "ja": "6.0。謝辞"
    },
    {
      "indent": 3,
      "text": "We would like to thank William Nace for support during implementation of this specification.",
      "ja": "我々は、この仕様の実装時のサポートのためにウィリアム・ネイスに感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "7.0. References",
      "section_title": true,
      "ja": "7.0。リファレンス"
    },
    {
      "indent": 3,
      "text": "[1] Postel, J. and J. Reynolds, \"TELNET Protocol Specification\", ASTD 8, RFC 854, May 1983.",
      "ja": "[1]ポステル、J.、およびJ.レイノルズ、 \"TELNETプロトコル仕様\"、ASTD 8、RFC 854、1983月。"
    },
    {
      "indent": 3,
      "text": "[2] Ts'o, T. and J. Altman, \"Telnet Authentication Option\", RFC 2941, September 2000.",
      "ja": "[2] Ts'oさん、T.及びJ.アルトマン、 \"Telnetの認証オプション\"、RFC 2941、2000年9月。"
    },
    {
      "indent": 3,
      "text": "[3] Secure Hash Standard. FIPS Pub 180-1. April 17, 1995.",
      "ja": "[3]セキュアハッシュ標準。 FIPS 180-1をパブ。 1995年4月17日。"
    },
    {
      "indent": 3,
      "text": "[4] \"SKIPJACK and KEA Algorithm Specification\", Version 2.0, May 29, 1998. Available from http://csrc.nist.gov/encryption/skipjack-kea.htm",
      "ja": "[4] \"SKIPJACKとKEAアルゴリズム仕様\" http://csrc.nist.gov/encryption/skipjack-kea.htmから、バージョン2.0、5月29日、1998年には、利用可能な"
    },
    {
      "indent": 3,
      "text": "[5] Postel, J. and J. Reynolds, \"TELNET Option Specifications\", STD 8, RFC 855, May 1983.",
      "ja": "[5]ポステル、J.、およびJ.レイノルズ、 \"TELNETオプション仕様\"、STD 8、RFC 855、1983月。"
    },
    {
      "indent": 3,
      "text": "[6] Housley, R., Ford, W., Polk, W. and D. Solo, \"Internet X.509 Public Key Infrastructure: X.509 Certificate and CRL Profile\", RFC 2459, January 1999.",
      "ja": "[6] Housley氏、R.、フォード、W.、ポーク、W.およびD.ソロ、 \"インターネットX.509公開鍵インフラストラクチャ：X.509証明書とCRLプロファイル\"、RFC 2459、1999年1月。"
    },
    {
      "indent": 3,
      "text": "[7] Housley, R. and W. Polk, \"Internet X.509 Public Key Infrastructure - Representation of Key Exchange Algorithm (KEA) Keys in Internet X.509 Public Key Infrastructure Certificates\", RFC 2528, March 1999.",
      "ja": "[7] Housley氏、R.とW.ポーク、 \"インターネットX.509公開鍵基盤 - インターネットX.509公開鍵基盤証明書で鍵交換アルゴリズム（KEA）キーの表現\"、RFC 2528、1999年3月を。"
    },
    {
      "indent": 3,
      "text": "[8] Eastlake, D., Crocker, S. and J. Schiller, \"Randomness Recommendations for Security\", RFC 1750, December 1994.",
      "ja": "[8]イーストレイク、D.、クロッカー、S.とJ.シラー、 \"セキュリティのためのランダム性に関する推奨事項\"、RFC 1750、1994年12月。"
    },
    {
      "indent": 3,
      "text": "[9) National Institute of Standards and Technology. FIPS Pub 186: Digital Signature Standard. 19 May 1994.",
      "ja": "[9）アメリカ国立標準技術研究所。 FIPSパブ186：デジタル署名標準。 1994年5月19日。"
    },
    {
      "indent": 0,
      "text": "8.0. Authors' Addresses",
      "section_title": true,
      "ja": "8.0。著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Russell Housley SPYRUS 381 Elden Street, Suite 1120 Herndon, VA 20170 USA",
      "ja": "ラッセルHousleyのSPYRUS 381 Eldenストリート、スイート1120ハーンドン、VA 20170 USA"
    },
    {
      "indent": 3,
      "text": "EMail: housley@spyrus.com",
      "ja": "メールアドレス：housley@spyrus.com"
    },
    {
      "indent": 3,
      "text": "Todd Horting SPYRUS 381 Elden Street, Suite 1120 Herndon, VA 20170 USA",
      "ja": "トッドHorting SPYRUS 381 Eldenストリート、スイート1120ハーンドン、VA 20170 USA"
    },
    {
      "indent": 3,
      "text": "EMail: thorting@spyrus.com",
      "ja": "メールアドレス：thorting@spyrus.com"
    },
    {
      "indent": 3,
      "text": "Peter Yee SPYRUS 5303 Betsy Ross Drive Santa Clara, CA 95054 USA",
      "ja": "ピーター・イーSPYRUS 5303ベッツィー・ロスドライブサンタクララ、CA 95054 USA"
    },
    {
      "indent": 3,
      "text": "EMail: yee@spyrus.com",
      "ja": "メールアドレス：yee@spyrus.com"
    },
    {
      "indent": 0,
      "text": "9. Full Copyright Statement",
      "section_title": true,
      "ja": "9.完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（2000）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "了承"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}