{
  "title": {
    "text": "RFC 2326 - Real Time Streaming Protocol (RTSP)",
    "ja": "RFC 2326 - リアルタイムストリーミングプロトコル（RTSP）"
  },
  "number": 2326,
  "created_at": "2019-10-23 03:55:35.815686+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                     H. Schulzrinne\nRequest for Comments: 2326                                   Columbia U.\nCategory: Standards Track                                         A. Rao\n                                                                Netscape\n                                                             R. Lanphier\n                                                            RealNetworks\n                                                              April 1998",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Real Time Streaming Protocol (RTSP)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1998）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The Real Time Streaming Protocol, or RTSP, is an application-level protocol for control over the delivery of data with real-time properties. RTSP provides an extensible framework to enable controlled, on-demand delivery of real-time data, such as audio and video. Sources of data can include both live data feeds and stored clips. This protocol is intended to control multiple data delivery sessions, provide a means for choosing delivery channels such as UDP, multicast UDP and TCP, and provide a means for choosing delivery mechanisms based upon RTP (RFC 1889).",
      "ja": "リアルタイムストリーミングプロトコル、またはRTSPは、リアルタイム性をもつデータの配信を制御し、アプリケーションレベルのプロトコルです。 RTSPは、オーディオやビデオなどのリアルタイムデータの制御され、オンデマンド配信を可能にするための拡張可能なフレームワークを提供します。データのソースはライブデータフィードと保存されたクリップの両方を含めることができます。このプロトコルは、複数のデータ配信セッションを制御し、このようなUDP、マルチキャストUDP及びTCPのような配信チャネルを選択するための手段を提供し、RTP（RFC 1889）に基づいて配信メカニズムを選択するための手段を提供することを目的とします。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "* 1 Introduction .................................................  5\n     + 1.1 Purpose ...............................................  5\n     + 1.2 Requirements ..........................................  6\n     + 1.3 Terminology ...........................................  6\n     + 1.4 Protocol Properties ...................................  9\n     + 1.5 Extending RTSP ........................................ 11\n     + 1.6 Overall Operation ..................................... 11\n     + 1.7 RTSP States ........................................... 12\n     + 1.8 Relationship with Other Protocols ..................... 13\n* 2 Notational Conventions ....................................... 14\n* 3 Protocol Parameters .......................................... 14\n     + 3.1 RTSP Version .......................................... 14",
      "raw": true
    },
    {
      "indent": 3,
      "text": "     + 3.2 RTSP URL .............................................. 14\n     + 3.3 Conference Identifiers ................................ 16\n     + 3.4 Session Identifiers ................................... 16\n     + 3.5 SMPTE Relative Timestamps ............................. 16\n     + 3.6 Normal Play Time ...................................... 17\n     + 3.7 Absolute Time ......................................... 18\n     + 3.8 Option Tags ........................................... 18\n          o 3.8.1 Registering New Option Tags with IANA .......... 18\n* 4 RTSP Message ................................................. 19\n     + 4.1 Message Types ......................................... 19\n     + 4.2 Message Headers ....................................... 19\n     + 4.3 Message Body .......................................... 19\n     + 4.4 Message Length ........................................ 20\n* 5 General Header Fields ........................................ 20\n* 6 Request ...................................................... 20\n     + 6.1 Request Line .......................................... 21\n     + 6.2 Request Header Fields ................................. 21\n* 7 Response ..................................................... 22\n     + 7.1 Status-Line ........................................... 22\n          o 7.1.1 Status Code and Reason Phrase .................. 22\n          o 7.1.2 Response Header Fields ......................... 26\n* 8 Entity ....................................................... 27\n     + 8.1 Entity Header Fields .................................. 27\n     + 8.2 Entity Body ........................................... 28\n* 9 Connections .................................................. 28\n     + 9.1 Pipelining ............................................ 28\n     + 9.2 Reliability and Acknowledgements ...................... 28\n* 10 Method Definitions .......................................... 29\n     + 10.1 OPTIONS .............................................. 30\n     + 10.2 DESCRIBE ............................................. 31\n     + 10.3 ANNOUNCE ............................................. 32\n     + 10.4 SETUP ................................................ 33\n     + 10.5 PLAY ................................................. 34\n     + 10.6 PAUSE ................................................ 36\n     + 10.7 TEARDOWN ............................................. 37\n     + 10.8 GET_PARAMETER ........................................ 37\n     + 10.9 SET_PARAMETER ........................................ 38\n     + 10.10 REDIRECT ............................................ 39\n     + 10.11 RECORD .............................................. 39\n     + 10.12 Embedded (Interleaved) Binary Data .................. 40\n* 11 Status Code Definitions ..................................... 41\n     + 11.1 Success 2xx .......................................... 41\n          o 11.1.1 250 Low on Storage Space ...................... 41\n     + 11.2 Redirection 3xx ...................................... 41\n     + 11.3 Client Error 4xx ..................................... 42\n          o 11.3.1 405 Method Not Allowed ........................ 42\n          o 11.3.2 451 Parameter Not Understood .................. 42\n          o 11.3.3 452 Conference Not Found ...................... 42",
      "raw": true
    },
    {
      "indent": 3,
      "text": "          o 11.3.4 453 Not Enough Bandwidth ...................... 42\n          o 11.3.5 454 Session Not Found ......................... 42\n          o 11.3.6 455 Method Not Valid in This State ............ 42\n          o 11.3.7 456 Header Field Not Valid for Resource ....... 42\n          o 11.3.8 457 Invalid Range ............................. 43\n          o 11.3.9 458 Parameter Is Read-Only .................... 43\n          o 11.3.10 459 Aggregate Operation Not Allowed .......... 43\n          o 11.3.11 460 Only Aggregate Operation Allowed ......... 43\n          o 11.3.12 461 Unsupported Transport .................... 43\n          o 11.3.13 462 Destination Unreachable .................. 43\n          o 11.3.14 551 Option not supported ..................... 43\n* 12 Header Field Definitions .................................... 44\n     + 12.1 Accept ............................................... 46\n     + 12.2 Accept-Encoding ...................................... 46\n     + 12.3 Accept-Language ...................................... 46\n     + 12.4 Allow ................................................ 46\n     + 12.5 Authorization ........................................ 46\n     + 12.6 Bandwidth ............................................ 46\n     + 12.7 Blocksize ............................................ 47\n     + 12.8 Cache-Control ........................................ 47\n     + 12.9 Conference ........................................... 49\n     + 12.10 Connection .......................................... 49\n     + 12.11 Content-Base ........................................ 49\n     + 12.12 Content-Encoding .................................... 49\n     + 12.13 Content-Language .................................... 50\n     + 12.14 Content-Length ...................................... 50\n     + 12.15 Content-Location .................................... 50\n     + 12.16 Content-Type ........................................ 50\n     + 12.17 CSeq ................................................ 50\n     + 12.18 Date ................................................ 50\n     + 12.19 Expires ............................................. 50\n     + 12.20 From ................................................ 51\n     + 12.21 Host ................................................ 51\n     + 12.22 If-Match ............................................ 51\n     + 12.23 If-Modified-Since ................................... 52\n     + 12.24 Last-Modified........................................ 52\n     + 12.25 Location ............................................ 52\n     + 12.26 Proxy-Authenticate .................................. 52\n     + 12.27 Proxy-Require ....................................... 52\n     + 12.28 Public .............................................. 53\n     + 12.29 Range ............................................... 53\n     + 12.30 Referer ............................................. 54\n     + 12.31 Retry-After ......................................... 54\n     + 12.32 Require ............................................. 54\n     + 12.33 RTP-Info ............................................ 55\n     + 12.34 Scale ............................................... 56\n     + 12.35 Speed ............................................... 57\n     + 12.36 Server .............................................. 57",
      "raw": true
    },
    {
      "indent": 3,
      "text": "     + 12.37 Session ............................................. 57\n     + 12.38 Timestamp ........................................... 58\n     + 12.39 Transport ........................................... 58\n     + 12.40 Unsupported ......................................... 62\n     + 12.41 User-Agent .......................................... 62\n     + 12.42 Vary ................................................ 62\n     + 12.43 Via ................................................. 62\n     + 12.44 WWW-Authenticate .................................... 62\n* 13 Caching ..................................................... 62\n* 14 Examples .................................................... 63\n     + 14.1 Media on Demand (Unicast) ............................ 63\n     + 14.2 Streaming of a Container file ........................ 65\n     + 14.3 Single Stream Container Files ........................ 67\n     + 14.4 Live Media Presentation Using Multicast .............. 69\n     + 14.5 Playing media into an existing session ............... 70\n     + 14.6 Recording ............................................ 71\n* 15 Syntax ...................................................... 72\n     + 15.1 Base Syntax .......................................... 72\n* 16 Security Considerations ..................................... 73\n* A RTSP Protocol State Machines ................................. 76\n     + A.1 Client State Machine .................................. 76\n     + A.2 Server State Machine .................................. 77\n* B Interaction with RTP ......................................... 79\n* C Use of SDP for RTSP Session Descriptions ..................... 80\n     + C.1 Definitions ........................................... 80\n          o C.1.1 Control URL .................................... 80\n          o C.1.2 Media streams .................................. 81\n          o C.1.3 Payload type(s) ................................ 81\n          o C.1.4 Format-specific parameters ..................... 81\n          o C.1.5 Range of presentation .......................... 82\n          o C.1.6 Time of availability ........................... 82\n          o C.1.7 Connection Information ......................... 82\n          o C.1.8 Entity Tag ..................................... 82\n     + C.2 Aggregate Control Not Available ....................... 83\n     + C.3 Aggregate Control Available ........................... 83\n* D Minimal RTSP implementation .................................. 85\n     + D.1 Client ................................................ 85\n          o D.1.1 Basic Playback ................................. 86\n          o D.1.2 Authentication-enabled ......................... 86\n     + D.2 Server ................................................ 86\n          o D.2.1 Basic Playback ................................. 87\n          o D.2.2 Authentication-enabled ......................... 87\n* E Authors' Addresses ........................................... 88\n* F Acknowledgements ............................................. 89\n* References ..................................................... 90\n* Full Copyright Statement ....................................... 92",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1 Introduction",
      "ja": "1はじめに"
    },
    {
      "indent": 0,
      "text": "1.1 Purpose",
      "section_title": true,
      "ja": "1.1目的"
    },
    {
      "indent": 3,
      "text": "The Real-Time Streaming Protocol (RTSP) establishes and controls either a single or several time-synchronized streams of continuous media such as audio and video. It does not typically deliver the continuous streams itself, although interleaving of the continuous media stream with the control stream is possible (see Section 10.12). In other words, RTSP acts as a \"network remote control\" for multimedia servers.",
      "ja": "リアルタイムストリーミングプロトコル（RTSP）は、オーディオやビデオなどの連続メディアの単一または複数の時間同期ストリームのいずれかを確立し、制御します。制御ストリームに連続メディアストリームのインターリーブが可能であるが、それは、典型的には、連続ストリーム自体を配信しない（セクション10.12を参照）。言い換えれば、RTSPは、マルチメディアサーバ用の「ネットワークリモートコントロール」として機能します。"
    },
    {
      "indent": 3,
      "text": "The set of streams to be controlled is defined by a presentation description. This memorandum does not define a format for a presentation description.",
      "ja": "制御されるストリームのセットは、プレゼンテーション記述によって定義されます。このメモは、プレゼンテーション記述するためのフォーマットを定義していません。"
    },
    {
      "indent": 3,
      "text": "There is no notion of an RTSP connection; instead, a server maintains a session labeled by an identifier. An RTSP session is in no way tied to a transport-level connection such as a TCP connection. During an RTSP session, an RTSP client may open and close many reliable transport connections to the server to issue RTSP requests. Alternatively, it may use a connectionless transport protocol such as UDP.",
      "ja": "RTSP接続の概念はありません。代わりに、サーバは、識別子でラベル付けされたセッションを維持します。 RTSPセッションは、TCP接続のようなトランスポートレベルの接続に結び付けられない方法です。 RTSPセッション中、RTSPクライアントは、RTSP要求を発行するために、サーバーに多くの信頼性の高い交通機関の接続を開いて閉じることができます。あるいは、UDPなどのコネクションレスのトランスポートプロトコルを使用してもよいです。"
    },
    {
      "indent": 3,
      "text": "The streams controlled by RTSP may use RTP [1], but the operation of RTSP does not depend on the transport mechanism used to carry continuous media. The protocol is intentionally similar in syntax and operation to HTTP/1.1 [2] so that extension mechanisms to HTTP can in most cases also be added to RTSP. However, RTSP differs in a number of important aspects from HTTP:",
      "ja": "RTSPによって制御されるストリームは、RTP [1]を使用することができるが、RTSPの動作は、連続媒体を搬送するために使用されるトランスポート機構に依存しません。プロトコルは、意図的にHTTP / 1.1構文と動作が類似している[2]ので、HTTPへの拡張メカニズムは、ほとんどの場合においても、RTSPに追加することができます。しかし、RTSPは、HTTPからの重要な側面の数が異なります。"
    },
    {
      "indent": 5,
      "text": "* RTSP introduces a number of new methods and has a different protocol identifier. * An RTSP server needs to maintain state by default in almost all cases, as opposed to the stateless nature of HTTP. * Both an RTSP server and client can issue requests. * Data is carried out-of-band by a different protocol. (There is an exception to this.) * RTSP is defined to use ISO 10646 (UTF-8) rather than ISO 8859-1, consistent with current HTML internationalization efforts [3]. * The Request-URI always contains the absolute URI. Because of backward compatibility with a historical blunder, HTTP/1.1 [2] carries only the absolute path in the request and puts the host name in a separate header field.",
      "ja": "* RTSPは、新しいメソッドの数を紹介し、さまざまなプロトコル識別子を持っています。 * RTSPサーバは、HTTPのステートレスな性質とは対照的に、ほとんどの場合、デフォルトで状態を維持する必要があります。 * RTSPサーバとクライアントの両方が要求を発行することができます。 *データは、異なるプロトコルによってアウト・オブ・バンド運ばれます。 （これには例外がある。）* RTSP [3]現在のHTMLの国際化の取り組みと一致し、むしろISO 8859-1よりISO 10646（UTF-8）を使用するように定義されています。 * Request-URIが常に絶対URIが含まれています。なぜなら歴史的失敗、HTTP / 1.1との下位互換性[2]要求にのみ、絶対パスを運び、別のヘッダーフィールドにホスト名を置きます。"
    },
    {
      "indent": 5,
      "text": "This makes \"virtual hosting\" easier, where a single host with one IP address hosts several document trees.",
      "ja": "これは、1つのIPアドレスを持つ単一のホストが複数の文書ツリーをホストする「仮想ホスティング」をより簡単に、なります。"
    },
    {
      "indent": 3,
      "text": "The protocol supports the following operations:",
      "ja": "プロトコルは、次の操作をサポートします。"
    },
    {
      "indent": 3,
      "text": "Retrieval of media from media server: The client can request a presentation description via HTTP or some other method. If the presentation is being multicast, the presentation description contains the multicast addresses and ports to be used for the continuous media. If the presentation is to be sent only to the client via unicast, the client provides the destination for security reasons.",
      "ja": "メディアサーバからメディアの検索：クライアントがHTTP経由でプレゼンテーション記述またはいくつかの他の方法を要求することができます。プレゼンテーションがマルチキャストされている場合は、プレゼンテーション記述は、連続媒体に使用されるマルチキャストアドレスとポートが含まれています。プレゼンテーションでは、ユニキャストを介してクライアントにのみ送信する場合、クライアントは、セキュリティ上の理由から先を提供します。"
    },
    {
      "indent": 3,
      "text": "Invitation of a media server to a conference: A media server can be \"invited\" to join an existing conference, either to play back media into the presentation or to record all or a subset of the media in a presentation. This mode is useful for distributed teaching applications. Several parties in the conference may take turns \"pushing the remote control buttons.\"",
      "ja": "会議へのメディアサーバーの招待：メディアサーバーは、既存の会議に参加するために「招待」することができ、いずれかのプレゼンテーションにメディアを再生したり、プレゼンテーション内のすべてまたはメディアのサブセットを記録すること。このモードでは、分散型教育用途に有用です。ターンを取ることが会議中にいくつかの政党「リモートコントロールボタンを押して。」"
    },
    {
      "indent": 3,
      "text": "Addition of media to an existing presentation: Particularly for live presentations, it is useful if the server can tell the client about additional media becoming available.",
      "ja": "既存のプレゼンテーションへのメディアの追加：サーバが追加のメディアが利用可能になることについてクライアントに伝えることができれば特にライブプレゼンテーションのために、それは便利です。"
    },
    {
      "indent": 3,
      "text": "RTSP requests may be handled by proxies, tunnels and caches as in HTTP/1.1 [2].",
      "ja": "RTSP要求は、[2] HTTP / 1.1のようにプロキシ、トンネルおよびキャッシュによって処理されてもよいです。"
    },
    {
      "indent": 0,
      "text": "1.2 Requirements",
      "section_title": true,
      "ja": "1.2要件"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [4].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はありますRFC 2119に記載されるように解釈される[4]。"
    },
    {
      "indent": 0,
      "text": "1.3 Terminology",
      "section_title": true,
      "ja": "1.3用語"
    },
    {
      "indent": 3,
      "text": "Some of the terminology has been adopted from HTTP/1.1 [2]. Terms not listed here are defined as in HTTP/1.1.",
      "ja": "用語のいくつかは、[2] HTTP / 1.1から採用されています。ここに記載されていない用語は、HTTP / 1.1のように定義されています。"
    },
    {
      "indent": 3,
      "text": "Aggregate control: The control of the multiple streams using a single timeline by the server. For audio/video feeds, this means that the client may issue a single play or pause message to control both the audio and video feeds.",
      "ja": "集計コントロール：サーバによって単一のタイムラインを使用して、複数のストリームの制御。オーディオ/ビデオフィードの場合、これは、クライアントがシングルプレイを発行したり、オーディオとビデオフィードの両方を制御するためのメッセージを一時停止することを意味します。"
    },
    {
      "indent": 3,
      "text": "Conference: a multiparty, multimedia presentation, where \"multi\" implies greater than or equal to one.",
      "ja": "会議：「マルチ」は1以上を意味し、マルチパーティ、マルチメディアプレゼンテーション、。"
    },
    {
      "indent": 3,
      "text": "Client: The client requests continuous media data from the media server.",
      "ja": "クライアント：クライアントがメディアサーバーからの連続メディアデータを要求します。"
    },
    {
      "indent": 3,
      "text": "Connection: A transport layer virtual circuit established between two programs for the purpose of communication.",
      "ja": "接続：通信の目的のための2つのプログラム間に確立されたトランスポート層仮想回路。"
    },
    {
      "indent": 3,
      "text": "Container file: A file which may contain multiple media streams which often comprise a presentation when played together. RTSP servers may offer aggregate control on these files, though the concept of a container file is not embedded in the protocol.",
      "ja": "コンテナファイル：一緒にプレイしたとき、多くの場合、プレゼンテーションを含む、複数のメディアストリームを含むことができ、ファイル。コンテナファイルの概念がプロトコルに組み込まれていないが、RTSPサーバは、これらのファイルに集約コントロールを提供することがあります。"
    },
    {
      "indent": 3,
      "text": "Continuous media: Data where there is a timing relationship between source and sink; that is, the sink must reproduce the timing relationship that existed at the source. The most common examples of continuous media are audio and motion video. Continuous media can be real-time (interactive), where there is a \"tight\" timing relationship between source and sink, or streaming (playback), where the relationship is less strict.",
      "ja": "連続メディアデータソースとシンクとの間のタイミング関係があります。つまり、シンクは、ソースに存在していたタイミング関係を再現する必要があります。連続メディアの最も一般的な例は、オーディオとビデオの動きです。連続メディアは、関係がより少なく厳密であり、ソースとシンク、又はストリーミング（再生）の間の「タイト」のタイミング関係があり、リアルタイム（対話）することができます。"
    },
    {
      "indent": 3,
      "text": "Entity: The information transferred as the payload of a request or response. An entity consists of metainformation in the form of entity-header fields and content in the form of an entity-body, as described in Section 8.",
      "ja": "エンティティ：要求または応答のペイロードとして転送される情報。セクション8に記載されているように、エンティティは、エンティティ - ヘッダフィールド及びエンティティ - 本体の形のコンテンツの形でメタ情報から構成されています。"
    },
    {
      "indent": 3,
      "text": "Media initialization: Datatype/codec specific initialization. This includes such things as clockrates, color tables, etc. Any transport-independent information which is required by a client for playback of a media stream occurs in the media initialization phase of stream setup.",
      "ja": "メディアの初期化：データ型/コーデック固有の初期化。これは、メディアストリームの再生のためにクライアントによって要求される任意のトランスポートに依存しない情報は、ストリームセットアップのメディア初期化フェーズで発生等clockrates、カラーテーブル、のようなものを含みます。"
    },
    {
      "indent": 3,
      "text": "Media parameter: Parameter specific to a media type that may be changed before or during stream playback.",
      "ja": "メディアパラメータ：前またはストリームの再生中に変更することができるメディアの種類に固有のパラメータ。"
    },
    {
      "indent": 3,
      "text": "Media server: The server providing playback or recording services for one or more media streams. Different media streams within a presentation may originate from different media servers. A media server may reside on the same or a different host as the web server the presentation is invoked from.",
      "ja": "メディアサーバー：1つまたは複数のメディアストリームの再生や録音サービスを提供するサーバー。プレゼンテーション内の別のメディアストリームは、異なるメディアサーバーに由来してもよいです。メディアサーバーは、同じまたはプレゼンテーションから呼び出されたWebサーバとして別のホスト上に存在することができます。"
    },
    {
      "indent": 3,
      "text": "Media server indirection: Redirection of a media client to a different media server.",
      "ja": "メディアサーバーの間接：別のメディアサーバーへのメディアクライアントのリダイレクト。"
    },
    {
      "indent": 3,
      "text": "(Media) stream: A single media instance, e.g., an audio stream or a video stream as well as a single whiteboard or shared application group. When using RTP, a stream consists of all RTP and RTCP packets created by a source within an RTP session. This is equivalent to the definition of a DSM-CC stream([5]).",
      "ja": "（メディア）ストリーム：単一のメディアインスタンス、例えば、オーディオストリームまたはビデオストリーム、ならびに単一ホワイトボードまたは共有アプリケーショングループ。 RTPを使用する場合、ストリームは、RTPセッション内のソースによって作成されたすべてのRTPとRTCPパケットから成ります。これは、DSM-CCストリーム（[5]）の定義と同じです。"
    },
    {
      "indent": 3,
      "text": "Message: The basic unit of RTSP communication, consisting of a structured sequence of octets matching the syntax defined in Section 15 and transmitted via a connection or a connectionless protocol.",
      "ja": "メッセージ：セクション15で定義されており、接続またはコネクションレスプロトコルを介して送信されたシンタックスに一致オクテットの構造配列からなるRTSP通信の基本ユニット。"
    },
    {
      "indent": 3,
      "text": "Participant: Member of a conference. A participant may be a machine, e.g., a media record or playback server.",
      "ja": "参加者：会議のメンバー。参加者は、例えば、メディアレコードまたは再生サーバマシンであってもよいです。"
    },
    {
      "indent": 3,
      "text": "Presentation: A set of one or more streams presented to the client as a complete media feed, using a presentation description as defined below. In most cases in the RTSP context, this implies aggregate control of those streams, but does not have to.",
      "ja": "プレゼンテーション：完全なメディアフィードとしてクライアントに提示された1つのまたは複数のストリームのセット、以下に定義するプレゼンテーション記述を使用しました。 RTSPのコンテキストでほとんどの場合、これは、それらのストリームの集約コントロールを意味しますが、する必要はありません。"
    },
    {
      "indent": 3,
      "text": "Presentation description: A presentation description contains information about one or more media streams within a presentation, such as the set of encodings, network addresses and information about the content. Other IETF protocols such as SDP (RFC 2327 [6]) use the term \"session\" for a live presentation. The presentation description may take several different formats, including but not limited to the session description format SDP.",
      "ja": "プレゼンテーション記述：プレゼンテーション記述は、エンコード、ネットワーク・アドレス及びコンテンツに関する情報の集合として、プレゼンテーション内の1つまたは複数のメディア・ストリームについての情報を含みます。そのようなSDPのような他のIETFプロトコル（RFC 2327 [6]）ライブプレゼンテーションのために、用語「セッション」を使用します。プレゼンテーション記述は、セッション記述形式SDPを含むがこれらに限定されないいくつかの異なる形式をとることができます。"
    },
    {
      "indent": 3,
      "text": "Response: An RTSP response. If an HTTP response is meant, that is indicated explicitly.",
      "ja": "回答：RTSP応答。 HTTPレスポンスを意味している場合は、それが明示的に示されています。"
    },
    {
      "indent": 3,
      "text": "Request: An RTSP request. If an HTTP request is meant, that is indicated explicitly.",
      "ja": "要求：RTSP要求。 HTTPリクエストが意図されている場合は、それが明示的に示されています。"
    },
    {
      "indent": 3,
      "text": "RTSP session: A complete RTSP \"transaction\", e.g., the viewing of a movie. A session typically consists of a client setting up a transport mechanism for the continuous media stream (SETUP), starting the stream with PLAY or RECORD, and closing the stream with TEARDOWN.",
      "ja": "RTSPセッション：完全なRTSP「取引」、例えば、映画の鑑賞。セッションは、典型的には、再生または記録にストリームを開始し、TEARDOWNでストリームを閉じ、連続メディアストリーム（SETUP）のためのトランスポート機構の設定クライアントから成ります。"
    },
    {
      "indent": 3,
      "text": "Transport initialization: The negotiation of transport information (e.g., port numbers, transport protocols) between the client and the server.",
      "ja": "交通の初期化：クライアントとサーバ間の交通情報（例えば、ポート番号、トランスポートプロトコル）の交渉。"
    },
    {
      "indent": 0,
      "text": "1.4 Protocol Properties",
      "section_title": true,
      "ja": "1.4プロトコルのプロパティ"
    },
    {
      "indent": 3,
      "text": "RTSP has the following properties:",
      "ja": "RTSPは、次のプロパティがあります。"
    },
    {
      "indent": 3,
      "text": "Extendable: New methods and parameters can be easily added to RTSP.",
      "ja": "拡張：新しいメソッドやパラメータを簡単にRTSPに追加することができます。"
    },
    {
      "indent": 3,
      "text": "Easy to parse: RTSP can be parsed by standard HTTP or MIME parsers.",
      "ja": "解析が簡単：RTSPは、標準のHTTPまたはMIMEのパーサーで解析することができます。"
    },
    {
      "indent": 3,
      "text": "Secure: RTSP re-uses web security mechanisms. All HTTP authentication mechanisms such as basic (RFC 2068 [2, Section 11.1]) and digest authentication (RFC 2069 [8]) are directly applicable. One may also reuse transport or network layer security mechanisms.",
      "ja": "セキュア：RTSPは、Webセキュリティ・メカニズムを再使用しています。全てのこのような基本としてHTTP認証メカニズム（RFC 2068 [2、セクション11.1]）とダイジェスト認証（RFC 2069 [8]）に直接適用可能です。一つは、また、トランスポートまたはネットワーク層のセキュリティ・メカニズムを再利用することができます。"
    },
    {
      "indent": 3,
      "text": "Transport-independent: RTSP may use either an unreliable datagram protocol (UDP) (RFC 768 [9]), a reliable datagram protocol (RDP, RFC 1151, not widely used [10]) or a reliable stream protocol such as TCP (RFC 793 [11]) as it implements application-level reliability.",
      "ja": "トランスポート非依存：RTSPは、信頼性のないデータグラムプロトコル（UDP）（RFC 768 [9]）、信頼性の高いデータグラムプロトコル（RDP、RFC 1151、広く使用されていない[10]）、またはTCP（RFCとして信頼性の高いストリーム・プロトコルのいずれかを使用することができますそれは、アプリケーション・レベルの信頼性を実現するように793 [11]）。"
    },
    {
      "indent": 3,
      "text": "Multi-server capable: Each media stream within a presentation can reside on a different server. The client automatically establishes several concurrent control sessions with the different media servers. Media synchronization is performed at the transport level.",
      "ja": "可能なマルチサーバー：プレゼンテーション内の各メディアストリームは、別のサーバー上に存在することができます。クライアントは、自動的に別のメディアサーバーで複数の同時制御セッションを確立します。メディア同期はトランスポートレベルで行われます。"
    },
    {
      "indent": 3,
      "text": "Control of recording devices: The protocol can control both recording and playback devices, as well as devices that can alternate between the two modes (\"VCR\").",
      "ja": "記録装置の制御：プロトコルは、2つのモード（「VCR」）との間で交互にすることができ、両方の記録再生装置、並びにデバイスを制御することができます。"
    },
    {
      "indent": 3,
      "text": "Separation of stream control and conference initiation: Stream control is divorced from inviting a media server to a conference. The only requirement is that the conference initiation protocol either provides or can be used to create a unique conference identifier. In particular, SIP [12] or H.323 [13] may be used to invite a server to a conference.",
      "ja": "ストリーム制御、会議開始の分離：ストリーム制御は、会議にメディアサーバーを招いから離婚されます。唯一の要件は、会議開始プロトコルを提供または一意の会議識別子を作成するために使用されるかということです。具体的には、SIP [12]やH.323 [13]会議にサーバーを招待するために使用することができます。"
    },
    {
      "indent": 3,
      "text": "Suitable for professional applications: RTSP supports frame-level accuracy through SMPTE time stamps to allow remote digital editing.",
      "ja": "プロフェッショナル用途に適した：RTSPは、リモートデジタル編集を可能にするために、SMPTEタイムスタンプを介してフレームレベルの精度をサポートします。"
    },
    {
      "indent": 3,
      "text": "Presentation description neutral: The protocol does not impose a particular presentation description or metafile format and can convey the type of format to be used. However, the presentation description must contain at least one RTSP URI.",
      "ja": "ニュートラルプレゼンテーションの説明：プロトコルは、特定のプレゼンテーション記述またはメタファイル形式を課していないと、使用するフォーマットの種類を伝えることができます。しかし、プレゼンテーション記述は、少なくとも一つのRTSP URIが含まれている必要があります。"
    },
    {
      "indent": 3,
      "text": "Proxy and firewall friendly: The protocol should be readily handled by both application and transport-layer (SOCKS [14]) firewalls. A firewall may need to understand the SETUP method to open a \"hole\" for the UDP media stream.",
      "ja": "プロキシおよびファイアウォール優しい：プロトコルは、容易にアプリケーションおよびトランスポート層（SOCKS [14]）ファイアウォールの両方によって処理されるべきです。ファイアウォールは、UDPメディアストリームのための「穴」を開けるためのセットアップ方法を理解する必要があるかもしれません。"
    },
    {
      "indent": 3,
      "text": "HTTP-friendly: Where sensible, RTSP reuses HTTP concepts, so that the existing infrastructure can be reused. This infrastructure includes PICS (Platform for Internet Content Selection [15,16]) for associating labels with content. However, RTSP does not just add methods to HTTP since the controlling continuous media requires server state in most cases.",
      "ja": "HTTPに優しい：既存のインフラストラクチャを再利用できるように、RTSPは、HTTPの概念を再利用賢明。このインフラストラクチャは、コンテンツにラベルを関連付けるためのPICS（インターネットコンテンツ選択のためのプラットフォームを[15,16]）を含みます。制御の連続メディアは、ほとんどの場合、サーバーの状態を必要とするためしかし、RTSPは、単にHTTPにメソッドを追加しません。"
    },
    {
      "indent": 3,
      "text": "Appropriate server control: If a client can start a stream, it must be able to stop a stream. Servers should not start streaming to clients in such a way that clients cannot stop the stream.",
      "ja": "適切なサーバーコントロール：クライアントがストリームを開始することができた場合は、それが流れを止めることができなければなりません。サーバーは、クライアントがストリームを止めることはできないような方法でクライアントにストリーミングを開始べきではありません。"
    },
    {
      "indent": 3,
      "text": "Transport negotiation: The client can negotiate the transport method prior to actually needing to process a continuous media stream.",
      "ja": "トランスポートのネゴシエーション：クライアントは以前、実際に連続メディアストリームを処理するために必要に輸送方法を交渉することができます。"
    },
    {
      "indent": 3,
      "text": "Capability negotiation: If basic features are disabled, there must be some clean mechanism for the client to determine which methods are not going to be implemented. This allows clients to present the appropriate user interface. For example, if seeking is not allowed, the user interface must be able to disallow moving a sliding position indicator.",
      "ja": "機能ネゴシエーション：基本的な機能は無効になっている場合は、メソッドが実装される予定されていないかを決定するために、クライアントのためのいくつかのきれいなメカニズムが存在しなければなりません。これは、クライアントが適切なユーザインタフェースを提示することができます。シークが許可されていない場合、例えば、ユーザインタフェースは、スライド位置インジケータを移動禁止することができなければなりません。"
    },
    {
      "indent": 5,
      "text": "An earlier requirement in RTSP was multi-client capability. However, it was determined that a better approach was to make sure that the protocol is easily extensible to the multi-client scenario. Stream identifiers can be used by several control streams, so that \"passing the remote\" would be possible. The protocol would not address how several clients negotiate access; this is left to either a \"social protocol\" or some other floor control mechanism.",
      "ja": "RTSPでの以前の要件は、マルチクライアント機能でした。しかし、それはより良いアプローチは、プロトコルはマルチクライアントシナリオに容易に拡張されていることを確認することであると判断しました。 「リモートを通過する」ことが可能になるように、ストリーム識別子は、いくつかの制御ストリームで使用することができます。プロトコルは、アクセスを交渉する方法をいくつかのクライアントに対処しません。これは「社会的なプロトコル」またはいくつかの他のフロア制御メカニズムのいずれかに委ねられています。"
    },
    {
      "indent": 0,
      "text": "1.5 Extending RTSP",
      "section_title": true,
      "ja": "1.5 RTSPを拡張"
    },
    {
      "indent": 3,
      "text": "Since not all media servers have the same functionality, media servers by necessity will support different sets of requests. For example:",
      "ja": "いないすべてのメディアサーバーは、同じ機能を持っているので、必然的にメディアサーバーは、要求の異なるセットをサポートします。例えば："
    },
    {
      "indent": 5,
      "text": "* A server may only be capable of playback thus has no need to support the RECORD request. * A server may not be capable of seeking (absolute positioning) if it is to support live events only. * Some servers may not support setting stream parameters and thus not support GET_PARAMETER and SET_PARAMETER.",
      "ja": "*サーバは再生のみ可能であってもよいので、RECORD要求をサポートする必要がありません。それはライブイベントのみをサポートする場合*サーバは（絶対位置）を探していることができないかもしれません。 *一部のサーバがGET_PARAMETERやSET_PARAMETERをサポートしていないため、ストリーム・パラメータの設定をサポートしていないことがあります。"
    },
    {
      "indent": 3,
      "text": "A server SHOULD implement all header fields described in Section 12.",
      "ja": "サーバはセクション12に記載されているすべてのヘッダフィールドを実装する必要があります。"
    },
    {
      "indent": 3,
      "text": "It is up to the creators of presentation descriptions not to ask the impossible of a server. This situation is similar in HTTP/1.1 [2], where the methods described in [H19.6] are not likely to be supported across all servers.",
      "ja": "これは、サーバーの不可能を依頼しないプレゼンテーション記述のクリエイターまでです。この状況は、HTTP / 1.1に類似している[2]、[H19.6]に記載の方法は、すべてのサーバー間でサポートされない可能性がありところ。"
    },
    {
      "indent": 3,
      "text": "RTSP can be extended in three ways, listed here in order of the magnitude of changes supported:",
      "ja": "RTSPは、サポートされている変化の大きさの順にここにリストされている三つの方法で拡張することができます。"
    },
    {
      "indent": 5,
      "text": "* Existing methods can be extended with new parameters, as long as these parameters can be safely ignored by the recipient. (This is equivalent to adding new parameters to an HTML tag.) If the client needs negative acknowledgement when a method extension is not supported, a tag corresponding to the extension may be added in the Require: field (see Section 12.32). * New methods can be added. If the recipient of the message does not understand the request, it responds with error code 501 (Not implemented) and the sender should not attempt to use this method again. A client may also use the OPTIONS method to inquire about methods supported by the server. The server SHOULD list the methods it supports using the Public response header. * A new version of the protocol can be defined, allowing almost all aspects (except the position of the protocol version number) to change.",
      "ja": "*既存の方法は、これらのパラメータを安全に受信者によって無視することができます限り、新しいパラメータを拡張することができます。 （項12.32を参照してください）フィールド：メソッドの拡張機能がサポートされていない場合、クライアントは否定応答を必要とする場合（これは、HTMLタグに新しいパラメータを追加することと同じである）、拡張子に対応するタグが必要で添加してもよいです。 *新しいメソッドを追加することができます。メッセージの受信者が要求を理解していない場合は、エラーコード501（未実装）で応答し、送信者が再び、このメソッドを使用しないでください。また、クライアントは、サーバでサポートされている方法を問い合わせるOPTIONSメソッドを使用することができます。サーバーは、それが公共レスポンスヘッダを使用してサポートするメソッドをリストする必要があります。 *プロトコルの新しいバージョンでは、（プロトコルバージョン番号の位置を除いて）ほぼすべての側面を変更することができ、定義することができます。"
    },
    {
      "indent": 0,
      "text": "1.6 Overall Operation",
      "section_title": true,
      "ja": "1.6全体動作"
    },
    {
      "indent": 3,
      "text": "Each presentation and media stream may be identified by an RTSP URL. The overall presentation and the properties of the media the presentation is made up of are defined by a presentation description file, the format of which is outside the scope of this specification. The presentation description file may be obtained by the client using",
      "ja": "各プレゼンテーションおよびメディアストリームは、RTSP URLによって識別することができます。全体的なプレゼンテーションおよびプレゼンテーションで構成されたメディアの特性は、本明細書の範囲外であるフォーマットれた、プレゼンテーション記述ファイルによって定義されます。プレゼンテーション記述ファイルを使用して、クライアントにより得ることができます"
    },
    {
      "indent": 3,
      "text": "HTTP or other means such as email and may not necessarily be stored on the media server.",
      "ja": "HTTPや電子メールなどの他の手段、必ずしもメディアサーバ上に格納されなくてもよいです。"
    },
    {
      "indent": 3,
      "text": "For the purposes of this specification, a presentation description is assumed to describe one or more presentations, each of which maintains a common time axis. For simplicity of exposition and without loss of generality, it is assumed that the presentation description contains exactly one such presentation. A presentation may contain several media streams.",
      "ja": "本明細書の目的のために、プレゼンテーションの説明は、共通の時間軸を維持し、それぞれが1つのまたは複数のプレゼンテーションを記述するものとします。博覧会の一般性を失うことなく、簡単にするために、プレゼンテーション記述は正確に一つ、このようなプレゼンテーションが含まれているものとします。プレゼンテーションでは、いくつかのメディアストリームが含まれていてもよいです。"
    },
    {
      "indent": 3,
      "text": "The presentation description file contains a description of the media streams making up the presentation, including their encodings, language, and other parameters that enable the client to choose the most appropriate combination of media. In this presentation description, each media stream that is individually controllable by RTSP is identified by an RTSP URL, which points to the media server handling that particular media stream and names the stream stored on that server. Several media streams can be located on different servers; for example, audio and video streams can be split across servers for load sharing. The description also enumerates which transport methods the server is capable of.",
      "ja": "プレゼンテーション記述ファイルは、彼らのエンコーディング、言語、およびメディアの最も適切な組み合わせを選択するようにクライアントを可能にする他のパラメータを含むプレゼンテーションを、構成するメディアストリームの記述が含まれています。このプレゼンテーションの説明では、RTSPによって個別に制御可能であり、各メディアストリームは、その特定のメディアストリームと名前をそのサーバー上に格納されたストリームを処理するメディアサーバを指すRTSP URLによって識別されます。いくつかのメディアストリームは、異なるサーバに配置することができます。例えば、オーディオおよびビデオストリームは、負荷分散のためのサーバー間で分割することができます。記述は、サーバーが可能であるどの輸送方法列挙する。"
    },
    {
      "indent": 3,
      "text": "Besides the media parameters, the network destination address and port need to be determined. Several modes of operation can be distinguished:",
      "ja": "メディアパラメータのほかに、ネットワーク宛先アドレスとポートを決定する必要があります。いくつかの動作モードを区別することができます。"
    },
    {
      "indent": 3,
      "text": "Unicast: The media is transmitted to the source of the RTSP request, with the port number chosen by the client. Alternatively, the media is transmitted on the same reliable stream as RTSP.",
      "ja": "ユニキャスト：メディアは、クライアントによって選択されたポート番号と、RTSP要求の送信元に送信されます。また、メディアはRTSPと同じ信頼性の高いストリームで送信されます。"
    },
    {
      "indent": 3,
      "text": "Multicast, server chooses address: The media server picks the multicast address and port. This is the typical case for a live or near-media-on-demand transmission.",
      "ja": "マルチキャストは、サーバがアドレスを選択：メディアサーバは、マルチキャストアドレスとポートを選びます。これは、ライブまたは近いメディア・オン・デマンドの伝送のための典型的なケースです。"
    },
    {
      "indent": 3,
      "text": "Multicast, client chooses address: If the server is to participate in an existing multicast conference, the multicast address, port and encryption key are given by the conference description, established by means outside the scope of this specification.",
      "ja": "マルチキャストは、クライアントがアドレスを選択します。サーバーは、既存のマルチキャスト会議に参加する場合は、マルチキャストアドレス、ポート、および暗号化キーは、この仕様の範囲外の手段によって確立され、会議の説明によって与えられています。"
    },
    {
      "indent": 0,
      "text": "1.7 RTSP States",
      "section_title": true,
      "ja": "1.7 RTSP州"
    },
    {
      "indent": 3,
      "text": "RTSP controls a stream which may be sent via a separate protocol, independent of the control channel. For example, RTSP control may occur on a TCP connection while the data flows via UDP. Thus, data delivery continues even if no RTSP requests are received by the media server. Also, during its lifetime, a single media stream may be controlled by RTSP requests issued sequentially on different TCP connections. Therefore, the server needs to maintain \"session state\" to be able to correlate RTSP requests with a stream. The state transitions are described in Section A.",
      "ja": "RTSPは、制御チャネルとは独立して別のプロトコルを介して送信することができるストリームを制御します。データは、UDPを介して流れる間、例えば、RTSP制御がTCP接続で発生する可能性があります。このように、データの配信にはRTSP要求がメディア・サーバによって受信されない場合でも継続されます。また、その寿命の間に、単一のメディアストリームは、異なるTCPコネクション上で順次発行されるRTSP要求によって制御することができます。そのため、サーバーはストリームとRTSP要求を関連付けることができるように、「セッション状態」を維持する必要があります。状態遷移は、セクションAに記載されています"
    },
    {
      "indent": 3,
      "text": "Many methods in RTSP do not contribute to state. However, the following play a central role in defining the allocation and usage of stream resources on the server: SETUP, PLAY, RECORD, PAUSE, and TEARDOWN.",
      "ja": "RTSPでの多くの方法が状態に寄与しません。 SETUP、PLAY、RECORD、PAUSE、およびTEARDOWN：ただし、以下では、サーバー上のストリームリソースの割り当てと使用法を定義する上で中心的な役割を果たしています。"
    },
    {
      "indent": 3,
      "text": "SETUP: Causes the server to allocate resources for a stream and start an RTSP session.",
      "ja": "SETUP：サーバはストリームのためのリソースを割り当て、RTSPセッションを開始するようにします。"
    },
    {
      "indent": 3,
      "text": "PLAY and RECORD: Starts data transmission on a stream allocated via SETUP.",
      "ja": "PLAYとRECORD：SETUPを介して割り当てられたストリーム上でデータ送信を開始します。"
    },
    {
      "indent": 3,
      "text": "PAUSE: Temporarily halts a stream without freeing server resources.",
      "ja": "PAUSE：一時的にサーバリソースを解放せずにストリームを停止します。"
    },
    {
      "indent": 3,
      "text": "TEARDOWN: Frees resources associated with the stream. The RTSP session ceases to exist on the server.",
      "ja": "TEARDOWN：ストリームに関連付けられているリソースを解放し。 RTSPセッションはサーバー上に存在しなくなります。"
    },
    {
      "indent": 10,
      "text": "RTSP methods that contribute to state use the Session header\nfield (Section 12.37) to identify the RTSP session whose state\nis being manipulated. The server generates session identifiers\nin response to SETUP requests (Section 10.4).",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1.8 Relationship with Other Protocols",
      "section_title": true,
      "ja": "他のプロトコルと1.8の関係"
    },
    {
      "indent": 3,
      "text": "RTSP has some overlap in functionality with HTTP. It also may interact with HTTP in that the initial contact with streaming content is often to be made through a web page. The current protocol specification aims to allow different hand-off points between a web server and the media server implementing RTSP. For example, the presentation description can be retrieved using HTTP or RTSP, which reduces roundtrips in web-browser-based scenarios, yet also allows for standalone RTSP servers and clients which do not rely on HTTP at all.",
      "ja": "RTSPは、HTTPと機能的にいくつかの重複があります。また、ストリーミングコンテンツとの最初の接触は、Webページを介して行うことがしばしばであることをHTTPで相互作用することができます。現在のプロトコル仕様は、WebサーバとRTSPを実装するメディアサーバとの間の異なるハンドオフポイントを可能にすることを目的とします。例えば、プレゼンテーション記述は、Webブラウザベースのシナリオでのラウンドトリップを減らしHTTPやRTSPを、使用して取得することができ、まだも全くHTTPに依存しないスタンドアロンRTSPサーバとクライアントが可能になります。"
    },
    {
      "indent": 3,
      "text": "However, RTSP differs fundamentally from HTTP in that data delivery takes place out-of-band in a different protocol. HTTP is an asymmetric protocol where the client issues requests and the server responds. In RTSP, both the media client and media server can issue requests. RTSP requests are also not stateless; they may set parameters and continue to control a media stream long after the request has been acknowledged.",
      "ja": "しかし、RTSPは、基本的にそのデータ配信におけるHTTPとは異なる別のプロトコルに帯域外で行われます。 HTTPは、クライアントが要求を発行し、サーバーが応答する非対称プロトコルです。 RTSPでは、メディアクライアントとメディアサーバーの両方が要求を発行することができます。 RTSP要求には、ステートレスではありません。彼らは、パラメータを設定し、要求が認められている長い後にメディアストリームを制御し続けることができます。"
    },
    {
      "indent": 5,
      "text": "Re-using HTTP functionality has advantages in at least two areas, namely security and proxies. The requirements are very similar, so having the ability to adopt HTTP work on caches, proxies and authentication is valuable.",
      "ja": "再利用HTTP機能は、少なくとも二つの領域、すなわち、セキュリティとプロキシで利点を有します。要件は非常に似ているので、キャッシュ、プロキシおよび認証にHTTPの仕事を採用する能力を持つことは貴重です。"
    },
    {
      "indent": 3,
      "text": "While most real-time media will use RTP as a transport protocol, RTSP is not tied to RTP.",
      "ja": "ほとんどのリアルタイムメディアがトランスポートプロトコルとしてRTPを使用しますが、RTSPは、RTPに縛られていません。"
    },
    {
      "indent": 3,
      "text": "RTSP assumes the existence of a presentation description format that can express both static and temporal properties of a presentation containing several media streams.",
      "ja": "RTSPは、いくつかのメディアストリームを含むプレゼンテーションの両方の静的および時間的特性を発現することができるプレゼンテーションの記述形式が存在することを前提としています。"
    },
    {
      "indent": 0,
      "text": "2 Notational Conventions",
      "ja": "2つの表記規則"
    },
    {
      "indent": 3,
      "text": "Since many of the definitions and syntax are identical to HTTP/1.1, this specification only points to the section where they are defined rather than copying it. For brevity, [HX.Y] is to be taken to refer to Section X.Y of the current HTTP/1.1 specification (RFC 2068 [2]).",
      "ja": "定義及び構文の多くは、HTTP / 1.1と同一であるので、本明細書は、彼らはそれをコピーするのではなく、定義されている部分を指します。簡潔にするため、[HX.Y]現在のHTTP / 1.1仕様のセクションX.Yを指すと解釈されるべきである（RFC 2068 [2]）。"
    },
    {
      "indent": 3,
      "text": "All the mechanisms specified in this document are described in both prose and an augmented Backus-Naur form (BNF) similar to that used in [H2.1]. It is described in detail in RFC 2234 [17], with the difference that this RTSP specification maintains the \"1#\" notation for comma-separated lists.",
      "ja": "この文書で指定されたすべてのメカニズムが散文と[H2.1]で用いたものと同様の拡張バッカス正規形（BNF）の両方に記載されています。なお、このRTSP仕様がカンマで区切られたリストの「1＃」表記を維持するという点は相違させて、RFC 2234 [17]に詳細に記載されています。"
    },
    {
      "indent": 3,
      "text": "In this memo, we use indented and smaller-type paragraphs to provide background and motivation. This is intended to give readers who were not involved with the formulation of the specification an understanding of why things are the way that they are in RTSP.",
      "ja": "このメモでは、我々は、背景や動機を提供するために、インデントや小さい型の段落を使用しています。これは、仕様の策定、物事は、彼らがRTSPである方法である理由を理解して関与していない読者を与えることを目的としています。"
    },
    {
      "indent": 0,
      "text": "3 Protocol Parameters",
      "ja": "3つのプロトコルパラメータ"
    },
    {
      "indent": 0,
      "text": "3.1 RTSP Version",
      "section_title": true,
      "ja": "3.1 RTSPバージョン"
    },
    {
      "indent": 3,
      "text": "[H3.1] applies, with HTTP replaced by RTSP.",
      "ja": "[H3.1] RTSPで置き換えるHTTPで、適用されます。"
    },
    {
      "indent": 0,
      "text": "3.2 RTSP URL",
      "section_title": true,
      "ja": "3.2 RTSPのURL"
    },
    {
      "indent": 3,
      "text": "The \"rtsp\" and \"rtspu\" schemes are used to refer to network resources via the RTSP protocol. This section defines the scheme-specific syntax and semantics for RTSP URLs.",
      "ja": "「RTSP」および「RTSPU」スキームがRTSPプロトコルを介してネットワークリソースを参照するために使用されます。このセクションでは、RTSP URLのスキーム固有の構文およびセマンティクスを定義します。"
    },
    {
      "indent": 3,
      "text": "rtsp_URL = ( \"rtsp:\" | \"rtspu:\" ) \"//\" host [ \":\" port ] [ abs_path ] host = <A legal Internet host domain name of IP address (in dotted decimal form), as defined by Section 2.1",
      "ja": "rtsp_URL =（ \"RTSP：\" | \"RTSPU：\"） \"//\" ホスト[ \"：\" ポート] [腹筋_経路]ホスト= <（ドット十進形式で）IPアドレスの法的インターネットホストドメイン名は、セクションで定義されています2.1"
    },
    {
      "indent": 3,
      "text": " of RFC 1123 \\cite{rfc1123}> port = *DIGIT",
      "ja": "RFC 1123の\\ {RFC1123}>ポート= * DIGITを引用"
    },
    {
      "indent": 3,
      "text": "abs_path is defined in [H3.2.1].",
      "ja": "腹筋_経路は[H3.2.1]で定義されています。"
    },
    {
      "indent": 5,
      "text": "Note that fragment and query identifiers do not have a well-defined meaning at this time, with the interpretation left to the RTSP server.",
      "ja": "解釈はRTSPサーバに任せて、フラグメントおよびクエリ識別子が、現時点では明確に定義された意味を持っていないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "The scheme rtsp requires that commands are issued via a reliable protocol (within the Internet, TCP), while the scheme rtspu identifies an unreliable protocol (within the Internet, UDP).",
      "ja": "スキームRTSPは、スキームRTSPUは、信頼できないプロトコル（インターネット内で、UDP）を識別しながらコマンドは、信頼性の高いプロトコル（インターネット内で、TCP）を介して発行されている必要があります。"
    },
    {
      "indent": 3,
      "text": "If the port is empty or not given, port 554 is assumed. The semantics are that the identified resource can be controlled by RTSP at the server listening for TCP (scheme \"rtsp\") connections or UDP (scheme \"rtspu\") packets on that port of host, and the Request-URI for the resource is rtsp_URL.",
      "ja": "ポートが指定された空かそうでない場合は、ポート554を想定しています。セマンティクスは特定されたリソースは、TCP（スキーム「RTSP」）接続またはUDP（スキーム「RTSPU」）ホストのそのポートでパケットを受信サーバーでRTSPによって制御できることであり、資源のためのRequest-URIがrtsp_URLです。"
    },
    {
      "indent": 3,
      "text": "The use of IP addresses in URLs SHOULD be avoided whenever possible (see RFC 1924 [19]).",
      "ja": "URLでのIPアドレスの使用は、（RFC 1924 [19]を参照）可能な限り避けるべきです。"
    },
    {
      "indent": 3,
      "text": "A presentation or a stream is identified by a textual media identifier, using the character set and escape conventions [H3.2] of URLs (RFC 1738 [20]). URLs may refer to a stream or an aggregate of streams, i.e., a presentation. Accordingly, requests described in Section 10 can apply to either the whole presentation or an individual stream within the presentation. Note that some request methods can only be applied to streams, not presentations and vice versa.",
      "ja": "プレゼンテーションやストリームは、URLの[H3.2]（RFC 1738 [20]）文字セットを使用して、テキストメディア識別子によって識別され、規則を脱出されます。 URLは、ストリームまたはストリームの集合、すなわち、プレゼンテーションを参照することができます。したがって、セクション10で説明した要求は、全体のプレゼンテーションやプレゼンテーション内の個々のストリームのいずれにも適用することができます。いくつかのリクエストメソッドのみのストリームではなく、プレゼンテーションおよびその逆にも適用することができることに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "For example, the RTSP URL: rtsp://media.example.com:554/twister/audiotrack",
      "ja": "例えば、RTSPのURL：RTSP：//media.example.com：554 /ツイスター/ audiotrack"
    },
    {
      "indent": 3,
      "text": "identifies the audio stream within the presentation \"twister\", which can be controlled via RTSP requests issued over a TCP connection to port 554 of host media.example.com.",
      "ja": "ホストmedia.example.comのポート554へのTCP接続を介して発行されたRTSP要求を介して制御することができ、プレゼンテーション「ツイスター」、内のオーディオストリームを識別する。"
    },
    {
      "indent": 3,
      "text": "Also, the RTSP URL: rtsp://media.example.com:554/twister",
      "ja": "また、RTSPのURL：RTSP：//media.example.com：554 /ツイスター"
    },
    {
      "indent": 3,
      "text": "identifies the presentation \"twister\", which may be composed of audio and video streams.",
      "ja": "オーディオとビデオのストリームから構成されてもよいプレゼンテーション「ツイスター」を、特定します。"
    },
    {
      "indent": 3,
      "text": "This does not imply a standard way to reference streams in URLs. The presentation description defines the hierarchical relationships in the presentation and the URLs for the individual streams. A presentation description may name a stream \"a.mov\" and the whole presentation \"b.mov\".",
      "ja": "これは、URLのストリームを参照するための標準的な方法を意味するものではありません。プレゼンテーション記述は、プレゼンテーションの階層関係と個々のストリームのURLを定義します。プレゼンテーション記述はストリーム「a.mov」とプレゼンテーション全体「b.mov」という名前を付けて。"
    },
    {
      "indent": 3,
      "text": "The path components of the RTSP URL are opaque to the client and do not imply any particular file system structure for the server.",
      "ja": "RTSPのURLのパスコンポーネントは、クライアントには不透明であり、サーバーのいずれかの特定のファイルシステム構造を意味するものではありません。"
    },
    {
      "indent": 5,
      "text": "This decoupling also allows presentation descriptions to be used with non-RTSP media control protocols simply by replacing the scheme in the URL.",
      "ja": "このデカップリングは、プレゼンテーションの説明は、単にURLにスキームを置き換えることにより、非RTSPメディア制御プロトコルで使用することができます。"
    },
    {
      "indent": 0,
      "text": "3.3 Conference Identifiers",
      "section_title": true,
      "ja": "3.3会議の識別子"
    },
    {
      "indent": 3,
      "text": "Conference identifiers are opaque to RTSP and are encoded using standard URI encoding methods (i.e., LWS is escaped with %). They can contain any octet value. The conference identifier MUST be globally unique. For H.323, the conferenceID value is to be used.",
      "ja": "会議識別子は、RTSPに不透明であり（すなわち、LWSを％でエスケープされている）を、標準的なURI符号化方式を用いて符号化されます。彼らは、任意のオクテット値を含めることができます。会議識別子はグローバルにユニークでなければなりません。 H.323の場合は、conferenceID値が使用されるべきです。"
    },
    {
      "indent": 1,
      "text": "conference-id = 1*xchar",
      "ja": "会議-ID = 1 *のXCHAR"
    },
    {
      "indent": 5,
      "text": "Conference identifiers are used to allow RTSP sessions to obtain\nparameters from multimedia conferences the media server is\nparticipating in. These conferences are created by protocols\noutside the scope of this specification, e.g., H.323 [13] or SIP\n[12]. Instead of the RTSP client explicitly providing transport\ninformation, for example, it asks the media server to use the\nvalues in the conference description instead.",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3.4 Session Identifiers",
      "section_title": true,
      "ja": "3.4セッション識別子"
    },
    {
      "indent": 3,
      "text": "Session identifiers are opaque strings of arbitrary length. Linear white space must be URL-escaped. A session identifier MUST be chosen randomly and MUST be at least eight octets long to make guessing it more difficult. (See Section 16.)",
      "ja": "セッション識別子は、任意の長さの不透明な文字列です。リニアホワイトスペースは、URLエスケープする必要があります。セッション識別子は、ランダムに選択されなければならない、より困難なことを推測させるために、少なくとも8つのオクテット長でなければなりません。 （セクション16を参照してください）"
    },
    {
      "indent": 5,
      "text": "session-id = 1*( ALPHA | DIGIT | safe )",
      "ja": "セッションID = 1 *（ALPHA | DIGIT |安全）"
    },
    {
      "indent": 0,
      "text": "3.5 SMPTE Relative Timestamps",
      "section_title": true,
      "ja": "3.5 SMPTE相対タイムスタンプ"
    },
    {
      "indent": 3,
      "text": "A SMPTE relative timestamp expresses time relative to the start of the clip. Relative timestamps are expressed as SMPTE time codes for frame-level access accuracy. The time code has the format hours:minutes:seconds:frames.subframes, with the origin at the start of the clip. The default smpte format is \"SMPTE 30 drop\" format, with frame rate is 29.97 frames per second. Other SMPTE codes MAY be supported (such as \"SMPTE 25\") through the use of alternative use of \"smpte time\". For the \"frames\" field in the time value can assume the values 0 through 29. The difference between 30 and 29.97 frames per second is handled by dropping the first two frame indices (values 00 and 01) of every minute, except every tenth minute. If the frame value is zero, it may be omitted. Subframes are measured in one-hundredth of a frame.",
      "ja": "SMPTE相対的なタイムスタンプは、クリップの開始からの相対時間を表しています。相対タイムスタンプは、フレームレベルのアクセス精度のためのSMPTEタイムコードとして表されます。 ：分：秒：クリップの開始時に起源を持つframes.subframes、タイムコードの形式は、時間を持っています。フレームレートが毎秒29.97フレームであると、デフォルトのSMPTEフォーマットは、「SMPTE 30ドロップ」の形式です。他のSMPTEコードは「SMPTEタイム」の代替使用の使用を介して（例えば、「SMPTE 25」など）がサポートされるかもしれません。時間値の「フレーム」フィールドは、29を介して値0をとることができるため、毎秒30と29.97フレームとの間の差は10回に1回分を除いて、毎分の最初の2つのフレームインデックス（00値および01）を滴下することによって処理されます。フレーム値がゼロである場合、それは省略されてもよいです。サブフレームは、フレームの百分の一で測定されます。"
    },
    {
      "indent": 3,
      "text": "smpte-range = smpte-type \"=\" smpte-time \"-\" [ smpte-time ] smpte-type = \"smpte\" | \"smpte-30-drop\" | \"smpte-25\" ; other timecodes may be added smpte-time = 1*2DIGIT \":\" 1*2DIGIT \":\" 1*2DIGIT [ \":\" 1*2DIGIT ] [ \".\" 1*2DIGIT ]",
      "ja": "SMPTE-範囲= SMPTE型 \"=\" SMPTEタイム \" - \" [SMPTEタイム] SMPTE-TYPE = \"SMPTE\" | \"SMPTE-30-ドロップ\" | \"SMPTE-25\";他のタイムコードはSMPTEタイムを添加することができる= 1 * 2DIGIT \"：\" 1 * 2DIGIT \"：\" 1 * 2DIGITの[ \"：\" 1 * 2DIGIT \"\" [ 1 * 2DIGIT]"
    },
    {
      "indent": 3,
      "text": "Examples: smpte=10:12:33:20- smpte=10:07:33- smpte=10:07:00-10:07:33:05.01 smpte-25=10:07:00-10:07:33:05.01",
      "ja": "例：SMPTE = 10：12：33：20- SMPTE = 10：07：33- SMPTE = 10：07：00-10：07：33：05.01 SMPTE-25 = 10：07：00-10：33：07 ：05.01"
    },
    {
      "indent": 0,
      "text": "3.6 Normal Play Time",
      "section_title": true,
      "ja": "3.6通常の再生時間"
    },
    {
      "indent": 3,
      "text": "Normal play time (NPT) indicates the stream absolute position relative to the beginning of the presentation. The timestamp consists of a decimal fraction. The part left of the decimal may be expressed in either seconds or hours, minutes, and seconds. The part right of the decimal point measures fractions of a second.",
      "ja": "通常の再生時間（NPT）は、プレゼンテーションの先頭からの相対ストリーム絶対位置を示します。タイムスタンプは小数で構成されています。小数点以下の部分左秒または時間、分、秒のいずれかで発現させることができます。第二の小数点対策画分の一部権利。"
    },
    {
      "indent": 3,
      "text": "The beginning of a presentation corresponds to 0.0 seconds. Negative values are not defined. The special constant now is defined as the current instant of a live event. It may be used only for live events.",
      "ja": "プレゼンテーションの始まりは0.0秒に対応しています。負の値は定義されていません。特別な定数は現在、ライブイベントの現在の瞬間として定義されます。それが唯一のライブイベントのために使用することができます。"
    },
    {
      "indent": 3,
      "text": "NPT is defined as in DSM-CC: \"Intuitively, NPT is the clock the viewer associates with a program. It is often digitally displayed on a VCR. NPT advances normally when in normal play mode (scale = 1), advances at a faster rate when in fast scan forward (high positive scale ratio), decrements when in scan reverse (high negative scale ratio) and is fixed in pause mode. NPT is (logically) equivalent to SMPTE time codes.\" [5]",
      "ja": "NPTは、DSM-CCのように定義される：「直感的に、NPTは、プログラムで、視聴者の仲間クロックであることは、多くの場合、デジタルVCRに表示され、通常の再生モード（スケール= 1）には、より高速で進行するときNPTは正常に進めます。。高速走査速度で前進するとき（高い正縮尺比率）、デクリメントときスキャン逆（負の高スケール比）および休止モードに固定されている。NPTは、（論理的に）SMPTEタイムコードと同等です。」 [5]"
    },
    {
      "indent": 3,
      "text": "npt-range = ( npt-time \"-\" [ npt-time ] ) | ( \"-\" npt-time ) npt-time = \"now\" | npt-sec | npt-hhmmss npt-sec = 1*DIGIT [ \".\" *DIGIT ] npt-hhmmss = npt-hh \":\" npt-mm \":\" npt-ss [ \".\" *DIGIT ] npt-hh = 1*DIGIT ; any positive number npt-mm = 1*2DIGIT ; 0-59 npt-ss = 1*2DIGIT ; 0-59",
      "ja": "NPT-範囲=（NPTタイム \" - \" [NPT時間]）| （ \" - \" NPT-時間）NPT-時間= \"今\" | NPT-秒| NPT-HHMMSS NPT-秒= 1 * DIGITの[ \"\" * DIGIT] NPT-HHMMSS = NPT-HH：NPT-MM \"\" \"：\" NPT-SS [ \"\" * DIGIT] NPT-HH = 1 * DIGIT。任意の正数NPT-MM = 1 * 2DIGIT。 0-59 NPT-SS = 1 * 2DIGIT。 0-59"
    },
    {
      "indent": 3,
      "text": "Examples: npt=123.45-125 npt=12:05:35.3- npt=now-",
      "ja": "例：NPT = 123.45から125 NPT = 12：05：35.3- NPT = NOW-"
    },
    {
      "indent": 5,
      "text": "The syntax conforms to ISO 8601. The npt-sec notation is optimized for automatic generation, the ntp-hhmmss notation for consumption by human readers. The \"now\" constant allows clients to request to receive the live feed rather than the stored or time-delayed version. This is needed since neither absolute time nor zero time are appropriate for this case.",
      "ja": "構文はNPT秒表記は、自動生成のために最適化されたISO 8601に準拠して、人間の読者による消費のためのNTP-HHMMSS表記。 「今」の定数は、クライアントがライブフィードではなく、保存されたまたは時間遅延バージョンを受けるために要求することができます。絶対時間も時間ゼロでもないが、この場合に適していますので、これが必要とされています。"
    },
    {
      "indent": 0,
      "text": "3.7 Absolute Time",
      "section_title": true,
      "ja": "3.7絶対時間"
    },
    {
      "indent": 5,
      "text": "Absolute time is expressed as ISO 8601 timestamps, using UTC (GMT).\nFractions of a second may be indicated.",
      "raw": true
    },
    {
      "indent": 5,
      "text": "utc-range = \"clock\" \"=\" utc-time \"-\" [ utc-time ] utc-time = utc-date \"T\" utc-time \"Z\" utc-date = 8DIGIT ; < YYYYMMDD > utc-time = 6DIGIT [ \".\" fraction ] ; < HHMMSS.fraction >",
      "ja": "UTC-範囲= \"時計\" \"=\" UTC時間 \" - \" [UTC時間] UTC時間= UTC日付 \"T\" UTCタイム \"Z\" UTC-日付= 8DIGIT。 <YYYYMMDD> UTC時刻= 6DIGIT [ \"\"分数]; <HHMMSS.fraction>"
    },
    {
      "indent": 5,
      "text": "Example for November 8, 1996 at 14h37 and 20 and a quarter seconds UTC:",
      "ja": "14h37と20時1996年11月8日と四分の一秒のUTCの例："
    },
    {
      "indent": 5,
      "text": "19961108T143720.25Z",
      "ja": "19961108T143720.25Z"
    },
    {
      "indent": 0,
      "text": "3.8 Option Tags",
      "section_title": true,
      "ja": "3.8オプションタグ"
    },
    {
      "indent": 3,
      "text": "Option tags are unique identifiers used to designate new options in RTSP. These tags are used in Require (Section 12.32) and Proxy-Require (Section 12.27) header fields.",
      "ja": "オプションタグは、RTSPで新しいオプションを指定するために使用される一意の識別子です。これらのタグは、（セクション12.32）を必要とし、プロキシ要求（セクション12.27）ヘッダーフィールドで使用されています。"
    },
    {
      "indent": 3,
      "text": "Syntax:",
      "ja": "構文："
    },
    {
      "indent": 5,
      "text": "option-tag = 1*xchar",
      "ja": "オプションタグ= 1 * XCHAR"
    },
    {
      "indent": 3,
      "text": "The creator of a new RTSP option should either prefix the option with a reverse domain name (e.g., \"com.foo.mynewfeature\" is an apt name for a feature whose inventor can be reached at \"foo.com\"), or register the new option with the Internet Assigned Numbers Authority (IANA).",
      "ja": "新しいRTSPオプションの作成者は、逆ドメイン名を持つオプション（例えば、「com.foo.mynewfeatureは」発明者「foo.com」に到達することができる機能のaptの名前である）の接頭辞、または登録する必要がありますどちらかIANA（Internet Assigned Numbers Authority）によって新しいオプション。"
    },
    {
      "indent": 0,
      "text": "3.8.1 Registering New Option Tags with IANA",
      "section_title": true,
      "ja": "IANAとの新しいオプションタグの登録3.8.1"
    },
    {
      "indent": 3,
      "text": "When registering a new RTSP option, the following information should be provided:",
      "ja": "新しいRTSPオプションを登録すると、次の情報が提供されなければなりません。"
    },
    {
      "indent": 5,
      "text": "* Name and description of option. The name may be of any length, but SHOULD be no more than twenty characters long. The name MUST not contain any spaces, control characters or periods. * Indication of who has change control over the option (for example, IETF, ISO, ITU-T, other international standardization bodies, a consortium or a particular company or group of companies);",
      "ja": "*オプションの名前と説明。名前は、任意の長さのものであってもよいが、これ以上20文字以下に長くなければなりません。名前にスペース、制御文字またはピリオドを含めることはできません。 *オプションの制御を変更する持っている者の指示（例えば、IETF、ISO、ITU-T、他の国際標準化機関、コンソーシアムまたは特定の企業または企業グループ）。"
    },
    {
      "indent": 5,
      "text": "* A reference to a further description, if available, for example\n  (in order of preference) an RFC, a published paper, a patent\n  filing, a technical report, documented source code or a computer\n  manual;\n* For proprietary options, contact information (postal and email\n  address);",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4 RTSP Message",
      "ja": "4 RTSPメッセージ"
    },
    {
      "indent": 3,
      "text": "RTSP is a text-based protocol and uses the ISO 10646 character set in UTF-8 encoding (RFC 2279 [21]). Lines are terminated by CRLF, but receivers should be prepared to also interpret CR and LF by themselves as line terminators.",
      "ja": "RTSPは、テキストベースのプロトコルであり、UTF-8エンコーディングにISO 10646文字セットを使用する（RFC 2279 [21]）。行はCRLFで終了しているが、受信機は、ラインターミネータとして自分自身でCRとLFを解釈するために準備する必要があります。"
    },
    {
      "indent": 5,
      "text": "Text-based protocols make it easier to add optional parameters in a self-describing manner. Since the number of parameters and the frequency of commands is low, processing efficiency is not a concern. Text-based protocols, if done carefully, also allow easy implementation of research prototypes in scripting languages such as Tcl, Visual Basic and Perl.",
      "ja": "テキストベースのプロトコルは、それが簡単に自己記述的にオプションのパラメータを追加します。パラメータの数及びコマンドの頻度が低いため、処理効率が問題ではありません。慎重に行われた場合、テキストベースのプロトコルは、また、Tclの、Visual BasicやPerlなどのスクリプト言語の研究試作品の容易な実装を可能にします。"
    },
    {
      "indent": 5,
      "text": "The 10646 character set avoids tricky character set switching, but is invisible to the application as long as US-ASCII is being used. This is also the encoding used for RTCP. ISO 8859-1 translates directly into Unicode with a high-order octet of zero. ISO 8859-1 characters with the most-significant bit set are represented as 1100001x 10xxxxxx. (See RFC 2279 [21])",
      "ja": "10646文字セットは、トリッキーな文字セットの切り替えを回避できますが、限り、US-ASCIIが使用されているように、アプリケーションには見えません。これはまた、RTCPのために使用されるエンコーディングです。 ISO 8859-1は、ゼロの上位オクテットでユニコードに直接変換します。最上位ビットがセットされたISO 8859-1文字が1100001x 10xxxxxxにとして表現されています。 （RFC 2279 [21]参照）。"
    },
    {
      "indent": 3,
      "text": "RTSP messages can be carried over any lower-layer transport protocol that is 8-bit clean.",
      "ja": "RTSPメッセージは、8ビットクリーンである任意の下層のトランスポートプロトコルを介して行うことができます。"
    },
    {
      "indent": 3,
      "text": "Requests contain methods, the object the method is operating upon and parameters to further describe the method. Methods are idempotent, unless otherwise noted. Methods are also designed to require little or no state maintenance at the media server.",
      "ja": "リクエストは、メソッド、メソッドが時に動作しているオブジェクトと別の方法を説明するためのパラメータを含みます。特に断りのない限り、方法は、冪等です。方法は、メディアサーバーではほとんどあるいはまったく状態の維持を必要とするように設計されています。"
    },
    {
      "indent": 0,
      "text": "4.1 Message Types",
      "section_title": true,
      "ja": "4.1メッセージタイプ"
    },
    {
      "indent": 3,
      "text": "See [H4.1]",
      "ja": "[H4.1]を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.2 Message Headers",
      "section_title": true,
      "ja": "4.2メッセージヘッダ"
    },
    {
      "indent": 3,
      "text": "See [H4.2]",
      "ja": "[H4.2]を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.3 Message Body",
      "section_title": true,
      "ja": "4.3メッセージ本文"
    },
    {
      "indent": 3,
      "text": "See [H4.3]",
      "ja": "[H4.3]を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.4 Message Length",
      "section_title": true,
      "ja": "4.4メッセージの長さ"
    },
    {
      "indent": 3,
      "text": "When a message body is included with a message, the length of that body is determined by one of the following (in order of precedence):",
      "ja": "メッセージ本体がメッセージに含まれている場合、その本体の長さは、（優先順位で）次のいずれかによって決定されます。"
    },
    {
      "indent": 3,
      "text": "1. Any response message which MUST NOT include a message body (such as the 1xx, 204, and 304 responses) is always terminated by the first empty line after the header fields, regardless of the entity-header fields present in the message. (Note: An empty line consists of only CRLF.)",
      "ja": "1.メッセージ本体を含んではいけません任意の応答メッセージにかかわらず、常にメッセージに存在するエンティティヘッダフィールドの、ヘッダフィールドの後の最初の空行で終了する（例えば1XX、204、及び304個の応答として）。 （注：空行のみCRLFで構成されています。）"
    },
    {
      "indent": 3,
      "text": "2. If a Content-Length header field (section 12.14) is present, its value in bytes represents the length of the message-body. If this header field is not present, a value of zero is assumed.",
      "ja": "Content-Lengthヘッダフィールド（セクション12.14）が存在する場合2.バイト単位でその値はメッセージボディの長さを表します。このヘッダフィールドが存在しない場合、ゼロの値が想定されます。"
    },
    {
      "indent": 3,
      "text": "3. By the server closing the connection. (Closing the connection cannot be used to indicate the end of a request body, since that would leave no possibility for the server to send back a response.)",
      "ja": "接続を閉じるサーバによって3。 （つまり、サーバがレスポンスを返送するための可能性を残していないことになるので、接続を閉じると、リクエストボディの終了を示すために使用できません。）"
    },
    {
      "indent": 3,
      "text": "Note that RTSP does not (at present) support the HTTP/1.1 \"chunked\" transfer coding(see [H3.6]) and requires the presence of the Content-Length header field.",
      "ja": "RTSPは、（現時点で）HTTPをサポートしていないことに注意してください/ 1.1「チャンク」転送符号化（参照[H3.6]）とContent-Lengthヘッダフィールドの存在を必要とします。"
    },
    {
      "indent": 5,
      "text": "Given the moderate length of presentation descriptions returned, the server should always be able to determine its length, even if it is generated dynamically, making the chunked transfer encoding unnecessary. Even though Content-Length must be present if there is any entity body, the rules ensure reasonable behavior even if the length is not given explicitly.",
      "ja": "返されたプレゼンテーション記述の適度な長さを考えると、サーバは常にそれがチャンク転送エンコードが不要になって、動的に生成された場合でも、その長さを決定することができるはずです。任意のエンティティボディがある場合のContent-Lengthが存在していなければならないにもかかわらず、ルールは長さが明示的に指定されていない場合でも、合理的な行動を確保します。"
    },
    {
      "indent": 0,
      "text": "5 General Header Fields",
      "ja": "5つの一般的なヘッダフィールド"
    },
    {
      "indent": 3,
      "text": "See [H4.5], except that Pragma, Transfer-Encoding and Upgrade headers are not defined:",
      "ja": "そのプラグマ、転送エンコーディングを除いて、[H4.5]を参照してくださいとアップグレードヘッダが定義されていません。"
    },
    {
      "indent": 6,
      "text": "general-header = Cache-Control ; Section 12.8 | Connection ; Section 12.10 | Date ; Section 12.18 | Via ; Section 12.43",
      "ja": "一般ヘッダー=のCache-Control。セクション12.8 |接続; 12.10 |日;セクション12.18 |経由して、セクション12.43"
    },
    {
      "indent": 0,
      "text": "6 Request",
      "ja": "6リクエスト"
    },
    {
      "indent": 3,
      "text": "A request message from a client to a server or vice versa includes, within the first line of that message, the method to be applied to the resource, the identifier of the resource, and the protocol version in use.",
      "ja": "サーバ、またはその逆へのクライアントからの要求メッセージは、そのメッセージの最初のライン内で、メソッドは、リソース、リソースの識別子、および使用中のプロトコル・バージョンに適用することを含みます。"
    },
    {
      "indent": 7,
      "text": "Request      =       Request-Line          ; Section 6.1\n             *(      general-header        ; Section 5\n             |       request-header        ; Section 6.2\n             |       entity-header )       ; Section 8.1\n                     CRLF\n                     [ message-body ]      ; Section 4.3",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6.1 Request Line",
      "section_title": true,
      "ja": "6.1要求行"
    },
    {
      "indent": 2,
      "text": "Request-Line = Method SP Request-URI SP RTSP-Version CRLF",
      "ja": "リクエストライン=メソッドSPのRequest-URI SP RTSP  - バージョンCRLF"
    },
    {
      "indent": 3,
      "text": "Method = \"DESCRIBE\" ; Section 10.2 | \"ANNOUNCE\" ; Section 10.3 | \"GET_PARAMETER\" ; Section 10.8 | \"OPTIONS\" ; Section 10.1 | \"PAUSE\" ; Section 10.6 | \"PLAY\" ; Section 10.5 | \"RECORD\" ; Section 10.11 | \"REDIRECT\" ; Section 10.10 | \"SETUP\" ; Section 10.4 | \"SET_PARAMETER\" ; Section 10.9 | \"TEARDOWN\" ; Section 10.7 | extension-method",
      "ja": "メソッド=「DESCRIBE」。 10.2節| 「ANNOUNCE」。 10.3 | 「GET_PARAMETER」。 10.8節| 「OPTIONS」。 10.1節| 「PAUSE」。 10.6節| \"遊びます\" ;セクション10.5 | 「RECORD」。セクション10.11 | 「リダイレクト」。セクション10.10 | \"セットアップ\" ; 10.4 | 「SET_PARAMETER」。 10.9節| \"取り壊す\" ; 10.7節|拡張メソッド"
    },
    {
      "indent": 2,
      "text": "extension-method = token",
      "ja": "拡張方式=トークン"
    },
    {
      "indent": 2,
      "text": "Request-URI = \"*\" | absolute_URI",
      "ja": "Request-URI = \"*\" | absolute_URI"
    },
    {
      "indent": 2,
      "text": "RTSP-Version = \"RTSP\" \"/\" 1*DIGIT \".\" 1*DIGIT",
      "ja": "RTSP-バージョン= \"RTSP\" \"/\" 1 * DIGIT \"\" 1 * DIGIT"
    },
    {
      "indent": 0,
      "text": "6.2 Request Header Fields",
      "section_title": true,
      "ja": "6.2リクエストヘッダフィールド"
    },
    {
      "indent": 2,
      "text": "request-header = Accept ; Section 12.1 | Accept-Encoding ; Section 12.2 | Accept-Language ; Section 12.3 | Authorization ; Section 12.5 | From ; Section 12.20 | If-Modified-Since ; Section 12.23 | Range ; Section 12.29 | Referer ; Section 12.30 | User-Agent ; Section 12.41",
      "ja": "リクエスト・ヘッダー=受け入れます。 12.1 |受け入れ-エンコーディング;セクション12.2 |受け入れる言語。 12.3節|認証;セクション12.5 |から;セクション12.20 |変更 - 開始。セクション12.23 |範囲 ;セクション12.29 |リファラー;セクション12.30 |ユーザーエージェント ;セクション12.41"
    },
    {
      "indent": 3,
      "text": "Note that in contrast to HTTP/1.1 [2], RTSP requests always contain the absolute URL (that is, including the scheme, host and port) rather than just the absolute path.",
      "ja": "HTTP / 1.1とは対照的に、[2]、RTSP要求は常にいうだけ絶対パスよりも絶対URL（すなわちスキーム、ホストおよびポートを含む、である）を含有する。なお。"
    },
    {
      "indent": 5,
      "text": "HTTP/1.1 requires servers to understand the absolute URL, but clients are supposed to use the Host request header. This is purely needed for backward-compatibility with HTTP/1.0 servers, a consideration that does not apply to RTSP.",
      "ja": "HTTP / 1.1は、絶対URLを理解するためにサーバを必要としますが、クライアントは、Host要求ヘッダーを使用することになっています。これは純粋にHTTP / 1.0サーバ、RTSPには適用されません考慮との下位互換性のために必要とされています。"
    },
    {
      "indent": 3,
      "text": "The asterisk \"*\" in the Request-URI means that the request does not apply to a particular resource, but to the server itself, and is only allowed when the method used does not necessarily apply to a resource. One example would be:",
      "ja": "要求URIにアスタリスク「*」は、要求が特定のリソースへのが、サーバー自体には適用されないことを意味し、及び使用方法は、必ずしもリソースには適用されない場合にのみ許可されます。一つの例は次のようになります。"
    },
    {
      "indent": 5,
      "text": "OPTIONS * RTSP/1.0",
      "ja": "OPTIONS * RTSP / 1.0"
    },
    {
      "indent": 0,
      "text": "7 Response",
      "ja": "7レスポンス"
    },
    {
      "indent": 3,
      "text": "[H6] applies except that HTTP-Version is replaced by RTSP-Version. Also, RTSP defines additional status codes and does not define some HTTP codes. The valid response codes and the methods they can be used with are defined in Table 1.",
      "ja": "[H6]はそのHTTP-バージョンがRTSP-バージョンで置き換えられる以外に適用されます。また、RTSPは、追加のステータスコードを定義し、いくつかのHTTPコードを定義しません。有効な応答コード、それらは表1に定義されていると共に使用することができる方法。"
    },
    {
      "indent": 3,
      "text": "After receiving and interpreting a request message, the recipient responds with an RTSP response message.",
      "ja": "要求メッセージを受信し、解釈した後、受信者は、RTSP応答メッセージで応答します。"
    },
    {
      "indent": 5,
      "text": "Response = Status-Line ; Section 7.1 *( general-header ; Section 5 | response-header ; Section 7.1.2 | entity-header ) ; Section 8.1 CRLF [ message-body ] ; Section 4.3",
      "ja": "レスポンス=ステータスライン。セクション7.1 *（一般ヘッダー;第5 |応答ヘッダ;セクション7.1.2 |エンティティヘッダ）。セクション8.1 CRLF [メッセージ本文]。 4.3節"
    },
    {
      "indent": 0,
      "text": "7.1 Status-Line",
      "section_title": true,
      "ja": "7.1ステータスライン"
    },
    {
      "indent": 3,
      "text": "The first line of a Response message is the Status-Line, consisting of the protocol version followed by a numeric status code, and the textual phrase associated with the status code, with each element separated by SP characters. No CR or LF is allowed except in the final CRLF sequence.",
      "ja": "応答メッセージの最初の行は、SP文字で区切られた各要素と、数値ステータスコードが続くプロトコルバージョン、ステータスコードに関連付けられたテキスト句からなる、ステータスラインです。 CRまたはLF NOが最終のCRLFシーケンス以外で許可されていません。"
    },
    {
      "indent": 3,
      "text": "Status-Line = RTSP-Version SP Status-Code SP Reason-Phrase CRLF",
      "ja": "ステータスライン= RTSP-バージョンのSPステータスコードSP理由-フレーズCRLF"
    },
    {
      "indent": 0,
      "text": "7.1.1 Status Code and Reason Phrase",
      "section_title": true,
      "ja": "7.1.1ステータスコードおよび理由句"
    },
    {
      "indent": 3,
      "text": "The Status-Code element is a 3-digit integer result code of the attempt to understand and satisfy the request. These codes are fully defined in Section 11. The Reason-Phrase is intended to give a short textual description of the Status-Code. The Status-Code is intended for use by automata and the Reason-Phrase is intended for the human user. The client is not required to examine or display the Reason-Phrase.",
      "ja": "ステータスコードエレメントは、理解し、要求を満足させる試みの3桁の整数の結果コードです。これらのコードが完全にセクション11で定義されている理由-フレーズは、ステータスコードの短いテキスト記述を与えることを目的としています。ステータスコードは、オートマトンによる使用を目的としており、理由-フレーズは人間のユーザを対象としています。クライアントが理由-フレーズを調べたり、表示するために必要とされていません。"
    },
    {
      "indent": 3,
      "text": "The first digit of the Status-Code defines the class of response. The last two digits do not have any categorization role. There are 5 values for the first digit:",
      "ja": "ステータスコードの最初の数字は応答のクラスを定義します。最後の2桁は任意の分類の役割を持っていません。最初の数字のための5つの値があります。"
    },
    {
      "indent": 5,
      "text": "* 1xx: Informational - Request received, continuing process * 2xx: Success - The action was successfully received, understood, and accepted * 3xx: Redirection - Further action must be taken in order to complete the request * 4xx: Client Error - The request contains bad syntax or cannot be fulfilled * 5xx: Server Error - The server failed to fulfill an apparently valid request",
      "ja": "*の1xx：情報 -  * 2xxの受信、継続的なプロセスを要求：成功 - アクションが正常に受信された理解、そして* 3xxの受け入れ：リダイレクション - さらなるアクションが要求を完了するために取る*の4xxする必要があります：クライアントエラー - リクエストが含まれています不正な構文または* 5xxの成就することはできません：サーバーエラー - サーバーが明らかに有効な要求を満たすことができませんでした"
    },
    {
      "indent": 3,
      "text": "The individual values of the numeric status codes defined for RTSP/1.0, and an example set of corresponding Reason-Phrase's, are presented below. The reason phrases listed here are only recommended - they may be replaced by local equivalents without affecting the protocol. Note that RTSP adopts most HTTP/1.1 [2] status codes and adds RTSP-specific status codes starting at x50 to avoid conflicts with newly defined HTTP status codes.",
      "ja": "RTSP / 1.0用に定義された数値ステータスコードの個々の値、および対応する理由-フレーズのセットの例は、以下に提示されています。ここに記載されている理由フレーズのみを推奨している - 彼らはプロトコルに影響を与えることなく、地元の同等物に置き換えることができます。 RTSPは、ほとんどHTTP / 1.1 [2]ステータスコードを採用し、新たに定義されたHTTPステータスコードとの競合を避けるために、X50で始まるRTSP固有のステータスコードを付加することに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "Status-Code = \"100\" ; Continue | \"200\" ; OK | \"201\" ; Created | \"250\" ; Low on Storage Space | \"300\" ; Multiple Choices | \"301\" ; Moved Permanently | \"302\" ; Moved Temporarily | \"303\" ; See Other | \"304\" ; Not Modified | \"305\" ; Use Proxy | \"400\" ; Bad Request | \"401\" ; Unauthorized | \"402\" ; Payment Required | \"403\" ; Forbidden | \"404\" ; Not Found | \"405\" ; Method Not Allowed | \"406\" ; Not Acceptable | \"407\" ; Proxy Authentication Required | \"408\" ; Request Time-out | \"410\" ; Gone | \"411\" ; Length Required | \"412\" ; Precondition Failed | \"413\" ; Request Entity Too Large | \"414\" ; Request-URI Too Large | \"415\" ; Unsupported Media Type | \"451\" ; Parameter Not Understood | \"452\" ; Conference Not Found | \"453\" ; Not Enough Bandwidth | \"454\" ; Session Not Found | \"455\" ; Method Not Valid in This State | \"456\" ; Header Field Not Valid for Resource | \"457\" ; Invalid Range | \"458\" ; Parameter Is Read-Only | \"459\" ; Aggregate operation not allowed | \"460\" ; Only aggregate operation allowed | \"461\" ; Unsupported transport | \"462\" ; Destination unreachable | \"500\" ; Internal Server Error | \"501\" ; Not Implemented | \"502\" ; Bad Gateway | \"503\" ; Service Unavailable | \"504\" ; Gateway Time-out | \"505\" ; RTSP Version not supported | \"551\" ; Option not supported | extension-code",
      "ja": "ステータスコード=「100」;続行| 「200」。 OK | 「201」。作成| 「250」。ストレージ容量が少ないです| 「300」。複数の選択肢| 「301」。恒久的に移動| 「302」。一時的に移動| 「303」。その他を見ます| 「304」。変更されません| 「305」。プロキシを使用します| 「400」。不正なリクエスト| 「401」。無断| 「402」。支払いが必要| 「403」。禁断| 「404」。見つかりません| 「405」。メソッド許可されません| 「406」。許容できません| 「407」。プロキシ認証が必要| 「408」。要求のタイムアウト| 「410」。ゴーン| 「411」。長さが必要| 「412」。前提条件の失敗| 「413」。エンティティが大きすぎる依頼| 「414」。リクエストURIが大きすぎます| 「415」。サポートされていないメディアタイプ| 「451」。パラメータ分かりません| 「452」。会議が見つかりません| 「453」。ない十分な帯域幅| 「454」。セッションが見つかりません| 「455」。この状態では有効ではありませんメソッド| 「456」。リソースは有効ではありませんヘッダーフィールド| 「457」。無効な範囲| 「458」。パラメータは、読み取り専用であります| 「459」。集計操作許可されていません| 「460」。許可される唯一の集約演算| 「461」。サポートされていない交通機関| 「462」。宛先到達不能| 「500」。内部サーバーエラー| 「501」。実装されていません| 「502」。不正なゲートウェイ| 「503」。サービスは利用できません| 「504」。ゲートウェイタイムアウト| 「505」。 RTSPバージョンはサポートされていません| 「551」。オプションがサポートされていません|延長コード"
    },
    {
      "indent": 3,
      "text": "extension-code = 3DIGIT",
      "ja": "拡張コード= 3DIGIT"
    },
    {
      "indent": 3,
      "text": "Reason-Phrase = *<TEXT, excluding CR, LF>",
      "ja": "理由-フレーズ= * <TEXT、除くCR、LF>"
    },
    {
      "indent": 3,
      "text": "RTSP status codes are extensible. RTSP applications are not required to understand the meaning of all registered status codes, though such understanding is obviously desirable. However, applications MUST understand the class of any status code, as indicated by the first digit, and treat any unrecognized response as being equivalent to the x00 status code of that class, with the exception that an unrecognized response MUST NOT be cached. For example, if an unrecognized status code of 431 is received by the client, it can safely assume that there was something wrong with its request and treat the response as if it had received a 400 status code. In such cases, user agents SHOULD present to the user the entity returned with the response, since that entity is likely to include human-readable information which will explain the unusual status.",
      "ja": "RTSPステータスコードは、拡張可能です。そのような理解は明らかに望ましいですが、RTSPアプリケーションは、登録されているすべてのステータスコードの意味を理解する必要はありません。ただし、アプリケーションは最初の数字で示されるように、任意のステータスコードのクラスを理解し、認識されない応答をキャッシュしてはならないことを除いて、そのクラスのX00ステータスコードと同等のものとして認識されない応答を扱わなければなりません。例えば、431の認識されていないステータスコードがクライアントによって受信された場合、それは安全にその要求に何か問題があったと仮定することができますし、それが400のステータスコードを受け取ったかのように応答を扱います。そのエンティティが異常状態を説明する人間可読情報を含む可能性があるので、このような場合、ユーザエージェントは、エンティティが応答で返さユーザに提示しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Code reason",
      "ja": "コード理由"
    },
    {
      "indent": 3,
      "text": "100 Continue all",
      "ja": "100は、すべての続行します"
    },
    {
      "indent": 3,
      "text": "200 OK all 201 Created RECORD 250 Low on Storage Space RECORD",
      "ja": "200 OK収納スペースRECORDに低RECORD 250を作成したすべての201"
    },
    {
      "indent": 3,
      "text": "300 Multiple Choices all 301 Moved Permanently all 302 Moved Temporarily all 303 See Other all 305 Use Proxy all",
      "ja": "300の複数の選択肢は、すべての301永久移動全て302は、すべての一時全303を見る他のすべての305を使用プロキシを動かし"
    },
    {
      "indent": 3,
      "text": "400 Bad Request all 401 Unauthorized all 402 Payment Required all 403 Forbidden all 404 Not Found all 405 Method Not Allowed all 406 Not Acceptable all 407 Proxy Authentication Required all 408 Request Timeout all 410 Gone all 411 Length Required all 412 Precondition Failed DESCRIBE, SETUP 413 Request Entity Too Large all 414 Request-URI Too Long all 415 Unsupported Media Type all 451 Invalid parameter SETUP 452 Illegal Conference Identifier SETUP 453 Not Enough Bandwidth SETUP 454 Session Not Found all 455 Method Not Valid In This State all 456 Header Field Not Valid all 457 Invalid Range PLAY 458 Parameter Is Read-Only SET_PARAMETER 459 Aggregate Operation Not Allowed all 460 Only Aggregate Operation Allowed all 461 Unsupported Transport all 462 Destination Unreachable all",
      "ja": "400不正な要求全て401不正全403は全て405メソッドは、すべて407プロキシ認証が必要に許容されないすべての406のすべての410は全412前提条件がDESCRIBE失敗に必要なすべての411の長さをゴーン全て408要求タイムアウトを許可されていないが見つかりませんすべての404禁止に必要なすべての402支払い、SETUP 413すべての有効なすべての456ヘッダーフィールドこの状態で有効なすべての415サポートされていないメディアタイプがすべて451無効なパラメータ設定452不正な会議識別子SETUP 453ノット・イナフ帯域幅SETUP 454セッションのすべての455の方法が見つかりません414のRequest-URIが長すぎる、すべてのエンティティが大きすぎないない要求457無効なレンジは458パラメータはすべて460のみ集計操作はすべて、すべてのサポートされていない461交通すべての462宛先到達不能可不可、読み取り専用SET_PARAMETER 459集計操作ですPLAY"
    },
    {
      "indent": 3,
      "text": "500 Internal Server Error all 501 Not Implemented all 502 Bad Gateway all 503 Service Unavailable all 504 Gateway Timeout all 505 RTSP Version Not Supported all 551 Option not support all",
      "ja": "500内部サーバーエラーすべての501はすべて502不正なゲートウェイ実装されていないすべての503サービスを使用できませんすべての504ゲートウェイタイムアウト全て505 RTSPのバージョンは、すべてをサポートしていないすべての551オプションをサポートされていません"
    },
    {
      "indent": 6,
      "text": "Table 1: Status codes and their usage with RTSP methods",
      "ja": "表1：ステータスコードとRTSPの方法とその使用方法"
    },
    {
      "indent": 0,
      "text": "7.1.2 Response Header Fields",
      "section_title": true,
      "ja": "7.1.2レスポンスヘッダフィールド"
    },
    {
      "indent": 3,
      "text": "The response-header fields allow the request recipient to pass additional information about the response which cannot be placed in the Status-Line. These header fields give information about the server and about further access to the resource identified by the Request-URI.",
      "ja": "レスポンスヘッダフィールドは、リクエストの受信者は、ステータスラインに配置することができない応答に関する追加情報を通過させます。これらのヘッダーフィールドは、サーバに関するとRequest-URIによって識別されたリソースへのさらなるアクセスについての情報を与えます。"
    },
    {
      "indent": 3,
      "text": "response-header = Location ; Section 12.25 | Proxy-Authenticate ; Section 12.26 | Public ; Section 12.28 | Retry-After ; Section 12.31 | Server ; Section 12.36 | Vary ; Section 12.42 | WWW-Authenticate ; Section 12.44",
      "ja": "レスポンス・ヘッダー=場所。セクション12.25 |プロキシ認証。セクション12.26 |公 ;セクション12.28 |リトライした後、セクション12.31 |サーバー;セクション12.36 |ヴァリ;セクション12.42 | WWW認証;セクション12.44"
    },
    {
      "indent": 3,
      "text": "Response-header field names can be extended reliably only in combination with a change in the protocol version. However, new or experimental header fields MAY be given the semantics of response-header fields if all parties in the communication recognize them to be response-header fields. Unrecognized header fields are treated as entity-header fields.",
      "ja": "レスポンスヘッダフィールド名はプロトコルバージョンにおける変化との組み合わせでのみ確実に拡張することができます。通信のすべての当事者がレスポンスヘッダフィールドであることをそれらを認識場合は、新しいまたは実験ヘッダフィールドは、レスポンスヘッダフィールドの意味論を与えてもよいです。認識されていないヘッダフィールドは、エンティティヘッダフィールドとして扱われます。"
    },
    {
      "indent": 0,
      "text": "8 Entity",
      "ja": "8エンティティ"
    },
    {
      "indent": 3,
      "text": "Request and Response messages MAY transfer an entity if not otherwise restricted by the request method or response status code. An entity consists of entity-header fields and an entity-body, although some responses will only include the entity-headers.",
      "ja": "そうでない場合は、要求メソッドやレスポンスのステータスコードによって制限されていない場合は要求メッセージと応答メッセージは、エンティティを転送することができます。いくつかの応答のみエンティティヘッダを含むであろうが、エンティティは、エンティティ - ヘッダフィールド及びエンティティ - 本体から成ります。"
    },
    {
      "indent": 3,
      "text": "In this section, both sender and recipient refer to either the client or the server, depending on who sends and who receives the entity.",
      "ja": "このセクションでは、送信者と受信者の両方を送信し、誰エンティティの受信者に応じて、クライアントまたはサーバのいずれかを参照してください。"
    },
    {
      "indent": 0,
      "text": "8.1 Entity Header Fields",
      "section_title": true,
      "ja": "8.1エンティティヘッダフィールド"
    },
    {
      "indent": 3,
      "text": "Entity-header fields define optional metainformation about the entity-body or, if no body is present, about the resource identified by the request.",
      "ja": "全く体が存在しない場合、エンティティヘッダフィールドは、要求によって識別されたリソースについて、エンティティボディ約オプションメタ情報を定義しますか。"
    },
    {
      "indent": 5,
      "text": "entity-header = Allow ; Section 12.4 | Content-Base ; Section 12.11 | Content-Encoding ; Section 12.12 | Content-Language ; Section 12.13 | Content-Length ; Section 12.14 | Content-Location ; Section 12.15 | Content-Type ; Section 12.16 | Expires ; Section 12.19 | Last-Modified ; Section 12.24 | extension-header extension-header = message-header",
      "ja": "エンティティヘッダ=許可します。セクション12.4 |コンテンツベース。セクション12.11 |コンテンツのエンコーディング。セクション12.12 |コンテンツの言語。セクション12.13 |コンテンツの長さ。セクション12.14 |コンテンツの場所。セクション12.15 |コンテンツタイプ。セクション12.16 |有効期限;セクション12.19 |最終更新日 ;セクション12.24 |拡張ヘッダ拡張ヘッダ=メッセージ・ヘッダ"
    },
    {
      "indent": 3,
      "text": "The extension-header mechanism allows additional entity-header fields to be defined without changing the protocol, but these fields cannot be assumed to be recognizable by the recipient. Unrecognized header fields SHOULD be ignored by the recipient and forwarded by proxies.",
      "ja": "拡張ヘッダメカニズムは、追加のエンティティヘッダフィールドは、プロトコルを変更せずに定義されるように、これらのフィールドは、受信者によって認識可能であると仮定することができない可能にします。認識されていないヘッダフィールドは、受信者によって無視され、プロキシによって転送されるべきです。"
    },
    {
      "indent": 0,
      "text": "8.2 Entity Body",
      "section_title": true,
      "ja": "8.2エンティティボディ"
    },
    {
      "indent": 3,
      "text": "See [H7.2]",
      "ja": "[H7.2]を参照してください。"
    },
    {
      "indent": 0,
      "text": "9 Connections",
      "ja": "9つの接続"
    },
    {
      "indent": 3,
      "text": "RTSP requests can be transmitted in several different ways:",
      "ja": "RTSP要求は、いくつかの異なる方法で送信することができます。"
    },
    {
      "indent": 5,
      "text": "* persistent transport connections used for several\n  request-response transactions;\n* one connection per request/response transaction;\n* connectionless mode.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The type of transport connection is defined by the RTSP URI (Section 3.2). For the scheme \"rtsp\", a persistent connection is assumed, while the scheme \"rtspu\" calls for RTSP requests to be sent without setting up a connection.",
      "ja": "トランスポート接続のタイプは、RTSP URI（3.2節）によって定義されます。スキーム「RTSPUは」接続を設定せずに送信されるRTSP要求を呼び出している間スキーム「RTSP」の場合、永続的な接続は、想定されます。"
    },
    {
      "indent": 3,
      "text": "Unlike HTTP, RTSP allows the media server to send requests to the media client. However, this is only supported for persistent connections, as the media server otherwise has no reliable way of reaching the client. Also, this is the only way that requests from media server to client are likely to traverse firewalls.",
      "ja": "HTTPとは異なり、RTSPは、メディアサーバはメディアクライアントに要求を送信することができます。メディアサーバーは、そうでない場合は、クライアントに到達する信頼できる方法を持っていないしかし、これは、持続的な接続のためにサポートされています。また、これは、メディアサーバーからクライアントにファイアウォールを通過する可能性がある要求した唯一の方法です。"
    },
    {
      "indent": 0,
      "text": "9.1 Pipelining",
      "section_title": true,
      "ja": "9.1パイプライン"
    },
    {
      "indent": 3,
      "text": "A client that supports persistent connections or connectionless mode MAY \"pipeline\" its requests (i.e., send multiple requests without waiting for each response). A server MUST send its responses to those requests in the same order that the requests were received.",
      "ja": "「パイプライン」の要求が（すなわち、各応答を待たずに複数の要求を送信する）かもしれない持続的な接続またはコネクションレスモードをサポートするクライアント。サーバーは、要求が受け取られたのと同じ順序でこれらの要求への応答を送らなければなりません。"
    },
    {
      "indent": 0,
      "text": "9.2 Reliability and Acknowledgements",
      "section_title": true,
      "ja": "9.2信頼性と謝辞"
    },
    {
      "indent": 3,
      "text": "Requests are acknowledged by the receiver unless they are sent to a multicast group. If there is no acknowledgement, the sender may resend the same message after a timeout of one round-trip time (RTT). The round-trip time is estimated as in TCP (RFC 1123) [18], with an initial round-trip value of 500 ms. An implementation MAY cache the last RTT measurement as the initial value for future connections.",
      "ja": "それらは、マルチキャストグループに送信されない限り、リクエストは受信機によって確認されます。肯定応答がない場合、送信者は1ラウンドトリップ時間（RTT）のタイムアウト後に同じメッセージを再送信することができます。往復時間は500ミリ秒の初期ラウンドトリップ値で、TCP（RFC 1123）[18]のように推定されます。実装は将来の接続のための初期値として最後のRTT測定をキャッシュすることができます。"
    },
    {
      "indent": 3,
      "text": "If a reliable transport protocol is used to carry RTSP, requests MUST NOT be retransmitted; the RTSP application MUST instead rely on the underlying transport to provide reliability.",
      "ja": "信頼性のあるトランスポートプロトコルがRTSPを運ぶために使用されている場合は、要求が再送されてはなりません。 RTSPのアプリケーションではなく、信頼性を提供するために、基礎となるトランスポートに依存しなければなりません。"
    },
    {
      "indent": 5,
      "text": "If both the underlying reliable transport such as TCP and the RTSP application retransmit requests, it is possible that each packet loss results in two retransmissions. The receiver cannot typically take advantage of the application-layer retransmission since the transport stack will not deliver the application-layer retransmission before the first attempt has reached the receiver. If the packet loss is caused by congestion, multiple retransmissions at different layers will exacerbate the congestion.",
      "ja": "TCPやRTSPアプリケーション再送要求などの基本的な信頼性の高いトランスポートの両方が、それが可能であれば2回の再送信の各パケット損失結果は。最初の試みがレシーバに達する前にトランスポートスタックは、アプリケーション層の再送を配信しませんので、受信機は、通常、アプリケーション層の再送信を利用することはできません。パケット損失が混雑によって引き起こされている場合、異なる層に複数の再送は、輻輳を悪化させるだろう。"
    },
    {
      "indent": 5,
      "text": "If RTSP is used over a small-RTT LAN, standard procedures for optimizing initial TCP round trip estimates, such as those used in T/TCP (RFC 1644) [22], can be beneficial.",
      "ja": "RTSPは、小RTT LAN上で使用される場合、そのようなT / TCP（RFC 1644）で使用されるような初期のTCPのラウンドトリップの推定値を、最適化するための標準的な手順は、[22]、有益であり得ます。"
    },
    {
      "indent": 3,
      "text": "The Timestamp header (Section 12.38) is used to avoid the retransmission ambiguity problem [23, p. 301] and obviates the need for Karn's algorithm.",
      "ja": "タイムスタンプ・ヘッダ（セクション12.38）は、再送曖昧性の問題[23、Pを回避するために使用されます。 301]とカーンのアルゴリズムを不要にします。"
    },
    {
      "indent": 3,
      "text": "Each request carries a sequence number in the CSeq header (Section 12.17), which is incremented by one for each distinct request transmitted. If a request is repeated because of lack of acknowledgement, the request MUST carry the original sequence number (i.e., the sequence number is not incremented).",
      "ja": "各要求は、送信された各個別の要求のために1だけインクリメントされるのCSeqヘッダ（セクション12.17）、のシーケンス番号を運びます。要求があるため、確認応答の欠如の反復された場合、要求元のシーケンス番号（すなわち、シーケンス番号がインクリメントされていない）を搬送しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Systems implementing RTSP MUST support carrying RTSP over TCP and MAY support UDP. The default port for the RTSP server is 554 for both UDP and TCP.",
      "ja": "RTSPを実装するシステムでは、TCP上のRTSPを運んでサポートしなければならないとUDPをサポートするかもしれません。 RTSPサーバのデフォルトのポートはUDPとTCPの両方のための554です。"
    },
    {
      "indent": 3,
      "text": "A number of RTSP packets destined for the same control end point may be packed into a single lower-layer PDU or encapsulated into a TCP stream. RTSP data MAY be interleaved with RTP and RTCP packets. Unlike HTTP, an RTSP message MUST contain a Content-Length header whenever that message contains a payload. Otherwise, an RTSP packet is terminated with an empty line immediately following the last message header.",
      "ja": "同じ制御エンドポイント宛RTSPパケットの数は、単一の下位層PDUに充填またはTCPストリームにカプセル化されてもよいです。 RTSPデータは、RTPとRTCPパケットとインターリーブされるかもしれません。そのメッセージは、ペイロードを含むたびに、HTTPとは異なり、RTSPメッセージは、Content-Lengthヘッダを含まなければなりません。そうでなければ、RTSPパケットが直ちに最後のメッセージヘッダーを次の空行で終了します。"
    },
    {
      "indent": 0,
      "text": "10 Method Definitions",
      "ja": "10のメソッド定義"
    },
    {
      "indent": 3,
      "text": "The method token indicates the method to be performed on the resource identified by the Request-URI. The method is case-sensitive. New methods may be defined in the future. Method names may not start with a $ character (decimal 24) and must be a token. Methods are summarized in Table 2.",
      "ja": "方法トークンは、Request-URIによって識別されたリソース上で実行される方法を示しています。この方法は、大文字と小文字が区別されます。新しい方法は、将来的に定義されてもよいです。メソッド名は$文字（24進）で始めることはできませんし、トークンでなければなりません。メソッドを表2にまとめられています。"
    },
    {
      "indent": 6,
      "text": "method direction object requirement DESCRIBE C->S P,S recommended ANNOUNCE C->S, S->C P,S optional GET_PARAMETER C->S, S->C P,S optional OPTIONS C->S, S->C P,S required (S->C: optional) PAUSE C->S P,S recommended PLAY C->S P,S required RECORD C->S P,S optional REDIRECT S->C P,S optional SETUP C->S S required SET_PARAMETER C->S, S->C P,S optional TEARDOWN C->S P,S required",
      "ja": "メソッド方向オブジェクト要件はC-> SP、推奨S ANNOUNCE C-> S、S-> CP、任意GET_PARAMETER C-> S、S-> CP S、任意OPTIONS C-> S、S-> CP、SをDESCRIBE必要（S-> C：オプション）PAUSE C-> SP、SはPLAY C-> SPを推奨し、SはRECORD C-> SP、SオプションREDIRECT S-> CPが必要、SオプションSETUP C-> SSはSET_PARAMETER C-必要> S、S-> CP、SオプションTEARDOWN C-> SP、S所要"
    },
    {
      "indent": 6,
      "text": "Table 2: Overview of RTSP methods, their direction, and what objects (P: presentation, S: stream) they operate on",
      "ja": "表2：RTSPメソッドの概要、その方向、およびどのオブジェクト（P：プレゼンテーション、S：ストリーム）彼らは上で動作"
    },
    {
      "indent": 3,
      "text": "Notes on Table 2: PAUSE is recommended, but not required in that a fully functional server can be built that does not support this method, for example, for live feeds. If a server does not support a particular method, it MUST return \"501 Not Implemented\" and a client SHOULD not try this method again for this server.",
      "ja": "表2の注：PAUSEが完全に機能するサーバが構築できることをお勧めしますが、中に必要とされていないライブフィードのために、例えば、このメソッドをサポートしていません。サーバは特定のメソッドをサポートしていない場合、それは「501が実装されていません」返さなければならないと、クライアントは、このサーバーのために再び、この方法を試してはなりません。"
    },
    {
      "indent": 0,
      "text": "10.1 OPTIONS",
      "section_title": true,
      "ja": "10.1 OPTIONS"
    },
    {
      "indent": 3,
      "text": "The behavior is equivalent to that described in [H9.2]. An OPTIONS request may be issued at any time, e.g., if the client is about to try a nonstandard request. It does not influence server state.",
      "ja": "動作は[H9.2]に記載のものと同等です。クライアントが標準以外の要求をしてみてくださいしようとしている場合はOPTIONS要求は、例えば、任意の時点で発行することができます。これは、サーバーの状態に影響を与えません。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: OPTIONS * RTSP/1.0 CSeq: 1 Require: implicit-play Proxy-Require: gzipped-messages",
      "ja": "C-> S：OPTIONS * RTSP / 1.0のCSeq：1が必要：暗黙のプレイプロキシが必要：gzip圧縮され、メッセージを"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 1 Public: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：1公開：DESCRIBE、SETUP、TEARDOWN、PLAY、PAUSE"
    },
    {
      "indent": 3,
      "text": "Note that these are necessarily fictional features (one would hope that we would not purposefully overlook a truly useful feature just so that we could have a strong example in this section).",
      "ja": "これらは必ずしも架空の特徴（1我々は、このセクションでは、強力な例を持つことができるだけのように、我々は意図的に本当に便利な機能を見落とさないことを望んでいるだろう）であることに注意してください。"
    },
    {
      "indent": 0,
      "text": "10.2 DESCRIBE",
      "section_title": true,
      "ja": "10.2 DESCRIBE"
    },
    {
      "indent": 3,
      "text": "The DESCRIBE method retrieves the description of a presentation or media object identified by the request URL from a server. It may use the Accept header to specify the description formats that the client understands. The server responds with a description of the requested resource. The DESCRIBE reply-response pair constitutes the media initialization phase of RTSP.",
      "ja": "DESCRIBEメソッドは、サーバーからの要求のURLによって識別されるプレゼンテーションまたはメディアオブジェクトの記述を取得します。これは、クライアントが理解記述形式を指定するには、Acceptヘッダーを使用することができます。サーバーは、要求されたリソースの記述で応答します。 DESCRIBE応答 - 応答ペアは、RTSPのメディア初期化フェーズを構成します。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: DESCRIBE rtsp://server.example.com/fizzle/foo RTSP/1.0 CSeq: 312 Accept: application/sdp, application/rtsl, application/mheg",
      "ja": "C-> S：DESCRIBE RTSP：//server.example.com/fizzle/foo RTSP / 1.0のCSeq：312の受け入れ：アプリケーション/ SDP、アプリケーション/ RTSL、アプリケーション/ MHEG"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 312 Date: 23 Jan 1997 15:35:06 GMT Content-Type: application/sdp Content-Length: 376",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：312日付：1997年1月23日午後03時35分06秒GMTのコンテンツタイプ：アプリケーション/ SDPコンテンツの長さ：376"
    },
    {
      "indent": 11,
      "text": "v=0\no=mhandley 2890844526 2890842807 IN IP4 126.16.64.4\ns=SDP Seminar\ni=A Seminar on the session description protocol\nu=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\ne=mjh@isi.edu (Mark Handley)\nc=IN IP4 224.2.17.12/127\nt=2873397496 2873404696\na=recvonly\nm=audio 3456 RTP/AVP 0\nm=video 2232 RTP/AVP 31\nm=whiteboard 32416 UDP WB\na=orient:portrait",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The DESCRIBE response MUST contain all media initialization information for the resource(s) that it describes. If a media client obtains a presentation description from a source other than DESCRIBE and that description contains a complete set of media initialization parameters, the client SHOULD use those parameters and not then request a description for the same media via RTSP.",
      "ja": "DESCRIBE応答は、それが記述するリソース（複数可）のためのすべてのメディアの初期化情報を含まなければなりません。メディアクライアントは、DESCRIBE以外のソースからプレゼンテーション記述を取得し、その説明は、メディアの初期化パラメータの完全なセットが含まれている場合、クライアントは、これらのパラメータを使用して、RTSPを経由して同じメディアの説明を要求するべきではありません。"
    },
    {
      "indent": 3,
      "text": "Additionally, servers SHOULD NOT use the DESCRIBE response as a means of media indirection.",
      "ja": "また、サーバは、メディア・間接の手段として、DESCRIBE応答を使用しないでください。"
    },
    {
      "indent": 5,
      "text": "Clear ground rules need to be established so that clients have an unambiguous means of knowing when to request media initialization information via DESCRIBE, and when not to. By forcing a DESCRIBE response to contain all media initialization for the set of streams that it describes, and discouraging use of DESCRIBE for media indirection, we avoid looping problems that might result from other approaches.",
      "ja": "クリアグラウンド・ルールは、クライアントがDESCRIBE経由でメディアの初期化情報を要求する際に知っての明確な手段を持っているように確立する必要がある、といないときに。それは説明ストリームのセット、およびメディア・間接のためのDESCRIBEの落胆使用するすべてのメディアの初期化を含むようにDESCRIBE応答を強制することで、我々は他のアプローチから生じる可能性があるループの問題を回避します。"
    },
    {
      "indent": 5,
      "text": "Media initialization is a requirement for any RTSP-based system, but the RTSP specification does not dictate that this must be done via the DESCRIBE method. There are three ways that an RTSP client may receive initialization information:",
      "ja": "メディアの初期化は、任意のRTSPベースのシステムのための必要条件であるが、RTSP仕様では、これはDESCRIBEメソッドを介して行われなければならないことを規定していません。 RTSPクライアントが初期化情報を受け取ることができる3つの方法があります。"
    },
    {
      "indent": 5,
      "text": "* via RTSP's DESCRIBE method;\n* via some other protocol (HTTP, email attachment, etc.);\n* via the command line or standard input (thus working as a browser\n  helper application launched with an SDP file or other media\n  initialization format).",
      "raw": true
    },
    {
      "indent": 5,
      "text": "In the interest of practical interoperability, it is highly recommended that minimal servers support the DESCRIBE method, and highly recommended that minimal clients support the ability to act as a \"helper application\" that accepts a media initialization file from standard input, command line, and/or other means that are appropriate to the operating environment of the client.",
      "ja": "実用的な相互運用性の関心では、非常に最小限のサーバーがDESCRIBEメソッドをサポートし、最小限のクライアントは、標準入力、コマンドラインからのメディアの初期化ファイルを受け入れ、「ヘルパーアプリケーション」として作用する能力をサポートすることを強くお勧めします、とすることをお勧めします/またはクライアントの動作環境に適した他の手段。"
    },
    {
      "indent": 0,
      "text": "10.3 ANNOUNCE",
      "section_title": true,
      "ja": "10.3 ANNOUNCE"
    },
    {
      "indent": 3,
      "text": "The ANNOUNCE method serves two purposes:",
      "ja": "ANNOUNCE方法は2つの目的を果たします。"
    },
    {
      "indent": 3,
      "text": "When sent from client to server, ANNOUNCE posts the description of a presentation or media object identified by the request URL to a server. When sent from server to client, ANNOUNCE updates the session description in real-time.",
      "ja": "クライアントからサーバーに送信すると、サーバーへのリクエストURLによって識別されたプレゼンテーションまたはメディアオブジェクトの記述の記事を発表。サーバからクライアントに送信された場合、リアルタイムでの更新にセッション記述を発表。"
    },
    {
      "indent": 3,
      "text": "If a new media stream is added to a presentation (e.g., during a live presentation), the whole presentation description should be sent again, rather than just the additional components, so that components can be deleted.",
      "ja": "新しいメディアストリームが（ライブプレゼンテーション中に、例えば、）プレゼンテーションに追加された場合のコンポーネントを削除することができるように、全体のプレゼンテーション記述は、むしろ単に追加のコンポーネントよりも、再送信する必要があります。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: ANNOUNCE rtsp://server.example.com/fizzle/foo RTSP/1.0 CSeq: 312 Date: 23 Jan 1997 15:35:06 GMT Session: 47112344 Content-Type: application/sdp Content-Length: 332",
      "ja": "C-> S：ANNOUNCE RTSP：//server.example.com/fizzle/foo RTSP / 1.0のCSeq：312日付：1997年1月23日15時35分06秒GMTセッション：47112344のContent-Type：アプリケーション/ SDPコンテンツの長さ： 332"
    },
    {
      "indent": 11,
      "text": "v=0\no=mhandley 2890844526 2890845468 IN IP4 126.16.64.4 s=SDP Seminar\ni=A Seminar on the session description protocol\nu=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\ne=mjh@isi.edu (Mark Handley)\nc=IN IP4 224.2.17.12/127\nt=2873397496 2873404696\na=recvonly\nm=audio 3456 RTP/AVP 0\nm=video 2232 RTP/AVP 31",
      "raw": true
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 312",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：312"
    },
    {
      "indent": 0,
      "text": "10.4 SETUP",
      "section_title": true,
      "ja": "10.4 SETUP"
    },
    {
      "indent": 3,
      "text": "The SETUP request for a URI specifies the transport mechanism to be used for the streamed media. A client can issue a SETUP request for a stream that is already playing to change transport parameters, which a server MAY allow. If it does not allow this, it MUST respond with error \"455 Method Not Valid In This State\". For the benefit of any intervening firewalls, a client must indicate the transport parameters even if it has no influence over these parameters, for example, where the server advertises a fixed multicast address.",
      "ja": "URIのSETUP要求は、ストリーミングメディアに使用するトランスポート機構を指定します。クライアントは、サーバーが可能既にトランスポートパラメータを変更するには再生しているストリームのためのSETUP要求を発行することができます。それがこれを許可しない場合は、エラー「この状態では有効でない455の方法」で応じなければなりません。介在するファイアウォールの利益のために、クライアントは、サーバが固定のマルチキャストアドレスをアドバタイズ例えば、これらのパラメータに対して何ら影響を、持っていない場合でも、トランスポートパラメータを指定する必要があります。"
    },
    {
      "indent": 5,
      "text": "Since SETUP includes all transport initialization information, firewalls and other intermediate network devices (which need this information) are spared the more arduous task of parsing the DESCRIBE response, which has been reserved for media initialization.",
      "ja": "SETUPは、すべてのトランスポート初期化情報が含まれているので、ファイアウォール（この情報を必要とする）は、他の中間ネットワークデバイスは、メディアの初期化のために予約されたDESCRIBE応答を解析するより困難なタスクを免れています。"
    },
    {
      "indent": 3,
      "text": "The Transport header specifies the transport parameters acceptable to the client for data transmission; the response will contain the transport parameters selected by the server.",
      "ja": "トランスポートヘッダは、データ伝送のためにクライアントに許容されるトランスポートパラメータを指定します。応答は、サーバによって選択されたトランスポートパラメータが含まれています。"
    },
    {
      "indent": 4,
      "text": "C->S: SETUP rtsp://example.com/foo/bar/baz.rm RTSP/1.0 CSeq: 302 Transport: RTP/AVP;unicast;client_port=4588-4589",
      "ja": "C-> S：SETUPのRTSP：//example.com/foo/bar/baz.rm RTSP / 1.0のCSeq：302トランスポート：RTP / AVP;ユニキャスト; CLIENT_PORT = 4588から4589"
    },
    {
      "indent": 4,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 302 Date: 23 Jan 1997 15:35:06 GMT Session: 47112344 Transport: RTP/AVP;unicast; client_port=4588-4589;server_port=6256-6257",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：302日付：1997年1月23日午後03時35分06秒GMTセッション：47112344トランスポート：RTP / AVP;ユニキャスト; CLIENT_PORT = 4588-4589; SERVER_PORT = 6256-6257"
    },
    {
      "indent": 3,
      "text": "The server generates session identifiers in response to SETUP requests. If a SETUP request to a server includes a session identifier, the server MUST bundle this setup request into the existing session or return error \"459 Aggregate Operation Not Allowed\" (see Section 11.3.10).",
      "ja": "サーバは、SETUP要求に応じてセッション識別子を生成します。サーバーへのSETUP要求は、セッション識別子が含まれている場合、サーバーは、既存のセッションには、この設定要求をバンドルまたは（項11.3.10を参照してください）エラー「459集計操作不可」を返さなければなりません。"
    },
    {
      "indent": 0,
      "text": "10.5 PLAY",
      "section_title": true,
      "ja": "10.5 PLAY"
    },
    {
      "indent": 3,
      "text": "The PLAY method tells the server to start sending data via the mechanism specified in SETUP. A client MUST NOT issue a PLAY request until any outstanding SETUP requests have been acknowledged as successful.",
      "ja": "PLAY方法は、SETUPで指定された機構を介してデータの送信を開始するようにサーバに指示します。未処理のSETUP要求が成功したと認められるまで、クライアントはPLAY要求を発行してはなりません。"
    },
    {
      "indent": 3,
      "text": "The PLAY request positions the normal play time to the beginning of the range specified and delivers stream data until the end of the range is reached. PLAY requests may be pipelined (queued); a server MUST queue PLAY requests to be executed in order. That is, a PLAY request arriving while a previous PLAY request is still active is delayed until the first has been completed.",
      "ja": "PLAY要求は、指定された範囲の先頭に通常のプレイ時間を配置し、範囲の終わりに達するまでストリームデータを配信します。 PLAY要求は（キューに入れられた）パイプライン化されてもよいです。サーバは、順番に実行されるPLAY要求をキューイングしなければいけません。すなわち、第一が完了するまで、前のPLAY要求がまだアクティブである間に到着PLAY要求が遅れている、です。"
    },
    {
      "indent": 5,
      "text": "This allows precise editing.",
      "ja": "これは、正確な編集を可能にします。"
    },
    {
      "indent": 3,
      "text": "For example, regardless of how closely spaced the two PLAY requests in the example below arrive, the server will first play seconds 10 through 15, then, immediately following, seconds 20 to 25, and finally seconds 30 through the end.",
      "ja": "例えば、関係なく、以下の例では2つのプレイ要求を離間方法密接のサーバは、端部を通して30を最初に、次に、秒15 10〜を再生直後に、20秒〜25、そして最後秒であろう、到着します。"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0 CSeq: 835 Session: 12345678 Range: npt=10-15",
      "ja": "C-> S：PLAYのRTSP：RTSP //audio.example.com/audio / 1.0のCSeq：835セッション：12345678範囲：NPT = 10-15"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0 CSeq: 836 Session: 12345678 Range: npt=20-25",
      "ja": "C-> S：PLAYのRTSP：RTSP //audio.example.com/audio / 1.0のCSeq：836セッション：12345678範囲：NPT = 20-25"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0 CSeq: 837 Session: 12345678 Range: npt=30-",
      "ja": "C-> S：PLAYのRTSP：//audio.example.com/audio RTSP / 1.0のCSeq：837セッション：12345678範囲：NPT = 30-"
    },
    {
      "indent": 3,
      "text": "See the description of the PAUSE request for further examples.",
      "ja": "さらに例についてはPAUSE要求の説明を参照してください。"
    },
    {
      "indent": 3,
      "text": "A PLAY request without a Range header is legal. It starts playing a stream from the beginning unless the stream has been paused. If a stream has been paused via PAUSE, stream delivery resumes at the pause point. If a stream is playing, such a PLAY request causes no further action and can be used by the client to test server liveness.",
      "ja": "Rangeヘッダ無しPLAY要求が合法です。ストリームが一時停止されていない限り、それは最初からストリームの再生を開始します。ストリームがPAUSEを介して、一時停止された場合、ストリーム配信を一時停止ポイントで再開されます。ストリームが再生されている場合は、そのようなPLAY要求にはさらにアクションを起こさないとサーバーの活動性をテストするために、クライアントで使用することができます。"
    },
    {
      "indent": 3,
      "text": "The Range header may also contain a time parameter. This parameter specifies a time in UTC at which the playback should start. If the message is received after the specified time, playback is started immediately. The time parameter may be used to aid in synchronization of streams obtained from different sources.",
      "ja": "Rangeヘッダは、時間パラメータを含んでいてもよいです。このパラメータは、再生を開始する時にUTCの時刻を指定します。メッセージは、指定した時間後に受信された場合、再生がすぐに開始されます。時間パラメータは、異なるソースから得られたストリームの同期を助けるために使用することができます。"
    },
    {
      "indent": 3,
      "text": "For a on-demand stream, the server replies with the actual range that will be played back. This may differ from the requested range if alignment of the requested range to valid frame boundaries is required for the media source. If no range is specified in the request, the current position is returned in the reply. The unit of the range in the reply is the same as that in the request.",
      "ja": "オンデマンドストリームの場合、サーバが再生される実際の範囲で応答します。有効なフレーム境界に要求された範囲の位置合わせは、メディアソースのために必要とされる場合、これは要求された範囲と異なる場合があります。いかなる範囲がリクエストで指定されていない場合、現在位置は、応答で返されます。応答における範囲の単位は、要求と同じです。"
    },
    {
      "indent": 3,
      "text": "After playing the desired range, the presentation is automatically paused, as if a PAUSE request had been issued.",
      "ja": "PAUSE要求が発行されたかのように、所望の範囲を演奏した後、プレゼンテーションが自動的に一時停止されています。"
    },
    {
      "indent": 3,
      "text": "The following example plays the whole presentation starting at SMPTE time code 0:10:20 until the end of the clip. The playback is to start at 15:36 on 23 Jan 1997.",
      "ja": "次の例では、クリップの最後まで、SMPTEタイムコード0時10分20秒から始まる全体のプレゼンテーションを果たしています。再生は、1997年1月23日15時36分に開始することです。"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/twister.en RTSP/1.0 CSeq: 833 Session: 12345678 Range: smpte=0:10:20-;time=19970123T153600Z",
      "ja": "C-> S：PLAYのRTSP：833セッション：12345678範囲：RTSP / 1.0のCSeq //audio.example.com/twister.en SMPTE = 0：10：20-;時間= 19970123T153600Z"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 833 Date: 23 Jan 1997 15:35:06 GMT Range: smpte=0:10:22-;time=19970123T153600Z",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：833日付：1997年1月23日午後03時35分06秒GMT範囲：SMPTE = 0：10：22-;時間= 19970123T153600Z"
    },
    {
      "indent": 3,
      "text": "For playing back a recording of a live presentation, it may be desirable to use clock units:",
      "ja": "ライブプレゼンテーションの録画を再生するためには、クロック・ユニットを使用することが望ましいです。"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://audio.example.com/meeting.en RTSP/1.0 CSeq: 835 Session: 12345678 Range: clock=19961108T142300Z-19961108T143520Z",
      "ja": "C-> S：PLAYのRTSP：RTSP //audio.example.com/meeting.en / 1.0のCSeq：835セッション：12345678範囲：クロック= 19961108T142300Z-19961108T143520Z"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 835 Date: 23 Jan 1997 15:35:06 GMT",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：835日付：1997年1月23日午後03時35分06秒GMT"
    },
    {
      "indent": 3,
      "text": "A media server only supporting playback MUST support the npt format and MAY support the clock and smpte formats.",
      "ja": "再生のみをサポートしているメディアサーバは、NPTのフォーマットをサポートしなければならないし、クロックおよびSMPTEフォーマットをサポートするかもしれません。"
    },
    {
      "indent": 0,
      "text": "10.6 PAUSE",
      "section_title": true,
      "ja": "10.6 PAUSE"
    },
    {
      "indent": 3,
      "text": "The PAUSE request causes the stream delivery to be interrupted (halted) temporarily. If the request URL names a stream, only playback and recording of that stream is halted. For example, for audio, this is equivalent to muting. If the request URL names a presentation or group of streams, delivery of all currently active streams within the presentation or group is halted. After resuming playback or recording, synchronization of the tracks MUST be maintained. Any server resources are kept, though servers MAY close the session and free resources after being paused for the duration specified with the timeout parameter of the Session header in the SETUP message.",
      "ja": "PAUSE要求は、ストリーム配信を一時的に（停止）中断させます。リクエストURL名流れた場合、そのストリームの唯一の再生と録音を停止します。例えば、オーディオのため、これはミュートに相当します。リクエストURL名ストリームのプレゼンテーションやグループの場合は、プレゼンテーションやグループ内のすべての現在アクティブなストリームの配信が停止されます。再生又は記録を再開した後、トラックの同期が維持されなければなりません。サーバは、SETUPメッセージ内のセッションヘッダーのタイムアウトパラメータで指定された期間のために一時停止された後、セッションやリソースの解放を閉じるかもしれませんが、任意のサーバリソースは、保持されます。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: PAUSE rtsp://example.com/fizzle/foo RTSP/1.0 CSeq: 834 Session: 12345678",
      "ja": "C-> S：PAUSEのRTSP：//example.com/fizzle/foo RTSP / 1.0のCSeq：834セッション：12345678"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 834 Date: 23 Jan 1997 15:35:06 GMT",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：834日付：1997年1月23日午後03時35分06秒GMT"
    },
    {
      "indent": 3,
      "text": "The PAUSE request may contain a Range header specifying when the stream or presentation is to be halted. We refer to this point as the \"pause point\". The header must contain exactly one value rather than a time range. The normal play time for the stream is set to the pause point. The pause request becomes effective the first time the server is encountering the time point specified in any of the currently pending PLAY requests. If the Range header specifies a time outside any currently pending PLAY requests, the error \"457 Invalid Range\" is returned. If a media unit (such as an audio or video frame) starts presentation at exactly the pause point, it is not played or recorded. If the Range header is missing, stream delivery is interrupted immediately on receipt of the message and the pause point is set to the current normal play time.",
      "ja": "PAUSE要求は、ストリームまたはプレゼンテーションを停止するときを指定するRangeヘッダを含んでいてもよいです。私たちは、「一時停止ポイント」として、このポイントを参照してください。ヘッダは、1つの値ではなく、時間範囲を含んでいなければなりません。ストリームの通常再生時間が一時停止ポイントに設定されています。一時停止要求は、サーバが現在保留中のPLAY要求のいずれかで指定された時間点に遭遇している初めて有効になります。 Rangeヘッダは、任意の現在保留中PLAY要求外の時間を指定した場合、エラー「457無効な範囲」が返されます。 （例えば、オーディオまたはビデオフレームのような）メディアユニットが正確に一時停止ポイントにおいてプレゼンテーションを開始する場合は、再生または記録されません。 Rangeヘッダが欠落している場合、ストリーム配信は、メッセージの受信時に、すぐに中断され、一時停止ポイントは、現在の通常再生時に設定されています。"
    },
    {
      "indent": 3,
      "text": "A PAUSE request discards all queued PLAY requests. However, the pause point in the media stream MUST be maintained. A subsequent PLAY request without Range header resumes from the pause point.",
      "ja": "PAUSE要求はすべてキューに入れられPLAY要求を破棄します。しかし、メディアストリーム内の一時停止ポイントを維持しなければなりません。 Rangeヘッダすることなく次のPLAY要求が一時停止ポイントから再開します。"
    },
    {
      "indent": 3,
      "text": "For example, if the server has play requests for ranges 10 to 15 and 20 to 29 pending and then receives a pause request for NPT 21, it would start playing the second range and stop at NPT 21. If the pause request is for NPT 12 and the server is playing at NPT 13 serving the first play request, the server stops immediately. If the pause request is for NPT 16, the server stops after completing the first play request and discards the second play request.",
      "ja": "例えば、サーバが有する場合29ペンディング15及び20の範囲10の要求を再生し、その後NPT 21のための一時停止要求を受信し、それが第二範囲の再生を開始し、一時停止要求がNPT 12のためのものである場合NPT 21で停止しますそして、サーバが最初の再生要求にサービスを提供NPT 13で演奏され、サーバは即座に停止します。一時停止要求がNPT 16に対するものである場合、サーバは、最初のプレイ要求を完了した後に停止し、第二のプレイ要求を破棄します。"
    },
    {
      "indent": 3,
      "text": "As another example, if a server has received requests to play ranges 10 to 15 and then 13 to 20 (that is, overlapping ranges), the PAUSE request for NPT=14 would take effect while the server plays the first range, with the second PLAY request effectively being ignored, assuming the PAUSE request arrives before the server has started playing the second, overlapping range. Regardless of when the PAUSE request arrives, it sets the NPT to 14.",
      "ja": "別の例として、サーバは、範囲10〜15を再生する要求を受信した場合、その後、13（つまり、範囲が重複である）20サーバは第二と、第1の範囲を果たしながら、NPT = 14用PAUSE要求が有効になりますPLAY要求が効果的にサーバーが第二、重複範囲の再生を開始する前PAUSE要求が到着すると仮定すると、無視されています。かかわらず、PAUSE要求が到着したときの、それは14にNPTを設定します。"
    },
    {
      "indent": 3,
      "text": "If the server has already sent data beyond the time specified in the Range header, a PLAY would still resume at that point in time, as it is assumed that the client has discarded data after that point. This ensures continuous pause/play cycling without gaps.",
      "ja": "サーバがすでにRangeヘッダに指定された時間を超えてデータを送信した場合、クライアントがそのポイントの後にデータを廃棄したことを想定しているとして、PLAYはまだ、その時点で再開します。これは、隙間なく連続一時停止/再生サイクルを保証します。"
    },
    {
      "indent": 0,
      "text": "10.7 TEARDOWN",
      "section_title": true,
      "ja": "10.7 TEARDOWN"
    },
    {
      "indent": 3,
      "text": "The TEARDOWN request stops the stream delivery for the given URI, freeing the resources associated with it. If the URI is the presentation URI for this presentation, any RTSP session identifier associated with the session is no longer valid. Unless all transport parameters are defined by the session description, a SETUP request has to be issued before the session can be played again.",
      "ja": "TEARDOWN要求は、それに関連付けられたリソースを解放し、与えられたURIのためのストリーム配信を停止します。 URIは、このプレゼンテーションのためのプレゼンテーションURIである場合は、セッションに関連付けられている任意のRTSPセッション識別子は、もはや有効ではありません。すべてのトランスポートパラメータがセッション記述で定義されていない限り、SETUP要求は、セッションを再度再生することができる前に発行する必要があります。"
    },
    {
      "indent": 3,
      "text": "Example: C->S: TEARDOWN rtsp://example.com/fizzle/foo RTSP/1.0 CSeq: 892 Session: 12345678 S->C: RTSP/1.0 200 OK CSeq: 892",
      "ja": "例：C-> S：TEARDOWNのRTSP：//example.com/fizzle/foo RTSP / 1.0のCSeq：892セッション：12345678 S-> C：RTSP / 1.0 200 OKのCSeq：892"
    },
    {
      "indent": 0,
      "text": "10.8 GET_PARAMETER",
      "section_title": true,
      "ja": "10.8 GET_PARAMETER"
    },
    {
      "indent": 3,
      "text": "The GET_PARAMETER request retrieves the value of a parameter of a presentation or stream specified in the URI. The content of the reply and response is left to the implementation. GET_PARAMETER with no entity body may be used to test client or server liveness (\"ping\").",
      "ja": "GET_PARAMETER要求は、URIで指定されたプレゼンテーションやストリームのパラメータの値を取得します。返信や応答の内容は、実装に委ねられています。無エンティティボディとGET_PARAMETERは、クライアントまたはサーバの生存性（「ピング」）をテストするために使用することができます。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "S->C: GET_PARAMETER rtsp://example.com/fizzle/foo RTSP/1.0 CSeq: 431 Content-Type: text/parameters Session: 12345678 Content-Length: 15",
      "ja": "S-> C：GET_PARAMETERのRTSP：//example.com/fizzle/foo RTSP / 1.0のCSeq：431のContent-Type：12345678のContent-Length：テキストが/セッションパラメータ15"
    },
    {
      "indent": 11,
      "text": "packets_received\njitter",
      "raw": true
    },
    {
      "indent": 5,
      "text": "C->S: RTSP/1.0 200 OK CSeq: 431 Content-Length: 46 Content-Type: text/parameters",
      "ja": "C-> S：RTSP / 1.0 200 OKのCSeq：431のContent-Length：46 Content-Typeの：テキスト/パラメータ"
    },
    {
      "indent": 11,
      "text": "packets_received: 10\njitter: 0.3838",
      "raw": true
    },
    {
      "indent": 5,
      "text": "The \"text/parameters\" section is only an example type for parameter. This method is intentionally loosely defined with the intention that the reply content and response content will be defined after further experimentation.",
      "ja": "「テキスト/パラメータ」セクションには、パラメータの一例に過ぎタイプです。この方法は、意図的に緩く返信内容と応答内容をさらなる実験の後に定義されることを意図して定義されます。"
    },
    {
      "indent": 0,
      "text": "10.9 SET_PARAMETER",
      "section_title": true,
      "ja": "10.9 SET_PARAMETER"
    },
    {
      "indent": 5,
      "text": "This method requests to set the value of a parameter for a\npresentation or stream specified by the URI.",
      "raw": true
    },
    {
      "indent": 5,
      "text": "A request SHOULD only contain a single parameter to allow the client to determine why a particular request failed. If the request contains several parameters, the server MUST only act on the request if all of the parameters can be set successfully. A server MUST allow a parameter to be set repeatedly to the same value, but it MAY disallow changing parameter values.",
      "ja": "リクエストは、特定の要求が失敗した理由を、クライアントが決定できるようにするために、単一のパラメータを含むべきです。リクエストは、いくつかのパラメータが含まれている場合、サーバはすべてのパラメータが正常に設定できるのであれば、要求に基づいて行動しなければなりません。サーバは、パラメータが同じ値に繰り返し設定することができるようにしなければならないが、それは、パラメータ値を変更する許可しない場合があります。"
    },
    {
      "indent": 5,
      "text": "Note: transport parameters for the media stream MUST only be set with the SETUP command.",
      "ja": "注意：メディアストリームのためのトランスポートパラメータはSETUPコマンドで設定しなければなりません。"
    },
    {
      "indent": 5,
      "text": "Restricting setting transport parameters to SETUP is for the benefit of firewalls.",
      "ja": "SETUPに設定するトランスポートパラメータを制限すると、ファイアウォールの利益のためです。"
    },
    {
      "indent": 5,
      "text": "The parameters are split in a fine-grained fashion so that there can be more meaningful error indications. However, it may make sense to allow the setting of several parameters if an atomic setting is desirable. Imagine device control where the client does not want the camera to pan unless it can also tilt to the right angle at the same time.",
      "ja": "より意味のあるエラー表示ができるように、パラメータは、きめの細かい方法で分割されています。アトミック設定が望ましい場合しかし、それはいくつかのパラメータの設定を許可しても意味があります。クライアントは、それはまた同時に直角に傾けることができない限り、カメラがパンしたくないデバイスの制御を想像してみてください。"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "C->S: SET_PARAMETER rtsp://example.com/fizzle/foo RTSP/1.0 CSeq: 421 Content-length: 20 Content-type: text/parameters",
      "ja": "C-> S：SET_PARAMETERのRTSP：//example.com/fizzle/foo RTSP / 1.0のCSeq：421のContent-Length：20コンテンツタイプ：テキスト/パラメータ"
    },
    {
      "indent": 11,
      "text": "barparam: barstuff",
      "ja": "barparam：barstuff"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 451 Invalid Parameter",
      "ja": "S-> C：RTSP / 1.0 451無効なパラメータ"
    },
    {
      "indent": 11,
      "text": "CSeq: 421\nContent-length: 10\nContent-type: text/parameters",
      "raw": true
    },
    {
      "indent": 11,
      "text": "barparam",
      "ja": "barparam"
    },
    {
      "indent": 5,
      "text": "The \"text/parameters\" section is only an example type for parameter. This method is intentionally loosely defined with the intention that the reply content and response content will be defined after further experimentation.",
      "ja": "「テキスト/パラメータ」セクションには、パラメータの一例に過ぎタイプです。この方法は、意図的に緩く返信内容と応答内容をさらなる実験の後に定義されることを意図して定義されます。"
    },
    {
      "indent": 0,
      "text": "10.10 REDIRECT",
      "section_title": true,
      "ja": "10.10 REDIRECT"
    },
    {
      "indent": 3,
      "text": "A redirect request informs the client that it must connect to another server location. It contains the mandatory header Location, which indicates that the client should issue requests for that URL. It may contain the parameter Range, which indicates when the redirection takes effect. If the client wants to continue to send or receive media for this URI, the client MUST issue a TEARDOWN request for the current session and a SETUP for the new session at the designated host.",
      "ja": "リダイレクト要求は、それが別のサーバーの場所に接続しなければならないことをクライアントに通知します。これは、クライアントがそのURLに対する要求を発行する必要があることを示し必須ヘッダーの場所が含まれています。これは、リダイレクトが有効になるときを示すパラメータ範囲を含むことができます。クライアントがこのURIのためにメディアを送信または受信し続けたい場合は、クライアントは、現在のセッションのためのTEARDOWN要求と、指定されたホストでの新しいセッションのためのSETUPを発行しなければなりません。"
    },
    {
      "indent": 3,
      "text": "This example request redirects traffic for this URI to the new server at the given play time:",
      "ja": "この例で要求が与えられたプレイ時間で、新しいサーバーにこのURIのトラフィックをリダイレクトします。"
    },
    {
      "indent": 5,
      "text": "S->C: REDIRECT rtsp://example.com/fizzle/foo RTSP/1.0 CSeq: 732 Location: rtsp://bigserver.com:8001 Range: clock=19960213T143205Z-",
      "ja": "S-> C：RTSPをリダイレクト：//example.com/fizzle/foo RTSP / 1.0のCSeq：732所在地：RTSP：//bigserver.com：8001範囲：クロック= 19960213T143205Z-"
    },
    {
      "indent": 0,
      "text": "10.11 RECORD",
      "section_title": true,
      "ja": "10.11 RECORD"
    },
    {
      "indent": 3,
      "text": "This method initiates recording a range of media data according to the presentation description. The timestamp reflects start and end time (UTC). If no time range is given, use the start or end time provided in the presentation description. If the session has already started, commence recording immediately.",
      "ja": "この方法は、プレゼンテーション記述に従ってメディアデータの範囲を記録開始します。タイムスタンプは、開始時刻と終了時刻（UTC）を反映しています。何時間範囲を指定しない場合は、プレゼンテーション記述で提供開始や終了時間を使います。セッションがすでに開始されている場合は、すぐに記録を開始。"
    },
    {
      "indent": 3,
      "text": "The server decides whether to store the recorded data under the request-URI or another URI. If the server does not use the request-URI, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header.",
      "ja": "サーバは、リクエストURIまたは別のURIの下に記録されたデータを格納するか否かを判断します。サーバーはリクエストURIを使用していない場合、応答は201（作成される）ことが、要求のステータスを説明し、新たなリソースを指すエンティティ、およびLocationヘッダを含むべきです。"
    },
    {
      "indent": 3,
      "text": "A media server supporting recording of live presentations MUST support the clock range format; the smpte format does not make sense.",
      "ja": "ライブプレゼンテーションの録画をサポートするメディアサーバーは、クロック範囲形式をサポートしなければなりません。 SMPTEフォーマットは意味がありません。"
    },
    {
      "indent": 3,
      "text": "In this example, the media server was previously invited to the conference indicated.",
      "ja": "この例では、メディアサーバは、以前に示された会議に招待されました。"
    },
    {
      "indent": 5,
      "text": "C->S: RECORD rtsp://example.com/meeting/audio.en RTSP/1.0 CSeq: 954 Session: 12345678 Conference: 128.16.64.19/32492374",
      "ja": "C-> S：RECORD RTSP：//example.com/meeting/audio.en RTSP / 1.0のCSeq：954セッション：12345678会議：128.16.64.19/32492374"
    },
    {
      "indent": 0,
      "text": "10.12 Embedded (Interleaved) Binary Data",
      "section_title": true,
      "ja": "組み込み10.12（インターリーブ）バイナリデータ"
    },
    {
      "indent": 3,
      "text": "Certain firewall designs and other circumstances may force a server to interleave RTSP methods and stream data. This interleaving should generally be avoided unless necessary since it complicates client and server operation and imposes additional overhead. Interleaved binary data SHOULD only be used if RTSP is carried over TCP.",
      "ja": "特定のファイアウォールの設計およびその他の状況は、RTSP方法やストリームデータをインターリーブするサーバーを強制する場合があります。それは、クライアントとサーバーの操作を複雑にし、追加のオーバーヘッドを課しているので、このインターリーブは、一般的に必要でない限り避けるべきです。 RTSPはTCP上で実行された場合にインターリーブバイナリデータにのみ使用してください。"
    },
    {
      "indent": 3,
      "text": "Stream data such as RTP packets is encapsulated by an ASCII dollar sign (24 hexadecimal), followed by a one-byte channel identifier, followed by the length of the encapsulated binary data as a binary, two-byte integer in network byte order. The stream data follows immediately afterwards, without a CRLF, but including the upper-layer protocol headers. Each $ block contains exactly one upper-layer protocol data unit, e.g., one RTP packet.",
      "ja": "このようなRTPパケットなどのストリームデータをネットワークバイト順にバイナリ、2バイトの整数としてカプセル化されたバイナリデータの長さに続く1バイトのチャネル識別子に続くASCIIドル記号（24進数）によってカプセル化されます。ストリームデータは、CRLFことなく、直後に従うが、上位層プロトコルヘッダーを含みます。各$ブロックは、1つの上位層プロトコルデータユニット、例えば、1つのRTPパケットを含んでいます。"
    },
    {
      "indent": 3,
      "text": "The channel identifier is defined in the Transport header with the interleaved parameter(Section 12.39).",
      "ja": "チャンネル識別子は、インターリーブパラメータ（セクション12.39）を有するトランスポート・ヘッダに定義されています。"
    },
    {
      "indent": 3,
      "text": "When the transport choice is RTP, RTCP messages are also interleaved by the server over the TCP connection. As a default, RTCP packets are sent on the first available channel higher than the RTP channel. The client MAY explicitly request RTCP packets on another channel. This is done by specifying two channels in the interleaved parameter of the Transport header(Section 12.39).",
      "ja": "輸送選択がRTPである場合には、RTCPメッセージはまた、TCP接続を介してサーバーによってインターリーブされています。デフォルトでは、RTCPパケットは、RTPチャネルよりも最初に使用可能なチャネル上で送信されます。クライアントは、明示的に別のチャンネルにRTCPパケットを要求することができます。これは、トランスポート・ヘッダ（セクション12.39）のインターリーブパラメータに2つのチャネルを指定することによって行われます。"
    },
    {
      "indent": 5,
      "text": "RTCP is needed for synchronization when two or more streams are interleaved in such a fashion. Also, this provides a convenient way to tunnel RTP/RTCP packets through the TCP control connection when required by the network configuration and transfer them onto UDP when possible.",
      "ja": "二つ以上のストリームがこのようなやり方でインターリーブされる場合RTCPは、同期のために必要とされます。また、これは、ネットワーク構成によって必要とされるときにTCP制御接続を介してトンネルRTP / RTCPパケットに便利な方法を提供し、可能な場合はUDPにそれらを転送します。"
    },
    {
      "indent": 5,
      "text": "C->S: SETUP rtsp://foo.com/bar.file RTSP/1.0 CSeq: 2 Transport: RTP/AVP/TCP;interleaved=0-1",
      "ja": "C-> S：SETUPのRTSP：2トランスポート：RTP / AVP / TCP、インターリーブされた= 0-1 RTSP / 1.0のCSeq //foo.com/bar.file"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 2 Date: 05 Jun 1997 18:57:18 GMT Transport: RTP/AVP/TCP;interleaved=0-1",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：2日：1997年6月5日午前18時57分18秒GMTトランスポート：RTP / AVP / TCP;インターリーブさ= 0-1"
    },
    {
      "indent": 11,
      "text": "Session: 12345678",
      "ja": "セッション：12345678"
    },
    {
      "indent": 5,
      "text": "C->S: PLAY rtsp://foo.com/bar.file RTSP/1.0 CSeq: 3 Session: 12345678",
      "ja": "C-> S：PLAYのRTSP：3セッション：12345678 RTSP / 1.0のCSeq //foo.com/bar.file"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 3 Session: 12345678 Date: 05 Jun 1997 18:59:15 GMT RTP-Info: url=rtsp://foo.com/bar.file; seq=232433;rtptime=972948234",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：3セッション：12345678日：1997年6月5日午後6時59分15秒GMT RTP-情報：URL = RTSP：//foo.com/bar.file。 SEQ = 232433; rtptime = 972948234"
    },
    {
      "indent": 5,
      "text": "S->C: $\\000{2 byte length}{\"length\" bytes data, w/RTP header} S->C: $\\000{2 byte length}{\"length\" bytes data, w/RTP header} S->C: $\\001{2 byte length}{\"length\" bytes RTCP packet}",
      "ja": "S-> C：$ \\ 000 {2バイトの長さ} { \"長さ\" バイトデータ、W / RTPヘッダ} S-> C：$ \\ 000 {2バイトの長さ} { \"長さ\" / RTPヘッダwは、データバイト} S-> C：$ \\ 001 {2バイトの長さ} { \"長さ\" は、RTCPパケットをバイト}"
    },
    {
      "indent": 0,
      "text": "11 Status Code Definitions",
      "ja": "11のステータスコードの定義"
    },
    {
      "indent": 3,
      "text": "Where applicable, HTTP status [H10] codes are reused. Status codes that have the same meaning are not repeated here. See Table 1 for a listing of which status codes may be returned by which requests.",
      "ja": "該当する場合は、HTTPステータス[H10]コードが再利用されます。同じ意味を持つステータスコードは、ここでは繰り返しません。ステータスコードは、その要求によって返される可能性があるかのリストについては、表1を参照してください。"
    },
    {
      "indent": 0,
      "text": "11.1 Success 2xx",
      "section_title": true,
      "ja": "11.1成功2XX"
    },
    {
      "indent": 0,
      "text": "11.1.1 250 Low on Storage Space",
      "section_title": true,
      "ja": "ストレージ容量が少ない11.1.1 250"
    },
    {
      "indent": 3,
      "text": "The server returns this warning after receiving a RECORD request that it may not be able to fulfill completely due to insufficient storage space. If possible, the server should use the Range header to indicate what time period it may still be able to record. Since other processes on the server may be consuming storage space simultaneously, a client should take this only as an estimate.",
      "ja": "サーバは、不十分な記憶スペースに完全に満たすことができないことをRECORD要求を受信した後、この警告を返します。可能な場合、サーバーは、まだ記録することができるかもしれない何時間期間を示すために、Rangeヘッダを使用する必要があります。サーバー上の他のプロセスが同時に収納スペースを消費することができるので、クライアントはあくまでも目安としてこれを取る必要があります。"
    },
    {
      "indent": 0,
      "text": "11.2 Redirection 3xx",
      "section_title": true,
      "ja": "11.2リダイレクション3XX"
    },
    {
      "indent": 3,
      "text": "See [H10.3].",
      "ja": "[H10.3]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Within RTSP, redirection may be used for load balancing or redirecting stream requests to a server topologically closer to the client. Mechanisms to determine topological proximity are beyond the scope of this specification.",
      "ja": "RTSPの中では、リダイレクトは負荷分散やクライアントへの位相幾何学的に近いサーバーへのストリーム要求をリダイレクトするために使用することができます。トポロジカル近接性を決定するメカニズムはこの仕様の範囲を超えています。"
    },
    {
      "indent": 0,
      "text": "11.3 Client Error 4xx",
      "section_title": true,
      "ja": "11.3クライアントエラーの4xx"
    },
    {
      "indent": 0,
      "text": "11.3.1 405 Method Not Allowed",
      "section_title": true,
      "ja": "11.3.1 405メソッドは許可されていません"
    },
    {
      "indent": 3,
      "text": "The method specified in the request is not allowed for the resource identified by the request URI. The response MUST include an Allow header containing a list of valid methods for the requested resource. This status code is also to be used if a request attempts to use a method not indicated during SETUP, e.g., if a RECORD request is issued even though the mode parameter in the Transport header only specified PLAY.",
      "ja": "要求で指定されたメソッドは、リクエストURIによって識別されたリソースのために許可されていません。応答は、要求されたリソースのための有効な方法のリストを含む許可ヘッダを含まなければなりません。このステータスコードは、レコード要求が転送ヘッダのみ指定PLAYにもモード​​パラメータも発行された場合、要求は、例えば、セットアップ中に示されていないメソッドを使用しようとする場合に使用されることもあります。"
    },
    {
      "indent": 0,
      "text": "11.3.2 451 Parameter Not Understood",
      "section_title": true,
      "ja": "11.3.2 451パラメータ分かりません"
    },
    {
      "indent": 3,
      "text": "The recipient of the request does not support one or more parameters contained in the request.",
      "ja": "リクエストの受信者は、要求に含まれる1つ以上のパラメータをサポートしていません。"
    },
    {
      "indent": 0,
      "text": "11.3.3 452 Conference Not Found",
      "section_title": true,
      "ja": "11.3.3 452の会議が見つかりませんでした"
    },
    {
      "indent": 3,
      "text": "The conference indicated by a Conference header field is unknown to the media server.",
      "ja": "会議ヘッダフィールドで示された会議は、メディアサーバーには不明です。"
    },
    {
      "indent": 0,
      "text": "11.3.4 453 Not Enough Bandwidth",
      "section_title": true,
      "ja": "11.3.4 453帯域幅不足"
    },
    {
      "indent": 3,
      "text": "The request was refused because there was insufficient bandwidth. This may, for example, be the result of a resource reservation failure.",
      "ja": "十分な帯域幅があったため、要求は拒否されました。これは、例えば、リソース予約の失敗の結果であり得ます。"
    },
    {
      "indent": 0,
      "text": "11.3.5 454 Session Not Found",
      "section_title": true,
      "ja": "11.3.5 454セッションが見つかりませんでした"
    },
    {
      "indent": 3,
      "text": "The RTSP session identifier in the Session header is missing, invalid, or has timed out.",
      "ja": "セッションヘッダ内のRTSPセッション識別子が無効、不足している、またはタイムアウトしました。"
    },
    {
      "indent": 0,
      "text": "11.3.6 455 Method Not Valid in This State",
      "section_title": true,
      "ja": "この状態では11.3.6 455メソッド有効でありません"
    },
    {
      "indent": 3,
      "text": "The client or server cannot process this request in its current state. The response SHOULD contain an Allow header to make error recovery easier.",
      "ja": "クライアントまたはサーバが現在の状態でこの要求を処理できません。応答がエラー回復を容易にすることを許可するヘッダを含むべきです。"
    },
    {
      "indent": 0,
      "text": "11.3.7 456 Header Field Not Valid for Resource",
      "section_title": true,
      "ja": "11.3.7リソースのための456ヘッダーフィールド有効でありません"
    },
    {
      "indent": 3,
      "text": "The server could not act on a required request header. For example, if PLAY contains the Range header field but the stream does not allow seeking.",
      "ja": "サーバーは、必要なリクエストヘッダに作用することができませんでした。 PLAYは、Rangeヘッダフィールドが含まれているが、たとえば、ストリームが求めていることはできません。"
    },
    {
      "indent": 0,
      "text": "11.3.8 457 Invalid Range",
      "section_title": true,
      "ja": "11.3.8 457無効な範囲"
    },
    {
      "indent": 3,
      "text": "The Range value given is out of bounds, e.g., beyond the end of the presentation.",
      "ja": "所定の範囲の値が範囲外、例えば、プレゼンテーションの終わりを超えています。"
    },
    {
      "indent": 0,
      "text": "11.3.9 458 Parameter Is Read-Only",
      "section_title": true,
      "ja": "11.3.9 458パラメータは読み取り専用です"
    },
    {
      "indent": 3,
      "text": "The parameter to be set by SET_PARAMETER can be read but not modified.",
      "ja": "SET_PARAMETERによって設定されるパラメータは読みますが変更されないことができます。"
    },
    {
      "indent": 0,
      "text": "11.3.10 459 Aggregate Operation Not Allowed",
      "section_title": true,
      "ja": "11.3.10 459集計操作は許可されていません"
    },
    {
      "indent": 3,
      "text": "The requested method may not be applied on the URL in question since it is an aggregate (presentation) URL. The method may be applied on a stream URL.",
      "ja": "それは集計（プレゼンテーション）URLであるため、要求されたメソッドは、問題のURLには適用されない場合があります。メソッドは、ストリームのURLにも適用することができます。"
    },
    {
      "indent": 0,
      "text": "11.3.11 460 Only Aggregate Operation Allowed",
      "section_title": true,
      "ja": "11.3.11 460のみ集計操作可"
    },
    {
      "indent": 3,
      "text": "The requested method may not be applied on the URL in question since it is not an aggregate (presentation) URL. The method may be applied on the presentation URL.",
      "ja": "それは集計（プレゼンテーション）URLではありませんので、要求されたメソッドは、問題のURLには適用されない場合があります。この方法は、プレゼンテーションのURLにも適用することができます。"
    },
    {
      "indent": 0,
      "text": "11.3.12 461 Unsupported Transport",
      "section_title": true,
      "ja": "11.3.12 461サポートされていない交通"
    },
    {
      "indent": 3,
      "text": "The Transport field did not contain a supported transport specification.",
      "ja": "トランスポートフィールドは、サポートされているトランスポート仕様が含まれていませんでした。"
    },
    {
      "indent": 0,
      "text": "11.3.13 462 Destination Unreachable",
      "section_title": true,
      "ja": "11.3.13 462宛先到達不能"
    },
    {
      "indent": 3,
      "text": "The data transmission channel could not be established because the client address could not be reached. This error will most likely be the result of a client attempt to place an invalid Destination parameter in the Transport field.",
      "ja": "クライアントのアドレスに到達することができなかったので、データ伝送チャネルを確立できませんでした。このエラーは、最も可能性の高い交通フィールドに無効な宛先パラメータを配置するクライアントの試みの結果になります。"
    },
    {
      "indent": 0,
      "text": "11.3.14 551 Option not supported",
      "section_title": true,
      "ja": "11.3.14 551オプションがサポートされていません"
    },
    {
      "indent": 3,
      "text": "An option given in the Require or the Proxy-Require fields was not supported. The Unsupported header should be returned stating the option for which there is no support.",
      "ja": "必要とするか、またはプロキシ要求される分野に与えられたオプションがサポートされませんでした。サポートされていないヘッダは、サポートはありませんそのためのオプションを述べ返されるべきです。"
    },
    {
      "indent": 0,
      "text": "12 Header Field Definitions",
      "ja": "12のヘッダーフィールドの定義"
    },
    {
      "indent": 3,
      "text": "HTTP/1.1 [2] or other, non-standard header fields not listed here currently have no well-defined meaning and SHOULD be ignored by the recipient.",
      "ja": "HTTP / 1.1 [2]又は他の、ここに記載されていない非標準ヘッダフィールドは現在、明確に定義された意味を有し、受信者によって無視されるべきです。"
    },
    {
      "indent": 3,
      "text": "Table 3 summarizes the header fields used by RTSP. Type \"g\" designates general request headers to be found in both requests and responses, type \"R\" designates request headers, type \"r\" designates response headers, and type \"e\" designates entity header fields. Fields marked with \"req.\" in the column labeled \"support\" MUST be implemented by the recipient for a particular method, while fields marked \"opt.\" are optional. Note that not all fields marked \"req.\" will be sent in every request of this type. The \"req.\" means only that client (for response headers) and server (for request headers) MUST implement the fields. The last column lists the method for which this header field is meaningful; the designation \"entity\" refers to all methods that return a message body. Within this specification, DESCRIBE and GET_PARAMETER fall into this class.",
      "ja": "表3は、RTSPによって使用されるヘッダフィールドをまとめたものです。タイプ「R」は、要求ヘッダーを指定する、要求と応答の両方で発見される一般的な要求ヘッダーを指定する「G」を入力し、タイプ「R」は応答ヘッダを指定し、「E」エンティティヘッダフィールドを指定を入力します。でマークされたフィールド「REQ。」フィールドがマークされている間の欄に「サポート」、特定のメソッドのための受信者によって実装されなければならない「オプトインを。」オプションです。いないすべてのフィールドがマークされていることに注意してください「REQを。」このタイプのリクエストごとに送信されます。 \"REQ。\" （リクエストヘッダ用）だけで（レスポンスヘッダーの）クライアントとサーバがフィールドを実装しなければならないことを意味します。最後の列は、このヘッダフィールドが意味されている方法を示しています。名称「エンティティ」は、メッセージ本体を返す全ての方法を意味します。この仕様書の中で、DESCRIBEとGET_PARAMETERは、このクラスに分類されます。"
    },
    {
      "indent": 3,
      "text": "Header type support methods Accept R opt. entity Accept-Encoding R opt. entity Accept-Language R opt. all Allow r opt. all Authorization R opt. all Bandwidth R opt. all Blocksize R opt. all but OPTIONS, TEARDOWN Cache-Control g opt. SETUP Conference R opt. SETUP Connection g req. all Content-Base e opt. entity Content-Encoding e req. SET_PARAMETER Content-Encoding e req. DESCRIBE, ANNOUNCE Content-Language e req. DESCRIBE, ANNOUNCE Content-Length e req. SET_PARAMETER, ANNOUNCE Content-Length e req. entity Content-Location e opt. entity Content-Type e req. SET_PARAMETER, ANNOUNCE Content-Type r req. entity CSeq g req. all Date g opt. all Expires e opt. DESCRIBE, ANNOUNCE From R opt. all If-Modified-Since R opt. DESCRIBE, SETUP Last-Modified e opt. entity Proxy-Authenticate Proxy-Require R req. all Public r opt. all Range R opt. PLAY, PAUSE, RECORD Range r opt. PLAY, PAUSE, RECORD Referer R opt. all Require R req. all Retry-After r opt. all RTP-Info r req. PLAY Scale Rr opt. PLAY, RECORD Session Rr req. all but SETUP, OPTIONS Server r opt. all Speed Rr opt. PLAY Transport Rr req. SETUP Unsupported r req. all User-Agent R opt. all Via g opt. all WWW-Authenticate r opt. all",
      "ja": "ヘッダタイプのサポート方法は、R optのを受け入れます。エンティティは、受け入れエンコードR optのを。エンティティは、Rオプトイン言語を受け入れます。すべては、R OPTを許可します。すべての認可Rのオプト。すべての帯域幅R OPT。すべてのブロックサイズのR OPT。すべてが、OPTIONS、TEARDOWNのCache-Controlグラムのオプト。 SETUP会議R optを。 SETUP接続グラムreqを。すべてのContent-ベースEのオプト。エンティティe REQをコンテンツエンコーディング。 SET_PARAMETER電子REQをコンテンツエンコーディング。 DESCRIBE、コンテンツ言語電子REQを発表しました。 DESCRIBE、コンテンツ長E REQを発表しました。 SET_PARAMETER、コンテンツ長E REQを発表しました。エンティティのContent-場所電子のオプト。エンティティのContent-Type E reqを。 SET_PARAMETER、のContent-Type R REQを発表しました。エンティティのCSeqグラムreqを。すべての日付グラムのオプト。すべては、電子のオプト期限。 DESCRIBE、Rオプトからお知らせいたします。すべての場合 - 変更 - ので、Rのオプト。 DESCRIBE、SETUPのLast-Modified Eのオプト。エンティティプロキシ認証R REQをプロキシは、要求します。すべての公共のR OPT。すべてのレンジRのオプト。 PLAY、PAUSE、RECORD範囲Rのオプト。 PLAY、PAUSE、RECORDリファラーRのオプト。すべては、R REQを要求します。すべてのリトライ後のR OPT。すべてのRTP-情報は、REQ rを。スケールのRR OPTを果たしています。 PLAY、RECORDセッションのRR REQ。 SETUP、OPTIONSサーバR optを除いてすべて。すべてのスピードのRR OPT。交通のRR REQを果たしています。 SETUPサポートされていないR reqを。すべてのUser-Agent Rのオプト。すべてグラムのオプト経由。すべてのWWW認証器R OPT。すべて"
    },
    {
      "indent": 3,
      "text": "Overview of RTSP header fields",
      "ja": "RTSPヘッダーフィールドの概要"
    },
    {
      "indent": 0,
      "text": "12.1 Accept",
      "section_title": true,
      "ja": "12.1受け入れます"
    },
    {
      "indent": 3,
      "text": "The Accept request-header field can be used to specify certain presentation description content types which are acceptable for the response.",
      "ja": "受け入れリクエストヘッダフィールドは、応答のために許容される特定のプレゼンテーション記述コンテンツタイプを指定するために使用することができます。"
    },
    {
      "indent": 5,
      "text": "The \"level\" parameter for presentation descriptions is properly defined as part of the MIME type registration, not here.",
      "ja": "プレゼンテーションの説明については、「レベル」パラメータが正しくありませんここにMIMEタイプ登録の一部として定義されます。"
    },
    {
      "indent": 3,
      "text": "See [H14.1] for syntax.",
      "ja": "構文については[H14.1]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Example of use: Accept: application/rtsl, application/sdp;level=2",
      "ja": "使用例：受け入れ：アプリケーション/ RTSL、アプリケーション/ SDP;レベル= 2"
    },
    {
      "indent": 0,
      "text": "12.2 Accept-Encoding",
      "section_title": true,
      "ja": "12.2のAccept-エンコーディング"
    },
    {
      "indent": 5,
      "text": "See [H14.3]",
      "ja": "[H14.3]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.3 Accept-Language",
      "section_title": true,
      "ja": "12.3受け入れ言語"
    },
    {
      "indent": 3,
      "text": "See [H14.4]. Note that the language specified applies to the presentation description and any reason phrases, not the media content.",
      "ja": "[H14.4]を参照してください。指定された言語は、プレゼンテーション記述し、任意の理由フレーズではなく、メディアコンテンツに適用されることに注意してください。"
    },
    {
      "indent": 0,
      "text": "12.4 Allow",
      "section_title": true,
      "ja": "12.4許可"
    },
    {
      "indent": 3,
      "text": "The Allow response header field lists the methods supported by the resource identified by the request-URI. The purpose of this field is to strictly inform the recipient of valid methods associated with the resource. An Allow header field must be present in a 405 (Method not allowed) response.",
      "ja": "許可レスポンスヘッダフィールドは、リクエストURIによって識別されたリソースによってサポートされるメソッドを示します。このフィールドの目的は厳密にリソースに関連する有効な方法の受信者に通知することです。許可ヘッダフィールドは405（メソッド許可されていない）応答中に存在しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Example of use: Allow: SETUP, PLAY, RECORD, SET_PARAMETER",
      "ja": "使用例：許可：SETUP、PLAY、RECORD、SET_PARAMETER"
    },
    {
      "indent": 0,
      "text": "12.5 Authorization",
      "section_title": true,
      "ja": "12.5認証"
    },
    {
      "indent": 5,
      "text": "See [H14.8]",
      "ja": "[H14.8]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.6 Bandwidth",
      "section_title": true,
      "ja": "12.6帯域幅"
    },
    {
      "indent": 3,
      "text": "The Bandwidth request header field describes the estimated bandwidth available to the client, expressed as a positive integer and measured in bits per second. The bandwidth available to the client may change during an RTSP session, e.g., due to modem retraining.",
      "ja": "帯域要求ヘッダフィールドは、正の整数として表され、ビット毎秒で測定され、クライアントが利用可能な推定帯域幅が記載されています。クライアントに利用可能な帯域幅が原因モデムの再教育に、例えば、RTSPセッション中に変更されることがあります。"
    },
    {
      "indent": 3,
      "text": "Bandwidth = \"Bandwidth\" \":\" 1*DIGIT",
      "ja": "帯域幅= \"帯域幅\" \"：\" 1 * DIGIT"
    },
    {
      "indent": 3,
      "text": "Example: Bandwidth: 4000",
      "ja": "例：帯域幅：4000"
    },
    {
      "indent": 0,
      "text": "12.7 Blocksize",
      "section_title": true,
      "ja": "12.7ブロックサイズ"
    },
    {
      "indent": 3,
      "text": "This request header field is sent from the client to the media server asking the server for a particular media packet size. This packet size does not include lower-layer headers such as IP, UDP, or RTP. The server is free to use a blocksize which is lower than the one requested. The server MAY truncate this packet size to the closest multiple of the minimum, media-specific block size, or override it with the media-specific size if necessary. The block size MUST be a positive decimal number, measured in octets. The server only returns an error (416) if the value is syntactically invalid.",
      "ja": "このリクエストヘッダフィールドは、特定のメディアパケットサイズのサーバーを尋ねるメディアクライアントからサーバに送信されます。このパケットサイズは、IP、UDP、またはRTPなどの下層ヘッダーを含みません。サーバーは、要求されたものよりも低くなっているブロックサイズを使用して自由です。サーバは、最小、メディア固有のブロックサイズの最も近い倍数にこのパケットサイズを切り捨て、または必要に応じてメディア固有のサイズでそれを無効にすることができます。ブロックサイズはオクテットで測定された正の10進数でなければなりません。サーバは、値が構文的に無効である場合は、エラー（416）を返します。"
    },
    {
      "indent": 0,
      "text": "12.8 Cache-Control",
      "section_title": true,
      "ja": "12.8のCache-Control"
    },
    {
      "indent": 3,
      "text": "The Cache-Control general header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.",
      "ja": "Cache-Control一般ヘッダフィールドは、要求/応答チェーンに沿ったすべてのキャッシングメカニズムが従わなければならないディレクティブを指定するために使用されます。"
    },
    {
      "indent": 3,
      "text": "Cache directives must be passed through by a proxy or gateway application, regardless of their significance to that application, since the directives may be applicable to all recipients along the request/response chain. It is not possible to specify a cache-directive for a specific cache.",
      "ja": "ディレクティブは、要求/応答チェーンに沿ってすべての受信者に適用することができるので、キャッシュディレクティブは関係なく、そのアプリケーションに対するそれらの重要性の、プロキシまたはゲートウェイアプリケーションが通過しなければなりません。特定のキャッシュのキャッシュ・ディレクティブを指定することはできません。"
    },
    {
      "indent": 3,
      "text": "Cache-Control should only be specified in a SETUP request and its response. Note: Cache-Control does not govern the caching of responses as for HTTP, but rather of the stream identified by the SETUP request. Responses to RTSP requests are not cacheable, except for responses to DESCRIBE.",
      "ja": "Cache-ControlはSETUP要求とその応答で指定する必要があります。注意：のCache-Controlは、HTTP用としてではなく、SETUP要求によって識別されたストリームの応答のキャッシュを支配しません。 RTSP要求への応答は、記述するための応答を除いて、キャッシュ可能ではありません。"
    },
    {
      "indent": 3,
      "text": "Cache-Control = \"Cache-Control\" \":\" 1#cache-directive cache-directive = cache-request-directive | cache-response-directive cache-request-directive = \"no-cache\" | \"max-stale\" | \"min-fresh\" | \"only-if-cached\" | cache-extension cache-response-directive = \"public\" | \"private\" | \"no-cache\" | \"no-transform\" | \"must-revalidate\"",
      "ja": "Cache-Control = \"のCache-Control\" \"：\" = 1＃キャッシュ・ディレクティブキャッシュ・ディレクティブキャッシュ要求ディレクティブ|キャッシュ・レスポンス・ディレクティブキャッシュ・リクエスト・ディレクティブ=「キャッシュなし」| \"MAX-古いです\" | \"MIN-新鮮\" | |「のみ-場合、キャッシュされました」 |キャッシュ・拡張キャッシュ応答指示=「パブリック」 「プライベート」| 「何もキャッシュしません」| 「無変換ありません」| 「-再検証しなければなりません」"
    },
    {
      "indent": 3,
      "text": " | \"proxy-revalidate\" | \"max-age\" \"=\" delta-seconds | cache-extension cache-extension = token [ \"=\" ( token | quoted-string ) ]",
      "ja": "| 「プロキシ再検証」| \"MAX-年齢\" \"=\" デルタ秒|キャッシュの拡張キャッシュ延長=トークン[「=」（トークン|引用符で囲まれた文字列）]"
    },
    {
      "indent": 3,
      "text": "no-cache: Indicates that the media stream MUST NOT be cached anywhere. This allows an origin server to prevent caching even by caches that have been configured to return stale responses to client requests.",
      "ja": "ノーキャッシュは：メディアストリームがどこかにキャッシュされてはならないことを意味しません。これも、クライアントの要求に古くなったレスポンスを返すように設定されているキャッシュによるキャッシングを防ぐために、オリジンサーバが可能になります。"
    },
    {
      "indent": 3,
      "text": "public: Indicates that the media stream is cacheable by any cache.",
      "ja": "国民は：メディアストリームがどのキャッシュでキャッシュ可能であることを示します。"
    },
    {
      "indent": 3,
      "text": "private: Indicates that the media stream is intended for a single user and MUST NOT be cached by a shared cache. A private (non-shared) cache may cache the media stream.",
      "ja": "プライベート：メディアストリームが単一のユーザーを対象とし、共有キャッシュでキャッシュされてはならないことを示します。プライベート（非共有）キャッシュは、メディアストリームをキャッシュすることができます。"
    },
    {
      "indent": 3,
      "text": "no-transform: An intermediate cache (proxy) may find it useful to convert the media type of a certain stream. A proxy might, for example, convert between video formats to save cache space or to reduce the amount of traffic on a slow link. Serious operational problems may occur, however, when these transformations have been applied to streams intended for certain kinds of applications. For example, applications for medical imaging, scientific data analysis and those using end-to-end authentication all depend on receiving a stream that is bit-for-bit identical to the original entity-body. Therefore, if a response includes the no-transform directive, an intermediate cache or proxy MUST NOT change the encoding of the stream. Unlike HTTP, RTSP does not provide for partial transformation at this point, e.g., allowing translation into a different language.",
      "ja": "無変換：中間キャッシュ（プロキシ）は、それが有用な特定のストリームのメディアタイプを変換することかもしれません。プロキシは、例えば、キャッシュスペースを節約したり、低速リンク上のトラフィックの量を減らすためにビデオフォーマット間の変換可能性があります。これらの変換は、アプリケーションの特定の種類のために意図されたストリームに適用された場合、深刻な操作上の問題は、しかし、発生する可能性があります。例えば、医療用画像、科学的データ分析と、すべてのエンド・ツー・エンド認証を使用してそれらのためのアプリケーションは、ビット単位元エンティティボディと同一であるストリームを受信に依存します。応答が無変換のディレクティブが含まれている場合そのため、中間キャッシュやプロキシは、ストリームのエンコーディングを変更しないでください。 HTTPとは異なり、RTSPは、異なる言語への翻訳を可能にする、例えば、この時点で部分的変換を提供しません。"
    },
    {
      "indent": 3,
      "text": "only-if-cached: In some cases, such as times of extremely poor network connectivity, a client may want a cache to return only those media streams that it currently has stored, and not to receive these from the origin server. To do this, the client may include the only-if-cached directive in a request. If it receives this directive, a cache SHOULD either respond using a cached media stream that is consistent with the other constraints of the request, or respond with a 504 (Gateway Timeout) status. However, if a group of caches is being operated as a unified system with good internal connectivity, such a request MAY be forwarded within that group of caches.",
      "ja": "いくつかのケースでは、このような極めて悪いネットワーク接続の時間として、クライアントはキャッシュのみこれらのメディアを返すようにしたいことがあり、それが現在保存されており、オリジンサーバからこれらを受信しないことストリーム：のみ-場合、キャッシュされました。これを行うには、クライアントはリクエストでのみ-IF-キャッシュされたディレクティブを含むことができます。それはこの指令を受信した場合、キャッシュはリクエストの他の制約と一致しているキャッシュされたメディアストリームを使って応答、または504（ゲートウェイタイムアウト）状態で応答する必要がありますどちらか。キャッシュのグループが良好な内部接続で統一されたシステムとして動作している場合は、そのような要求は、キャッシュのそのグループ内で転送されてもよいです。"
    },
    {
      "indent": 3,
      "text": "max-stale: Indicates that the client is willing to accept a media stream that has exceeded its expiration time. If max-stale is assigned a value, then the client is willing to accept a response that has exceeded its expiration time by no more than the specified number of seconds. If no value is assigned to max-stale, then the client is willing to accept a stale response of any age.",
      "ja": "MAX-古い：クライアントは、その有効期限を超過したメディアストリームを受け入れることを望んでいることを示します。 MAX-古いに値が割り当てられている場合、クライアントは、指定された秒数を超えないことによって、その有効期限を超過した応答を受け入れていく所存です。値がMAX-陳腐に割り当てられていない場合は、クライアントはすべての年齢の古い応答を受け入れていく所存です。"
    },
    {
      "indent": 3,
      "text": "min-fresh: Indicates that the client is willing to accept a media stream whose freshness lifetime is no less than its current age plus the specified time in seconds. That is, the client wants a response that will still be fresh for at least the specified number of seconds.",
      "ja": "分、新鮮：クライアントは、その新鮮生涯その現在の年齢プラス秒で指定された時間以上であるメディアストリームを受け入れることを望んでいることを示します。これは、クライアントがまだ秒の少なくとも指定された数のために新鮮になります応答を望んでいる、です。"
    },
    {
      "indent": 3,
      "text": "must-revalidate: When the must-revalidate directive is present in a SETUP response received by a cache, that cache MUST NOT use the entry after it becomes stale to respond to a subsequent request without first revalidating it with the origin server. That is, the cache must do an end-to-end revalidation every time, if, based solely on the origin server's Expires, the cached response is stale.)",
      "ja": "必要があり、再検証：必須-再検証ディレクティブは、キャッシュが受信したSETUP応答中に存在する場合、それは最初にオリジンサーバとそれを再検証せずに、後続の要求に応答するために古くなった後、そのキャッシュエントリを使用してはなりません。それは単にのは、有効期限オリジンサーバに基づいて、キャッシュされたレスポンスが古くなって、あればキャッシュは、エンドツーエンドの再検証を毎回行う必要があり、です。）"
    },
    {
      "indent": 0,
      "text": "12.9 Conference",
      "section_title": true,
      "ja": "12.9会議"
    },
    {
      "indent": 3,
      "text": "This request header field establishes a logical connection between a pre-established conference and an RTSP stream. The conference-id must not be changed for the same RTSP session.",
      "ja": "このリクエストヘッダフィールドは、予め確立された会議およびRTSPストリーム間の論理接続を確立します。会議-idが同じRTSPセッションのために変更することはできません。"
    },
    {
      "indent": 3,
      "text": "Conference = \"Conference\" \":\" conference-id Example: Conference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr",
      "ja": "会議= \"会議\" \"：\" 会議-ID例：会議：199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr"
    },
    {
      "indent": 3,
      "text": "A response code of 452 (452 Conference Not Found) is returned if the conference-id is not valid.",
      "ja": "会議-IDが有効でない場合は452（見つかりませんでした452会議）のレスポンスコードが返されます。"
    },
    {
      "indent": 0,
      "text": "12.10 Connection",
      "section_title": true,
      "ja": "12.10接続"
    },
    {
      "indent": 3,
      "text": "See [H14.10]",
      "ja": "[H14.10]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.11 Content-Base",
      "section_title": true,
      "ja": "12.11コンテンツベース"
    },
    {
      "indent": 3,
      "text": "See [H14.11]",
      "ja": "[H14.11]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.12 Content-Encoding",
      "section_title": true,
      "ja": "12.12コンテンツのエンコーディング"
    },
    {
      "indent": 3,
      "text": "See [H14.12]",
      "ja": "[H14.12]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.13 Content-Language",
      "section_title": true,
      "ja": "12.13コンテンツの言語"
    },
    {
      "indent": 3,
      "text": "See [H14.13]",
      "ja": "[H14.13]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.14 Content-Length",
      "section_title": true,
      "ja": "12.14コンテンツの長さ"
    },
    {
      "indent": 3,
      "text": "This field contains the length of the content of the method (i.e. after the double CRLF following the last header). Unlike HTTP, it MUST be included in all messages that carry content beyond the header portion of the message. If it is missing, a default value of zero is assumed. It is interpreted according to [H14.14].",
      "ja": "このフィールドは、（すなわち、最後のヘッダーに続く二重CRLF後）メソッドの内容の長さを含みます。 HTTPとは異なり、メッセージのヘッダ部分を越えてコンテンツを運ぶすべてのメッセージに含まれなければなりません。それが欠落している場合、デフォルト値のゼロが想定されます。これは[H14.14]に従って解釈されます。"
    },
    {
      "indent": 0,
      "text": "12.15 Content-Location",
      "section_title": true,
      "ja": "12.15コンテンツの場所"
    },
    {
      "indent": 3,
      "text": "See [H14.15]",
      "ja": "[H14.15]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.16 Content-Type",
      "section_title": true,
      "ja": "12.16のContent-Type"
    },
    {
      "indent": 3,
      "text": "See [H14.18]. Note that the content types suitable for RTSP are likely to be restricted in practice to presentation descriptions and parameter-value types.",
      "ja": "[H14.18]を参照してください。 RTSPに適したコンテンツタイプは、プレゼンテーションの説明とパラメータ値の型に実際に制限される可能性があることに注意してください。"
    },
    {
      "indent": 0,
      "text": "12.17 CSeq",
      "section_title": true,
      "ja": "12.17のCSeq"
    },
    {
      "indent": 3,
      "text": "The CSeq field specifies the sequence number for an RTSP request-response pair. This field MUST be present in all requests and responses. For every RTSP request containing the given sequence number, there will be a corresponding response having the same number. Any retransmitted request must contain the same sequence number as the original (i.e. the sequence number is not incremented for retransmissions of the same request).",
      "ja": "CSeqフィールドには、RTSP要求応答ペアのシーケンス番号を指定します。このフィールドは、すべての要求と応答中に存在しなければなりません。所与のシーケンス番号を含むすべてのRTSP要求に対して、同じ番号を有する対応する応答が存在することになります。任意再送要求は、オリジナルと同じシーケンス番号（すなわち、シーケンス番号が同じ要求の再送信のためにインクリメントされていない）を含んでいなければなりません。"
    },
    {
      "indent": 0,
      "text": "12.18 Date",
      "section_title": true,
      "ja": "12.18日"
    },
    {
      "indent": 3,
      "text": "See [H14.19].",
      "ja": "[H14.19]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.19 Expires",
      "section_title": true,
      "ja": "12.19有効期限"
    },
    {
      "indent": 3,
      "text": "The Expires entity-header field gives a date and time after which the description or media-stream should be considered stale. The interpretation depends on the method:",
      "ja": "エンティティヘッダフィールドが記述またはメディアストリームが古いとみなされるべき後の日付と時間を与える有効期限。解釈は方法によって異なります。"
    },
    {
      "indent": 3,
      "text": "DESCRIBE response: The Expires header indicates a date and time after which the description should be considered stale.",
      "ja": "応答の記述：ザ・ヘッダが記述は無効と見なされるべき後の日付と時間を示す有効期限。"
    },
    {
      "indent": 3,
      "text": "A stale cache entry may not normally be returned by a cache (either a proxy cache or an user agent cache) unless it is first validated with the origin server (or with an intermediate cache that has a fresh copy of the entity). See section 13 for further discussion of the expiration model.",
      "ja": "それが最初のオリジンサーバ（またはエンティティの新しいコピーを持っている中間キャッシュを有する）で検証されていない限り、古いキャッシュエントリは、通常、キャッシュ（プロキシキャッシュまたはユーザー・エージェント・キャッシュのいずれか）によって返さなくてもよいです。期限モデルのさらなる議論はセクション13を参照してください。"
    },
    {
      "indent": 3,
      "text": "The presence of an Expires field does not imply that the original resource will change or cease to exist at, before, or after that time.",
      "ja": "有効期限フィールドの存在は、元のリソースを変更したりする前に、またはその時間の後、に存在しなくなることを意味するものではありません。"
    },
    {
      "indent": 3,
      "text": "The format is an absolute date and time as defined by HTTP-date in [H3.3]; it MUST be in RFC1123-date format:",
      "ja": "[H3.3]でHTTP-日付によって定義されるフォーマットは、絶対的な日付と時刻です。それは、RFC1123-日付フォーマットでなければなりません。"
    },
    {
      "indent": 3,
      "text": "Expires = \"Expires\" \":\" HTTP-date",
      "ja": "\"HTTP-日付：=\" \"有効期限\" 有効期限"
    },
    {
      "indent": 3,
      "text": "An example of its use is",
      "ja": "その使用の例があります"
    },
    {
      "indent": 5,
      "text": "Expires: Thu, 01 Dec 1994 16:00:00 GMT",
      "ja": "有効期限：木、1994年12月1日16時00分00秒GMT"
    },
    {
      "indent": 3,
      "text": "RTSP/1.0 clients and caches MUST treat other invalid date formats, especially including the value \"0\", as having occurred in the past (i.e., \"already expired\").",
      "ja": "RTSP / 1.0クライアントとキャッシュは、過去に発生したものとして、特に値が「0」を含むその他の無効な日付形式を治療しなければならない（すなわち、「すでに期限切れ」）。"
    },
    {
      "indent": 3,
      "text": "To mark a response as \"already expired,\" an origin server should use an Expires date that is equal to the Date header value. To mark a response as \"never expires,\" an origin server should use an Expires date approximately one year from the time the response is sent. RTSP/1.0 servers should not send Expires dates more than one year in the future.",
      "ja": "応答をマークする「はすでに期限切れ、」オリジンサーバはDateヘッダの値に等しい有効期限の日付を使用する必要があります。応答をマークするには、「無期限に、」オリジンサーバは、応答が送信された時点から約1年の日付を期限切れに使用する必要があります。 RTSP / 1.0サーバは、将来的には一年以上の日付を有効期限送るべきではありません。"
    },
    {
      "indent": 3,
      "text": "The presence of an Expires header field with a date value of some time in the future on a media stream that otherwise would by default be non-cacheable indicates that the media stream is cacheable, unless indicated otherwise by a Cache-Control header field (Section 12.8).",
      "ja": "そうでない場合は、デフォルトで非キャッシュ可能であろうと、メディアストリーム上で将来のある時点の日付値とExpiresヘッダーフィールドの存在は、キャッシュ制御ヘッダフィールド（節によって特に断らない限り、メディアストリームが、キャッシュ可能であることを示し12.8）。"
    },
    {
      "indent": 0,
      "text": "12.20 From",
      "section_title": true,
      "ja": "12.20から"
    },
    {
      "indent": 3,
      "text": "See [H14.22].",
      "ja": "[H14.22]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.21 Host",
      "section_title": true,
      "ja": "12.21ホスト"
    },
    {
      "indent": 3,
      "text": "This HTTP request header field is not needed for RTSP. It should be silently ignored if sent.",
      "ja": "このHTTPリクエストヘッダフィールドは、RTSPのために必要とされていません。送信された場合は黙って無視されるべきです。"
    },
    {
      "indent": 0,
      "text": "12.22 If-Match",
      "section_title": true,
      "ja": "12.22もしマッチ"
    },
    {
      "indent": 3,
      "text": "See [H14.25].",
      "ja": "[H14.25]を参照してください。"
    },
    {
      "indent": 3,
      "text": "This field is especially useful for ensuring the integrity of the presentation description, in both the case where it is fetched via means external to RTSP (such as HTTP), or in the case where the server implementation is guaranteeing the integrity of the description between the time of the DESCRIBE message and the SETUP message.",
      "ja": "このフィールドは、（HTTPなど）RTSPに、またはサーバの実装は、間の説明の完全性を保証する場合に、外部手段を介して、それがフェッチされる場合の両方において、プレゼンテーション記述の完全性を確保するために特に有用ですDESCRIBEメッセージとSETUPメッセージの時間。"
    },
    {
      "indent": 3,
      "text": "The identifier is an opaque identifier, and thus is not specific to any particular session description language.",
      "ja": "識別子は、不透明な識別子であり、したがって、任意の特定のセッション記述言語に固有のものではありません。"
    },
    {
      "indent": 0,
      "text": "12.23 If-Modified-Since",
      "section_title": true,
      "ja": "12.23変更 - 開始"
    },
    {
      "indent": 3,
      "text": "The If-Modified-Since request-header field is used with the DESCRIBE and SETUP methods to make them conditional. If the requested variant has not been modified since the time specified in this field, a description will not be returned from the server (DESCRIBE) or a stream will not be set up (SETUP). Instead, a 304 (not modified) response will be returned without any message-body.",
      "ja": "もし修飾-のでリクエストヘッダフィールドは、それらの条件にするために説明し、SETUP方法で使用されています。要求されたバリアントがこのフィールドで指定した時間以降に変更されていない場合は、説明は、サーバから返されることはありません（DESCRIBE）またはストリームが（SETUP）を設定することはありません。代わりに、304（変更されない）応答は、任意のメッセージボディなしに返されます。"
    },
    {
      "indent": 3,
      "text": "If-Modified-Since = \"If-Modified-Since\" \":\" HTTP-date",
      "ja": "変更 - 開始= \"場合 - 変更 - ので\" \"：\" HTTP-日"
    },
    {
      "indent": 3,
      "text": "An example of the field is:",
      "ja": "フィールドの例は次のとおりです。"
    },
    {
      "indent": 5,
      "text": "If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT",
      "ja": "変更 - 開始：土、1994年10月29日午後7時43分31秒GMT"
    },
    {
      "indent": 0,
      "text": "12.24 Last-Modified",
      "section_title": true,
      "ja": "12.24のLast-Modified"
    },
    {
      "indent": 3,
      "text": "The Last-Modified entity-header field indicates the date and time at which the origin server believes the presentation description or media stream was last modified. See [H14.29]. For the methods DESCRIBE or ANNOUNCE, the header field indicates the last modification date and time of the description, for SETUP that of the media stream.",
      "ja": "Last-Modifiedエンティティヘッダフィールドは、オリジンサーバがプレゼンテーション記述またはメディアストリームが最後に変更されたと考えていた日付と時刻を示しています。 [H14.29]を参照してください。方法は記述またはANNOUNCEため、ヘッダフィールドは、そのメディア・ストリームのセットアップのため、説明の最終更新日時を示します。"
    },
    {
      "indent": 0,
      "text": "12.25 Location",
      "section_title": true,
      "ja": "12.25場所"
    },
    {
      "indent": 3,
      "text": "See [H14.30].",
      "ja": "[H14.30]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.26 Proxy-Authenticate",
      "section_title": true,
      "ja": "12.26プロキシ認証"
    },
    {
      "indent": 3,
      "text": "See [H14.33].",
      "ja": "[H14.33]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.27 Proxy-Require",
      "section_title": true,
      "ja": "12.27プロキシ要求"
    },
    {
      "indent": 3,
      "text": "The Proxy-Require header is used to indicate proxy-sensitive features that MUST be supported by the proxy. Any Proxy-Require header features that are not supported by the proxy MUST be negatively acknowledged by the proxy to the client if not supported. Servers should treat this field identically to the Require field.",
      "ja": "プロキシ要求ヘッダは、プロキシによってサポートされなければならないプロキシ感受性の特徴を示すために使用されます。サポートされていない場合は、プロキシによってサポートされていないすべてのプロキシ-Requireヘッダーの機能は負のクライアントへのプロキシによって承認されなければなりません。サーバーは必要フィールドと同一にこのフィールドを扱う必要があります。"
    },
    {
      "indent": 3,
      "text": "See Section 12.32 for more details on the mechanics of this message and a usage example.",
      "ja": "このメッセージの仕組みの詳細については、セクション12.32と使用例を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.28 Public",
      "section_title": true,
      "ja": "12.28公衆"
    },
    {
      "indent": 3,
      "text": "See [H14.35].",
      "ja": "[H14.35]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.29 Range",
      "section_title": true,
      "ja": "12.29レンジ"
    },
    {
      "indent": 3,
      "text": "This request and response header field specifies a range of time. The range can be specified in a number of units. This specification defines the smpte (Section 3.5), npt (Section 3.6), and clock (Section 3.7) range units. Within RTSP, byte ranges [H14.36.1] are not meaningful and MUST NOT be used. The header may also contain a time parameter in UTC, specifying the time at which the operation is to be made effective. Servers supporting the Range header MUST understand the NPT range format and SHOULD understand the SMPTE range format. The Range response header indicates what range of time is actually being played or recorded. If the Range header is given in a time format that is not understood, the recipient should return \"501 Not Implemented\".",
      "ja": "このリクエストとレスポンスヘッダフィールドは、時間の範囲を指定します。範囲は、ユニットの数で指定することができます。この仕様は、SMPTE（セクション3.5）、NPT（セクション3.6）、およびクロック（セクション3.7）単位の範囲を定義します。 RTSP内、バイト[H14.36.1]意味のものではなく、使用してはいけません範囲です。ヘッダはまた、操作が有効とされる時刻を指定して、UTCに時間パラメータを含んでいてもよいです。 Rangeヘッダをサポートするサーバは、NPT範囲形式を理解しなければならないとSMPTE範囲形式を理解すべきです。レンジレスポンスヘッダは、時間の範囲は、実際に再生または記録されているものを示しています。 Rangeヘッダが理解されていない時間の形式で与えられる場合、受信者は「501が実装されていない」を返すべきです。"
    },
    {
      "indent": 3,
      "text": "Ranges are half-open intervals, including the lower point, but excluding the upper point. In other words, a range of a-b starts exactly at time a, but stops just before b. Only the start time of a media unit such as a video or audio frame is relevant. As an example, assume that video frames are generated every 40 ms. A range of 10.0- 10.1 would include a video frame starting at 10.0 or later time and would include a video frame starting at 10.08, even though it lasted beyond the interval. A range of 10.0-10.08, on the other hand, would exclude the frame at 10.08.",
      "ja": "範囲は下の点を含むが、上部のポイントを除いて、ハーフオープン区間です。言い換えれば、-Bの範囲は、時間Aで正確に開始しますが、ちょうどBの前に停止します。ビデオやオーディオフレームなどのメディアユニットの開始時刻のみが関連しています。一例として、ビデオフレームは40ms毎に生成されると仮定する。 10.0- 10.1の範囲は、10.0以降の時間で開始する映像フレームを含むであろうし、それは間隔を超えて続いたにもかかわらず、10.08から始まるビデオフレームを含むであろう。 10.0から10.08の範囲は、一方で、10.08のフレームを除外する。"
    },
    {
      "indent": 3,
      "text": "Range = \"Range\" \":\" 1\\#ranges-specifier [ \";\" \"time\" \"=\" utc-time ] ranges-specifier = npt-range | utc-range | smpte-range",
      "ja": "レンジ= \"範囲\" \"：\" 1つの\\＃範囲指定子[ \";\" \"時間\" \"=\" UTC時刻]の範囲指定子= NPT-範囲| UTC-範囲| SMPTE-範囲"
    },
    {
      "indent": 3,
      "text": "Example: Range: clock=19960213T143205Z-;time=19970123T143720Z",
      "ja": "例：範囲：クロック= 19960213T143205Z-;時間= 19970123T143720Z"
    },
    {
      "indent": 5,
      "text": "The notation is similar to that used for the HTTP/1.1 [2] byte-range header. It allows clients to select an excerpt from the media object, and to play from a given point to the end as well as from the current location to a given point. The start of playback can be scheduled for any time in the future, although a server may refuse to keep server resources for extended idle periods.",
      "ja": "表記は、HTTP / 1.1 [2]バイト範囲ヘッダーに使用されるものと同様です。これは、クライアントがメディアオブジェクトから抜粋を選択するために、与えられたポイントに最後に、指定された時点から、ならびに現在の位置から再生することを可能にします。サーバが拡張アイドル期間のためにサーバリソースを維持することを拒否するかもしれないが、再生の開始は、将来の任意の時間をスケジュールすることができます。"
    },
    {
      "indent": 0,
      "text": "12.30 Referer",
      "section_title": true,
      "ja": "12.30リファラー"
    },
    {
      "indent": 3,
      "text": "See [H14.37]. The URL refers to that of the presentation description, typically retrieved via HTTP.",
      "ja": "[H14.37]を参照してください。 URLは通常、HTTP経由で取得、プレゼンテーション記述のことを指します。"
    },
    {
      "indent": 0,
      "text": "12.31 Retry-After",
      "section_title": true,
      "ja": "12.31リトライした後、"
    },
    {
      "indent": 3,
      "text": "See [H14.38].",
      "ja": "[H14.38]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.32 Require",
      "section_title": true,
      "ja": "12.32が必要"
    },
    {
      "indent": 3,
      "text": "The Require header is used by clients to query the server about options that it may or may not support. The server MUST respond to this header by using the Unsupported header to negatively acknowledge those options which are NOT supported.",
      "ja": "Requireヘッダーは、それがまたはサポートしていない可能性がありオプションについてのサーバーを照会するためにクライアントによって使用されます。サーバーは否定サポートされていませんこれらのオプションを確認するためにサポートされていないヘッダを使用することによって、このヘッダに反応しなければなりません。"
    },
    {
      "indent": 5,
      "text": "This is to make sure that the client-server interaction will proceed without delay when all options are understood by both sides, and only slow down if options are not understood (as in the case above). For a well-matched client-server pair, the interaction proceeds quickly, saving a round-trip often required by negotiation mechanisms. In addition, it also removes state ambiguity when the client requires features that the server does not understand.",
      "ja": "これは、クライアントとサーバの対話は、すべてのオプションが両側で理解されているとき、遅滞なく進める、およびオプションは、（上記の場合のように）理解されていない場合だけ遅くなりますことを確認することです。よくマッチしたクライアント・サーバ・ペアの場合、相互作用は、多くの場合、交渉メカニズムによって必要なラウンドトリップを保存、すぐに進行します。クライアントがサーバが理解していない機能を必要とする場合に加えて、それはまた、国家の曖昧さを取り除きます。"
    },
    {
      "indent": 3,
      "text": "Require = \"Require\" \":\" 1#option-tag",
      "ja": "=「「必要」が必要です：」1つの＃オプションタグ"
    },
    {
      "indent": 3,
      "text": "Example: C->S: SETUP rtsp://server.com/foo/bar/baz.rm RTSP/1.0 CSeq: 302 Require: funky-feature Funky-Parameter: funkystuff",
      "ja": "例：C-> S：SETUPのRTSP：//server.com/foo/bar/baz.rm RTSP / 1.0のCSeq：302で必要：ファンキー特徴ファンキー・パラメータを：funkystuff"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 551 Option not supported CSeq: 302 Unsupported: funky-feature",
      "ja": "S-> C：RTSP / 1.0 551オプションサポートされていないのCSeq：302サポートされていない：ファンキー特徴"
    },
    {
      "indent": 5,
      "text": "C->S: SETUP rtsp://server.com/foo/bar/baz.rm RTSP/1.0 CSeq: 303",
      "ja": "C-> S：SETUPのRTSP：//server.com/foo/bar/baz.rm RTSP / 1.0のCSeq：303"
    },
    {
      "indent": 5,
      "text": "S->C: RTSP/1.0 200 OK CSeq: 303",
      "ja": "S-> C：RTSP / 1.0 200 OKのCSeq：303"
    },
    {
      "indent": 3,
      "text": "In this example, \"funky-feature\" is the feature tag which indicates to the client that the fictional Funky-Parameter field is required. The relationship between \"funky-feature\" and Funky-Parameter is not communicated via the RTSP exchange, since that relationship is an immutable property of \"funky-feature\" and thus should not be transmitted with every exchange.",
      "ja": "この例では、「ファンキー・機能は、」架空のファンキー・パラメータのフィールドが必要であることをクライアントに示した特徴タグです。その関係は、「ファンキー特徴」の不変性であり、したがって、すべての交換で送信されるべきではないので、「ファンキー特徴」の関係とファンキー・パラメータは、RTSP交換を介して伝達されません。"
    },
    {
      "indent": 3,
      "text": "Proxies and other intermediary devices SHOULD ignore features that are not understood in this field. If a particular extension requires that intermediate devices support it, the extension should be tagged in the Proxy-Require field instead (see Section 12.27).",
      "ja": "プロキシおよびその他の中間デバイスは、この分野で理解されていない機能を無視する必要があります。特定の拡張は、中間デバイスがそれをサポートする必要がある場合、エクステンションは、（セクション12.27を参照）の代わりにプロキシ要求フィールドにタグ付けされるべきです。"
    },
    {
      "indent": 0,
      "text": "12.33 RTP-Info",
      "section_title": true,
      "ja": "RTP-情報12時33分"
    },
    {
      "indent": 3,
      "text": "This field is used to set RTP-specific parameters in the PLAY response.",
      "ja": "このフィールドは、PLAY応答のRTP固有のパラメータを設定するために使用されます。"
    },
    {
      "indent": 3,
      "text": "url: Indicates the stream URL which for which the following RTP parameters correspond.",
      "ja": "URLは次のRTPパラメータが対応する対象のストリームのURLを示します。"
    },
    {
      "indent": 3,
      "text": "seq: Indicates the sequence number of the first packet of the stream. This allows clients to gracefully deal with packets when seeking. The client uses this value to differentiate packets that originated before the seek from packets that originated after the seek.",
      "ja": "配列は：ストリームの最初のパケットのシーケンス番号を示します。これが求めている時に、クライアントが優雅パケットに対処することができます。クライアントは、シーク後に発信したパケットから求める前に、発信元のパケットを区別するために、この値を使用しています。"
    },
    {
      "indent": 3,
      "text": "rtptime: Indicates the RTP timestamp corresponding to the time value in the Range response header. (Note: For aggregate control, a particular stream may not actually generate a packet for the Range time value returned or implied. Thus, there is no guarantee that the packet with the sequence number indicated by seq actually has the timestamp indicated by rtptime.) The client uses this value to calculate the mapping of RTP time to NPT.",
      "ja": "rtptime：RTPタイムスタンプが範囲応答ヘッダーの時間値に対応することを示します。 （注：集約制御のために、特定のストリームが実際に返さまたは暗黙範囲の時間値のためのパケットを生成しないかもしれない従って、配列によって示されるシーケンス番号を有するパケットが実際rtptimeで示すタイムスタンプを有しているという保証はありません。）クライアントは、NPTへのRTPタイムのマッピングを計算し、この値を使用しています。"
    },
    {
      "indent": 5,
      "text": "A mapping from RTP timestamps to NTP timestamps (wall clock) is available via RTCP. However, this information is not sufficient to generate a mapping from RTP timestamps to NPT. Furthermore, in order to ensure that this information is available at the necessary time (immediately at startup or after a seek), and that it is delivered reliably, this mapping is placed in the RTSP control channel.",
      "ja": "NTPタイムスタンプとRTPタイムスタンプからのマッピング（ウォールクロック）RTCPを介して利用可能です。しかし、この情報はNPTへのRTPタイムスタンプからマッピングを生成するのに十分ではありません。また、ために、この情報は必要時に（直ちに、シーク起動時または後に）利用可能であることを確認し、それが確実に配信されることを、このマッピングは、RTSP制御チャネルに配置されます。"
    },
    {
      "indent": 5,
      "text": "In order to compensate for drift for long, uninterrupted presentations, RTSP clients should additionally map NPT to NTP, using initial RTCP sender reports to do the mapping, and later reports to check drift against the mapping.",
      "ja": "長い、中断のないプレゼンテーションのためにドリフトを補償するためには、RTSPクライアントは、さらにマッピングに対するドリフトをチェックするためにマッピングを行うには、最初のRTCP送信者レポートを使用して、後でレポート、NTPにNPTをマップする必要があります。"
    },
    {
      "indent": 3,
      "text": "Syntax:",
      "ja": "構文："
    },
    {
      "indent": 3,
      "text": "RTP-Info = \"RTP-Info\" \":\" 1#stream-url 1*parameter stream-url = \"url\" \"=\" url parameter = \";\" \"seq\" \"=\" 1*DIGIT | \";\" \"rtptime\" \"=\" 1*DIGIT",
      "ja": "RTP-情報= \"RTP-情報\" \"：\" 1＃ストリームURL 1 *パラメータストリーム-URL = \"URL\" \"=\" URLパラメータ= \";\" \"SEQ\" \"=\" 1 * DIGIT | \";\" \"rtptime\" \"=\" 1 * DIGIT"
    },
    {
      "indent": 3,
      "text": "Example:",
      "ja": "例："
    },
    {
      "indent": 5,
      "text": "RTP-Info: url=rtsp://foo.com/bar.avi/streamid=0;seq=45102, url=rtsp://foo.com/bar.avi/streamid=1;seq=30211",
      "ja": "RTP-情報：URL = RTSP：//foo.com/bar.avi/streamid=0; SEQ = 45102、URL = RTSP：//foo.com/bar.avi/streamid=1; SEQ = 30211"
    },
    {
      "indent": 0,
      "text": "12.34 Scale",
      "section_title": true,
      "ja": "12.34スケール"
    },
    {
      "indent": 3,
      "text": "A scale value of 1 indicates normal play or record at the normal forward viewing rate. If not 1, the value corresponds to the rate with respect to normal viewing rate. For example, a ratio of 2 indicates twice the normal viewing rate (\"fast forward\") and a ratio of 0.5 indicates half the normal viewing rate. In other words, a ratio of 2 has normal play time increase at twice the wallclock rate. For every second of elapsed (wallclock) time, 2 seconds of content will be delivered. A negative value indicates reverse direction.",
      "ja": "1のスケール値は、通常の前方の視聴率で通常再生や録音を示します。ない1の場合、値は通常の視聴速度に対する割合に相当します。例えば、2の比率は二倍通常の視聴率を示している（「早送り」）及び0.5の比は、通常の半分の視聴率を示しています。言い換えれば、2の比率は、二回ウォールクロックレートで通常再生時間が増加しています。経過（ウォールクロック）時間の毎秒のために、コンテンツの2秒が配信されます。負の値は逆方向を示しています。"
    },
    {
      "indent": 3,
      "text": "Unless requested otherwise by the Speed parameter, the data rate SHOULD not be changed. Implementation of scale changes depends on the server and media type. For video, a server may, for example, deliver only key frames or selected key frames. For audio, it may time-scale the audio while preserving pitch or, less desirably, deliver fragments of audio.",
      "ja": "スピードパラメータで特に指定しないかぎり、データレートは変更しないでください。規模な変更の実装は、サーバーおよびメディアタイプによって異なります。ビデオの場合、サーバは、例えば、キーフレーム、または選択されたキーフレームのみを配信してもよいです。オーディオの場合、それはピッチを維持しながらオーディオをタイムスケールまたは、以下が望ましく、オーディオの断片を配信することができます。"
    },
    {
      "indent": 3,
      "text": "The server should try to approximate the viewing rate, but may restrict the range of scale values that it supports. The response MUST contain the actual scale value chosen by the server.",
      "ja": "サーバが視聴率を近似しようとする必要がありますが、それがサポートするスケール値の範囲を制限することができます。応答は、サーバによって選ばれた実際のスケール値を含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "If the request contains a Range parameter, the new scale value will take effect at that time.",
      "ja": "リクエストはレンジパラメータが含まれている場合は、新しいスケール値は、その時点で有効になります。"
    },
    {
      "indent": 3,
      "text": "Scale = \"Scale\" \":\" [ \"-\" ] 1*DIGIT [ \".\" *DIGIT ]",
      "ja": "スケール= \"スケール\" \"：\" [ \" - \"] 1 * DIGITの[ \"\"。 * DIGIT]"
    },
    {
      "indent": 3,
      "text": "Example of playing in reverse at 3.5 times normal rate:",
      "ja": "3.5倍、通常の速度で逆で遊んでの例："
    },
    {
      "indent": 5,
      "text": "Scale: -3.5",
      "ja": "スケール：-3.5"
    },
    {
      "indent": 0,
      "text": "12.35 Speed",
      "section_title": true,
      "ja": "12.35スピード"
    },
    {
      "indent": 3,
      "text": "This request header fields parameter requests the server to deliver data to the client at a particular speed, contingent on the server's ability and desire to serve the media stream at the given speed. Implementation by the server is OPTIONAL. The default is the bit rate of the stream.",
      "ja": "このリクエストヘッダフィールドのパラメータは、サーバの能力と所定の速度でメディアストリームを提供する欲求の偶発特定の速度でクライアントにデータを配信するためのサーバーを、要求します。サーバによる実装はオプションです。デフォルトでは、ストリームのビットレートです。"
    },
    {
      "indent": 3,
      "text": "The parameter value is expressed as a decimal ratio, e.g., a value of 2.0 indicates that data is to be delivered twice as fast as normal. A speed of zero is invalid. If the request contains a Range parameter, the new speed value will take effect at that time.",
      "ja": "パラメータ値が小数比として表現され、例えば、2.0の値は、データが通常の2倍の速配信されることを示しています。ゼロの速度は無効です。リクエストはレンジパラメータが含まれている場合は、新しい速度値は、その時点で有効になります。"
    },
    {
      "indent": 3,
      "text": "Speed = \"Speed\" \":\" 1*DIGIT [ \".\" *DIGIT ]",
      "ja": "スピード= \"スピード\" \"：\" 1 * DIGITの[ \"\"。 * DIGIT]"
    },
    {
      "indent": 3,
      "text": "Example: Speed: 2.5",
      "ja": "例：速度：2.5"
    },
    {
      "indent": 3,
      "text": "Use of this field changes the bandwidth used for data delivery. It is meant for use in specific circumstances where preview of the presentation at a higher or lower rate is necessary. Implementors should keep in mind that bandwidth for the session may be negotiated beforehand (by means other than RTSP), and therefore re-negotiation may be necessary. When data is delivered over UDP, it is highly recommended that means such as RTCP be used to track packet loss rates.",
      "ja": "このフィールドの使用は、データ配信のために使用される帯域幅を変更します。これは、より高いまたはより低い速度でのプレゼンテーションのプレビューが必要である特定の状況での使用のために意図されています。実装者は、セッションの帯域幅は（RTSP以外の手段によって）事前に交渉することができるので、再交渉が必要であることを念頭におく必要があります。データはUDPを介して配信される場合、非常にRTCPがパケット損失率を追跡するために使用されるような意味を推奨します。"
    },
    {
      "indent": 0,
      "text": "12.36 Server",
      "section_title": true,
      "ja": "12.36サーバー"
    },
    {
      "indent": 3,
      "text": "See [H14.39]",
      "ja": "[H14.39]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.37 Session",
      "section_title": true,
      "ja": "12.37セッション"
    },
    {
      "indent": 3,
      "text": "This request and response header field identifies an RTSP session started by the media server in a SETUP response and concluded by TEARDOWN on the presentation URL. The session identifier is chosen by the media server (see Section 3.4). Once a client receives a Session identifier, it MUST return it for any request related to that session. A server does not have to set up a session identifier if it has other means of identifying a session, such as dynamically generated URLs.",
      "ja": "このリクエストとレスポンスヘッダフィールドは、プレゼンテーションのURLにTEARDOWNによってSETUP応答のメディア・サーバによって開始されたと結論付けたRTSPセッションを識別します。セッション識別子は、メディアサーバ（3.4節を参照）によって選択されます。クライアントは、セッション識別子を受信すると、そのセッションに関連するすべての要求のためにそれを返さなければなりません。サーバは、そのような動的に生成されたURLのようなセッションを識別する他の手段を有している場合、セッション識別子を設定する必要はありません。"
    },
    {
      "indent": 1,
      "text": "Session = \"Session\" \":\" session-id [ \";\" \"timeout\" \"=\" delta-seconds ]",
      "ja": "セッション= \"セッション\" \"：\" セッションIDの[ \";\" 「タイムアウト」「=」デルタ - 秒]"
    },
    {
      "indent": 3,
      "text": "The timeout parameter is only allowed in a response header. The server uses it to indicate to the client how long the server is prepared to wait between RTSP commands before closing the session due to lack of activity (see Section A). The timeout is measured in seconds, with a default of 60 seconds (1 minute).",
      "ja": "タイムアウトパラメータのみ応答ヘッダで許可されています。サーバーは、サーバーがRTSP間で待機する準備がどのくらいクライアントに示すためにそれを使用するため、活動の不足のためにセッションを閉じる前に、コマンド（セクションAを参照してください）。タイムアウトは60秒（1分）の既定値は、秒単位で測定されます。"
    },
    {
      "indent": 3,
      "text": "Note that a session identifier identifies a RTSP session across transport sessions or connections. Control messages for more than one RTSP URL may be sent within a single RTSP session. Hence, it is possible that clients use the same session for controlling many streams constituting a presentation, as long as all the streams come from the same server. (See example in Section 14). However, multiple \"user\" sessions for the same URL from the same client MUST use different session identifiers.",
      "ja": "セッション識別子は、トランスポートセッションまたは接続間RTSPセッションを識別することに注意してください。複数のRTSP URLのための制御メッセージは、単一のRTSPセッション内で送信することができます。したがって、クライアントが同じサーバーから来るすべてのストリーム限り、プレゼンテーションを構成する多くのストリームを制御するために同じセッションを使用することも可能です。 （第14条の例を参照してください）。しかし、同じクライアントから同じURLに対して複数の「ユーザー」セッションは別のセッション識別子を使用しなければなりません。"
    },
    {
      "indent": 5,
      "text": "The session identifier is needed to distinguish several delivery requests for the same URL coming from the same client.",
      "ja": "セッション識別子は、同じクライアントから同じURLのためのいくつかの配信要求を区別するために必要とされています。"
    },
    {
      "indent": 3,
      "text": "The response 454 (Session Not Found) is returned if the session identifier is invalid.",
      "ja": "セッション識別子が無効である場合、応答454は、（セッションが見つかりません）が返されます。"
    },
    {
      "indent": 0,
      "text": "12.38 Timestamp",
      "section_title": true,
      "ja": "12.38のタイムスタンプ"
    },
    {
      "indent": 3,
      "text": "The timestamp general header describes when the client sent the request to the server. The value of the timestamp is of significance only to the client and may use any timescale. The server MUST echo the exact same value and MAY, if it has accurate information about this, add a floating point number indicating the number of seconds that has elapsed since it has received the request. The timestamp is used by the client to compute the round-trip time to the server so that it can adjust the timeout value for retransmissions.",
      "ja": "クライアントがサーバに要求を送信したときのタイムスタンプの一般的なヘッダが記述しています。タイムスタンプの値は、クライアントだけに重要であると任意の時間スケールを使用することができます。サーバは、このに関する正確な情報を持っている場合、それは要求を受信した経過秒数を示す浮動小数点数を追加し、まったく同じ値とMAYをエコーし​​なければなりません。タイムスタンプは、再送信のタイムアウト値を調整することができるように、サーバーへのラウンドトリップ時間を計算するために、クライアントによって使用されます。"
    },
    {
      "indent": 3,
      "text": "Timestamp = \"Timestamp\" \":\" *(DIGIT) [ \".\" *(DIGIT) ] [ delay ] delay = *(DIGIT) [ \".\" *(DIGIT) ]",
      "ja": "タイムスタンプは= \"タイムスタンプ\" \"：\" *（DIGIT）[ \"\"。 *（DIGIT）] [ディレイ]遅延= *（DIGIT） \"\" *（DIGIT）]"
    },
    {
      "indent": 0,
      "text": "12.39 Transport",
      "section_title": true,
      "ja": "12.39交通"
    },
    {
      "indent": 3,
      "text": "This request header indicates which transport protocol is to be used and configures its parameters such as destination address, compression, multicast time-to-live and destination port for a single stream. It sets those values not already determined by a presentation description.",
      "ja": "このリクエストヘッダが使用されると、宛先アドレス、圧縮、マルチキャスト生存時間および宛先ポート単一ストリームとしてそのパラメータを設定したトランスポートプロトコルを示しています。これは、すでにプレゼンテーション記述によって決定されないそれらの値を設定します。"
    },
    {
      "indent": 3,
      "text": "Transports are comma separated, listed in order of preference. Parameters may be added to each transport, separated by a semicolon.",
      "ja": "トランスポートは、優先順にリストされ、カンマで区切られています。パラメータは、セミコロンで区切られた、各トランスポートに加えてもよいです。"
    },
    {
      "indent": 3,
      "text": "The Transport header MAY also be used to change certain transport parameters. A server MAY refuse to change parameters of an existing stream.",
      "ja": "トランスポートヘッダはまた、特定のトランスポートパラメータを変更することができます。サーバーは、既存のストリームのパラメータを変更することを拒否するかもしれません。"
    },
    {
      "indent": 3,
      "text": "The server MAY return a Transport response header in the response to indicate the values actually chosen.",
      "ja": "サーバは、実際に選択された値を示すために応答して、トランスポート・レスポンスヘッダを返すことができます。"
    },
    {
      "indent": 3,
      "text": "A Transport request header field may contain a list of transport options acceptable to the client. In that case, the server MUST return a single option which was actually chosen.",
      "ja": "交通リクエストヘッダフィールドは、クライアントに許容可能なトランスポート・オプションのリストが含まれていてもよいです。その場合、サーバは、実際に選ばれた1つのオプションを返さなければなりません。"
    },
    {
      "indent": 3,
      "text": "The syntax for the transport specifier is",
      "ja": "輸送指定子の構文は次のとおりです。"
    },
    {
      "indent": 7,
      "text": "transport/profile/lower-transport.",
      "ja": "輸送/プロフィール/下輸送。"
    },
    {
      "indent": 3,
      "text": "The default value for the \"lower-transport\" parameters is specific to the profile. For RTP/AVP, the default is UDP.",
      "ja": "「低級輸送」のパラメータのデフォルト値は、プロファイルに固有のものです。 RTP / AVPの場合、デフォルトはUDPです。"
    },
    {
      "indent": 3,
      "text": "Below are the configuration parameters associated with transport:",
      "ja": "以下は、輸送に関連した設定パラメータは、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "General parameters:",
      "ja": "一般的なパラメータ："
    },
    {
      "indent": 3,
      "text": "unicast | multicast: mutually exclusive indication of whether unicast or multicast delivery will be attempted. Default value is multicast. Clients that are capable of handling both unicast and multicast transmission MUST indicate such capability by including two full transport-specs with separate parameters for each.",
      "ja": "ユニキャスト|マルチキャスト：ユニキャストまたはマルチキャスト配信が試行されるかどうかの相互に排他的な指標。デフォルト値は、マルチキャストです。ユニキャストとマルチキャストの両方の送信を処理することが可能なクライアントは、それぞれに対して別々のパラメータを有する2つの完全なトランスポート仕様を含めることにより、このような能力を示さなければなりません。"
    },
    {
      "indent": 3,
      "text": "destination: The address to which a stream will be sent. The client may specify the multicast address with the destination parameter. To avoid becoming the unwitting perpetrator of a remote-controlled denial-of-service attack, a server SHOULD authenticate the client and SHOULD log such attempts before allowing the client to direct a media stream to an address not chosen by the server. This is particularly important if RTSP commands are issued via UDP, but implementations cannot rely on TCP as reliable means of client identification by itself. A server SHOULD not allow a client to direct media streams to an address that differs from the address commands are coming from.",
      "ja": "目的地：ストリームが送られる先のアドレス。クライアントは、宛先パラメータを使用してマルチキャストアドレスを指定することもできます。遠隔制御サービス拒否攻撃の無意識の加害者になることを避けるために、サーバはクライアントを認証すべきであり、クライアントがサーバによって選ばれていないアドレスへのメディアストリームを指示するために許可する前に、このような試みをログインする必要があります。 RTSPコマンドはUDP経由で発行されている場合、これは特に重要ですが、実装は、それ自体でクライアント識別の信頼できる手段として、TCPに頼ることはできません。サーバは、コマンドがから来ているアドレスと異なったアドレスに直接メディアストリームへのクライアントを許可してはいけません。"
    },
    {
      "indent": 3,
      "text": "source: If the source address for the stream is different than can be derived from the RTSP endpoint address (the server in playback or the client in recording), the source MAY be specified.",
      "ja": "ソース：ストリームの送信元アドレスは、RTSPのエンドポイントアドレス（再生中のサーバまたは録音中にクライアント）から得ることができると異なる場合は、ソースを指定することができます。"
    },
    {
      "indent": 5,
      "text": "This information may also be available through SDP. However, since this is more a feature of transport than media initialization, the authoritative source for this information should be in the SETUP response.",
      "ja": "この情報は、SDPを介して利用することがあります。これは、より多くのメディアの初期化よりも輸送の特徴であるので、この情報の信頼できるソースは、SETUP応答であるべきです。"
    },
    {
      "indent": 3,
      "text": "layers: The number of multicast layers to be used for this media stream. The layers are sent to consecutive addresses starting at the destination address.",
      "ja": "層：このメディアストリームのために使用されるマルチキャストレイヤの数。層は、宛先アドレスから始まる連続したアドレスに送信されます。"
    },
    {
      "indent": 3,
      "text": "mode: The mode parameter indicates the methods to be supported for this session. Valid values are PLAY and RECORD. If not provided, the default is PLAY.",
      "ja": "モード：modeパラメータは、このセッションのためにサポートする方法を示します。有効な値は、PLAYとRECORDです。提供されていない場合、デフォルトはPLAYです。"
    },
    {
      "indent": 3,
      "text": "append: If the mode parameter includes RECORD, the append parameter indicates that the media data should append to the existing resource rather than overwrite it. If appending is requested and the server does not support this, it MUST refuse the request rather than overwrite the resource identified by the URI. The append parameter is ignored if the mode parameter does not contain RECORD.",
      "ja": "追記：モードパラメータはRECORDが含まれている場合、アペンドパラメータは、メディアデータが既存のリソースへの追加ではなく、それを上書きする必要があることを示します。添付が要求され、サーバがこれをサポートしていない場合、その要求を拒否するのではなく、URIで識別されるリソースを上書きする必要があります。モードパラメータはRECORDが含まれていない場合アペンドパラメータは無視されます。"
    },
    {
      "indent": 3,
      "text": "interleaved: The interleaved parameter implies mixing the media stream with the control stream in whatever protocol is being used by the control stream, using the mechanism defined in Section 10.12. The argument provides the channel number to be used in the $ statement. This parameter may be specified as a range, e.g., interleaved=4-5 in cases where the transport choice for the media stream requires it.",
      "ja": "インターリーブ：インターリーブパラメータは、セクション10.12に定義されたメカニズムを使用して、制御ストリームによって使用されているどのようなプロトコルで制御ストリームとメディアストリームを混合暗示します。引数は$文で使用するチャネル番号を提供します。このパラメータは、メディアストリームのトランスポート選択は、それを必要とする場合に範囲、例えば、インターリーブ= 4~5として指定することができます。"
    },
    {
      "indent": 5,
      "text": "This allows RTP/RTCP to be handled similarly to the way that it is done with UDP, i.e., one channel for RTP and the other for RTCP.",
      "ja": "これは、RTP / RTCPは、それがUDP、RTCPのためのRTP及び他のために、すなわち、一つのチャンネルで行われている方法と同様に処理することを可能にします。"
    },
    {
      "indent": 3,
      "text": "Multicast specific:",
      "ja": "特定のマルチキャスト："
    },
    {
      "indent": 3,
      "text": "ttl: multicast time-to-live",
      "ja": "TTL：マルチキャスト生存時間"
    },
    {
      "indent": 3,
      "text": "RTP Specific:",
      "ja": "RTPの特定："
    },
    {
      "indent": 3,
      "text": "port: This parameter provides the RTP/RTCP port pair for a multicast session. It is specified as a range, e.g., port=3456-3457.",
      "ja": "ポート：このパラメータは、マルチキャストセッションのためのRTP / RTCPポートのペアを提供します。これは、範囲、例えば、ポート= 3456から3457として指定されます。"
    },
    {
      "indent": 3,
      "text": "client_port: This parameter provides the unicast RTP/RTCP port pair on which the client has chosen to receive media data and control information. It is specified as a range, e.g., client_port=3456-3457.",
      "ja": "CLIENT_PORT：このパラメータは、クライアントがメディアデータを受信し、情報を制御するために選択された前記ユニキャストRTP / RTCPポートのペアを提供します。これは、範囲、例えば、CLIENT_PORT = 3456から3457として指定されます。"
    },
    {
      "indent": 3,
      "text": "server_port: This parameter provides the unicast RTP/RTCP port pair on which the server has chosen to receive media data and control information. It is specified as a range, e.g., server_port=3456-3457.",
      "ja": "SERVER_PORT：このパラメータは、サーバがメディアデータを受信し、情報を制御するために選択された前記ユニキャストRTP / RTCPポートのペアを提供します。これは、範囲、例えば、SERVER_PORT = 3456から3457として指定されます。"
    },
    {
      "indent": 3,
      "text": "ssrc: The ssrc parameter indicates the RTP SSRC [24, Sec. 3] value that should be (request) or will be (response) used by the media server. This parameter is only valid for unicast transmission. It identifies the synchronization source to be associated with the media stream.",
      "ja": "SSRC：SSRCパラメータは、RTP SSRC [24、秒を示します。メディアサーバによって使用される（要求）するか（応答）であろう3]の値。このパラメータは、ユニキャスト送信のためにのみ有効です。これは、メディア・ストリームに関連付けられる同期ソースを識別する。"
    },
    {
      "indent": 3,
      "text": "Transport = \"Transport\" \":\" 1\\#transport-spec transport-spec = transport-protocol/profile[/lower-transport] *parameter transport-protocol = \"RTP\" profile = \"AVP\" lower-transport = \"TCP\" | \"UDP\" parameter = ( \"unicast\" | \"multicast\" ) | \";\" \"destination\" [ \"=\" address ] | \";\" \"interleaved\" \"=\" channel [ \"-\" channel ] | \";\" \"append\" | \";\" \"ttl\" \"=\" ttl | \";\" \"layers\" \"=\" 1*DIGIT | \";\" \"port\" \"=\" port [ \"-\" port ] | \";\" \"client_port\" \"=\" port [ \"-\" port ] | \";\" \"server_port\" \"=\" port [ \"-\" port ] | \";\" \"ssrc\" \"=\" ssrc | \";\" \"mode\" = <\"> 1\\#mode <\"> ttl = 1*3(DIGIT) port = 1*5(DIGIT) ssrc = 8*8(HEX) channel = 1*3(DIGIT) address = host mode = <\"> *Method <\"> | Method",
      "ja": "トランスポート=「交通」「：」1 \\＃輸送スペック輸送スペック=トランスポートプロトコル/プロファイル[/下輸送] *パラメータのトランスポートプロトコル=「RTP」プロファイル=「AVP」低トランスポート=「TCP」 | \"UDP\" パラメータ=（ \"ユニキャスト\" | \"マルチキャスト\"）| \";\" \"宛先\" [ \"=\" アドレス] | \";\" \"インターリーブされた\" \"=\" チャンネル[ \" - \" チャンネル] | \";\" |「追加」 \";\" \"TTL\" \"=\" TTL | \";\" \"層\" \"=\" 1 * DIGIT | \";\" \"ポート\" \"=\" ポート[ \" - \" ポート] | \";\" \"CLIENT_PORT\" \"=\" ポート[ \" - \" ポート] | \";\" \"SERVER_PORT\" \"=\" ポート[ \" - \" ポート] | \";\" \"SSRC\" \"=\" SSRC | \";\" \"モード\" = < \"> 1 \\ #mode <\"> TTL = 1 * 3（DIGIT）ポート= 1 * 5（DIGIT）SSRC = 8×8（HEX）チャネル= 1 * 3（DIGIT）アドレス=ホストモード= < \"> *メソッド<\"> |方法"
    },
    {
      "indent": 3,
      "text": "Example: Transport: RTP/AVP;multicast;ttl=127;mode=\"PLAY\", RTP/AVP;unicast;client_port=3456-3457;mode=\"PLAY\"",
      "ja": "例：トランスポート：RTP / AVP;マルチキャスト; TTL = 127;モード= \"PLAY\"、RTP / AVP;ユニキャスト; CLIENT_PORT = 3456から3457、モード= \"PLAY\""
    },
    {
      "indent": 5,
      "text": "The Transport header is restricted to describing a single RTP stream. (RTSP can also control multiple streams as a single entity.) Making it part of RTSP rather than relying on a multitude of session description formats greatly simplifies designs of firewalls.",
      "ja": "トランスポートヘッダは、単一のRTPストリームを記述に制限されます。 （RTSPはまた、単一のエンティティとして複数のストリームを制御することができる。）それRTSPの一部ではなく、大幅ファイアウォールの設計を簡素化し、セッション記述形式の多くに依存する作ります。"
    },
    {
      "indent": 0,
      "text": "12.40 Unsupported",
      "section_title": true,
      "ja": "サポートされていない12.40"
    },
    {
      "indent": 3,
      "text": "The Unsupported response header lists the features not supported by the server. In the case where the feature was specified via the Proxy-Require field (Section 12.32), if there is a proxy on the path between the client and the server, the proxy MUST insert a message reply with an error message \"551 Option Not Supported\".",
      "ja": "サポートされていないレスポンスヘッダには、サーバでサポートされていない機能を示します。機能は、プロキシ要求フィールド（セクション12.32）を介して指定された場合には、クライアントとサーバの間の経路上にプロキシがある場合、プロキシはサポートされていないと、エラーメッセージ「551オプションでメッセージの返信を挿入しなければなりません」。"
    },
    {
      "indent": 3,
      "text": "See Section 12.32 for a usage example.",
      "ja": "使用例については、セクション12.32を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.41 User-Agent",
      "section_title": true,
      "ja": "12.41のUser-Agent"
    },
    {
      "indent": 3,
      "text": "See [H14.42]",
      "ja": "[H14.42]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.42 Vary",
      "section_title": true,
      "ja": "12.42はヴァリ"
    },
    {
      "indent": 3,
      "text": "See [H14.43]",
      "ja": "[H14.43]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.43 Via",
      "section_title": true,
      "ja": "12.43経由"
    },
    {
      "indent": 3,
      "text": "See [H14.44].",
      "ja": "[H14.44]を参照してください。"
    },
    {
      "indent": 0,
      "text": "12.44 WWW-Authentica",
      "section_title": true,
      "ja": "12.44 WWW-Authentica"
    },
    {
      "indent": 3,
      "text": "See [H14.46].",
      "ja": "[H14.46]を参照してください。"
    },
    {
      "indent": 0,
      "text": "13 Caching",
      "ja": "13キャッシング"
    },
    {
      "indent": 3,
      "text": "In HTTP, response-request pairs are cached. RTSP differs significantly in that respect. Responses are not cacheable, with the exception of the presentation description returned by DESCRIBE or included with ANNOUNCE. (Since the responses for anything but DESCRIBE and GET_PARAMETER do not return any data, caching is not really an issue for these requests.) However, it is desirable for the continuous media data, typically delivered out-of-band with respect to RTSP, to be cached, as well as the session description.",
      "ja": "HTTPでは、応答要求ペアがキャッシュされます。 RTSPはその点で大きく異なります。応答は、DESCRIBEまたはANNOUNCEに含まれていることにより、返されたプレゼンテーション記述を除いて、キャッシュ可能ではありません。 （何のための応答のでしかし、DESCRIBEとGET_PARAMETERはデータを返しませんが、キャッシュは本当にこれらの要求のための問題ではありません。）しかし、それは、通常、RTSPに対する帯域外配信連続メディアデータ、のために望ましいですキャッシュされただけでなく、セッション記述されます。"
    },
    {
      "indent": 3,
      "text": "On receiving a SETUP or PLAY request, a proxy ascertains whether it has an up-to-date copy of the continuous media content and its description. It can determine whether the copy is up-to-date by issuing a SETUP or DESCRIBE request, respectively, and comparing the Last-Modified header with that of the cached copy. If the copy is not up-to-date, it modifies the SETUP transport parameters as appropriate and forwards the request to the origin server. Subsequent control commands such as PLAY or PAUSE then pass the proxy unmodified. The proxy delivers the continuous media data to the client, while possibly making a local copy for later reuse. The exact behavior allowed to the cache is given by the cache-response directives described in Section 12.8. A cache MUST answer any DESCRIBE requests if it is currently serving the stream to the requestor, as it is possible that low-level details of the stream description may have changed on the origin-server.",
      "ja": "SETUPまたはPLAY要求を受信すると、プロキシはそれが連続メディアコンテンツとその説明の最新のコピーを持っているかどうかを確認します。これは、コピーは、それぞれ、SETUPやDESCRIBE要求を発行し、キャッシュされたコピーのそれと最終-Modifiedヘッダを比較することにより、最新であるかどうかを決定することができます。コピーが最新でない場合は、必要に応じてSETUP輸送パラメーターを変更し、元のサーバに要求を転送します。そのような再生または一時停止などの後続の制御コマンドはその後、未修飾プロキシを通過します。おそらく、後で再利用するためのローカルコピーを作成しながら、プロキシは、クライアントへの連続メディアデータを提供します。キャッシュに許可され、正確な動作は、12.8項で説明したキャッシュ応答ディレクティブで与えられます。キャッシュは、それが現在、要求者へのストリームを提供している場合、ストリーム記述の低レベルの詳細は、オリジンサーバ上で変更されている可能性もあるとして任意のは、要求の記述答える必要があります。"
    },
    {
      "indent": 3,
      "text": "Note that an RTSP cache, unlike the HTTP cache, is of the \"cut-through\" variety. Rather than retrieving the whole resource from the origin server, the cache simply copies the streaming data as it passes by on its way to the client. Thus, it does not introduce additional latency.",
      "ja": "RTSPキャッシュは、HTTPのキャッシュとは異なり、「カットスルー」多様であることに注意してください。むしろそれはクライアントへの途中で通過するときのように、キャッシュ単にコピーするストリーミングデータをオリジンサーバからの全体のリソースを取得するよりも。したがって、それは追加の遅延を導入しません。"
    },
    {
      "indent": 3,
      "text": "To the client, an RTSP proxy cache appears like a regular media server, to the media origin server like a client. Just as an HTTP cache has to store the content type, content language, and so on for the objects it caches, a media cache has to store the presentation description. Typically, a cache eliminates all transport-references (that is, multicast information) from the presentation description, since these are independent of the data delivery from the cache to the client. Information on the encodings remains the same. If the cache is able to translate the cached media data, it would create a new presentation description with all the encoding possibilities it can offer.",
      "ja": "クライアントに、RTSPプロキシキャッシュは、クライアントのようなメディアオリジンサーバに、通常のメディアサーバーのように表示されます。 HTTPキャッシュは、それがキャッシュしたオブジェクトのようにコンテンツタイプ、コンテンツの言語、およびを保存するために持っているのと同じように、メディアキャッシュはプレゼンテーション記述を格納することがあります。これらはクライアントにキャッシュからのデータ配信の独立しているため、一般的に、キャッシュは、プレゼンテーション記述から、すべてのトランスポート参照を（つまり、マルチキャスト情報である）がなくなります。エンコーディングに関する情報は同じまま。キャッシュは、キャッシュされたメディアデータを変換することができれば、それが提供できるすべてのエンコーディングの可能性を持つ新しいプレゼンテーション記述を作成します。"
    },
    {
      "indent": 0,
      "text": "14 Examples",
      "ja": "14例"
    },
    {
      "indent": 3,
      "text": "The following examples refer to stream description formats that are not standards, such as RTSL. The following examples are not to be used as a reference for those formats.",
      "ja": "以下の実施例は、RTSLなどの規格ではない記述形式をストリーミングするために参照します。以下の実施例は、これらのフォーマットのための基準として使用されるべきではありません。"
    },
    {
      "indent": 0,
      "text": "14.1 Media on Demand (Unicast)",
      "section_title": true,
      "ja": "オンデマンド14.1メディア（ユニキャスト）"
    },
    {
      "indent": 3,
      "text": "Client C requests a movie from media servers A ( audio.example.com) and V (video.example.com). The media description is stored on a web server W . The media description contains descriptions of the presentation and all its streams, including the codecs that are available, dynamic RTP payload types, the protocol stack, and content information such as language or copyright restrictions. It may also give an indication about the timeline of the movie.",
      "ja": "クライアントCは、メディアサーバー（audio.example.com）から映画を要求し、V（video.example.com）。メディア記述は、ウェブサーバWに格納されます。メディア記述は、そのような言語や著作権の制限など、利用可能なコーデック、ダイナミックRTPペイロードタイプ、プロトコル・スタック、およびコンテンツ情報を含むプレゼンテーションの説明とそのすべてのストリームを、含まれています。また、映画のタイムラインについての指示を与えることがあります。"
    },
    {
      "indent": 3,
      "text": "In this example, the client is only interested in the last part of the movie.",
      "ja": "この例では、クライアントは、映画の最後の部分にのみ関心があります。"
    },
    {
      "indent": 5,
      "text": "C->W: GET /twister.sdp HTTP/1.1 Host: www.example.com Accept: application/sdp",
      "ja": "C-> W：GET /twister.sdp HTTP / 1.1ホスト：www.example.com受け入れ：アプリケーション/ SDP"
    },
    {
      "indent": 5,
      "text": "W->C: HTTP/1.0 200 OK Content-Type: application/sdp v=0 o=- 2890844526 2890842807 IN IP4 192.16.24.202 s=RTSP Session m=audio 0 RTP/AVP 0 a=control:rtsp://audio.example.com/twister/audio.en m=video 0 RTP/AVP 31 a=control:rtsp://video.example.com/twister/video",
      "ja": "W-> C：HTTP / 1.0 200 OKのContent-Type：アプリケーション/ SDP V = 0 0 =  -  IP4 192.16.24.202 S = RTSPセッションメートル=オーディオ0 RTP / AVP 0、A =コントロールで2890844526 2890842807：RTSP：// audio.example.com/twister/audio.enのM =ビデオ0 RTP / AVP 31 =コントロール：RTSP：//video.example.com/twister/video"
    },
    {
      "indent": 5,
      "text": "C->A: SETUP rtsp://audio.example.com/twister/audio.en RTSP/1.0 CSeq: 1 Transport: RTP/AVP/UDP;unicast;client_port=3056-3057",
      "ja": "C-> A：SETUPのRTSP：//audio.example.com/twister/audio.en RTSP / 1.0のCSeq：1トランス：RTP / AVP / UDP、ユニキャスト; CLIENT_PORT = 3056から3057"
    },
    {
      "indent": 5,
      "text": "A->C: RTSP/1.0 200 OK CSeq: 1 Session: 12345678 Transport: RTP/AVP/UDP;unicast;client_port=3056-3057; server_port=5000-5001",
      "ja": "A-> C：RTSP / 1.0 200 OKのCSeq：1セッション：12345678トランスポート：RTP / AVP / UDP、ユニキャスト; CLIENT_PORT = 3056から3057。 SERVER_PORT = 5000-5001"
    },
    {
      "indent": 5,
      "text": "C->V: SETUP rtsp://video.example.com/twister/video RTSP/1.0 CSeq: 1 Transport: RTP/AVP/UDP;unicast;client_port=3058-3059",
      "ja": "C-> V：SETUPのRTSP：1つのトランス：RTP / AVP / UDP、ユニキャスト; CLIENT_PORT = 3058から3059 RTSP / 1.0のCSeq //video.example.com/twister/video"
    },
    {
      "indent": 5,
      "text": "V->C: RTSP/1.0 200 OK CSeq: 1 Session: 23456789 Transport: RTP/AVP/UDP;unicast;client_port=3058-3059; server_port=5002-5003",
      "ja": "V-> C：RTSP / 1.0 200 OKのCSeq：1セッション：23456789トランスポート：RTP / AVP / UDP、ユニキャスト; CLIENT_PORT = 3058から3059。 SERVER_PORT = 5002-5003"
    },
    {
      "indent": 5,
      "text": "C->V: PLAY rtsp://video.example.com/twister/video RTSP/1.0 CSeq: 2 Session: 23456789 Range: smpte=0:10:00-",
      "ja": "C-> V：PLAYのRTSP：2セッション：23456789レンジ：RTSP / 1.0のCSeq //video.example.com/twister/video SMPTE = 0：10：00-"
    },
    {
      "indent": 5,
      "text": "V->C: RTSP/1.0 200 OK CSeq: 2 Session: 23456789 Range: smpte=0:10:00-0:20:00 RTP-Info: url=rtsp://video.example.com/twister/video; seq=12312232;rtptime=78712811",
      "ja": "V-> C：RTSP / 1.0 200 OKのCSeq：2セッション：23456789範囲：SMPTE = 0：10：00-0：20：00 RTP-情報：URL = RTSP：//video.example.com/twister/video ; SEQ = 12312232; rtptime = 78712811"
    },
    {
      "indent": 5,
      "text": "C->A: PLAY rtsp://audio.example.com/twister/audio.en RTSP/1.0 CSeq: 2 Session: 12345678 Range: smpte=0:10:00-",
      "ja": "C-> A：PLAYのRTSP：//audio.example.com/twister/audio.en RTSP / 1.0のCSeq：2セッション：12345678レンジ：SMPTE = 0：10：00-"
    },
    {
      "indent": 5,
      "text": "A->C: RTSP/1.0 200 OK CSeq: 2 Session: 12345678",
      "ja": "A-> C：RTSP / 1.0 200 OKのCSeq：2セッション：12345678"
    },
    {
      "indent": 11,
      "text": "Range: smpte=0:10:00-0:20:00\nRTP-Info: url=rtsp://audio.example.com/twister/audio.en;\n  seq=876655;rtptime=1032181",
      "raw": true
    },
    {
      "indent": 5,
      "text": "C->A: TEARDOWN rtsp://audio.example.com/twister/audio.en RTSP/1.0 CSeq: 3 Session: 12345678",
      "ja": "C-> A：TEARDOWNのRTSP：//audio.example.com/twister/audio.en RTSP / 1.0のCSeq：3セッション：12345678"
    },
    {
      "indent": 5,
      "text": "A->C: RTSP/1.0 200 OK CSeq: 3",
      "ja": "A-> C：RTSP / 1.0 200 OKのCSeq：3"
    },
    {
      "indent": 5,
      "text": "C->V: TEARDOWN rtsp://video.example.com/twister/video RTSP/1.0 CSeq: 3 Session: 23456789",
      "ja": "C-> V：TEARDOWNのRTSP：RTSP //video.example.com/twister/video / 1.0のCSeq：3セッション：23456789"
    },
    {
      "indent": 5,
      "text": "V->C: RTSP/1.0 200 OK CSeq: 3",
      "ja": "V-> C：RTSP / 1.0 200 OKのCSeq：3"
    },
    {
      "indent": 3,
      "text": "Even though the audio and video track are on two different servers, and may start at slightly different times and may drift with respect to each other, the client can synchronize the two using standard RTP methods, in particular the time scale contained in the RTCP sender reports.",
      "ja": "オーディオとビデオトラックが2台の異なるサーバー上にあり、そしてわずかに異なる時間を開始することができ、互いに関してドリフトする場合でも、クライアントは、標準のRTP法を使用して2つを同期させることができ、特に時間スケールは、RTCP送信者に含まれていますレポート。"
    },
    {
      "indent": 0,
      "text": "14.2 Streaming of a Container file",
      "section_title": true,
      "ja": "コンテナファイルの14.2ストリーミング"
    },
    {
      "indent": 3,
      "text": "For purposes of this example, a container file is a storage entity in which multiple continuous media types pertaining to the same end-user presentation are present. In effect, the container file represents an RTSP presentation, with each of its components being RTSP streams. Container files are a widely used means to store such presentations. While the components are transported as independent streams, it is desirable to maintain a common context for those streams at the server end.",
      "ja": "この例の目的のために、コンテナファイルは、同一のエンドユーザのプレゼンテーションに関連する複数の連続的なメディアタイプが存在するストレージ・エンティティです。実際には、コンテナファイルは、その構成要素の各々がRTSPストリームであると、RTSPプレゼンテーションを表します。コンテナファイルは、このようなプレゼンテーションを保存するために広く使用される手段です。構成要素は独立したストリームとして搬送されるが、サーバ側でそれらのストリームに共通のコンテキストを維持することが望ましいです。"
    },
    {
      "indent": 5,
      "text": "This enables the server to keep a single storage handle open easily. It also allows treating all the streams equally in case of any prioritization of streams by the server.",
      "ja": "これは簡単に開いて単一のストレージハンドルを維持するために、サーバーを可能にします。また、サーバによるストリームのいずれかの優先順位付けの場合にも同様にすべてのストリームを処理することができます。"
    },
    {
      "indent": 3,
      "text": "It is also possible that the presentation author may wish to prevent selective retrieval of the streams by the client in order to preserve the artistic effect of the combined media presentation. Similarly, in such a tightly bound presentation, it is desirable to be able to control all the streams via a single control message using an aggregate URL.",
      "ja": "プレゼンテーションの作成者が複合メディアプレゼンテーションの芸術的効果を維持するために、クライアントがストリームを選択的に検索することを防止したいことも可能です。同様に、強固に結合したプレゼンテーションでは、集約URLを使用して、単一の制御メッセージを介して全てのストリームを制御できることが望ましいです。"
    },
    {
      "indent": 3,
      "text": "The following is an example of using a single RTSP session to control multiple streams. It also illustrates the use of aggregate URLs.",
      "ja": "以下は、複数のストリームを制御するために単一のRTSPセッションを使用する例です。また、集計のURLの使用を示しています。"
    },
    {
      "indent": 3,
      "text": "Client C requests a presentation from media server M . The movie is stored in a container file. The client has obtained an RTSP URL to the container file.",
      "ja": "クライアントCは、メディアサーバMからのプレゼンテーションを要求します。映画はコンテナファイルに格納されています。クライアントは、コンテナファイルにRTSPのURLを取得しています。"
    },
    {
      "indent": 5,
      "text": "C->M: DESCRIBE rtsp://foo/twister RTSP/1.0 CSeq: 1",
      "ja": "C-> M：// FOO /ツイスターRTSP / 1.0のCSeq：RTSPの記述1"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 1 Content-Type: application/sdp Content-Length: 164",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：1のContent-Type：アプリケーション/ SDPコンテンツの長さ：164"
    },
    {
      "indent": 11,
      "text": "v=0\no=- 2890844256 2890842807 IN IP4 172.16.2.93\ns=RTSP Session\ni=An Example of RTSP Session Usage\na=control:rtsp://foo/twister\nt=0 0\nm=audio 0 RTP/AVP 0\na=control:rtsp://foo/twister/audio\nm=video 0 RTP/AVP 26\na=control:rtsp://foo/twister/video",
      "raw": true
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://foo/twister/audio RTSP/1.0 CSeq: 2 Transport: RTP/AVP;unicast;client_port=8000-8001",
      "ja": "C-> M：SETUPのRTSP：// FOO /ツイスター/オーディオRTSP / 1.0のCSeq：2トランスポート：RTP / AVP;ユニキャスト; CLIENT_PORT = 8000から8001"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 2 Transport: RTP/AVP;unicast;client_port=8000-8001; server_port=9000-9001 Session: 12345678",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：2トランスポート：RTP / AVP;ユニキャスト; CLIENT_PORT = 8000から8001。 SERVER_PORT = 9000-9001セッション：12345678"
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://foo/twister/video RTSP/1.0 CSeq: 3 Transport: RTP/AVP;unicast;client_port=8002-8003 Session: 12345678",
      "ja": "C-> M：SETUPのRTSP：// FOO /ツイスター/ビデオRTSP / 1.0のCSeq：3トランスポート：RTP / AVP;ユニキャスト; CLIENT_PORT = 8002から8003セッション：12345678"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 3 Transport: RTP/AVP;unicast;client_port=8002-8003; server_port=9004-9005 Session: 12345678",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：3トランスポート：RTP / AVP;ユニキャスト; CLIENT_PORT = 8002から8003。 SERVER_PORT = 9004-9005セッション：12345678"
    },
    {
      "indent": 5,
      "text": "C->M: PLAY rtsp://foo/twister RTSP/1.0 CSeq: 4 Range: npt=0- Session: 12345678",
      "ja": "C-> M：PLAYのRTSP：// FOO /ツイスターRTSP / 1.0のCSeq：4範囲：NPT = 0-セッション：12345678"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 4 Session: 12345678 RTP-Info: url=rtsp://foo/twister/video; seq=9810092;rtptime=3450012",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：4セッション：12345678 RTP-情報：URL = RTSP：// FOO /ツイスター/ビデオ。 SEQ = 9810092; rtptime = 3450012"
    },
    {
      "indent": 5,
      "text": "C->M: PAUSE rtsp://foo/twister/video RTSP/1.0 CSeq: 5 Session: 12345678",
      "ja": "C-> M：PAUSEのRTSP：// FOO /ツイスター/ビデオRTSP / 1.0のCSeq：5セッション：12345678"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 460 Only aggregate operation allowed CSeq: 5",
      "ja": "M-> C：RTSP / 1.0 460のみ集計操作許可のCSeq：5"
    },
    {
      "indent": 5,
      "text": "C->M: PAUSE rtsp://foo/twister RTSP/1.0 CSeq: 6 Session: 12345678",
      "ja": "C-> M：PAUSEのRTSP：// FOO /ツイスターRTSP / 1.0のCSeq：6セッション：12345678"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 6 Session: 12345678",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：6セッション：12345678"
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://foo/twister RTSP/1.0 CSeq: 7 Transport: RTP/AVP;unicast;client_port=10000",
      "ja": "C-> M：SETUPのRTSP：// FOO /ツイスターRTSP / 1.0のCSeq：7トランスポート：RTP / AVP;ユニキャスト; CLIENT_PORT = 10000"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 459 Aggregate operation not allowed CSeq: 7",
      "ja": "M-> C：RTSP / 1.0 459集約操作は許されないのCSeq：7"
    },
    {
      "indent": 3,
      "text": "In the first instance of failure, the client tries to pause one stream (in this case video) of the presentation. This is disallowed for that presentation by the server. In the second instance, the aggregate URL may not be used for SETUP and one control message is required per stream to set up transport parameters.",
      "ja": "故障の最初のインスタンスでは、クライアントは、プレゼンテーションの一つのストリーム（ここではビデオ）を一時停止しようとします。これは、サーバーによってそのプレゼンテーションのために許可されていません。第二の例において、骨材URLは、セットアップに使用されず、一つの制御メッセージは、トランスポートパラメータを設定するためにストリーム毎に必要とされます。"
    },
    {
      "indent": 5,
      "text": "This keeps the syntax of the Transport header simple and allows easy parsing of transport information by firewalls.",
      "ja": "これは、トランスポート・ヘッダーの簡単なの構文を保持し、ファイアウォールによって交通情報を簡単に解析することができます。"
    },
    {
      "indent": 0,
      "text": "14.3 Single Stream Container Files",
      "section_title": true,
      "ja": "14.3単一ストリームコンテナファイル"
    },
    {
      "indent": 3,
      "text": "Some RTSP servers may treat all files as though they are \"container files\", yet other servers may not support such a concept. Because of this, clients SHOULD use the rules set forth in the session description for request URLs, rather than assuming that a consistent URL may always be used throughout. Here's an example of how a multi-stream server might expect a single-stream file to be served:",
      "ja": "彼らは、「コンテナファイル」であるかのように、一部のRTSPサーバは、すべてのファイルを扱うことができ、さらに他のサーバには、このような概念をサポートしていないかもしれません。このため、クライアントではなく、一貫性のあるURLは、常に全体で使用することができることを想定するよりも、リクエストURLのセッション記述に記載されたルールを使用すべきです。ここでは、マルチストリームサーバが単一ストリームファイルが提供されることを期待するかもしれない方法の例を示します。"
    },
    {
      "indent": 10,
      "text": "Accept: application/x-rtsp-mh, application/sdp",
      "ja": "アプリケーション/ X-RTSP-MH、アプリケーション/ SDP：受け入れます"
    },
    {
      "indent": 10,
      "text": "CSeq: 1",
      "ja": "CSeq：1"
    },
    {
      "indent": 4,
      "text": "S->C RTSP/1.0 200 OK CSeq: 1 Content-base: rtsp://foo.com/test.wav/ Content-type: application/sdp Content-length: 48",
      "ja": "S-> C RTSP / 1.0 200 OKのCSeq：1コンテンツベース：RTSP：//foo.com/test.wav/コンテンツタイプ：アプリケーション/ SDPコンテンツの長さ：48"
    },
    {
      "indent": 10,
      "text": "v=0\no=- 872653257 872653257 IN IP4 172.16.2.187\ns=mu-law wave file\ni=audio test\nt=0 0\nm=audio 0 RTP/AVP 0\na=control:streamid=0",
      "raw": true
    },
    {
      "indent": 4,
      "text": "C->S SETUP rtsp://foo.com/test.wav/streamid=0 RTSP/1.0 Transport: RTP/AVP/UDP;unicast; client_port=6970-6971;mode=play CSeq: 2",
      "ja": "C-> S SETUPのRTSP：RTSP / 1.0交通//foo.com/test.wav/streamid=0：RTP / AVP / UDP;ユニキャスト; CLIENT_PORT = 6970-6971;モード=プレイのCSeq：2"
    },
    {
      "indent": 4,
      "text": "S->C RTSP/1.0 200 OK Transport: RTP/AVP/UDP;unicast;client_port=6970-6971; server_port=6970-6971;mode=play CSeq: 2 Session: 2034820394",
      "ja": "S-> C RTSP / 1.0 200 OKトランスポート：RTP / AVP / UDP、ユニキャスト; CLIENT_PORT = 6970から6971。 SERVER_PORT = 6970-6971;モード=プレイのCSeq：2セッション：2034820394"
    },
    {
      "indent": 4,
      "text": "C->S PLAY rtsp://foo.com/test.wav RTSP/1.0 CSeq: 3 Session: 2034820394",
      "ja": "C-> S PLAYのRTSP：//foo.com/test.wav RTSP / 1.0のCSeq：3セッション：2034820394"
    },
    {
      "indent": 4,
      "text": "S->C RTSP/1.0 200 OK CSeq: 3 Session: 2034820394 RTP-Info: url=rtsp://foo.com/test.wav/streamid=0; seq=981888;rtptime=3781123",
      "ja": "S-> C RTSP / 1.0 200 OKのCSeq：3セッション：2034820394 RTP-情報：URL = RTSP：//foo.com/test.wav/streamid=0。 SEQ = 981888; rtptime = 3781123"
    },
    {
      "indent": 3,
      "text": "Note the different URL in the SETUP command, and then the switch back to the aggregate URL in the PLAY command. This makes complete sense when there are multiple streams with aggregate control, but is less than intuitive in the special case where the number of streams is one.",
      "ja": "SETUPコマンドで別のURLをメモし、スイッチバックPLAYコマンドで集計URLへ。これは、集計コントロールで複数のストリームがあり、完全な意味がありますが、ストリームの数が1つの特殊なケースでは、直感的な未満です。"
    },
    {
      "indent": 3,
      "text": "In this special case, it is recommended that servers be forgiving of implementations that send:",
      "ja": "この特殊なケースでは、サーバが送信実装の寛容にすることをお勧めします："
    },
    {
      "indent": 4,
      "text": "C->S PLAY rtsp://foo.com/test.wav/streamid=0 RTSP/1.0 CSeq: 3",
      "ja": "C-> S PLAYのRTSP：RTSP / 1.0のCSeq //foo.com/test.wav/streamid=0：3"
    },
    {
      "indent": 3,
      "text": "In the worst case, servers should send back:",
      "ja": "最悪の場合、サーバは戻って送信する必要があります："
    },
    {
      "indent": 4,
      "text": "S->C RTSP/1.0 460 Only aggregate operation allowed CSeq: 3",
      "ja": "S-> C RTSP / 1.0 460のみ集計操作許可のCSeq：3"
    },
    {
      "indent": 3,
      "text": "One would also hope that server implementations are also forgiving of the following:",
      "ja": "一つは、また、サーバの実装は、以下の寛容であることを望んでいるだろう。"
    },
    {
      "indent": 4,
      "text": "C->S SETUP rtsp://foo.com/test.wav RTSP/1.0 Transport: rtp/avp/udp;client_port=6970-6971;mode=play CSeq: 2",
      "ja": "C-> S SETUPのRTSP：//foo.com/test.wav RTSP / 1.0トランスポート：RTP / UDP / AVP; CLIENT_PORT = 6970から6971;モード=プレイのCSeq：2"
    },
    {
      "indent": 3,
      "text": "Since there is only a single stream in this file, it's not ambiguous what this means.",
      "ja": "このファイル内の唯一の単一のストリームがあるので、これは何を意味するのかあいまいではありません。"
    },
    {
      "indent": 0,
      "text": "14.4 Live Media Presentation Using Multicast",
      "section_title": true,
      "ja": "14.4ライブメディアプレゼンテーション使用したマルチキャスト"
    },
    {
      "indent": 3,
      "text": "The media server M chooses the multicast address and port. Here, we assume that the web server only contains a pointer to the full description, while the media server M maintains the full description.",
      "ja": "メディアサーバMは、マルチキャストアドレスとポートを選択します。ここでは、メディアサーバMは、完全な説明を維持しながら、Webサーバが唯一、完全な説明へのポインタが含まれていることを前提としています。"
    },
    {
      "indent": 5,
      "text": "C->W: GET /concert.sdp HTTP/1.1 Host: www.example.com",
      "ja": "C-> W：GET /concert.sdp HTTP / 1.1ホスト：www.example.com"
    },
    {
      "indent": 5,
      "text": "W->C: HTTP/1.1 200 OK Content-Type: application/x-rtsl",
      "ja": "W-> C：HTTP / 1.1 200 OKのContent-Type：アプリケーション/ X-RTSL"
    },
    {
      "indent": 11,
      "text": "<session>\n  <track src=\"rtsp://live.example.com/concert/audio\">\n</session>",
      "raw": true
    },
    {
      "indent": 5,
      "text": "C->M: DESCRIBE rtsp://live.example.com/concert/audio RTSP/1.0 CSeq: 1",
      "ja": "C-> M：//live.example.com/concert/audio RTSP / 1.0のCSeq：1 RTSPの記述"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 1 Content-Type: application/sdp Content-Length: 44",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：1のContent-Type：アプリケーション/ SDPコンテンツの長さ：44"
    },
    {
      "indent": 11,
      "text": "v=0\no=- 2890844526 2890842807 IN IP4 192.16.24.202\ns=RTSP Session\nm=audio 3456 RTP/AVP 0\na=control:rtsp://live.example.com/concert/audio\nc=IN IP4 224.2.0.1/16",
      "raw": true
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://live.example.com/concert/audio RTSP/1.0 CSeq: 2",
      "ja": "C-> M：SETUPのRTSP：RTSP / 1.0のCSeq //live.example.com/concert/audio：2"
    },
    {
      "indent": 11,
      "text": "Transport: RTP/AVP;multicast",
      "ja": "トランスポート：RTP / AVP;マルチキャスト"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 2 Transport: RTP/AVP;multicast;destination=224.2.0.1; port=3456-3457;ttl=16 Session: 0456804596",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：2トランスポート：RTP / AVP、マルチキャスト、宛先= 224.2.0.1。ポート= 3456-3457; TTL = 16セッション：0456804596"
    },
    {
      "indent": 5,
      "text": "C->M: PLAY rtsp://live.example.com/concert/audio RTSP/1.0 CSeq: 3 Session: 0456804596",
      "ja": "C-> M：PLAYのRTSP：//live.example.com/concert/audio RTSP / 1.0のCSeq：3セッション：0456804596"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 3 Session: 0456804596",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：3セッション：0456804596"
    },
    {
      "indent": 0,
      "text": "14.5 Playing media into an existing session",
      "section_title": true,
      "ja": "既存のセッションにメディアを再生する14.5"
    },
    {
      "indent": 3,
      "text": "A conference participant C wants to have the media server M play back a demo tape into an existing conference. C indicates to the media server that the network addresses and encryption keys are already given by the conference, so they should not be chosen by the server. The example omits the simple ACK responses.",
      "ja": "会議参加者Cは、メディアサーバMは、既存の会議にデモ・テープを再生したいと考えています。 Cは、ネットワークアドレスと暗号化キーがすでに会議で与えられているメディアサーバーに示しますので、彼らは、サーバーによって選択されるべきではありません。一例では、単純なACK応答を省略します。"
    },
    {
      "indent": 5,
      "text": "C->M: DESCRIBE rtsp://server.example.com/demo/548/sound RTSP/1.0 CSeq: 1 Accept: application/sdp",
      "ja": "C-> M：//server.example.com/demo/548/sound RTSP / 1.0のCSeq：RTSPの記述1受け入れ：アプリケーション/ SDP"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 1 OK Content-type: application/sdp Content-Length: 44",
      "ja": "M-> C：RTSP / 1.0 200 OK 1コンテンツタイプ：アプリケーション/ sdpのコンテンツ長：44"
    },
    {
      "indent": 11,
      "text": "v=0\no=- 2890844526 2890842807 IN IP4 192.16.24.202\ns=RTSP Session\ni=See above\nt=0 0\nm=audio 0 RTP/AVP 0",
      "raw": true
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://server.example.com/demo/548/sound RTSP/1.0 CSeq: 2 Transport: RTP/AVP;multicast;destination=225.219.201.15; port=7000-7001;ttl=127 Conference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr",
      "ja": "C-> M：SETUPのRTSP：//server.example.com/demo/548/sound RTSP / 1.0のCSeq：2トランスポート：RTP / AVP、マルチキャスト、宛先= 225.219.201.15。ポート= 7000-7001; TTL = 127会議：199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 2 Transport: RTP/AVP;multicast;destination=225.219.201.15;",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：2トランスポート：RTP / AVP、マルチキャスト、宛先= 225.219.201.15。"
    },
    {
      "indent": 11,
      "text": "           port=7000-7001;ttl=127\nSession: 91389234234\nConference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr",
      "raw": true
    },
    {
      "indent": 5,
      "text": "C->M: PLAY rtsp://server.example.com/demo/548/sound RTSP/1.0 CSeq: 3 Session: 91389234234",
      "ja": "C-> M：PLAYのRTSP：//server.example.com/demo/548/sound RTSP / 1.0のCSeq：3セッション：91389234234"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 3",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：3"
    },
    {
      "indent": 0,
      "text": "14.6 Recording",
      "section_title": true,
      "ja": "14.6録画"
    },
    {
      "indent": 3,
      "text": "The conference participant client C asks the media server M to record the audio and video portions of a meeting. The client uses the ANNOUNCE method to provide meta-information about the recorded session to the server.",
      "ja": "会議参加者のクライアントCは、会議のオーディオおよびビデオ部分を記録するために、メディアサーバMを要求します。クライアントはサーバーに記録されたセッションに関するメタ情報を提供するために、ANNOUNCEメソッドを使用しています。"
    },
    {
      "indent": 5,
      "text": "C->M: ANNOUNCE rtsp://server.example.com/meeting RTSP/1.0 CSeq: 90 Content-Type: application/sdp Content-Length: 121",
      "ja": "C-> M：//server.example.com/meeting RTSP / 1.0のCSeq：90のContent-Type：アプリケーション/ SDPのContent-Length：RTSPを発表121"
    },
    {
      "indent": 11,
      "text": "v=0\no=camera1 3080117314 3080118787 IN IP4 195.27.192.36\ns=IETF Meeting, Munich - 1\ni=The thirty-ninth IETF meeting will be held in Munich, Germany\nu=http://www.ietf.org/meetings/Munich.html\ne=IETF Channel 1 <ietf39-mbone@uni-koeln.de>\np=IETF Channel 1 +49-172-2312 451\nc=IN IP4 224.0.1.11/127\nt=3080271600 3080703600\na=tool:sdr v2.4a6\na=type:test\nm=audio 21010 RTP/AVP 5\nc=IN IP4 224.0.1.11/127\na=ptime:40\nm=video 61010 RTP/AVP 31\nc=IN IP4 224.0.1.12/127",
      "raw": true
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 90",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：90"
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://server.example.com/meeting/audiotrack RTSP/1.0 CSeq: 91 Transport: RTP/AVP;multicast;destination=224.0.1.11; port=21010-21011;mode=record;ttl=127",
      "ja": "C-> M：SETUP RTSP：//server.example.com/meeting/audiotrack RTSP / 1.0のCSeq：91トランスポート：RTP / AVP、マルチキャスト、宛先= 224.0.1.11。ポート= 21010から21011;モード=レコード、TTL = 127"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 91 Session: 50887676 Transport: RTP/AVP;multicast;destination=224.0.1.11; port=21010-21011;mode=record;ttl=127",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：91セッション：50887676トランスポート：RTP / AVP、マルチキャスト、宛先= 224.0.1.11。ポート= 21010から21011;モード=レコード、TTL = 127"
    },
    {
      "indent": 5,
      "text": "C->M: SETUP rtsp://server.example.com/meeting/videotrack RTSP/1.0 CSeq: 92 Session: 50887676 Transport: RTP/AVP;multicast;destination=224.0.1.12; port=61010-61011;mode=record;ttl=127",
      "ja": "C-> M：SETUP RTSP：//server.example.com/meeting/videotrack RTSP / 1.0のCSeq：92セッション：50887676トランスポート：RTP / AVP、マルチキャスト、宛先= 224.0.1.12。ポート= 61010から61011;モード=レコード、TTL = 127"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 92 Transport: RTP/AVP;multicast;destination=224.0.1.12; port=61010-61011;mode=record;ttl=127",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：92トランスポート：RTP / AVP、マルチキャスト、宛先= 224.0.1.12。ポート= 61010から61011;モード=レコード、TTL = 127"
    },
    {
      "indent": 5,
      "text": "C->M: RECORD rtsp://server.example.com/meeting RTSP/1.0 CSeq: 93 Session: 50887676 Range: clock=19961110T1925-19961110T2015",
      "ja": "C-> M：RECORD RTSP：//server.example.com/meeting RTSP / 1.0のCSeq：93セッション：50887676範囲：クロック= 19961110T1925-19961110T2015"
    },
    {
      "indent": 5,
      "text": "M->C: RTSP/1.0 200 OK CSeq: 93",
      "ja": "M-> C：RTSP / 1.0 200 OKのCSeq：93"
    },
    {
      "indent": 0,
      "text": "15 Syntax",
      "ja": "15構文"
    },
    {
      "indent": 3,
      "text": "The RTSP syntax is described in an augmented Backus-Naur form (BNF) as used in RFC 2068 [2].",
      "ja": "RFC 2068で使用されるRTSPの構文は、拡張バッカス正規形（BNF）に記載されている[2]。"
    },
    {
      "indent": 0,
      "text": "15.1 Base Syntax",
      "section_title": true,
      "ja": "15.1基本構文"
    },
    {
      "indent": 3,
      "text": "OCTET = <any 8-bit sequence of data> CHAR = <any US-ASCII character (octets 0 - 127)> UPALPHA = <any US-ASCII uppercase letter \"A\"..\"Z\"> LOALPHA = <any US-ASCII lowercase letter \"a\"..\"z\"> ALPHA = UPALPHA | LOALPHA",
      "ja": "OCTET = CHAR = <任意のUS-ASCII文字（オクテット0から127まで）> <データの任意の8ビットのシーケンス> UPALPHA = <任意のUS-ASCII文字の大文字 \"A\" .. \"Z\"> LOALPHA = <任意のUS- ASCII小文字 \"\" .. \"Z\"> ALPHA = UPALPHA | LOALPHA"
    },
    {
      "indent": 3,
      "text": "DIGIT = <any US-ASCII digit \"0\"..\"9\"> CTL = <any US-ASCII control character (octets 0 - 31) and DEL (127)> CR = <US-ASCII CR, carriage return (13)> LF = <US-ASCII LF, linefeed (10)>",
      "ja": "DIGIT = <任意US-ASCII数字 \"0\" .. \"9\"> CTL = <任意US-ASCII制御文字（オクテット0から31）およびDEL（127）> CR = <US-ASCII CR、キャリッジリターン（13 ）> LF = <US-ASCII LF、改行（10）>"
    },
    {
      "indent": 3,
      "text": "SP = <US-ASCII SP, space (32)> HT = <US-ASCII HT, horizontal-tab (9)> <\"> = <US-ASCII double-quote mark (34)> CRLF = CR LF",
      "ja": "SP = <US-ASCIIのSP、スペース（32）> HT = <US-ASCIIのHT、水平タブ（9）> < \"> = <US-ASCIIの二重引用符（34）> CRLF = CR LF"
    },
    {
      "indent": 3,
      "text": "LWS = [CRLF] 1*( SP | HT ) TEXT = <any OCTET except CTLs> tspecials = \"(\" | \")\" | \"<\" | \">\" | \"@\" | \",\" | \";\" | \":\" | \"\\\" | <\"> | \"/\" | \"[\" | \"]\" | \"?\" | \"=\" | \"{\" | \"}\" | SP | HT",
      "ja": "LWS = [CRLF] 1 *（SP | HT）TEXT = <CTLを除くすべてのOCTET> tspecials = \"（\" | \"）\" | \"<\" | \">\" | \"@\" | \"\" | \";\" | \"：\" | \"\\\" | < \"> | \"/\" | \"[\" | \"]\" | \"？\" | \"=\" | \"{\" | \"}\" | SP | HT"
    },
    {
      "indent": 3,
      "text": "token = 1*<any CHAR except CTLs or tspecials> quoted-string = ( <\"> *(qdtext) <\"> ) qdtext = <any TEXT except <\">> quoted-pair = \"\\\" CHAR",
      "ja": "トークン= 1 * <任意のCHAR的CTLまたはtspecials除く>引用符で囲んだ文字列=（< \"> *（qdtext）<\">）<「>>引用されたペア= \"\\\" CHAR除くqdtext = <任意のテキスト"
    },
    {
      "indent": 3,
      "text": "message-header = field-name \":\" [ field-value ] CRLF field-name = token field-value = *( field-content | LWS ) field-content = <the OCTETs making up the field-value and consisting of either *TEXT or combinations of token, tspecials, and quoted-string>",
      "ja": "メッセージヘッダー=フィールド名「：」[フィールド値] CRLFフィールド名=トークンフィールド値= *（フィールド・コンテンツ| LWS）フィールド、コンテンツ= <オクテットフィールド値を構成するいずれかからなります* TEXTまたはトークン、tspecialsの組み合わせ、および引用符で囲まれた文字列>"
    },
    {
      "indent": 3,
      "text": "safe = \"\\$\" | \"-\" | \"_\" | \".\" | \"+\" extra = \"!\" | \"*\" | \"$'$\" | \"(\" | \")\" | \",\"",
      "ja": "安全= \"\\ $\" | \" - \" | \"_\" | \"\" | \"+\" 余分= \"！\" | \"*\" | \"$\" $\" | \"（\" | \"）\" | \"\""
    },
    {
      "indent": 3,
      "text": "hex = DIGIT | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" escape = \"\\%\" hex hex reserved = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\"",
      "ja": "六角= DIGIT | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | 「」| \"B\" | \"C\" | \"D\" | \"E\" | =予約 \"F\" エスケープ= \"\\％\" の六角進 \";\" | \"/\" | \"？\" | \"：\" | \"@\" | \"＆\" | \"=\""
    },
    {
      "indent": 3,
      "text": "unreserved = alpha | digit | safe | extra xchar = unreserved | reserved | escape",
      "ja": "予約されていない=アルファ|数字|安全|余分なXCHAR =予約されていません|予約|逃れる"
    },
    {
      "indent": 0,
      "text": "16 Security Considerations",
      "ja": "16のセキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Because of the similarity in syntax and usage between RTSP servers and HTTP servers, the security considerations outlined in [H15] apply. Specifically, please note the following:",
      "ja": "RTSPサーバとHTTPサーバ間の構文および使用方法の類似性に、[H15]に概説されたセキュリティ上の考慮事項が適用されますので。具体的には、以下の点に注意してください。"
    },
    {
      "indent": 3,
      "text": "Authentication Mechanisms: RTSP and HTTP share common authentication schemes, and thus should follow the same prescriptions with regards to authentication. See [H15.1] for client authentication issues, and [H15.2] for issues regarding support for multiple authentication mechanisms.",
      "ja": "認証メカニズム：RTSPとHTTPの共通の認証方式、およびこれには、認証に関して同じ処方に従ってください。複数の認証メカニズムのサポートに関する問題については[H15.2]クライアント認証の問題のために[H15.1]を参照してください、と。"
    },
    {
      "indent": 3,
      "text": "Abuse of Server Log Information: RTSP and HTTP servers will presumably have similar logging mechanisms, and thus should be equally guarded in protecting the contents of those logs, thus protecting the privacy of the users of the servers. See [H15.3] for HTTP server recommendations regarding server logs.",
      "ja": "サーバーログ情報の乱用：RTSPとHTTPサーバーは、おそらく同様のログメカニズムを持つことになりますので、均等ので、サーバの利用者のプライバシーを保護し、これらのログの内容を保護する上で守られるべきです。サーバログに関するHTTPサーバの推奨事項については[H15.3]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Transfer of Sensitive Information: There is no reason to believe that information transferred via RTSP may be any less sensitive than that normally transmitted via HTTP. Therefore, all of the precautions regarding the protection of data privacy and user privacy apply to implementors of RTSP clients, servers, and proxies. See [H15.4] for further details.",
      "ja": "機密情報の転送：RTSPを経由して転送される情報は、通常、HTTPを介して送信それよりも感受性が低いことを信じるべき理由はありません。そのため、データのプライバシーとユーザーのプライバシーの保護に関する注意事項のすべては、RTSPクライアント、サーバ、およびプロキシの実装に適用されます。詳細は[H15.4]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Attacks Based On File and Path Names: Though RTSP URLs are opaque handles that do not necessarily have file system semantics, it is anticipated that many implementations will translate portions of the request URLs directly to file system calls. In such cases, file systems SHOULD follow the precautions outlined in [H15.5], such as checking for \"..\" in path components.",
      "ja": "ファイルとパス名に基づく攻撃：しかしRTSP URLは必ずしもファイルシステムのセマンティクスを持っていない不透明なハンドルです、多くの実装は、システムコールをファイルに直接リクエストURLの部分を翻訳することが予想されます。このような場合、ファイルシステムは、パスコンポーネントの「..」のチェックとして[H15.5]に概説注意事項を、従うべきです。"
    },
    {
      "indent": 3,
      "text": "Personal Information: RTSP clients are often privy to the same information that HTTP clients are (user name, location, etc.) and thus should be equally. See [H15.6] for further recommendations.",
      "ja": "個人情報：RTSPクライアントは、多くの場合、均等にする必要がありますので、HTTPクライアントがあるのと同じ情報（ユーザー名、場所など）に関与しています。さらに推奨事項については[H15.6]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Privacy Issues Connected to Accept Headers: Since may of the same \"Accept\" headers exist in RTSP as in HTTP, the same caveats outlined in [H15.7] with regards to their use should be followed.",
      "ja": "ヘッダを許可するように接続プライバシーの問題：同一の「同意」ヘッダの可能性があるために、HTTPのようにRTSPに存在し、それらの使用に関して[H15.7]に概説したものと同じ警告に従うべきです。"
    },
    {
      "indent": 3,
      "text": "DNS Spoofing: Presumably, given the longer connection times typically associated to RTSP sessions relative to HTTP sessions, RTSP client DNS optimizations should be less prevalent. Nonetheless, the recommendations provided in [H15.8] are still relevant to any implementation which attempts to rely on a DNS-to-IP mapping to hold beyond a single use of the mapping.",
      "ja": "DNSスプーフィングは：おそらく、通常、HTTPセッションに対するRTSPセッションに関連付けられた長い接続時間与えられ、RTSPクライアントのDNSの最適化はあまり普及しなければなりません。それにもかかわらず、[H15.8]に設けられた推奨事項は依然としてマッピングの単一の使用を超えて保持するためにDNSとIPマッピングに依拠しようとする任意の実装に関連しています。"
    },
    {
      "indent": 3,
      "text": "Location Headers and Spoofing: If a single server supports multiple organizations that do not trust one another, then it must check the values of Location and Content-Location headers in responses that are generated under control of said organizations to make sure that they do not attempt to invalidate resources over which they have no authority. ([H15.9])",
      "ja": "場所ヘッダーおよびなりすまし：単一のサーバーが相互に信頼していない複数の組織をサポートしている場合、それは彼らがしようとしないことを確認すると、組織の制御下で生成された応答における位置の値とContent-場所ヘッダを確認する必要があります彼らは何の権限を持っていないその上のリソースを無効にします。 （[H15.9]）"
    },
    {
      "indent": 3,
      "text": "In addition to the recommendations in the current HTTP specification (RFC 2068 [2], as of this writing), future HTTP specifications may provide additional guidance on security issues.",
      "ja": "（RFC 2068 [2]、これを書いているような）現在のHTTP仕様の推奨事項に加えて、将来のHTTP仕様は、セキュリティ上の問題に関する追加のガイダンスを提供してもよいです。"
    },
    {
      "indent": 3,
      "text": "The following are added considerations for RTSP implementations.",
      "ja": "以下は、RTSPの実装のための考慮事項を追加されます。"
    },
    {
      "indent": 3,
      "text": "Concentrated denial-of-service attack: The protocol offers the opportunity for a remote-controlled denial-of-service attack. The attacker may initiate traffic flows to one or more IP addresses by specifying them as the destination in SETUP requests. While the attacker's IP address may be known in this case, this is not always useful in prevention of more attacks or ascertaining the attackers identity. Thus, an RTSP server SHOULD only allow client-specified destinations for RTSP-initiated traffic flows if the server has verified the client's identity, either against a database of known users using RTSP authentication mechanisms (preferably digest authentication or stronger), or other secure means.",
      "ja": "集中サービス拒否攻撃：プロトコルは、リモート制御のサービス拒否攻撃の機会を提供しています。トラフィックを開始することができる攻撃者は、SETUP要求の宛先として指定することにより、1つ以上のIPアドレスに流れます。攻撃者のIPアドレスが、この場合には知られているかもしれないが、これは常により多くの攻撃の予防または攻撃者の身元を確認する際に有用ではありません。このように、RTSPサーバはRTSPの認証メカニズム（好ましくは認証や強いダイジェスト）、または他の安全な手段を使用して、サーバがクライアントの身元を確認した場合RTSP-開始されるトラフィックのためのクライアント指定の宛先が流れ、いずれかの既知のユーザーのデータベースに対して許可する必要があります。"
    },
    {
      "indent": 3,
      "text": "Session hijacking: Since there is no relation between a transport layer connection and an RTSP session, it is possible for a malicious client to issue requests with random session identifiers which would affect unsuspecting clients. The server SHOULD use a large, random and non-sequential session identifier to minimize the possibility of this kind of attack.",
      "ja": "セッションハイジャックは：トランスポート層接続およびRTSPセッションの間には関係がないため、悪意のあるクライアントは、疑いを持たないクライアントに影響を与えるランダムなセッション識別子を持つ要求を発行することが可能です。サーバーは、この種の攻撃の可能性を最小限に抑えるために、大規模なランダムおよび非連続のセッション識別子を使用すべきです。"
    },
    {
      "indent": 3,
      "text": "Authentication: Servers SHOULD implement both basic and digest [8] authentication. In environments requiring tighter security for the control messages, the RTSP control stream may be encrypted.",
      "ja": "認証：サーバは、両方の基本を実装し、[8]ダイジェスト認証をすべきです。制御メッセージのより厳しいセキュリティを必要とする環境では、RTSP制御ストリームは暗号化されてもよいです。"
    },
    {
      "indent": 3,
      "text": "Stream issues: RTSP only provides for stream control. Stream delivery issues are not covered in this section, nor in the rest of this memo. RTSP implementations will most likely rely on other protocols such as RTP, IP multicast, RSVP and IGMP, and should address security considerations brought up in those and other applicable specifications.",
      "ja": "ストリームの問題：RTSPのみストリーム制御のために用意されています。ストリーム配信の問題は、このセクションでは、またこのメモの残りの部分でカバーされていません。 RTSPの実装は、ほとんどの場合、このようなRTP、IPマルチキャスト、RSVPやIGMPなどの他のプロトコルに依存し、これらのおよびその他の該当する仕様で育ったセキュリティ上の考慮事項に対処すべきです。"
    },
    {
      "indent": 3,
      "text": "Persistently suspicious behavior: RTSP servers SHOULD return error code 403 (Forbidden) upon receiving a single instance of behavior which is deemed a security risk. RTSP servers SHOULD also be aware of attempts to probe the server for weaknesses and entry points and MAY arbitrarily disconnect and ignore further requests clients which are deemed to be in violation of local security policy.",
      "ja": "永続的に疑わしい動作：RTSPサーバは、セキュリティ上のリスクがあるとみなされる行動の単一のインスタンスを受信すると、エラーコード403（禁止）を返すべきです。 RTSPサーバも弱点とエントリポイントのサーバーをプローブするための試みを認識すべきであり、任意に切断し、ローカルセキュリティポリシーに違反とみなされるさらなる要求クライアントを無視するかもしれません。"
    },
    {
      "indent": 0,
      "text": "Appendix A: RTSP Protocol State Machines",
      "ja": "付録A：RTSPプロトコルのステートマシン"
    },
    {
      "indent": 3,
      "text": "The RTSP client and server state machines describe the behavior of the protocol from RTSP session initialization through RTSP session termination.",
      "ja": "RTSPクライアントとサーバーの状態マシンは、RTSPセッション終了を通じてRTSPセッションの初期化からのプロトコルの動作を説明します。"
    },
    {
      "indent": 3,
      "text": "State is defined on a per object basis. An object is uniquely identified by the stream URL and the RTSP session identifier. Any request/reply using aggregate URLs denoting RTSP presentations composed of multiple streams will have an effect on the individual states of all the streams. For example, if the presentation /movie contains two streams, /movie/audio and /movie/video, then the following command:",
      "ja": "状態は、オブジェクトごとに定義されています。オブジェクトを一意のストリームのURLとRTSPセッション識別子によって識別されます。任意の要求/複数のストリームから構成されるRTSPプレゼンテーションを表す集計URLを使用して応答は、すべてのストリームの個々の状態に影響を与えるであろう。例えば、プレゼンテーション/映画は、2つのストリームを含んでいる場合、/動画/オーディオおよび/映画/ビデオ、その後、次のコマンドを実行します。"
    },
    {
      "indent": 5,
      "text": "PLAY rtsp://foo.com/movie RTSP/1.0 CSeq: 559 Session: 12345678",
      "ja": "PLAYのRTSP：//foo.com/movie RTSP / 1.0のCSeq：559セッション：12345678"
    },
    {
      "indent": 3,
      "text": "will have an effect on the states of movie/audio and movie/video.",
      "ja": "動画/音声と動画/ビデオの状態に影響を持つことになります。"
    },
    {
      "indent": 5,
      "text": "This example does not imply a standard way to represent streams in URLs or a relation to the filesystem. See Section 3.2.",
      "ja": "この例では、URL内のストリーム又はファイルシステムとの関係を表現するための標準的な方法を意味するものではありません。 3.2節を参照してください。"
    },
    {
      "indent": 3,
      "text": "The requests OPTIONS, ANNOUNCE, DESCRIBE, GET_PARAMETER, SET_PARAMETER do not have any effect on client or server state and are therefore not listed in the state tables.",
      "ja": "要求OPTIONS、ANNOUNCE、DESCRIBE、GET_PARAMETERは、SET_PARAMETERは、クライアントまたはサーバの状態には影響しませんので、状態の表に記載されていません。"
    },
    {
      "indent": 0,
      "text": "A.1 Client State Machine",
      "ja": "A.1クライアントステートマシン"
    },
    {
      "indent": 3,
      "text": "The client can assume the following states:",
      "ja": "クライアントは、次の状態をとることができます。"
    },
    {
      "indent": 3,
      "text": "Init: SETUP has been sent, waiting for reply.",
      "ja": "INIT：SETUPは返事を待って、送信されています。"
    },
    {
      "indent": 3,
      "text": "Ready: SETUP reply received or PAUSE reply received while in Playing state.",
      "ja": "レディ：SETUP応答が受信または状態を再生中にしながら、受信した応答を停止します。"
    },
    {
      "indent": 3,
      "text": "Playing: PLAY reply received",
      "ja": "遊ぶ：PLAY応答が受信"
    },
    {
      "indent": 3,
      "text": "Recording: RECORD reply received",
      "ja": "録音：RECORD応答が受信"
    },
    {
      "indent": 3,
      "text": "In general, the client changes state on receipt of replies to requests. Note that some requests are effective at a future time or position (such as a PAUSE), and state also changes accordingly. If no explicit SETUP is required for the object (for example, it is available via a multicast group), state begins at Ready. In this case, there are only two states, Ready and Playing. The client also changes state from Playing/Recording to Ready when the end of the requested range is reached.",
      "ja": "一般的には、クライアントは、要求への応答の受信時に状態が変化します。いくつかの要求が（例えばPAUSEのような）未来の時間または位置で有効であり、状態もそれに応じて変化することに留意されたいです。明示的な設定は、オブジェクトのために必要とされていない場合（例えば、それはマルチキャストグループを介して利用可能である）、状態が準備完了で始まります。この場合、2つだけの状態、レディと遊ぶがあります。また、クライアントは、要求された範囲の最後に達したとき、レディに録音/再生中の状態を変更します。"
    },
    {
      "indent": 3,
      "text": "The \"next state\" column indicates the state assumed after receiving a success response (2xx). If a request yields a status code of 3xx, the state becomes Init, and a status code of 4xx yields no change in state. Messages not listed for each state MUST NOT be issued by the client in that state, with the exception of messages not affecting state, as listed above. Receiving a REDIRECT from the server is equivalent to receiving a 3xx redirect status from the server.",
      "ja": "「次の状態」欄には、成功応答（2XX）を受信した後仮定状態を示しています。リクエストが3XXのステータスコードを生成する場合は、状態が初期化になり、4XXのステータスコードは、状態に変化は生じません。上記のように各状態のためにリストされていないメッセージは、メッセージの例外は、状態に影響を与えないと、その状態で、クライアントによって発行されてはなりません。サーバーからのリダイレクトを受信すると、サーバからの3xxリダイレクトのステータスを受信したことに相当します。"
    },
    {
      "indent": 3,
      "text": "state message sent next state after response Init SETUP Ready TEARDOWN Init Ready PLAY Playing RECORD Recording TEARDOWN Init SETUP Ready Playing PAUSE Ready TEARDOWN Init PLAY Playing SETUP Playing (changed transport) Recording PAUSE Ready TEARDOWN Init RECORD Recording SETUP Recording (changed transport)",
      "ja": "状態メッセージが再生SETUPを再生RECORD録音TEARDOWN初期SETUP準備再生PAUSEレディTEARDOWN初期プレイを再生応答初期セットアップ準備TEARDOWN初期準備PLAY後の次の状態を送信し記録した記録PAUSEレディTEARDOWN初期RECORD記録SETUP（トランスポートを変更）（輸送変更）"
    },
    {
      "indent": 0,
      "text": "A.2 Server State Machine",
      "ja": "A.2サーバのステートマシン"
    },
    {
      "indent": 3,
      "text": "The server can assume the following states:",
      "ja": "サーバーは、次の状態をとることができます。"
    },
    {
      "indent": 3,
      "text": "Init: The initial state, no valid SETUP has been received yet.",
      "ja": "INIT：初期状態では、有効なSETUPはまだ受け取っていません。"
    },
    {
      "indent": 3,
      "text": "Ready: Last SETUP received was successful, reply sent or after playing, last PAUSE received was successful, reply sent.",
      "ja": "レディ：最終SETUPが成功した受信、送信された返信やプレーした後、最後にPAUSEは、受信に成功した、送られた応答。"
    },
    {
      "indent": 3,
      "text": "Playing: Last PLAY received was successful, reply sent. Data is being sent.",
      "ja": "演奏：最終PLAYが受信に成功した、送られた応答。データが送信されています。"
    },
    {
      "indent": 3,
      "text": "Recording: The server is recording media data.",
      "ja": "録音：サーバーは、メディアデータを記録しています。"
    },
    {
      "indent": 3,
      "text": "In general, the server changes state on receiving requests. If the server is in state Playing or Recording and in unicast mode, it MAY revert to Init and tear down the RTSP session if it has not received \"wellness\" information, such as RTCP reports or RTSP commands, from the client for a defined interval, with a default of one minute. The server can declare another timeout value in the Session response header (Section 12.37). If the server is in state Ready, it MAY revert to Init if it does not receive an RTSP request for an interval of more than one minute. Note that some requests (such as PAUSE) may be effective at a future time or position, and server state changes at the appropriate time. The server reverts from state Playing or Recording to state Ready at the end of the range requested by the client.",
      "ja": "一般的には、サーバがリクエストを受信すると状態が変化します。定義された間隔のためのクライアントから、RTCPレポートまたはRTSPコマンドなど、サーバは状態の再生または録音中およびユニキャストモードである場合、それは、initに戻ることがあり、それが「健康」の情報を受信して​​いない場合はRTSPセッションを取り壊します、1分のデフォルトを持ちます。サーバは、セッション応答ヘッダ（セクション12.37）で別のタイムアウト値を宣言することができます。サーバは状態レディである場合、それは一分以上の間隔のRTSP要求を受信しない場合、INITに戻ることができます。 （例えばPAUSEのような）いくつかの要求が将来の時間又は位置に有効であり得ることに注意し、適切な時点でサーバの状態が変化します。サーバは、クライアントから要求された範囲の終わりの準備状態に再生または録音から復帰します。"
    },
    {
      "indent": 3,
      "text": "The REDIRECT message, when sent, is effective immediately unless it has a Range header specifying when the redirect is effective. In such a case, server state will also change at the appropriate time.",
      "ja": "それはリダイレクトが有効であるときに指定Rangeヘッダを持っていない限り、REDIRECTメッセージは、送信された場合、すぐに有効です。そのような場合には、サーバーの状態は、適切な時間に変更されます。"
    },
    {
      "indent": 3,
      "text": "If no explicit SETUP is required for the object, the state starts at Ready and there are only two states, Ready and Playing.",
      "ja": "明示的な設定はオブジェクトのために必要とされない場合は、準備と遊ぶ、状態は準備から始まり、唯一の2つの状態があります。"
    },
    {
      "indent": 3,
      "text": "The \"next state\" column indicates the state assumed after sending a success response (2xx). If a request results in a status code of 3xx, the state becomes Init. A status code of 4xx results in no change.",
      "ja": "「次の状態」欄には、成功応答（2XX）を送信した後仮定状態を示しています。 3XXのステータスコードのリクエスト結果ならば、状態は、initになります。変更なしで4xxの結果のステータスコード。"
    },
    {
      "indent": 5,
      "text": "state message received next state Init SETUP Ready TEARDOWN Init Ready PLAY Playing SETUP Ready TEARDOWN Init RECORD Recording Playing PLAY Playing PAUSE Ready TEARDOWN Init SETUP Playing Recording RECORD Recording PAUSE Ready TEARDOWN Init SETUP Recording",
      "ja": "状態メッセージを受信した次の状態のInit SETUP準備TEARDOWN初期準備PLAY再生SETUP準備TEARDOWN初期RECORD記録した記録RECORD録音準備TEARDOWN初期セットアップ録音を一時停止再生PLAY再生PAUSE準備TEARDOWN初期セットアップを再生します"
    },
    {
      "indent": 0,
      "text": "Appendix B: Interaction with RTP",
      "ja": "付録B：RTPとの相互作用"
    },
    {
      "indent": 3,
      "text": "RTSP allows media clients to control selected, non-contiguous sections of media presentations, rendering those streams with an RTP media layer[24]. The media layer rendering the RTP stream should not be affected by jumps in NPT. Thus, both RTP sequence numbers and RTP timestamps MUST be continuous and monotonic across jumps of NPT.",
      "ja": "RTSPは、RTPメディア層[24]を用いて、これらのストリームをレンダリングする、メディア・クライアントは、メディアプレゼンテーションの選択された、非連続セクションを制御することを可能にします。 RTPストリームをレンダリングするメディア層は、NPTにおけるジャンプによる影響を受けません。したがって、RTPシーケンス番号及びRTPタイムスタンプの両方がNPTのジャンプを横切って連続的かつ単調でなければなりません。"
    },
    {
      "indent": 3,
      "text": "As an example, assume a clock frequency of 8000 Hz, a packetization interval of 100 ms and an initial sequence number and timestamp of zero. First we play NPT 10 through 15, then skip ahead and play NPT 18 through 20. The first segment is presented as RTP packets with sequence numbers 0 through 49 and timestamp 0 through 39,200. The second segment consists of RTP packets with sequence number 50 through 69, with timestamps 40,000 through 55,200.",
      "ja": "一例として、8000 [Hz]のクロック周波数、100ミリ秒のパケット化インターバルゼロの初期シーケンス番号とタイムスタンプを仮定する。まず、先にスキップして、最初のセグメントがシーケンス番号0〜49および39200によるタイムスタンプ0とRTPパケットとして提示された20を介してNPT 18を再生し、その後、15を通じてNPT 10をプレイ。第二セグメントは、55,200を介してタイムスタンプ40,000と、配列番号50〜69のRTPパケットから成ります。"
    },
    {
      "indent": 5,
      "text": "We cannot assume that the RTSP client can communicate with the RTP media agent, as the two may be independent processes. If the RTP timestamp shows the same gap as the NPT, the media agent will assume that there is a pause in the presentation. If the jump in NPT is large enough, the RTP timestamp may roll over and the media agent may believe later packets to be duplicates of packets just played out.",
      "ja": "我々は2つの独立したプロセスかもしれとしてRTSPクライアントは、RTPメディアエージェントと通信できることを仮定することはできません。 RTPタイムスタンプは、NPTと同じギャップを示している場合、メディアエージェントは、プレゼンテーションの一時停止があると仮定する。 NPTにおけるジャンプが十分に大きい場合、RTPタイムスタンプはロールオーバーすると、メディアエージェントは、後にパケットがちょうど演じたパケットの複製であると信じること。"
    },
    {
      "indent": 5,
      "text": "For certain datatypes, tight integration between the RTSP layer and the RTP layer will be necessary. This by no means precludes the above restriction. Combined RTSP/RTP media clients should use the RTP-Info field to determine whether incoming RTP packets were sent before or after a seek.",
      "ja": "特定のデータ型の場合は、RTSP層とRTP層との間の緊密な統合が必要になります。決してこれは、上記の制限を排除します。組み合わせたRTSP / RTPメディアクライアントは、着信RTPパケットの前または後に求めて送信されたかどうかを判断するためにRTP-Infoフィールドを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "For continuous audio, the server SHOULD set the RTP marker bit at the beginning of serving a new PLAY request. This allows the client to perform playout delay adaptation.",
      "ja": "連続オーディオの場合、サーバーは新しいPLAY要求にサービスを提供するの先頭にRTPマーカービットを設定する必要があります。これは、クライアントがプレイアウト遅延の適応を実行することができます。"
    },
    {
      "indent": 3,
      "text": "For scaling (see Section 12.34), RTP timestamps should correspond to the playback timing. For example, when playing video recorded at 30 frames/second at a scale of two and speed (Section 12.35) of one, the server would drop every second frame to maintain and deliver video packets with the normal timestamp spacing of 3,000 per frame, but NPT would increase by 1/15 second for each video frame.",
      "ja": "（セクション12.34を参照）スケーリングのために、RTPタイムスタンプは、再生タイミングに対応しなければなりません。例えば、再生中の動画一二及び速度（セクション12.35）のスケールで30フレーム/秒で記録し、維持し、フレームあたり3,000の通常のタイムスタンプ間隔でビデオパケットを配信するために毎秒フレームをドロップすることになるサーバが、 NPTは、各ビデオフレームの1/15秒増加することになります。"
    },
    {
      "indent": 3,
      "text": "The client can maintain a correct display of NPT by noting the RTP timestamp value of the first packet arriving after repositioning. The sequence parameter of the RTP-Info (Section 12.33) header provides the first sequence number of the next segment.",
      "ja": "クライアントは、再配置後に到着最初のパケットのRTPタイムスタンプ値に注目することによってNPTの正しい表示を維持することができます。 RTP-INFO（セクション12.33）ヘッダのシーケンスパラメータは、次のセグメントの最初のシーケンス番号を提供します。"
    },
    {
      "indent": 0,
      "text": "Appendix C: Use of SDP for RTSP Session Descriptions",
      "ja": "付録C：RTSPセッション記述のためのSDPの使用"
    },
    {
      "indent": 3,
      "text": "The Session Description Protocol (SDP, RFC 2327 [6]) may be used to describe streams or presentations in RTSP. Such usage is limited to specifying means of access and encoding(s) for:",
      "ja": "セッション記述プロトコル（SDP、RFC 2327 [6]）はRTSPでストリームまたはプレゼンテーションを記述するために使用されてもよいです。そのような使用はのためのアクセス及び符号化（S）の特定手段に限定されます。"
    },
    {
      "indent": 3,
      "text": "aggregate control: A presentation composed of streams from one or more servers that are not available for aggregate control. Such a description is typically retrieved by HTTP or other non-RTSP means. However, they may be received with ANNOUNCE methods.",
      "ja": "集約コントロール：集約コントロールのために利用可能ではない1つまたは複数のサーバーからのストリーム構成のプレゼンテーション。そのような説明は、典型的には、HTTPまたは他の非RTSP手段によって取得されます。しかし、彼らはANNOUNCE方法で受信することができます。"
    },
    {
      "indent": 3,
      "text": "non-aggregate control: A presentation composed of multiple streams from a single server that are available for aggregate control. Such a description is typically returned in reply to a DESCRIBE request on a URL, or received in an ANNOUNCE method.",
      "ja": "非凝集制御：集約制御のために利用可能である単一のサーバーから複数のストリームから成るプレゼンテーション。そのような説明は、典型的には、URLにDESCRIBE要求に対する応答で返される、またはANNOUNCE方法で受信されます。"
    },
    {
      "indent": 3,
      "text": "This appendix describes how an SDP file, retrieved, for example, through HTTP, determines the operation of an RTSP session. It also describes how a client should interpret SDP content returned in reply to a DESCRIBE request. SDP provides no mechanism by which a client can distinguish, without human guidance, between several media streams to be rendered simultaneously and a set of alternatives (e.g., two audio streams spoken in different languages).",
      "ja": "SDPファイルは、取り出され、例えば、HTTPを通じて、RTSPセッションの動作を決定する方法この付録では、説明します。また、クライアントは、DESCRIBE要求に対する応答で返されるSDPの内容を解釈する方法について説明します。 SDPは、クライアントが複数のメディアストリーム間、人間の指導なしで、見分けることが可能なメカニズムを同時にレンダリングされると（例えば、2つのオーディオストリームは、異なる言語で話す）選択肢のセットを提供しません。"
    },
    {
      "indent": 0,
      "text": "C.1 Definitions",
      "ja": "C.1定義"
    },
    {
      "indent": 3,
      "text": "The terms \"session-level\", \"media-level\" and other key/attribute names and values used in this appendix are to be used as defined in SDP (RFC 2327 [6]):",
      "ja": "この付録で使用される用語「セッションレベル」、「メディアレベル」および他のキー/属性名と属性値はSDPで定義されるように使用される（RFC 2327 [6]）。"
    },
    {
      "indent": 0,
      "text": "C.1.1 Control URL",
      "ja": "C.1.1コントロールURL"
    },
    {
      "indent": 3,
      "text": "The \"a=control:\" attribute is used to convey the control URL. This attribute is used both for the session and media descriptions. If used for individual media, it indicates the URL to be used for controlling that particular media stream. If found at the session level, the attribute indicates the URL for aggregate control.",
      "ja": "「A =コントロール：」属性は、コントロールのURLを伝えるために使用されます。この属性は、両方のセッションとメディアの説明のために使用されています。個々のメディアのために使用した場合、それは、その特定のメディアストリームを制御するために使用するURLを示します。セッションレベルで見つかった場合、属性は、集約制御のためのURLを示します。"
    },
    {
      "indent": 3,
      "text": "Example: a=control:rtsp://example.com/foo",
      "ja": "例：A =コントロール：RTSP：//example.com/foo"
    },
    {
      "indent": 3,
      "text": "This attribute may contain either relative and absolute URLs, following the rules and conventions set out in RFC 1808 [25]. Implementations should look for a base URL in the following order:",
      "ja": "この属性は、RFC 1808 [25]に記載された規則および規則以下、相対的および絶対的のいずれかのURLを含んでいてもよいです。実装は次の順序でベースURLを探してください："
    },
    {
      "indent": 3,
      "text": "1. The RTSP Content-Base field 2. The RTSP Content-Location field 3. The RTSP request URL",
      "ja": "1. RTSPのContent-ベースのフィールド2. RTSPのContent-Locationフィールド3. RTSP要求URL"
    },
    {
      "indent": 3,
      "text": "If this attribute contains only an asterisk (*), then the URL is treated as if it were an empty embedded URL, and thus inherits the entire base URL.",
      "ja": "この属性にアスタリスク（*）のみが含まれている場合は、それが空に埋め込まれたURLであるかのようにURLが扱われ、これにより全体のベースURLを継承します。"
    },
    {
      "indent": 0,
      "text": "C.1.2 Media streams",
      "ja": "C.1.2メディアストリーム"
    },
    {
      "indent": 3,
      "text": "The \"m=\" field is used to enumerate the streams. It is expected that all the specified streams will be rendered with appropriate synchronization. If the session is unicast, the port number serves as a recommendation from the server to the client; the client still has to include it in its SETUP request and may ignore this recommendation. If the server has no preference, it SHOULD set the port number value to zero.",
      "ja": "「M =」フィールドは、ストリームを列挙するために使用されます。指定されたすべてのストリームが適切な同期でレンダリングされることが期待されます。セッションがユニキャストである場合、ポート番号は、サーバからクライアントへの推薦として機能します。クライアントはまだそのSETUP要求に含める必要があり、この勧告を無視することができます。サーバは、問わないを持っていない場合、それはゼロにポート番号の値を設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "Example: m=audio 0 RTP/AVP 31",
      "ja": "例：M = 0オーディオRTP / AVP 31"
    },
    {
      "indent": 0,
      "text": "C.1.3 Payload type(s)",
      "ja": "C.1.3ペイロードタイプ（S）"
    },
    {
      "indent": 3,
      "text": "The payload type(s) are specified in the \"m=\" field. In case the payload type is a static payload type from RFC 1890 [1], no other information is required. In case it is a dynamic payload type, the media attribute \"rtpmap\" is used to specify what the media is. The \"encoding name\" within the \"rtpmap\" attribute may be one of those specified in RFC 1890 (Sections 5 and 6), or an experimental encoding with a \"X-\" prefix as specified in SDP (RFC 2327 [6]). Codec-specific parameters are not specified in this field, but rather in the \"fmtp\" attribute described below. Implementors seeking to register new encodings should follow the procedure in RFC 1890 [1]. If the media type is not suited to the RTP AV profile, then it is recommended that a new profile be created and the appropriate profile name be used in lieu of \"RTP/AVP\" in the \"m=\" field.",
      "ja": "ペイロードタイプ（複数可）は、「M =」フィールドで指定されています。場合ペイロードタイプは、RFC 1890 [1]は、他の情報が必要とされないから、静的なペイロードタイプです。それがダイナミックペイロードタイプである場合には、メディア属性「rtpmapは、」メディアが何であるかを指定するために使用されます。 「rtpmap」属性内の「コード名は」RFC 1890年に指定されたものの一つである（セクション5及び6）もよく、またはSDPに指定されている「X-」接頭辞実験エンコーディング（RFC 2327 [6]）。コーデック固有のパラメータは、この分野ではなく、むしろ後述の「のfmtp」属性で指定されていません。新しいエンコーディングを登録しようとしている実装者は、RFC 1890で手順に従うべきである[1]。メディアタイプがRTP AVプロファイルに適していない場合、新しいプロファイルを作成することが推奨され、適切なプロファイル名「M =」フィールドに「RTP / AVP」の代わりに使用します。"
    },
    {
      "indent": 0,
      "text": "C.1.4 Format-specific parameters",
      "ja": "C.1.4フォーマット固有のパラメータ"
    },
    {
      "indent": 3,
      "text": "Format-specific parameters are conveyed using the \"fmtp\" media attribute. The syntax of the \"fmtp\" attribute is specific to the encoding(s) that the attribute refers to. Note that the packetization interval is conveyed using the \"ptime\" attribute.",
      "ja": "フォーマット固有のパラメータは、「のfmtp」メディア属性を使用して搬送されます。 「のfmtp」属性の構文は、属性が参照するエンコーディング（複数可）に特異的です。パケット化間隔が「PTIME」属性を使用して搬送されることに注意してください。"
    },
    {
      "indent": 0,
      "text": "C.1.5 Range of presentation",
      "ja": "プレゼンテーションのC.1.5範囲"
    },
    {
      "indent": 3,
      "text": "The \"a=range\" attribute defines the total time range of the stored session. (The length of live sessions can be deduced from the \"t\" and \"r\" parameters.) Unless the presentation contains media streams of different durations, the range attribute is a session-level attribute. The unit is specified first, followed by the value range. The units and their values are as defined in Section 3.5, 3.6 and 3.7.",
      "ja": "「A =範囲」属性は、格納されたセッションの合計時間の範囲を規定しています。 （ライブセッションの長さは「T」と「R」のパラメータから推定することができる。）プレゼンテーションは、異なる期間のメディアストリームが含まれていない限り、範囲属性はセッションレベル属性です。単位は、値の範囲が続く、最初に指定されています。セクション3.5、3.6及び3.7で定義されるように単位とその値です。"
    },
    {
      "indent": 3,
      "text": "Examples: a=range:npt=0-34.4368 a=range:clock=19971113T2115-19971113T2203",
      "ja": "例：=範囲：NPT = 0から34.4368 =範囲：クロック= 19971113T2115-19971113T2203"
    },
    {
      "indent": 0,
      "text": "C.1.6 Time of availability",
      "ja": "可用性のC.1.6時間"
    },
    {
      "indent": 3,
      "text": "The \"t=\" field MUST contain suitable values for the start and stop times for both aggregate and non-aggregate stream control. With aggregate control, the server SHOULD indicate a stop time value for which it guarantees the description to be valid, and a start time that is equal to or before the time at which the DESCRIBE request was received. It MAY also indicate start and stop times of 0, meaning that the session is always available. With non-aggregate control, the values should reflect the actual period for which the session is available in keeping with SDP semantics, and not depend on other means (such as the life of the web page containing the description) for this purpose.",
      "ja": "「T =」フィールドは、開始するのに適した値を含み、凝集および非凝集ストリーム制御の両方のための時間を停止する必要があります。凝集制御と、サーバは、それが有効であるとの説明を保証するための停止時間値、およびDESCRIBE要求を受信した時刻に、または前に等しい開始時間を示すべきです。また、セッションは常に利用可能であることを意味し、0の時の開始と停止を示しているかもしれません。非凝集制御と、値は、セッションがSDPセマンティクスに合わせて利用可能である実際の期間を反映すべきであり、この目的のために（このような記述を含むウェブページの寿命のような）他の手段に依存しません。"
    },
    {
      "indent": 0,
      "text": "C.1.7 Connection Information",
      "ja": "C.1.7接続情報"
    },
    {
      "indent": 3,
      "text": "In SDP, the \"c=\" field contains the destination address for the media stream. However, for on-demand unicast streams and some multicast streams, the destination address is specified by the client via the SETUP request. Unless the media content has a fixed destination address, the \"c=\" field is to be set to a suitable null value. For addresses of type \"IP4\", this value is \"0.0.0.0\".",
      "ja": "SDPにおいて、「C =」フィールドは、メディアストリームの宛先アドレスを含みます。しかし、オンデマンドのユニキャストストリームと、いくつかのマルチキャストストリームのために、送信先アドレスは、SETUP要求を介してクライアントによって指定されます。メディアコンテンツは、固定宛先アドレスを持っていない限り、「C =」フィールドは、適切なヌル値に設定されます。タイプ「IP4」のアドレスの場合、この値は「0.0.0.0」です。"
    },
    {
      "indent": 2,
      "text": "C.1.8 Entity Tag",
      "ja": "C.1.8エンティティタグ"
    },
    {
      "indent": 3,
      "text": "The optional \"a=etag\" attribute identifies a version of the session description. It is opaque to the client. SETUP requests may include this identifier in the If-Match field (see section 12.22) to only allow session establishment if this attribute value still corresponds to that of the current description. The attribute value is opaque and may contain any character allowed within SDP attribute values.",
      "ja": "オプションの「A =のETag」属性はセッション記述のバージョンを識別します。これは、クライアントには不透明です。 SETUP要求は、この属性の値は、まだ現在の説明のものに対応する場合のみ、セッション確立を許可するかのマッチフィールド（セクション12.22を参照）の識別子を含むことができます。属性値は不透明であるとSDP属性値内で許可され、任意の文字を含めることができます。"
    },
    {
      "indent": 3,
      "text": "Example: a=etag:158bb3e7c7fd62ce67f12b533f06b83a",
      "ja": "例：=のETag：158bb3e7c7fd62ce67f12b533f06b83a"
    },
    {
      "indent": 5,
      "text": "One could argue that the \"o=\" field provides identical functionality. However, it does so in a manner that would put constraints on servers that need to support multiple session description types other than SDP for the same piece of media content.",
      "ja": "一つは、「O =」フィールドは、同一の機能を提供することを主張することができます。しかし、それは、メディアコンテンツの同じ部分のためのSDP以外の複数のセッション記述タイプをサポートする必要があるサーバー上の制約を置くようにしそう。"
    },
    {
      "indent": 0,
      "text": "C.2 Aggregate Control Not Available",
      "ja": "C.2集約コントロール不可"
    },
    {
      "indent": 3,
      "text": "If a presentation does not support aggregate control and multiple media sections are specified, each section MUST have the control URL specified via the \"a=control:\" attribute.",
      "ja": "「A =コントロール：」属性のプレゼンテーションが指定されている集約コントロールと複数のメディアセクションをサポートしていない場合は、各セクションでは、経由して指定されたコントロールURLを持たなければなりません。"
    },
    {
      "indent": 3,
      "text": "Example: v=0 o=- 2890844256 2890842807 IN IP4 204.34.34.32 s=I came from a web page t=0 0 c=IN IP4 0.0.0.0 m=video 8002 RTP/AVP 31 a=control:rtsp://audio.com/movie.aud m=audio 8004 RTP/AVP 3 a=control:rtsp://video.com/movie.vid",
      "ja": "例：v = 0 0 =  -  IP4 204.34.34.32 S IN 2890844256 2890842807 =私はIP4 0.0.0.0メートル=ビデオ8002 RTP / AVP 31 =コントロールIN = 0のC = Webページのトンから来た：RTSP：// =制御audio.com/movie.aud M =オーディオ8004 RTP / AVP 3 A：RTSP：//video.com/movie.vid"
    },
    {
      "indent": 3,
      "text": "Note that the position of the control URL in the description implies that the client establishes separate RTSP control sessions to the servers audio.com and video.com.",
      "ja": "説明に制御URLの位置は、クライアントがサーバaudio.comとvideo.comへの個別のRTSPコントロールセッションを確立することを意味することに注意してください。"
    },
    {
      "indent": 3,
      "text": "It is recommended that an SDP file contains the complete media initialization information even if it is delivered to the media client through non-RTSP means. This is necessary as there is no mechanism to indicate that the client should request more detailed media stream information via DESCRIBE.",
      "ja": "SDPファイルは、それが意味非RTSPを介してメディアクライアントに配信されている場合でも、完全なメディアの初期化情報が含まれていることをお勧めします。 DESCRIBEを介してクライアントは、より詳細なメディアストリーム情報を要求すべきであることを示す機構がないよう、これが必要です。"
    },
    {
      "indent": 0,
      "text": "C.3 Aggregate Control Available",
      "ja": "C.3集約コントロール利用可能"
    },
    {
      "indent": 3,
      "text": "In this scenario, the server has multiple streams that can be controlled as a whole. In this case, there are both media-level \"a=control:\" attributes, which are used to specify the stream URLs, and a session-level \"a=control:\" attribute which is used as the request URL for aggregate control. If the media-level URL is relative, it is resolved to absolute URLs according to Section C.1.1 above.",
      "ja": "このシナリオでは、サーバは、全体として制御することができる複数のストリームを有しています。属性は、ストリームのURLを指定するために使用され、セッションレベル「=対照：」属性集計制御の要求URLとして使用される。この場合、両方のメディアレベル「=制御」があります。メディアレベルのURLが相対的である場合、それは、上のセクションC.1.1に係る絶対URLに解決されます。"
    },
    {
      "indent": 3,
      "text": "If the presentation comprises only a single stream, the media-level \"a=control:\" attribute may be omitted altogether. However, if the presentation contains more than one stream, each media stream section MUST contain its own \"a=control\" attribute.",
      "ja": "プレゼンテーションでは、唯一の単一のストリームを含む場合、メディアレベル「=コントロール：」属性が完全に省略することができます。プレゼンテーションに複数のストリームが含まれている場合は、各メディアストリームのセクションでは、独自の「A =コントロール」属性を含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "Example: v=0 o=- 2890844256 2890842807 IN IP4 204.34.34.32 s=I contain i=<more info> t=0 0 c=IN IP4 0.0.0.0 a=control:rtsp://example.com/movie/ m=video 8002 RTP/AVP 31 a=control:trackID=1 m=audio 8004 RTP/AVP 3 a=control:trackID=2",
      "ja": "例：v = 0 0 =  -  IP4 204.34.34.32 S IN 2890844256 2890842807 = Iが含まれているI = <詳細>トンIP4 0.0.0.0 =コントロールIN = 0のC =：RTSP：//example.com/movie/ M =映像8002 RTP / AVP 31 =コントロール：trackID = 1、M =オーディオ8004 RTP / AVP 3 A =コントロール：trackID = 2"
    },
    {
      "indent": 3,
      "text": "In this example, the client is required to establish a single RTSP session to the server, and uses the URLs rtsp://example.com/movie/trackID=1 and rtsp://example.com/movie/trackID=2 to set up the video and audio streams, respectively. The URL rtsp://example.com/movie/ controls the whole movie.",
      "ja": "この例では、クライアントがサーバーへの単一のRTSPセッションを確立する必要があり、およびURLのRTSP使用しています：//example.com/movie/trackID=1とRTSPを：//example.com/movie/trackID=2をしますそれぞれ、ビデオとオーディオストリームを設定します。 URLのRTSP：ムービー全体を制御//example.com/movie/。"
    },
    {
      "indent": 0,
      "text": "Appendix D: Minimal RTSP implementation",
      "ja": "付録D：最小RTSP実装"
    },
    {
      "indent": 0,
      "text": "D.1 Client",
      "ja": "D.1クライアント"
    },
    {
      "indent": 3,
      "text": "A client implementation MUST be able to do the following :",
      "ja": "クライアントの実装は、次の操作を行うことができなければなりません。"
    },
    {
      "indent": 5,
      "text": "* Generate the following requests: SETUP, TEARDOWN, and one of PLAY (i.e., a minimal playback client) or RECORD (i.e., a minimal recording client). If RECORD is implemented, ANNOUNCE must be implemented as well. * Include the following headers in requests: CSeq, Connection, Session, Transport. If ANNOUNCE is implemented, the capability to include headers Content-Language, Content-Encoding, Content-Length, and Content-Type should be as well. * Parse and understand the following headers in responses: CSeq, Connection, Session, Transport, Content-Language, Content-Encoding, Content-Length, Content-Type. If RECORD is implemented, the Location header must be understood as well. RTP-compliant implementations should also implement RTP-Info. * Understand the class of each error code received and notify the end-user, if one is present, of error codes in classes 4xx and 5xx. The notification requirement may be relaxed if the end-user explicitly does not want it for one or all status codes. * Expect and respond to asynchronous requests from the server, such as ANNOUNCE. This does not necessarily mean that it should implement the ANNOUNCE method, merely that it MUST respond positively or negatively to any request received from the server.",
      "ja": "SETUP、TEARDOWN、およびPLAYのいずれか（すなわち、最小再生クライアント）またはレコード（すなわち、最小の記録クライアント）：*は、次の要求を生成します。 RECORDが実装されている場合、ANNOUNCEも同様に実装する必要があります。 CSeq、接続、セッション、交通：*リクエストで次のヘッダーを含めます。 ANNOUNCEが実装されている場合、機能はコンテンツ言語ヘッダを含むように、コンテンツのエンコード、コンテンツの長さ、およびContent-Typeが同様である必要があります。 *応答に以下のヘッダを解析し、理解：のCSeq、接続、セッション、交通、コンテンツ言語、コンテンツエンコーディング、コンテンツの長さ、Content-Typeの。 RECORDが実装されている場合、Locationヘッダが同様に理解されなければなりません。 RTP準拠の実装はまた、RTP-情報を実装する必要があります。 *いずれかのクラスの4xxと5xxの中にエラーコードの、存在する場合、受信した各エラーコードのクラスを理解し、エンドユーザーに通知します。エンドユーザーが明示的に一つまたは全てのステータスコードのためにそれを望んでいない場合は、通知の要件を緩和することができます。 *期待や、ANNOUNCEなど、サーバーからの非同期要求に応答します。これは、必ずしもそれがサーバーから受信したすべての要求に正または負に応答しなければならないだけであること、ANNOUNCEメソッドを実装する必要があることを意味するものではありません。"
    },
    {
      "indent": 3,
      "text": "Though not required, the following are highly recommended at the time of publication for practical interoperability with initial implementations and/or to be a \"good citizen\".",
      "ja": "必須ではありませんが、以下は、非常に初期の実装で実用的な相互運用性のために発行時点のものであり、推奨され、および/または「善良な市民」であることを。"
    },
    {
      "indent": 5,
      "text": "* Implement RTP/AVP/UDP as a valid transport. * Inclusion of the User-Agent header. * Understand SDP session descriptions as defined in Appendix C * Accept media initialization formats (such as SDP) from standard input, command line, or other means appropriate to the operating environment to act as a \"helper application\" for other applications (such as web browsers).",
      "ja": "*有効なトランスポートとしてRTP / AVP / UDPを実装します。 * User-Agentヘッダを含めます。 *付録Cで定義された標準入力、コマンドラインから（例えばSDPなど）メディアの初期化形式を受け入れる* SDPセッション記述を理解し、または他のは、Webなどの他のアプリケーション（のための「ヘルパーアプリケーション」として機能する動作環境に適した意味ブラウザ）。"
    },
    {
      "indent": 5,
      "text": "There may be RTSP applications different from those initially envisioned by the contributors to the RTSP specification for which the requirements above do not make sense. Therefore, the recommendations above serve only as guidelines instead of strict requirements.",
      "ja": "最初に上記の要件は、意味がありませんのためのRTSP仕様への貢献者で想定されるものとは異なるRTSPアプリケーションがあるかもしれません。したがって、上記の推奨事項は、ガイドラインの代わりに、厳格な要件としてのみ機能します。"
    },
    {
      "indent": 0,
      "text": "D.1.1 Basic Playback",
      "ja": "D.1.1基本的な再生"
    },
    {
      "indent": 3,
      "text": "To support on-demand playback of media streams, the client MUST additionally be able to do the following: * generate the PAUSE request; * implement the REDIRECT method, and the Location header.",
      "ja": "メディアストリームのオンデマンド再生をサポートするために、クライアントは、さらに次の操作を行うことができなければならない：* PAUSE要求を生成します。 * REDIRECT方法、およびLocationヘッダを実装します。"
    },
    {
      "indent": 0,
      "text": "D.1.2 Authentication-enabled",
      "ja": "D.1.2認証対応"
    },
    {
      "indent": 3,
      "text": "In order to access media presentations from RTSP servers that require\nauthentication, the client MUST additionally be able to do the\nfollowing:\n  * recognize the 401 status code;\n  * parse and include the WWW-Authenticate header;\n  * implement Basic Authentication and Digest Authentication.",
      "raw": true
    },
    {
      "indent": 0,
      "text": "D.2 Server",
      "ja": "D.2サーバ"
    },
    {
      "indent": 3,
      "text": "A minimal server implementation MUST be able to do the following:",
      "ja": "最小限のサーバーの実装は、次の操作を行うことができなければなりません。"
    },
    {
      "indent": 5,
      "text": "* Implement the following methods: SETUP, TEARDOWN, OPTIONS and either PLAY (for a minimal playback server) or RECORD (for a minimal recording server). If RECORD is implemented, ANNOUNCE should be implemented as well. * Include the following headers in responses: Connection, Content-Length, Content-Type, Content-Language, Content-Encoding, Transport, Public. The capability to include the Location header should be implemented if the RECORD method is. RTP-compliant implementations should also implement the RTP-Info field. * Parse and respond appropriately to the following headers in requests: Connection, Session, Transport, Require.",
      "ja": "*以下のメソッドを実装：SETUP、TEARDOWN、OPTIONS及び（最小記録サーバ用）（最小再生サーバ用）を再生または記録のいずれか。 RECORDが実装されている場合、ANNOUNCEも同様に実施されるべきです。接続、コンテンツの長さ、Content-Typeの、コンテンツ言語、コンテンツエンコーディング、交通、公共：*以下の応答のヘッダをインクルードします。 RECORD方法がある場合Locationヘッダを含むように機能が実装されるべきです。 RTP準拠の実装はまた、RTP-Infoフィールドを実装する必要があります。 *解析し、リクエストで以下のヘッダに適切に対応：接続、セッション、トランスポート、要求します。"
    },
    {
      "indent": 3,
      "text": "Though not required, the following are highly recommended at the time of publication for practical interoperability with initial implementations and/or to be a \"good citizen\".",
      "ja": "必須ではありませんが、以下は、非常に初期の実装で実用的な相互運用性のために発行時点のものであり、推奨され、および/または「善良な市民」であることを。"
    },
    {
      "indent": 5,
      "text": "* Implement RTP/AVP/UDP as a valid transport. * Inclusion of the Server header. * Implement the DESCRIBE method. * Generate SDP session descriptions as defined in Appendix C",
      "ja": "*有効なトランスポートとしてRTP / AVP / UDPを実装します。 *サーバヘッダを含めます。 * DESCRIBEメソッドを実装します。 *付録Cで定義されたSDPセッション記述を生成します"
    },
    {
      "indent": 5,
      "text": "There may be RTSP applications different from those initially envisioned by the contributors to the RTSP specification for which the requirements above do not make sense. Therefore, the recommendations above serve only as guidelines instead of strict requirements.",
      "ja": "最初に上記の要件は、意味がありませんのためのRTSP仕様への貢献者で想定されるものとは異なるRTSPアプリケーションがあるかもしれません。したがって、上記の推奨事項は、ガイドラインの代わりに、厳格な要件としてのみ機能します。"
    },
    {
      "indent": 0,
      "text": "D.2.1 Basic Playback",
      "ja": "D.2.1基本的な再生"
    },
    {
      "indent": 3,
      "text": "To support on-demand playback of media streams, the server MUST additionally be able to do the following:",
      "ja": "メディアストリームのオンデマンド再生をサポートするために、サーバーは、さらに次の操作を行うことができなければなりません。"
    },
    {
      "indent": 5,
      "text": "* Recognize the Range header, and return an error if seeking is not supported. * Implement the PAUSE method.",
      "ja": "* Rangeヘッダを認識し、シークがサポートされていない場合はエラーを返します。 * PAUSEメソッドを実装します。"
    },
    {
      "indent": 3,
      "text": "In addition, in order to support commonly-accepted user interface features, the following are highly recommended for on-demand media servers:",
      "ja": "また、一般的に受け入れられたユーザーインターフェイス機能をサポートするために、以下のことが非常にオンデマンドメディアサーバに推奨されています。"
    },
    {
      "indent": 5,
      "text": "* Include and parse the Range header, with NPT units. Implementation of SMPTE units is recommended. * Include the length of the media presentation in the media initialization information. * Include mappings from data-specific timestamps to NPT. When RTP is used, the rtptime portion of the RTP-Info field may be used to map RTP timestamps to NPT.",
      "ja": "*含み、NPTユニットと、Rangeヘッダを解析します。 SMPTEユニットの実装が推奨されます。 *メディアの初期化情報におけるメディアプレゼンテーションの長さを含めます。 * NPTへのデータ固有のタイムスタンプからのマッピングを含めます。 RTPを使用する場合、RTP-Infoフィールドのrtptime部がNPTにRTPのタイムスタンプをマッピングするために使用されてもよいです。"
    },
    {
      "indent": 5,
      "text": "Client implementations may use the presence of length information to determine if the clip is seekable, and visibly disable seeking features for clips for which the length information is unavailable. A common use of the presentation length is to implement a \"slider bar\" which serves as both a progress indicator and a timeline positioning tool.",
      "ja": "クライアント実装は、クリップがシーク可能であるかどうかを決定するために長さの情報の存在を使用し、可視長さ情報が使用できないいるクリップの機能を求めて無効にすることができます。プレゼンテーションの長さの一般的な用途は、進行状況インジケータとタイムラインの位置決めツールの両方として機能する「スライドバー」を実現することです。"
    },
    {
      "indent": 5,
      "text": "Mappings from RTP timestamps to NPT are necessary to ensure correct positioning of the slider bar.",
      "ja": "RTPタイムスタンプからNPTへのマッピングは、スライダバーの正しい位置を確保するために必要です。"
    },
    {
      "indent": 0,
      "text": "D.2.2 Authentication-enabled",
      "ja": "D.2.2認証対応"
    },
    {
      "indent": 3,
      "text": "In order to correctly handle client authentication, the server MUST additionally be able to do the following:",
      "ja": "正しくクライアント認証を処理するためには、サーバーは、さらに次の操作を行うことができなければなりません。"
    },
    {
      "indent": 5,
      "text": "* Generate the 401 status code when authentication is required for the resource. * Parse and include the WWW-Authenticate header * Implement Basic Authentication and Digest Authentication",
      "ja": "*認証がリソースのために必要とされる401のステータスコードを生成します。 *解析とは、WWW-Authenticateヘッダを含める*基本認証とダイジェスト認証を実装します"
    },
    {
      "indent": 0,
      "text": "Appendix E: Authors' Addresses",
      "ja": "付録E：著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Henning Schulzrinne Dept. of Computer Science Columbia University 1214 Amsterdam Avenue New York, NY 10027 USA",
      "ja": "コンピュータサイエンスコロンビア大学1214アムステルダムAvenueニューヨークのヘニングSchulzrinneと部長、NY 10027 USA"
    },
    {
      "indent": 3,
      "text": "EMail: schulzrinne@cs.columbia.edu",
      "ja": "メールアドレス：schulzrinne@cs.columbia.edu"
    },
    {
      "indent": 3,
      "text": "Anup Rao Netscape Communications Corp. 501 E. Middlefield Road Mountain View, CA 94043 USA",
      "ja": "Anupラオネットスケープ・コミュニケーションズ社501 E.ミドルロード、マウンテンビュー、CA 94043 USA"
    },
    {
      "indent": 3,
      "text": "EMail: anup@netscape.com",
      "ja": "メールアドレス：anup@netscape.com"
    },
    {
      "indent": 3,
      "text": "Robert Lanphier RealNetworks 1111 Third Avenue Suite 2900 Seattle, WA 98101 USA",
      "ja": "ロバートLanphier RealNetworksの1111 Third Avenueのスイート2900シアトル、WA 98101 USA"
    },
    {
      "indent": 3,
      "text": "EMail: robla@real.com",
      "ja": "メールアドレス：robla@real.com"
    },
    {
      "indent": 0,
      "text": "Appendix F: Acknowledgements",
      "ja": "付録F：謝辞"
    },
    {
      "indent": 3,
      "text": "This memo is based on the functionality of the original RTSP document submitted in October 96. It also borrows format and descriptions from HTTP/1.1.",
      "ja": "このメモは、それはまた、HTTP / 1.1から形式と説明を借りる10月96に提出され、元のRTSPドキュメントの機能に基づいています。"
    },
    {
      "indent": 3,
      "text": "This document has benefited greatly from the comments of all those participating in the MMUSIC-WG. In addition to those already mentioned, the following individuals have contributed to this specification:",
      "ja": "この文書では、MMUSIC-WGに参加するすべての者のコメントから大きな恩恵を受けています。すでに述べたものに加えて、以下の個人はこの仕様に貢献しています："
    },
    {
      "indent": 3,
      "text": "Rahul Agarwal, Torsten Braun, Brent Browning, Bruce Butterfield, Steve Casner, Francisco Cortes, Kelly Djahandari, Martin Dunsmuir, Eric Fleischman, Jay Geagan, Andy Grignon, V. Guruprasad, Peter Haight, Mark Handley, Brad Hefta-Gaub, John K. Ho, Philipp Hoschka, Anne Jones, Anders Klemets, Ruth Lang, Stephanie Leif, Jonathan Lennox, Eduardo F. Llach, Rob McCool, David Oran, Maria Papadopouli, Sujal Patel, Ema Patki, Alagu Periyannan, Igor Plotnikov, Pinaki Shah, David Singer, Jeff Smith, Alexander Sokolsky, Dale Stammen, and John Francis Stracke.",
      "ja": "ラーフルAgarwalさん、トルステン・ブラウン、ブレントブラウニング、ブルース・バターフィールド、スティーブCasner、フランシスコ・コルテス、ケリーDjahandari、マーティンダンスミア、エリックFleischman、ジェイGeagan、アンディGrignon、V.グルプラサード、ピーター・ヘイト、マーク・ハンドリー、ブラッドHefta-Gaub、ジョン・K 。・ホー、フィリップHoschka、アン・ジョーンズ、アンダースKlemets、ルース・ラング、ステファニーレイフ、ジョナサン・レノックス、エドゥアルド・F. Llach、ロブ・マックール、デビッド・オラン、マリアPapadopouli、Sujal Patelさん、エマPatki、Alagu Periyannan、イガー・プロットニーコブ、Pinakiシャー、デビッド・シンガー、ジェフ・スミス、アレクサンダーSokolsky、デールStammen、そしてジョン・フランシスStracke。"
    },
    {
      "indent": 0,
      "text": "References",
      "ja": "リファレンス"
    },
    {
      "indent": 3,
      "text": "1 Schulzrinne, H., \"RTP profile for audio and video conferences with minimal control\", RFC 1890, January 1996.",
      "ja": "1 Schulzrinneと、H.、 \"最小量のコントロールがあるオーディオとビデオ会議用RTPプロファイル\"、RFC 1890、1996年1月。"
    },
    {
      "indent": 3,
      "text": "2 Fielding, R., Gettys, J., Mogul, J., Nielsen, H., and T. Berners-Lee, \"Hypertext transfer protocol - HTTP/1.1\", RFC 2068, January 1997.",
      "ja": "2フィールディング、R.、ゲティス、J.、モーグル、J.、ニールセン、H.、およびT.バーナーズ - リー、 \"ハイパーテキスト転送プロトコル -  HTTP / 1.1\"、RFC 2068、1997年1月。"
    },
    {
      "indent": 3,
      "text": "3 Yergeau, F., Nicol, G., Adams, G., and M. Duerst, \"Internationalization of the hypertext markup language\", RFC 2070, January 1997.",
      "ja": "3 Yergeau、F.、ニコル、G.アダムス、G、およびM Duerst、 \"ハイパーテキストマークアップ言語の国際化\"、RFC 2070、1997年1月。"
    },
    {
      "indent": 3,
      "text": "4 Bradner, S., \"Key words for use in RFCs to indicate requirement levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "4ブラドナーの、S.、 \"要件レベルを示すRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "5 ISO/IEC, \"Information technology - generic coding of moving pictures and associated audio information - part 6: extension for digital storage media and control,\" Draft International Standard ISO 13818-6, International Organization for Standardization ISO/IEC JTC1/SC29/WG11, Geneva, Switzerland, Nov. 1995.",
      "ja": "5 ISO / IEC、「情報技術 - 動画の一般的な符号化と関連したオーディオ情報 - パート6：デジタル記憶媒体および制御のための拡張、」国際規格案ISO 13818-6、標準ISO / IEC JTC1 / SC29 /国際機関WG11、ジュネーブ、スイス、1995年11月。"
    },
    {
      "indent": 3,
      "text": "6 Handley, M., and V. Jacobson, \"SDP: Session Description Protocol\", RFC 2327, April 1998.",
      "ja": "6ハンドリー、M.、およびV.ヤコブソン、 \"SDP：セッション記述プロトコル\"、RFC 2327、1998年4月。"
    },
    {
      "indent": 3,
      "text": "7 Franks, J., Hallam-Baker, P., and J. Hostetler, \"An extension to HTTP: digest access authentication\", RFC 2069, January 1997.",
      "ja": "7フランクス、J.、ハラム・ベイカー、P.、およびJ. Hostetler、 \"HTTPの拡張：Digest認証\"、RFC 2069、1997年1月。"
    },
    {
      "indent": 3,
      "text": "8 Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, August 1980.",
      "ja": "8ポステル、J.、 \"ユーザ・データグラム・プロトコル\"、STD 6、RFC 768、1980年8月。"
    },
    {
      "indent": 3,
      "text": "9 Hinden, B. and C. Partridge, \"Version 2 of the reliable data protocol (RDP)\", RFC 1151, April 1990.",
      "ja": "9 HindenとB.及びC.ヤマウズラ、 \"信頼性のあるデータ・プロトコル（RDP）のバージョン2\"、RFC 1151、1990年4月。"
    },
    {
      "indent": 3,
      "text": "10 Postel, J., \"Transmission control protocol\", STD 7, RFC 793, September 1981.",
      "ja": "10ポステル、J.、 \"伝送制御プロトコル\"、STD 7、RFC 793、1981年9月。"
    },
    {
      "indent": 3,
      "text": "11 H. Schulzrinne, \"A comprehensive multimedia control architecture for the Internet,\" in Proc. International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV), (St. Louis, Missouri), May 1997.",
      "ja": "PROCで11 H. Schulzrinneと、「インターネットのための包括的なマルチメディア制御アーキテクチャ、」。ネットワークに関する国際ワークショップとデジタルオーディオとビデオのためのオペレーティングシステムのサポート（NOSSDAV）、（セントルイス、ミズーリ州）、1997年5月。"
    },
    {
      "indent": 3,
      "text": "12 International Telecommunication Union, \"Visual telephone systems and equipment for local area networks which provide a non-guaranteed quality of service,\" Recommendation H.323, Telecommunication Standardization Sector of ITU, Geneva, Switzerland, May 1996.",
      "ja": "12国際電気通信連合、「サービスの非保証品質を提供するローカルエリアネットワークのためのビジュアル電話システムおよび機器、」勧告H.323、ITU、ジュネーブ、スイス、1996年5月の電気通信標準化部門。"
    },
    {
      "indent": 3,
      "text": "13 McMahon, P., \"GSS-API authentication method for SOCKS version 5\", RFC 1961, June 1996.",
      "ja": "13マクマホン、P.、 \"SOCKSバージョン5のためのGSS-API認証方式\"、RFC 1961、1996年6月。"
    },
    {
      "indent": 3,
      "text": "14 J. Miller, P. Resnick, and D. Singer, \"Rating services and rating systems (and their machine readable descriptions),\" Recommendation REC-PICS-services-961031, W3C (World Wide Web Consortium), Boston, Massachusetts, Oct. 1996.",
      "ja": "14 J. Miller氏、P.レズニック、およびD.歌手、 \"評価サービスとの評価システム（およびその機械読み取り可能な説明）、\" 勧告REC-PICS-サービス-961031、W3C（World Wide Webコンソーシアム）、ボストン、マサチューセッツ州、 1996年10月。"
    },
    {
      "indent": 3,
      "text": "15 J. Miller, T. Krauskopf, P. Resnick, and W. Treese, \"PICS label distribution label syntax and communication protocols,\" Recommendation REC-PICS-labels-961031, W3C (World Wide Web Consortium), Boston, Massachusetts, Oct. 1996.",
      "ja": "15 J.ミラー、T. Krauskopf、P.レズニック、およびW. Treese、 \"PICSラベル配布ラベルの構文と通信プロトコル、\" 勧告REC-PICS-ラベル-961031、W3C（World Wide Webコンソーシアム）、ボストン、マサチューセッツ州、 1996年10月。"
    },
    {
      "indent": 3,
      "text": "16 Crocker, D. and P. Overell, \"Augmented BNF for syntax specifications: ABNF\", RFC 2234, November 1997.",
      "ja": "\"構文仕様のための増大しているBNF：ABNF\" 16クロッカー、D.とP. Overell、RFC 2234、1997年11月。"
    },
    {
      "indent": 3,
      "text": "17 Braden, B., \"Requirements for internet hosts - application and support\", STD 3, RFC 1123, October 1989.",
      "ja": "17ブレーデン、B.、 \"インターネットホストのための要件 - アプリケーションとサポート\"、STD 3、RFC 1123、1989年10月。"
    },
    {
      "indent": 3,
      "text": "18 Elz, R., \"A compact representation of IPv6 addresses\", RFC 1924, April 1996.",
      "ja": "18エルツ、R.、 \"IPv6アドレスのコンパクトな表現\"、RFC 1924、1996年4月。"
    },
    {
      "indent": 3,
      "text": "19 Berners-Lee, T., Masinter, L. and M. McCahill, \"Uniform resource locators (URL)\", RFC 1738, December 1994.",
      "ja": "19バーナーズ=リー、T.、Masinter、LとM. McCahill、 \"ユニフォームリソースロケータ（URL）\"、RFC 1738、1994年12月。"
    },
    {
      "indent": 3,
      "text": "20 Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", RFC 2279, January 1998.",
      "ja": "20 Yergeau、F.、 \"UTF-8、ISO 10646の変換フォーマット\"、RFC 2279、1998年1月。"
    },
    {
      "indent": 3,
      "text": "22 Braden, B., \"T/TCP - TCP extensions for transactions functional specification\", RFC 1644, July 1994.",
      "ja": "22ブレーデン、B.、 \"T / TCP  - トランザクションの機能仕様のためのTCP拡張\"、RFC 1644、1994年7月。"
    },
    {
      "indent": 3,
      "text": "22 W. R. Stevens, TCP/IP illustrated: the implementation, vol. 2. Reading, Massachusetts: Addison-Wesley, 1994.",
      "ja": "22 W. R.スティーブンス、TCP / IPが示さ：実装、巻を。 2.読書、マサチューセッツ州：アディソン・ウェズリー、1994。"
    },
    {
      "indent": 3,
      "text": "23 Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson, \"RTP: a transport protocol for real-time applications\", RFC 1889, January 1996.",
      "ja": "23 Schulzrinneと、H.、Casner、S.、フレデリック、R.とV. Jacobson氏、 \"RTP：リアルタイムアプリケーションのためのトランスポートプロトコル\"、RFC 1889、1996年1月。"
    },
    {
      "indent": 3,
      "text": "24 Fielding, R., \"Relative uniform resource locators\", RFC 1808, June 1995.",
      "ja": "24フィールディング、R.、 \"相対的なユニフォームリソースロケータ\"、RFC 1808、1995年6月。"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1998）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    }
  ]
}