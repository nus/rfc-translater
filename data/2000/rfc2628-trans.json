{
  "title": {
    "text": "RFC 2628 - Simple Cryptographic Program Interface (Crypto API)",
    "ja": "RFC 2628 - 単純な暗号化プログラム・インターフェース（APIクリプト）"
  },
  "number": 2628,
  "created_at": "2019-10-27 23:00:55.016474+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         V. Smyslov\nRequest for Comments: 2628                                           TWS\nCategory: Informational                                        June 1999",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Simple Cryptographic Program Interface (Crypto API)",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。それはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1999). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1999）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes a simple Application Program Interface to cryptographic functions. The main purpose of such an interface is to separate cryptographic libraries from internet applications, thus allowing an independent development of both. It can be used in various internet applications such as [IPsec], [ISAKMP], [IKE], [TLS].",
      "ja": "この文書は、暗号化機能に簡単なアプリケーション・プログラム・インターフェースを説明しています。そのようなインタフェースの主な目的は、このように両方の独立した開発を可能にする、インターネットアプリケーションから暗号化ライブラリを分離することです。これは、[TLS]、例えば[IPsecの]、[ISAKMP]、[IKE]のような様々なインターネットアプリケーションで使用することができます。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction. . . . . . . . . . . . . . . . . . . . . . . . . .  2\n1.1. Summary . . . . . . . . . . . . . . . . . . . . . . . . . . .  2\n1.2. Terminology . . . . . . . . . . . . . . . . . . . . . . . . .  2\n1.3. Objectives of Development . . . . . . . . . . . . . . . . . .  3\n2. Cryptoplugin Structure. . . . . . . . . . . . . . . . . . . . .  3\n3. Program Interface . . . . . . . . . . . . . . . . . . . . . . .  4\n3.1. Cryptoplugin Initialization Function. . . . . . . . . . . . .  4\n3.1.1. Description of CryptoPluginInfo structure . . . . . . . . .  6\n3.1.2. Description of CryptoAlgInfo structure. . . . . . . . . . .  6\n3.2. Cryptoplugin Deinitialization Function. . . . . . . . . . . .  9\n3.3. Cryptographic Context Opening Function. . . . . . . . . . . . 10\n3.4. Cryptographic Context Reopening Function. . . . . . . . . . . 11\n3.5. Cryptographic Context Closing Function. . . . . . . . . . . . 12\n3.6. Key Verification Function . . . . . . . . . . . . . . . . . . 12\n3.7. Data Transformation Function. . . . . . . . . . . . . . . . . 13\n3.7.1. For CRYPTO_TYPE_ENCRYPT Algorithm Type. . . . . . . . . . . 13\n3.7.2. For CRYPTO_TYPE_DECRYPT Algorithm Type. . . . . . . . . . . 14\n3.7.3. For CRYPTO_TYPE_SIGN Algorithm Type . . . . . . . . . . . . 15\n3.7.4. For CRYPTO_TYPE_VERIFY Algorithm Type . . . . . . . . . . . 17\n3.7.5. For CRYPTO_TYPE_COMPRESS Algorithm Type . . . . . . . . . . 18",
      "raw": true
    },
    {
      "indent": 3,
      "text": "3.7.6. For CRYPTO_TYPE_UNCOMPRESS Algorithm Type . . . . . . . . . 18\n3.7.7. For CRYPTO_TYPE_HASH Algorithm Type . . . . . . . . . . . . 19\n3.7.8. For CRYPTO_TYPE_RANDOM Algorithm Type.  . . . . . . . . . . 21\n3.8. Cryptographic Context Control Function. . . . . . . . . . . . 22\n4. Cryptoplugin Registration Procedure . . . . . . . . . . . . . . 23\n5. Security Considerations . . . . . . . . . . . . . . . . . . . . 23\n6. References. . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n7. Author's Address  . . . . . . . . . . . . . . . . . . . . . . . 24\nAppendix A. The interface specification as a C header file . . . . 25\nFull Copyright Statement . . . . . . . . . . . . . . . . . . . . . 30",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 0,
      "text": "1.1. Summary",
      "section_title": true,
      "ja": "1.1. 概要"
    },
    {
      "indent": 3,
      "text": "Nowadays internet applications that require cryptographic functions at the level of operating system kernel, use the method that assumes the libraries must be compiled/linked together with the module (driver) which provides product functionality. For the sake of possibility of independent development of the cryptographic modules and in order to provide a simple, effective and universal (suitable for application and as well kernel level of operating system) solution this specification offers the method to extract encrypting algorithms to the separate cryptographic modules.",
      "ja": "オペレーティング・システム・カーネルのレベルで暗号化機能を必要とする今日のインターネットアプリケーションは、製品の機能を提供/コンパイルモジュール（ドライバ）と一緒に連結されなければならないライブラリを前提と方法を使用します。暗号モジュールの独立した開発の可能性のために、この仕様は、別々の暗号に暗号化アルゴリズムを抽出する方法を提供する（アプリケーションおよびオペレーティングシステムのも、カーネルレベルに適した）、単純有効かつ普遍的な解決策を提供するためにモジュール。"
    },
    {
      "indent": 3,
      "text": "This document describes simple open interface (Crypto API) to external cryptographic libraries optimized both for the application and kernel level of the operating system.",
      "ja": "この文書では、両方のオペレーティングシステムのアプリケーションとカーネルレベルのために最適化された外部の暗号化ライブラリに簡単なオープンインタフェース（暗号化API）について説明します。"
    },
    {
      "indent": 0,
      "text": "1.2. Terminology",
      "section_title": true,
      "ja": "1.2. 用語"
    },
    {
      "indent": 3,
      "text": "Cryptoplugin",
      "ja": "Cryptoplugin"
    },
    {
      "indent": 6,
      "text": "Operation system unit (driver, shared library, module) that provides cryptographic functions via well-defined (but OS-specific) interface.",
      "ja": "明確に定義された（ただし、OS固有の）インターフェースを介して暗号化機能を提供する運用系ユニット（ドライバ、共有ライブラリ、モジュール）。"
    },
    {
      "indent": 3,
      "text": "Cryptolibrary",
      "ja": "Cryptolibrary"
    },
    {
      "indent": 6,
      "text": "Part of cryptoplugin that provides its cryptographic functionality via Crypto API.",
      "ja": "暗号APIを介してその暗号化機能を提供しますcryptopluginの一部。"
    },
    {
      "indent": 3,
      "text": "Wrapper",
      "ja": "ラッパー"
    },
    {
      "indent": 6,
      "text": "Part of cryptoplugin that provides interfaces translation between Crypto API and OS-specific interface.",
      "ja": "暗号APIとOS固有のインタフェース間のインタフェース変換を提供cryptopluginの一部。"
    },
    {
      "indent": 3,
      "text": "Definition of all cryptography related terms can be found in [Schneier].",
      "ja": "すべての暗号関連の用語の定義は、[シュナイアー]で見つけることができます。"
    },
    {
      "indent": 0,
      "text": "1.3. Objectives of Development",
      "section_title": true,
      "ja": "1.3. 開発の目的"
    },
    {
      "indent": 3,
      "text": "The objectives of Simple CryptoAPI development are as follows:",
      "ja": "次のように単純なCryptoAPIの開発の目的は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "1) To extract program implementations of encryption, one-way hash function, digital signature and random numbers generation algorithms to separate, independently developed modules.",
      "ja": "1）独立に開発されたモジュールを分離するために、暗号化、一方向ハッシュ関数、デジタル署名と乱数生成アルゴリズムのプログラムの実装を抽出します。"
    },
    {
      "indent": 6,
      "text": "2) To provide version independence between using encryption modules and external cryptoplugin.",
      "ja": "2）暗号化モジュールと外部cryptopluginを使用して間のバージョンの独立性を提供します。"
    },
    {
      "indent": 6,
      "text": "3) To ensure platform independent developments of encrypting algorithm modules with portable source code.",
      "ja": "3）ポータブルソースコードとアルゴリズムモジュールを暗号化するプラットフォームに依存しない開発を確実にするために。"
    },
    {
      "indent": 6,
      "text": "4) To enable independent development of modules and compatibility of modules developed independently.",
      "ja": "4）独立して開発されたモジュールとモジュールの互換性の独立した開発を可能にします。"
    },
    {
      "indent": 0,
      "text": "2. Cryptoplugin Structure",
      "section_title": true,
      "ja": "2. Cryptoplugin構造"
    },
    {
      "indent": 3,
      "text": "In order to provide fast exchange between the cryptoplugin and its client the cryptoplugin is implemented as a separate driver (or module) of the particular operating system (Fig.1). Cryptoplugin consists of two parts (Fig.2):",
      "ja": "cryptopluginとそのクライアントとの間の高速交換を提供するためにcryptopluginは、特定のオペレーティング・システム（図1）の別のドライバ（またはモジュール）として実現されます。 Cryptopluginは二つの部分（図2）で構成されています。"
    },
    {
      "indent": 6,
      "text": "1) cryptolibrary itself (1)",
      "ja": "1）（1）自体をcryptolibrary"
    },
    {
      "indent": 6,
      "text": "2) system-dependent module (wrapper) for interaction between cryptolibrary and its client (2)",
      "ja": "2）システム依存モジュール（ラッパー）cryptolibraryとそのクライアントとの間の相互作用のために（2）"
    },
    {
      "indent": 5,
      "text": "                                  Cryptoplugin initialization\n                                / by the operating system\n                                |\n                                |\n+------------------+          +-|-+-------------+\n|                  |          |   |             |\n|  Cryptoplugin's  | -------> |                 |\n|                  |          |  Cryptoplugin   |\n|     client       | <------- |                 |\n|                  |          |   |             |\n+------------------+     |    +---+-------------+\n                         |\n                         \\\n                          \\ System-dependent CPI",
      "raw": true
    },
    {
      "indent": 4,
      "text": "Fig. 1 Interaction between cryptoplugin and its client",
      "ja": "cryptopluginとそのクライアントの間の図1の相互作用"
    },
    {
      "indent": 5,
      "text": "+---------------+-------------------------------+\n|               |                               |\n|              -->       Submodule of           |\n|  Submodule -  |                               |\n|               |   encrypting algorithms (1)   |\n|  wrapper (2)  |                               |\n|              <--       (cryptolibrary)        |\n|               |                               |\n+---------------+-------------------------------+\n                |\n                \\\n                 \\ Cryptographic Program Interface",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Fig. 2 Cryptoplugin structure",
      "ja": "図2 Cryptoplugin構造"
    },
    {
      "indent": 3,
      "text": "The system-dependent module (wrapper) is delivered by the driver-client developer in the form of source code or in the form of libraries (for example, in the form of object files) for particular operating system. The wrapper is intended for translation of system-independent application interface to the particular system-dependent interface with the cryptoplugin's client. The wrapper context does not include components specific to cryptoplugin's client functionality or to some cryptographic algorithm. The interface described in section 3 is the standard for interaction between the submodules (1) and (2).",
      "ja": "システム依存モジュール（ラッパー）は、特定のオペレーティングシステムの（オブジェクト・ファイルの形式で、など）ソースコードの形で、またはライブラリーの形でドライバ・クライアント開発者によって配信されます。ラッパーはcryptopluginのクライアントと特定のシステムに依存するインタフェースにシステムに依存しないアプリケーションインタフェースの翻訳を対象としています。ラッパーコンテキストはcryptopluginのクライアント機能または一部の暗号アルゴリズムに特定のコンポーネントが含まれていません。セクション3に記載のインタフェースはサブモジュール（1）及び（2）の間の相互作用のための標準です。"
    },
    {
      "indent": 3,
      "text": "A cryptoplugin can contain a number of different algorithms. Moreover, it can contain some different implementations of one particular algorithm.",
      "ja": "cryptopluginは異なるアルゴリズムの数を含めることができます。また、ある特定のアルゴリズムのいくつかの異なる実装を含むことができます。"
    },
    {
      "indent": 0,
      "text": "3. Program Interface",
      "section_title": true,
      "ja": "3.プログラム・インタフェース"
    },
    {
      "indent": 3,
      "text": "The CPI (Cryptographic Program Interface) consists of a set of functions exported by encrypting algorithm submodule (cryptolibrary). The interface functions are described below (see also Appendix A).",
      "ja": "CPI（暗号化プログラム・インタフェース）は、アルゴリズムのサブモジュール（cryptolibrary）を暗号化することによってエクスポートされた関数のセットで構成されています。インターフェイス関数は（また、付録Aを参照）、以下に記載されています。"
    },
    {
      "indent": 0,
      "text": "3.1. Cryptoplugin Initialization Function",
      "section_title": true,
      "ja": "3.1.  Cryptoplugin初期化関数"
    },
    {
      "indent": 3,
      "text": "The function is intended for cryptoplugin initialization and obtaining information about algorithms contained in cryptoplugin. The function is called once before the beginning of cryptoplugin operation.",
      "ja": "関数は、初期化をcryptopluginとcryptopluginに含まれるアルゴリズムについての情報を得るためのものです。機能はcryptoplugin動作の開始前に一度と呼ばれています。"
    },
    {
      "indent": 3,
      "text": "/* CryptoPlugin initialization. Returns pointer to CryptoPluginInfo\nstructure on success or NULL on fatal error. */\nCryptoPluginInfo *CryptoPluginInit(\n                void            *param);/* Ptr to OS parameters\n                                           (platform-specific) */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Description of parameters:",
      "ja": "パラメータの説明："
    },
    {
      "indent": 6,
      "text": "param - pointer to system-dependent parameters transmitted to cryptoplugin by the operating system. Intention and format of parameters are specific to each operating system and should be described in documentation on the cryptoplugin wrapper.",
      "ja": "PARAM  - オペレーティングシステムによってcryptopluginに送信システム依存パラメータへのポインタ。意図およびパラメータのフォーマットは、各オペレーティングシステムに固有のものであり、cryptopluginラッパーのドキュメントに記載されなければなりません。"
    },
    {
      "indent": 3,
      "text": "The function is called at the moment of cryptoplugin initialization. If succeeded it returns the pointer to CryptoPluginInfo structure that describes the module and algorithms implemented in the cryptolibrary. If function call did not succeed, function will return NULL or appropriate error code in CryptoPluginInfo structure status field. If the initialization is partially succeeded then the cryptoplugin either returns CryptoPluginInfo structure transformed so that it contains only successfully initialized algorithms or returns appropriate error code in status field of CryptoAlgInfo structures that describes the reason for the failure.",
      "ja": "関数はcryptoplugin初期化の時点で呼び出されます。成功した場合は、cryptolibraryに実装モジュールおよびアルゴリズムを説明CryptoPluginInfo構造体へのポインタを返します。関数呼び出しが成功しなかった場合、関数はCryptoPluginInfo構造のステータスフィールドにNULLまたは適切なエラーコードを返します。初期化が部分的に成功すると、その後cryptopluginは、それだけで正常に初期化されたアルゴリズムが含まれているか、失敗の理由を説明しCryptoAlgInfo構造のステータスフィールドに適切なエラーコードを返すように変換さCryptoPluginInfo構造体を返しますどちらか。"
    },
    {
      "indent": 3,
      "text": "Error codes for the function:",
      "ja": "関数のエラーコード："
    },
    {
      "indent": 6,
      "text": "NULL - fatal unsuccessful cryptoplugin initialization. The module is unable even to indicate the reason of failure.",
      "ja": "NULL  - 致命的な失敗したcryptopluginの初期化。モジュールでも失敗の理由を示すことができません。"
    },
    {
      "indent": 3,
      "text": "The pointer to cryptoplugin description structure in the case of full or partial success. The status fields in CryptoPluginInfo structure and in comprised CryptoAlgInfo structures can be set to the following values:",
      "ja": "完全または部分的な成功の場合に記述構造をcryptopluginへのポインタ。 CryptoPluginInfo構造で構成さとCryptoAlgInfo構造におけるステータスフィールドは次の値に設定できます。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - cryptoplugin (algorithm) is initialized successfully.",
      "ja": "CRYPTO_OK  -  cryptoplugin（アルゴリズム）が正常に初期化されます。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NOT_SUPPORTED - (only for algorithm) - the algorithm is not supported by the module at the moment.",
      "ja": "CRYPTO_ERR_NOT_SUPPORTED  - （のみアルゴリズム） - アルゴリズムは、現時点でモジュールによってサポートされていません。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_HARDWARE - error of hardware initialization.",
      "ja": "CRYPTO_ERR_HARDWARE  - ハードウェアの初期化のエラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 0,
      "text": "3.1.1. Description of CryptoPluginInfo structure",
      "section_title": true,
      "ja": "3.1.1.  CryptoPluginInfo構造の説明"
    },
    {
      "indent": 3,
      "text": "The CryptoPluginInfo structure consists of header of fixed size that generally describes cryptoplugin and array of CryptoAlgInfo structures following the header. Each structure describes particular algorithm implemented in the cryptolibrary (see Appendix A)",
      "ja": "CryptoPluginInfo構造は、一般的にcryptopluginヘッダ以下CryptoAlgInfo構造体のアレイを記載している固定サイズのヘッダから成ります。各構造はcryptolibraryに実装特定のアルゴリズムを記載している（付録A参照）"
    },
    {
      "indent": 3,
      "text": "Structure fields description:",
      "ja": "構造は、説明をフィールド："
    },
    {
      "indent": 6,
      "text": "cpi_version - CPI version (should be CRYPTO_VER (1,0)). CPI version determines both functions set and fields layout in CryptoPluginInfo/CryptoAlgInfo structures.",
      "ja": "cpi_version  -  CPIバージョン（CRYPTO_VER（1,0）でなければなりません）。 CPIのバージョンが設定され、両方の機能を決定し、CryptoPluginInfo / CryptoAlgInfo構造でレイアウトをフィールド。"
    },
    {
      "indent": 6,
      "text": "status - returns the error code if cryptoplugin initialization failed (otherwise should be CRYPTO_OK)",
      "ja": "ステータス -  cryptoplugin初期化が失敗した場合エラーコードを返す（さもなければCRYPTO_OKなければなりません）"
    },
    {
      "indent": 6,
      "text": "name - text cryptoplugin description (ASCII-7 characters only; all unused bytes must be set to 0).",
      "ja": "名前 - テキストcryptopluginの説明（ASCII-7文字のみ、すべての未使用バイトが0に設定する必要があります）。"
    },
    {
      "indent": 6,
      "text": "version - cryptoplugin version (CRYPTO_VER(maj,min)).",
      "ja": "バージョン -  cryptopluginバージョン（CRYPTO_VER（MAJ、分））。"
    },
    {
      "indent": 6,
      "text": "flags - various flags that characterize the cryptoplugin.",
      "ja": "フラグ -  cryptopluginを特徴づける様々なフラグ。"
    },
    {
      "indent": 6,
      "text": "number_of_algs - number of algorithms the cryptolibrary comprises of (i.e. the number of consequent CryptoAlgInfo structures).",
      "ja": "number_of_algs  - アルゴリズムの数（結果としてCryptoAlgInfo構造の、すなわち数）のcryptolibrary含みます。"
    },
    {
      "indent": 0,
      "text": "3.1.2. Description of CryptoAlgInfo structure",
      "section_title": true,
      "ja": "3.1.2.  CryptoAlgInfo構造の説明"
    },
    {
      "indent": 3,
      "text": "Structure fields description",
      "ja": "構造は、説明をフィールド"
    },
    {
      "indent": 6,
      "text": "status - returns the error code if particular algorithm initialization failed (otherwise should be CRYPTO_OK).",
      "ja": "ステータス - 特定のアルゴリズムの初期化（さもなければCRYPTO_OKなければならない）失敗した場合エラーコードを返します。"
    },
    {
      "indent": 6,
      "text": "id - algorithm identifier (CRYPTO_A_XXX). Values in the range of 0..249 are reserved; Values in the range of 250..32767 indicate algorithms not enrolled in standard list. It should be emphasized that algorithm IDs are independent for each algorithm type. But it is considered that pairs of types CRYPTO_TYPE_ENCRYPT and CRYPTO_TYPE_DECRYPT, CRYPTO_TYPE_SIGN and CRYPTO_TYPE_VERIFY, CRYPTO_TYPE_COMPRESS and CRYPTO_TYPE_UNCOMPRESS are equivalent because they define reverse actions of the same nature.",
      "ja": "ID  - アルゴリズム識別子（CRYPTO_A_XXX）。 0..249の範囲の値が予約されています。 250..32767の範囲の値は、標準リストに登録しませアルゴリズムを示しています。アルゴリズムIDは各アルゴリズムのタイプのために独立していることを強調しなければなりません。しかし、彼らは同じ性質の逆のアクションを定義するための型CRYPTO_TYPE_ENCRYPTとCRYPTO_TYPE_DECRYPT、CRYPTO_TYPE_SIGNとCRYPTO_TYPE_VERIFY、CRYPTO_TYPE_COMPRESSとCRYPTO_TYPE_UNCOMPRESSのペアが等価であると考えられます。"
    },
    {
      "indent": 6,
      "text": "group - algorithm implementation group (variants algorithm implementations with various parameters not covered by CryptoAlgInfo structure). Values in the range of 0..32767 are well-known numbers defined in Appendix A; vendors may arbitrarily use values in the range of 32768..65535.",
      "ja": "グループ - アルゴリズム実装基（CryptoAlgInfo構造によって覆われていない様々なパラメータを有するアルゴリズムの実装を変異体）。 0..32767の範囲の値は、付録Aで定義された周知の数です。ベンダーは任意32768..65535の範囲内の値を使用することができます。"
    },
    {
      "indent": 6,
      "text": "type - algorithm type (CRYPTO_TYPE_XXX). Unambiguously determines algorithm application.",
      "ja": "タイプ - アルゴリズムのタイプ（CRYPTO_TYPE_XXX）。明確なアルゴリズムの適用を決定します。"
    },
    {
      "indent": 6,
      "text": "version - version of algorithm implementation (CRYPTO_VER (maj,min)).",
      "ja": "バージョン - アルゴリズムの実装のバージョン（CRYPTO_VER（MAJ、分））。"
    },
    {
      "indent": 6,
      "text": "flags - flags that characterize the algorithm and its implementation. All bits, that are not defined in Appendix A, must be zeroed.",
      "ja": "旗 - アルゴリズムとその実装を特徴付けるフラグ。付録Aで定義されていないすべてのビットは、ゼロにする必要があります。"
    },
    {
      "indent": 6,
      "text": "maxcontexts - maximum cryptographic contexts number that are simultaneously supported by the algorithm implementation (0 if the number is unlimited or is limited only by environmental conditions like memory size).",
      "ja": "maxcontexts  - （数が無限であるか、または専用のメモリサイズなどの環境条件によって制限されている場合は0）を同時にアルゴリズムの実装によってサポートされる最大暗号コンテキストの数。"
    },
    {
      "indent": 6,
      "text": "name - text algorithm name (ASCII characters use only; all unused bytes must be set to 0).",
      "ja": "名前 - テキストのアルゴリズム名（ASCII文字のみを使用して、すべての未使用バイトが0に設定する必要があります）。"
    },
    {
      "indent": 3,
      "text": "The next information depends on algorithm type:",
      "ja": "次の情報は、アルゴリズムの種類によって異なります。"
    },
    {
      "indent": 3,
      "text": "For encryption algorithms (CRYPTO_TYPE_ENCRYPT and CRYPTO_TYPE_DECRYPT):",
      "ja": "暗号化アルゴリズム（CRYPTO_TYPE_ENCRYPTとCRYPTO_TYPE_DECRYPT）の場合："
    },
    {
      "indent": 6,
      "text": "blocklen - data block length in bytes (value 1 must be used for stream cipher algorithms).",
      "ja": "BLOCKLEN  - バイト単位のデータブロック長（値1は、ストリーム暗号アルゴリズムのために使用されなければなりません）。"
    },
    {
      "indent": 6,
      "text": "keylen - encrypting (or decrypting) key length in bytes.",
      "ja": "KEYLEN  - バイト単位でキーの長さを暗号化（または復号化）。"
    },
    {
      "indent": 6,
      "text": "outlen - output data size for conversion of one input data block in bytes. Usually it is equal to blocklen. When prediction of this value is impossible zero value must be indicated.",
      "ja": "outlenは - バイト単位で一つの入力データブロックの変換のための出力データサイズ。通常はBLOCKLENに等しいです。この値の予測が不可能であるときにゼロ値が示されなければなりません。"
    },
    {
      "indent": 6,
      "text": "milen - size of initialization vector (for block algorithms) or message indicator (for stream algorithms) in bytes. For block algorithms zero value of the parameter means that the algorithm implements ECB encoding. Non-zero milen parameter means that the algorithm implements CBC encoding. For stream algorithms zero value of the parameter means that the message indicator is not required.",
      "ja": "milen  - バイト数（ストリームアルゴリズムの場合）（ブロックアルゴリズムのための）初期化ベクトルのサイズまたはメッセージインジケータ。ブロックアルゴリズムのパラメータのゼロ値は、アルゴリズムがECBエンコーディングを実装することを意味します。非ゼロmilenパラメータは、アルゴリズムはCBCエンコーディングを実装していることを意味します。ストリームアルゴリズムのパラメータのゼロ値は、メッセージインジケータが必要とされないことを意味します。"
    },
    {
      "indent": 3,
      "text": "For signature algorithms (CRYPTO_TYPE_SIGN):",
      "ja": "署名のためのアルゴリズム（CRYPTO_TYPE_SIGN）："
    },
    {
      "indent": 6,
      "text": "blocklen - block size in bytes. The length of input signature data will be padded up to this value. When there is no need in padding the value of 1 must be set.",
      "ja": "BLOCKLEN  - バイト単位のブロック・サイズ。入力された署名データの長さがこの値までパディングされます。 1の値をパディングでは必要がない場合は設定する必要があります。"
    },
    {
      "indent": 6,
      "text": "keylen - private key length in bytes.",
      "ja": "KEYLEN  - バイト単位で秘密鍵の長さ。"
    },
    {
      "indent": 6,
      "text": "outlen - signature length in bytes. When prediction of this value is impossible 0 value must be indicated. If the signature consists of several values then the total length is indicated.",
      "ja": "outlenは - バイト単位の署名の長さ。この値の予測が不可能な場合は0値が示されなければなりません。署名は、複数の値から成る場合、全長が示されています。"
    },
    {
      "indent": 6,
      "text": "milen - non-zero value specifies signature parameter length (random number), zero value indicates that the parameter is not required.",
      "ja": "milen  - 非ゼロ値は、署名パラメータ長（乱数）を指定し、ゼロの値は、パラメータが必要とされないことを示しています。"
    },
    {
      "indent": 3,
      "text": "For signature verification algorithms (CRYPTO_TYPE_VERIFY):",
      "ja": "署名検証のためのアルゴリズム（CRYPTO_TYPE_VERIFY）："
    },
    {
      "indent": 6,
      "text": "blocklen - is not used.",
      "ja": "BLOCKLEN  - 使用されていません。"
    },
    {
      "indent": 6,
      "text": "keylen - length of public key in bytes.",
      "ja": "KEYLEN  - バイト単位での公開鍵の長さ。"
    },
    {
      "indent": 6,
      "text": "outlen - signature length in bytes. When prediction of this value is impossible 0 value must be indicated. If the signature consists of several values then the total length is indicated.",
      "ja": "outlenは - バイト単位の署名の長さ。この値の予測が不可能な場合は0値が示されなければなりません。署名は、複数の値から成る場合、全長が示されています。"
    },
    {
      "indent": 6,
      "text": "milen - is not used.",
      "ja": "milen  - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "For data compression algorithms (CRYPTO_TYPE_COMPRESS):",
      "ja": "データ圧縮アルゴリズム（CRYPTO_TYPE_COMPRESS）のために："
    },
    {
      "indent": 6,
      "text": "blocklen - see outlen.",
      "ja": "Blocの弱い -  outlenは参照してください。"
    },
    {
      "indent": 6,
      "text": "keylen - is not used.",
      "ja": "KEYLEN  - 使用されていません。"
    },
    {
      "indent": 6,
      "text": "outlen - if the algorithm provides the fixed compression with known value then it is indicated as blocklen/outlen ratio. The values can be arbitrary. If the compression value is not known then outlen is set to 0 and blocklen is not used.",
      "ja": "outlenは - アルゴリズムは、既知の値で固定圧縮を提供する場合、それはoutlenは/ BLOCKLEN比として示されます。値は任意とすることができます。 0に設定され、BLOCKLENが使用されていないoutlenは、圧縮値は、知られていない場合。"
    },
    {
      "indent": 6,
      "text": "milen - is not used.",
      "ja": "milen  - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "For data uncompressing algorithms (CRYPTO_TYPE_UNCOMPRESS):",
      "ja": "データ用の圧縮解除アルゴリズム（CRYPTO_TYPE_UNCOMPRESS）："
    },
    {
      "indent": 6,
      "text": "blocklen - see outlen.",
      "ja": "Blocの弱い -  outlenは参照してください。"
    },
    {
      "indent": 6,
      "text": "keylen - is not used.",
      "ja": "KEYLEN  - 使用されていません。"
    },
    {
      "indent": 6,
      "text": "outlen - if the algorithm provides the fixed compression with known value then it is indicated as blocklen/outlen ratio. The values can be arbitrary. It is natural that the ratio will be reverse to the similar value for the same algorithm but of CRYPTO_TYPE_COMPRESS type. If the compression value is not known then outlen is set to 0 and blocklen is not used.",
      "ja": "outlenは - アルゴリズムは、既知の値で固定圧縮を提供する場合、それはoutlenは/ BLOCKLEN比として示されます。値は任意とすることができます。比率は同じアルゴリズムが、CRYPTO_TYPE_COMPRESSタイプの同様の値とは逆になることは当然です。 0に設定され、BLOCKLENが使用されていないoutlenは、圧縮値は、知られていない場合。"
    },
    {
      "indent": 6,
      "text": "milen - is not used.",
      "ja": "milen  - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "For one-way hash function algorithms (CRYPTO_TYPE_HASH):",
      "ja": "一方向のハッシュ関数アルゴリズム（CRYPTO_TYPE_HASH）："
    },
    {
      "indent": 6,
      "text": "blocklen - block size in bytes. The length of input data will be padded up to this value. When there is no need in padding value 1 should be used.",
      "ja": "BLOCKLEN  - バイト単位のブロック・サイズ。入力データの長さがこの値まで埋められます。パディング値1での必要がない場合には使用すべきです。"
    },
    {
      "indent": 6,
      "text": "keylen - is not used.",
      "ja": "KEYLEN  - 使用されていません。"
    },
    {
      "indent": 6,
      "text": "outlen - resulting hash value length in bytes.",
      "ja": "outlenは - はバイト単位のハッシュ値の長さを結果として生じます。"
    },
    {
      "indent": 6,
      "text": "milen - is not used.",
      "ja": "milen  - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "For random number generation algorithms (CRYPTO_TYPE_RANDOM):",
      "ja": "乱数生成アルゴリズム（CRYPTO_TYPE_RANDOM）のために："
    },
    {
      "indent": 6,
      "text": "blocklen - is not used.",
      "ja": "BLOCKLEN  - 使用されていません。"
    },
    {
      "indent": 6,
      "text": "keylen - initial seed length (0 - if not required, for example in a physical effects based generators).",
      "ja": "KEYLEN  - 初期シードの長さ（0  - 物理的効果ベースジェネレータ、例えば、必要とされない場合）。"
    },
    {
      "indent": 6,
      "text": "outlen - resulting random number length in bytes (0 - arbitrary)",
      "ja": "outlenは - 得られた乱数のバイト単位の長さ（0  - 任意）"
    },
    {
      "indent": 6,
      "text": "milen - is not used.",
      "ja": "milen  - 使用されていません。"
    },
    {
      "indent": 0,
      "text": "3.2. Cryptoplugin Deinitialization Function",
      "section_title": true,
      "ja": "3.2.  Cryptoplugin初期化解除機能"
    },
    {
      "indent": 3,
      "text": "/* Plugin deinitialization */\nCRYPTO_STATUS   CryptoPluginFini(void);",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The function is called before the cryptoplugin operation is to be terminated. Function execution causes closing of all open cryptographic contexts, system resources deallocation and hardware deinitialization. The value returned is informational only.",
      "ja": "cryptoplugin操作が終了する前に、関数が呼び出されます。関数の実行は、開いているすべての暗号化コンテキストの閉鎖、システムリソースの割り当て解除とハードウェアの初期化解除の原因となります。返される値は情報提供のみです。"
    },
    {
      "indent": 3,
      "text": "Return codes for the function:",
      "ja": "関数の戻りコード："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - cryptoplugin is deinitialized successfully.",
      "ja": "CRYPTO_OK  -  cryptopluginが正常にdeinitializedされます。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_UNCLOSED_HANDLES - warning that there were open cryptographic contexts during cryptoplugin deinitialization. The warning is informational only. The open contexts are destroyed anyway.",
      "ja": "CRYPTO_ERR_UNCLOSED_HANDLES  - オープン暗号コンテキストが初期化解除をcryptoplugin中にあったことを警告します。警告は情報提供のみです。オープンコンテキストはとにかく破壊されています。"
    },
    {
      "indent": 0,
      "text": "3.3. Cryptographic Context Opening Function",
      "section_title": true,
      "ja": "3.3. 暗号コンテキストオープニング機能"
    },
    {
      "indent": 3,
      "text": "New algorithm instance (cipher state) */ CRYPTO_STATUS CryptoOpen(",
      "ja": "新しいアルゴリズムのインスタンス（暗号状態）* / CRYPTO_STATUS CryptoOpen（"
    },
    {
      "indent": 9,
      "text": "CRYPTO_HANDLE   *state, /* Pointer to cipher state\n                           handle (filled on exit) */\nlong            algnum, /* Algorithm number in\n                           CryptoPluginInfo structure */\nconst char      *key);  /* key (in plain) */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The function creates cryptographic context copy inside cryptoplugin and initializes it with the provided key. Later the handle of the context is used in calls of other algorithm functions.",
      "ja": "この関数はcryptoplugin内の暗号の文脈のコピーを作成し、提供されたキーを使って初期化します。その後、コンテキストのハンドルは、他のアルゴリズム関数の呼び出しで使用されています。"
    },
    {
      "indent": 3,
      "text": "Description of parameters:",
      "ja": "パラメータの説明："
    },
    {
      "indent": 6,
      "text": "state - pointer to the variable that will be set to the handle of the context created if succeeded. NULL parameter value should result in the CRYPTO_ERR_BAD_PARAMS code returned by the function.",
      "ja": "状態 - 成功した場合に作成されたコンテキストのハンドルに設定される変数へのポインタ。 NULLパラメータ値は関数によって返さCRYPTO_ERR_BAD_PARAMSコードを生じるはずです。"
    },
    {
      "indent": 6,
      "text": "algnum - algorithm number in the cryptoplugin. It is equal to the number of CryptoAlgInfo structure (that describes the algorithm) in CryptoPluginInfo structure. The number begins with zero value. It should be taken into account that it is not an algorithm identifier but its number in the cryptoplugin.",
      "ja": "algnum  -  cryptopluginにおけるアルゴリズム番号。これはCryptoPluginInfo構造内（アルゴリズムを記述する）CryptoAlgInfo構造の数に等しいです。数がゼロ値から始まります。それはアルゴリズム識別子が、cryptopluginでその数ではないことを考慮すべきです。"
    },
    {
      "indent": 6,
      "text": "key - pointer to the key (if it is required) or to the seed (for random number generation algorithm).",
      "ja": "鍵 - 鍵に（それが必要とされる場合）または（乱数生成アルゴリズムのための）種子へのポインタ。"
    },
    {
      "indent": 0,
      "text": "Notes.",
      "ja": "ノート。"
    },
    {
      "indent": 3,
      "text": "1. Generated cryptographic context is stored inside the cryptoplugin until it will be destroyed by the CryptoAlgClose function call. The maximum number of cryptographic contexts supported by cryptoplugin can be indicated in algorithm parameters description. If maximum number of cryptographic contexts equals to zero then the cryptographic contexts number is either unlimited (for example, for stateless algorithms like random number generators and one-way hash functions) or it is limited by external factors only (like memory size).",
      "ja": "それはCryptoAlgClose関数呼び出しによって破壊されるまで1.生成された暗号コンテキストがcryptoplugin内に格納されています。 cryptopluginによってサポートされる暗号コンテキストの最大数は、アルゴリズムパラメータの説明で示すことができます。暗号コンテキストの最大数がゼロに等しい場合、暗号コンテキストの数は、（例えば、乱数発生器と一方向ハッシュ関数のようなステートレスなアルゴリズムのために）無制限であるか、またはそれのみ（メモリサイズのような）外部要因によって制限されます。"
    },
    {
      "indent": 6,
      "text": "Return codes for the function:",
      "ja": "関数の戻りコード："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters (invalid algorithm number, zero pointer to the handle or to key (seed) if it is required.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - それが必要な場合に無効なパラメータ（無効アルゴリズム番号、鍵（種ハンドル又はゼロポインタ）。"
    },
    {
      "indent": 0,
      "text": "3.4. Cryptographic Context Reopening Function",
      "section_title": true,
      "ja": "3.4. 暗号コンテキストは、機能の再オープン"
    },
    {
      "indent": 0,
      "text": "/* Reinitialize algorithm instance */\nCRYPTO_STATUS   CryptoReOpen(\n                CRYPTO_HANDLE   state, /* current cipher state handle */\n                const char      *key);  /* key (in plain) */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The function reinitializes an existing context. This function is used for key change without new system resources allocation. The function parameters are handle of opened earlier context and pointer to a new key.",
      "ja": "関数は、既存のコンテキストを再初期化します。この関数は、新しいシステムリソースの割り当てのないキーの変更のために使用されています。関数のパラメータは、新しいキーに開かれた以前の状況とポインタのハンドルです。"
    },
    {
      "indent": 3,
      "text": "Return codes for the function:",
      "ja": "関数の戻りコード："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般に反して"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module may release system memory and try function call once more.",
      "ja": "CRYPTO_ERR_NO_RESOURCESのエラーは、このコードは、呼び出し元のモジュールがシステムメモリを解放し、もう一度関数呼び出しを試みることを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters (invalid algorithm number, zero pointer to the handle or to key (seed) if it is required.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - それが必要な場合に無効なパラメータ（無効アルゴリズム番号、鍵（種ハンドル又はゼロポインタ）。"
    },
    {
      "indent": 0,
      "text": "3.5. Cryptographic Context Closing Function",
      "section_title": true,
      "ja": "3.5. 暗号コンテキストクロージング機能"
    },
    {
      "indent": 0,
      "text": "/* Destroy algorithm instance */\nCRYPTO_STATUS   CryptoClose(\n                CRYPTO_HANDLE   state); /* Handle of cipher state */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The function provides cryptographic context destruction. The cryptographic context handle is its parameter. The value returned is informational only.",
      "ja": "この関数は暗号の文脈の破壊を提供します。暗号コンテキストハンドルがそのパラメータです。返される値は情報提供のみです。"
    },
    {
      "indent": 3,
      "text": "Return codes for the function:",
      "ja": "関数の戻りコード："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 0,
      "text": "3.6. Key Verification Function",
      "section_title": true,
      "ja": "3.6. キーの確認機能"
    },
    {
      "indent": 6,
      "text": "/* Check key for possible weakness */\nCRYPTO_STATUS   CryptoCheckForWeakKey(\n              long            algnum, /* Algorithm number in\n                              CryptoPluginInfo structure */\n              const char      *key);  /* Proposed key */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The function verifies key material whether it is weak (from the algorithm's point of view). The function is actual for encryption/decryption or signing/verification algorithms only. Algorithm number (similar to CryptoAlgOpen) and pointer to the key to be verified are the parameters.",
      "ja": "関数は、（ビューのアルゴリズムの点から）それが弱いかどうかをキーマテリアルを検証します。関数は暗号化/復号化または署名/検証アルゴリズムの実際のです。アルゴリズム（CryptoAlgOpenと同様）番号及び検証するキーへのポインタパラメータです。"
    },
    {
      "indent": 3,
      "text": "Return codes for the function:",
      "ja": "関数の戻りコード："
    },
    {
      "indent": 6,
      "text": "CRYPTO_O - the key has passed the test.",
      "ja": "CRYPTO_O  - キーがテストに合格しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_WEAK_KEY - the key has not passed the test (being weak or possibly weak).",
      "ja": "CRYPTO_ERR_WEAK_KEY  - キーテスト（弱い又はおそらく弱さ）を経過していません。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NOT_SUPPORTED - is not supported.",
      "ja": "CRYPTO_ERR_NOT_SUPPORTED  - サポートされていません。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 0,
      "text": "3.7. Data Transformation Function",
      "section_title": true,
      "ja": "3.7. データ変換機能"
    },
    {
      "indent": 0,
      "text": "/* Perform CryptoTransform (depends on cipher state type) */\nCRYPTO_STATUS   CryptoTransform(\n                CRYPTO_HANDLE   state,  /* Cipher state */\n                const char      *inbuff,/* input data */\n                long            inlen,  /* input data length */\n                char            *outbuff,/* output buffer */\n                long            *outlen,/* On entry - output buffer\n                                          length, on exit -  number of\n                                          bytes written to outbuff */\n                char            *mi);   /* Message indicator  */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "This is a cryptographic data transformation function. Function call results and function parameters are dependent on algorithm type. For algorithm types CRYTO_TYPE_ENCRYPT, CRYPTO_TYPE_DECRYPT, CRYPTO_TYPE_SIGN and CRYPTO_TYPE_VERIFY (items 3.7.1 - 3.7.4) function call results are history independent.",
      "ja": "これは、暗号化データの変換関数です。関数呼び出しの結果や関数のパラメータは、アルゴリズムの種類に依存しています。アルゴリズムの種類CRYTO_TYPE_ENCRYPT、CRYPTO_TYPE_DECRYPT、CRYPTO_TYPE_SIGNとCRYPTO_TYPE_VERIFY（項目3.7.1  -  3.7.4）の場合は、関数呼び出しの結果は歴史独立しています。"
    },
    {
      "indent": 3,
      "text": "Note. Stream encryption algorithms may seem an \"exception\". However the same cryptoalgorithm handle must hide its history dependence. For algorithm types CRYPTO_TYPE_COMPRESS, CRYPTO_TYPE_UNCOMPRESS and CRYPTO_TYPE_HASH (items 3.7.5 - 3.7.7) function calls are history dependent. For the CRYPTO_TYPE_RANDOM algorithm function call may be for different implementations either dependent or independent on the history.",
      "ja": "注意。ストリーム暗号化アルゴリズムは、「例外」を見えるかもしれません。しかし、同じ暗号アルゴリズムのハンドルは、その歴史依存性を非表示にする必要があります。アルゴリズムの種類CRYPTO_TYPE_COMPRESS、CRYPTO_TYPE_UNCOMPRESSとCRYPTO_TYPE_HASH（項目3.7.5  -  3.7.7）のための関数呼び出しは、歴史依存しています。 CRYPTO_TYPE_RANDOMアルゴリズム関数呼び出しの履歴に依存または独立のいずれかの異なる実装ためのものであってもよいです。"
    },
    {
      "indent": 0,
      "text": "3.7.1. For CRYPTO_TYPE_ENCRYPT Algorithm Type:",
      "section_title": true,
      "ja": "3.7.1.  CRYPTO_TYPE_ENCRYPTアルゴリズムタイプの場合："
    },
    {
      "indent": 6,
      "text": "The function encrypts input data. Its parameters are intended for:",
      "ja": "この関数は、入力データを暗号化します。そのパラメータは、のために意図されています。"
    },
    {
      "indent": 6,
      "text": "inbuff - pointer to the input data. If this parameter is equal to NULL then the function should return the CRYPTO_ERR_BAD_PARAMS error code.",
      "ja": "inbuff  - 入力データへのポインタ。このパラメータがNULLと等しい場合、関数はCRYPTO_ERR_BAD_PARAMSエラーコードを返すべきです。"
    },
    {
      "indent": 6,
      "text": "inlen - input data size (in bytes). If the size indicated in algorithm description is divisible by blocklen then padding is not carried out. Otherwise the algorithm either caries out padding according to the algorithm standard or returns appropriate error code (CRYPTO_ERR_BAD_PARAMS). The zero parameter is allowed so that the function quits at once and returns CRYPTO_OK code.",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。アルゴリズムの説明で示されたサイズがBLOCKLENで割り切れる場合、パディングは行われません。アルゴリズムの標準または返す適切なエラーコード（CRYPTO_ERR_BAD_PARAMS）によればそうでなければアルゴリズムのいずれか虫歯うちパディング。関数が一度終了し、CRYPTO_OKコードを返すようにゼロパラメータが許可されています。"
    },
    {
      "indent": 6,
      "text": "outbuff - output data buffer. NULL parameter value results in the outlen parameter setting to output buffer size required to encrypt the input buffer represented. In this case the CRYPTO_ERR_SMALL_BUFFER error should not be returned.",
      "ja": "outbuff  - 出力データ・バッファ。示される入力バッファを暗号化するために必要な出力バッファサイズにoutlenはパラメータ設定におけるNULLパラメータ値をもたらします。この場合、CRYPTO_ERR_SMALL_BUFFERエラーが返されるべきではありません。"
    },
    {
      "indent": 6,
      "text": "outlen - Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter. Both the NULL parameter value and the zero value addressed result in CRYPTO_ERR_BAD_PARAMS code returned by the function.",
      "ja": "outlenは - 出力バッファに書き込まれたバイトの数は、出力パラメータでありながら、出力バッファサイズは、入力された関数のパラメータです。 NULLパラメータ値とゼロ値の両方は、関数によって返さCRYPTO_ERR_BAD_PARAMSコードで結果を取り上げました。"
    },
    {
      "indent": 6,
      "text": "mi - message indicator. Its content depends on whether the block or stream algorithm is applied. In the block algorithm case it is set to the last block encrypted. When the first block is encrypted mi parameter specifies initial initialization vector. In the stream algorithm case it is set to the offset of the first byte encrypted in the stream. If the algorithm uses the message indicator and the mi parameter value is set to NULL then function should return CRYPTO_ERR_BAD_PARAMS. If the algorithm (ECB Mode encrypting as an example) does not apply the message indicator then NULL value of mi is acceptable while non-NULL value should be ignored.",
      "ja": "マイル - メッセージインジケータ。その内容は、ブロックまたはストリームアルゴリズムが適用されるかどうかに依存します。ブロックアルゴリズムの場合には、それは暗号化された最後のブロックに設定されています。最初のブロックはマイルパラメータを暗号化されている場合、最初の初期化ベクトルを指定します。ストリームアルゴリズムの場合、それは、ストリームに暗号化された第1バイトのオフセットに設定されています。このアルゴリズムは、メッセージインジケータを使用し、MIのパラメータ値がNULLに設定されている場合、この関数はCRYPTO_ERR_BAD_PARAMSを返す必要があります。アルゴリズム（例として、暗号化ECBモード）メッセージインジケータを適用しない場合は、非NULL値が無視されるべきながらMIのNULL値が許容されます。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.7.2. For CRYPTO_TYPE_DECRYPT Algorithm Type:",
      "section_title": true,
      "ja": "3.7.2.  CRYPTO_TYPE_DECRYPTアルゴリズムタイプの場合："
    },
    {
      "indent": 3,
      "text": "The function decrypts the input data. Its parameters are intended for:",
      "ja": "関数は、入力されたデータを復号化します。そのパラメータは、のために意図されています。"
    },
    {
      "indent": 6,
      "text": "inbuff - pointer to the input data. If the parameter is equal to NULL then the function should return the CRYPTO_ERR_BAD_PARAMS error code.",
      "ja": "inbuff  - 入力データへのポインタ。パラメータがNULLと等しい場合、関数はCRYPTO_ERR_BAD_PARAMSエラーコードを返すべきです。"
    },
    {
      "indent": 6,
      "text": "inlen - input data size (in bytes). When the parameter is set to zero the function quits at once and CRYPTO_OK code is returned.",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。パラメータは関数をゼロに設定されている場合、一度終了し、CRYPTO_OKコードが返されます。"
    },
    {
      "indent": 6,
      "text": "outbuff - output data buffer. NULL parameter value results in the outlen parameter setting to output buffer size required to decrypt the input buffer represented. In this case the CRYPTO_ERR_SMALL_BUFFER error should not be returned.",
      "ja": "outbuff  - 出力データ・バッファ。示される入力バッファを復号化するために必要な出力バッファサイズにoutlenはパラメータ設定におけるNULLパラメータ値をもたらします。この場合、CRYPTO_ERR_SMALL_BUFFERエラーが返されるべきではありません。"
    },
    {
      "indent": 6,
      "text": "outlen - Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter. Both the NULL parameter value and the zero value addressed result in CRYPTO_ERR_BAD_PARAMS code returned by the function.",
      "ja": "outlenは - 出力バッファに書き込まれたバイトの数は、出力パラメータでありながら、出力バッファサイズは、入力された関数のパラメータです。 NULLパラメータ値とゼロ値の両方は、関数によって返さCRYPTO_ERR_BAD_PARAMSコードで結果を取り上げました。"
    },
    {
      "indent": 6,
      "text": "mi - message indicator. The content depends on whether the block or stream algorithm is applied. In the block algorithm case it is set to the last block encrypted. When the first block is decrypted mi specifies initial initialization vector. In the stream algorithm case it is set to the offset of the first byte decrypted in the stream. If the algorithm uses the message indicator and the mi parameter is set to NULL then function should return CRYPTO_ERR_BAD_PARAMS. If the algorithm (ECB Mode as an example) does not apply the message indicator then NULL value of mi is acceptable while non-NULL value should be ignored.",
      "ja": "マイル - メッセージインジケータ。コンテンツは、ブロックまたはストリームアルゴリズムが適用されているかどうかに依存します。ブロックアルゴリズムの場合には、それは暗号化された最後のブロックに設定されています。最初のブロックが復号化されるとマイルは、最初の初期化ベクトルを指定します。ストリーム・アルゴリズムの場合では、ストリームで復号化最初のバイトのオフセットに設定されています。このアルゴリズムは、メッセージインジケータを使用し、MIパラメータがNULLに設定されている場合、この関数はCRYPTO_ERR_BAD_PARAMSを返す必要があります。アルゴリズム（例として、ECBモード）メッセージインジケータを適用しない場合は、非NULL値が無視されるべきながらMIのNULL値が許容されます。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.7.3. For CRYPTO_TYPE_SIGN Type Algorithm:",
      "section_title": true,
      "ja": "3.7.3.  CRYPTO_TYPE_SIGN型アルゴリズムの場合："
    },
    {
      "indent": 3,
      "text": "The function signs the input data. Its parameters are intended for: inbuff - pointer to the input data. If the parameter is equal to NULL then the function should return the CRYPTO_ERR_BAD_PARAMS code error.",
      "ja": "この関数は、入力データに署名します。 - 入力されたデータへのポインタinbuff：そのパラメータがために意図されています。パラメータがNULLと等しい場合、関数はCRYPTO_ERR_BAD_PARAMSコードエラーを返すべきです。"
    },
    {
      "indent": 3,
      "text": "inlen - input data size (in bytes). If the size indicated in algorithm description is divisible by blocklen then padding is not carried out. Otherwise the algorithm either caries out padding according to the algorithm standard or returns appropriate error code (CRYPTO_ERR_BAD_PARAMS). The zero parameter is allowed so that the function quits at once and returns CRYPTO_OK code.",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。アルゴリズムの説明で示されたサイズがBLOCKLENで割り切れる場合、パディングは行われません。アルゴリズムの標準または返す適切なエラーコード（CRYPTO_ERR_BAD_PARAMS）によればそうでなければアルゴリズムのいずれか虫歯うちパディング。関数が一度終了し、CRYPTO_OKコードを返すようにゼロパラメータが許可されています。"
    },
    {
      "indent": 3,
      "text": "outbuff - output data buffer. NULL parameter value results in the outlen parameter setting to output buffer size required to sign the input buffer represented. In this case the CRYPTO_ERR_SMALL_BUFFER error should not be returned.",
      "ja": "outbuff  - 出力データ・バッファ。示される入力バッファに署名するために必要な出力バッファサイズにoutlenはパラメータ設定におけるNULLパラメータ値をもたらします。この場合、CRYPTO_ERR_SMALL_BUFFERエラーが返されるべきではありません。"
    },
    {
      "indent": 3,
      "text": "outlen - Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter. Both the NULL parameter value and the zero value addressed result in CRYPTO_ERR_BAD_PARAMS code returned by the function.",
      "ja": "outlenは - 出力バッファに書き込まれたバイトの数は、出力パラメータでありながら、出力バッファサイズは、入力された関数のパラメータです。 NULLパラメータ値とゼロ値の両方は、関数によって返さCRYPTO_ERR_BAD_PARAMSコードで結果を取り上げました。"
    },
    {
      "indent": 3,
      "text": "mi - pointer to signature parameter (random number usually) if milen parameter in algorithm description is non-zero. In this case zero mi parameter indicates that the parameter should be chosen (generated) inside the algorithm. If milen parameter in algorithm description is set to zero then mi parameter is ignored.",
      "ja": "MI  - アルゴリズム記述で​​milenパラメータが非ゼロであれば、署名パラメータ（通常乱数）へのポインタ。この場合、ゼロMIパラメータは、パラメータは、アルゴリズムの内部で（発生）選択されるべきであることを示しています。アルゴリズム記述で​​milenパラメータがゼロに設定されている場合は、マイルのパラメータは無視されます。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.7.4. For CRYPTO_TYPE_VERIFY Algorithm Type:",
      "section_title": true,
      "ja": "3.7.4.  CRYPTO_TYPE_VERIFYアルゴリズムタイプの場合："
    },
    {
      "indent": 3,
      "text": "The function verifies input data signature. Its parameters are intended for:",
      "ja": "関数は、入力データの署名を検証します。そのパラメータは、のために意図されています。"
    },
    {
      "indent": 6,
      "text": "inbuff - pointer to the input data. If the parameter is equal to NULL then the function should return the CRYPTO_ERR_BAD_PARAMS code error.",
      "ja": "inbuff  - 入力データへのポインタ。パラメータがNULLと等しい場合、関数はCRYPTO_ERR_BAD_PARAMSコードエラーを返すべきです。"
    },
    {
      "indent": 6,
      "text": "inlen - input data size (in bytes). The zero parameter is allowed so that the function quits at once and returns CRYPTO_OK code.",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。関数が一度終了し、CRYPTO_OKコードを返すようにゼロパラメータが許可されています。"
    },
    {
      "indent": 6,
      "text": "outbuff -pointer to the signature. If the parameter is set to NULL then the function returns CRYPTO_ERR_BAD_PARAMS error code. If the signature consists of several parts then they are combined to one array.",
      "ja": "署名にoutbuff -pointer。パラメータがNULLに設定されている場合、この関数はCRYPTO_ERR_BAD_PARAMSエラーコードを返します。署名は、いくつかの部分で構成されている場合、彼らは、一つのアレイに結合されます。"
    },
    {
      "indent": 6,
      "text": "outlen - specifies the signature length if the signature length is set to zero in algorithm description structure. If non-zero value is specified in algorithm description structure then the parameter is ignored. If the signature consists of several parts then the maximum part length multiplied by the number of parts is specified.",
      "ja": "outlenは - 署名の長さはアルゴリズム記述構造にゼロに設定されている場合、署名長を指定します。非ゼロ値は、アルゴリズム記述構造体で指定されている場合、パラメータは無視されます。署名は、いくつかの部分で構成されている場合、次に部品の数を乗じた最大部分の長さが指定されています。"
    },
    {
      "indent": 6,
      "text": "mi - is not used.",
      "ja": "マイル - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_INVALID_SIGNATURE - invalid signature.",
      "ja": "CRYPTO_ERR_INVALID_SIGNATURE  - 無効な署名。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.7.5. For CRYPTO_TYPE_COMPRESS Algorithm Type:",
      "section_title": true,
      "ja": "3.7.5.  CRYPTO_TYPE_COMPRESSアルゴリズムタイプの場合："
    },
    {
      "indent": 3,
      "text": "The function compresses the input data. Its parameters are intended for:",
      "ja": "関数は、入力データを圧縮します。そのパラメータは、のために意図されています。"
    },
    {
      "indent": 6,
      "text": "inbuff - pointer to the input data.",
      "ja": "inbuff  - 入力データへのポインタ。"
    },
    {
      "indent": 6,
      "text": "inlen - input data size (in bytes). The zero parameter is allowed so that the function quits at once and returns CRYPTO_OK code.",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。関数が一度終了し、CRYPTO_OKコードを返すようにゼロパラメータが許可されています。"
    },
    {
      "indent": 6,
      "text": "outbuff - output data buffer. NULL parameter value results in the outlen parameter setting to output buffer size required to compress the input buffer represented. In this case the CRYPTO_ERR_SMALL_BUFFER error should not be returned.",
      "ja": "outbuff  - 出力データ・バッファ。示される入力バッファを圧縮するために必要な出力バッファサイズにoutlenはパラメータ設定におけるNULLパラメータ値をもたらします。この場合、CRYPTO_ERR_SMALL_BUFFERエラーが返されるべきではありません。"
    },
    {
      "indent": 6,
      "text": "outlen - Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter. Both the NULL parameter value and the zero value addressed result in CRYPTO_ERR_BAD_PARAMS code returned by the function.",
      "ja": "outlenは - 出力バッファに書き込まれたバイトの数は、出力パラメータでありながら、出力バッファサイズは、入力された関数のパラメータです。 NULLパラメータ値とゼロ値の両方は、関数によって返さCRYPTO_ERR_BAD_PARAMSコードで結果を取り上げました。"
    },
    {
      "indent": 6,
      "text": "mi - is not used.",
      "ja": "マイル - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソースのCRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.7.6. For CRYPTO_TYPE_UNCOMPRESS Algorithm Type:",
      "section_title": true,
      "ja": "3.7.6.  CRYPTO_TYPE_UNCOMPRESSアルゴリズムタイプの場合："
    },
    {
      "indent": 6,
      "text": "The function decompresses the input data. Its parameters are\nintended for:",
      "raw": true
    },
    {
      "indent": 6,
      "text": "inbuff - pointer to the input data.",
      "ja": "inbuff  - 入力データへのポインタ。"
    },
    {
      "indent": 6,
      "text": "inlen - input data size (in bytes). The zero parameter is allowed so that the function quits at once and returns CRYPTO_OK code.",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。関数が一度終了し、CRYPTO_OKコードを返すようにゼロパラメータが許可されています。"
    },
    {
      "indent": 6,
      "text": "outbuff - output data buffer. NULL parameter value results in the outlen parameter setting to output buffer size required to decompress the input buffer represented. In this case the CRYPTO_ERR_SMALL_BUFFER error should not be returned.",
      "ja": "outbuff  - 出力データ・バッファ。示される入力バッファを解凍するために必要な出力バッファサイズにoutlenはパラメータ設定におけるNULLパラメータ値をもたらします。この場合、CRYPTO_ERR_SMALL_BUFFERエラーが返されるべきではありません。"
    },
    {
      "indent": 6,
      "text": "outlen - Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter. Both the NULL parameter value and the zero value addressed result in CRYPTO_ERR_BAD_PARAMS code returned by the function.",
      "ja": "outlenは - 出力バッファに書き込まれたバイトの数は、出力パラメータでありながら、出力バッファサイズは、入力された関数のパラメータです。 NULLパラメータ値とゼロ値の両方は、関数によって返さCRYPTO_ERR_BAD_PARAMSコードで結果を取り上げました。"
    },
    {
      "indent": 6,
      "text": "mi - is not used.",
      "ja": "マイル - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.7.7. For CRYPTO_TYPE_HASH Algorithm Type:",
      "section_title": true,
      "ja": "3.7.7.  CRYPTO_TYPE_HASHアルゴリズムタイプの場合："
    },
    {
      "indent": 3,
      "text": "The function calculates the hash value of the input data. Its parameters are intended for:",
      "ja": "関数は、入力データのハッシュ値を算出します。そのパラメータは、のために意図されています。"
    },
    {
      "indent": 6,
      "text": "inbuff - pointer to the input data. If the parameter is of NULL value then the function calculates cumulative hash value for the data represented (taking into account all previous data represented). If total length of all the data represented by the moment is divisible by blocklen and outbuff is non-NULL then it is returned to outbuff. Nothing is written in outbuff when the length is not divisible by blocklen. NULL inbuff indicates the last conversion when the input data is padded up to the blocklen size and the result is written to outbuff address. The padding procedure is defined for the algorithm.",
      "ja": "inbuff  - 入力データへのポインタ。パラメータがNULL値である場合、関数は、（アカウントに示されるすべての以前のデータを取る）で表されるデータの累積ハッシュ値を算出します。現時点で表現するすべてのデータの長さの合計がBLOCKLENで割り切れるとoutbuffが非NULLである場合、それはoutbuffに返されます。長さはBLOCKLENで割り切れないときは何もoutbuffに書き込まれません。 NULL inbuffは、入力データがBLOCKLENサイズまで埋め込まれ、その結果がoutbuffアドレスに書き込まれる最後の変換を示しています。パディング手順は、アルゴリズムのために定義されています。"
    },
    {
      "indent": 6,
      "text": "inlen - input data size (in bytes). The zero parameter is allowed when the function quits at once and returns CRYPTO_OK code.",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。関数が一度終了し、CRYPTO_OKコードを返すときにゼロパラメータが許可されています。"
    },
    {
      "indent": 6,
      "text": "outbuff - output data buffer.",
      "ja": "outbuff  - 出力データ・バッファ。"
    },
    {
      "indent": 6,
      "text": "outlen - Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter. If intermediate conversion value (inbuff is not NULL) and total length of data represented by the moment are not divisible by blocklen then outlen is set to zero and the hash value is not written in outbuff. Both the NULL parameter value and the zero value addressed result in CRYPTO_ERR_BAD_PARAMS code returned by the function.",
      "ja": "outlenは - 出力バッファに書き込まれたバイトの数は、出力パラメータでありながら、出力バッファサイズは、入力された関数のパラメータです。中間変換値（inbuffがNULLでない）とモーメントによって表されるデータの合計長さはゼロに設定され、ハッシュ値がoutbuffに書き込まれていないoutlenは次いでBLOCKLENで割り切れない場合。 NULLパラメータ値とゼロ値の両方は、関数によって返さCRYPTO_ERR_BAD_PARAMSコードで結果を取り上げました。"
    },
    {
      "indent": 6,
      "text": "mi - is not used.",
      "ja": "マイル - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.7.8. For CRYPTO_TYPE_RANDOM Algorithm Type:",
      "section_title": true,
      "ja": "3.7.8.  CRYPTO_TYPE_RANDOMアルゴリズムタイプの場合："
    },
    {
      "indent": 3,
      "text": "The function generates a random number. Its parameters are intended for:",
      "ja": "この関数は乱数を生成します。そのパラメータは、のために意図されています。"
    },
    {
      "indent": 6,
      "text": "inbuff - pointer to the input data used for generation (when one of the pseudorandom algorithms is implemented). NULL parameter indicates absence of the input data.",
      "ja": "inbuff  - （擬似ランダムアルゴリズムのいずれかが実装されている）の生成に使用される入力データへのポインタ。 NULLパラメータは、入力データが存在しないことを示しています。"
    },
    {
      "indent": 6,
      "text": "inlen - input data size (in bytes).",
      "ja": "inlen  - 入力（バイト単位）のデータサイズ。"
    },
    {
      "indent": 6,
      "text": "outbuff - output data",
      "ja": "outbuff  - 出力データ"
    },
    {
      "indent": 6,
      "text": "outlen - Output buffer size is an input function parameter while the number of bytes written in the output buffer is the output parameter. If zero (i.e. arbitrary) generated number size is set in the algorithm description then the outlen value determines the number of random bytes required by the calling procedure.",
      "ja": "outlenは - 出力バッファに書き込まれたバイトの数は、出力パラメータでありながら、出力バッファサイズは、入力された関数のパラメータです。ゼロ（すなわち任意）生成された数のサイズはアルゴリズムの説明で設定されている場合、outlenは値は呼び出し手順によって必要とされるランダムバイトの数を決定します。"
    },
    {
      "indent": 6,
      "text": "mi - is not used.",
      "ja": "マイル - 使用されていません。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般CRYPTO_ERR_NO_RESOURCESエラーに反しこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "3.8. Cryptographic Context Control Function",
      "section_title": true,
      "ja": "3.8. 暗号コンテキスト制御機能"
    },
    {
      "indent": 0,
      "text": "/* Algorithm control */\nCRYPTO_STATUS   CryptoControl(\n                CRYPTO_HANDLE   state,  /* Cipher state handle */\n                long            cmd,    /* Control command */\n                long            param,  /* Parameter id */\n                char            val,    /* Parameter value */\n                long            *len);  /* For CRYPTO_GET: on entry -\n                                           val buffer length, on exit -\n                                           number of bytes written to\n                                           val; for CRYPTO_SET: length\n                                           of value to set */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The function provides cryptographic context internal parameters management. It may be used to check context parameters or to change the context state, for example it may return information about cryptoalgorithm (is given context uses hardware encryption facilities), or it may \"scroll\" stream algorithms context if necessary, etc.",
      "ja": "関数は、暗号コンテキスト内部パラメータ管理を提供します。等、（文脈がハードウェア暗号化機能を使用して与えられている）は、例えば、それが暗号アルゴリズムについての情報を返すことができる、コンテキストパラメータをチェックしたり、コンテキスト状態を変更するために用いてもよいし、必要に応じて、ストリームアルゴリズムのコンテキストを「スクロール」することができます"
    },
    {
      "indent": 3,
      "text": "Description of parameters:",
      "ja": "パラメータの説明："
    },
    {
      "indent": 6,
      "text": "state - cryptographic context handle.",
      "ja": "状態 - 暗号コンテキストハンドル。"
    },
    {
      "indent": 6,
      "text": "cmd - command (CRYPTO_GET or CRYPTO_SET).",
      "ja": "CMD  - コマンド（CRYPTO_GETまたはCRYPTO_SET）。"
    },
    {
      "indent": 3,
      "text": "param - identifier of parameter. Values in the range of 0..32767 are assigned well-known numbers for all algorithms. Values in the range of 32768..65535 mean various variables for various algorithms (may be arbitrarily used by cryptolibrary developer).",
      "ja": "PARAM  - パラメータの識別子。 0..32767の範囲内の値は、すべてのアルゴリズムでよく知られている番号が割り当てられています。 32768..65535の範囲の値は、様々なアルゴリズムのための各種変数（任意cryptolibrary開発者によって使用されてもよい）を意味します。"
    },
    {
      "indent": 3,
      "text": "val - pointer to the data buffer.",
      "ja": "ヴァル - データ・バッファへのポインタ。"
    },
    {
      "indent": 3,
      "text": "len - data size (in bytes).",
      "ja": "LEN  - （バイト単位）のデータサイズ。"
    },
    {
      "indent": 3,
      "text": "Returned values:",
      "ja": "戻り値："
    },
    {
      "indent": 6,
      "text": "CRYPTO_OK - successful completion.",
      "ja": "CRYPTO_OK  - 正常に完了しました。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_GENERAL - internal error.",
      "ja": "CRYPTO_ERR_GENERAL  - 内部エラー。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_HANDLE - invalid cryptographic context handle.",
      "ja": "CRYPTO_ERR_BAD_HANDLE  - 無効な暗号コンテキスト・ハンドル。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_RESOURCES - insufficient internal resources.",
      "ja": "CRYPTO_ERR_NO_RESOURCES  - 不十分な内部リソース。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_NO_MEMORY - not enough memory. Contrary to general",
      "ja": "CRYPTO_ERR_NO_MEMORY  - メモリが足りません。一般に反して"
    },
    {
      "indent": 9,
      "text": "CRYPTO_ERR_NO_RESOURCES error this code assumes that the calling module can release system memory (if it is in position to) and try to call the function once again.",
      "ja": "CRYPTO_ERR_NO_RESOURCESエラーこのコードは、呼び出しモジュールは、（それができる立場にある場合）、システムメモリを解放し、もう一度関数を呼び出すしようとすることができるということを前提としています。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_SMALL_BUFFER - insufficient output buffer size.",
      "ja": "CRYPTO_ERR_SMALL_BUFFER  - 不十分な出力バッファサイズ。"
    },
    {
      "indent": 6,
      "text": "CRYPTO_ERR_BAD_PARAMS - invalid parameters.",
      "ja": "CRYPTO_ERR_BAD_PARAMS  - 無効なパラメータ。"
    },
    {
      "indent": 0,
      "text": "4. Cryptoplugin Registration Procedure",
      "section_title": true,
      "ja": "4. Cryptoplugin登録手順"
    },
    {
      "indent": 3,
      "text": "Cryptoplugin should be linked together with the cryptoplugin wrapper library delivered by the cryptoplugin's client developer according to the rules specified by the module-client developer for each platform. It should result in a driver (module) of appropriate operating system that implements the cryptolibrary functions. The driver should be one of the drivers loaded during operating system boot. The procedure of cryptoplugin driver installation should be defined, documented, and automated when necessary, by the cryptoplugin developer. At the beginning of operation the driver-client determines cryptoplugin driver availability and establishes interconnection with it. Both module-client configuration and current security policy determine data conversion algorithms to be chosen.",
      "ja": "Cryptopluginは、各プラットフォーム用のモジュール・クライアント開発者によって指定されたルールに従ってcryptopluginのクライアント開発者によって提供さcryptopluginラッパーライブラリと一緒にリンクされなければなりません。これはcryptolibrary機能を実現する適切なオペレーティングシステムのドライバ（モジュール）をもたらすはずです。ドライバーは、オペレーティングシステムの起動時にロードされたドライバのいずれかでなければなりません。 cryptopluginドライバのインストールの手順は、定義された文書、及び必要な場合cryptoplugin開発者が、自動化されなければなりません。操作の開始時にドライバー・クライアントは、cryptopluginドライバの可用性を決定し、それとの相互接続を確立します。モジュール・クライアントの設定と現在のセキュリティポリシーの両方選択するデータ変換アルゴリズムを決定します。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "Security issues are addressed throughout this memo.",
      "ja": "セキュリティ問題はこのメモ全体で取り組まれています。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6.参照"
    },
    {
      "indent": 3,
      "text": "[Schneier] Bruce Schneier, Applied Cryptography - Protocols, Algorithms, and Source Code in C (Second Edition), John Wiley & Sons, Inc., 1996.",
      "ja": "[シュナイアー]ブルース・シュナイアー、応用暗号 -  Cでのプロトコル、アルゴリズム、およびソースコード（第二版）、John Wiley＆Sons社、1996年。"
    },
    {
      "indent": 3,
      "text": "[IPsec] Kent, S. and R. Atkinson, \"Security Architecture for the Internet Protocol\", RFC 2401, November 1998.",
      "ja": "[IPsecの]ケント、S.とR.アトキンソン、 \"インターネットプロトコルのためのセキュリティー体系\"、RFC 2401、1998年11月。"
    },
    {
      "indent": 3,
      "text": "[ISAKMP] Maughhan, D., Schertler, M. Schneider, M. and J. Turner, \"Internet Security Association and Key Management Protocol (ISAKMP)\", RFC 2408, November 1998.",
      "ja": "[ISAKMP] Maughhan、D.、Schertler、M.シュナイダー、M.とJ.ターナー、 \"インターネットセキュリティ協会と鍵管理プロトコル（ISAKMP）\"、RFC 2408、1998年11月。"
    },
    {
      "indent": 3,
      "text": "[IKE] Harkins, D. and D. Carrel, \"The Internet Key Exchange (IKE)\", RFC 2409, November 1998.",
      "ja": "[IKE]ハーキンとD.とD.カレル、 \"インターネットキー交換（IKE）\"、RFC 2409、1998年11月。"
    },
    {
      "indent": 3,
      "text": "[TLS] Dierks, T. and C. Allen, \"The TLS protocol Version 1.0\", RFC 2246, January 1999.",
      "ja": "[TLS]ダークス、T.とC.アレン、 \"TLSプロトコルバージョン1.0\"、RFC 2246、1999年1月。"
    },
    {
      "indent": 0,
      "text": "7. Author's Address",
      "section_title": true,
      "ja": "7.著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Valery Smyslov TWS Centralny prospekt, 11, Moscow, Russia",
      "ja": "ヴァレリーSmyslov GRP中央目論見書、11、モスクワ、ロシア"
    },
    {
      "indent": 3,
      "text": "Phone: +7 (095) 531 4633 Fax: +7 (095) 531 2403 EMail: svan@trustworks.com",
      "ja": "電話番号：+7（095）531 4633ファックス：+7（095）531 2403 Eメール：svan@trustworks.com"
    },
    {
      "indent": 0,
      "text": "Appendix A. The interface specification as a C header file",
      "ja": "付録A. Cヘッダファイルのようなインタフェース仕様"
    },
    {
      "indent": 0,
      "text": "#ifndef __CRYPTPI_H #define __CRYPTPI_H",
      "ja": "#ifndefの__CRYPTPI_Hの#define __CRYPTPI_H"
    },
    {
      "indent": 0,
      "text": "#define CRYPTO_VER(maj,min) (((maj & 0xff) << 8) | (min & 0xff)) #define CRYPTO_MAJ_VER(ver) ((ver >> 8) & 0xff) #define CRYPTO_MIN_VER(ver) (ver & 0xff)",
      "ja": "#define CRYPTO_VER（MAJ、分）（（（MAJ＆0xffの）<< 8）|（分＆0xffの））の#define CRYPTO_MAJ_VER（参照）（（参照>> 8）＆0xffの）の#define CRYPTO_MIN_VER（参照）（参照＆0xffの）"
    },
    {
      "indent": 0,
      "text": "#define CRYPTO_PLUGIN_NAME_LEN  64      /* Must be multiple of 4 to */\n#define CRYPTO_ALG_NAME_LEN     32      /* avoid alignment problems */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#ifndef CRYPTO_HANDLE\n#define CRYPTO_HANDLE           void*   /* cipher state handle */\n#endif",
      "raw": true
    },
    {
      "indent": 0,
      "text": "typedef enum tag_CRYPTO_STATUS {\n        CRYPTO_OK = 1,                  /* success */\n        CRYPTO_ERR_GENERAL,             /* undefined (internal) error */\n        CRYPTO_ERR_NOT_SUPPORTED,       /* unsupported */\n        CRYPTO_ERR_BAD_HANDLE,          /* invalid handle */\n        CRYPTO_ERR_SMALL_BUFFER,        /* insufficient output buffer\n                                           size */\n        CRYPTO_ERR_WEAK_KEY,            /* key is considered to be weak\n                                           (semiweak, pseudoweak) */\n        CRYPTO_ERR_NO_RESOURCES,        /* insufficient resources to\n                                           perform operation */\n        CRYPTO_ERR_NO_MEMORY,           /* insufficient memory to\n                                           perform operation */\n        CRYPTO_ERR_BAD_PARAMS,          /* invalid parameters */\n        CRYPTO_ERR_HARDWARE,            /* hardware error */\n        CRYPTO_ERR_INVALID_SIGNATURE,   /* invalid signature */\n        CRYPTO_ERR_UNCLOSED_HANDLES     /* unclosed handles exist while\n                                           plugin deinitializises */\n} CRYPTO_STATUS;",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* CryptoControl commands */\n#define CRYPTO_GET                      1       /* get parameter */\n#define CRYPTO_SET                      2       /* set parameter */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined algorithm types */\n#define CRYPTO_TYPE_ENCRYPT             1\n#define CRYPTO_TYPE_DECRYPT             2\n#define CRYPTO_TYPE_SIGN                3\n#define CRYPTO_TYPE_VERIFY              4\n#define CRYPTO_TYPE_COMPRESS            5\n#define CRYPTO_TYPE_UNCOMPRESS          6\n#define CRYPTO_TYPE_HASH                7",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#define CRYPTO_TYPE_RANDOM 8",
      "ja": "#define CRYPTO_TYPE_RANDOM 8"
    },
    {
      "indent": 0,
      "text": "/* Currently defined algorithm IDs (for types\n   CRYPTO_TYPE_ENCRYPT & CRYPTO_TYPE_DECRYPT) */\n#define CRYPTO_AE_DUMMY                 1       /* no encryption */\n#define CRYPTO_AE_DES                   2       /* DES-CBC */\n#define CRYPTO_AE_3DES_EDE              3       /* Triple DES-EDE-CBC */\n#define CRYPTO_AE_IDEA                  4       /* IDEA-CBC */\n#define CRYPTO_AE_RC2                   5       /* RC2 */\n#define CRYPTO_AE_RC4                   6       /* RC4 */\n#define CRYPTO_AE_RC5                   7       /* RC5 */\n#define CRYPTO_AE_SAFER                 8       /* SAFER */\n#define CRYPTO_AE_CAST                  9       /* CAST */\n#define CRYPTO_AE_BLOWFISH              10      /* Blowfish */\n#define CRYPTO_AE_RSA                   11      /* RSA */\n#define CRYPTO_AE_GOST                  12      /* GOST */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined algorithm IDs (for types\n   CRYPTO_TYPE_SIGN & CRYPTO_TYPE_VERIFY) */\n#define CRYPTO_AS_RSA                   2       /* RSA */\n#define CRYPTO_AS_DSA                   3       /* DSA */\n#define CRYPTO_AS_GOST                  4       /* GOST */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined algorithm IDs (for types\n   CRYPTO_TYPE_COMPRESS & CRYPTO_TYPE_UNCOMPRESS) */\n#define CRYPTO_AC_DUMMY                 1       /* no compression */\n#define CRYPTO_AC_DEFLATE               2       /* Deflate */\n#define CRYPTO_AC_LZS                   3       /* LZS */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined algorithm IDs (for type CRYPTO_TYPE_HASH) */\n#define CRYPTO_AH_MD5                   1       /* MD5 */\n#define CRYPTO_AH_SHA                   2       /* SHA-1 */\n#define CRYPTO_AH_GOST                  3       /* GOST */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined algorithm IDs (for type CRYPTO_TYPE_RANDOM) */\n#define         CRYPTO_AR_UNKNOWN       1",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined plugin flags */\n#define CRYPTO_PLUGIN_HARDWARE          1       /* plugin uses hdw */\n/* TBD more */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined algorithm flags */\n#define CRYPTO_ALG_HARDWARE             1       /* algorithm implemented\n                                                   in hardware */\n#define CRYPTO_ALG_MULTITHREADED        2       /* implementation allows\n                                                   multithreading */\n/* TBD more */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Currently defined parameters identifiers for CryptoControl */\n#define CRYPTO_PARAM_KEY                1       /* Only for CRYPTO_GET -\n                                                   get current key */\n/* TBD more */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "typedef struct  tag_CryptoAlgInfo {\n        long    status;                 /* Algorithm status */\n        long    type;                   /* algorithm type (One of\n                                           CRYPTO_TYPE_XXX) */\n        long    id;                     /* algorithm ID */\n        long    group;                  /* algorithm group */\n        long    version;                /* algorithm version\n                                           (CRYPTO_VER) */\n        long    flags;                  /* algorithm flags\n                                           (CRYPTO_ALG_XXX) */\n        long    maxcontexts;            /* max number of cipher states\n                                           supported (0 - any) */\n        char    name[CRYPTO_ALG_NAME_LEN];      /* algorithm name */\n                          /* CRYPT   SIGN    COMPRESS HASH    RANDOM  */\n                          /* DECRYPT VERIFY                           */\n        long    blocklen; /* blklen (blklen)  inlen   blklen    -     */\n        long    keylen;   /* keylen  keylen     -       -     seedlen */\n        long    outlen;   /* outlen (signlen) outlen  hashlen randlen */\n        long    milen;    /* milen   (param)    -       -       -     */\n} CryptoAlgInfo;",
      "raw": true
    },
    {
      "indent": 0,
      "text": "typedef struct  tag_CryptoPluginInfo {\n        long    cpi_version;            /* Crypto PI version (currently\n                                           CRYPTO_VER(1,0)) */\n        long    status;                 /* Plugin status */\n        char    name[CRYPTO_PLUGIN_NAME_LEN];   /* plugin text\n                                                   description */\n        long    version;                /* plugin version\n                                           (CRYPTO_VER) */\n        long    flags;                  /* plugin flags\n                                           (CRYPTO_PLUGIN_XXX) */\n        long    number_of_algs;         /* number of AlgInfo structures\n                                           followed (min 1) */\n        CryptoAlgInfo   algs[1];        /* array of AlgInfo structures\n                                           (min 1) */\n} CryptoPluginInfo;",
      "raw": true
    },
    {
      "indent": 0,
      "text": "#ifdef __cplusplus extern \"C\" { #endif",
      "ja": "#ifdef __cplusplusはextern \"C\" {#endifの"
    },
    {
      "indent": 0,
      "text": "/* CryptoPlugin initialization. Returns pointer to CryptoPluginInfo\nstructure on success or NULL on fatal error. */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "CryptoPluginInfo *CryptoPluginInit(\n                void            *param);/* Ptr to OS parameters\n                                           (platform-specific) */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Plugin deinitialization */\nCRYPTO_STATUS   CryptoPluginFini(void);",
      "raw": true
    },
    {
      "indent": 0,
      "text": "/* Get new algorithm instance (cipher state) */\nCRYPTO_STATUS   CryptoOpen(\n                CRYPTO_HANDLE   *state, /* Pointer to cipher state\n                                            handle (filled on exit) */\n                 long            algnum, /* Algorithm number in\n                                            CryptoPluginInfo structure */\n                 const char      *key);  /* key (in plain) */",
      "raw": true
    },
    {
      "indent": 1,
      "text": "/* Reinitialize algorithm instance */\nCRYPTO_STATUS   CryptoReOpen(\n                CRYPTO_HANDLE   state, /* current cipher state handle */\n                const char      *key);  /* key (in plain) */",
      "raw": true
    },
    {
      "indent": 1,
      "text": "/* Destroy algorithm instance */\nCRYPTO_STATUS   CryptoClose(\n                CRYPTO_HANDLE   state); /* Handle of cipher state */",
      "raw": true
    },
    {
      "indent": 1,
      "text": "/* Check key for possible weakness */\nCRYPTO_STATUS   CryptoCheckForWeakKey(\n                long            algnum, /* Algorithm number in\n                                           CryptoPluginInfo structure */\n                const char      *key);  /* Proposed key */",
      "raw": true
    },
    {
      "indent": 1,
      "text": "/* Perform CryptoTransform (depends on cipher state type) */\nCRYPTO_STATUS   CryptoTransform(\n                CRYPTO_HANDLE   state,  /* Cipher state handle */\n                const char      *inbuff,/* input data */\n                long            inlen,  /* input data length */\n                char            *outbuff,/* output buffer */\n                long            *outlen,/* On entry - output buffer\n                                          length, on exit -  number of\n                                          bytes written to outbuff */\n                char            *mi);   /* Message indicator  */",
      "raw": true
    },
    {
      "indent": 1,
      "text": "/* Algorithm control */\nCRYPTO_STATUS   CryptoControl(\n                CRYPTO_HANDLE   state,  /* Cipher state handle */\n                long            cmd,    /* Control command */\n                long            param,  /* Parameter id */\n                char            val,    /* Parameter value */\n                long            *len);  /* For CRYPTO_GET: on entry -",
      "raw": true
    },
    {
      "indent": 44,
      "text": "val buffer length, on exit -\nnumber of bytes written to\nval; for CRYPTO_SET: length\nof value to set */",
      "raw": true
    },
    {
      "indent": 1,
      "text": "#ifdef __cplusplus } #endif",
      "ja": "#ifdef __cplusplus} #endifの"
    },
    {
      "indent": 1,
      "text": "#endif  /* __CRYPTPI_H */",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1999). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1999）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}