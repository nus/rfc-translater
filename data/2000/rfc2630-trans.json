{
  "title": {
    "text": "RFC 2630 - Cryptographic Message Syntax",
    "ja": "RFC 2630 - 暗号メッセージ構文"
  },
  "number": 2630,
  "created_at": "2019-10-27 23:38:44.394661+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                        R. Housley\nRequest for Comments: 2630                                       SPYRUS\nCategory: Standards Track                                     June 1999",
      "raw": true
    },
    {
      "indent": 22,
      "text": "Cryptographic Message Syntax",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This document specifies an Internet standards track protocol for the Internet community, and requests discussion and suggestions for improvements. Please refer to the current edition of the \"Internet Official Protocol Standards\" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited.",
      "ja": "この文書は、インターネットコミュニティのためのインターネット標準トラックプロトコルを指定し、改善のための議論と提案を要求します。このプロトコルの標準化状態と状態への「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1999). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1999）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.",
      "ja": "この文書は、暗号メッセージ構文を説明しています。この構文は、デジタル署名、ダイジェスト、認証、または任意のメッセージを暗号化するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax is derived from PKCS #7 version 1.5 as specified in RFC 2315 [PKCS#7]. Wherever possible, backward compatibility is preserved; however, changes were necessary to accommodate attribute certificate transfer and key agreement techniques for key management.",
      "ja": "暗号メッセージ構文は、RFC 2315 [PKCS＃7]で指定されるようにPKCS＃7バージョン1.5から誘導されます。可能な限り、下位互換性は維持されます。ただし、変更内容は、鍵管理のための属性証明書の転送と鍵合意技術に対応するために必要でした。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1   Introduction .................................................  4\n2   General Overview .............................................  4\n3   General Syntax ...............................................  5\n4   Data Content Type ............................................  5\n5   Signed-data Content Type .....................................  6\n    5.1  SignedData Type .........................................  7\n    5.2  EncapsulatedContentInfo Type ............................  8\n    5.3  SignerInfo Type .........................................  9\n    5.4  Message Digest Calculation Process ...................... 11\n    5.5  Message Signature Generation Process .................... 12\n    5.6  Message Signature Verification Process .................. 12\n6   Enveloped-data Content Type .................................. 12\n    6.1  EnvelopedData Type ...................................... 14\n    6.2  RecipientInfo Type ...................................... 15\n         6.2.1  KeyTransRecipientInfo Type ....................... 16\n         6.2.2  KeyAgreeRecipientInfo Type ....................... 17\n         6.2.3  KEKRecipientInfo Type ............................ 19\n    6.3  Content-encryption Process .............................. 20\n    6.4  Key-encryption Process .................................. 20\n7   Digested-data Content Type ................................... 21\n8   Encrypted-data Content Type .................................. 22\n9   Authenticated-data Content Type .............................. 23\n    9.1  AuthenticatedData Type .................................. 23\n    9.2  MAC Generation .......................................... 25\n    9.3  MAC Verification ........................................ 26\n10  Useful Types ................................................. 27\n    10.1  Algorithm Identifier Types ............................. 27\n          10.1.1  DigestAlgorithmIdentifier ...................... 27\n          10.1.2  SignatureAlgorithmIdentifier ................... 27\n          10.1.3  KeyEncryptionAlgorithmIdentifier ............... 28\n          10.1.4  ContentEncryptionAlgorithmIdentifier ........... 28\n          10.1.5  MessageAuthenticationCodeAlgorithm ............. 28\n    10.2  Other Useful Types ..................................... 28\n          10.2.1  CertificateRevocationLists ..................... 28\n          10.2.2  CertificateChoices ............................. 29\n          10.2.3  CertificateSet ................................. 29\n          10.2.4  IssuerAndSerialNumber .......................... 30\n          10.2.5  CMSVersion ..................................... 30\n          10.2.6  UserKeyingMaterial ............................. 30\n          10.2.7  OtherKeyAttribute .............................. 30",
      "raw": true
    },
    {
      "indent": 3,
      "text": "11  Useful Attributes ............................................ 31\n    11.1  Content Type ........................................... 31\n    11.2  Message Digest ......................................... 32\n    11.3  Signing Time ........................................... 32\n    11.4  Countersignature ....................................... 34\n12  Supported Algorithms ......................................... 35\n    12.1  Digest Algorithms ...................................... 35\n          12.1.1  SHA-1 .......................................... 35\n          12.1.2  MD5 ............................................ 35\n    12.2  Signature Algorithms ................................... 36\n          12.2.1  DSA ............................................ 36\n          12.2.2  RSA ............................................ 36\n    12.3  Key Management Algorithms .............................. 36\n          12.3.1  Key Agreement Algorithms ....................... 36\n                  12.3.1.1  X9.42 Ephemeral-Static Diffie-Hellman. 37\n          12.3.2  Key Transport Algorithms ....................... 38\n                  12.3.2.1  RSA .................................. 39\n          12.3.3  Symmetric Key-Encryption Key Algorithms ........ 39\n                  12.3.3.1  Triple-DES Key Wrap .................. 40\n                  12.3.3.2  RC2 Key Wrap ......................... 41\n   12.4  Content Encryption Algorithms ........................... 41\n         12.4.1  Triple-DES CBC .................................. 42\n         12.4.2  RC2 CBC ......................................... 42\n   12.5  Message Authentication Code Algorithms .................. 42\n         12.5.1  HMAC with SHA-1 ................................. 43\n   12.6  Triple-DES and RC2 Key Wrap Algorithms .................. 43\n         12.6.1  Key Checksum .................................... 44\n         12.6.2  Triple-DES Key Wrap ............................. 44\n         12.6.3  Triple-DES Key Unwrap ........................... 44\n         12.6.4  RC2 Key Wrap .................................... 45\n         12.6.5  RC2 Key Unwrap .................................. 46\nAppendix A:  ASN.1 Module ........................................ 47\nReferences ....................................................... 55\nSecurity Considerations .......................................... 56\nAcknowledgments .................................................. 58\nAuthor's Address ................................................. 59\nFull Copyright Statement ......................................... 60",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1 Introduction",
      "ja": "1はじめに"
    },
    {
      "indent": 3,
      "text": "This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.",
      "ja": "この文書は、暗号メッセージ構文を説明しています。この構文は、デジタル署名、ダイジェスト、認証、または任意のメッセージを暗号化するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax describes an encapsulation syntax for data protection. It supports digital signatures, message authentication codes, and encryption. The syntax allows multiple encapsulation, so one encapsulation envelope can be nested inside another. Likewise, one party can digitally sign some previously encapsulated data. It also allows arbitrary attributes, such as signing time, to be signed along with the message content, and provides for other attributes such as countersignatures to be associated with a signature.",
      "ja": "暗号メッセージ構文は、データ保護のためのカプセル化構文について説明します。これは、デジタル署名、メッセージ認証コード、および暗号化をサポートしています。構文は、複数のカプセル化を可能にするので、1つのカプセル化エンベロープは別の内側にネストすることができます。同様に、一方の当事者は、デジタルでいくつかの以前にカプセル化されたデータに署名することができます。また、そのような時間に署名等の任意の属性は、メッセージの内容と一緒に署名することができ、そしてそのような署名に関連付けられるcountersignaturesなどの他の属性を提供します。"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax can support a variety of architectures for certificate-based key management, such as the one defined by the PKIX working group.",
      "ja": "暗号メッセージ構文は、PKIXワーキンググループによって定義されたものとして証明書ベースの鍵管理のためのアーキテクチャ、種々のを支援することができます。"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax values are generated using ASN.1 [X.208-88], using BER-encoding [X.209-88]. Values are typically represented as octet strings. While many systems are capable of transmitting arbitrary octet strings reliably, it is well known that many electronic-mail systems are not. This document does not address mechanisms for encoding octet strings for reliable transmission in such environments.",
      "ja": "暗号メッセージ構文値がBERコード[X.209-88]を使用して、[X.208-88] ASN.1を用いて生成されます。値は、典型的には、オクテット文字列として表されます。多くのシステムが確実に任意のオクテット文字列を送信することができるが、多くの電子メールシステムではないことはよく知られています。この文書では、そのような環境での信頼性の高い伝送のためのオクテット文字列を符号化するためのメカニズムには対応していません。"
    },
    {
      "indent": 0,
      "text": "2 General Overview",
      "ja": "2総括"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax (CMS) is general enough to support many different content types. This document defines one protection content, ContentInfo. ContentInfo encapsulates a single identified content type, and the identified type may provide further encapsulation. This document defines six content types: data, signed-data, enveloped-data, digested-data, encrypted-data, and authenticated-data. Additional content types can be defined outside this document.",
      "ja": "暗号メッセージ構文（CMS）は、多くの異なるコンテンツタイプをサポートするのに十分な一般的です。この文書では、ContentInfo、つの保護コンテンツを定義します。 ContentInfoは、単一の識別されたコンテンツ・タイプをカプセル化し、識別されたタイプは、さらにカプセル化を提供してもよいです。データ、署名されたデータ、エンベロープデータ、消化されたデータ、暗号化データ、及び認証データ：この文書は、6つのコンテンツタイプを定義します。追加のコンテンツタイプは、この文書の外で定義することができます。"
    },
    {
      "indent": 3,
      "text": "An implementation that conforms to this specification must implement the protection content, ContentInfo, and must implement the data, signed-data, and enveloped-data content types. The other content types may be implemented if desired.",
      "ja": "この仕様に準拠した実装では、ContentInfoを保護コンテンツを実装する必要があり、データ、署名データ、および包ま・データ・コンテンツ・タイプを実装する必要があります。所望であれば、他のコンテンツタイプが実装されてもよいです。"
    },
    {
      "indent": 3,
      "text": "As a general design philosophy, each content type permits single pass processing using indefinite-length Basic Encoding Rules (BER) encoding. Single-pass operation is especially helpful if content is large, stored on tapes, or is \"piped\" from another process. Single- pass operation has one significant drawback: it is difficult to perform encode operations using the Distinguished Encoding Rules (DER) [X.509-88] encoding in a single pass since the lengths of the various components may not be known in advance. However, signed attributes within the signed-data content type and authenticated attributes within the authenticated-data content type require DER encoding. Signed attributes and authenticated attributes must be transmitted in DER form to ensure that recipients can verify a content that contains one or more unrecognized attributes. Signed attributes and authenticated attributes are the only CMS data types that require DER encoding.",
      "ja": "一般的な設計思想として、各コンテンツタイプが不定長の基本符号化規則（BER）符号化を用いてシングルパス処理を可能にします。シングルパス操作では、コンテンツが多い場合、特に便利ですテープに保存されている、または別のプロセスからの「パイプ」されます。シングルパス動作は、一つ重大な欠点を有している：様々な構成要素の長さが予め知られていないかもしれないので、単一のパスで符号化する識別符号化規則（DER）[X.509-88]を使用してエンコード動作を実行することは困難です。しかし、DER符号化を必要とする認証データコンテンツタイプ内の署名されたデータのコンテンツタイプ内の属性と認証された属性に署名しました。署名された属性と認証された属性は、受信者が一つ以上の認識できない属性が含まれている内容を確認することができることを保証するためにDER形式で送信する必要があります。署名された属性と認証された属性は、DERエンコーディングが必要なだけCMSのデータ型です。"
    },
    {
      "indent": 0,
      "text": "3 General Syntax",
      "ja": "3一般的な構文"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax (CMS) associates a content type identifier with a content. The syntax shall have ASN.1 type ContentInfo:",
      "ja": "暗号メッセージ構文（CMS）は、コンテンツとコンテンツタイプ識別子を関連付けます。構文はASN.1タイプContentInfoを持たなければなりません。"
    },
    {
      "indent": 6,
      "text": "ContentInfo ::= SEQUENCE {\n  contentType ContentType,\n  content [0] EXPLICIT ANY DEFINED BY contentType }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "ContentType ::= OBJECT IDENTIFIER",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of ContentInfo have the following meanings:",
      "ja": "ContentInfoのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "contentType indicates the type of the associated content. It is an object identifier; it is a unique string of integers assigned by an authority that defines the content type.",
      "ja": "contentTypeのは、関連するコンテンツのタイプを示します。これは、オブジェクト識別子です。それは、コンテンツタイプを定義する権威によって割り当てられた整数の一意の文字列です。"
    },
    {
      "indent": 6,
      "text": "content is the associated content. The type of content can be determined uniquely by contentType. Content types for data, signed-data, enveloped-data, digested-data, encrypted-data, and authenticated-data are defined in this document. If additional content types are defined in other documents, the ASN.1 type defined should not be a CHOICE type.",
      "ja": "コンテンツは、関連するコンテンツです。コンテンツの種類は、のcontentTypeによって一意に決定することができます。データ、署名データ、包まデータ、消化・データ、暗号化データ、および認証されたデータのコンテンツタイプは、この文書で定義されています。追加コンテンツタイプが他の文書で定義されている場合は、定義されたASN.1型はCHOICEタイプではありません。"
    },
    {
      "indent": 0,
      "text": "4 Data Content Type",
      "ja": "4データコンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the data content type:",
      "ja": "以下のオブジェクト識別子は、データのコンテンツタイプを識別します。"
    },
    {
      "indent": 6,
      "text": "id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The data content type is intended to refer to arbitrary octet strings, such as ASCII text files; the interpretation is left to the application. Such strings need not have any internal structure (although they could have their own ASN.1 definition or other structure).",
      "ja": "データのコンテンツタイプは、ASCIIテキストファイルなどの任意のオクテット文字列、を指すことが意図されます。解釈はアプリケーションに任されています。このような文字列は、（彼らは自分のASN.1定義または他の構造を持っている可能性が）任意の内部構造を持っている必要はありません。"
    },
    {
      "indent": 3,
      "text": "The data content type is generally encapsulated in the signed-data, enveloped-data, digested-data, encrypted-data, or authenticated-data content type.",
      "ja": "データコンテンツタイプは、一般に、署名されたデータにエンベロープデータ、消化されたデータ、暗号化データ、または認証されたデータのコンテンツタイプをカプセル化されます。"
    },
    {
      "indent": 0,
      "text": "5 Signed-data Content Type",
      "ja": "5署名付きデータコンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The signed-data content type consists of a content of any type and zero or more signature values. Any number of signers in parallel can sign any type of content.",
      "ja": "署名されたデータのコンテンツタイプは、任意のタイプおよびゼロ以上の署名値の内容で構成されています。並行して署名者の任意の数のコンテンツの任意のタイプに署名することができます。"
    },
    {
      "indent": 3,
      "text": "The typical application of the signed-data content type represents one signer's digital signature on content of the data content type. Another typical application disseminates certificates and certificate revocation lists (CRLs).",
      "ja": "署名されたデータコンテンツタイプの典型的なアプリケーションは、データのコンテンツタイプのコンテンツ上の一人の署名者のデジタル署名を表します。別の典型的なアプリケーションは、証明書と証明書失効リスト（CRL）を発信しています。"
    },
    {
      "indent": 3,
      "text": "The process by which signed-data is constructed involves the following steps:",
      "ja": "データを締結するプロセスが構築され、以下のステップを含みます："
    },
    {
      "indent": 6,
      "text": "1. For each signer, a message digest, or hash value, is computed on the content with a signer-specific message-digest algorithm. If the signer is signing any information other than the content, the message digest of the content and the other information are digested with the signer's message digest algorithm (see Section 5.4), and the result becomes the \"message digest.\"",
      "ja": "各署名者1.、メッセージダイジェストまたはハッシュ値が、署名者固有のメッセージダイジェストアルゴリズムでコンテンツに計算されます。署名者は、コンテンツ以外の任意の情報に署名されている場合は、コンテンツやその他の情報のメッセージダイジェストは、署名者のメッセージダイジェストアルゴリズムで消化されている（5.4節を参照）、その結果は「メッセージダイジェスト」。"
    },
    {
      "indent": 6,
      "text": "2. For each signer, the message digest is digitally signed using the signer's private key.",
      "ja": "各署名者2.は、メッセージダイジェストは、デジタル署名者の秘密鍵を使って署名されています。"
    },
    {
      "indent": 6,
      "text": "3. For each signer, the signature value and other signer-specific information are collected into a SignerInfo value, as defined in Section 5.3. Certificates and CRLs for each signer, and those not corresponding to any signer, are collected in this step.",
      "ja": "セクション5.3で定義されるように3は、各署名者は、署名値と他の署名者固有の情報は、のSignerInfo値に集められます。証明書とCRL各署名者のために、任意の署名者に対応していないものは、このステップで収集されます。"
    },
    {
      "indent": 6,
      "text": "4. The message digest algorithms for all the signers and the SignerInfo values for all the signers are collected together with the content into a SignedData value, as defined in Section 5.1.",
      "ja": "4.メッセージは、セクション5.1で定義されるように、すべての署名者およびすべての署名者のためのSignerInfo値のアルゴリズムは、のSignedData値にコンテンツと一緒に収集されるダイジェスト。"
    },
    {
      "indent": 3,
      "text": "A recipient independently computes the message digest. This message digest and the signer's public key are used to verify the signature value. The signer's public key is referenced either by an issuer distinguished name along with an issuer-specific serial number or by a subject key identifier that uniquely identifies the certificate containing the public key. The signer's certificate may be included in the SignedData certificates field.",
      "ja": "受信者は、独立して、メッセージダイジェストを計算します。このメッセージダイジェストと署名者の公開鍵は、署名値を検証するために使用されています。署名者の公開鍵は、発行者識別名で発行者固有のシリアル番号と共に、または一意の公開鍵を含む証明書を識別するサブジェクトキー識別子のいずれかによって参照されています。署名者の証明書は、SignedDataの証明書フィールドに含まれていてもよいです。"
    },
    {
      "indent": 3,
      "text": "This section is divided into six parts. The first part describes the top-level type SignedData, the second part describes EncapsulatedContentInfo, the third part describes the per-signer information type SignerInfo, and the fourth, fifth, and sixth parts describe the message digest calculation, signature generation, and signature verification processes, respectively.",
      "ja": "このセクションでは、6つの部分に分割されています。最初の部分はトップレベルタイプのSignedDataを説明し、第二の部分はEncapsulatedContentInfo、第三の部分ごとの署名者情報のタイプのSignerInfoを記述し説明し、第5、第四、及び第六の部分は、メッセージ計算、署名生成、署名検証ダイジェスト説明しますそれぞれのプロセス、。"
    },
    {
      "indent": 0,
      "text": "5.1 SignedData Type",
      "section_title": true,
      "ja": "5.1のSignedDataタイプ"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the signed-data content type:",
      "ja": "以下のオブジェクト識別子は、署名されたデータコンテンツのタイプを識別する。"
    },
    {
      "indent": 6,
      "text": "id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The signed-data content type shall have ASN.1 type SignedData:",
      "ja": "署名データのコンテンツタイプは、ASN.1タイプのSignedDataを持たなければなりません。"
    },
    {
      "indent": 6,
      "text": "SignedData ::= SEQUENCE {\n  version CMSVersion,\n  digestAlgorithms DigestAlgorithmIdentifiers,\n  encapContentInfo EncapsulatedContentInfo,\n  certificates [0] IMPLICIT CertificateSet OPTIONAL,\n  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n  signerInfos SignerInfos }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 6,
      "text": "SignerInfos ::= SET OF SignerInfo",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type SignedData have the following meanings:",
      "ja": "タイプのSignedDataのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. If no attribute certificates are present in the certificates field, the encapsulated content type is id-data, and all of the elements of SignerInfos are version 1, then the value of version shall be 1. Alternatively, if attribute certificates are present, the encapsulated content type is other than id-data, or any of the elements of SignerInfos are version 3, then the value of version shall be 3.",
      "ja": "バージョンは構文バージョン番号です。いかなる属性証明書は、証明書フィールドに存在しない場合は、カプセル化されたコンテンツタイプは、IDデータであり、SignerInfosのすべての要素は、バージョン1であり、その後のバージョンの値は1属性証明書が存在する場合、あるいは、カプセル化されなければなりませんコンテンツタイプは、IDデータ以外である、又はSignerInfosの要素のいずれかは、バージョン3であり、その後のバージョンの値が3でなければなりません。"
    },
    {
      "indent": 6,
      "text": "digestAlgorithms is a collection of message digest algorithm identifiers. There may be any number of elements in the collection, including zero. Each element identifies the message digest algorithm, along with any associated parameters, used by one or more signer. The collection is intended to list the message digest algorithms employed by all of the signers, in any order, to facilitate one-pass signature verification. The message digesting process is described in Section 5.4.",
      "ja": "digestAlgorithmsは、アルゴリズム識別子をメッセージダイジェストのコレクションです。ゼロを含むコレクションの要素、任意の数のがあるかもしれません。各要素は、1人のまたは複数の署名者によって使用される任意の関連パラメータと共に、メッセージダイジェストアルゴリズムを識別する。コレクションは、ワンパス署名検証を容易にするために、任意の順序で、署名者の全てによって使用さメッセージダイジェストアルゴリズムを一覧表示することを意図しています。メッセージ消化プロセスはセクション5.4に記載されています。"
    },
    {
      "indent": 6,
      "text": "encapContentInfo is the signed content, consisting of a content type identifier and the content itself. Details of the EncapsulatedContentInfo type are discussed in section 5.2.",
      "ja": "encapContentInfoコンテンツタイプ識別子とコンテンツ自体からなる、署名されたコンテンツです。 EncapsulatedContentInfoタイプの詳細は、セクション5.2に記載されています。"
    },
    {
      "indent": 6,
      "text": "certificates is a collection of certificates. It is intended that the set of certificates be sufficient to contain chains from a recognized \"root\" or \"top-level certification authority\" to all of the signers in the signerInfos field. There may be more certificates than necessary, and there may be certificates sufficient to contain chains from two or more independent top-level certification authorities. There may also be fewer certificates than necessary, if it is expected that recipients have an alternate means of obtaining necessary certificates (e.g., from a previous set of certificates). As discussed above, if attribute certificates are present, then the value of version shall be 3.",
      "ja": "証明書は、証明書のコレクションです。証明書のセットがsignerInfosフィールド内の署名者のすべてに認められ、「ルート」または「トップレベルの認証局」からチェーンを収容するのに十分であることが意図されています。必要以上の証明書があるかもしれませんし、2つ以上の独立したトップレベルの証明機関からチェーンを収容するのに十分な証明書があるかもしれません。受信者が（証明書の前のセットから、例えば、）必要な証明書を得るための別の手段を有することが予想される場合にも、必要に応じてより少ない証明書が存在してもよいです。上述したように、属性証明書が存在する場合、次に、バージョンの値が3でなければなりません。"
    },
    {
      "indent": 6,
      "text": "crls is a collection of certificate revocation lists (CRLs). It is intended that the set contain information sufficient to determine whether or not the certificates in the certificates field are valid, but such correspondence is not necessary. There may be more CRLs than necessary, and there may also be fewer CRLs than necessary.",
      "ja": "CRLは証明書失効リスト（CRL）の集合です。セットは、証明書フィールド内の証明書が有効であるかどうかを決定するのに十分な情報が含まれているが、このような対応が必要ではないことを意図しています。必要以上のCRLがあるかもしれませんし、また必要に応じてより少ないのCRLがあるかもしれません。"
    },
    {
      "indent": 6,
      "text": "signerInfos is a collection of per-signer information. There may be any number of elements in the collection, including zero. The details of the SignerInfo type are discussed in section 5.3.",
      "ja": "signerInfosごとの署名者情報の収集です。ゼロを含むコレクションの要素、任意の数のがあるかもしれません。 SignerInfoタイプの詳細は、セクション5.3に記載されています。"
    },
    {
      "indent": 0,
      "text": "5.2 EncapsulatedContentInfo Type",
      "section_title": true,
      "ja": "5.2 EncapsulatedContentInfoタイプ"
    },
    {
      "indent": 3,
      "text": "The content is represented in the type EncapsulatedContentInfo:",
      "ja": "コンテンツは、タイプEncapsulatedContentInfoで表されます。"
    },
    {
      "indent": 6,
      "text": "EncapsulatedContentInfo ::= SEQUENCE {\n  eContentType ContentType,\n  eContent [0] EXPLICIT OCTET STRING OPTIONAL }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "ContentType ::= OBJECT IDENTIFIER",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type EncapsulatedContentInfo have the following meanings:",
      "ja": "タイプEncapsulatedContentInfoのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "eContentType is an object identifier that uniquely specifies the content type.",
      "ja": "eContentType一意コンテンツタイプを指定するオブジェクト識別子です。"
    },
    {
      "indent": 6,
      "text": "eContent is the content itself, carried as an octet string. The eContent need not be DER encoded.",
      "ja": "e-コンテンツは、オクテット文字列として実施し、コンテンツそのものです。 e-コンテンツは、DERエンコードである必要はありません。"
    },
    {
      "indent": 3,
      "text": "The optional omission of the eContent within the EncapsulatedContentInfo field makes it possible to construct \"external signatures.\" In the case of external signatures, the content being signed is absent from the EncapsulatedContentInfo value included in the signed-data content type. If the eContent value within EncapsulatedContentInfo is absent, then the signatureValue is calculated and the eContentType is assigned as though the eContent value was present.",
      "ja": "EncapsulatedContentInfoフィールド内のe-コンテンツのオプションの省略は構築することが可能になり、「外部の署名を。」外部署名の場合には、署名されたコンテンツは、署名されたデータのコンテンツタイプに含まEncapsulatedContentInfo値は存在しません。 EncapsulatedContentInfo内のe-コンテンツ値が存在しない場合、signatureValueが計算され、e-コンテンツの値が存在したものとしてのeContentTypeが割り当てられます。"
    },
    {
      "indent": 3,
      "text": "In the degenerate case where there are no signers, the EncapsulatedContentInfo value being \"signed\" is irrelevant. In this case, the content type within the EncapsulatedContentInfo value being \"signed\" should be id-data (as defined in section 4), and the content field of the EncapsulatedContentInfo value should be omitted.",
      "ja": "いかなる署名者が存在しない縮退した場合に、EncapsulatedContentInfo値は無関係である「符号付き」されています。この場合、EncapsulatedContentInfo値内のコンテンツタイプは、（セクション4で定義されるように）であるべきであるIDデータを「符号付き」され、そしてEncapsulatedContentInfo値の内容フィールドを省略しなければなりません。"
    },
    {
      "indent": 0,
      "text": "5.3 SignerInfo Type",
      "section_title": true,
      "ja": "5.3のSignerInfoタイプ"
    },
    {
      "indent": 3,
      "text": "Per-signer information is represented in the type SignerInfo:",
      "ja": "ごとの署名者の情報は、タイプのSignerInfoで表されます。"
    },
    {
      "indent": 6,
      "text": "SignerInfo ::= SEQUENCE {\n  version CMSVersion,\n  sid SignerIdentifier,\n  digestAlgorithm DigestAlgorithmIdentifier,\n  signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\n  signatureAlgorithm SignatureAlgorithmIdentifier,\n  signature SignatureValue,\n  unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "SignerIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  subjectKeyIdentifier [0] SubjectKeyIdentifier }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "SignedAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 6,
      "text": "UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Attribute ::= SEQUENCE {\n  attrType OBJECT IDENTIFIER,\n  attrValues SET OF AttributeValue }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "AttributeValue ::= ANY",
      "raw": true
    },
    {
      "indent": 6,
      "text": "SignatureValue ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type SignerInfo have the following meanings:",
      "ja": "タイプのSignerInfoのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. If the SignerIdentifier is the CHOICE issuerAndSerialNumber, then the version shall be 1. If the SignerIdentifier is subjectKeyIdentifier, then the version shall be 3.",
      "ja": "バージョンは構文バージョン番号です。 SignerIdentifierがCHOICE issuerAndSerialNumberの場合、バージョンはSignerIdentifierがsubjectKeyIdentifierである場合、バージョンは3でなければなら1でなければなりません。"
    },
    {
      "indent": 6,
      "text": "sid specifies the signer's certificate (and thereby the signer's public key). The signer's public key is needed by the recipient to verify the signature. SignerIdentifier provides two alternatives for specifying the signer's public key. The issuerAndSerialNumber alternative identifies the signer's certificate by the issuer's distinguished name and the certificate serial number; the subjectKeyIdentifier identifies the signer's certificate by the X.509 subjectKeyIdentifier extension value.",
      "ja": "SIDは、署名者の証明書（およびそれによって、署名者の公開鍵）を指定します。署名者の公開鍵は、署名を検証するために受信者によって必要とされます。 SignerIdentifierは、署名者の公開鍵を指定するための2つの選択肢を提供します。 issuerAndSerialNumberの代替は、発行者の識別名と証明書のシリアル番号で署名者の証明書を識別します。 subjectKeyIdentifierはX.509 subjectKeyIdentifier拡張値によって署名者の証明書を識別します。"
    },
    {
      "indent": 6,
      "text": "digestAlgorithm identifies the message digest algorithm, and any associated parameters, used by the signer. The message digest is computed on either the content being signed or the content together with the signed attributes using the process described in section 5.4. The message digest algorithm should be among those listed in the digestAlgorithms field of the associated SignerData.",
      "ja": "digestAlgorithmは、署名者によって使用されるメッセージダイジェストアルゴリズム、および任意の関連するパラメータを識別する。メッセージダイジェストは、署名されるコンテンツまたはセクション5.4に記載した方法を使用して署名された属性と一緒にコンテンツのいずれかで計算されます。メッセージダイジェストアルゴリズムは、関連SignerDataのdigestAlgorithmsフィールドに記載されているものの中でなければなりません。"
    },
    {
      "indent": 6,
      "text": "signedAttributes is a collection of attributes that are signed. The field is optional, but it must be present if the content type of the EncapsulatedContentInfo value being signed is not id-data. Each SignedAttribute in the SET must be DER encoded. Useful attribute types, such as signing time, are defined in Section 11. If the field is present, it must contain, at a minimum, the following two attributes:",
      "ja": "signedAttributesのは、署名された属性のコレクションです。フィールドはオプションであるが、署名されるEncapsulatedContentInfo値のコンテンツタイプは、IDデータでない場合、それが存在しなければなりません。セット内の各SignedAttributeはDERエンコードする必要があります。フィールドが存在する場合、このような時間に署名として有用な属性タイプは、セクション11で定義されている、それは、最低でも、次の2つの属性が含まれている必要があります。"
    },
    {
      "indent": 9,
      "text": "A content-type attribute having as its value the content type of the EncapsulatedContentInfo value being signed. Section 11.1 defines the content-type attribute. The content-type attribute is not required when used as part of a countersignature unsigned attribute as defined in section 11.4.",
      "ja": "その値としてEncapsulatedContentInfo値のコンテンツタイプを有するコンテンツ・タイプ属性は、署名されます。 11.1は、コンテンツ・タイプの属性を定義します。セクション11.4で定義されるように副署未署名の属性の一部として使用される場合、コンテンツタイプ属性が必要とされません。"
    },
    {
      "indent": 9,
      "text": "A message-digest attribute, having as its value the message digest of the content. Section 11.2 defines the message-digest attribute.",
      "ja": "メッセージダイジェスト価値コンテンツのメッセージダイジェストとして有する、属性。 11.2節は、メッセージダイジェスト属性を定義します。"
    },
    {
      "indent": 6,
      "text": "signatureAlgorithm identifies the signature algorithm, and any associated parameters, used by the signer to generate the digital signature.",
      "ja": "signatureAlgorithmは署名アルゴリズムを識別し、署名者によって使用される任意の関連するパラメータは、デジタル署名を生成します。"
    },
    {
      "indent": 6,
      "text": "signature is the result of digital signature generation, using the message digest and the signer's private key.",
      "ja": "署名は、メッセージダイジェストと署名者の秘密鍵を使用して、デジタル署名生成の結果です。"
    },
    {
      "indent": 6,
      "text": "unsignedAttributes is a collection of attributes that are not signed. The field is optional. Useful attribute types, such as countersignatures, are defined in Section 11.",
      "ja": "未署名の属性は署名されていない属性のコレクションです。フィールドはオプションです。このようcountersignaturesとして有用な属性タイプは、セクション11で定義されています。"
    },
    {
      "indent": 3,
      "text": "The fields of type SignedAttribute and UnsignedAttribute have the following meanings:",
      "ja": "タイプSignedAttributeとUnsignedAttributeのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "attrType indicates the type of attribute. It is an object identifier.",
      "ja": "ATTRTYPEは、属性の種類を示します。これは、オブジェクト識別子です。"
    },
    {
      "indent": 6,
      "text": "attrValues is a set of values that comprise the attribute. The type of each value in the set can be determined uniquely by attrType.",
      "ja": "attrValuesは、属性を構成する値のセットです。セット内の各値の種類はATTRTYPEによって一意に決定することができます。"
    },
    {
      "indent": 0,
      "text": "5.4 Message Digest Calculation Process",
      "section_title": true,
      "ja": "5.4メッセージダイジェスト計算処理"
    },
    {
      "indent": 3,
      "text": "The message digest calculation process computes a message digest on either the content being signed or the content together with the signed attributes. In either case, the initial input to the message digest calculation process is the \"value\" of the encapsulated content being signed. Specifically, the initial input is the encapContentInfo eContent OCTET STRING to which the signing process is applied. Only the octets comprising the value of the eContent OCTET STRING are input to the message digest algorithm, not the tag or the length octets.",
      "ja": "メッセージダイジェスト計算プロセスは、メッセージが署名された属性と一緒に署名されるコンテンツまたはコンテンツのいずれかでダイジェストを計算します。いずれの場合も、メッセージに初期入力演算処理をダイジェストは、署名されるカプセル化されたコンテンツの「値」です。具体的には、最初の入力は、署名プロセスが適用されるencapContentInfo e-コンテンツオクテット文字列です。 e-コンテンツオクテット文字列の値を含む唯一のオクテットは、メッセージに入力されたアルゴリズムではなく、タグまたは長さオクテットダイジェスト。"
    },
    {
      "indent": 3,
      "text": "The result of the message digest calculation process depends on whether the signedAttributes field is present. When the field is absent, the result is just the message digest of the content as described above. When the field is present, however, the result is the message digest of the complete DER encoding of the SignedAttributes value contained in the signedAttributes field. Since the SignedAttributes value, when present, must contain the content type and the content message digest attributes, those values are indirectly included in the result. The content type attribute is not required when used as part of a countersignature unsigned attribute as defined in section 11.4. A separate encoding of the signedAttributes field is performed for message digest calculation. The IMPLICIT [0] tag in the signedAttributes field is not used for the DER encoding, rather an EXPLICIT SET OF tag is used. That is, the DER encoding of the SET OF tag, rather than of the IMPLICIT [0] tag, is to be included in the message digest calculation along with the length and content octets of the SignedAttributes value.",
      "ja": "メッセージダイジェスト計算処理の結果はsignedAttributesのフィールドが存在するかどうかに依存します。フィールドが存在しない場合、上述のように、結果は、コンテンツのほんのメッセージダイジェストです。フィールドが存在する場合、しかし、結果はsignedAttributesのフィールドに含まsignedAttributesの値の完全なDERエンコーディングのメッセージダイジェストです。 signedAttributesの値ので、存在する場合、コンテンツタイプ及びダイジェスト属性コンテンツ・メッセージが含まれている必要があり、これらの値は、間接的に結果に含まれています。セクション11.4で定義されるように副署未署名の属性の一部として使用される場合、コンテンツタイプ属性は必要とされません。 signedAttributesのフィールドの別個の符号化はメッセージダイジェスト計算のために行われます。タグを明示的にSETが使用されているむしろsignedAttributesのフィールドにIMPLICIT [0]タグは、DER符号化に使用されません。つまり、むしろIMPLICIT [0]タグのよりも、タグのセットのDER符号化であるsignedAttributesの値の長さと内容オクテットと共に計算ダイジェストメッセージに含まれるべきです。"
    },
    {
      "indent": 3,
      "text": "When the signedAttributes field is absent, then only the octets comprising the value of the signedData encapContentInfo eContent OCTET STRING (e.g., the contents of a file) are input to the message digest calculation. This has the advantage that the length of the content being signed need not be known in advance of the signature generation process.",
      "ja": "signedAttributesのフィールドが存在しない場合、次にたsignedData encapContentInfo e-コンテンツオクテット文字列の値を含むのみオクテット（例えば、ファイルの内容が）メッセージに入力され、ダイジェスト計算。これは、コンテンツの長さは、署名生成プロセスの事前に知られている必要はなく、署名されるという利点を有します。"
    },
    {
      "indent": 3,
      "text": "Although the encapContentInfo eContent OCTET STRING tag and length octets are not included in the message digest calculation, they are still protected by other means. The length octets are protected by the nature of the message digest algorithm since it is computationally infeasible to find any two distinct messages of any length that have the same message digest.",
      "ja": "encapContentInfo e-コンテンツOCTET STRINGタグと長さオクテットは、メッセージダイジェスト計算に含まれていないが、それらはまだ他の手段によって保護されています。長さオクテットは、同じメッセージダイジェストを持つ任意の長さのうちのいずれか2つの異なるメッセージを見つけることは計算上不可能であるため、メッセージダイジェストアルゴリズムの性質によって保護されています。"
    },
    {
      "indent": 0,
      "text": "5.5 Message Signature Generation Process",
      "section_title": true,
      "ja": "5.5メッセージ署名生成処理"
    },
    {
      "indent": 3,
      "text": "The input to the signature generation process includes the result of the message digest calculation process and the signer's private key. The details of the signature generation depend on the signature algorithm employed. The object identifier, along with any parameters, that specifies the signature algorithm employed by the signer is carried in the signatureAlgorithm field. The signature value generated by the signer is encoded as an OCTET STRING and carried in the signature field.",
      "ja": "署名生成プロセスへの入力はメッセージダイジェスト計算過程と署名者の秘密鍵の結果を含んでいます。署名生成の詳細は、使用署名アルゴリズムに依存します。署名者によって使用される署名アルゴリズムを指定する任意のパラメータと共にオブジェクト識別子は、のsignatureAlgorithmフィールドで搬送されます。署名者によって生成された署名値は、OCTET STRINGとして符号化され、署名フィールドで搬送されます。"
    },
    {
      "indent": 0,
      "text": "5.6 Message Signature Verification Process",
      "section_title": true,
      "ja": "5.6メッセージの署名検証処理"
    },
    {
      "indent": 3,
      "text": "The input to the signature verification process includes the result of the message digest calculation process and the signer's public key. The recipient may obtain the correct public key for the signer by any means, but the preferred method is from a certificate obtained from the SignedData certificates field. The selection and validation of the signer's public key may be based on certification path validation (see [PROFILE]) as well as other external context, but is beyond the scope of this document. The details of the signature verification depend on the signature algorithm employed.",
      "ja": "署名検証プロセスへの入力はメッセージダイジェスト計算過程と署名者の公開鍵の結果を含んでいます。受信者は、任意の手段によって、署名者の正しい公開鍵を取得することができるが、好ましい方法はSignedDataの証明書フィールドから取得した証明書です。署名者の公開鍵の選択および検証は、認証パス検証（[PROFILE]を参照）、ならびに他の外部コンテキストに基づいて、この文書の範囲を超えてもよいです。署名検証の詳細は、使用署名アルゴリズムに依存します。"
    },
    {
      "indent": 3,
      "text": "The recipient may not rely on any message digest values computed by the originator. If the signedData signerInfo includes signedAttributes, then the content message digest must be calculated as described in section 5.4. For the signature to be valid, the message digest value calculated by the recipient must be the same as the value of the messageDigest attribute included in the signedAttributes of the signedData signerInfo.",
      "ja": "受信者は、発信者によって計算任意のメッセージダイジェスト値に依存しなくてもよいです。たsignedDataのSignerInfoはsignedAttributesのが含まれている場合セクション5.4で説明したように、その後、コンテンツメッセージダイジェストを計算しなければなりません。有効であるために署名するために、受信者によって計算されたメッセージダイジェスト値たsignedDataのSignerInfoのsignedAttributesの中に含まれるのMessageDigest属性の値と同じでなければなりません。"
    },
    {
      "indent": 0,
      "text": "6 Enveloped-data Content Type",
      "ja": "6包まデータコンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The enveloped-data content type consists of an encrypted content of any type and encrypted content-encryption keys for one or more recipients. The combination of the encrypted content and one encrypted content-encryption key for a recipient is a \"digital envelope\" for that recipient. Any type of content can be enveloped for an arbitrary number of recipients using any of the three key management techniques for each recipient.",
      "ja": "包まデータのコンテンツタイプは、任意のタイプと1つまたは複数の受信者に対して暗号化されたコンテンツ暗号化キーの暗号化されたコンテンツで構成されています。受信者のための暗号化されたコンテンツと1暗号化されたコンテンツ暗号化キーの組み合わせは、その受取人のための「デジタル封筒」です。コンテンツの任意の種類は、各受信者のための3つの鍵管理技術のいずれかを使用して、受信者の任意の数のために包むことができます。"
    },
    {
      "indent": 3,
      "text": "The typical application of the enveloped-data content type will represent one or more recipients' digital envelopes on content of the data or signed-data content types.",
      "ja": "エンベロープデータ・コンテンツ・タイプの典型的なアプリケーションは、データまたは署名されたデータのコンテンツタイプのコンテンツに1人以上の受信者のデジタル封筒を表すことになります。"
    },
    {
      "indent": 3,
      "text": "Enveloped-data is constructed by the following steps:",
      "ja": "包まデータは、以下のステップから構成されています。"
    },
    {
      "indent": 6,
      "text": "1. A content-encryption key for a particular content-encryption algorithm is generated at random.",
      "ja": "1.特定のコンテンツの暗号化アルゴリズムのためのコンテンツ暗号化キーはランダムに生成されます。"
    },
    {
      "indent": 6,
      "text": "2. The content-encryption key is encrypted for each recipient. The details of this encryption depend on the key management algorithm used, but three general techniques are supported:",
      "ja": "2.コンテンツ暗号化キーは、受信者ごとに暗号化されています。この暗号化の詳細については、使用するキー管理アルゴリズムに依存するが、3の一般的な技術がサポートされています。"
    },
    {
      "indent": 9,
      "text": "key transport: the content-encryption key is encrypted in the recipient's public key;",
      "ja": "キートランスポート：コンテンツ暗号化キーは、受信者の公開鍵で暗号化されます。"
    },
    {
      "indent": 9,
      "text": "key agreement: the recipient's public key and the sender's private key are used to generate a pairwise symmetric key, then the content-encryption key is encrypted in the pairwise symmetric key; and",
      "ja": "主要な協定：受信者の公開鍵と送信者の秘密鍵は、コンテンツ暗号化キーは、ペアワイズ対称鍵で暗号化されて、ペアワイズ対称鍵を生成するために使用されています。そして"
    },
    {
      "indent": 9,
      "text": "symmetric key-encryption keys: the content-encryption key is encrypted in a previously distributed symmetric key-encryption key.",
      "ja": "対称キー暗号化キー：コンテンツ暗号化キーが以前に分配された左右対称鍵暗号化鍵で暗号化されています。"
    },
    {
      "indent": 6,
      "text": "3. For each recipient, the encrypted content-encryption key and other recipient-specific information are collected into a RecipientInfo value, defined in Section 6.2.",
      "ja": "各受信者3は、暗号化されたコンテンツ暗号化鍵と他の受信者に固有の情報は、セクション6.2で定義されたのRecipientInfo値に集められます。"
    },
    {
      "indent": 6,
      "text": "4. The content is encrypted with the content-encryption key. Content encryption may require that the content be padded to a multiple of some block size; see Section 6.3.",
      "ja": "4.コンテンツは、コンテンツの暗号鍵で暗号化されています。コンテンツの暗号化は、コンテンツがいくつかのブロックサイズの倍数に水増しすることを要求することができます。 6.3節を参照してください。"
    },
    {
      "indent": 6,
      "text": "5. The RecipientInfo values for all the recipients are collected together with the encrypted content to form an EnvelopedData value as defined in Section 6.1.",
      "ja": "5.すべての受信者のためのRecipientInfo値はセクション6.1で定義されるようにEnvelopedDataの値を形成するために一緒に暗号化されたコンテンツを用いて収集されます。"
    },
    {
      "indent": 3,
      "text": "A recipient opens the digital envelope by decrypting one of the encrypted content-encryption keys and then decrypting the encrypted content with the recovered content-encryption key.",
      "ja": "受信者は、暗号化されたコンテンツ暗号化キーのいずれかを解読し、その後回復し、コンテンツ暗号化キーで暗号化されたコンテンツを復号化することにより、デジタル封筒を開きます。"
    },
    {
      "indent": 3,
      "text": "This section is divided into four parts. The first part describes the top-level type EnvelopedData, the second part describes the per-recipient information type RecipientInfo, and the third and fourth parts describe the content-encryption and key-encryption processes.",
      "ja": "このセクションでは、4つの部分に分かれています。最初の部分はトップレベルタイプEnvelopedDataのを記述し、第二の部分は、受信者ごとの情報タイプのRecipientInfoを説明し、第3および第4の部分は、コンテンツの暗号化と鍵暗号化プロセスを記載しています。"
    },
    {
      "indent": 0,
      "text": "6.1 EnvelopedData Type",
      "section_title": true,
      "ja": "6.1 EnvelopedDataのタイプ"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the enveloped-data content type:",
      "ja": "以下のオブジェクト識別子は、エンベロープデータ・コンテンツ・タイプを識別する。"
    },
    {
      "indent": 6,
      "text": "id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 3 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The enveloped-data content type shall have ASN.1 type EnvelopedData:",
      "ja": "包まデータのコンテンツタイプは、ASN.1タイプEnvelopedDataのを持っていなければなりません。"
    },
    {
      "indent": 6,
      "text": "EnvelopedData ::= SEQUENCE {\n  version CMSVersion,\n  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\n  recipientInfos RecipientInfos,\n  encryptedContentInfo EncryptedContentInfo,\n  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "OriginatorInfo ::= SEQUENCE {\n  certs [0] IMPLICIT CertificateSet OPTIONAL,\n  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "RecipientInfos ::= SET OF RecipientInfo",
      "raw": true
    },
    {
      "indent": 6,
      "text": "EncryptedContentInfo ::= SEQUENCE {\n  contentType ContentType,\n  contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\n  encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "EncryptedContent ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 6,
      "text": "UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type EnvelopedData have the following meanings:",
      "ja": "タイプEnvelopedDataののフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. If originatorInfo is present, then version shall be 2. If any of the RecipientInfo structures included have a version other than 0, then the version shall be 2. If unprotectedAttrs is present, then version shall be 2. If originatorInfo is absent, all of the RecipientInfo structures are version 0, and unprotectedAttrs is absent, then version shall be 0.",
      "ja": "バージョンは構文バージョン番号です。 originatorInfoが存在する場合のRecipientInfo構造のいずれかがoriginatorInfoが存在しない場合、unprotectedAttrsが存在する場合、バージョンが2でなければならない場合、バージョンは2でなければならないの全てを0以外のバージョンを持っている含まれていた場合、その後のバージョンは2でなければなりませんRecipientInfo構造は、バージョン0であり、そしてunprotectedAttrsが存在しない場合、バージョンは0でなければなりません。"
    },
    {
      "indent": 6,
      "text": "originatorInfo optionally provides information about the originator. It is present only if required by the key management algorithm. It may contain certificates and CRLs:",
      "ja": "originatorInfo任意に発信元の情報を提供します。鍵管理アルゴリズムによって必要とされる場合にのみ存在しています。これは、証明書とCRLが含まれる場合があります。"
    },
    {
      "indent": 9,
      "text": "certs is a collection of certificates. certs may contain originator certificates associated with several different key management algorithms. certs may also contain attribute certificates associated with the originator. The certificates contained in certs are intended to be sufficient to make chains from a recognized \"root\" or \"top-level certification authority\" to all recipients. However, certs may contain more certificates than necessary, and there may be certificates sufficient to make chains from two or more independent top-level certification authorities. Alternatively, certs may contain fewer certificates than necessary, if it is expected that recipients have an alternate means of obtaining necessary certificates (e.g., from a previous set of certificates).",
      "ja": "本命の証明書のコレクションです。本命は、いくつかの異なる鍵管理アルゴリズムに関連した発信元の証明書が含まれていてもよいです。本命はまた、発信元に関連付けられている属性証明書が含まれていてもよいです。本命に含まれる証明書は、すべての受信者に認められ、「ルート」または「トップレベルの認証局」からチェーンを作るのに十分であることを意図しています。しかし、本命は必要以上の証明書が含まれていてもよいし、2つ以上の独立したトップレベルの証明機関からチェーンを作るために十分な証明書があるかもしれません。受信者が（証明書の前のセットから、例えば、）必要な証明書を得るための別の手段を有することが予想される場合あるいは、本命は、必要に応じてより少ない証明書を含んでいてもよいです。"
    },
    {
      "indent": 9,
      "text": "crls is a collection of CRLs. It is intended that the set contain information sufficient to determine whether or not the certificates in the certs field are valid, but such correspondence is not necessary. There may be more CRLs than necessary, and there may also be fewer CRLs than necessary.",
      "ja": "CRLは、CRLののコレクションです。セットが本命フィールド内の証明書が有効であるが、そのような対応が必要であるか否かを決定するのに十分な情報が含まれていることが意図されています。必要以上のCRLがあるかもしれませんし、また必要に応じてより少ないのCRLがあるかもしれません。"
    },
    {
      "indent": 6,
      "text": "recipientInfos is a collection of per-recipient information. There must be at least one element in the collection.",
      "ja": "recipientInfosは、受信者ごとの情報の収集です。コレクション内の少なくとも1つの要素がなければなりません。"
    },
    {
      "indent": 6,
      "text": "encryptedContentInfo is the encrypted content information.",
      "ja": "encryptedContentInfoは暗号化されたコンテンツの情報です。"
    },
    {
      "indent": 6,
      "text": "unprotectedAttrs is a collection of attributes that are not encrypted. The field is optional. Useful attribute types are defined in Section 11.",
      "ja": "unprotectedAttrsは暗号化されていない属性のコレクションです。フィールドはオプションです。役に立つ属性タイプはセクション11で定義されています。"
    },
    {
      "indent": 3,
      "text": "The fields of type EncryptedContentInfo have the following meanings:",
      "ja": "タイプEncryptedContentInfoのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "contentType indicates the type of content.",
      "ja": "contentTypeのは、コンテンツの種類を示します。"
    },
    {
      "indent": 6,
      "text": "contentEncryptionAlgorithm identifies the content-encryption algorithm, and any associated parameters, used to encrypt the content. The content-encryption process is described in Section 6.3. The same content-encryption algorithm and content-encryption key is used for all recipients.",
      "ja": "contentEncryptionAlgorithmは、コンテンツ暗号化アルゴリズムを特定し、コンテンツを暗号化するために使用される任意の関連パラメータ、。コンテンツ暗号化処理は、6.3節に記載されています。同じコンテンツの暗号化アルゴリズムおよびコンテンツ暗号化キーは、すべての受信者に使用されます。"
    },
    {
      "indent": 6,
      "text": "encryptedContent is the result of encrypting the content. The field is optional, and if the field is not present, its intended value must be supplied by other means.",
      "ja": "暗号化コンテンツは、コンテンツを暗号化した結果です。フィールドはオプションで、フィールドが存在しない場合、その意図された値は、他の手段によって供給されなければなりません。"
    },
    {
      "indent": 3,
      "text": "The recipientInfos field comes before the encryptedContentInfo field so that an EnvelopedData value may be processed in a single pass.",
      "ja": "EnvelopedDataの値は、単一のパスで処理することができるようにのrecipientInfosフィールドはencryptedContentInfoフィールドの前に来ます。"
    },
    {
      "indent": 0,
      "text": "6.2 RecipientInfo Type",
      "section_title": true,
      "ja": "6.2のRecipientInfoタイプ"
    },
    {
      "indent": 3,
      "text": "Per-recipient information is represented in the type RecipientInfo. RecipientInfo has a different format for the three key management techniques that are supported: key transport, key agreement, and previously distributed symmetric key-encryption keys. Any of the three key management techniques can be used for each recipient of the same encrypted content. In all cases, the content-encryption key is transferred to one or more recipient in encrypted form.",
      "ja": "受信者ごとの情報は、タイプのRecipientInfoで表されます。キー輸送、主要な協定、および以前に分配された左右対称キー暗号化キー：のRecipientInfoはサポートされている3つの鍵管理技術のための異なるフォーマットを持っています。 3つの主要な管理手法のいずれかが同じ暗号化されたコンテンツの受信者ごとに使用することができます。すべての場合において、コンテンツ暗号化キーは暗号化された形式で1つ以上の受信者に転送されます。"
    },
    {
      "indent": 6,
      "text": "RecipientInfo ::= CHOICE {\n  ktri KeyTransRecipientInfo,\n  kari [1] KeyAgreeRecipientInfo,\n  kekri [2] KEKRecipientInfo }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "EncryptedKey ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6.2.1 KeyTransRecipientInfo Type",
      "section_title": true,
      "ja": "6.2.1 KeyTransRecipientInfoタイプ"
    },
    {
      "indent": 3,
      "text": "Per-recipient information using key transport is represented in the type KeyTransRecipientInfo. Each instance of KeyTransRecipientInfo transfers the content-encryption key to one recipient.",
      "ja": "キートランスポートを使用して、受信者ごとの情報は、タイプKeyTransRecipientInfoで表現されます。 KeyTransRecipientInfoの各インスタンスは、1つの受信者へのコンテンツ暗号化キーを転送します。"
    },
    {
      "indent": 6,
      "text": "KeyTransRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to 0 or 2\n  rid RecipientIdentifier,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  encryptedKey EncryptedKey }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "RecipientIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  subjectKeyIdentifier [0] SubjectKeyIdentifier }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type KeyTransRecipientInfo have the following meanings:",
      "ja": "タイプKeyTransRecipientInfoのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. If the RecipientIdentifier is the CHOICE issuerAndSerialNumber, then the version shall be 0. If the RecipientIdentifier is subjectKeyIdentifier, then the version shall be 2.",
      "ja": "バージョンは構文バージョン番号です。 RecipientIdentifierがCHOICE issuerAndSerialNumberある場合、バージョンがRecipientIdentifierがsubjectKeyIdentifierである場合、バージョンが2でなければならない0でなければなりません。"
    },
    {
      "indent": 6,
      "text": "rid specifies the recipient's certificate or key that was used by the sender to protect the content-encryption key. The RecipientIdentifier provides two alternatives for specifying the recipient's certificate, and thereby the recipient's public key. The recipient's certificate must contain a key transport public key. The content-encryption key is encrypted with the recipient's public key. The issuerAndSerialNumber alternative identifies the recipient's certificate by the issuer's distinguished name and the certificate serial number; the subjectKeyIdentifier identifies the recipient's certificate by the X.509 subjectKeyIdentifier extension value.",
      "ja": "RIDは、コンテンツ暗号化キーを保護するために、送信者によって使用された受信者の証明書またはキーを指定します。 RecipientIdentifierは、受信者の証明書、およびそれによって、受信者の公開鍵を指定するための2つの選択肢を提供します。受信者の証明書は、キー輸送公開鍵が含まれている必要があります。コンテンツ暗号化キーは、受信者の公開鍵で暗号化されています。 issuerAndSerialNumberの代替は、発行者の識別名と証明書のシリアル番号によって、受信者の証明書を識別します。 subjectKeyIdentifierはX.509 subjectKeyIdentifier拡張値によって、受信者の証明書を識別します。"
    },
    {
      "indent": 6,
      "text": "keyEncryptionAlgorithm identifies the key-encryption algorithm, and any associated parameters, used to encrypt the content-encryption key for the recipient. The key-encryption process is described in Section 6.4.",
      "ja": "keyEncryptionAlgorithmは、キー暗号化アルゴリズムを識別し、任意の関連するパラメータは、受信者のためのコンテンツ暗号化キーを暗号化するために使用されます。鍵暗号化プロセスはセクション6.4に記載されています。"
    },
    {
      "indent": 6,
      "text": "encryptedKey is the result of encrypting the content-encryption key for the recipient.",
      "ja": "EncryptedKeyには、受信者のためのコンテンツ暗号化キーを暗号化した結果です。"
    },
    {
      "indent": 0,
      "text": "6.2.2 KeyAgreeRecipientInfo Type",
      "section_title": true,
      "ja": "6.2.2 KeyAgreeRecipientInfoタイプ"
    },
    {
      "indent": 3,
      "text": "Recipient information using key agreement is represented in the type KeyAgreeRecipientInfo. Each instance of KeyAgreeRecipientInfo will transfer the content-encryption key to one or more recipient that uses the same key agreement algorithm and domain parameters for that algorithm.",
      "ja": "鍵合意を使用して受信者情報は、タイプKeyAgreeRecipientInfoで表現されます。 KeyAgreeRecipientInfoの各インスタンスは、そのアルゴリズムのために同じ鍵合意アルゴリズムとドメインパラメータを使用する1人のまたは複数の受信者に、コンテンツ暗号化キーを転送します。"
    },
    {
      "indent": 6,
      "text": "KeyAgreeRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to 3\n  originator [0] EXPLICIT OriginatorIdentifierOrKey,\n  ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  recipientEncryptedKeys RecipientEncryptedKeys }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "OriginatorIdentifierOrKey ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  subjectKeyIdentifier [0] SubjectKeyIdentifier,\n  originatorKey [1] OriginatorPublicKey }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "OriginatorPublicKey ::= SEQUENCE {\n  algorithm AlgorithmIdentifier,\n  publicKey BIT STRING }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey",
      "raw": true
    },
    {
      "indent": 6,
      "text": "RecipientEncryptedKey ::= SEQUENCE {\n  rid KeyAgreeRecipientIdentifier,\n  encryptedKey EncryptedKey }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "KeyAgreeRecipientIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  rKeyId [0] IMPLICIT RecipientKeyIdentifier }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "RecipientKeyIdentifier ::= SEQUENCE {\n  subjectKeyIdentifier SubjectKeyIdentifier,\n  date GeneralizedTime OPTIONAL,\n  other OtherKeyAttribute OPTIONAL }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "SubjectKeyIdentifier ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type KeyAgreeRecipientInfo have the following meanings:",
      "ja": "タイプKeyAgreeRecipientInfoのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. It shall always be 3.",
      "ja": "バージョンは構文バージョン番号です。それは、常に3でなければなりません。"
    },
    {
      "indent": 6,
      "text": "originator is a CHOICE with three alternatives specifying the sender's key agreement public key. The sender uses the corresponding private key and the recipient's public key to generate a pairwise key. The content-encryption key is encrypted in the pairwise key. The issuerAndSerialNumber alternative identifies the sender's certificate, and thereby the sender's public key, by the issuer's distinguished name and the certificate serial number. The subjectKeyIdentifier alternative identifies the sender's certificate, and thereby the sender's public key, by the X.509 subjectKeyIdentifier extension value. The originatorKey alternative includes the algorithm identifier and sender's key agreement public key. Permitting originator anonymity since the public key is not certified.",
      "ja": "発信者は送信者の主要な協定公開鍵を指定する3つの選択肢を持つCHOICEです。送信者は、鍵ペアを生成するために対応する秘密鍵と受信者の公開鍵を使用しています。コンテンツ暗号化キーは、ペアワイズ鍵で暗号化されます。 issuerAndSerialNumberの代替は、発行者の識別名と証明書のシリアル番号で、送信者の証明書、およびそれによって、送信者の公開鍵を識別します。 subjectKeyIdentifier代替はX.509 subjectKeyIdentifier拡張値によって、送信者の証明書、およびそれによって、送信者の公開鍵を識別します。 originatorKeyの代替は、アルゴリズム識別子と送信者の主要な協定公開鍵を含んでいます。公開鍵が認証されていないため、発信者の匿名性を可能にします。"
    },
    {
      "indent": 6,
      "text": "ukm is optional. With some key agreement algorithms, the sender provides a User Keying Material (UKM) to ensure that a different key is generated each time the same two parties generate a pairwise key.",
      "ja": "UKMはオプションです。いくつかの主要な協定アルゴリズムを使用すると、送信者は、別のキーが同じ2人の当事者が鍵ペアを生成するたびに生成されることを保証するために、ユーザ鍵材料（UKM）を提供します。"
    },
    {
      "indent": 6,
      "text": "keyEncryptionAlgorithm identifies the key-encryption algorithm, and any associated parameters, used to encrypt the content-encryption key in the key-encryption key. The key-encryption process is described in Section 6.4.",
      "ja": "keyEncryptionAlgorithmは、キー暗号化アルゴリズムを識別し、任意の関連するパラメータは、鍵暗号化鍵でコンテンツ暗号化キーを暗号化するために使用されます。鍵暗号化プロセスはセクション6.4に記載されています。"
    },
    {
      "indent": 6,
      "text": "recipientEncryptedKeys includes a recipient identifier and encrypted key for one or more recipients. The KeyAgreeRecipientIdentifier is a CHOICE with two alternatives specifying the recipient's certificate, and thereby the recipient's public key, that was used by the sender to generate a pairwise key-encryption key. The recipient's certificate must contain a key agreement public key. The content-encryption key is encrypted in the pairwise key-encryption key. The issuerAndSerialNumber alternative identifies the recipient's certificate by the issuer's distinguished name and the certificate serial number; the RecipientKeyIdentifier is described below. The encryptedKey is the result of encrypting the content-encryption key in the pairwise key-encryption key generated using the key agreement algorithm.",
      "ja": "recipientEncryptedKeysは、受信者識別子と1つのまたは複数の受信者用の暗号化キーが含まれています。 KeyAgreeRecipientIdentifierは、ペアワイズ鍵暗号鍵を生成するために、送信者によって使用された2つの受信者の証明書を指定する選択肢、およびそれによって、受信者の公開鍵、とCHOICEです。受信者の証明書は、鍵協定公開鍵が含まれている必要があります。コンテンツ暗号化キーは、鍵ペア暗号化キーで暗号化されています。 issuerAndSerialNumberの代替は、発行者の識別名と証明書のシリアル番号によって、受信者の証明書を識別します。 RecipientKeyIdentifierは以下の通りです。 EncryptedKeyには鍵合意アルゴリズムを使用して生成されたペアワイズキー暗号化キーのコンテンツ暗号化キーを暗号化した結果です。"
    },
    {
      "indent": 3,
      "text": "The fields of type RecipientKeyIdentifier have the following meanings:",
      "ja": "型RecipientKeyIdentifierのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "subjectKeyIdentifier identifies the recipient's certificate by the X.509 subjectKeyIdentifier extension value.",
      "ja": "subjectKeyIdentifierはX.509 subjectKeyIdentifier拡張値によって、受信者の証明書を識別します。"
    },
    {
      "indent": 6,
      "text": "date is optional. When present, the date specifies which of the recipient's previously distributed UKMs was used by the sender.",
      "ja": "日付はオプションです。存在する場合、日付は、送信者によって使用された受信者の以前に配布さUKMsのかを指定します。"
    },
    {
      "indent": 6,
      "text": "other is optional. When present, this field contains additional information used by the recipient to locate the public keying material used by the sender.",
      "ja": "他はオプションです。存在する場合、このフィールドは、送信者によって使用された公開鍵素材を見つけるために受信者によって使用される追加情報が含まれています。"
    },
    {
      "indent": 0,
      "text": "6.2.3 KEKRecipientInfo Type",
      "section_title": true,
      "ja": "6.2.3 KEKRecipientInfoタイプ"
    },
    {
      "indent": 3,
      "text": "Recipient information using previously distributed symmetric keys is represented in the type KEKRecipientInfo. Each instance of KEKRecipientInfo will transfer the content-encryption key to one or more recipients who have the previously distributed key-encryption key.",
      "ja": "以前に分散対称鍵を使用して受信者情報は、タイプKEKRecipientInfoに示されています。 KEKRecipientInfoの各インスタンスは、以前に分配されたキー暗号化キーを持っている1人または複数の受信者に、コンテンツ暗号化キーを転送します。"
    },
    {
      "indent": 6,
      "text": "KEKRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to 4\n  kekid KEKIdentifier,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  encryptedKey EncryptedKey }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "KEKIdentifier ::= SEQUENCE {\n  keyIdentifier OCTET STRING,\n  date GeneralizedTime OPTIONAL,\n  other OtherKeyAttribute OPTIONAL }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type KEKRecipientInfo have the following meanings:",
      "ja": "タイプKEKRecipientInfoのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. It shall always be 4.",
      "ja": "バージョンは構文バージョン番号です。それは常に4でなければなりません。"
    },
    {
      "indent": 6,
      "text": "kekid specifies a symmetric key-encryption key that was previously distributed to the sender and one or more recipients.",
      "ja": "kekidは、以前の送信者と1人のまたは複数の受信者に配布された対称鍵暗号化キーを指定します。"
    },
    {
      "indent": 6,
      "text": "keyEncryptionAlgorithm identifies the key-encryption algorithm, and any associated parameters, used to encrypt the content-encryption key with the key-encryption key. The key-encryption process is described in Section 6.4.",
      "ja": "keyEncryptionAlgorithmは、キー暗号化アルゴリズムを識別し、任意の関連するパラメータは、鍵暗号化鍵でコンテンツ暗号化キーを暗号化するために使用されます。鍵暗号化プロセスはセクション6.4に記載されています。"
    },
    {
      "indent": 6,
      "text": "encryptedKey is the result of encrypting the content-encryption key in the key-encryption key.",
      "ja": "EncryptedKeyには、キー暗号化キーのコンテンツ暗号化キーを暗号化した結果です。"
    },
    {
      "indent": 3,
      "text": "The fields of type KEKIdentifier have the following meanings:",
      "ja": "タイプKEKIdentifierのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "keyIdentifier identifies the key-encryption key that was previously distributed to the sender and one or more recipients.",
      "ja": "keyIdentifierは以前に、送信者と1人のまたは複数の受信者に配布されたキー暗号化キーを識別します。"
    },
    {
      "indent": 6,
      "text": "date is optional. When present, the date specifies a single key-encryption key from a set that was previously distributed.",
      "ja": "日付はオプションです。存在する場合、日付が以前に配布されたセットからの単一のキー暗号化キーを指定します。"
    },
    {
      "indent": 6,
      "text": "other is optional. When present, this field contains additional information used by the recipient to determine the key-encryption key used by the sender.",
      "ja": "他はオプションです。存在する場合、このフィールドは、送信者によって使用されるキー暗号化キーを決定するために受信者によって使用される追加的な情報が含まれています。"
    },
    {
      "indent": 0,
      "text": "6.3 Content-encryption Process",
      "section_title": true,
      "ja": "6.3コンテンツの暗号化プロセス"
    },
    {
      "indent": 3,
      "text": "The content-encryption key for the desired content-encryption algorithm is randomly generated. The data to be protected is padded as described below, then the padded data is encrypted using the content-encryption key. The encryption operation maps an arbitrary string of octets (the data) to another string of octets (the ciphertext) under control of a content-encryption key. The encrypted data is included in the envelopedData encryptedContentInfo encryptedContent OCTET STRING.",
      "ja": "所望のコンテンツ暗号化アルゴリズムのためのコンテンツ暗号化キーがランダムに生成されます。後述のように保護されるべきデータは、パディングデータは、コンテンツ暗号化キーを用いて暗号化され、パディングされます。暗号化操作は、コンテンツ暗号化鍵の制御下で、オクテットの別の文字列（暗号文）オクテット（データ）の任意の文字列をマッピングします。暗号化されたデータはEnvelopedDataのencryptedContentInfo暗号化コンテンツのオクテット文字列に含まれています。"
    },
    {
      "indent": 3,
      "text": "The input to the content-encryption process is the \"value\" of the content being enveloped. Only the value octets of the envelopedData encryptedContentInfo encryptedContent OCTET STRING are encrypted; the OCTET STRING tag and length octets are not encrypted.",
      "ja": "コンテンツ暗号化プロセスへの入力は、包まれているコンテンツの「値」です。 EnvelopedDataのencryptedContentInfo暗号化コンテンツのオクテット文字列の値だけオクテットは、暗号化されています。オクテットSTRINGタグと長さオクテットは暗号化されていません。"
    },
    {
      "indent": 3,
      "text": "Some content-encryption algorithms assume the input length is a multiple of k octets, where k is greater than one. For such algorithms, the input shall be padded at the trailing end with k-(lth mod k) octets all having value k-(lth mod k), where lth is the length of the input. In other words, the input is padded at the trailing end with one of the following strings:",
      "ja": "いくつかのコンテンツ暗号化アルゴリズムは、入力された長さkが1より大きいKオクテットの倍数であると仮定する。そのようなアルゴリズムのために、入力は、K-（LTH MOD K）と後端にパディングLTHは、入力の長さを有する全ての値K-（LTH MOD k）をオクテットなければなりません。換言すれば、入力は、以下のいずれかの文字列と後端にパディングされます。"
    },
    {
      "indent": 12,
      "text": "         01 -- if lth mod k = k-1\n      02 02 -- if lth mod k = k-2\n          .\n          .\n          .\nk k ... k k -- if lth mod k = 0",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The padding can be removed unambiguously since all input is padded, including input values that are already a multiple of the block size, and no padding string is a suffix of another. This padding method is well defined if and only if k is less than 256.",
      "ja": "すべての入力が既に、ブロックサイズの倍数である入力値を含む、パディングされるので、パディングを明確に除去することができ、パディング列は、別の接尾辞ではありません。このパディング法は、十分に定義されている場合、kは256未満である場合にのみ。"
    },
    {
      "indent": 0,
      "text": "6.4 Key-encryption Process",
      "section_title": true,
      "ja": "6.4キーの暗号化プロセス"
    },
    {
      "indent": 3,
      "text": "The input to the key-encryption process -- the value supplied to the recipient's key-encryption algorithm -- is just the \"value\" of the content-encryption key.",
      "ja": "鍵暗号化プロセスへの入力 - 受信者の鍵暗号化アルゴリズムに供給された値は - ちょうど、コンテンツ暗号化キーの「値」です。"
    },
    {
      "indent": 3,
      "text": "Any of the three key management techniques can be used for each recipient of the same encrypted content.",
      "ja": "3つの主要な管理手法のいずれかが同じ暗号化されたコンテンツの受信者ごとに使用することができます。"
    },
    {
      "indent": 0,
      "text": "7 Digested-data Content Type",
      "ja": "7消化・データのコンテンツタイプ"
    },
    {
      "indent": 3,
      "text": "The digested-data content type consists of content of any type and a message digest of the content.",
      "ja": "消化されたデータのコンテンツタイプは、任意のタイプのコンテンツおよびメッセージコンテンツのダイジェストで構成されています。"
    },
    {
      "indent": 3,
      "text": "Typically, the digested-data content type is used to provide content integrity, and the result generally becomes an input to the enveloped-data content type.",
      "ja": "典型的には、消化されたデータのコンテンツタイプは、コンテンツの完全性を提供するために使用され、その結果は、一般に、エンベロープデータ・コンテンツ・タイプへの入力となります。"
    },
    {
      "indent": 3,
      "text": "The following steps construct digested-data:",
      "ja": "次の手順では、消化されたデータを構築します："
    },
    {
      "indent": 6,
      "text": "1. A message digest is computed on the content with a message-digest algorithm.",
      "ja": "1.メッセージダイジェストがメッセージダイジェストアルゴリズムでコンテンツに計算されます。"
    },
    {
      "indent": 6,
      "text": "2. The message-digest algorithm and the message digest are collected together with the content into a DigestedData value.",
      "ja": "2.メッセージダイジェストアルゴリズムとメッセージダイジェストをDigestedData値にコンテンツとともに収集されます。"
    },
    {
      "indent": 3,
      "text": "A recipient verifies the message digest by comparing the message digest to an independently computed message digest.",
      "ja": "受信者は、メッセージがメッセージは、独立して計算されたメッセージダイジェストとダイジェストと比較することによってダイジェストを検証します。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the digested-data content type:",
      "ja": "以下のオブジェクト識別子は、消化されたデータコンテンツのタイプを識別する。"
    },
    {
      "indent": 6,
      "text": "id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The digested-data content type shall have ASN.1 type DigestedData:",
      "ja": "消化されたデータのコンテンツタイプは、ASN.1タイプDigestedDataを持たなければなりません。"
    },
    {
      "indent": 6,
      "text": "DigestedData ::= SEQUENCE {\n  version CMSVersion,\n  digestAlgorithm DigestAlgorithmIdentifier,\n  encapContentInfo EncapsulatedContentInfo,\n  digest Digest }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Digest ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type DigestedData have the following meanings:",
      "ja": "タイプDigestedDataのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. If the encapsulated content type is id-data, then the value of version shall be 0; however, if the encapsulated content type is other than id-data, then the value of version shall be 2.",
      "ja": "バージョンは構文バージョン番号です。カプセル化されたコンテンツタイプは、IDデータである場合、バージョンの値が0でなければなりません。カプセル化されたコンテンツタイプは、IDデータ以外である場合は、次に、バージョンの値が2でなければなりません。"
    },
    {
      "indent": 6,
      "text": "digestAlgorithm identifies the message digest algorithm, and any associated parameters, under which the content is digested. The message-digesting process is the same as in Section 5.4 in the case when there are no signed attributes.",
      "ja": "digestAlgorithmコンテンツが消化されるの下で、メッセージダイジェストアルゴリズム、および任意の関連するパラメータを識別する。メッセージ消化プロセスには署名された属性が存在しない場合には5.4と同じです。"
    },
    {
      "indent": 6,
      "text": "encapContentInfo is the content that is digested, as defined in section 5.2.",
      "ja": "encapContentInfoはセクション5.2で定義されるように、消化されたコンテンツです。"
    },
    {
      "indent": 6,
      "text": "digest is the result of the message-digesting process.",
      "ja": "ダイジェストは、メッセージ消化プロセスの結果です。"
    },
    {
      "indent": 3,
      "text": "The ordering of the digestAlgorithm field, the encapContentInfo field, and the digest field makes it possible to process a DigestedData value in a single pass.",
      "ja": "digestAlgorithmフィールドの順序、encapContentInfoフィールド、およびダイジェストフィールドは、単一のパスでDigestedData値を処理することが可能となります。"
    },
    {
      "indent": 0,
      "text": "8 Encrypted-data Content Type",
      "ja": "8暗号化されたデータのコンテンツタイプ"
    },
    {
      "indent": 3,
      "text": "The encrypted-data content type consists of encrypted content of any type. Unlike the enveloped-data content type, the encrypted-data content type has neither recipients nor encrypted content-encryption keys. Keys must be managed by other means.",
      "ja": "暗号化されたデータのコンテンツタイプは、任意のタイプの暗号化されたコンテンツで構成されています。包まデータのコンテンツタイプとは異なり、暗号化されたデータのコンテンツタイプはどちらも受信者も暗号化されたコンテンツ暗号化キーを持っています。キーは、他の手段によって管理されなければなりません。"
    },
    {
      "indent": 3,
      "text": "The typical application of the encrypted-data content type will be to encrypt the content of the data content type for local storage, perhaps where the encryption key is a password.",
      "ja": "暗号化されたデータのコンテンツタイプの典型的なアプリケーションは、暗号化キーがパスワードですおそらく、ローカルストレージのデータ・コンテンツ・タイプのコンテンツを暗号化することになります。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the encrypted-data content type:",
      "ja": "以下のオブジェクト識別子は、暗号化データのコンテンツタイプを識別します。"
    },
    {
      "indent": 6,
      "text": "id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The encrypted-data content type shall have ASN.1 type EncryptedData:",
      "ja": "暗号化されたデータのコンテンツタイプは、ASN.1タイプはEncryptedDataを持たなければなりません。"
    },
    {
      "indent": 6,
      "text": "EncryptedData ::= SEQUENCE {\n  version CMSVersion,\n  encryptedContentInfo EncryptedContentInfo,\n  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type EncryptedData have the following meanings:",
      "ja": "型はEncryptedDataのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. If unprotectedAttrs is present, then version shall be 2. If unprotectedAttrs is absent, then version shall be 0.",
      "ja": "バージョンは構文バージョン番号です。 unprotectedAttrsが存在する場合、バージョンがunprotectedAttrsが存在しない場合、バージョンは0でなければならない2でなければなりません。"
    },
    {
      "indent": 6,
      "text": "encryptedContentInfo is the encrypted content information, as defined in Section 6.1.",
      "ja": "encryptedContentInfoは、セクション6.1で定義されるように、暗号化されたコンテンツ情報です。"
    },
    {
      "indent": 6,
      "text": "unprotectedAttrs is a collection of attributes that are not encrypted. The field is optional. Useful attribute types are defined in Section 11.",
      "ja": "unprotectedAttrsは暗号化されていない属性のコレクションです。フィールドはオプションです。役に立つ属性タイプはセクション11で定義されています。"
    },
    {
      "indent": 0,
      "text": "9 Authenticated-data Content Type",
      "ja": "9認証データコンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The authenticated-data content type consists of content of any type, a message authentication code (MAC), and encrypted authentication keys for one or more recipients. The combination of the MAC and one encrypted authentication key for a recipient is necessary for that recipient to verify the integrity of the content. Any type of content can be integrity protected for an arbitrary number of recipients.",
      "ja": "認証されたデータのコンテンツタイプは、任意のタイプ、メッセージ認証コード（MAC）、および1つまたは複数の受信者に対して暗号化された認証キーの内容で構成されています。その受信者は、コンテンツの完全性を検証するためにMACと受信者のための1つの暗号化認証キーの組み合わせが必要です。コンテンツの任意のタイプは、整合性の受信者の任意の数のために保護することができます。"
    },
    {
      "indent": 3,
      "text": "The process by which authenticated-data is constructed involves the following steps:",
      "ja": "認証データが構築されるプロセスは、以下の工程を含みます："
    },
    {
      "indent": 6,
      "text": "1. A message-authentication key for a particular message-authentication algorithm is generated at random.",
      "ja": "1.特定のメッセージ認証アルゴリズムのためのメッセージ認証鍵はランダムに生成されます。"
    },
    {
      "indent": 6,
      "text": "2. The message-authentication key is encrypted for each recipient. The details of this encryption depend on the key management algorithm used.",
      "ja": "2.メッセージ認証キーは、受信者ごとに暗号化されています。この暗号化の詳細については、使用するキー管理アルゴリズムによって異なります。"
    },
    {
      "indent": 6,
      "text": "3. For each recipient, the encrypted message-authentication key and other recipient-specific information are collected into a RecipientInfo value, defined in Section 6.2.",
      "ja": "3.各受信者について、暗号化されたメッセージ認証キーと他の受信者に固有の情報はセクション6.2で定義されたのRecipientInfo値に集められます。"
    },
    {
      "indent": 6,
      "text": "4. Using the message-authentication key, the originator computes a MAC value on the content. If the originator is authenticating any information in addition to the content (see Section 9.2), a message digest is calculated on the content, the message digest of the content and the other information are authenticated using the message-authentication key, and the result becomes the \"MAC value.\"",
      "ja": "4.メッセージ認証キーを使用して、発信者はコンテンツのMAC値を計算します。発信者が（セクション9.2を参照）コンテンツに加えて、任意の情報を認証された場合、メッセージダイジェストは、コンテンツに基づいて計算され、コンテンツおよび他の情報のメッセージダイジェストは、メッセージ認証キーを使用して認証され、その結果はとなります「MAC値。」"
    },
    {
      "indent": 0,
      "text": "9.1 AuthenticatedData Type",
      "section_title": true,
      "ja": "9.1認証されたデータ・タイプ"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the authenticated-data content type:",
      "ja": "以下のオブジェクト識別子は、認証されたデータコンテンツのタイプを識別する。"
    },
    {
      "indent": 6,
      "text": "id-ct-authData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n    ct(1) 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The authenticated-data content type shall have ASN.1 type AuthenticatedData:",
      "ja": "認証されたデータのコンテンツタイプは、ASN.1タイプAuthenticatedDataを持たなければなりません。"
    },
    {
      "indent": 6,
      "text": "AuthenticatedData ::= SEQUENCE {\n  version CMSVersion,\n  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\n  recipientInfos RecipientInfos,\n  macAlgorithm MessageAuthenticationCodeAlgorithm,\n  digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,\n  encapContentInfo EncapsulatedContentInfo,\n  authenticatedAttributes [2] IMPLICIT AuthAttributes OPTIONAL,\n  mac MessageAuthenticationCode,\n  unauthenticatedAttributes [3] IMPLICIT UnauthAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "AuthAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 6,
      "text": "UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 6,
      "text": "MessageAuthenticationCode ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type AuthenticatedData have the following meanings:",
      "ja": "タイプAuthenticatedDataのフィールドは以下の意味があります。"
    },
    {
      "indent": 6,
      "text": "version is the syntax version number. It shall be 0.",
      "ja": "バージョンは構文バージョン番号です。これは0でなければなりません。"
    },
    {
      "indent": 6,
      "text": "originatorInfo optionally provides information about the originator. It is present only if required by the key management algorithm. It may contain certificates, attribute certificates, and CRLs, as defined in Section 6.1.",
      "ja": "originatorInfo任意に発信元の情報を提供します。鍵管理アルゴリズムによって必要とされる場合にのみ存在しています。 6.1節で定義されたように、それは、証明書、属性証明書、およびCRLを含有することができます。"
    },
    {
      "indent": 6,
      "text": "recipientInfos is a collection of per-recipient information, as defined in Section 6.1. There must be at least one element in the collection.",
      "ja": "recipientInfos 6.1節で定義されるように、受信者ごとの情報の収集です。コレクション内の少なくとも1つの要素がなければなりません。"
    },
    {
      "indent": 6,
      "text": "macAlgorithm is a message authentication code (MAC) algorithm identifier. It identifies the MAC algorithm, along with any associated parameters, used by the originator. Placement of the macAlgorithm field facilitates one-pass processing by the recipient.",
      "ja": "macAlgorithmは、メッセージ認証コード（MAC）アルゴリズム識別子です。これは、発信者によって使用される任意の関連するパラメータとともに、MACアルゴリズムを識別する。 macAlgorithmフィールドの配置は、受信者によりワンパス処理を容易にします。"
    },
    {
      "indent": 6,
      "text": "digestAlgorithm identifies the message digest algorithm, and any associated parameters, used to compute a message digest on the encapsulated content if authenticated attributes are present. The message digesting process is described in Section 9.2. Placement of the digestAlgorithm field facilitates one-pass processing by the recipient. If the digestAlgorithm field is present, then the authenticatedAttributes field must also be present.",
      "ja": "digestAlgorithmは、メッセージダイジェストアルゴリズムを識別し、認証された属性が存在する場合、メッセージを計算するために使用される任意の関連するパラメータは、カプセル化されたコンテンツにダイジェスト。メッセージ消化プロセスはセクション9.2に記載されています。 digestAlgorithmフィールドの配置は、受信者によりワンパス処理を容易にします。 digestAlgorithmフィールドが存在する場合、authenticatedAttributesフィールドも存在しなければなりません。"
    },
    {
      "indent": 6,
      "text": "encapContentInfo is the content that is authenticated, as defined in section 5.2.",
      "ja": "encapContentInfoはセクション5.2で定義されるように、認証されるコンテンツです。"
    },
    {
      "indent": 6,
      "text": "authenticatedAttributes is a collection of authenticated attributes. The authenticatedAttributes structure is optional, but it must be present if the content type of the EncapsulatedContentInfo value being authenticated is not id-data. If the authenticatedAttributes field is present, then the digestAlgorithm field must also be present. Each AuthenticatedAttribute in the SET must be DER encoded. Useful attribute types are defined in Section 11. If the authenticatedAttributes field is present, it must contain, at a minimum, the following two attributes:",
      "ja": "authenticatedAttributesは、認証された属性のコレクションです。 authenticatedAttributes構造は任意であるが、認証されEncapsulatedContentInfo値のコンテンツタイプではなく、IDデータである場合、それが存在しなければなりません。 authenticatedAttributesフィールドが存在する場合、digestAlgorithmフィールドも存在しなければなりません。セット内の各AuthenticatedAttributeはDERエンコードする必要があります。 authenticatedAttributesフィールドが存在する場合に有用な属性タイプはセクション11で定義されている、それは、最低でも、次の2つの属性が含まれている必要があります。"
    },
    {
      "indent": 9,
      "text": "A content-type attribute having as its value the content type of the EncapsulatedContentInfo value being authenticated. Section 11.1 defines the content-type attribute.",
      "ja": "その値としてEncapsulatedContentInfo値のコンテンツタイプを有するコンテンツ・タイプ属性が認証されます。 11.1は、コンテンツ・タイプの属性を定義します。"
    },
    {
      "indent": 9,
      "text": "A message-digest attribute, having as its value the message digest of the content. Section 11.2 defines the message-digest attribute.",
      "ja": "メッセージダイジェスト価値コンテンツのメッセージダイジェストとして有する、属性。 11.2節は、メッセージダイジェスト属性を定義します。"
    },
    {
      "indent": 6,
      "text": "mac is the message authentication code.",
      "ja": "MACは、メッセージ認証コードです。"
    },
    {
      "indent": 6,
      "text": "unauthenticatedAttributes is a collection of attributes that are not authenticated. The field is optional. To date, no attributes have been defined for use as unauthenticated attributes, but other useful attribute types are defined in Section 11.",
      "ja": "unauthenticatedAttributesが認証されていない属性のコレクションです。フィールドはオプションです。現在までに、何の属性が認証されていない属性として使用するために定義されていないが、他の有用な属性タイプはセクション11で定義されています。"
    },
    {
      "indent": 0,
      "text": "9.2 MAC Generation",
      "section_title": true,
      "ja": "9.2 MACジェネレーション"
    },
    {
      "indent": 3,
      "text": "The MAC calculation process computes a message authentication code (MAC) on either the message being authenticated or a message digest of message being authenticated together with the originator's authenticated attributes.",
      "ja": "MAC演算処理が認証されるメッセージまたはメッセージのダイジェストは、発信者の認証属性と共に認証されるメッセージのいずれかにメッセージ認証コード（MAC）を計算します。"
    },
    {
      "indent": 3,
      "text": "If authenticatedAttributes field is absent, the input to the MAC calculation process is the value of the encapContentInfo eContent OCTET STRING. Only the octets comprising the value of the eContent OCTET STRING are input to the MAC algorithm; the tag and the length octets are omitted. This has the advantage that the length of the content being authenticated need not be known in advance of the MAC generation process.",
      "ja": "authenticatedAttributesフィールドが存在しない場合、MAC計算処理への入力はencapContentInfo e-コンテンツオクテット文字列の値です。 e-コンテンツオクテット文字列の値を含むのみオクテットはMACアルゴリズムに入力されます。タグと長さオクテットを省略しています。これは、コンテンツの長さは、MAC生成プロセスの事前に知られている必要はなく、認証されるという利点を有します。"
    },
    {
      "indent": 3,
      "text": "If authenticatedAttributes field is present, the content-type attribute (as described in Section 11.1) and the message-digest attribute (as described in section 11.2) must be included, and the input to the MAC calculation process is the DER encoding of authenticatedAttributes. A separate encoding of the authenticatedAttributes field is performed for message digest calculation. The IMPLICIT [2] tag in the authenticatedAttributes field is not used for the DER encoding, rather an EXPLICIT SET OF tag is used. That is, the DER encoding of the SET OF tag, rather than of the IMPLICIT [2] tag, is to be included in the message digest calculation along with the length and content octets of the authenticatedAttributes value.",
      "ja": "authenticatedAttributesフィールドが存在する場合、コンテンツタイプ属性（セクション11.1に記載されているように）、メッセージダイジェスト属性（セクション11.2に記載されているように）含まれていなければならない、とMAC演算処理への入力はauthenticatedAttributesのDER符号化です。 authenticatedAttributesフィールドの別々の符号化はメッセージダイジェスト計算のために行われます。タグを明示的にSETが使用されているむしろauthenticatedAttributesフィールドにIMPLICIT [2]タグは、DER符号化に使用されません。つまり、むしろIMPLICIT [2]タグのより、タグのセットのDER符号化であるauthenticatedAttributes値の長さと内容オクテットと共に計算ダイジェストメッセージに含まれるべきです。"
    },
    {
      "indent": 3,
      "text": "The message digest calculation process computes a message digest on the content being authenticated. The initial input to the message digest calculation process is the \"value\" of the encapsulated content being authenticated. Specifically, the input is the encapContentInfo eContent OCTET STRING to which the authentication process is applied. Only the octets comprising the value of the encapContentInfo eContent OCTET STRING are input to the message digest algorithm, not the tag or the length octets. This has the advantage that the length of the content being authenticated need not be known in advance. Although the encapContentInfo eContent OCTET STRING tag and length octets are not included in the message digest calculation, they are still protected by other means. The length octets are protected by the nature of the message digest algorithm since it is computationally infeasible to find any two distinct messages of any length that have the same message digest.",
      "ja": "メッセージダイジェスト計算プロセスは、メッセージが認証されているコンテンツにダイジェストを計算します。メッセージダイジェスト計算過程への初期入力が認証されるカプセル化されたコンテンツの「値」です。具体的には、入力は、認証処理が適用されるencapContentInfo e-コンテンツオクテット文字列です。 encapContentInfo e-コンテンツオクテット文字列の値を含む唯一のオクテットは、メッセージに入力されたアルゴリズムではなく、タグまたは長さオクテットダイジェスト。これは、コンテンツの長さは、事前に知る必要はない認証されるという利点があります。 encapContentInfo e-コンテンツOCTET STRINGタグと長さオクテットは、メッセージダイジェスト計算に含まれていないが、それらはまだ他の手段によって保護されています。長さオクテットは、同じメッセージダイジェストを持つ任意の長さのうちのいずれか2つの異なるメッセージを見つけることは計算上不可能であるため、メッセージダイジェストアルゴリズムの性質によって保護されています。"
    },
    {
      "indent": 3,
      "text": "The input to the MAC calculation process includes the MAC input data, defined above, and an authentication key conveyed in a recipientInfo structure. The details of MAC calculation depend on the MAC algorithm employed (e.g., HMAC). The object identifier, along with any parameters, that specifies the MAC algorithm employed by the originator is carried in the macAlgorithm field. The MAC value generated by the originator is encoded as an OCTET STRING and carried in the mac field.",
      "ja": "MAC演算処理への入力は、上記で定義されたMACの入力データとのRecipientInfo構造に搬送認証キーを含みます。 MAC計算の詳細（例えば、HMAC）を使用MACアルゴリズムに依存します。発信元によって用いられるMACアルゴリズムを指定する任意のパラメータと共にオブジェクト識別子は、macAlgorithmフィールドで搬送されます。発信元によって生成されたMAC値は、OCTET STRINGとして符号化され、MACフィールドで搬送されます。"
    },
    {
      "indent": 0,
      "text": "9.3 MAC Verification",
      "section_title": true,
      "ja": "9.3 MAC検証"
    },
    {
      "indent": 3,
      "text": "The input to the MAC verification process includes the input data (determined based on the presence or absence of the authenticatedAttributes field, as defined in 9.2), and the authentication key conveyed in recipientInfo. The details of the MAC verification process depend on the MAC algorithm employed.",
      "ja": "MAC検証プロセスへの入力は、入力データ（9.2で定義されるように、authenticatedAttributesフィールドの有無に基づいて決定される）、及びのRecipientInfoに搬送認証キーを含みます。 MAC検証プロセスの詳細については、使用MACアルゴリズムによって異なります。"
    },
    {
      "indent": 3,
      "text": "The recipient may not rely on any MAC values or message digest values computed by the originator. The content is authenticated as described in section 9.2. If the originator includes authenticated attributes, then the content of the authenticatedAttributes is authenticated as described in section 9.2. For authentication to succeed, the message MAC value calculated by the recipient must be the same as the value of the mac field. Similarly, for authentication to succeed when the authenticatedAttributes field is present, the content message digest value calculated by the recipient must be the same as the message digest value included in the authenticatedAttributes message-digest attribute.",
      "ja": "受信者は、発信者によって計算任意のMAC値又はメッセージダイジェスト値に依存しなくてもよいです。セクション9.2で説明したようにコンテンツが認証されます。発信者が認証された属性が含まれている場合セクション9.2で説明したように、その後authenticatedAttributesのコンテンツが認証されます。認証が成功するためには、受信者によって計算されたメッセージMAC値は、MACフィールドの値と同じでなければなりません。同様に、authenticatedAttributesフィールドが存在する場合に成功する認証のために、受信者によって算出コンテンツのメッセージダイジェスト値がauthenticatedAttributesメッセージダイジェスト属性に含まれるメッセージダイジェスト値と同じでなければなりません。"
    },
    {
      "indent": 0,
      "text": "10 Useful Types",
      "ja": "10の有用なタイプ"
    },
    {
      "indent": 3,
      "text": "This section is divided into two parts. The first part defines algorithm identifiers, and the second part defines other useful types.",
      "ja": "このセクションでは、2つの部分に分かれています。最初の部分は、アルゴリズム識別子を定義し、第2の部分は、他の有用なタイプを定義します。"
    },
    {
      "indent": 0,
      "text": "10.1 Algorithm Identifier Types",
      "section_title": true,
      "ja": "10.1アルゴリズム識別子データ型"
    },
    {
      "indent": 3,
      "text": "All of the algorithm identifiers have the same type: AlgorithmIdentifier. The definition of AlgorithmIdentifier is imported from X.509 [X.509-88].",
      "ja": "AlgorithmIdentifier：アルゴリズム識別子のすべてが同じ型を持っています。 AlgorithmIdentifierの定義はX.509 [X.509-88]からインポートされています。"
    },
    {
      "indent": 3,
      "text": "There are many alternatives for each type of algorithm listed. For each of these five types, Section 12 lists the algorithms that must be included in a CMS implementation.",
      "ja": "記載されているアルゴリズムの種類ごとに多くの選択肢があります。これらの5つのタイプは、セクション12本のリストCMSの実装に含まれなければならないアルゴリズムのそれぞれについて。"
    },
    {
      "indent": 0,
      "text": "10.1.1 DigestAlgorithmIdentifier",
      "section_title": true,
      "ja": "10.1.1 DigestAlgorithmIdentifier"
    },
    {
      "indent": 3,
      "text": "The DigestAlgorithmIdentifier type identifies a message-digest algorithm. Examples include SHA-1, MD2, and MD5. A message-digest algorithm maps an octet string (the message) to another octet string (the message digest).",
      "ja": "DigestAlgorithmIdentifierタイプは、メッセージダイジェストアルゴリズムを識別する。例としては、SHA-1、MD2、MD5とを含みます。メッセージダイジェストアルゴリズムは、別のオクテット列（メッセージダイジェスト）をオクテット列（メッセージ）をマッピングします。"
    },
    {
      "indent": 6,
      "text": "DigestAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.1.2 SignatureAlgorithmIdentifier",
      "section_title": true,
      "ja": "10.1.2署名アルゴリズム識別子"
    },
    {
      "indent": 3,
      "text": "The SignatureAlgorithmIdentifier type identifies a signature algorithm. Examples include DSS and RSA. A signature algorithm supports signature generation and verification operations. The signature generation operation uses the message digest and the signer's private key to generate a signature value. The signature verification operation uses the message digest and the signer's public key to determine whether or not a signature value is valid. Context determines which operation is intended.",
      "ja": "SignatureAlgorithmIdentifierタイプは署名アルゴリズムを識別する。例としては、DSSとRSAが含まれます。署名アルゴリズムは、署名生成および検証動作をサポートします。署名生成操作は、署名値を生成するメッセージダイジェストと署名者の秘密鍵を使用しています。署名検証処理は、署名値が有効であるか否かを判断するメッセージダイジェストと署名者の公開鍵を使用しています。コンテキストが意図された動作を決定します。"
    },
    {
      "indent": 6,
      "text": "SignatureAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.1.3 KeyEncryptionAlgorithmIdentifier",
      "section_title": true,
      "ja": "10.1.3キーの暗号化アルゴリズム識別子"
    },
    {
      "indent": 3,
      "text": "The KeyEncryptionAlgorithmIdentifier type identifies a key-encryption algorithm used to encrypt a content-encryption key. The encryption operation maps an octet string (the key) to another octet string (the encrypted key) under control of a key-encryption key. The decryption operation is the inverse of the encryption operation. Context determines which operation is intended.",
      "ja": "KeyEncryptionAlgorithmIdentifierタイプは、コンテンツ暗号化キーを暗号化するために使用されるキー暗号化アルゴリズムを特定します。暗号化操作は、キー暗号化キーの制御下に別のオクテット文字列（暗号化キー）にオクテット文字列（キー）をマップします。復号化操作は、暗号化操作の逆です。コンテキストが意図された動作を決定します。"
    },
    {
      "indent": 3,
      "text": "The details of encryption and decryption depend on the key management algorithm used. Key transport, key agreement, and previously distributed symmetric key-encrypting keys are supported.",
      "ja": "暗号化と復号化の詳細については、使用するキー管理アルゴリズムによって異なります。主な交通機関、主要な協定、および以前に分配された左右対称キー暗号化キーがサポートされています。"
    },
    {
      "indent": 6,
      "text": "KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.1.4 ContentEncryptionAlgorithmIdentifier",
      "section_title": true,
      "ja": "10.1.4コンテンツ暗号化アルゴリズムの識別子"
    },
    {
      "indent": 3,
      "text": "The ContentEncryptionAlgorithmIdentifier type identifies a content-encryption algorithm. Examples include Triple-DES and RC2. A content-encryption algorithm supports encryption and decryption operations. The encryption operation maps an octet string (the message) to another octet string (the ciphertext) under control of a content-encryption key. The decryption operation is the inverse of the encryption operation. Context determines which operation is intended.",
      "ja": "ContentEncryptionAlgorithmIdentifierタイプは、コンテンツの暗号化アルゴリズムを特定します。例としては、トリプルDESとRC2が含まれます。コンテンツ暗号化アルゴリズムは、暗号化と復号化の操作をサポートしています。暗号化操作は、コンテンツ暗号化鍵の制御下で、他のオクテット文字列（暗号文）にオクテット文字列（メッセージ）をマップします。復号化操作は、暗号化操作の逆です。コンテキストが意図された動作を決定します。"
    },
    {
      "indent": 6,
      "text": "ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.1.5 MessageAuthenticationCodeAlgorithm",
      "section_title": true,
      "ja": "10.1.5 MessageAuthenticationCodeAlgorithm"
    },
    {
      "indent": 3,
      "text": "The MessageAuthenticationCodeAlgorithm type identifies a message authentication code (MAC) algorithm. Examples include DES-MAC and HMAC. A MAC algorithm supports generation and verification operations. The MAC generation and verification operations use the same symmetric key. Context determines which operation is intended.",
      "ja": "MessageAuthenticationCodeAlgorithmタイプは、メッセージ認証コード（MAC）アルゴリズムを識別する。例としては、DES-MACとHMACが含まれます。 MACアルゴリズムは、生成と検証操作をサポートしています。 MAC生成と検証操作は同じ対称鍵を使用しています。コンテキストが意図された動作を決定します。"
    },
    {
      "indent": 6,
      "text": "MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.2 Other Useful Types",
      "section_title": true,
      "ja": "10.2他の有用なタイプ"
    },
    {
      "indent": 3,
      "text": "This section defines types that are used other places in the document. The types are not listed in any particular order.",
      "ja": "このセクションでは、ドキュメント内の他の場所に使用されているタイプを定義します。タイプは、特定の順序で表示されていません。"
    },
    {
      "indent": 0,
      "text": "10.2.1 CertificateRevocationLists",
      "section_title": true,
      "ja": "10.2.1証明書失効リスト"
    },
    {
      "indent": 3,
      "text": "The CertificateRevocationLists type gives a set of certificate revocation lists (CRLs). It is intended that the set contain information sufficient to determine whether the certificates and attribute certificates with which the set is associated are revoked or not. However, there may be more CRLs than necessary or there may be fewer CRLs than necessary.",
      "ja": "CertificateRevocationListsタイプは、証明書失効リスト（CRL）のセットを提供します。セットはセットが関連付けられている証明書と属性証明書が失効しているか否かを判断するのに十分な情報が含まれていることが意図されています。しかし、必要以上のCRLが存在し得るか、または必要より少ないのCRLが存在してもよいです。"
    },
    {
      "indent": 3,
      "text": "The CertificateList may contain a CRL, an Authority Revocation List (ARL), a Delta Revocation List, or an Attribute Certificate Revocation List. All of these lists share a common syntax.",
      "ja": "CertificateListのは、CRL、認証局失効リスト（ARL）、デルタ失効リスト、または属性証明書失効リストが含まれていてもよいです。これらのリストのすべてが共通の構文を共有しています。"
    },
    {
      "indent": 3,
      "text": "CRLs are specified in X.509 [X.509-97], and they are profiled for use in the Internet in RFC 2459 [PROFILE].",
      "ja": "CRLはX.509 [X.509-97]で指定されており、これらはRFC 2459 [PROFILE]で、インターネットでの使用のために紹介されます。"
    },
    {
      "indent": 3,
      "text": "The definition of CertificateList is imported from X.509.",
      "ja": "CertificateListの定義はX.509から輸入されます。"
    },
    {
      "indent": 6,
      "text": "CertificateRevocationLists ::= SET OF CertificateList",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.2.2 CertificateChoices",
      "section_title": true,
      "ja": "10.2.2 CertificateChoices"
    },
    {
      "indent": 3,
      "text": "The CertificateChoices type gives either a PKCS #6 extended certificate [PKCS#6], an X.509 certificate, or an X.509 attribute certificate [X.509-97]. The PKCS #6 extended certificate is obsolete. PKCS #6 certificates are included for backward compatibility, and their use should be avoided. The Internet profile of X.509 certificates is specified in the \"Internet X.509 Public Key Infrastructure: Certificate and CRL Profile\" [PROFILE].",
      "ja": "CertificateChoicesタイプのいずれかが得られるPKCS＃6 [PKCS＃6]、X.509証明書、またはX.509属性証明書[X.509-97]証明書を拡張しました。 PKCS＃6の拡張証明書が廃止されました。 PKCS＃6証明書は、下位互換性のために含まれており、それらの使用は避けるべきです。 [PROFILE]：X.509証明書のインターネットプロファイルは、「証明書とCRLプロフィールインターネットX.509公開鍵インフラストラクチャ」に指定されています。"
    },
    {
      "indent": 3,
      "text": "The definitions of Certificate and AttributeCertificate are imported from X.509.",
      "ja": "証明書とAttributeCertificateの定義はX.509から輸入されています。"
    },
    {
      "indent": 6,
      "text": "CertificateChoices ::= CHOICE {\n   certificate Certificate,                 -- See X.509\n   extendedCertificate [0] IMPLICIT ExtendedCertificate,\n                                            -- Obsolete\n   attrCert [1] IMPLICIT AttributeCertificate }\n                                            -- See X.509 and X9.57",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.2.3 CertificateSet",
      "section_title": true,
      "ja": "10.2.3証明書群"
    },
    {
      "indent": 3,
      "text": "The CertificateSet type provides a set of certificates. It is intended that the set be sufficient to contain chains from a recognized \"root\" or \"top-level certification authority\" to all of the sender certificates with which the set is associated. However, there may be more certificates than necessary, or there may be fewer than necessary.",
      "ja": "証明書群タイプは、証明書のセットを提供します。セットはセットが関連付けられている送信者の証明書のすべてに認められ、「ルート」または「トップレベルの認証局」からチェーンを収容するのに十分であることが意図されています。しかし、必要以上の証明書があるかもしれない、あるいは必要に応じてより少ないがあるかもしれません。"
    },
    {
      "indent": 3,
      "text": "The precise meaning of a \"chain\" is outside the scope of this document. Some applications may impose upper limits on the length of a chain; others may enforce certain relationships between the subjects and issuers of certificates within a chain.",
      "ja": "「チェーン」の正確な意味は、この文書の範囲外です。一部のアプリケーションでは、鎖の長さに上限を課すことができます。他のものは、チェーン内の証明書のサブジェクトと発行者との間の特定の関係を強制することができます。"
    },
    {
      "indent": 6,
      "text": "CertificateSet ::= SET OF CertificateChoices",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.2.4 IssuerAndSerialNumber",
      "section_title": true,
      "ja": "10.2.4 IssuerAndSerialNumber"
    },
    {
      "indent": 3,
      "text": "The IssuerAndSerialNumber type identifies a certificate, and thereby an entity and a public key, by the distinguished name of the certificate issuer and an issuer-specific certificate serial number.",
      "ja": "IssuerAndSerialNumberタイプは、証明書発行者および発行者固有の証明書のシリアル番号の識別名によって、証明書、およびそれによってエンティティ及び公開鍵を識別する。"
    },
    {
      "indent": 3,
      "text": "The definition of Name is imported from X.501 [X.501-88], and the definition of CertificateSerialNumber is imported from X.509 [X.509-97].",
      "ja": "名前の定義は、[X.501-88] X.501からインポートされ、そしてCertificateSerialNumberの定義はX.509 [X.509-97]からインポートされています。"
    },
    {
      "indent": 6,
      "text": "IssuerAndSerialNumber ::= SEQUENCE {\n  issuer Name,\n  serialNumber CertificateSerialNumber }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "CertificateSerialNumber ::= INTEGER",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.2.5 CMSVersion",
      "section_title": true,
      "ja": "10.2.5 CMSVersion"
    },
    {
      "indent": 3,
      "text": "The Version type gives a syntax version number, for compatibility with future revisions of this document.",
      "ja": "バージョンの種類は、このドキュメントの今後の改正との互換性のため、構文バージョン番号を与えます。"
    },
    {
      "indent": 6,
      "text": "CMSVersion ::= INTEGER  { v0(0), v1(1), v2(2), v3(3), v4(4) }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.2.6 UserKeyingMaterial",
      "section_title": true,
      "ja": "10.2.6 UserKeyingMaterial"
    },
    {
      "indent": 3,
      "text": "The UserKeyingMaterial type gives a syntax for user keying material (UKM). Some key agreement algorithms require UKMs to ensure that a different key is generated each time the same two parties generate a pairwise key. The sender provides a UKM for use with a specific key agreement algorithm.",
      "ja": "UserKeyingMaterialタイプは、ユーザーの鍵材料（UKM）の構文を示します。いくつかの鍵合意アルゴリズムが異なるキーが同じ2人の当事者が鍵ペアを生成するたびに生成されることを保証するためにUKMsが必要です。送信者は、特定のキー合意アルゴリズムで使用するためのUKMを提供します。"
    },
    {
      "indent": 6,
      "text": "UserKeyingMaterial ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "10.2.7 OtherKeyAttribute",
      "section_title": true,
      "ja": "10.2.7 OtherKeyAttribute"
    },
    {
      "indent": 3,
      "text": "The OtherKeyAttribute type gives a syntax for the inclusion of other key attributes that permit the recipient to select the key used by the sender. The attribute object identifier must be registered along with the syntax of the attribute itself. Use of this structure should be avoided since it may impede interoperability.",
      "ja": "OtherKeyAttributeタイプは、送信者が使用するキーを選択するために、受信者を許可し、他のキー属性を含めるための構文を示します。属性オブジェクト識別子は、属性自体の構文と一緒に登録する必要があります。それは相互運用性を妨げる可能性があるため、この構造の使用は避けるべきです。"
    },
    {
      "indent": 6,
      "text": "OtherKeyAttribute ::= SEQUENCE {\n  keyAttrId OBJECT IDENTIFIER,\n  keyAttr ANY DEFINED BY keyAttrId OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "11 Useful Attributes",
      "ja": "11の便利な属性"
    },
    {
      "indent": 3,
      "text": "This section defines attributes that may be used with signed-data, enveloped-data, encrypted-data, or authenticated-data. The syntax of Attribute is compatible with X.501 [X.501-88] and RFC 2459 [PROFILE]. Some of the attributes defined in this section were originally defined in PKCS #9 [PKCS#9], others were not previously defined. The attributes are not listed in any particular order.",
      "ja": "このセクションでは、署名されたデータ、エンベロープデータ、暗号化データ、または認証されたデータと共に使用することができる属性を定義します。属性の構文は、X.501 [X.501-88]およびRFC 2459 [PROFILE]と互換性があります。このセクションで定義された属性の一部はもともとPKCS＃9で定義された[PKCS＃9]、他の人が以前に定義されていませんでした。属性は、特定の順序で表示されていません。"
    },
    {
      "indent": 3,
      "text": "Additional attributes are defined in many places, notably the S/MIME Version 3 Message Specification [MSG] and the Enhanced Security Services for S/MIME [ESS], which also include recommendations on the placement of these attributes.",
      "ja": "追加の属性は、多くの場所で定義されており、特にS / MIMEバージョン3メッセージ仕様[MSG]とS / MIMEのためのセキュリティ強化サービス[ESS]は、また、これらの属性の配置に関する推奨事項が含まれています。"
    },
    {
      "indent": 0,
      "text": "11.1 Content Type",
      "section_title": true,
      "ja": "11.1コンテンツの種類"
    },
    {
      "indent": 3,
      "text": "The content-type attribute type specifies the content type of the ContentInfo value being signed in signed-data. The content-type attribute type is required if there are any authenticated attributes present.",
      "ja": "コンテンツタイプ属性タイプは署名されたデータに署名されるContentInfo価値のコンテンツタイプを指定します。存在する任意の認証された属性が存在する場合、コンテンツタイプの属性タイプが必要です。"
    },
    {
      "indent": 3,
      "text": "The content-type attribute must be a signed attribute or an authenticated attribute; it cannot be an unsigned attribute, an unauthenticated attribute, or an unprotectedAttribute.",
      "ja": "コンテンツ・タイプの属性が署名している属性または認証された属性でなければなりません。それは未署名の属性、認証されていない属性、またはunprotectedAttributeすることはできません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the content-type attribute:",
      "ja": "以下のオブジェクト識別子は、コンテンツ・タイプの属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Content-type attribute values have ASN.1 type ContentType:",
      "ja": "コンテンツ・タイプの属性値はASN.1タイプContentTypeをを持っています："
    },
    {
      "indent": 6,
      "text": "ContentType ::= OBJECT IDENTIFIER",
      "raw": true
    },
    {
      "indent": 3,
      "text": "A content-type attribute must have a single attribute value, even though the syntax is defined as a SET OF AttributeValue. There must not be zero or multiple instances of AttributeValue present.",
      "ja": "コンテンツ・タイプの属性は、構文はAttributeValueの集合として定義されていても、単一の属性値を持っている必要があります。 AttributeValueの存在のゼロか複数のインスタンスがあってはなりません。"
    },
    {
      "indent": 3,
      "text": "The SignedAttributes and AuthAttributes syntaxes are each defined as a SET OF Attributes. The SignedAttributes in a signerInfo must not include multiple instances of the content-type attribute. Similarly, the AuthAttributes in an AuthenticatedData must not include multiple instances of the content-type attribute.",
      "ja": "signedAttributesのとAuthAttributes構文は、各属性の集合として定義されます。 SignerInfoでsignedAttributesのは、コンテンツ-type属性の複数のインスタンスを含めることはできません。同様に、AuthenticatedDataでAuthAttributesは、コンテンツタイプ属性の複数のインスタンスを含んではなりません。"
    },
    {
      "indent": 0,
      "text": "11.2 Message Digest",
      "section_title": true,
      "ja": "11.2メッセージダイジェスト"
    },
    {
      "indent": 3,
      "text": "The message-digest attribute type specifies the message digest of the encapContentInfo eContent OCTET STRING being signed in signed-data (see section 5.4) or authenticated in authenticated-data (see section 9.2). For signed-data, the message digest is computed using the signer's message digest algorithm. For authenticated-data, the message digest is computed using the originator's message digest algorithm.",
      "ja": "メッセージダイジェスト属性タイプはencapContentInfo e-コンテンツOCTET STRINGのダイジェストが認証データに署名されたデータ（セクション5.4を参照）に署名または認証されるメッセージを指定する（セクション9.2を参照）。署名されたデータのために、メッセージダイジェストは、署名者のメッセージダイジェストアルゴリズムを使用して計算されます。認証データのために、メッセージダイジェストは、発信者のメッセージダイジェストアルゴリズムを使用して計算されます。"
    },
    {
      "indent": 3,
      "text": "Within signed-data, the message-digest signed attribute type is required if there are any attributes present. Within authenticated-data, the message-digest authenticated attribute type is required if there are any attributes present.",
      "ja": "任意の属性が存在する場合署名されたデータ内で、メッセージダイジェスト署名された属性タイプが必要です。任意の属性が存在する場合、認証データ内で、メッセージダイジェスト認証属性タイプが必要です。"
    },
    {
      "indent": 3,
      "text": "The message-digest attribute must be a signed attribute or an authenticated attribute; it cannot be an unsigned attribute or an unauthenticated attribute.",
      "ja": "メッセージダイジェスト属性は、署名された属性または認証属性でなければなりません。それは未署名の属性または認証されていない属性にすることはできません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the message-digest attribute:",
      "ja": "以下のオブジェクト識別子は、メッセージダイジェスト属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 4 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Message-digest attribute values have ASN.1 type MessageDigest:",
      "ja": "メッセージダイジェスト属性値はASN.1タイプのMessageDigestを持っています："
    },
    {
      "indent": 6,
      "text": "MessageDigest ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 3,
      "text": "A message-digest attribute must have a single attribute value, even though the syntax is defined as a SET OF AttributeValue. There must not be zero or multiple instances of AttributeValue present.",
      "ja": "メッセージダイジェスト属性は、構文はAttributeValueの集合として定義されていても、単一の属性値を持っている必要があります。 AttributeValueの存在のゼロか複数のインスタンスがあってはなりません。"
    },
    {
      "indent": 3,
      "text": "The SignedAttributes syntax is defined as a SET OF Attributes. The SignedAttributes in a signerInfo must not include multiple instances of the message-digest attribute.",
      "ja": "signedAttributesの構文は、属性の集合として定義されます。 SignerInfoでsignedAttributesのはメッセージダイジェスト属性のインスタンスを複数含めることはできません。"
    },
    {
      "indent": 0,
      "text": "11.3 Signing Time",
      "section_title": true,
      "ja": "11.3署名時刻"
    },
    {
      "indent": 3,
      "text": "The signing-time attribute type specifies the time at which the signer (purportedly) performed the signing process. The signing-time attribute type is intended for use in signed-data.",
      "ja": "署名時間属性タイプは、（うわさによれば）署名者が署名プロセスを実行する時間を指定します。署名時の属性タイプは署名データでの使用を目的としています。"
    },
    {
      "indent": 3,
      "text": "The signing-time attribute may be a signed attribute; it cannot be an unsigned attribute, an authenticated attribute, or an unauthenticated attribute.",
      "ja": "署名時間属性は、署名された属性であってもよいです。それは未署名の属性、認証された属性、または認証されていない属性にすることはできません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the signing-time attribute:",
      "ja": "以下のオブジェクト識別子は署名時の属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Signing-time attribute values have ASN.1 type SigningTime:",
      "ja": "署名時の属性値はASN.1タイプSigningTimeがあります。"
    },
    {
      "indent": 6,
      "text": "SigningTime ::= Time",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Time ::= CHOICE {\n  utcTime          UTCTime,\n  generalizedTime  GeneralizedTime }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Note: The definition of Time matches the one specified in the 1997 version of X.509 [X.509-97].",
      "ja": "注意：時間の定義は、X.509 [X.509-97]の1997年バージョンで指定されたものと一致しました。"
    },
    {
      "indent": 3,
      "text": "Dates between 1 January 1950 and 31 December 2049 (inclusive) must be encoded as UTCTime. Any dates with year values before 1950 or after 2049 must be encoded as GeneralizedTime.",
      "ja": "1950年1月と2049年12月31日（含む）1間の日付はUTC時刻としてエンコードする必要があります。 1950年の前または後の2049年の値を持つ任意の日付はGeneralizedTimeとしてエンコードする必要があります。"
    },
    {
      "indent": 3,
      "text": "UTCTime values must be expressed in Greenwich Mean Time (Zulu) and must include seconds (i.e., times are YYMMDDHHMMSSZ), even where the number of seconds is zero. Midnight (GMT) must be represented as \"YYMMDD000000Z\". Century information is implicit, and the century must be determined as follows:",
      "ja": "UTC時刻値は、グリニッジ標準時（ズールー）で発現されなければならない秒数がゼロである場合でも、秒（すなわち、倍YYMMDDHHMMSSZいる）を含める必要があります。ミッドナイト（GMT）は、「YYMMDD000000Z」として表現されなければなりません。世紀情報は暗黙的であり、次のように世紀を決定しなければなりません。"
    },
    {
      "indent": 6,
      "text": "Where YY is greater than or equal to 50, the year shall be interpreted as 19YY; and",
      "ja": "YYが50以上である場合、年は19YYとして解釈されなければなりません。そして"
    },
    {
      "indent": 6,
      "text": "Where YY is less than 50, the year shall be interpreted as 20YY.",
      "ja": "YYが50未満である場合は、年は20YYとして解釈されなければなりません。"
    },
    {
      "indent": 3,
      "text": "GeneralizedTime values shall be expressed in Greenwich Mean Time (Zulu) and must include seconds (i.e., times are YYYYMMDDHHMMSSZ), even where the number of seconds is zero. GeneralizedTime values must not include fractional seconds.",
      "ja": "GeneralizedTimeの値は、グリニッジ標準時（ズールー）で発現されるものとした秒数がゼロである場合でも、秒（すなわち、倍YYYYMMDDHHMMSSZいる）を含める必要があります。 GeneralizedTimeの値は、小数点以下の秒を含めることはできません。"
    },
    {
      "indent": 3,
      "text": "A signing-time attribute must have a single attribute value, even though the syntax is defined as a SET OF AttributeValue. There must not be zero or multiple instances of AttributeValue present.",
      "ja": "署名時の属性は、構文はAttributeValueの集合として定義されていても、単一の属性値を持っている必要があります。 AttributeValueの存在のゼロか複数のインスタンスがあってはなりません。"
    },
    {
      "indent": 3,
      "text": "The SignedAttributes syntax is defined as a SET OF Attributes. The SignedAttributes in a signerInfo must not include multiple instances of the signing-time attribute.",
      "ja": "signedAttributesの構文は、属性の集合として定義されます。 SignerInfoでsignedAttributesのは、署名時刻属性の複数のインスタンスを含めることはできません。"
    },
    {
      "indent": 3,
      "text": "No requirement is imposed concerning the correctness of the signing time, and acceptance of a purported signing time is a matter of a recipient's discretion. It is expected, however, that some signers, such as time-stamp servers, will be trusted implicitly.",
      "ja": "要件は、署名時間の正確性に関して課されていない、と主張署名時間の受け入れは、受信者の裁量の問題でありませ。このようなタイムスタンプサーバなどのいくつかの署名者は、暗黙的に信頼されることが期待されています。"
    },
    {
      "indent": 0,
      "text": "11.4 Countersignature",
      "section_title": true,
      "ja": "11.4副署"
    },
    {
      "indent": 3,
      "text": "The countersignature attribute type specifies one or more signatures on the contents octets of the DER encoding of the signatureValue field of a SignerInfo value in signed-data. Thus, the countersignature attribute type countersigns (signs in serial) another signature.",
      "ja": "副署属性タイプは、署名されたデータ内のSignerInfo値のsignatureValueフィールドのDER符号化の内容オクテット上の1人のまたは複数の署名を指定します。したがって、副署は、別の署名（シリアルで標識）型副署属性。"
    },
    {
      "indent": 3,
      "text": "The countersignature attribute must be an unsigned attribute; it cannot be a signed attribute, an authenticated attribute, or an unauthenticated attribute.",
      "ja": "副署属性は未署名の属性でなければなりません。それが署名している属性、認証された属性、または認証されていない属性にすることはできません。"
    },
    {
      "indent": 3,
      "text": "The following object identifier identifies the countersignature attribute:",
      "ja": "以下のオブジェクト識別子は副署属性を識別します。"
    },
    {
      "indent": 6,
      "text": "id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 6 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Countersignature attribute values have ASN.1 type Countersignature:",
      "ja": "副署属性値はASN.1タイプの副署があります。"
    },
    {
      "indent": 6,
      "text": "Countersignature ::= SignerInfo",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Countersignature values have the same meaning as SignerInfo values for ordinary signatures, except that:",
      "ja": "副署値はことを除いて、通常の署名のためのSignerInfo値と同じ意味を持ちます。"
    },
    {
      "indent": 6,
      "text": "1. The signedAttributes field must contain a message-digest attribute if it contains any other attributes, but need not contain a content-type attribute, as there is no content type for countersignatures.",
      "ja": "1. signedAttributesのフィールドは、それが他の属性が含まれている場合はメッセージダイジェスト属性が含まれている必要がありますが、countersignaturesのためのコンテンツタイプが存在しないとして、コンテンツ・タイプ属性を含む必要はありません。"
    },
    {
      "indent": 6,
      "text": "2. The input to the message-digesting process is the contents octets of the DER encoding of the signatureValue field of the SignerInfo value with which the attribute is associated.",
      "ja": "2.メッセージ消化プロセスへの入力は、属性が関連付けられているのSignerInfo値のsignatureValueフィールドのDER符号化の内容オクテットです。"
    },
    {
      "indent": 3,
      "text": "A countersignature attribute can have multiple attribute values. The syntax is defined as a SET OF AttributeValue, and there must be one or more instances of AttributeValue present.",
      "ja": "副署属性は複数の属性値を持つことができます。構文はAttributeValueのセットとして定義され、AttributeValueの存在の1つ以上のインスタンスが存在しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The UnsignedAttributes syntax is defined as a SET OF Attributes. The UnsignedAttributes in a signerInfo may include multiple instances of the countersignature attribute.",
      "ja": "UnsignedAttributes構文は属性の集合として定義されます。 SignerInfoでUnsignedAttributesは副署属性の複数のインスタンスを含むことができます。"
    },
    {
      "indent": 3,
      "text": "A countersignature, since it has type SignerInfo, can itself contain a countersignature attribute. Thus it is possible to construct arbitrarily long series of countersignatures.",
      "ja": "それ自体は副署属性を含めることができます、のSignerInfoを入力しているので副署、。したがって、countersignaturesの任意の長いシリーズを構築することが可能です。"
    },
    {
      "indent": 0,
      "text": "12 Supported Algorithms",
      "ja": "12個のサポートされるアルゴリズム"
    },
    {
      "indent": 3,
      "text": "This section lists the algorithms that must be implemented. Additional algorithms that should be implemented are also included.",
      "ja": "このセクションでは、実装しなければならないアルゴリズムを示します。実装されるべきさらなるアルゴリズムも含まれています。"
    },
    {
      "indent": 0,
      "text": "12.1 Digest Algorithms",
      "section_title": true,
      "ja": "12.1ダイジェストアルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations must include SHA-1. CMS implementations should include MD5.",
      "ja": "CMS実装はSHA-1を含める必要があります。 CMS実装はMD5を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Digest algorithm identifiers are located in the SignedData digestAlgorithms field, the SignerInfo digestAlgorithm field, the DigestedData digestAlgorithm field, and the AuthenticatedData digestAlgorithm field.",
      "ja": "ダイジェストアルゴリズム識別子はSignedDataのdigestAlgorithmsフィールド、のSignerInfo digestAlgorithmフィールド、DigestedData digestAlgorithmフィールド、およびAuthenticatedData digestAlgorithmフィールドに位置しています。"
    },
    {
      "indent": 3,
      "text": "Digest values are located in the DigestedData digest field, and digest values are located in the Message Digest authenticated attribute. In addition, digest values are input to signature algorithms.",
      "ja": "ダイジェスト値がDigestedDataダイジェストフィールドに位置しており、ダイジェスト値がメッセージダイジェスト認証された属性に位置しています。また、ダイジェスト値が署名アルゴリズムに入力されます。"
    },
    {
      "indent": 0,
      "text": "12.1.1 SHA-1",
      "section_title": true,
      "ja": "１２。１。１ しゃー１"
    },
    {
      "indent": 3,
      "text": "The SHA-1 digest algorithm is defined in FIPS Pub 180-1 [SHA1]. The algorithm identifier for SHA-1 is:",
      "ja": "SHA1ダイジェストアルゴリズムは、FIPSパブ180-1 [SHA1]で定義されています。 SHA-1アルゴリズム識別子です。"
    },
    {
      "indent": 6,
      "text": "sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    oiw(14) secsig(3) algorithm(2) 26 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field is optional. If present, the parameters field must contain an ASN.1 NULL. Implementations should accept SHA-1 AlgorithmIdentifiers with absent parameters as well as NULL parameters. Implementations should generate SHA-1 AlgorithmIdentifiers with NULL parameters.",
      "ja": "AlgorithmIdentifierパラメータフィールドはオプションです。存在する場合、パラメータフィールドは、ASN.1のNULLが含まれている必要があります。実装は存在しないパラメータならびにNULLパラメータを持つSHA-1 AlgorithmIdentifiersを受け入れるべきです。実装はNULLパラメータを持つSHA-1 AlgorithmIdentifiersを生成する必要があります。"
    },
    {
      "indent": 0,
      "text": "12.1.2 MD5",
      "section_title": true,
      "ja": "12.1.2 MD5"
    },
    {
      "indent": 3,
      "text": "The MD5 digest algorithm is defined in RFC 1321 [MD5]. The algorithm identifier for MD5 is:",
      "ja": "MD5ダイジェストアルゴリズムは[MD5] RFC 1321で定義されています。 MD5のためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) digestAlgorithm(2) 5 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field must be present, and the parameters field must contain NULL. Implementations may accept the MD5 AlgorithmIdentifiers with absent parameters as well as NULL parameters.",
      "ja": "AlgorithmIdentifierパラメタ分野は存在していなければならない、とパラメータフィールドはNULLが含まれている必要があります。実装は存在しないパラメータならびにNULLパラメータでMD5 AlgorithmIdentifiersを受け入れることができます。"
    },
    {
      "indent": 0,
      "text": "12.2 Signature Algorithms",
      "section_title": true,
      "ja": "12.2署名アルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations must include DSA. CMS implementations may include RSA.",
      "ja": "CMSの実装は、DSAを含める必要があります。 CMS実装はRSAを含むことができます。"
    },
    {
      "indent": 3,
      "text": "Signature algorithm identifiers are located in the SignerInfo signatureAlgorithm field. Also, signature algorithm identifiers are located in the SignerInfo signatureAlgorithm field of countersignature attributes.",
      "ja": "署名アルゴリズム識別子はのSignerInfoのsignatureAlgorithm分野に位置しています。また、署名アルゴリズム識別子は副署属性のSignerInfoののsignatureAlgorithm分野に位置しています。"
    },
    {
      "indent": 3,
      "text": "Signature values are located in the SignerInfo signature field. Also, signature values are located in the SignerInfo signature field of countersignature attributes.",
      "ja": "署名値は、のSignerInfo署名フィールドに配置されます。また、署名値は副署属性のSignerInfoの署名フィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "12.2.1 DSA",
      "section_title": true,
      "ja": "12.2.1 DSA"
    },
    {
      "indent": 3,
      "text": "The DSA signature algorithm is defined in FIPS Pub 186 [DSS]. DSA is always used with the SHA-1 message digest algorithm. The algorithm identifier for DSA is:",
      "ja": "DSA署名アルゴリズムは、FIPSパブ186 [DSS]で定義されています。 DSAは常にSHA-1メッセージダイジェストアルゴリズムで使用されています。 DSAのためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)\n    us(840) x9-57 (10040) x9cm(4) 3 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field must not be present.",
      "ja": "AlgorithmIdentifierパラメタ分野は存在してはなりません。"
    },
    {
      "indent": 0,
      "text": "12.2.2 RSA",
      "section_title": true,
      "ja": "12.2.2 RSA"
    },
    {
      "indent": 3,
      "text": "The RSA signature algorithm is defined in RFC 2347 [NEWPKCS#1]. RFC 2347 specifies the use of the RSA signature algorithm with the SHA-1 and MD5 message digest algorithms. The algorithm identifier for RSA is:",
      "ja": "RSA署名アルゴリズムは、RFC 2347で定義されている[NEWPKCS＃1]。 RFC 2347は、SHA-1およびMD5メッセージダイジェストアルゴリズムとRSA署名アルゴリズムの使用を指定します。 RSAのためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "12.3 Key Management Algorithms",
      "section_title": true,
      "ja": "12.3キー管理アルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS accommodates three general key management techniques: key agreement, key transport, and previously distributed symmetric key-encryption keys.",
      "ja": "鍵合意、キー輸送、および以前に分配された左右対称キー暗号化キー：CMSは、3つの一般的な鍵管理技術を収納します。"
    },
    {
      "indent": 0,
      "text": "12.3.1 Key Agreement Algorithms",
      "section_title": true,
      "ja": "12.3.1鍵合意アルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations must include key agreement using X9.42 Ephemeral-Static Diffie-Hellman.",
      "ja": "CMS実装はX9.42エフェメラル-静的ディフィー・ヘルマンを使用して、キー合意を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Any symmetric encryption algorithm that a CMS implementation includes as a content-encryption algorithm must also be included as a key- encryption algorithm. CMS implementations must include key agreement of Triple-DES pairwise key-encryption keys and Triple-DES wrapping of Triple-DES content-encryption keys. CMS implementations should include key agreement of RC2 pairwise key-encryption keys and RC2 wrapping of RC2 content-encryption keys. The key wrap algorithm for Triple-DES and RC2 is described in section 12.3.3.",
      "ja": "CMSの実装では、コンテンツ暗号化アルゴリズムとして含む任意の対称暗号化アルゴリズムは、キー - 暗号化アルゴリズムとして含まれている必要があります。 CMSの実装は、キー暗号化キーとTriple-DESのコンテンツ暗号化キーのトリプルDESのラッピングペアごとのトリプルDESのキー合意を含める必要があります。 CMS実装はRC2鍵ペア暗号化鍵とRC2コンテンツ暗号化キーのRC2のラッピングのキー合意を含める必要があります。トリプルDESとRC2のためのキーラップアルゴリズムは、セクション12.3.3で説明されています。"
    },
    {
      "indent": 3,
      "text": "A CMS implementation may support mixed key-encryption and content-encryption algorithms. For example, a 128-bit RC2 content-encryption key may be wrapped with 168-bit Triple-DES key-encryption key. Similarly, a 40-bit RC2 content-encryption key may be wrapped with 128-bit RC2 key-encryption key.",
      "ja": "CMSの実装では、混合キー暗号化とコンテンツの暗号化アルゴリズムをサポートすることができます。例えば、128ビットRC2コンテンツ暗号化キーは168ビットトリプルDES鍵暗号化鍵でラップされてもよいです。同様に、40ビットRC2コンテンツ暗号化キーは、128ビットRC2鍵暗号化鍵でラップされてもよいです。"
    },
    {
      "indent": 3,
      "text": "For key agreement of RC2 key-encryption keys, 128 bits must be generated as input to the key expansion process used to compute the RC2 effective key [RC2].",
      "ja": "RC2鍵暗号鍵の鍵合意のために、128ビットRC2有効なキー[RC2]を計算するために使用される鍵拡張プロセスへの入力として生成しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Key agreement algorithm identifiers are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm fields.",
      "ja": "キー合意アルゴリズム識別子はEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "Key wrap algorithm identifiers are located in the KeyWrapAlgorithm parameters within the EnvelopedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm fields.",
      "ja": "キーラップアルゴリズム識別子はEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmフィールド内KeyWrapAlgorithmパラメータに位置しています。"
    },
    {
      "indent": 3,
      "text": "Wrapped content-encryption keys are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field. Wrapped message-authentication keys are located in the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field.",
      "ja": "ラップされたコンテンツの暗号化キーはEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに位置しています。ラップされたメッセージ認証キーはAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "12.3.1.1 X9.42 Ephemeral-Static Diffie-Hellman",
      "section_title": true,
      "ja": "12.3.1.1 X9.42エフェメラル-静的ディフィー・ヘルマン"
    },
    {
      "indent": 3,
      "text": "Ephemeral-Static Diffie-Hellman key agreement is defined in RFC 2631 [DH-X9.42]. When using Ephemeral-Static Diffie-Hellman, the EnvelopedData RecipientInfos KeyAgreeRecipientInfo and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo fields are used as follows:",
      "ja": "エフェメラル静的のDiffie-Hellman鍵合意は、[DH-X9.42] RFC 2631で定義されています。エフェメラル静的ディフィ - ヘルマンを使用する場合、以下のように、EnvelopedDataののrecipientInfos KeyAgreeRecipientInfoとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfoフィールドが使用されています。"
    },
    {
      "indent": 6,
      "text": "version must be 3.",
      "ja": "バージョンは3でなければなりません。"
    },
    {
      "indent": 6,
      "text": "originator must be the originatorKey alternative. The originatorKey algorithm fields must contain the dh-public-number object identifier with absent parameters. The originatorKey publicKey field must contain the sender's ephemeral public key. The dh-public-number object identifier is:",
      "ja": "発信者はoriginatorKeyの選択肢でなければなりません。 originatorKeyアルゴリズムフィールドが存在しないパラメータでDH-公開番号オブジェクト識別子を含まなければなりません。 originatorKey公開フィールドは、送信者のはかない公開鍵を含まなければなりません。 DH-公開番号オブジェクト識別子は次のとおりです。"
    },
    {
      "indent": 9,
      "text": "dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) ansi-x942(10046) number-type(2) 1 }",
      "raw": true
    },
    {
      "indent": 6,
      "text": "ukm may be absent. When present, the ukm is used to ensure that a different key-encryption key is generated when the ephemeral private key might be used more than once.",
      "ja": "UKMは存在しなくてもよいです。存在する場合、UKMは短命秘密鍵が複数回使用されるかもしれないときに別のキー暗号化キーが生成されることを保証するために使用されます。"
    },
    {
      "indent": 6,
      "text": "keyEncryptionAlgorithm must be the id-alg-ESDH algorithm identifier. The algorithm identifier parameter field for id-alg-ESDH is KeyWrapAlgorihtm, and this parameter must be present. The KeyWrapAlgorithm denotes the symmetric encryption algorithm used to encrypt the content-encryption key with the pairwise key-encryption key generated using the Ephemeral-Static Diffie-Hellman key agreement algorithm. Triple-DES and RC2 key wrap algorithms are discussed in section 12.3.3. The id-alg-ESDH algorithm identifier and parameter syntax is:",
      "ja": "keyEncryptionAlgorithmは、ID-ALG-ESDHアルゴリズム識別子でなければなりません。 ID-ALG-ESDHためのアルゴリズム識別子パラメータフィールドはKeyWrapAlgorihtmであり、このパラメータが存在しなければなりません。 KeyWrapAlgorithmはエフェメラル・スタティックのDiffie-Hellman鍵合意アルゴリズムを使用して生成されたペアワイズキーと暗号化キーを使用して、コンテンツ暗号化キーを暗号化するために使用される対称暗号化アルゴリズムを示しています。トリプルDESとRC2キーラップアルゴリズムはセクション12.3.3で説明されています。 ID-ALG-ESDHアルゴリズム識別子とパラメータ構文は次のとおりです。"
    },
    {
      "indent": 7,
      "text": "id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }",
      "raw": true
    },
    {
      "indent": 7,
      "text": "KeyWrapAlgorithm ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 6,
      "text": "recipientEncryptedKeys contains an identifier and an encrypted key for each recipient. The RecipientEncryptedKey KeyAgreeRecipientIdentifier must contain either the issuerAndSerialNumber identifying the recipient's certificate or the RecipientKeyIdentifier containing the subject key identifier from the recipient's certificate. In both cases, the recipient's certificate contains the recipient's static public key. RecipientEncryptedKey EncryptedKey must contain the content-encryption key encrypted with the Ephemeral-Static Diffie-Hellman generated pairwise key-encryption key using the algorithm specified by the KeyWrapAlgortihm.",
      "ja": "recipientEncryptedKeysは、識別子と受信者ごとに暗号化キーが含まれています。 RecipientEncryptedKey KeyAgreeRecipientIdentifierを含んでいなければならないのいずれかissuerAndSerialNumberは、受信者の証明書または受信者の証明書のサブジェクトキー識別子を含むRecipientKeyIdentifierを識別する。どちらの場合も、受信者の証明書は、受信者の静的な公開鍵が含まれています。 RecipientEncryptedKey EncryptedKeyにはエフェメラル-静的ディフィー・ヘルマンで暗号化されたコンテンツ暗号化キーが含まれているKeyWrapAlgortihmで指定されたアルゴリズムを使用した対の鍵暗号鍵を生成しなければなりません。"
    },
    {
      "indent": 0,
      "text": "12.3.2 Key Transport Algorithms",
      "section_title": true,
      "ja": "12.3.2主要交通アルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations should include key transport using RSA. RSA implementations must include key transport of Triple-DES content-encryption keys. RSA implementations should include key transport of RC2 content-encryption keys.",
      "ja": "CMS実装はRSAを使用して、キートランスポートを含める必要があります。 RSAの実装は、トリプルDESコンテンツ暗号化キーのキートランスポートを含める必要があります。 RSA実装はRC2コンテンツ暗号化キーのキートランスポートを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Key transport algorithm identifiers are located in the EnvelopedData RecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithm fields.",
      "ja": "キートランスポートアルゴリズム識別子はEnvelopedDataののrecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "Key transport encrypted content-encryption keys are located in the EnvelopedData RecipientInfos KeyTransRecipientInfo encryptedKey field. Key transport encrypted message-authentication keys are located in the AuthenticatedData RecipientInfos KeyTransRecipientInfo encryptedKey field.",
      "ja": "主な輸送暗号化されたコンテンツ暗号化キーはEnvelopedDataののrecipientInfos KeyTransRecipientInfo EncryptedKeyにフィールドに位置しています。主な輸送暗号化されたメッセージ認証キーはAuthenticatedDataのrecipientInfos KeyTransRecipientInfo EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "12.3.2.1 RSA",
      "section_title": true,
      "ja": "12.3.2.1 RSA"
    },
    {
      "indent": 3,
      "text": "The RSA key transport algorithm is the RSA encryption scheme defined in RFC 2313 [PKCS#1], block type is 02, where the message to be encrypted is the content-encryption key. The algorithm identifier for RSA is:",
      "ja": "RSA鍵トランスポートアルゴリズムは、RFC 2313で定義されているRSA暗号化方式は、[PKCS＃1]、ブロックタイプは、暗号化されるメッセージは、コンテンツ暗号化キーである場合、02です。 RSAのためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field must be present, and the parameters field must contain NULL.",
      "ja": "AlgorithmIdentifierパラメタ分野は存在していなければならない、とパラメータフィールドはNULLが含まれている必要があります。"
    },
    {
      "indent": 3,
      "text": "When using a Triple-DES content-encryption key, adjust the parity bits for each DES key comprising the Triple-DES key prior to RSA encryption.",
      "ja": "トリプルDESコンテンツ暗号化キーを使用する場合は、RSA暗号化の前にトリプルDES鍵を含む各DESキーのパリティビットを調整します。"
    },
    {
      "indent": 3,
      "text": "The use of RSA encryption, as defined in RFC 2313 [PKCS#1], to provide confidentiality has a known vulnerability concerns. The vulnerability is primarily relevant to usage in interactive applications rather than to store-and-forward environments. Further information and proposed countermeasures are discussed in the Security Considerations section of this document.",
      "ja": "機密性を提供するために、RFC 2313 [PKCS＃1]で定義されているRSA暗号化を使用することは、既知の脆弱性への懸念を持っています。この脆弱性は、対話型アプリケーションではなく、ストアアンドフォワードの環境への使用に主に関連しています。さらなる情報や提案の対策は、この文書のセキュリティについての考慮事項のセクションで説明されています。"
    },
    {
      "indent": 3,
      "text": "Note that the same encryption scheme is also defined in RFC 2437 [NEWPKCS#1]. Within RFC 2437, this scheme is called RSAES-PKCS1-v1_5.",
      "ja": "同じ暗号化方式は、また、RFC 2437で定義されていることに注意してください[NEWPKCS＃1]。 RFC 2437の中では、この方式はRSAES-PKCS1-v1_5のと呼ばれています。"
    },
    {
      "indent": 0,
      "text": "12.3.3 Symmetric Key-Encryption Key Algorithms",
      "section_title": true,
      "ja": "12.3.3対称キー暗号化キーアルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations may include symmetric key-encryption key management. Such CMS implementations must include Triple-DES key-encryption keys wrapping Triple-DES content-encryption keys, and such CMS implementations should include RC2 key-encryption keys wrapping RC2 content-encryption keys. Only 128-bit RC2 keys may be used as key-encryption keys, and they must be used with the RC2ParameterVersion parameter set to 58. A CMS implementation may support mixed key-encryption and content-encryption algorithms. For example, a 40-bit RC2 content-encryption key may be wrapped with 168-bit Triple-DES key-encryption key or with a 128-bit RC2 key-encryption key.",
      "ja": "CMSの実装は、対称鍵暗号鍵管理を含むことができます。このようなCMSの実装は、トリプルDES、コンテンツ暗号化キーを包むトリプルDESのキー暗号化キーが含まれている必要があり、そのようなCMSの実装はRC2、コンテンツ暗号化キーを包むRC2キー暗号化キーを含める必要があります。唯一の128ビットのRC2キーは、キー暗号化キーとして使用することができ、それらはCMSの実装58に設定RC2ParameterVersionパラメータと一緒に使用する必要があり、混合鍵暗号化およびコンテンツの暗号化アルゴリズムをサポートすることができます。例えば、40ビットのRC2コンテンツ暗号化キーは168ビットトリプルDES鍵暗号化キーまたは128ビットのRC2鍵暗号化鍵でラップされてもよいです。"
    },
    {
      "indent": 3,
      "text": "Key wrap algorithm identifiers are located in the EnvelopedData RecipientInfos KEKRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KEKRecipientInfo keyEncryptionAlgorithm fields.",
      "ja": "キーラップアルゴリズム識別子はEnvelopedDataののrecipientInfos KEKRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KEKRecipientInfo keyEncryptionAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "Wrapped content-encryption keys are located in the EnvelopedData RecipientInfos KEKRecipientInfo encryptedKey field. Wrapped message-authentication keys are located in the AuthenticatedData RecipientInfos KEKRecipientInfo encryptedKey field.",
      "ja": "ラップされたコンテンツの暗号化キーはEnvelopedDataののrecipientInfos KEKRecipientInfo EncryptedKeyにフィールドに位置しています。ラップされたメッセージ認証キーはAuthenticatedDataのrecipientInfos KEKRecipientInfo EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 3,
      "text": "The output of a key agreement algorithm is a key-encryption key, and this key-encryption key is used to encrypt the content-encryption key. In conjunction with key agreement algorithms, CMS implementations must include encryption of content-encryption keys with the pairwise key-encryption key generated using a key agreement algorithm. To support key agreement, key wrap algorithm identifiers are located in the KeyWrapAlgorithm parameter of the EnvelopedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm fields. Wrapped content-encryption keys are located in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field, wrapped message-authentication keys are located in the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys encryptedKey field.",
      "ja": "鍵合意アルゴリズムの出力は、キー暗号化キーであり、このキーの暗号化キーは、コンテンツ暗号化キーを暗号化するために使用されます。鍵合意アルゴリズムに関連して、CMSの実装は、鍵合意アルゴリズムを使用して生成されたペアワイズキーと暗号化キーを使用してコンテンツ暗号化キーの暗号化を含める必要があります。鍵合意をサポートするために、キーラップアルゴリズム識別子はEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmとAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithmフィールドのKeyWrapAlgorithmパラメータに位置しています。ラップされたコンテンツの暗号化キーはEnvelopedDataののrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに配置されている、包まれたメッセージ認証キーはAuthenticatedDataのrecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys EncryptedKeyにフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "12.3.3.1 Triple-DES Key Wrap",
      "section_title": true,
      "ja": "12.3.3.1トリプルDESキーラップ"
    },
    {
      "indent": 3,
      "text": "Triple-DES key encryption has the algorithm identifier:",
      "ja": "トリプルDES鍵暗号アルゴリズムの識別子があります。"
    },
    {
      "indent": 6,
      "text": "id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameter field must be NULL.",
      "ja": "AlgorithmIdentifierパラメータフィールドはNULLでなければなりません。"
    },
    {
      "indent": 3,
      "text": "The key wrap algorithm used to encrypt a Triple-DES content-encryption key with a Triple-DES key-encryption key is specified in section 12.6.",
      "ja": "トリプルDESのキー暗号化キーを使用してトリプルDESコンテンツ暗号化キーを暗号化するために使用されるキーラップアルゴリズムは、セクション12.6に指定されています。"
    },
    {
      "indent": 3,
      "text": "Out-of-band distribution of the Triple-DES key-encryption key used to encrypt the Triple-DES content-encryption key is beyond of the scope of this document.",
      "ja": "アウトオブバンドトリプルDESコンテンツ暗号化キーを暗号化するために使用されるトリプルDESのキー暗号化キーの分布は、この文書の範囲を超えています。"
    },
    {
      "indent": 0,
      "text": "12.3.3.2 RC2 Key Wrap",
      "section_title": true,
      "ja": "12.3.3.2 RC2キーラップ"
    },
    {
      "indent": 3,
      "text": "RC2 key encryption has the algorithm identifier:",
      "ja": "RC2鍵暗号アルゴリズムの識別子があります。"
    },
    {
      "indent": 6,
      "text": "id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameter field must be RC2wrapParameter:",
      "ja": "AlgorithmIdentifierパラメータフィールドはRC2wrapParameterでなければなりません。"
    },
    {
      "indent": 6,
      "text": "RC2wrapParameter ::= RC2ParameterVersion",
      "raw": true
    },
    {
      "indent": 6,
      "text": "RC2ParameterVersion ::= INTEGER",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The RC2 effective-key-bits (key size) greater than 32 and less than 256 is encoded in the RC2ParameterVersion. For the effective-key-bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120, and 58 respectively. These values are not simply the RC2 key length. Note that the value 160 must be encoded as two octets (00 A0), because the one octet (A0) encoding represents a negative number.",
      "ja": "RC2有効なキービット（キーサイズ）32より大きく256未満はRC2ParameterVersionで符号化されます。 40、64、及び128の実効キー・ビットについて、rc2ParameterVersion値は、それぞれ160、120、および58です。これらの値は、単にRC2キーの長さではありません。 1つのオクテット（A0）符号が負の数を表すための値160は、2つのオクテット（00 A0）として符号化されなければならないことに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "Only 128-bit RC2 keys may be used as key-encryption keys, and they must be used with the RC2ParameterVersion parameter set to 58.",
      "ja": "唯一の128ビットのRC2キーは、キー暗号化キーとして使用することができる、と彼らは58に設定されRC2ParameterVersionパラメータと共に使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The key wrap algorithm used to encrypt a RC2 content-encryption key with a RC2 key-encryption key is specified in section 12.6.",
      "ja": "RC2キー暗号化キーとRC2コンテンツ暗号化キーを暗号化するために使用されるキーラップアルゴリズムは、セクション12.6に指定されています。"
    },
    {
      "indent": 3,
      "text": "Out-of-band distribution of the RC2 key-encryption key used to encrypt the RC2 content-encryption key is beyond of the scope of this document.",
      "ja": "アウトオブバンドRC2コンテンツ暗号化キーを暗号化するために使用RC2キー暗号化キーの分布は、この文書の範囲を超えています。"
    },
    {
      "indent": 0,
      "text": "12.4 Content Encryption Algorithms",
      "section_title": true,
      "ja": "12.4コンテンツの暗号化アルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations must include Triple-DES in CBC mode. CMS implementations should include RC2 in CBC mode.",
      "ja": "CMSの実装はCBCモードでトリプルDESを含める必要があります。 CMS実装はCBCモードのRC2を含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Content encryption algorithms identifiers are located in the EnvelopedData EncryptedContentInfo contentEncryptionAlgorithm and the EncryptedData EncryptedContentInfo contentEncryptionAlgorithm fields.",
      "ja": "コンテンツの暗号化アルゴリズム識別子はEnvelopedDataのEncryptedContentInfo contentEncryptionAlgorithmとはEncryptedData EncryptedContentInfo contentEncryptionAlgorithmフィールドに配置されています。"
    },
    {
      "indent": 3,
      "text": "Content encryption algorithms are used to encipher the content located in the EnvelopedData EncryptedContentInfo encryptedContent field and the EncryptedData EncryptedContentInfo encryptedContent field.",
      "ja": "コンテンツの暗号化アルゴリズムは、EnvelopedDataのEncryptedContentInfo暗号化コンテンツフィールドとはEncryptedData EncryptedContentInfo暗号化コンテンツフィールドにあるコンテンツを暗号化するために使用されています。"
    },
    {
      "indent": 0,
      "text": "12.4.1 Triple-DES CBC",
      "section_title": true,
      "ja": "12.4.1トリプルDES CBC"
    },
    {
      "indent": 3,
      "text": "The Triple-DES algorithm is described in ANSI X9.52 [3DES]. The Triple-DES is composed from three sequential DES [DES] operations: encrypt, decrypt, and encrypt. Three-Key Triple-DES uses a different key for each DES operation. Two-Key Triple-DES uses one key for the two encrypt operations and different key for the decrypt operation. The same algorithm identifiers are used for Three-Key Triple-DES and Two-Key Triple-DES. The algorithm identifier for Triple-DES in Cipher Block Chaining (CBC) mode is:",
      "ja": "トリプルDESアルゴリズムは、ANSI X9.52 [3DES]に記載されています。トリプルDESは、3つの連続DES [DES]動作から構成されています、暗号解読および暗号。スリーキートリプルDESは、各DES操作のために異なるキーを使用しています。 2キートリプルDESは、二つの暗号化操作と復号化処理のために別のキーに1つのキーを使用しています。同じアルゴリズム識別子は三キートリプルDESと2キートリプルDESのために使用されています。暗号ブロック連鎖（CBC）モードでのトリプルDESアルゴリズムの識別子です。"
    },
    {
      "indent": 6,
      "text": "des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field must be present, and the parameters field must contain a CBCParameter:",
      "ja": "AlgorithmIdentifierパラメタ分野は存在していなければならない、とパラメータフィールドがCBCParameterが含まれている必要があります。"
    },
    {
      "indent": 6,
      "text": "CBCParameter ::= IV",
      "raw": true
    },
    {
      "indent": 6,
      "text": "IV ::= OCTET STRING  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 0,
      "text": "12.4.2 RC2 CBC",
      "section_title": true,
      "ja": "12.4.2 RC2 CBC"
    },
    {
      "indent": 3,
      "text": "The RC2 algorithm is described in RFC 2268 [RC2]. The algorithm identifier for RC2 in CBC mode is:",
      "ja": "RC2アルゴリズムは、RFC 2268 [RC2]に記載されています。 CBCモードのRC2のためのアルゴリズム識別子は以下のとおりです。"
    },
    {
      "indent": 6,
      "text": "rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) encryptionAlgorithm(3) 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field must be present, and the parameters field must contain a RC2CBCParameter:",
      "ja": "AlgorithmIdentifierパラメタ分野は存在していなければならない、とパラメータフィールドがRC2CBCParameterが含まれている必要があります。"
    },
    {
      "indent": 6,
      "text": "RC2CBCParameter ::= SEQUENCE {\n  rc2ParameterVersion INTEGER,\n  iv OCTET STRING  }  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The RC2 effective-key-bits (key size) greater than 32 and less than 256 is encoded in the rc2ParameterVersion. For the effective-key-bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120, and 58 respectively. These values are not simply the RC2 key length. Note that the value 160 must be encoded as two octets (00 A0), since the one octet (A0) encoding represents a negative number.",
      "ja": "RC2有効なキービット（キーサイズ）32より大きく256未満はrc2ParameterVersionで符号化されます。 40、64、及び128の実効キー・ビットについて、rc2ParameterVersion値は、それぞれ160、120、および58です。これらの値は、単にRC2キーの長さではありません。 1つのオクテット（A0）符号が負の数を表すための値160は、2つのオクテット（00 A0）として符号化されなければならないことに留意されたいです。"
    },
    {
      "indent": 0,
      "text": "12.5 Message Authentication Code Algorithms",
      "section_title": true,
      "ja": "12.5メッセージ認証コードアルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations that support authenticatedData must include HMAC with SHA-1.",
      "ja": "authenticatedDataをサポートするCMS実装はSHA-1とHMACを含める必要があります。"
    },
    {
      "indent": 3,
      "text": "MAC algorithm identifiers are located in the AuthenticatedData macAlgorithm field.",
      "ja": "MACアルゴリズム識別子はAuthenticatedData macAlgorithmフィールドに位置しています。"
    },
    {
      "indent": 3,
      "text": "MAC values are located in the AuthenticatedData mac field.",
      "ja": "MACバルブは、認証されたデータのMACフィールドに位置しています。"
    },
    {
      "indent": 0,
      "text": "12.5.1 HMAC with SHA-1",
      "section_title": true,
      "ja": "SHA-1 12.5.1 HMAC"
    },
    {
      "indent": 3,
      "text": "The HMAC with SHA-1 algorithm is described in RFC 2104 [HMAC]. The algorithm identifier for HMAC with SHA-1 is:",
      "ja": "SHA-1アルゴリズムでHMACは、RFC 2104 [HMAC]に記載されています。 SHA-1 HMACアルゴリズム識別子です。"
    },
    {
      "indent": 6,
      "text": "hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    dod(6) internet(1) security(5) mechanisms(5) 8 1 2 }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The AlgorithmIdentifier parameters field must be absent.",
      "ja": "AlgorithmIdentifierパラメタ分野は存在してはなりません。"
    },
    {
      "indent": 0,
      "text": "12.6 Triple-DES and RC2 Key Wrap Algorithms",
      "section_title": true,
      "ja": "12.6トリプルDESとRC2キーラップアルゴリズム"
    },
    {
      "indent": 3,
      "text": "CMS implementations must include encryption of a Triple-DES content-encryption key with a Triple-DES key-encryption key using the algorithm specified in Sections 12.6.2 and 12.6.3. CMS implementations should include encryption of a RC2 content-encryption key with a RC2 key-encryption key using the algorithm specified in Sections 12.6.4 and 12.6.5. Triple-DES and RC2 content-encryption keys are encrypted in Cipher Block Chaining (CBC) mode [MODES].",
      "ja": "CMSの実装はセクション12.6.2と12.6.3で指定されたアルゴリズムを使用してトリプルDESのキー暗号化キーを使用してトリプルDESコンテンツ暗号化キーの暗号化を含める必要があります。 CMSの実装はセクション12.6.4と12.6.5で指定されたアルゴリズムを使用して、RC2キー暗号化キーとRC2コンテンツ暗号化キーの暗号化を含むべきです。トリプルDESとRC2のコンテンツ暗号化キーは、暗号ブロック連鎖（CBC）モード[MODES]で暗号化されています。"
    },
    {
      "indent": 3,
      "text": "Key Transport algorithms allow for the content-encryption key to be directly encrypted; however, key agreement and symmetric key-encryption key algorithms encrypt the content-encryption key with a second symmetric encryption algorithm. This section describes how the Triple-DES or RC2 content-encryption key is formatted and encrypted.",
      "ja": "キートランスポートアルゴリズムは、直接暗号化するコンテンツ暗号化キーを可能に。しかし、主要な協定と対称鍵暗号化鍵アルゴリズムは、第2の対称暗号化アルゴリズムと、コンテンツ暗号化キーを暗号化します。このセクションでは、トリプルDESまたはRC2コンテンツ暗号化キーがフォーマットされ、暗号化されている方法を説明します。"
    },
    {
      "indent": 3,
      "text": "Key agreement algorithms generate a pairwise key-encryption key, and a key wrap algorithm is used to encrypt the content-encryption key with the pairwise key-encryption key. Similarly, a key wrap algorithm is used to encrypt the content-encryption key in a previously distributed key-encryption key.",
      "ja": "鍵合意アルゴリズムが鍵ペア暗号化キーを生成し、キーラップアルゴリズムは、鍵ペア暗号化キーと、コンテンツ暗号化キーを暗号化するために使用されます。同様に、キーラップアルゴリズムが以前に分配されたキー暗号化キーでコンテンツ暗号化キーを暗号化するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The key-encryption key is generated by the key agreement algorithm or distributed out of band. For key agreement of RC2 key-encryption keys, 128 bits must be generated as input to the key expansion process used to compute the RC2 effective key [RC2].",
      "ja": "キー暗号化キーは、キー合意アルゴリズムによって生成されるか、または帯域外で配布されています。 RC2鍵暗号鍵の鍵合意のために、128ビットRC2有効なキー[RC2]を計算するために使用される鍵拡張プロセスへの入力として生成しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The same algorithm identifier is used for both 2-key and 3-key Triple-DES. When the length of the content-encryption key to be wrapped is a 2-key Triple-DES key, a third key with the same value as the first key is created. Thus, all Triple-DES content-encryption keys are wrapped like 3-key Triple-DES keys.",
      "ja": "同じアルゴリズム識別子が2キーおよび3キートリプルDESの両方のために使用されます。コンテンツ暗号化鍵の長さは、ラップされるときに2キートリプルDES鍵、最初のキーが作成されたものと同じ値を持つ第3の鍵です。このように、すべてのトリプルDESコンテンツ暗号化キーは、3キートリプルDES鍵のように包まれています。"
    },
    {
      "indent": 0,
      "text": "12.6.1 Key Checksum",
      "section_title": true,
      "ja": "12.6.1キーチェックサム"
    },
    {
      "indent": 3,
      "text": "The CMS Checksum Algorithm is used to provide a content-encryption key integrity check value. The algorithm is:",
      "ja": "CMSチェックサムアルゴリズムは、コンテンツ暗号鍵の整合性チェック値を提供するために使用されます。アルゴリズムは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. Compute a 20 octet SHA-1 [SHA1] message digest on the content-encryption key. 2. Use the most significant (first) eight octets of the message digest value as the checksum value.",
      "ja": "1. SHA1 [SHA1]メッセージは、コンテンツ暗号鍵にダイジェスト20オクテットを計算します。 2.チェックサム値として値をメッセージダイジェストの最も重要な（最初の）8つのオクテットを使用してください。"
    },
    {
      "indent": 0,
      "text": "12.6.2 Triple-DES Key Wrap",
      "section_title": true,
      "ja": "12.6.2トリプルDESキーラップ"
    },
    {
      "indent": 3,
      "text": "The Triple-DES key wrap algorithm encrypts a Triple-DES content-encryption key with a Triple-DES key-encryption key. The Triple-DES key wrap algorithm is:",
      "ja": "トリプルDESキーラップアルゴリズムがトリプルDESのキー暗号化キーを使用してトリプルDESコンテンツ暗号化キーを暗号化します。トリプルDESキーラップアルゴリズムは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. Set odd parity for each of the DES key octets comprising the content-encryption key, call the result CEK. 2. Compute an 8 octet key checksum value on CEK as described above in Section 12.6.1, call the result ICV. 3. Let CEKICV = CEK || ICV. 4. Generate 8 octets at random, call the result IV. 5. Encrypt CEKICV in CBC mode using the key-encryption key. Use the random value generated in the previous step as the initialization vector (IV). Call the ciphertext TEMP1. 6. Let TEMP2 = IV || TEMP1. 7. Reverse the order of the octets in TEMP2. That is, the most significant (first) octet is swapped with the least significant (last) octet, and so on. Call the result TEMP3. 8. Encrypt TEMP3 in CBC mode using the key-encryption key. Use an initialization vector (IV) of 0x4adda22c79e82105. The ciphertext is 40 octets long.",
      "ja": "1.結果CEKを呼び出し、コンテンツ暗号化キーを備えたDESキーオクテットごとに、奇数パリティを設定します。 2.計算するCEKに8オクテットキーチェックサム値、セクション12.6.1に、上述したように、結果のICVを呼び出します。 3. CEKICV = CEKをしてみましょう|| ICV。 4.結果のIVを呼び出し、ランダムに8オクテットを生成します。キー暗号化キーを使用してCBCモードでの暗号化5. CEKICV。初期化ベクトル（IV）のような、前のステップで生成したランダム値を使用します。暗号文TEMP1を呼び出します。 6. TEMP2 = IVましょう|| TEMP1。 7. TEMP2のオクテットの順序を逆にします。それは最も重要な（最初の）オクテットはそうで最下位（最後）のオクテットと交換、およびされています。結果TEMP3を呼び出します。キー暗号化キーを使用してCBCモードで8暗号化TEMP3。 0x4adda22c79e82105の初期化ベクトル（IV）を使用します。暗号文は、40オクテットの長さです。"
    },
    {
      "indent": 3,
      "text": "Note: When the same content-encryption key is wrapped in different key-encryption keys, a fresh initialization vector (IV) must be generated for each invocation of the key wrap algorithm.",
      "ja": "注意：同じコンテンツ暗号化キーが異なるキー暗号化キーに包まれている場合には、新鮮な初期化ベクトル（IV）は、キーラップアルゴリズムの呼び出しごとに生成する必要があります。"
    },
    {
      "indent": 0,
      "text": "12.6.3 Triple-DES Key Unwrap",
      "section_title": true,
      "ja": "12.6.3トリプルDESキーアンラップ"
    },
    {
      "indent": 3,
      "text": "The Triple-DES key unwrap algorithm decrypts a Triple-DES content-encryption key using a Triple-DES key-encryption key. The Triple-DES key unwrap algorithm is:",
      "ja": "トリプルDESキーアンラップアルゴリズムは、トリプルDESのキー暗号化キーを使用してトリプルDESコンテンツ暗号化キーを復号化します。トリプルDESキーアンラップアルゴリズムは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. If the wrapped content-encryption key is not 40 octets, then error. 2. Decrypt the wrapped content-encryption key in CBC mode using the key-encryption key. Use an initialization vector (IV) of 0x4adda22c79e82105. Call the output TEMP3.",
      "ja": "1.包まれたコンテンツ暗号化キーは、40オクテット、エラーではない場合。 2.キー暗号化キーを使用してCBCモードで包まれたコンテンツ暗号化キーを解読。 0x4adda22c79e82105の初期化ベクトル（IV）を使用します。出力TEMP3を呼び出します。"
    },
    {
      "indent": 3,
      "text": "3. Reverse the order of the octets in TEMP3. That is, the most significant (first) octet is swapped with the least significant (last) octet, and so on. Call the result TEMP2. 4. Decompose the TEMP2 into IV and TEMP1. IV is the most significant (first) 8 octets, and TEMP1 is the least significant (last) 32 octets. 5. Decrypt TEMP1 in CBC mode using the key-encryption key. Use the IV value from the previous step as the initialization vector. Call the ciphertext CEKICV. 6. Decompose the CEKICV into CEK and ICV. CEK is the most significant (first) 24 octets, and ICV is the least significant (last) 8 octets. 7. Compute an 8 octet key checksum value on CEK as described above in Section 12.6.1. If the computed key checksum value does not match the decrypted key checksum value, ICV, then error. 8. Check for odd parity each of the DES key octets comprising CEK. If parity is incorrect, then there is an error. 9. Use CEK as the content-encryption key.",
      "ja": "3. TEMP3のオクテットの順序を逆にします。それは最も重要な（最初の）オクテットはそうで最下位（最後）のオクテットと交換、およびされています。結果TEMP2を呼び出します。 4. IVとTEMP1にTEMP2を分解する。 IVは、最も重要な（最初の）8つのオクテットで、TEMP1は最下位（最後の）32オクテットです。 5.キー暗号化キーを使用してCBCモードでTEMP1を復号化。初期化ベクトルとして前のステップからIV値を使用します。暗号文CEKICVを呼び出します。 6. CEKとICVにCEKICVを分解する。 CEKは、最も重要な（最初の）24個のオクテットで、ICVは最下位（最後の）8つのオクテットです。 7.計算セクション12.6.1に上記のようにCEKに8オクテットキーチェックサム値。計算されたキーのチェックサム値は、復号化キーのチェックサム値、ICV、エラーと一致しない場合。奇数パリティ8.チェックCEKを備えたDESキーオクテットの各。パリティが正しくない場合、エラーがあります。コンテンツ暗号鍵として9. CEK。"
    },
    {
      "indent": 0,
      "text": "12.6.4 RC2 Key Wrap",
      "section_title": true,
      "ja": "12.6.4 RC2キーラップ"
    },
    {
      "indent": 3,
      "text": "The RC2 key wrap algorithm encrypts a RC2 content-encryption key with a RC2 key-encryption key. The RC2 key wrap algorithm is:",
      "ja": "RC2キーラップアルゴリズムは、RC2キー暗号化キーとRC2コンテンツ暗号化キーを暗号化します。 RC2キーラップアルゴリズムは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. Let the content-encryption key be called CEK, and let the length of the content-encryption key in octets be called LENGTH. LENGTH is a single octet. 2. Let LCEK = LENGTH || CEK. 3. Let LCEKPAD = LCEK || PAD. If the length of LCEK is a multiple of 8, the PAD has a length of zero. If the length of LCEK is not a multiple of 8, then PAD contains the fewest number of random octets to make the length of LCEKPAD a multiple of 8. 4. Compute an 8 octet key checksum value on LCEKPAD as described above in Section 12.6.1, call the result ICV. 5. Let LCEKPADICV = LCEKPAD || ICV. 6. Generate 8 octets at random, call the result IV. 7. Encrypt LCEKPADICV in CBC mode using the key-encryption key. Use the random value generated in the previous step as the initialization vector (IV). Call the ciphertext TEMP1. 8. Let TEMP2 = IV || TEMP1. 9. Reverse the order of the octets in TEMP2. That is, the most significant (first) octet is swapped with the least significant (last) octet, and so on. Call the result TEMP3. 10. Encrypt TEMP3 in CBC mode using the key-encryption key. Use an initialization vector (IV) of 0x4adda22c79e82105.",
      "ja": "1.コンテンツ暗号化キーをCEK呼ばれてみましょう、とオクテットで、コンテンツ暗号化キーの長さがLENGTH呼ばれてみましょう。 LENGTHは、単一のオクテットです。 2. LCEK = LENGTHましょう|| CEK。 3. LCEKPAD = LCEK ||をしてみましょうパッド。 LCEKの長さが8の倍数である場合、PADはゼロの長さを有します。 LCEKの長さが8の倍数でない場合、PADはLCEKPAD 8 4.計算セクション12.6で説明したようにLCEKPADに8オクテットキーチェックサム値の倍数の長さを作るためにランダムオクテットの最少数を含んでいます。 1、結果ICVを呼び出します。 5. LCEKPADICV = LCEKPAD ||をしてみましょうICV。 6.結果のIVを呼び出し、ランダムに8オクテットを生成します。キー暗号化キーを使用してCBCモードで7.暗号化LCEKPADICV。初期化ベクトル（IV）のような、前のステップで生成したランダム値を使用します。暗号文TEMP1を呼び出します。 8. TEMP2 = IVましょう|| TEMP1。 9. TEMP2のオクテットの順序を逆にします。それは最も重要な（最初の）オクテットはそうで最下位（最後）のオクテットと交換、およびされています。結果TEMP3を呼び出します。キー暗号化キーを使用してCBCモードでの暗号化10 TEMP3。 0x4adda22c79e82105の初期化ベクトル（IV）を使用します。"
    },
    {
      "indent": 3,
      "text": "Note: When the same content-encryption key is wrapped in different key-encryption keys, a fresh initialization vector (IV) must be generated for each invocation of the key wrap algorithm.",
      "ja": "注意：同じコンテンツ暗号化キーが異なるキー暗号化キーに包まれている場合には、新鮮な初期化ベクトル（IV）は、キーラップアルゴリズムの呼び出しごとに生成する必要があります。"
    },
    {
      "indent": 0,
      "text": "12.6.5 RC2 Key Unwrap",
      "section_title": true,
      "ja": "12.6.5 RC2キーアンラップ"
    },
    {
      "indent": 3,
      "text": "The RC2 key unwrap algorithm decrypts a RC2 content-encryption key using a RC2 key-encryption key. The RC2 key unwrap algorithm is:",
      "ja": "RC2キーアンラップアルゴリズムは、RC2キー暗号化キーを使用して、RC2のコンテンツ暗号化キーを復号化します。 RC2キーアンラップアルゴリズムは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. If the wrapped content-encryption key is not a multiple of 8 octets, then error. 2. Decrypt the wrapped content-encryption key in CBC mode using the key-encryption key. Use an initialization vector (IV) of 0x4adda22c79e82105. Call the output TEMP3. 3. Reverse the order of the octets in TEMP3. That is, the most significant (first) octet is swapped with the least significant (last) octet, and so on. Call the result TEMP2. 4. Decompose the TEMP2 into IV and TEMP1. IV is the most significant (first) 8 octets, and TEMP1 is the remaining octets.",
      "ja": "1.包まれたコンテンツ暗号化キーは8つのオクテット、エラーの倍数でない場合。 2.キー暗号化キーを使用してCBCモードで包まれたコンテンツ暗号化キーを解読。 0x4adda22c79e82105の初期化ベクトル（IV）を使用します。出力TEMP3を呼び出します。 3. TEMP3のオクテットの順序を逆にします。それは最も重要な（最初の）オクテットはそうで最下位（最後）のオクテットと交換、およびされています。結果TEMP2を呼び出します。 4. IVとTEMP1にTEMP2を分解する。 IVは、最も重要な（最初の）8つのオクテットで、TEMP1は、残りのオクテットです。"
    },
    {
      "indent": 3,
      "text": "5. Decrypt TEMP1 in CBC mode using the key-encryption key. Use the IV value from the previous step as the initialization vector. Call the plaintext LCEKPADICV. 6. Decompose the LCEKPADICV into LCEKPAD, and ICV. ICV is the least significant (last) octet 8 octets. LCEKPAD is the remaining octets. 7. Compute an 8 octet key checksum value on LCEKPAD as described above in Section 12.6.1. If the computed key checksum value does not match the decrypted key checksum value, ICV, then error. 8. Decompose the LCEKPAD into LENGTH, CEK, and PAD. LENGTH is the most significant (first) octet. CEK is the following LENGTH octets. PAD is the remaining octets, if any. 9. If the length of PAD is more than 7 octets, then error. 10. Use CEK as the content-encryption key.",
      "ja": "5.キー暗号化キーを使用してCBCモードでTEMP1を復号化。初期化ベクトルとして前のステップからIV値を使用します。平文LCEKPADICVを呼び出します。 6. LCEKPAD、およびICVにLCEKPADICVを分解する。 ICVは最下位（最後の）オクテット8つのオクテットです。 LCEKPADは、残りのオクテットです。 7.計算セクション12.6.1に、上述したようLCEKPADに8オクテットキーチェックサム値。計算されたキーのチェックサム値は、復号化キーのチェックサム値、ICV、エラーと一致しない場合。 8. LENGTH、CEK、パッドにLCEKPADを分解する。 LENGTHは、最も重要な（最初の）オクテットです。 CEKは、以下のLENGTHオクテットです。もしあればPADが、残りのオクテットです。 9.パッドの長さが7つの以上のオクテット、エラーである場合。コンテンツ暗号鍵として10. CEK。"
    },
    {
      "indent": 0,
      "text": "Appendix A: ASN.1 Module",
      "ja": "付録A：ASN.1モジュール"
    },
    {
      "indent": 0,
      "text": "CryptographicMessageSyntax { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0) cms(1) }",
      "ja": "暗号メッセージ構文{ISO（1）部材本体（2）米国（840）RSADSI（113549）PKCS（1）PKCS-9（9）SMIME（16）モジュール（0）CMS（1）}"
    },
    {
      "indent": 0,
      "text": "DEFINITIONS IMPLICIT TAGS ::=\nBEGIN",
      "raw": true
    },
    {
      "indent": 0,
      "text": "-- EXPORTS All -- The types and values defined in this module are exported for use in -- the other ASN.1 modules. Other applications may use them for their -- own purposes.",
      "ja": " - すべてのエクスポート - 他のASN.1モジュール - このモジュールで定義されたタイプと値がでの使用のためにエクスポートされます。自身の目的 - 他のアプリケーションは、自分のためにそれらを使用することができます。"
    },
    {
      "indent": 0,
      "text": "IMPORTS",
      "ja": "輸入"
    },
    {
      "indent": 2,
      "text": "-- Directory Information Framework (X.501) Name FROM InformationFramework { joint-iso-itu-t ds(5) modules(1) informationFramework(1) 3 }",
      "ja": " - ディレクトリ情報フレームワーク（X.501）名InformationFramework FROM {関節イソITU-TのDS（5）モジュール（1）informationFramework（1）3}"
    },
    {
      "indent": 2,
      "text": "-- Directory Authentication Framework (X.509) AlgorithmIdentifier, AttributeCertificate, Certificate, CertificateList, CertificateSerialNumber FROM AuthenticationFramework { joint-iso-itu-t ds(5) module(1) authenticationFramework(7) 3 } ;",
      "ja": " - ディレクトリ認証フレームワーク（X.509）のAlgorithmIdentifier、AttributeCertificate、証明書、CertificateListの、CertificateSerialNumber AuthenticationFramework FROM {関節イソITU-T DS（5）モジュール（1）authenticationFramework（7）3}。"
    },
    {
      "indent": 0,
      "text": "-- Cryptographic Message Syntax",
      "ja": " - 暗号メッセージ構文"
    },
    {
      "indent": 0,
      "text": "ContentInfo ::= SEQUENCE {\n  contentType ContentType,\n  content [0] EXPLICIT ANY DEFINED BY contentType }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "ContentType ::= OBJECT IDENTIFIER",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SignedData ::= SEQUENCE {\n  version CMSVersion,\n  digestAlgorithms DigestAlgorithmIdentifiers,\n  encapContentInfo EncapsulatedContentInfo,\n  certificates [0] IMPLICIT CertificateSet OPTIONAL,\n  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n  signerInfos SignerInfos }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SignerInfos ::= SET OF SignerInfo",
      "raw": true
    },
    {
      "indent": 0,
      "text": "EncapsulatedContentInfo ::= SEQUENCE {\n  eContentType ContentType,\n  eContent [0] EXPLICIT OCTET STRING OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SignerInfo ::= SEQUENCE {\n  version CMSVersion,\n  sid SignerIdentifier,\n  digestAlgorithm DigestAlgorithmIdentifier,\n  signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\n  signatureAlgorithm SignatureAlgorithmIdentifier,\n  signature SignatureValue,\n  unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SignerIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  subjectKeyIdentifier [0] SubjectKeyIdentifier }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SignedAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 0,
      "text": "UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Attribute ::= SEQUENCE {\n  attrType OBJECT IDENTIFIER,\n  attrValues SET OF AttributeValue }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "AttributeValue ::= ANY",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SignatureValue ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "EnvelopedData ::= SEQUENCE {\n  version CMSVersion,\n  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\n  recipientInfos RecipientInfos,\n  encryptedContentInfo EncryptedContentInfo,\n  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "OriginatorInfo ::= SEQUENCE {\n  certs [0] IMPLICIT CertificateSet OPTIONAL,\n  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RecipientInfos ::= SET OF RecipientInfo",
      "raw": true
    },
    {
      "indent": 0,
      "text": "EncryptedContentInfo ::= SEQUENCE {\n  contentType ContentType,\n  contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\n  encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "EncryptedContent ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RecipientInfo ::= CHOICE {\n  ktri KeyTransRecipientInfo,\n  kari [1] KeyAgreeRecipientInfo,\n  kekri [2] KEKRecipientInfo }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "EncryptedKey ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "KeyTransRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to 0 or 2\n  rid RecipientIdentifier,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  encryptedKey EncryptedKey }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RecipientIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  subjectKeyIdentifier [0] SubjectKeyIdentifier }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "KeyAgreeRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to 3\n  originator [0] EXPLICIT OriginatorIdentifierOrKey,\n  ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  recipientEncryptedKeys RecipientEncryptedKeys }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "OriginatorIdentifierOrKey ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  subjectKeyIdentifier [0] SubjectKeyIdentifier,\n  originatorKey [1] OriginatorPublicKey }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "OriginatorPublicKey ::= SEQUENCE {\n  algorithm AlgorithmIdentifier,\n  publicKey BIT STRING }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RecipientEncryptedKey ::= SEQUENCE {\n  rid KeyAgreeRecipientIdentifier,\n  encryptedKey EncryptedKey }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "KeyAgreeRecipientIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n  rKeyId [0] IMPLICIT RecipientKeyIdentifier }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RecipientKeyIdentifier ::= SEQUENCE {\n  subjectKeyIdentifier SubjectKeyIdentifier,\n  date GeneralizedTime OPTIONAL,\n  other OtherKeyAttribute OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SubjectKeyIdentifier ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "KEKRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to 4\n  kekid KEKIdentifier,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n  encryptedKey EncryptedKey }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "KEKIdentifier ::= SEQUENCE {\n  keyIdentifier OCTET STRING,\n  date GeneralizedTime OPTIONAL,\n  other OtherKeyAttribute OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "DigestedData ::= SEQUENCE {\n  version CMSVersion,\n  digestAlgorithm DigestAlgorithmIdentifier,\n  encapContentInfo EncapsulatedContentInfo,\n  digest Digest }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Digest ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "EncryptedData ::= SEQUENCE {\n  version CMSVersion,\n  encryptedContentInfo EncryptedContentInfo,\n  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "AuthenticatedData ::= SEQUENCE {\n  version CMSVersion,\n  originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\n  recipientInfos RecipientInfos,\n  macAlgorithm MessageAuthenticationCodeAlgorithm,\n  digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,\n  encapContentInfo EncapsulatedContentInfo,\n  authenticatedAttributes [2] IMPLICIT AuthAttributes OPTIONAL,\n  mac MessageAuthenticationCode,\n  unauthenticatedAttributes [3] IMPLICIT UnauthAttributes OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "AuthAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 0,
      "text": "UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute",
      "raw": true
    },
    {
      "indent": 0,
      "text": "MessageAuthenticationCode ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "DigestAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SignatureAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "CertificateRevocationLists ::= SET OF CertificateList",
      "raw": true
    },
    {
      "indent": 0,
      "text": "CertificateChoices ::= CHOICE {\n  certificate Certificate,  -- See X.509\n  extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\n  attrCert [1] IMPLICIT AttributeCertificate }  -- See X.509 & X9.57",
      "raw": true
    },
    {
      "indent": 0,
      "text": "CertificateSet ::= SET OF CertificateChoices",
      "raw": true
    },
    {
      "indent": 0,
      "text": "IssuerAndSerialNumber ::= SEQUENCE {\n  issuer Name,\n  serialNumber CertificateSerialNumber }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "CMSVersion ::= INTEGER  { v0(0), v1(1), v2(2), v3(3), v4(4) }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "UserKeyingMaterial ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "OtherKeyAttribute ::= SEQUENCE {\n  keyAttrId OBJECT IDENTIFIER,\n  keyAttr ANY DEFINED BY keyAttrId OPTIONAL }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "-- CMS Attributes",
      "ja": " -  CMS属性"
    },
    {
      "indent": 0,
      "text": "MessageDigest ::= OCTET STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "SigningTime  ::= Time",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Time ::= CHOICE {\n  utcTime UTCTime,\n  generalTime GeneralizedTime }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Countersignature ::= SignerInfo",
      "raw": true
    },
    {
      "indent": 0,
      "text": "-- Algorithm Identifiers",
      "ja": " - アルゴリズムの識別子"
    },
    {
      "indent": 0,
      "text": "sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    oiw(14) secsig(3) algorithm(2) 26 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) digestAlgorithm(2) 5 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)\n    us(840) x9-57 (10040) x9cm(4) 3 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) ansi-x942(10046) number-type(2) 1 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549) encryptionAlgorithm(3) 2 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    dod(6) internet(1) security(5) mechanisms(5) 8 1 2 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "-- Algorithm Parameters",
      "ja": " - アルゴリズムパラメータ"
    },
    {
      "indent": 0,
      "text": "KeyWrapAlgorithm ::= AlgorithmIdentifier",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RC2wrapParameter ::= RC2ParameterVersion",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RC2ParameterVersion ::= INTEGER",
      "raw": true
    },
    {
      "indent": 0,
      "text": "CBCParameter ::= IV",
      "raw": true
    },
    {
      "indent": 0,
      "text": "IV ::= OCTET STRING  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 0,
      "text": "RC2CBCParameter ::= SEQUENCE {\n  rc2ParameterVersion INTEGER,\n  iv OCTET STRING  }  -- exactly 8 octets",
      "raw": true
    },
    {
      "indent": 0,
      "text": "-- Content Type Object Identifiers",
      "ja": " - コンテンツタイプのオブジェクト識別子"
    },
    {
      "indent": 0,
      "text": "id-ct-contentInfo OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n    ct(1) 6 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 1 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 3 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 5 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-ct-authData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n    ct(1) 2 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "-- Attribute Object Identifiers",
      "ja": " - 属性のオブジェクト識別子"
    },
    {
      "indent": 0,
      "text": "id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 4 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549) pkcs(1) pkcs9(9) 6 }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "-- Obsolete Extended Certificate syntax from PKCS#6",
      "ja": " -  PKCS＃6から廃止された拡張証明書の構文"
    },
    {
      "indent": 0,
      "text": "ExtendedCertificate ::= SEQUENCE {\n  extendedCertificateInfo ExtendedCertificateInfo,\n  signatureAlgorithm SignatureAlgorithmIdentifier,\n  signature Signature }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "ExtendedCertificateInfo ::= SEQUENCE {\n  version CMSVersion,\n  certificate Certificate,\n  attributes UnauthAttributes }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Signature ::= BIT STRING",
      "raw": true
    },
    {
      "indent": 0,
      "text": "END -- of CryptographicMessageSyntax",
      "ja": "END  - 暗号メッセージ構文の"
    },
    {
      "indent": 0,
      "text": "References",
      "ja": "リファレンス"
    },
    {
      "indent": 3,
      "text": "3DES American National Standards Institute. ANSI X9.52-1998, Triple Data Encryption Algorithm Modes of Operation. 1998.",
      "ja": "3DES米国規格協会。 ANSI X9.52-1998、オペレーションのトリプルデータ暗号化アルゴリズムモード。 1998。"
    },
    {
      "indent": 3,
      "text": "DES American National Standards Institute. ANSI X3.106, \"American National Standard for Information Systems - Data Link Encryption\". 1983.",
      "ja": "DES米国規格協会。 ANSI X3.106、「情報システムのためのアメリカ国立標準 - データリンク暗号化」。 1983。"
    },
    {
      "indent": 3,
      "text": "DH-X9.42 Rescorla, E., \"Diffie-Hellman Key Agreement Method\", RFC 2631, June 1999.",
      "ja": "DH-X9.42レスコラ、E.、 \"ディフィー・ヘルマン鍵共有方式\"、RFC 2631、1999年6月。"
    },
    {
      "indent": 3,
      "text": "DSS National Institute of Standards and Technology. FIPS Pub 186: Digital Signature Standard. 19 May 1994.",
      "ja": "標準技術のDSS研究所。 FIPSパブ186：デジタル署名標準。 1994年5月19日。"
    },
    {
      "indent": 3,
      "text": "ESS Hoffman, P., Editor, \"Enhanced Security Services for S/MIME\", RFC 2634, June 1999.",
      "ja": "ESSホフマン、P.、エディタ、 \"S / MIMEのためのセキュリティサービスの強化\"、RFC 2634、1999年6月。"
    },
    {
      "indent": 3,
      "text": "HMAC Krawczyk, H., \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, February 1997.",
      "ja": "HMAC Krawczyk、H.、 \"HMAC：メッセージ認証のための鍵付きハッシュ\"、RFC 2104、1997年2月。"
    },
    {
      "indent": 3,
      "text": "MD5 Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321, April 1992.",
      "ja": "MD5 Rivest氏、R.、 \"MD5メッセージダイジェストアルゴリズム\"、RFC 1321、1992年4月。"
    },
    {
      "indent": 3,
      "text": "MODES National Institute of Standards and Technology. FIPS Pub 81: DES Modes of Operation. 2 December 1980.",
      "ja": "アメリカ国立標準技術研究所は、モードがあります。 FIPSパブ81：DES運転モード。 1980年12月2日。"
    },
    {
      "indent": 3,
      "text": "MSG Ramsdell, B., Editor, \"S/MIME Version 3 Message Specification\", RFC 2633, June 1999.",
      "ja": "MSG Ramsdell、B.、エディタ、 \"S / MIMEバージョン3メッセージ仕様\"、RFC 2633、1999年6月。"
    },
    {
      "indent": 3,
      "text": "NEWPKCS#1 Kaliski, B., \"PKCS #1: RSA Encryption, Version 2.0\", RFC 2347, October 1998.",
      "ja": "NEWPKCS＃1 Kaliski、B.、 \"PKCS＃1：RSA暗号化、バージョン2.0\"、RFC 2347、1998年10月。"
    },
    {
      "indent": 3,
      "text": "PROFILE Housley, R., Ford, W., Polk, W. and D. Solo, \"Internet X.509 Public Key Infrastructure: Certificate and CRL Profile\", RFC 2459, January 1999.",
      "ja": "Housley氏、R.、フォード、W.、ポーク、W.およびD.ソロプロフィール、 \"インターネットX.509公開鍵インフラストラクチャ：証明書とCRLプロファイル\"、RFC 2459、1999年1月。"
    },
    {
      "indent": 3,
      "text": "PKCS#1 Kaliski, B., \"PKCS #1: RSA Encryption, Version 1.5.\", RFC 2313, March 1998.",
      "ja": "PKCS＃1 Kaliski、B.、 \"PKCS＃1：RSA暗号化、バージョン1.5\"、RFC 2313、1998年3月。"
    },
    {
      "indent": 3,
      "text": "PKCS#6 RSA Laboratories. PKCS #6: Extended-Certificate Syntax Standard, Version 1.5. November 1993.",
      "ja": "PKCS＃6 RSA研究所。 PKCS＃6：構文規格、バージョン1.5の証明書を拡張。 1993年11月。"
    },
    {
      "indent": 3,
      "text": "PKCS#7 Kaliski, B., \"PKCS #7: Cryptographic Message Syntax, Version 1.5.\", RFC 2315, March 1998.",
      "ja": "PKCS＃7 Kaliski、B.、 \"PKCS＃7：暗号メッセージ構文、バージョン1.5\"、RFC 2315、1998年3月。"
    },
    {
      "indent": 3,
      "text": "PKCS#9 RSA Laboratories. PKCS #9: Selected Attribute Types, Version 1.1. November 1993.",
      "ja": "PKCS＃9 RSA研究所。 PKCS＃9：選択した属性の種類、バージョン1.1。 1993年11月。"
    },
    {
      "indent": 3,
      "text": "RANDOM Eastlake, D., Crocker, S. and J. Schiller, \"Randomness Recommendations for Security\", RFC 1750, December 1994.",
      "ja": "RANDOMイーストレイク、D.、クロッカー、S.とJ.シラー、 \"セキュリティのためのランダム性の提言\"、RFC 1750、1994年12月。"
    },
    {
      "indent": 3,
      "text": "RC2 Rivest, R., \"A Description of the RC2 (r) Encryption Algorithm\", RFC 2268, March 1998.",
      "ja": "RC2リベスト、R.、 \"RC2の説明（R）暗号化アルゴリズム\"、RFC 2268、1998年3月。"
    },
    {
      "indent": 3,
      "text": "SHA1 National Institute of Standards and Technology. FIPS Pub 180-1: Secure Hash Standard. 17 April 1995.",
      "ja": "標準技術のSHA1研究所。 FIPSパブ180-1：セキュアハッシュ標準。 1995年4月17日。"
    },
    {
      "indent": 3,
      "text": "X.208-88 CCITT. Recommendation X.208: Specification of Abstract Syntax Notation One (ASN.1). 1988.",
      "ja": "X.208-88 CCITT。勧告X.208：抽象構文記法1（ASN.1）の仕様。 1988。"
    },
    {
      "indent": 3,
      "text": "X.209-88 CCITT. Recommendation X.209: Specification of Basic Encoding Rules for Abstract Syntax Notation One (ASN.1). 1988.",
      "ja": "X.209-88 CCITT。勧告X. 209：抽象構文記法1（ASN.1）のための基本的な符号化規則の仕様。 1988。"
    },
    {
      "indent": 3,
      "text": "X.501-88 CCITT. Recommendation X.501: The Directory - Models. 1988.",
      "ja": "X.501-88 CCITT。勧告X.501：ディレクトリ - モデル。 1988。"
    },
    {
      "indent": 3,
      "text": "X.509-88 CCITT. Recommendation X.509: The Directory - Authentication Framework. 1988.",
      "ja": "X.509-88 CCITT。勧告X.509：ディレクトリ - 認証フレームワーク。 1988。"
    },
    {
      "indent": 3,
      "text": "X.509-97 ITU-T. Recommendation X.509: The Directory - Authentication Framework. 1997.",
      "ja": "X.509-97 ITU-T。勧告X.509：ディレクトリ - 認証フレームワーク。 1997。"
    },
    {
      "indent": 0,
      "text": "Security Considerations",
      "ja": "セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "The Cryptographic Message Syntax provides a method for digitally signing data, digesting data, encrypting data, and authenticating data.",
      "ja": "暗号メッセージ構文は、デジタルデータを消化し、データに署名データを暗号化し、データを認証するための方法を提供します。"
    },
    {
      "indent": 3,
      "text": "Implementations must protect the signer's private key. Compromise of the signer's private key permits masquerade.",
      "ja": "実装は署名者の秘密鍵を保護しなければなりません。署名者の秘密鍵の許可の妥協を装います。"
    },
    {
      "indent": 3,
      "text": "Implementations must protect the key management private key, the key-encryption key, and the content-encryption key. Compromise of the key management private key or the key-encryption key may result in the disclosure of all messages protected with that key. Similarly, compromise of the content-encryption key may result in disclosure of the associated encrypted content.",
      "ja": "実装は、鍵管理、秘密鍵、鍵暗号化キー、およびコンテンツ暗号化キーを保護しなければなりません。鍵管理秘密鍵またはキー暗号化キーの妥協はそのキーで保護されたすべてのメッセージの公開をもたらすことができます。同様に、コンテンツ暗号化鍵の妥協は、関連する暗号化コンテンツの開示をもたらし得ます。"
    },
    {
      "indent": 3,
      "text": "Implementations must protect the key management private key and the message-authentication key. Compromise of the key management private key permits masquerade of authenticated data. Similarly, compromise of the message-authentication key may result in undetectable modification of the authenticated content.",
      "ja": "実装は、鍵管理秘密鍵とメッセージ認証キーを保護しなければなりません。鍵管理秘密鍵の許可の妥協が認証されたデータを装います。同様に、メッセージ認証鍵の妥協は、認証されたコンテンツの検出不可能な変形をもたらすことができます。"
    },
    {
      "indent": 3,
      "text": "Implementations must randomly generate content-encryption keys, message-authentication keys, initialization vectors (IVs), and padding. Also, the generation of public/private key pairs relies on a random numbers. The use of inadequate pseudo-random number generators (PRNGs) to generate cryptographic keys can result in little or no security. An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute force searching the whole key space. The generation of quality random numbers is difficult. RFC 1750 [RANDOM] offers important guidance in this area, and Appendix 3 of FIPS Pub 186 [DSS] provides one quality PRNG technique.",
      "ja": "実装はランダムにコンテンツ暗号化キー、メッセージ認証キー、初期化ベクトル（IV）、およびパディングを生成しなければなりません。また、公開鍵/秘密鍵ペアの生成は、乱数に依存しています。暗号鍵を生成するために不十分な疑似乱数発生器（のPRNG）の使用は、ほとんどまたは全くセキュリティをもたらすことができます。攻撃者はそれをはるかに簡単に全体のキースペースを検索結果として起こる小さい可能性はなく、ブルートフォースを探し、キーを生成PRNG環境を再現するかもしれません。品質の乱数の生成が困難です。 RFC 1750 [RANDOM]はこの領域で重要な指導を提供し、FIPSパブ186の付録3 [DSS]は1つの品質PRNGの技術を提供します。"
    },
    {
      "indent": 3,
      "text": "When using key agreement algorithms or previously distributed symmetric key-encryption keys, a key-encryption key is used to encrypt the content-encryption key. If the key-encryption and content-encryption algorithms are different, the effective security is determined by the weaker of the two algorithms. If, for example, a message content is encrypted with 168-bit Triple-DES and the Triple-DES content-encryption key is wrapped with a 40-bit RC2 key, then at most 40 bits of protection is provided. A trivial search to determine the value of the 40-bit RC2 key can recover Triple-DES key, and then the Triple-DES key can be used to decrypt the content. Therefore, implementers must ensure that key-encryption algorithms are as strong or stronger than content-encryption algorithms.",
      "ja": "鍵合意アルゴリズムまたは以前に分散対称鍵暗号化キーを使用する場合、キー暗号化キーは、コンテンツ暗号化キーを暗号化するために使用されます。キー暗号化とコンテンツの暗号化アルゴリズムが異なる場合は、効果的なセキュリティは、2つのアルゴリズムの弱いにより決定されます。場合は、例えば、メッセージの内容は、168ビットTriple-DESで暗号化されており、トリプルDES、コンテンツ暗号化キーは、40ビットのRC2キーでラップされ、その後、保護の最大40ビットが提供されます。 40ビットのRC2キーの値を決定するために些細な検索は、トリプルDES鍵を回復することができ、その後、トリプルDES鍵はコンテンツを復号するために使用することができます。そのため、実装者は、キー暗号化アルゴリズムがように強いか、コンテンツの暗号化アルゴリズムよりも強いことを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "Section 12.6 specifies key wrap algorithms used to encrypt a Triple-DES [3DES] content-encryption key with a Triple-DES key-encryption key or to encrypt a RC2 [RC2] content-encryption key with a RC2 key-encryption key. The key wrap algorithms make use of CBC mode [MODES]. These key wrap algorithms have been reviewed for use with Triple and RC2. They have not been reviewed for use with other cryptographic modes or other encryption algorithms. Therefore, if a CMS implementation wishes to support ciphers in addition to Triple-DES or RC2, then additional key wrap algorithms need to be defined to support the additional ciphers.",
      "ja": "12.6項は、トリプルDESのキー暗号化キーを使用してトリプルDES [3DES]、コンテンツ暗号化キーを暗号化したり、RC2キー暗号化キーとRC2 [RC2]コンテンツ暗号化キーを暗号化するために使用されるキーラップアルゴリズムを指定します。キーラップアルゴリズムはCBCモード[MODES]を利用します。これらのキーラップアルゴリズムは、トリプルとRC2で使用するために検討されています。彼らは、他の暗号モードや他の暗号化アルゴリズムで使用するために検討されていません。 CMSの実装では、トリプルDESまたはRC2に加えて、暗号をサポートすることを希望する場合したがって、その後、追加のキーラップアルゴリズムが追加の暗号をサポートするために定義する必要があります。"
    },
    {
      "indent": 3,
      "text": "Implementers should be aware that cryptographic algorithms become weaker with time. As new cryptoanalysis techniques are developed and computing performance improves, the work factor to break a particular cryptographic algorithm will reduce. Therefore, cryptographic algorithm implementations should be modular allowing new algorithms to be readily inserted. That is, implementers should be prepared for the set of mandatory to implement algorithms to change over time.",
      "ja": "実装者は、暗号化アルゴリズムは、時間とともに弱くなることに注意する必要があります。新しい暗号解読技術が開発され、コンピューティング性能が向上しているように、特定の暗号アルゴリズムを破る仕事率が低下します。したがって、暗号アルゴリズムの実装を容易に挿入するモジュラー可能新しいアルゴリズムであるべきです。これは、実装者は、時間の経過とともに変化するアルゴリズムを実装するために必須のセットのために準備されるべきです。"
    },
    {
      "indent": 3,
      "text": "The countersignature unauthenticated attribute includes a digital signature that is computed on the content signature value, thus the countersigning process need not know the original signed content.",
      "ja": "副署認証されていない属性は、このように副署プロセスは、元の署名されたコンテンツを知っている必要はなく、コンテンツ署名値で計算されたデジタル署名を含みます。"
    },
    {
      "indent": 3,
      "text": "This structure permits implementation efficiency advantages; however, this structure may also permit the countersigning of an inappropriate signature value. Therefore, implementations that perform countersignatures should either verify the original signature value prior to countersigning it (this verification requires processing of the original content), or implementations should perform countersigning in a context that ensures that only appropriate signature values are countersigned.",
      "ja": "この構造は、実装効率の利点を可能にします。しかし、この構造はまた、不適切な署名値の副署を可能にすることができます。したがって、countersignaturesを実行する実装はそれを副署する前に、元の署名値を（この検証は、元のコンテンツの処理を必要とする）を確認する必要がありますか、実装は、適切な署名値を副署されることを保証文脈で副署行うべきです。"
    },
    {
      "indent": 3,
      "text": "Users of CMS, particularly those employing CMS to support interactive applications, should be aware that PKCS #1 Version 1.5 as specified in RFC 2313 [PKCS#1] is vulnerable to adaptive chosen ciphertext attacks when applied for encryption purposes. Exploitation of this identified vulnerability, revealing the result of a particular RSA decryption, requires access to an oracle which will respond to a large number of ciphertexts (based on currently available results, hundreds of thousands or more), which are constructed adaptively in response to previously-received replies providing information on the successes or failures of attempted decryption operations. As a result, the attack appears significantly less feasible to perpetrate for store-and-forward S/MIME environments than for directly interactive protocols. Where CMS constructs are applied as an intermediate encryption layer within an interactive request-response communications environment, exploitation could be more feasible.",
      "ja": "CMSのユーザーは、特にCMSを利用したものは、インタラクティブなアプリケーションをサポートするために、RFC 2313で指定されたPKCS＃1バージョン1.5は、[PKCS＃1]暗号化の目的のために適用した場合に選択暗号文攻撃を適応するために脆弱であることに注意してください。この識別された脆弱性の悪用は、特定のRSA復号の結果明らかに、暗号文の多数に応答するOracleへのアクセス（現在利用可能な結果に基づいて、数千以上の数百）に応じて適応的に構成され、必要未遂の復号操作の成功または失敗に関する情報を提供する前に、受信した回答。その結果、攻撃が直接、対話型のプロトコルよりもストアアンドフォワードS / MIME環境のために犯すために大幅に少ない可能表示されます。 CMS構築物は、対話型要求応答通信環境内の中間の暗号化層として適用されている場合は、搾取は、より実現可能である可能性があります。"
    },
    {
      "indent": 3,
      "text": "An updated version of PKCS #1 has been published, PKCS #1 Version 2.0 [NEWPKCS#1]. This new document will supersede RFC 2313. PKCS #1 Version 2.0 preserves support for the encryption padding format defined in PKCS #1 Version 1.5 [PKCS#1], and it also defines a new alternative. To resolve the adaptive chosen ciphertext vulnerability, the PKCS #1 Version 2.0 specifies and recommends use of Optimal Asymmetric Encryption Padding (OAEP) when RSA encryption is used to provide confidentiality. Designers of protocols and systems employing CMS for interactive environments should either consider usage of OAEP, or should ensure that information which could reveal the success or failure of attempted PKCS #1 Version 1.5 decryption operations is not provided. Support for OAEP will likely be added to a future version of the CMS specification.",
      "ja": "PKCS＃1の更新版公開されている、PKCS＃1バージョン2.0 [NEWPKCS＃1]。この新しい文書では、RFC 2313 PKCS＃1バージョン2.0のジャムは、PKCS＃1バージョン1.5 [PKCS＃1]で定義された暗号化パディングフォーマットのサポート、そしてそれはまた、新しい選択肢を定義に優先します。適応的選択暗号文の脆弱性、PKCS＃1バージョン2.0指定を解決し、RSAの暗号化は機密性を提供するために使用されたときに最適な非対称暗号パディング（OAEP）の使用を推奨しています。インタラクティブな環境のためのCMSを利用したプロトコルやシステムの設計者は、OAEPの使用を考慮しなければならないのいずれか、または試行PKCS＃1バージョン1.5の復号操作の成功または失敗を明らかにする可能性があり、その情報が提供されていないことを確認する必要があります。 OAEPのサポートはおそらくCMS仕様の将来のバージョンに追加されます。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document is the result of contributions from many professionals. I appreciate the hard work of all members of the IETF S/MIME Working Group. I extend a special thanks to Rich Ankney, Tim Dean, Steve Dusse, Carl Ellison, Peter Gutmann, Bob Jueneman, Stephen Henson, Paul Hoffman, Scott Hollenbeck, Don Johnson, Burt Kaliski, John Linn, John Pawling, Blake Ramsdell, Francois Rousseau, Jim Schaad, and Dave Solo for their efforts and support.",
      "ja": "この文書は、多くの専門家からの貢献の結果です。私は、IETF S / MIME作業部会のメンバー全員のハードワークに感謝します。私はリッチAnkney、ティム・ディーン、スティーブDusse、カール・エリソン、ピーター・ガットマン、ボブJueneman、スティーブン・ヘンソン、ポール・ホフマン、スコットホレンベック、ドン・ジョンソン、バート・カリスキー、ジョン・リン、ジョンPawling、ブレイクRamsdell、フランソワ・ルソーに特別な感謝を拡張します、彼らの努力と支援のためのジムSchaad、とDaveソロ。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Russell Housley SPYRUS 381 Elden Street Suite 1120 Herndon, VA 20170 USA",
      "ja": "ラッセルHousleyのSPYRUS 381 Eldenストリートスイート1120ハーンドン、VA 20170 USA"
    },
    {
      "indent": 3,
      "text": "EMail: housley@spyrus.com",
      "ja": "メールアドレス：housley@spyrus.com"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1999). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1999）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "ja": "RFC Editor機能のための基金は現在、インターネット協会によって提供されます。"
    }
  ]
}