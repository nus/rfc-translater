{
  "title": {
    "text": "RFC 2354 - Options for Repair of Streaming Media",
    "ja": "RFC 2354 - ストリーミングメディアの修理のためのオプション"
  },
  "number": 2354,
  "created_at": "2019-10-23 14:28:29.746716+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                         C. Perkins\nRequest for Comments: 2354                                     O. Hodson\nCategory: Informational                        University College London\n                                                               June 1998",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Options for Repair of Streaming Media",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "ja": "このメモの位置付け"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. This memo does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。このメモはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1998）。全著作権所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document summarizes a range of possible techniques for the repair of continuous media streams subject to packet loss. The techniques discussed include redundant transmission, retransmission, interleaving and forward error correction. The range of applicability of these techniques is noted, together with the protocol requirements and dependencies.",
      "ja": "この文書では、連続メディアの修復のための可能な技術の範囲は、パケットロスの対象ストリームをまとめたもの。論じた技術は、冗長伝送、再送、インターリーブ及び前方誤り訂正を含みます。これらの技術の適用性の範囲は、プロトコルの要件と依存関係とともに、留意されたいです。"
    },
    {
      "indent": 0,
      "text": "1 Introduction",
      "ja": "1はじめに"
    },
    {
      "indent": 3,
      "text": "A number of applications have emerged which use RTP/UDP transport to deliver continuous media streams. Due to the unreliable nature of UDP packet delivery, the quality of the received stream will be adversely affected by packet loss. A number of techniques exist by which the effects of packet loss may be repaired. These techniques have a wide range of applicability and require varying degrees of protocol support. In this document, a number of such techniques are discussed, and recommendations for their applicability made.",
      "ja": "アプリケーションの数は、連続メディアストリームを配信するためにRTP / UDPトランスポートを使用している浮上しています。 UDPパケットの配信の信頼できない性質のために、受信したストリームの品質に悪影響パケットロスの影響を受けることになります。多くの技術は、パケットロスの影響を修復することができることにより、存在します。これらの技術は、適用可能性の広い範囲を持っており、プロトコルサポートの様々な程度を必要とします。この文書では、そのような多くの技術が議論され、そしてそれらの適用のための提言を行います。"
    },
    {
      "indent": 3,
      "text": "It should be noted that this document is introductory in nature, and does not attempt to be comprehensive. In particular, we restrict our discussion to repair techniques which require the involvement of the sender of a media stream, and do not discuss possibilities for receiver based repair.",
      "ja": "この文書は本質的に入門し、包括的であることをしようとしないことに留意すべきです。特に、我々はメディアストリームの送信者の関与を必要とし、受信機ベースの修理のための可能性を議論していない技術を修復するために我々の議論を制限します。"
    },
    {
      "indent": 3,
      "text": "For a more detailed survey, the reader is referred to [5].",
      "ja": "より詳細な調査のために、読者は[5]と呼ばれます。"
    },
    {
      "indent": 0,
      "text": "2 Terminology and Protocol Framework",
      "ja": "2用語及び議定書の枠組み"
    },
    {
      "indent": 3,
      "text": "A unit is defined to be a timed interval of media data, typically derived from the workings of the media coder. A packet comprises one or more units, encapsulated for transmission over the network. For example, many audio coders operate on 20ms units, which are typically combined to produce 40ms or 80ms packets for transmission. The framework of RTP [18] is assumed. This implies that packets have a sequence number and timestamp. The sequence number denotes the order in which packets are transmitted, and is used to detect losses. The timestamp is used to determine the playout order of units. Most loss recovery schemes rely on units being sent out of order, so an application must use the RTP timestamp to schedule playout.",
      "ja": "ユニットは、典型的には、メディア符号化の仕組みに由来するメディアデータのタイミング間隔であると定義されます。パケットは、ネットワークを介して伝送するためのカプセル化された1つ以上のユニットを含みます。例えば、多くのオーディオ符号器は、典型的には、送信のためには40msまたは80msでパケットを生成するために結合されている20ミリ秒単位で動作します。 RTP [18]の枠組みを想定しています。これは、パケットシーケンス番号とタイムスタンプを持っていることを意味します。シーケンス番号は、パケットが送信される順序を示し、損失を検出するために使用されます。タイムスタンプは、ユニットの再生順序を決定するために使用されます。ほとんどの損失回復方式は、順不同で送信される単位に依存しているため、アプリケーションは再生をスケジュールするRTPタイムスタンプを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The use of RTP allows for several different media coders, with a payload type field being used to distinguish between these at the receiver. Some loss repair schemes send multiple copies of units, at different times and possibly with different encodings, to increase the probability that a receiver has something to decode. A receiver is assumed to have a `quality' ranking of the differing encodings, and so is capable of choosing the `best' unit for playout, given multiple options.",
      "ja": "RTPの使用は、受信機でこれらを区別するために使用されているペイロードタイプフィールドと、いくつかの異なるメディアコーダを可能にします。いくつかの損失修復方式は、受信機が復号するための何かを持っている確率を高めるために、異なるエンコーディングでおそらく異なる時間に、単位の複数のコピーを送信し。受信機は `品質有しているものと「異なるエンコーディングのランキングを、そのため`最良の選択が可能な」再生のためのユニットを、複数のオプションを与えています。"
    },
    {
      "indent": 3,
      "text": "A session is defined as interactive if the end-to-end delay is less then 250ms, including media coding and decoding, network transit and host buffering.",
      "ja": "エンドツーエンド遅延は、メディア符号化及び復号化、ネットワーク通過とホストのバッファリングを含む未満250ミリ秒である場合、セッションは、対話型として定義されます。"
    },
    {
      "indent": 0,
      "text": "3 Network Loss Characteristics",
      "ja": "3つのネットワーク損失特性"
    },
    {
      "indent": 3,
      "text": "If it is desired to repair a media stream subject to packet loss, it is useful to have some knowledge of the loss characteristics which are likely to be encountered. A number of studies have been conducted on the loss characteristics of the Mbone [2, 8, 21] and although the results vary somewhat, the broad conclusion is clear: in a large conference it is inevitable that some receivers will experience packet loss. Packet traces taken by Handley [8] show a session in which most receivers experience loss in the range 2-5%, with a somewhat smaller number seeing significantly higher loss rates. Other studies have presented broadly similar results.",
      "ja": "パケットロスへのメディアストリームの件名を修復することが望まれるならば、遭遇する可能性がある損失特性のいくつかの知識を持っていると便利です。多くの研究MBONEの損失特性に行われている[2、8、21]との結果は多少異なるが、広い結論は明らかである：大会議では、いくつかの受信機がパケット損失を経験することは避けられません。ハンドレーによって撮影されたパケットトレースは、[8]著しく高い損失率を見てやや少ない数で、範囲内で最も受信経験損失2~5％セッションを示します。他の研究では、広く同様の結果を提示しています。"
    },
    {
      "indent": 3,
      "text": "It has also been shown that the vast majority of losses are of single packets. Burst losses of two or more packets are around an order of magnitude less frequent than single packet loss, although they do occur more often than would be expected from a purely random process. Longer burst losses (of the order of tens of packets) occur infrequently. These results are consistent with a network where small amounts of transient congestion cause the majority of packet loss. In a few cases, a network link is found to be severely overloaded, and large amount of loss results.",
      "ja": "また、損失の大半は、単一のパケットであることが示されています。彼らは純粋にランダムなプロセスから予想されるよりもより頻繁に発生したが、二つ以上のパケットのバースト損失は、単一パケット損失よりも少ない頻繁桁の周りにあります。 （パケットの数十の）長いバースト損失がまれに起こります。これらの結果は、一時渋滞少量のパケット損失の大部分を引き起こしたネットワークと一致しています。いくつかのケースでは、ネットワークリンクは厳しくオーバーロードされたことが判明した、と損失の結果、大量の。"
    },
    {
      "indent": 3,
      "text": "The primary focus of a repair scheme must, therefore, be to correct single packet loss, since this is by far the most frequent occurrence. It is desirable that losses of a relatively small number of consecutive packets may also be repaired, since such losses represent a small but noticeable fraction of observed losses. The correction of large bursts of loss is of considerably less importance.",
      "ja": "修復方式の主な焦点は、それゆえ、これはこれまでで最も頻繁に発生することによるものであるため、単一のパケット損失を訂正するためになければなりません。そのような損失が観察された損失の小さいが顕著な部分を表すので、連続したパケットの比較的少数の損失も、修復することができることが望ましいです。損失の大バーストの補正はかなり少ない重要です。"
    },
    {
      "indent": 0,
      "text": "4 Loss Mitigation Schemes",
      "ja": "4つの損失軽減スキーム"
    },
    {
      "indent": 3,
      "text": "In the following sections, four loss mitigation schemes are discussed. These schemes have been discussed in the literature a number of times, and found to be of use in a number of scenarios. Each technique is briefly described, and its advantages and disadvantages noted.",
      "ja": "以下のセクションでは、4つの損失軽減スキームが議論されています。これらのスキームは、文献に回数を論じ、そして多くのシナリオにおいて有用であることが見出されました。それぞれの手法について簡単に説明し、その長所と短所が注目されます。"
    },
    {
      "indent": 0,
      "text": "4.1 Retransmission",
      "section_title": true,
      "ja": "4.1再送信"
    },
    {
      "indent": 3,
      "text": "Retransmission of lost packets is an obvious means by which loss may be repaired. It is clearly of value in non-interactive applications, with relaxed delay bounds, but the delay imposed means that it does not typically perform well for interactive use.",
      "ja": "失われたパケットの再送信は、損失が修復されるかもしれない明白な手段です。これは、リラックスした遅延限度で、非対話型アプリケーションでは明確に価値のですが、課せられた遅延は、通常、対話的に使用するために十分に機能していないことを意味します。"
    },
    {
      "indent": 3,
      "text": "In addition to the possibly high latency, there is a potentially large bandwidth overhead to the use of retransmission. Not only are units of data sent multiple times, but additional control traffic must flow to request the retransmission. It has been shown that, in a large Mbone session, most packets are lost by at least one receiver [8]. In this case the overhead of requesting retransmission for most packets may be such that the use of forward error correction is more acceptable. This leads to a natural synergy between the two mechanisms, with a forward error correction scheme being used to repair all single packet losses, and those receivers experiencing burst losses, and willing to accept the additional latency, using retransmission based repair as an additional recovery mechanism. Similar mechanisms have been used in a number of reliable multicast schemes, and have received some discussion in the literature [9, 13].",
      "ja": "おそらく高遅延に加えて、再送の使用に潜在的に大きな帯域幅オーバーヘッドがあります。データの単位は、複数回送信されますが、追加の制御トラフィックは、再送信を要求するために流れなければならないだけでなく。大規模なMBONEセッションで、ほとんどのパケットは、少なくとも一つの受信機[8]によって失われることが示されています。この場合、ほとんどのパケットの再送を要求するオーバーヘッドは、前方誤り訂正の使用は、より許容されるようにしてもよいです。これは、付加的な回復メカニズムとして再送信リペアを使用して、全ての単一パケット損失を修復するために使用される順方向誤り訂正方式、バースト損失を経験し、それらの受信機、及び追加の遅延を受け入れると、二つのメカニズム間の自然な相乗効果をもたらします。同様のメカニズムは、信頼性の高いマルチキャスト方式の数に使用されており、文献[9、13]、いくつかの議論を受けています。"
    },
    {
      "indent": 3,
      "text": "In order to reduce the overhead of retransmission, the retransmitted units may be piggy-backed onto the ongoing transmission, using a payload format such as that described in [15]. This also allows for the retransmission to be recoded in a different format, to further reduce the bandwidth overhead. As an alternative, FEC information may be sent in response to retransmission requests [13], allowing a single retransmission to potentially repair several losses. The choice of a retransmission request algorithm which is both timely and network friendly is an area of current study. An obvious starting point is the SRM protocol [7], and experiments have been conducted using this, and with a low-delay variant, STORM [20]. This work shows the trade-off between latency and quality for retransmission based repair schemes, and illustrates that retransmission is an effective approach to repair for applications which can tolerate the latency.",
      "ja": "再送信のオーバーヘッドを低減するために、再送単位は、[15]に記載されているように、ペイロード・フォーマットを使用して、進行中の送信にピギーバックすることができます。これはまた、帯域幅のオーバーヘッドを低減するために、別の形式で再符号化する再送信を可能にします。代替として、FEC情報は、単一の再送が潜在的にいくつかの損失を修復することができ、再送要求[13]に応答して送信されても​​よいです。フレンドリータイムリーとネットワークの両方で再送要求アルゴリズムの選択は、現在の研究の領域です。明白な出発点は、[7] SRMプロトコルであり、実験は、これを使用して行われており、低遅延変異体と、STORM [20]。この作業は、再送ベースの修復方式の待ち時間と品質の間のトレードオフを示しており、再送の待ち時間を許容できる用途に修復するのに有効なアプローチであることを示しています。"
    },
    {
      "indent": 3,
      "text": "There is no standard protocol framework for requesting retransmission of streaming media. An experimental RTP profile extension for SRM-style retransmission requests has described in [14].",
      "ja": "ストリーミングメディアの再送信を要求するための標準的なプロトコルフレームワークはありません。 SRM-スタイルの再送要求のための実験的なRTPプロファイルの拡張子は[14]に記載されています。"
    },
    {
      "indent": 0,
      "text": "4.2 Forward Error Correction",
      "section_title": true,
      "ja": "4.2前方誤り訂正"
    },
    {
      "indent": 3,
      "text": "Forward error correction (FEC) is the means by which repair data is added to a media stream, such that packet loss can be repaired by the receiver of that stream with no further reference to the sender. There are two classes of repair data which may be added to a stream: those which are independent of the contents of the stream, and those which use knowledge of the stream to improve the repair process.",
      "ja": "前方誤り訂正（FEC）は、リペアデータは、パケット損失が送信者にないさらに参照して、そのストリームの受信機によって修復することができるように、メディア・ストリームに追加される手段です。ストリームの内容とは無関係であるもの、および修復プロセスを改善するために、ストリームの知識を使用するもの：ストリームに添加することができるリペアデータの2つのクラスがあります。"
    },
    {
      "indent": 0,
      "text": "4.2.1 Media-Independent FEC",
      "section_title": true,
      "ja": "4.2.1メディアに依存しないFEC"
    },
    {
      "indent": 3,
      "text": "A number of media-independent FEC schemes have been proposed for use with streamed media. These techniques add redundant data, which is transmitted in separate packets, to a media stream. Traditionally, FEC techniques are described as loss detecting and/or loss correcting. In the case of streamed media, loss detection is provided by the sequence numbers in RTP packets.",
      "ja": "メディアに依存しないFECスキームの数がストリーミングメディアで使用するために提案されています。これらの技術は、メディア・ストリームに、別々のパケットで送信される冗長データを追加します。伝統的には、FEC技術は、損失の検出及び/又は損失補正として記載されています。ストリーミングメディアの場合には、損失の検出は、RTPパケットのシーケンス番号によって提供されます。"
    },
    {
      "indent": 3,
      "text": "The redundant FEC data is typically calculated using the mathematics of finite fields [1]. The simplest of finite field is GF(2) where addition is just the eXclusive-OR operation. Basic FEC schemes transmit k data packets with n-k parity packets allowing the reconstruction of the original data from any k of the n transmitted packets. Budge et al [4] proposed applying the XOR operation across different combinations of the media data with the redundant data transmitted separately as parity packets. These vary the pattern of packets over which the parity is calculated, and hence have different bandwidth, latency and loss repair characteristics.",
      "ja": "冗長FECデータは、典型的には、[1]の有限体の数学を使用して計算されます。有限体の最も単純な添加は単に排他的論理和演算であるGF（2）です。基本的なFECスキームは、n-k個のパリティパケットはN送信されたパケットの任意kから元のデータの再構築を可能にしてk個のデータパケットを送信します。動から[4]のパリティパケットとして別々に送信冗長データとメディアデータの異なる組み合わせを横切ってXOR演算を適用することを提案しました。これらは、パリティが計算されるパケットのパターンを変化させる、したがって異なる帯域幅、待ち時間及び損失修復特性を有します。"
    },
    {
      "indent": 3,
      "text": "Parity-based FEC based techniques have a significant advantage in that they are media independent, and provide exact repair for lost packets. In addition, the processing requirements are relatively light, especially when compared with some media-specific FEC (redundancy) schemes which use very low bandwidth, but high complexity encodings. The disadvantage of parity based FEC is that the codings have higher latency in comparison with the media-specific schemes discussed in following section.",
      "ja": "パリティベースのFECベースの技術は、彼らはメディアが独立していることに大きな利点を持っている、そして失われたパケットの正確な修理を提供しています。また、処理要件が非常に低い帯域幅が、高複雑エンコーディングを使用する一部のメディア固有FEC（冗長性）方式と比較する場合は特に、比較的軽いです。 FECベースのパリティの欠点は、コーディングセクションを以下で説明したメディア固有の方式と比較してより高いレイテンシを有することです。"
    },
    {
      "indent": 3,
      "text": "A number of FEC schemes exist which are based on higher-order finite fields, for example Reed-Solomon (RS) codes, which are more sophisticated and computationally demanding. These are usually structured so that they have good burst loss protection, although this typically comes at the expense of increased latency. Dependent on the observed loss patterns, such codes may give improved performance, compared to parity-based FEC.",
      "ja": "FECスキームの数は高次有限体、より洗練された計算要求され、例えばリードソロモン（RS）コードに基づいているが存在します。彼らは良いバースト損失保護を持っているように、これは一般的に増加し、レイテンシを犠牲にしてが、これらは通常、構造化されています。観察された損失パターンに依存し、そのようなコードは、パリティ・ベースのFECに比べて、改善された性能を与えることができます。"
    },
    {
      "indent": 3,
      "text": "An RTP payload format for generic FEC, suitable for both parity based and Reed-Solomon encoded FEC is defined in [17].",
      "ja": "両方のパリティに適した一般的なFECのためのRTPペイロードフォーマットは、ベースとリードソロモンFECが[17]で定義される符号化されました。"
    },
    {
      "indent": 0,
      "text": "4.2.2 Media-Specific FEC",
      "section_title": true,
      "ja": "4.2.2メディア固有のFEC"
    },
    {
      "indent": 3,
      "text": "The basis of media-specific FEC is to employ knowledge of a media compression scheme to achieve more efficient repair of a stream than can otherwise be achieved. To repair a stream subject to packet loss, it is necessary to add redundancy to that stream: some information is added which is not required in the absence of packet loss, but which can be used to recover from that loss.",
      "ja": "メディア固有のFECの基礎は、そうでなければ達成することができるよりもストリームのより効率的な修復を達成するために、メディア圧縮スキームの知識を使用することです。パケット損失が存在しない場合に必要とされないいくつかの情報が付加されるが、その損失から回復するために使用することができる：パケット損失のストリーム被写体を修復するために、そのストリームに冗長性を追加する必要があります。"
    },
    {
      "indent": 3,
      "text": "The nature of a media stream affects the means by which the redundancy is added. If units of media data are packets, or if multiple units are included in a packet, it is logical to use the unit as the level of redundancy, and to send duplicate units. By recoding the redundant copy of a unit, significant bandwidth savings may be made, at the expense of additional computational complexity and approximate repair. This approach has been advocated for use with streaming audio [2, 10] and has been shown to perform well. An RTP payload format for this form of redundancy has been defined [15].",
      "ja": "メディアストリームの性質は、冗長性が追加される手段に影響を与えます。メディアデータの単位がパケットである場合、または複数のユニットがパケットに含まれている場合には、冗長性のレベルとしてユニットを使用する、重複ユニットを送信するために論理的です。ユニットの冗長コピーを再コーディングすることにより、大幅な帯域幅の節約は、追加の計算の複雑さとおおよその修理の費用で、製造することができます。このアプローチは、ストリーミングオーディオ[2]、[10]で使用するために提唱されており、良好に機能することが示されています。冗長性のこの形のためのRTPペイロードフォーマットが定義されている[15]。"
    },
    {
      "indent": 3,
      "text": "If media units span multiple packets, for instance video, it is sensible to include redundancy directly within the output of a codec. For example the proposed RTP payload for H.263+ [3] includes multiple copies of key portions of the stream, separated to avoid the problems of packet loss. The advantages of this second approach is efficiency: the codec designer knows exactly which portions of the stream are most important to protect, and low complexity since each unit is coded once only.",
      "ja": "メディアユニットが複数のパケットにまたがる場合、例えばビデオのため、直接コーデックの出力内の冗長性を含めることが賢明です。例えば、ストリームのキー部分の複数のコピーを含む[3] H.263 +のための提案されたRTPペイロードは、パケット損失の問題を回避するために分離しました。この第二のアプローチの利点は効率である：コーデックの設計者は、ストリームの部分は保護することが最も重要であるかを正確に知っており、各ユニットので低複雑度は一度のみ符号化されます。"
    },
    {
      "indent": 3,
      "text": "An alternative approach is to apply media-independent FEC techniques to the most significant bits of a codecs output, rather than applying it over the entire packet. Several codec descriptions include bit sensitivities that make this feasible. This approach has low computational cost and can be tailored to represent an arbitrary fraction of the transmitted data.",
      "ja": "別のアプローチではなく、パケット全体にわたり、それを適用するよりも、コーデックの出力の最上位ビットに、メディアに依存しないFEC技術を適用することです。いくつかのコーデックの説明は、これが実現可能にビット感度が含まれます。このアプローチは、低い計算コストを有しており、送信されたデータの任意の部分を表すように調整することができます。"
    },
    {
      "indent": 3,
      "text": "The use of media-specific FEC has the advantage of low-latency, with only a single-packet delay being added. This makes it suitable for interactive applications, where large end-to-end delays cannot be tolerated. In a uni-directional non-interactive environment it is possible to delay sending the redundant data, achieving improved performance in the presence of burst losses [11], at the expense of additional latency.",
      "ja": "メディア固有のFECの使用は、単一のパケット遅延が追加されると、低遅延の利点を有します。これは、大規模なエンド・ツー・エンドの遅延を許容できないインタラクティブなアプリケーション、に適しています。一方向非対話型環境では、付加的な待ち時間を犠牲にして、バースト損失[11]の存在下で改善された性能を達成し、冗長データの送信を遅延させることが可能です。"
    },
    {
      "indent": 0,
      "text": "4.3 Interleaving",
      "section_title": true,
      "ja": "4.3インターリーブ"
    },
    {
      "indent": 3,
      "text": "When the unit size is smaller than the packet size, and end-to-end delay is unimportant, interleaving [16] is a useful technique for reducing the effects of loss. Units are resequenced before transmission, so that originally adjacent units are separated by a guaranteed distance in the transmitted stream, and returned to their original order at the receiver. Interleaving disperses the effect of packet losses. If, for example, units are 5ms in length and packets 20ms (ie: 4 units per packet), then the first packet could contain units 1, 5, 9, 13; the second packet would contain units 2, 6, 10, 14; and so on. It can be seen that the loss of a single packet from an interleaved stream results in multiple small gaps in the reconstructed stream, as opposed to the single large gap which would occur in a non-interleaved stream. In many cases it is easier to reconstruct a stream with such loss patterns, although this is clearly media and codec dependent. Note that the size of the gaps is dependent on the degree of interleaving used, and can be made arbitrarily small at the expense of additional latency.",
      "ja": "単位サイズがパケットサイズよりも小さく、エンドツーエンド遅延が重要でない場合、インターリーブ[16]損失の影響を低減するために有用な技術です。ユニットは元々隣接ユニットが送信されたストリームで保証距離によって分離されるように、送信前に再配列決定、および受信機で元の順序に戻されます。インターリーブは、パケットロスの影響を分散させます。例えば、単位長さパケットは20ms（すなわち、パケットあたり4単位）で5ミリ秒である、場合は、最初のパケットはユニット1、5、9、13を含むことができます。第2のパケットは、ユニット2、6、10、14を含むであろう。等々。非インタリーブストリームで生じる単一の大きなギャップとは対照的に、それは、再構成されたストリーム内の複数の小さな隙間にインターリーブドストリーム結果から単一パケットのロスことがわかります。これは明らかに、メディアおよびコーデック依存しているが、多くの場合、そのような損失パターンでストリームを再構築することが容易です。ギャップのサイズは、使用されるインタリーブの程度に依存して、追加のレイテンシを犠牲にして、任意に小さくすることができることに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "The obvious disadvantage of interleaving is that it increases latency. This limits the use of this technique for interactive applications, although it performs well for non-interactive use. The major advantage of interleaving is that it does not increase the bandwidth requirements of a stream.",
      "ja": "インタリーブの明白な欠点は、待ち時間を増加させることです。それは、非対話的に使用するために良好に機能するが、これは、インタラクティブなアプリケーションのためのこの技術の使用を制限します。インターリーブの主な利点は、それがストリームの帯域幅要件を増加させないということです。"
    },
    {
      "indent": 3,
      "text": "A potential RTP payload format for interleaved data is a simple extension of the redundant audio payload [15]. That payload requires that the redundant copy of a unit is sent after the primary. If this restriction is removed, it is possible to transmit an arbitrary interleaving of units with this payload format.",
      "ja": "インターリーブされたデータのための潜在的なRTPペイロードフォーマットは、冗長オーディオペイロード[15]の単純な拡張です。そのペイロードは、ユニットの冗長コピーをプライマリ後に送信されることを必要とします。この制限が取り除かれた場合は、このペイロードフォーマットを有するユニットの任意のインタリーブを送信することが可能です。"
    },
    {
      "indent": 0,
      "text": "5 Recommendations",
      "ja": "5つの勧告"
    },
    {
      "indent": 3,
      "text": "If the desired scenario is a non-interactive uni-directional transmission, in the style of a radio or television broadcast, latency is of considerably less importance than reception quality. In this case, the use of interleaving, retransmission based repair or FEC is appropriate. If approximate repair is acceptable, interleaving is clearly to be preferred, since it does not increase the bandwidth of a stream. Media independent FEC is typically the next best option, since a single FEC packet has the potential to repair multiple lost packets, providing efficient transmission.",
      "ja": "所望のシナリオがラジオやテレビ放送のスタイルで、非対話型単方向伝送である場合、待ち時間は、受信品質よりもかなり少ない重要です。この場合、インターリーブ、再送ベースの修理やFECの使用が適切です。おおよその修復が許容可能であるならば、それはストリームの帯域幅を増加させないために、インターリーブは、好ましいことが明らかにあります。単一FECパケットが効率的な伝送を提供し、複数の失われたパケットを修復する可能性を秘めているので、メディアの独立したFECは、一般的に次の最善の選択肢です。"
    },
    {
      "indent": 3,
      "text": "In an interactive session, the delay imposed by the use of interleaving and retransmission is not acceptable, and a low-latency FEC scheme is the only means of repair suitable. The choice between media independent and media specific forward error correction is less clear-cut: media-specific FEC can be made more efficient, but requires modification to the output of the codec. When defining the packet format for a new codec, this is clearly an appropriate technique, and should be encouraged.",
      "ja": "対話型セッションでは、インタリーブ及び再送の使用によって課される遅延が許容されず、低遅延FECスキームは、適切な修復の唯一の手段です。メディア固有のFECをより効率的に行うことができますが、コーデックの出力に変更する必要があり：独立したメディアおよびメディア固有の前方誤り訂正の間の選択は、あまり明確です。新しいコーデックのパケットフォーマットを定義する場合、これは明らかに、適切な技術であり、奨励されるべきです。"
    },
    {
      "indent": 3,
      "text": "If an existing codec is to be used, a media independent forward error correction scheme is usually easier to implement, and can perform well. A media stream protected in this way may be augmented with retransmission based repair with minimal overhead, providing improved quality for those receivers willing to tolerate additional delay, and allowing interactivity for those receivers which desire it. Whilst the addition of FEC data to an media stream is an effective means by which that stream may be protected against packet loss, application designers should be aware that the addition of large amounts of repair data when loss is detected will increase network congestion, and hence packet loss, leading to a worsening of the problem which the use of error correction coding was intended to solve.",
      "ja": "既存のコーデックを使用する場合は、メディアの独立した前方誤り訂正方式は、通常、実装が簡単で、よく実行することができます。このように保護されたメディア・ストリームは、追加の遅延を許容することが喜んでそれらの受信機のための改良された品質を提供し、最小限のオーバーヘッドで再送基づいて修復に増大し、それを望んでそれらの受信機のための双方向性を可能にすることができます。メディアストリームにFECデータの添加はそのストリームがパケット損失から保護することができることにより、有効な手段であるが、アプリケーション設計者は、損失が検出されたリペアデータの多量の添加はネットワークの輻輳を増加することに注意する必要があり、従ってパケット損失、誤り訂正符号化の使用を解決することを意図していた問題の悪化につながります。"
    },
    {
      "indent": 3,
      "text": "At the time of writing, there is no standard solution to the problem of congestion control for streamed media which can be used to solve this problem. There have, however, been a number of contributions which show the likely form the solution will take [12, 19]. This work typically used some form of layered encoding of data over multiple channels, with receivers joining and leaving layers in response to packet-loss (which indicates congestion). The aim of such schemes is to emulate the congestion control behavior of a TCP stream, and hence compete fairly with non-real time traffic. This is necessary for stable network behavior in the presence of much streamed media.",
      "ja": "執筆時点では、この問題を解決するために使用することができるストリーミングメディアの輻輳制御の問題に対する標準溶液はありません。しかし、解決策がかかりますおそらくフォームを表示拠出金の数が行われている[12、19]。この作業は、典型的には、受信機が（渋滞を示す）パケット損失に応答して層を接合し、離れると、複数のチャネルを介してデータの階層符号化のいくつかのフォームを使用します。そのようなスキームの目的は、TCPストリームの輻輳制御動作をエミュレートし、したがって非リアルタイムトラフィックとかなり競争することです。これは、多くのストリーミングメディアの存在下で安定したネットワーク動作のために必要です。"
    },
    {
      "indent": 3,
      "text": "Since streaming media applications are in use now, without congestion control, it is important to give some advice to authors of those tools as to the behavior which is acceptable, until congestion control mechanisms can be deployed. The remainder of this section uses the throughput of a TCP connection over a link with a given loss rate as an example to indicate behavior which may be classified as reasonable.",
      "ja": "ストリーミングメディアアプリケーションは、現在使用されているので、輻輳制御メカニズムを展開することができるようになるまで、輻輳制御なしで、許容される行動へとこれらのツールの作者にいくつかのアドバイスを与えることが重要です。このセクションの残りの部分は、合理的に分類することができる動作を示すための例として与えられた損失率を持つリンク上でTCPコネクションのスループットを使用します。"
    },
    {
      "indent": 3,
      "text": "As a number of authors have noted (eg: [6]), the loss rate and throughput of a TCP connection are approximately related as follows:",
      "ja": "著者の数は指摘している（例えば：[6]）は、以下のように、TCP接続の損失率とスループットはほぼ関連しています。"
    },
    {
      "indent": 4,
      "text": "T = (s * c) / (RTT * sqrt(p))",
      "ja": "T =（S * C）/（RTT *のSQRT（P））"
    },
    {
      "indent": 3,
      "text": "where T is the observed throughput in octets per second, s is the packet size in octets, RTT is the round-trip time for the session in seconds, p is the packet loss rate and c is a constant in the range 0.9...1.5 (a value of 1.22 has been suggested [6]). Using this relation, one may determine the packet loss rate which would result in a given throughput for a particular session, if a TCP connection was used.",
      "ja": "Tは、秒当たりオクテットで観察されたスループットであり、sはオクテットのパケットサイズであり、RTTは秒単位でセッションの往復時間であり、pはパケットロス率であり、cは、範囲0.9で一定であり、... 1.5（1.22の値は、[6]が提案されています）。 TCP接続が使用された場合には、この関係を用いて、一つは、特定のセッションのために与えられたスループットをもたらすパケット損失率を決定してもよいです。"
    },
    {
      "indent": 3,
      "text": "Whilst this relation between packet loss rate and throughput is specific to the TCP congestion control algorithm, it also provides an estimate of the acceptable loss rate for a streaming media application using the same network path, which wishes to coexist fairly with TCP traffic. Clearly this is not sufficient for fair sharing of a link with TCP traffic, since it does not capture the dynamic behavior of the connection, merely the average behavior, but it does provide one definition of \"reasonable\" behavior in the absence of real congestion control.",
      "ja": "パケットロス率とスループットとの間のこの関係は、TCPの輻輳制御アルゴリズムに固有であるが、それはまた、TCPトラフィックと公平に共存することを望む同じネットワークパスを使用して、ストリーミングメディアアプリケーションの許容損失率の推定値を提供します。明らかにそれは接続、単に平均行動の動的挙動を捕捉していないので、これは、TCPトラフィックとのリンクの公平な共有のために十分ではありませんが、それは本当の輻輳制御が存在しない場合に「合理的な」行動の一つの定義が提供されてい。"
    },
    {
      "indent": 3,
      "text": "For example, an RTP audio session with DVI encoding and 40ms data packets will have 40 bytes RTP/UDP/IP header, 4 bytes codec state and 160 bytes of media data, giving a packet size, s, of 204 bytes. It will send 25 packets per second, giving T = 4800. It is possible to estimate the round-trip time from RTCP reception report statistics (say 200 milliseconds for the purpose of example). Substituting these values into the above equation, we estimate a \"reasonable\" packet loss rate, p, of 6.7%. This would represent an upper bound on the packet loss rate which this application should be designed to tolerate.",
      "ja": "例えばDVI符号化および40msのデータパケットは204バイトのパケットサイズSを与え、40バイトのRTP / UDP / IPヘッダ、4バイトコーデック状態とメディアデータの160のバイトを有するであろうと、RTPオーディオセッション。 RTCP受信レポート統計（例の目的のために200ミリ秒を言う）からの往復時間を推定することが可能であるT = 4800を与え、毎秒25個のパケットを送信します。上記の式にこれらの値を代入すると、我々は、6.7％の「合理的な」パケット損失率、Pを推定します。これは、このアプリケーションは耐えるように設計されなければならないパケット損失率の上限を表します。"
    },
    {
      "indent": 3,
      "text": "It should be noted that a round trip time estimate based on RTCP reception report statistics is, at best, approximate; and that a round trip time for a multicast group can only be an `average' measure. This implies that the TCP equivalent throughput/loss rate determined by this relation will be an approximation of the upper bound to the rate a TCP connection would actually achieve.",
      "ja": "RTCP受信レポートの統計情報に基づいて、ラウンドトリップ時間の推定値は、最高の状態で、近似していることに留意すべきです。マルチキャストグループのための往復時間はわずか `平均」測定することができます。これは、この関係によって決まるTCP同等のスループット/損失率は、TCP接続が実際に達成するであろう率に上限の近似値になることを意味しています。"
    },
    {
      "indent": 0,
      "text": "6 Security Considerations",
      "ja": "6セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "Some of the repair techniques discussed in this document result in the transmission of additional traffic to correct for the effects of packet loss. Application designers should be aware that the transmission of large amounts of repair traffic will increase network congestion, and hence packet loss, leading to a worsening of the problem which the use of error correction was intended to solve. At its worst, this can lead to excessive network congestion and may constitute a denial of service attack. Section 5 discusses this in",
      "ja": "修理技術のいくつかは、パケットロスの影響を補正するために追加のトラフィックの伝送では、この文書の結果で説明します。アプリケーション設計者は、修理大量のトラフィックの送信がエラー訂正の使用が解決することを意図していた問題の悪化につながる、ネットワークの混雑を増加させ、ひいてはパケット損失になることに注意する必要があります。その最悪の場合、これは、過剰なネットワークの混雑につながることができますし、サービス拒否攻撃を構成することができます。第5節では、これを議論します"
    },
    {
      "indent": 3,
      "text": "more detail, and provides guidelines for prevention of this problem.",
      "ja": "詳細、およびこの問題の防止のためのガイドラインを提供します。"
    },
    {
      "indent": 0,
      "text": "7 Summary",
      "ja": "7まとめ"
    },
    {
      "indent": 3,
      "text": "Streaming media applications using the Internet will be subject to packet loss due to the unreliable nature of UDP packet delivery. This document has summarized the typical loss patterns seen on the public Mbone at the time of writing, and a range of techniques for recovery from such losses. We have further discussed the need for congestion control, and provided some guidelines as to reasonable behavior for streaming applications in the interim until congestion control can be deployed.",
      "ja": "インターネットを使用してストリーミングメディアアプリケーションが原因UDPパケットの配信の信頼できない性質のために、パケット損失の対象となります。この文書では、書き込み時に公共MBONE、およびこのような損失からの回復のための技術の範囲で見られる典型的な損失パターンをまとめました。我々はさらに、輻輳制御の必要性を議論し、輻輳制御を展開することができるまでの暫定でストリーミングアプリケーションのための合理的な行動へといくつかのガイドラインを提供しています。"
    },
    {
      "indent": 0,
      "text": "8 Acknowledgments",
      "ja": "8つの謝辞"
    },
    {
      "indent": 3,
      "text": "The authors wish to thank Phil Karn and Lorenzo Vicisano for their helpful comments.",
      "ja": "作者は彼らの役に立つコメントをフィル・カーンとロレンツォVicisanoに感謝したいです。"
    },
    {
      "indent": 0,
      "text": "9 Authors' Addresses",
      "ja": "9本の著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Colin Perkins Department of Computer Science University College London Gower Street London WC1E 6BT United Kingdom",
      "ja": "コンピュータサイエンス大学ロンドンガウアーストリートロンドンWC1E 6BTイギリスのコリンパーキンス部門"
    },
    {
      "indent": 3,
      "text": "EMail: c.perkins@cs.ucl.ac.uk",
      "ja": "メールアドレス：c.perkins@cs.ucl.ac.uk"
    },
    {
      "indent": 3,
      "text": "Orion Hodson Department of Computer Science University College London Gower Street London WC1E 6BT United Kingdom",
      "ja": "コンピュータサイエンス大学ロンドンガウアーストリートロンドンWC1E 6BTイギリスのオリオンホドソン部門"
    },
    {
      "indent": 3,
      "text": "EMail: o.hodson@cs.ucl.ac.uk",
      "ja": "メールアドレス：o.hodson@cs.ucl.ac.uk"
    },
    {
      "indent": 0,
      "text": "References",
      "ja": "リファレンス"
    },
    {
      "indent": 3,
      "text": "[1] R.E. Blahut. Theory and Practice ofError Control Codes. Addison Wesley, 1983.",
      "ja": "[1] R.E. Blahut。誤り制御符号の理論と実践。アディソンウェズリー、1983。"
    },
    {
      "indent": 3,
      "text": "[2] J.-C. Bolot and A. Vega-Garcia. The case for FEC based error control for packet audio in the Internet. To appear in ACM Multimedia Systems.",
      "ja": "[2] J.-C. BolotとA.ベガ・ガルシア。インターネットにおけるパケットオーディオのためのFECによるエラー制御のためのケース。 ACMマルチメディアシステムに表示されます。"
    },
    {
      "indent": 3,
      "text": "[3] C. Bormann, L. Cline, G. Deisher, T. Gardos, C. Maciocco, D. Newell, J. Ott, S. Wenger, and C. Zhu. RTP payload format for the 1998 version of ITU-T reccomendation H.263 video (H.263+). Work in Progress.",
      "ja": "[3] C.ボルマン、L.クライン、G. Deisher、T.ガルドス、C. Maciocco、D.ニューウェル、J.オット、S.ウェンガー、及びC.朱。 ITU-T reccomendationのH.263ビデオ1998年版（H.263 +）についてのRTPペイロードフォーマット。進行中の作業。"
    },
    {
      "indent": 3,
      "text": "[4] D. Budge, R. McKenzie, W. Mills, W. Diss, and P. Long. Media-independent error correction using RTP, Work in Progress.",
      "ja": "[4] D.・バッジ、R.マッケンジー、W.ミルズ、W.ディス、およびP.ロング。 RTP、進行中の作業を使用してメディアに依存しないエラー訂正。"
    },
    {
      "indent": 3,
      "text": "[5] G. Carle and E. W. Biersack. Survey of error recovery techniques for IP-based audio-visual multicast applications. IEEE Network, 11(6):24--36, November/December 1997.",
      "ja": "[5] G.カール及びE. W. Biersack。 IPベースのオーディオ・ビジュアルマルチキャストアプリケーションのためのエラー回復技術の調査。 IEEEネットワーク、11（6）：24--36、11月/ 1997年12月。"
    },
    {
      "indent": 3,
      "text": "[6] S. Floyd and K. Fall. Promoting the use of end-to-end congestion control in the internet. Submitted to IEEE/ACM Transactions on Networking, February 1998.",
      "ja": "[6] S.フロイド及びK.が入ります。インターネットでのエンドツーエンドの輻輳制御の使用を推進します。ネットワーキング、1998年2月にIEEE / ACM取引に提出。"
    },
    {
      "indent": 3,
      "text": "[7] S. Floyd, V. Jacobson, S. McCanne, C.-G. Liu, and L. Zhang. A reliable multicast framework for light-weight sessions and applications level framing. IEEE/ACM Transactions on Networking, 1995.",
      "ja": "[7] S.フロイド、V. Jacobsonの、S. McCanne、C.-G.劉、およびL.チャン。軽量セッションおよびアプリケーション・レベル・フレーミングのための信頼できるマルチキャストフレームワーク。ネットワーキング、1995年IEEE / ACM取引。"
    },
    {
      "indent": 3,
      "text": "[8] M. Handley. An examination of Mbone performance. USC/ISI Research Report: ISI/RR-97-450, April 1997.",
      "ja": "[8] M. Handleyの。 MBONE性能の検討。 USC / ISI研究報告書：ISI / RR-97から450、1997年4月。"
    },
    {
      "indent": 3,
      "text": "[9] M. Handley and J. Crowcroft. Network text editor (NTE): A scalable shared text editor for the Mbone. In Proceedings ACM SIGCOMM'97, Cannes, France, September 1997.",
      "ja": "[9] M. HandleyのおよびJ.クロウクロフト。ネットワークテキストエディタ（NTE）：MBONEのためのスケーラブルな共有のテキストエディタ。議事ACM SIGCOMM'97、カンヌ、フランス、1997年9月。"
    },
    {
      "indent": 2,
      "text": "[10] V. Hardman, M. A. Sasse, M. Handley, and A. Watson. Reliable audio for use over the Internet. In Proceedings of INET'95, 1995.",
      "ja": "[10] V.ハードマン、M. A.ザッセ、M.ハンドレー、およびA.ワトソン。インターネット上での使用のための信頼性の高いオーディオ。 INET'95、1995年の議事録。"
    },
    {
      "indent": 2,
      "text": "[11] I. Kouvelas, O. Hodson, V. Hardman, and J. Crowcroft. Redundancy control in real-time Internet audio conferencing. In Proceedings of AVSPN'97, Aberdeen, Scotland, September 1997.",
      "ja": "[11] I. Kouvelas、O.ホドソン、V.ハードマン、およびJ.クロウクロフト。リアルタイムインターネット音声会議における冗長制御。 AVSPN'97、アバディーン、スコットランド、1997年9月の議事録。"
    },
    {
      "indent": 2,
      "text": "[12] S. McCanne, V. Jacobson, and M. Vetterli. Receiver-driven layered multicast. In Proceedings ACM SIGCOMM'96, Stanford, CA., August 1996.",
      "ja": "[12] S. McCanne、V. Jacobsonの、およびM. Vetterli。受信端末駆動型階層化マルチキャスト。議事ACM SIGCOMM'96、スタンフォード大学、カリフォルニア、1996年8月に。"
    },
    {
      "indent": 2,
      "text": "[13] J. Nonnenmacher, E. Biersack, and D. Towsley. Parity-based loss recovery for reliable multicast transmission. In Proceedings ACM SIGCOMM'97, Cannes, France, September 1997.",
      "ja": "[13] J. Nonnenmacher、E. Biersack、及びD. Towsley。信頼性の高いマルチキャスト伝送のためのパリティベースの損失回復。議事ACM SIGCOMM'97、カンヌ、フランス、1997年9月。"
    },
    {
      "indent": 2,
      "text": "[14] P. Parnes. RTP extension for scalable reliable multicast, Work in Progress.",
      "ja": "[14] P. Parnes。スケーラブルな信頼性の高いマルチキャストのためのRTP拡張が進行中で働いています。"
    },
    {
      "indent": 2,
      "text": "[15] Perkins, C., Kouvelas, I., Hodson, O., Hardman, V., Handley, M., Bolot, J-C., Vega-Garcia, A., and S. Fosse-Parisis, \"RTP Payload for Redundant Audio Data\", RFC 2198, September 1997.",
      "ja": "[15]パーキンス、C.、Kouvelas、I.、ホドソン、O.、ハードマン、V.、ハンドレー、M.、Bolot、JC。、ベガ・ガルシア、A.、およびS.フォッシー-Parisis、「RTPペイロード冗長オーディオ・データ」、RFC 2198、1997年9月のため。"
    },
    {
      "indent": 2,
      "text": "[16] J.L. Ramsey. Realization of optimum interleavers. IEEE Transactions on Information Theory, IT-16:338--345, May 1970.",
      "ja": "[16] J.L.ラムジー。最適なインタリーバの実現。 338--345、1970年5月：情報理論、IT-16上のIEEEトランザクション。"
    },
    {
      "indent": 2,
      "text": "[17] J. Rosenberg and H. Schulzrinne. An A/V profile extension for generic forward error correction in RTP. Work in Progress.",
      "ja": "[17] J.ローゼンバーグ、およびH. Schulzrinneと。 RTPでの一般的な前方誤り訂正のためのA / Vプロファイル拡張。進行中の作業。"
    },
    {
      "indent": 2,
      "text": "[18] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson, \"RTP: A transport protocol for real-time applications\", RFC 1889, January 1996.",
      "ja": "[18] Schulzrinneと、H.、Casner、S.、フレデリック、R.、およびV. Jacobsonの \"RTP：リアルタイムアプリケーション用のトランスポート・プロトコル\"、RFC 1889、1996年1月。"
    },
    {
      "indent": 2,
      "text": "[19] L. Vicisano, L. Rizzo, and Crowcroft J. TCP-like congestion control for layered multicast data transfer. In Proceedings IEEE INFOCOM'98, 1998.",
      "ja": "[19] L. Vicisano、L.リゾー、及び階層化マルチキャストデータ転送のためのクロウクロフトJ. TCPのような輻輳制御。議事IEEE INFOCOM'98、1998年。"
    },
    {
      "indent": 2,
      "text": "[20] R. X. Xu, A. C. Myers, H. Zhang, and R. Yavatkar. Resilient multicast support for continuous media applications. In Proceedingsof the 7th International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV'97), Washington University in St. Louis, Missouri, May 1997.",
      "ja": "[20] R. X.徐、A. C.マイヤーズ、H.チャン、およびR. Yavatkar。連続メディアアプリケーションのための弾力性のあるマルチキャストサポート。ネットワーク上のProceedingsofで第7回国際ワークショップとデジタルオーディオとビデオのためのオペレーティングシステムのサポート（NOSSDAV'97）、セントルイスのワシントン大学、ミズーリ州、1997年5月。"
    },
    {
      "indent": 2,
      "text": "[21] M. Yajnik, J. Kurose, and D. Towsley. Packet loss correlation in the Mbone multicast network. In Proceedings IEEE Global Internet Conference, November 1996.",
      "ja": "[21] M. Yajnik、J.黒瀬、及びD. Towsley。 MBONEマルチキャストネットワークにおけるパケット損失の相関関係。議事IEEEグローバル・インターネット会議、1996年11月。"
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "ja": "完全な著作権声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (1998). All Rights Reserved.",
      "ja": "著作権（C）インターネット協会（1998）。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "ja": "この文書とその翻訳は、コピーして他の人に提供し、それ以外についてはコメントまたは派生物は、いかなる種類の制限もなく、全体的にまたは部分的に、準備コピーし、公表して配布することができることを説明したり、その実装を支援することができます、上記の著作権表示とこの段落は、すべてのそのようなコピーや派生物に含まれていることを条件とします。しかし、この文書自体は著作権のための手順はで定義されている場合には、インターネット標準を開発するために必要なものを除き、インターネットソサエティもしくは他のインターネット関連団体に著作権情報や参照を取り除くなど、どのような方法で変更されないかもしれませんインターネット標準化プロセスが続く、または英語以外の言語に翻訳するために、必要に応じなければなりません。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "ja": "上記の制限は永久で、インターネット学会やその後継者や譲渡者によって取り消されることはありません。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "ja": "この文書とここに含まれている情報は、基礎とインターネットソサエティおよびインターネットエンジニアリングタスクフォースはすべての保証を否認し、明示または黙示、その情報の利用がない任意の保証を含むがこれらに限定されない「として、」上に設けられています特定の目的への権利または商品性または適合性の黙示の保証を侵害します。"
    }
  ]
}