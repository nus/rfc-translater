{
  "title": {
    "text": "RFC 2202 - Test Cases for HMAC-MD5 and HMAC-SHA-1",
    "ja": "RFC 2202 - HMAC-MD5とHMAC-SHA-1用のテストケース"
  },
  "number": 2202,
  "created_at": "2019-10-17 22:29:59.623473+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                          P. Cheng\nRequest for Comments: 2202                                          IBM\nCategory: Informational                                        R. Glenn\n                                                                   NIST\n                                                         September 1997",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 17,
      "text": "Test Cases for HMAC-MD5 and HMAC-SHA-1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.  Distribution of this memo is unlimited.",
      "ja": "このメモはインターネットコミュニティのための情報を提供します。このメモはどんな種類のインターネット標準を指定しません。このメモの配布は無制限です。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document provides two sets of test cases for HMAC-MD5 and HMAC-SHA-1, respectively. HMAC-MD5 and HMAC-SHA-1 are two constructs of the HMAC [HMAC] message authentication function using the MD5 [MD5] hash function and the SHA-1 [SHA] hash function. Both constructs are used by IPSEC [OG,CG] and other protocols to authenticate messages. The test cases and results provided in this document are meant to be used as a conformance test for HMAC-MD5 and HMAC-SHA-1 implementations.",
      "ja": "この文書は、それぞれ、HMAC-MD5とHMAC-SHA-1用のテストケースの二組を提供します。 HMAC-MD5とHMAC-SHA-1は、MD5 [MD5]ハッシュ関数とSHA-1 [SHA]ハッシュ関数を用いてHMAC [HMAC]メッセージ認証機能の2つの構築物です。両方の構築物は、メッセージを認証するためにIPSEC [OG、CG]および他のプロトコルによって使用されます。本書で提供されるテストケースと結果はHMAC-MD5とHMAC-SHA-1実装の適合性試験として使用されることを意図されています。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "The general method for constructing a HMAC message authentication function using a particular hash function is described in section 2 of [HMAC]. We will not repeat the description here. Section 5 of [HMAC] also discusses truncating the output of HMAC; the rule is that we should keep the more significant bits (the bits in the left, assuming a network byte order (big-endian)).",
      "ja": "特定のハッシュ関数を用いてHMACメッセージ認証機能を構築するための一般的な方法は、[HMAC]のセクション2に記載されています。私たちは、ここでの説明を繰り返すことはしません。 [HMAC]のセクション5はまた、HMACの出力を切り捨て論じ。ルールは、我々は（ネットワークバイトオーダー（ビッグエンディアン）を想定し、左のビット）より上位のビットを保つべきであるということです。"
    },
    {
      "indent": 3,
      "text": "In sections 2 and 3 we provide test cases for HMAC-MD5 and HMAC-SHA-1, respectively. Each case includes the key, the data, and the result.  The values of keys and data are either hexadecimal numbers (prefixed by \"0x\") or ASCII character strings in double quotes. If a value is an ASCII character string, then the HMAC computation for the corresponding test case DOES NOT include the trailing null character ('\\0') in the string.",
      "ja": "セクション2及び3において、我々は、HMAC-MD5とHMAC-SHA-1、それぞれのテストケースを提供します。各ケースは、キー、データ、および結果が含まれています。キーとデータの値は、16進数（「0xの」で始まる）番号または二重引用符でASCII文字列のどちらかです。値は、ASCII文字列である場合、対応するテストケースのためのHMAC計算は、文字列の末尾のヌル文字（「\\ 0」）を含みません。"
    },
    {
      "indent": 3,
      "text": "The C source code of the functions used to generate HMAC-SHA-1 results is listed in the Appendix. Note that these functions are meant to be simple and easy to understand; they are not optimized in any way. The C source code for computing HMAC-MD5 can be found in [MD5]; or you can do a simple modification to HMAC-SHA-1 code to get HMAC-MD5 code, as explained in the Appendix.",
      "ja": "HMAC-SHA-1の結果を生成するために使用される関数のCのソースコードは付録に記載されています。これらの機能はシンプルで理解しやすいことを意味していることに注意してください。彼らはどのような方法で最適化されていません。 ; HMAC-MD5を計算するためのCのソースコードは、[MD5]に見出すことができますまたはあなたは、付録で説明したように、HMAC-MD5コードを取得するにはHMAC-SHA-1のコードに簡単な変更を行うことができます。"
    },
    {
      "indent": 3,
      "text": "The test cases in this document are cross-verified by three independent implementations, one from NIST and two from IBM Research. One IBM implementation uses optimized code that is very different from the code in the Appendix. An implemenation that concurs with the results provided in this document should be interoperable with other similar implemenations.  We do not claim that such an implementation is absolutely correct with respect to the HMAC definition in [HMAC].",
      "ja": "この文書に記載されているテストケースは、三つの独立した実装、NISTから1およびIBM Researchから2でクロス検証されます。一つのIBMの実装では、付録のコードとは非常に異なっている最適化されたコードを使用しています。本書で提供された結果に同意implemenationは、他の同様のimplemenationsと相互運用可能であるべきです。私たちは、このような実装は[HMAC]でHMACの定義に関しては絶対的に正しいことを主張しません。"
    },
    {
      "indent": 0,
      "text": "2. Test Cases for HMAC-MD5",
      "section_title": true,
      "ja": "HMAC-MD5 2.テストケース"
    },
    {
      "indent": 0,
      "text": "test_case =     1 key =           0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b key_len =       16 data =          \"Hi There\" data_len =      8 digest =        0x9294727a3638bb1c13f48ef8158bfc9d",
      "ja": "test_case = 1つのキー= 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b key_lenに= 16データ= \"こんにちは\" DATA_LEN = 8ダイジェスト= 0x9294727a3638bb1c13f48ef8158bfc9d"
    },
    {
      "indent": 0,
      "text": "test_case =     2 key =           \"Jefe\" key_len =       4 data =          \"what do ya want for nothing?\" data_len =      28 digest =        0x750c783e6ab0b503eaa86e310a5db738",
      "ja": "test_case = 2キー= \"Jefeは\" key_lenに= 4つのデータは、= \"yaは何のために何をしたいですか？\" DATA_LEN = 28ダイジェスト= 0x750c783e6ab0b503eaa86e310a5db738"
    },
    {
      "indent": 0,
      "text": "test_case =     3 key =           0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa key_len         16 data =          0xdd repeated 50 times data_len =      50 digest =        0x56be34521d144c88dbb8c733f0e8b3f6",
      "ja": "test_case = 3キー= 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa key_lenに16件のデータ= 0xddを50回繰り返しDATA_LEN = 50ダイジェスト= 0x56be34521d144c88dbb8c733f0e8b3f6"
    },
    {
      "indent": 0,
      "text": "test_case =     4 key =           0x0102030405060708090a0b0c0d0e0f10111213141516171819 key_len         25 data =          0xcd repeated 50 times data_len =      50 digest =        0x697eaf0aca3a3aea3a75164746ffaa79 test_case =     5 key =           0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c key_len =       16 data =          \"Test With Truncation\" data_len =      20 digest =        0x56461ef2342edc00f9bab995690efd4c digest-96       0x56461ef2342edc00f9bab995",
      "ja": "test_case = 4キー= 0x0102030405060708090a0b0c0d0e0f10111213141516171819 key_lenに25データ= 0xcd 50回繰り返しDATA_LEN = 50ダイジェスト= 0x697eaf0aca3a3aea3a75164746ffaa79 test_case = 5キー= 0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c key_lenに= 16件のデータ= \"切捨てを伴う試験\" DATA_LEN = 20ダイジェスト-96 0x56461ef2342edc00f9bab995690efd4c 0x56461ef2342edc00f9bab995を=ダイジェスト"
    },
    {
      "indent": 0,
      "text": "test_case =     6 key =           0xaa repeated 80 times key_len =       80 data =          \"Test Using Larger Than Block-Size Key - Hash Key First\" data_len =      54 digest =        0x6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd",
      "ja": "DATA_LEN = 54ダイジェスト= 0x6b1ab7fe4bd7bf8f0b62e6ce61b9d0cd  -  test_case = 6キー= 0xAAを80回key_lenに= 80件のデータ=「ハッシュキー最初のブロック・サイズのキーより大きな使ってテストを」繰り返し"
    },
    {
      "indent": 0,
      "text": "test_case =     7 key =           0xaa repeated 80 times key_len =       80 data =          \"Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data\" data_len =      73 digest =        0x6f630fad67cda0ee1fb1f562db3aa53e",
      "ja": "test_case = 7キー= 0xAAを80回繰り返しkey_lenに= 80件のデータ=「テストブロック・サイズよりも大きいキーと一つのブロックサイズのデータ​​よりも大きな使用」DATA_LEN = 73ダイジェスト= 0x6f630fad67cda0ee1fb1f562db3aa53e"
    },
    {
      "indent": 0,
      "text": "3. Test Cases for HMAC-SHA-1",
      "section_title": true,
      "ja": "HMAC-SHA-1の3テスト・ケース"
    },
    {
      "indent": 0,
      "text": "test_case =     1 key =           0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b key_len =       20 data =          \"Hi There\" data_len =      8 digest =        0xb617318655057264e28bc0b6fb378c8ef146be00",
      "ja": "test_case = 1つのキー= 0x0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b key_lenに= 20データ= \"こんにちは\" DATA_LEN = 8ダイジェスト= 0xb617318655057264e28bc0b6fb378c8ef146be00"
    },
    {
      "indent": 0,
      "text": "test_case =     2 key =           \"Jefe\" key_len =       4 data =          \"what do ya want for nothing?\" data_len =      28 digest =        0xeffcdf6ae5eb2fa2d27416d5f184df9c259a7c79",
      "ja": "test_case = 2キー= \"Jefeは\" key_lenに= 4つのデータは、= \"yaは何のために何をしたいですか？\" DATA_LEN = 28ダイジェスト= 0xeffcdf6ae5eb2fa2d27416d5f184df9c259a7c79"
    },
    {
      "indent": 0,
      "text": "test_case =     3 key =           0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa key_len =       20 data =          0xdd repeated 50 times data_len =      50 digest =        0x125d7342b9ac11cd91a39af48aa17b4f63f175d3 test_case =     4 key =           0x0102030405060708090a0b0c0d0e0f10111213141516171819 key_len =       25 data =          0xcd repeated 50 times data_len =      50 digest =        0x4c9007f4026250c6bc8414f9bf50c86c2d7235da",
      "ja": "test_case = 3キー= 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa key_lenに= 20件のデータ= 0xdd繰り返し50回DATA_LEN = 50ダイジェスト= 0x125d7342b9ac11cd91a39af48aa17b4f63f175d3 test_case = 4キー= 0x0102030405060708090a0b0c0d0e0f10111213141516171819 key_lenに= 25件のデータ= 0xcdは= 50ダイジェスト= 0x4c9007f4026250c6bc8414f9bf50c86c2d7235da DATA_LEN 50回繰り返します"
    },
    {
      "indent": 0,
      "text": "test_case =     5 key =           0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c key_len =       20 data =          \"Test With Truncation\" data_len =      20 digest =        0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04 digest-96 =     0x4c1a03424b55e07fe7f27be1",
      "ja": "test_case = 5キー= 0x0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c key_lenに= 20件のデータ= \"切捨てを伴う試験\" DATA_LEN = 20ダイジェスト= 0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04ダイジェスト-96 = 0x4c1a03424b55e07fe7f27be1"
    },
    {
      "indent": 0,
      "text": "test_case =     6 key =           0xaa repeated 80 times key_len =       80 data =          \"Test Using Larger Than Block-Size Key - Hash Key First\" data_len =      54 digest =        0xaa4ae5e15272d00e95705637ce8a3b55ed402112",
      "ja": "DATA_LEN = 54ダイジェスト= 0xaa4ae5e15272d00e95705637ce8a3b55ed402112  -  test_case = 6キー= 0xAAを80回key_lenに= 80件のデータ=「ハッシュキー最初のブロック・サイズのキーより大きな使ってテストを」繰り返し"
    },
    {
      "indent": 0,
      "text": "test_case =     7 key =           0xaa repeated 80 times key_len =       80 data =          \"Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data\" data_len =      73 digest =        0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91 data_len =      20 digest =        0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04 digest-96 =     0x4c1a03424b55e07fe7f27be1",
      "ja": "test_case = 7キー= 0xAAを繰り返し80回0x4c1a03424b55e07fe7f27be1d58bb9324a9a5a04 = DATA_LEN = 73ダイジェスト= 0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91 DATA_LEN = 20ダイジェスト= 80データ=「ブロック・サイズよりも大きいキーの1ブロックサイズのデータ​​よりも大きい使用テスト」key_lenに消化し、96 = 0x4c1a03424b55e07fe7f27be1"
    },
    {
      "indent": 0,
      "text": "test_case =     6 key =           0xaa repeated 80 times key_len =       80 data =          \"Test Using Larger Than Block-Size Key - Hash Key First\" data_len =      54 digest =        0xaa4ae5e15272d00e95705637ce8a3b55ed402112",
      "ja": "DATA_LEN = 54ダイジェスト= 0xaa4ae5e15272d00e95705637ce8a3b55ed402112  -  test_case = 6キー= 0xAAを80回key_lenに= 80件のデータ=「ハッシュキー最初のブロック・サイズのキーより大きな使ってテストを」繰り返し"
    },
    {
      "indent": 0,
      "text": "test_case =     7 key =           0xaa repeated 80 times key_len =       80 data =          \"Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data\" data_len =      73 digest =        0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91",
      "ja": "test_case = 7キー= 0xAAを80回繰り返しkey_lenに= 80件のデータ=「テストブロック・サイズよりも大きいキーと一つのブロックサイズのデータ​​よりも大きな使用」DATA_LEN = 73ダイジェスト= 0xe8e99d0f45237d786d6bbaa7965c7808bbff1a91"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "This docuemnt raises no security issues. Discussion on the strength of the HMAC construction can be found in [HMAC].",
      "ja": "この文書には、セキュリティ上の問題を提起していません。 HMAC工事の強度に関する議論は、[HMAC]で見つけることができます。"
    },
    {
      "indent": 0,
      "text": "References",
      "ja": "リファレンス"
    },
    {
      "indent": 3,
      "text": "[HMAC]    Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, February 1997.",
      "ja": "[HMAC] Krawczyk、H.、ベラー、M.、およびR.カネッティ、 \"HMAC：メッセージ認証のための鍵付きハッシュ化\"、RFC 2104、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[MD5]     Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321, April 1992.",
      "ja": "[MD5] Rivest氏、R.、 \"MD5メッセージダイジェストアルゴリズム\"、RFC 1321、1992年4月。"
    },
    {
      "indent": 3,
      "text": "[SHA]     NIST, FIPS PUB 180-1: Secure Hash Standard, April 1995.",
      "ja": "[SHA] NIST、FIPS PUB 180-1の：セキュアハッシュ標準、1995年4月。"
    },
    {
      "indent": 3,
      "text": "[OG]      Oehler, M., and R. Glenn, \"HMAC-MD5 IP Authentication with Replay Prevention\", RFC 2085, February 1997.",
      "ja": "【OG】エーラー、M.、およびR.グレン、 \"リプレイ防止とHMAC-MD5 IP認証\"、RFC 2085、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[CG]      Chang, S., and R. Glenn, \"HMAC-SHA IP Authentication with Replay Prevention\", Work in Progress.",
      "ja": "[CG]チャン、S.、およびR.グレン、 \"リプレイ防止とHMAC-SHA IP認証\" は、進行中の作業します。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Pau-Chen Cheng IBM T.J. Watson Research Center P.O.Box 704 Yorktown Heights, NY 10598",
      "ja": "ポー・チェンチェンIBM T.J。ワトソン研究所のP.O.Box 704ヨークタウンハイツ、NY 10598"
    },
    {
      "indent": 3,
      "text": "EMail: pau@watson.ibm.com",
      "ja": "メールアドレス：pau@watson.ibm.com"
    },
    {
      "indent": 3,
      "text": "Robert Glenn NIST Building 820, Room 455 Gaithersburg, MD 20899",
      "ja": "ロバート・グレンNISTビル820、ルーム455ゲーサーズバーグ、MD 20899"
    },
    {
      "indent": 3,
      "text": "EMail: rob.glenn@nist.gov",
      "ja": "メールアドレス：rob.glenn@nist.gov"
    },
    {
      "indent": 0,
      "text": "Appendix",
      "ja": "付録"
    },
    {
      "indent": 3,
      "text": "This appendix contains the C reference code which implements HMAC-SHA-1 using an existing SHA-1 library.  It assumes that the SHA-1 library has similar API's as those of the MD5 code described in RFC 1321.  The code for HMAC-MD5 is similar, just replace the strings \"SHA\" and \"sha\" with \"MD5\" and \"md5\". HMAC-MD5 code is also listed in RFC 2104.",
      "ja": "この付録では、既存のSHA-1ライブラリーを使用してHMAC-SHA-1を実現Cリファレンスコードを含みます。これは、SHA-1ライブラリーは、RFC 1321で説明MD5コードのものとHMAC-MD5が似ているためのコードと同様のAPIを持っていることを前提とし、文字列だけで「SHA」と「MD5」と「MD5」と「SHA」を置き換えます。 HMAC-MD5コードは、RFC 2104に記載されています。"
    },
    {
      "indent": 3,
      "text": "#ifndef SHA_DIGESTSIZE #define SHA_DIGESTSIZE  20 #endif",
      "ja": "#ifndefのSHA_DIGESTSIZEの#define SHA_DIGESTSIZE 20 #endifの"
    },
    {
      "indent": 3,
      "text": "#ifndef SHA_BLOCKSIZE #define SHA_BLOCKSIZE   64 #endif",
      "ja": "#ifndefのSHA_BLOCKSIZEの#define SHA_BLOCKSIZE 64 #endifの"
    },
    {
      "indent": 3,
      "text": "#ifndef MD5_DIGESTSIZE #define MD5_DIGESTSIZE  16 #endif",
      "ja": "#ifndefのMD5_DIGESTSIZEの#define MD5_DIGESTSIZE 16 #endifの"
    },
    {
      "indent": 3,
      "text": "#ifndef MD5_BLOCKSIZE #define MD5_BLOCKSIZE   64 #endif",
      "ja": "#ifndefのMD5_BLOCKSIZEの#define MD5_BLOCKSIZE 64 #endifの"
    },
    {
      "indent": 3,
      "text": "/* Function to print the digest */ void pr_sha(FILE* fp, char* s, int t) { int     i ;",
      "ja": ";消化する* / void pr_sha（ファイル* fpは、チャー* sで、int型T）{I intを印刷する/ *機能"
    },
    {
      "indent": 3,
      "text": "        fprintf(fp, \"0x\") ;\n        for (i = 0 ; i < t ; i++)\n                fprintf(fp, \"%02x\", s[i]) ;\n        fprintf(fp, \"0) ;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "void truncate ( char*   d1,   /* data to be truncated */ char*   d2,   /* truncated data */ int     len   /* length in bytes to keep */ ) { int     i ; for (i = 0 ; i < len ; i++) d2[i] = d1[i]; }",
      "ja": "ボイドTRUNCATE（保つバイトのchar切り捨てられるため* D1、/ *データ* /チャー* D2、/ *切り捨てデータ* / INT LEN / *長さ* /）{int型私は、 [I]、D2 [i]は=さd1（iは++; iがLEN <I = 0）ため、 }"
    },
    {
      "indent": 3,
      "text": "/* Function to compute the digest */ void hmac_sha ( char*    k,     /* secret key */ int      lk,    /* length of the key in bytes */ char*    d,     /* data */ int      ld,    /* length of data in bytes */ char*    out,   /* output buffer, at least \"t\" bytes */ int      t ) { SHA_CTX ictx, octx ; char    isha[SHA_DIGESTSIZE], osha[SHA_DIGESTSIZE] ; char    key[SHA_DIGESTSIZE] ; char    buf[SHA_BLOCKSIZE] ; int     i ;",
      "ja": "ダイジェスト* /ボイドHMAC_SHA（CHAR * K、/ *秘密鍵* / int型のLK、/ *バイト単位でキーの長さ* /チャー* D、/ *データ* / int型のLD、/ *長さを計算する/ *機能バイト* /チャーのデータのうち*、/ *出力バッファ、少なくとも \"T\" バイト* / int型T）{SHA_CTXのictx、octx。チャー医者[SHA_DIGESTSIZE]、OSHA [SHA_DIGESTSIZE]。文字キー[SHA_DIGESTSIZE]。 CHAR [SHA_BLOCKSIZE] BUF。私はint型。"
    },
    {
      "indent": 11,
      "text": "if (lk > SHA_BLOCKSIZE) {",
      "ja": "IF（LK> SHA_BLOCKSIZE）{"
    },
    {
      "indent": 19,
      "text": "SHA_CTX         tctx ;",
      "ja": "SHA_CTXのTCtxに。"
    },
    {
      "indent": 19,
      "text": "SHAInit(&tctx) ; SHAUpdate(&tctx, k, lk) ; SHAFinal(key, &tctx) ;",
      "ja": "SHAInit（＆のTCtx）。 SHAUpdate（＆のTCtx、K、LK）。 SHAFinal（キー、＆のTCtx）。"
    },
    {
      "indent": 11,
      "text": "        k = key ; lk = SHA_DIGESTSIZE ; }",
      "ja": "K =キー。 LK = SHA_DIGESTSIZE。 }"
    },
    {
      "indent": 11,
      "text": "/**** Inner Digest ****/",
      "ja": "/ ****インナーダイジェスト**** /"
    },
    {
      "indent": 11,
      "text": "SHAInit(&ictx) ;",
      "ja": "SHAInit（＆ictx）。"
    },
    {
      "indent": 11,
      "text": "/* Pad the key for inner digest */ for (i = 0 ; i < lk ; ++i) buf[i] = k[i] ^ 0x36 ; for (i = lk ; i < SHA_BLOCKSIZE ; ++i) buf[i] = 0x36 ;",
      "ja": "/ *パッド* /用インナーダイジェストのためのキー（i = 0; iはLKを<; ++ i）はBUF [I] = K [I] ^ 0x36。 [I] = 0x36 BUF（++ I; iはSHA_BLOCKSIZEを<I = LK）のために、"
    },
    {
      "indent": 11,
      "text": "SHAUpdate(&ictx, buf, SHA_BLOCKSIZE) ; SHAUpdate(&ictx, d, ld) ;",
      "ja": "SHAUpdate（＆ictx、BUF、SHA_BLOCKSIZE）。 SHAUpdate（＆ictx、D、LD）。"
    },
    {
      "indent": 11,
      "text": "SHAFinal(isha, &ictx) ;",
      "ja": "SHAFinal（夜、＆ictx）。"
    },
    {
      "indent": 11,
      "text": "/**** Outter Digest ****/",
      "ja": "/ **** Outterダイジェスト**** /"
    },
    {
      "indent": 11,
      "text": "SHAInit(&octx) ;",
      "ja": "SHAInit（＆octx）。"
    },
    {
      "indent": 11,
      "text": "/* Pad the key for outter digest */ for (i = 0 ; i < lk ; ++i) buf[i] = k[i] ^ 0x5C ; for (i = lk ; i < SHA_BLOCKSIZE ; ++i) buf[i] = 0x5C ;",
      "ja": "/ *パッドoutterためのキーの/ *ダイジェスト（i = 0; iはLKを<; ++ I）BUF [I] = K [I] ^ 0x5Cを。 [I] = 0x5CをBUF（++ I; iはSHA_BLOCKSIZEを<I = LK）のために、"
    },
    {
      "indent": 11,
      "text": "SHAUpdate(&octx, buf, SHA_BLOCKSIZE) ; SHAUpdate(&octx, isha, SHA_DIGESTSIZE) ;",
      "ja": "SHAUpdate（＆octx、BUF、SHA_BLOCKSIZE）。 SHAUpdate（＆octx、医者、SHA_DIGESTSIZE）。"
    },
    {
      "indent": 11,
      "text": "SHAFinal(osha, &octx) ;",
      "ja": "SHAFinal（オシャワ、＆octx）。"
    },
    {
      "indent": 11,
      "text": "/* truncate and print the results */ t = t > SHA_DIGESTSIZE ? SHA_DIGESTSIZE : t ; truncate(osha, out, t) ; pr_sha(stdout, out, t) ;",
      "ja": "/ *結果を切り捨てて印刷する* / T = T> SHA_DIGESTSIZE？ SHA_DIGESTSIZE：トン。 （OSHA、アウト、t）を切り捨てます。 pr_sha（STDOUT、アウト、T）。"
    },
    {
      "indent": 3,
      "text": "}",
      "ja": "｝"
    }
  ]
}