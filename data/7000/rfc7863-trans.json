{
  "title": {
    "text": "RFC 7863 - Network File System (NFS) Version 4 Minor Version 2 External Data Representation Standard (XDR) Description",
    "ja": "RFC 7863 - ネットワークファイルシステム（NFS）バージョン4マイナーバージョン2外部データ表現標準（XDR）説明"
  },
  "number": 7863,
  "created_at": "2019-11-02 22:46:37.803134+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                         T. Haynes\nRequest for Comments: 7863                                  Primary Data\nCategory: Standards Track                                  November 2016\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 8,
      "text": "  Network File System (NFS) Version 4 Minor Version 2\nExternal Data Representation Standard (XDR) Description",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document provides the External Data Representation (XDR) description for NFS version 4 minor version 2.",
      "ja": "この文書では、NFSバージョン4のマイナーバージョン2のための外部データ表現（XDR）の記述を提供します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 7841のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7863.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7863で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2016 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2016 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................2\n   1.1. Requirements Language ......................................2\n2. XDR Description of NFSv4.2 ......................................2\n3. Security Considerations ........................................86\n4. IANA Considerations ............................................86\n5. Normative References ...........................................86\nAcknowledgments ...................................................87\nAuthor's Address ..................................................87",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document contains the External Data Representation (XDR) [RFC4506] description of the NFSv4.2 protocol [RFC7862].",
      "ja": "この文書では、外部データ表現（XDR）NFSv4.2プロトコル[RFC7862]の[RFC4506]の記述が含まれています。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Language",
      "section_title": true,
      "ja": "1.1. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "この文書のキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", および \"OPTIONAL\" はRFC 2119 [RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. XDR Description of NFSv4.2",
      "section_title": true,
      "ja": "NFSv4.2の2. XDR説明"
    },
    {
      "indent": 3,
      "text": "In order to facilitate implementations that support all of NFSv4.0, NFSv4.1, and NFSv4.2, the description includes operations and other features of NFSv4.0 and NFSv4.1 that do not apply to NFSv4.2. This XDR specification is fully compatible with the specification for NFSv4.0 [RFC7531], with the exception of the clientaddr4 structure, which has been replaced by (strictly, aliased to) netaddr4, which has the same members with the same purposes but the names have changed:",
      "ja": "NFSv4.0、NFSv4.1、及びNFSv4.2の全てをサポートする実装を容易にするために、説明はNFSv4.2には適用されない操作とNFSv4.0とNFSv4.1の他の特徴を含みます。このXDR仕様は同じ目的で同じメンバーが、名前を持っている（厳密にエイリアス）netaddr4、により置換されているclientaddr4構造を除いて、NFSv4.0の仕様[RFC7531]と完全に互換性があります変更されました："
    },
    {
      "indent": 7,
      "text": "(r_netid -> na_r_netid, r_addr -> na_r_addr)",
      "ja": "（r_netid  - > na_r_netid、R_ADDR  - > na_r_addr）"
    },
    {
      "indent": 3,
      "text": "This effectively fully reconverges the NFSv4.0 [RFC7531] and NFSv4.1 [RFC5662] strands of the XDR.",
      "ja": "これは事実上完全NFSv4.0 [RFC7531]とXDRのNFSv4.1 [RFC5662]鎖を再コンバージェンス。"
    },
    {
      "indent": 3,
      "text": "The XDR description is provided in this document in a way that makes it simple for the reader to extract it into a form that is ready to compile. The reader can feed this document in the following shell script to produce the machine-readable XDR description of NFSv4.2:",
      "ja": "XDRの記述は、それが簡単な読者がコンパイルする準備ができているフォームにそれを抽出することを可能にする方法で、このドキュメントで提供されています。読者はNFSv4.2の機械可読XDR記述を生成するために、次のシェルスクリプトでこのドキュメントを供給することができます。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "#!/bin/sh grep \"^ *///\" | sed 's?^ */// ??' | sed 's?^ *///$??'",
      "ja": "ます。＃！/ bin / shのはgrep \"^ * ///\" | SEDの？^ * /// ?? ' | SEDの？^ * /// $ ?? '"
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 3,
      "text": "That is, if the above script is stored in a file called \"extract.sh\" and this document is in a file called \"spec.txt\", then the reader can do:",
      "ja": "これは、上記のスクリプトは、「extract.sh」と呼ばれるファイルに格納されており、この文書は「spec.txt」と呼ばれるファイルである、そして読者が行うことができます場合は、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 4,
      "text": "sh extract.sh < spec.txt > nfs4_prot.x",
      "ja": "SH extract.sh <spec.txt> nfs4_prot.x"
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 3,
      "text": "The effect of the script is to remove leading white space from each line, plus a sentinel sequence of \"///\".",
      "ja": "スクリプトの効果は、主要な白の各ラインからのスペース、プラス「///」のセンチネル配列を除去することです。"
    },
    {
      "indent": 3,
      "text": "The XDR description, with the sentinel sequence, follows:",
      "ja": "センチネル配列とXDRの説明は、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "ja": "<CODEが開始されます>"
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * This file was machine generated for [RFC7862].\n///  *\n///  * Last updated Sun Mar 13 10:58:40 PDT 2016\n///  */\n///\n/// /*\n///  * Copyright (c) 2016 IETF Trust and the persons identified\n///  * as the authors.  All rights reserved.\n///  *\n///  * Redistribution and use in source and binary forms, with\n///  * or without modification, are permitted provided that the\n///  * following conditions are met:\n///  *\n///  * - Redistributions of source code must retain the above\n///  *   copyright notice, this list of conditions and the\n///  *   following disclaimer.\n///  *\n///  * - Redistributions in binary form must reproduce the above\n///  *   copyright notice, this list of conditions and the\n///  *   following disclaimer in the documentation and/or other\n///  *   materials provided with the distribution.\n///  *\n///  * - Neither the name of Internet Society, IETF or IETF\n///  *   Trust, nor the names of specific contributors, may be\n///  *   used to endorse or promote products derived from this\n///  *   software without specific prior written permission.\n///  *",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n///  *   AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED\n///  *   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n///  *   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n///  *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n///  *   EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n///  *   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n///  *   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n///  *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n///  *   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n///  *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n///  *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n///  *   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n///  *   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n///  *   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n///\n///  */\n///\n/// /*\n///  * This code was derived from RFC 7863.\n///  */\n///\n/// /*\n///  *      nfsv42.x\n///  */\n///\n/// %#ifndef _AUTH_SYS_DEFINE_FOR_NFSv42\n/// %#define _AUTH_SYS_DEFINE_FOR_NFSv42\n/// %#include <rpc/auth_sys.h>\n/// %typedef struct authsys_parms authsys_parms;\n/// %#endif /* _AUTH_SYS_DEFINE_FOR_NFSv42 */\n///\n/// /*\n///  * Basic typedefs for RFC 1832 data type definitions\n///  */\n///\n/// /*\n///  * typedef int                  int32_t;\n///  * typedef unsigned int         uint32_t;\n///  * typedef hyper                int64_t;\n///  * typedef unsigned hyper       uint64_t;\n///  */\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Sizes\n///  */\n/// const NFS4_FHSIZE               = 128;\n/// const NFS4_VERIFIER_SIZE        = 8;\n/// const NFS4_OTHER_SIZE           = 12;\n/// const NFS4_OPAQUE_LIMIT         = 1024;\n/// const NFS4_SESSIONID_SIZE       = 16;\n///\n/// const NFS4_INT64_MAX            = 0x7fffffffffffffff;\n/// const NFS4_UINT64_MAX           = 0xffffffffffffffff;\n/// const NFS4_INT32_MAX            = 0x7fffffff;\n/// const NFS4_UINT32_MAX           = 0xffffffff;\n///\n/// const NFS4_MAXFILELEN           = 0xffffffffffffffff;\n/// const NFS4_MAXFILEOFF           = 0xfffffffffffffffe;\n///\n///\n/// /*\n///  * File types\n///  */\n/// enum nfs_ftype4 {\n///         NF4REG       = 1,  /* Regular File */\n///         NF4DIR       = 2,  /* Directory */\n///         NF4BLK       = 3,  /* Special File -- block device */\n///         NF4CHR       = 4,  /* Special File -- character device */\n///         NF4LNK       = 5,  /* Symbolic Link */\n///         NF4SOCK      = 6,  /* Special File -- socket */\n///         NF4FIFO      = 7,  /* Special File -- fifo */\n///         NF4ATTRDIR   = 8,  /* Attribute Directory */\n///         NF4NAMEDATTR = 9   /* Named Attribute */\n/// };\n///\n/// /*\n///  * Error status\n///  */\n/// enum nfsstat4 {\n///  NFS4_OK                = 0,     /* everything is okay        */\n///  NFS4ERR_PERM           = 1,     /* caller not privileged     */\n///  NFS4ERR_NOENT          = 2,     /* no such file/directory    */\n///  NFS4ERR_IO             = 5,     /* hard I/O error            */\n///  NFS4ERR_NXIO           = 6,     /* no such device            */\n///  NFS4ERR_ACCESS         = 13,    /* access denied             */\n///  NFS4ERR_EXIST          = 17,    /* file already exists       */\n///  NFS4ERR_XDEV           = 18,    /* different file systems    */\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Please do not allocate value 19; it was used in NFSv3,\n///  * and we do not want a value in NFSv3 to have a different\n///  * meaning in NFSv4.x.\n///  */\n///\n///  NFS4ERR_NOTDIR         = 20,    /* should be a directory     */\n///  NFS4ERR_ISDIR          = 21,    /* should not be a directory */\n///  NFS4ERR_INVAL          = 22,    /* invalid argument          */\n///  NFS4ERR_FBIG           = 27,    /* file exceeds server max   */\n///  NFS4ERR_NOSPC          = 28,    /* no space on file system   */\n///  NFS4ERR_ROFS           = 30,    /* read-only file system     */\n///  NFS4ERR_MLINK          = 31,    /* too many hard links       */\n///  NFS4ERR_NAMETOOLONG    = 63,    /* name exceeds server max   */\n///  NFS4ERR_NOTEMPTY       = 66,    /* directory not empty       */\n///  NFS4ERR_DQUOT          = 69,    /* hard quota limit reached  */\n///  NFS4ERR_STALE          = 70,    /* file no longer exists     */\n///  NFS4ERR_BADHANDLE      = 10001, /* illegal filehandle        */\n///  NFS4ERR_BAD_COOKIE     = 10003, /* READDIR cookie is stale   */\n///  NFS4ERR_NOTSUPP        = 10004, /* operation not supported   */\n///  NFS4ERR_TOOSMALL       = 10005, /* response limit exceeded   */\n///  NFS4ERR_SERVERFAULT    = 10006, /* undefined server error    */\n///  NFS4ERR_BADTYPE        = 10007, /* type invalid for CREATE   */\n///  NFS4ERR_DELAY          = 10008, /* file \"busy\" -- retry      */\n///  NFS4ERR_SAME           = 10009, /* nverify says attrs same   */\n///  NFS4ERR_DENIED         = 10010, /* lock unavailable          */\n///  NFS4ERR_EXPIRED        = 10011, /* lock lease expired        */\n///  NFS4ERR_LOCKED         = 10012, /* I/O failed due to lock    */\n///  NFS4ERR_GRACE          = 10013, /* in grace period           */\n///  NFS4ERR_FHEXPIRED      = 10014, /* filehandle expired        */\n///  NFS4ERR_SHARE_DENIED   = 10015, /* share reserve denied      */\n///  NFS4ERR_WRONGSEC       = 10016, /* wrong security flavor     */\n///  NFS4ERR_CLID_INUSE     = 10017, /* client ID in use          */\n///\n///  /* NFS4ERR_RESOURCE is not a valid error in NFSv4.1. */\n///  NFS4ERR_RESOURCE       = 10018, /* resource exhaustion       */\n///\n///  NFS4ERR_MOVED          = 10019, /* file system relocated     */\n///  NFS4ERR_NOFILEHANDLE   = 10020, /* current FH is not set     */\n///  NFS4ERR_MINOR_VERS_MISMATCH= 10021, /* minor vers not supp   */\n///  NFS4ERR_STALE_CLIENTID = 10022, /* server has rebooted       */\n///  NFS4ERR_STALE_STATEID  = 10023, /* server has rebooted       */\n///  NFS4ERR_OLD_STATEID    = 10024, /* state is out of sync      */\n///  NFS4ERR_BAD_STATEID    = 10025, /* incorrect stateid         */\n///  NFS4ERR_BAD_SEQID      = 10026, /* request is out of seq.    */\n///  NFS4ERR_NOT_SAME       = 10027, /* verify -- attrs not same  */\n///  NFS4ERR_LOCK_RANGE     = 10028, /* overlapping lock range    */\n///  NFS4ERR_SYMLINK        = 10029, /* should be file/directory  */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  NFS4ERR_RESTOREFH      = 10030, /* no saved filehandle       */\n///  NFS4ERR_LEASE_MOVED    = 10031, /* some file system moved    */\n///  NFS4ERR_ATTRNOTSUPP    = 10032, /* recommended attr not supp */\n///  NFS4ERR_NO_GRACE       = 10033, /* reclaim outside of grace  */\n///  NFS4ERR_RECLAIM_BAD    = 10034, /* reclaim error at server   */\n///  NFS4ERR_RECLAIM_CONFLICT= 10035, /* conflict on reclaim      */\n///  NFS4ERR_BADXDR         = 10036, /* XDR decode failed         */\n///  NFS4ERR_LOCKS_HELD     = 10037, /* file locks held at CLOSE  */\n///  NFS4ERR_OPENMODE       = 10038, /* conflict in OPEN and I/O  */\n///  NFS4ERR_BADOWNER       = 10039, /* owner translation bad     */\n///  NFS4ERR_BADCHAR        = 10040, /* UTF-8 char not supported  */\n///  NFS4ERR_BADNAME        = 10041, /* name not supported        */\n///  NFS4ERR_BAD_RANGE      = 10042, /* lock range not supported  */\n///  NFS4ERR_LOCK_NOTSUPP   = 10043, /* no atomic up/downgrade    */\n///  NFS4ERR_OP_ILLEGAL     = 10044, /* undefined operation       */\n///  NFS4ERR_DEADLOCK       = 10045, /* file-locking deadlock     */\n///  NFS4ERR_FILE_OPEN      = 10046, /* open file blocks op       */\n///  NFS4ERR_ADMIN_REVOKED  = 10047, /* lock-owner state revoked  */\n///  NFS4ERR_CB_PATH_DOWN   = 10048, /* callback path down        */\n///\n///  /* NFSv4.1 errors start here. */\n///\n///  NFS4ERR_BADIOMODE      = 10049,\n///  NFS4ERR_BADLAYOUT      = 10050,\n///  NFS4ERR_BAD_SESSION_DIGEST = 10051,\n///  NFS4ERR_BADSESSION     = 10052,\n///  NFS4ERR_BADSLOT        = 10053,\n///  NFS4ERR_COMPLETE_ALREADY = 10054,\n///  NFS4ERR_CONN_NOT_BOUND_TO_SESSION = 10055,\n///  NFS4ERR_DELEG_ALREADY_WANTED = 10056,\n///  NFS4ERR_BACK_CHAN_BUSY = 10057, /* backchan reqs outstanding */\n///  NFS4ERR_LAYOUTTRYLATER = 10058,\n///  NFS4ERR_LAYOUTUNAVAILABLE = 10059,\n///  NFS4ERR_NOMATCHING_LAYOUT = 10060,\n///  NFS4ERR_RECALLCONFLICT = 10061,\n///  NFS4ERR_UNKNOWN_LAYOUTTYPE = 10062,\n///  NFS4ERR_SEQ_MISORDERED = 10063, /* unexpected seq. ID in req */\n///  NFS4ERR_SEQUENCE_POS   = 10064, /* [CB_]SEQ. op not 1st op   */\n///  NFS4ERR_REQ_TOO_BIG    = 10065, /* request too big           */\n///  NFS4ERR_REP_TOO_BIG    = 10066, /* reply too big             */\n///  NFS4ERR_REP_TOO_BIG_TO_CACHE =10067, /* rep. not all cached  */\n///  NFS4ERR_RETRY_UNCACHED_REP =10068, /* retry + rep. uncached  */\n///  NFS4ERR_UNSAFE_COMPOUND =10069, /* retry/recovery too hard   */\n///  NFS4ERR_TOO_MANY_OPS   = 10070, /* too many ops in [CB_]COMP */\n///  NFS4ERR_OP_NOT_IN_SESSION =10071, /* op needs [CB_]SEQ. op   */\n///  NFS4ERR_HASH_ALG_UNSUPP = 10072,  /* hash alg. not supp      */\n///                                    /* Error 10073 is unused.  */\n///  NFS4ERR_CLIENTID_BUSY  = 10074, /* client ID has state       */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  NFS4ERR_PNFS_IO_HOLE   = 10075, /* IO to _SPARSE file hole   */\n///  NFS4ERR_SEQ_FALSE_RETRY= 10076, /* retry != original req     */\n///  NFS4ERR_BAD_HIGH_SLOT  = 10077, /* req has bad highest_slot  */\n///  NFS4ERR_DEADSESSION    = 10078, /* new req sent to dead sess */\n///  NFS4ERR_ENCR_ALG_UNSUPP= 10079, /* encr alg. not supp        */\n///  NFS4ERR_PNFS_NO_LAYOUT = 10080, /* I/O without a layout      */\n///  NFS4ERR_NOT_ONLY_OP    = 10081, /* addl ops not allowed      */\n///  NFS4ERR_WRONG_CRED     = 10082, /* op done by wrong cred     */\n///  NFS4ERR_WRONG_TYPE     = 10083, /* op on wrong type object   */\n///  NFS4ERR_DIRDELEG_UNAVAIL=10084, /* delegation not avail.     */\n///  NFS4ERR_REJECT_DELEG   = 10085, /* cb rejected delegation    */\n///  NFS4ERR_RETURNCONFLICT = 10086, /* layout get before return  */\n///  NFS4ERR_DELEG_REVOKED  = 10087, /* deleg./layout revoked     */\n///\n///  /* NFSv4.2 errors start here. */\n///\n///  NFS4ERR_PARTNER_NOTSUPP= 10088, /* s2s not supported         */\n///  NFS4ERR_PARTNER_NO_AUTH= 10089, /* s2s not authorized        */\n///  NFS4ERR_UNION_NOTSUPP  = 10090, /* arm of union not supp     */\n///  NFS4ERR_OFFLOAD_DENIED = 10091, /* dest not allowing copy    */\n///  NFS4ERR_WRONG_LFS      = 10092, /* LFS not supported         */\n///  NFS4ERR_BADLABEL       = 10093, /* incorrect label           */\n///  NFS4ERR_OFFLOAD_NO_REQS= 10094  /* dest not meeting reqs     */\n/// };\n///\n/// /*\n///  * Basic data types\n///  */\n/// typedef opaque  attrlist4<>;\n/// typedef uint32_t        bitmap4<>;\n/// typedef uint64_t        changeid4;\n/// typedef uint64_t        clientid4;\n/// typedef uint32_t        count4;\n/// typedef uint64_t        length4;\n/// typedef uint32_t        mode4;\n/// typedef uint64_t        nfs_cookie4;\n/// typedef opaque  nfs_fh4<NFS4_FHSIZE>;\n/// typedef uint64_t        offset4;\n/// typedef uint32_t        qop4;\n/// typedef opaque  sec_oid4<>;\n/// typedef uint32_t        sequenceid4;\n/// typedef uint32_t        seqid4;\n/// typedef opaque  sessionid4[NFS4_SESSIONID_SIZE];\n/// typedef uint32_t        slotid4;\n/// typedef opaque  utf8string<>;\n/// typedef utf8string      utf8str_cis;\n/// typedef utf8string      utf8str_cs;\n/// typedef utf8string      utf8str_mixed;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// typedef utf8str_cs      component4;\n/// typedef opaque  linktext4<>;\n/// typedef utf8string      ascii_REQUIRED4;\n/// typedef component4      pathname4<>;\n/// typedef opaque  verifier4[NFS4_VERIFIER_SIZE];\n/// typedef string  secret4<>;\n/// typedef uint32_t        policy4;\n///\n/// /*\n///  * Timeval\n///  */\n/// struct nfstime4 {\n///         int64_t         seconds;\n///         uint32_t        nseconds;\n/// };\n///\n/// enum time_how4 {\n///         SET_TO_SERVER_TIME4 = 0,\n///         SET_TO_CLIENT_TIME4 = 1\n/// };\n///\n/// union settime4 switch (time_how4 set_it) {\n///  case SET_TO_CLIENT_TIME4:\n///          nfstime4       time;\n///  default:\n///          void;\n/// };\n///\n///\n/// typedef uint32_t nfs_lease4;\n///\n/// /*\n///  * File attribute definitions\n///  */\n///\n/// /*\n///  * File System ID (FSID) structure for major/minor\n///  */\n/// struct fsid4 {\n///         uint64_t        major;\n///         uint64_t        minor;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * File system locations attribute\n///  * for relocation/migration and\n///  * related attributes\n///  */\n/// struct change_policy4 {\n///         uint64_t        cp_major;\n///         uint64_t        cp_minor;\n/// };\n///\n/// struct fs_location4 {\n///         utf8str_cis     server<>;\n///         pathname4       rootpath;\n/// };\n///\n/// struct fs_locations4 {\n///         pathname4       fs_root;\n///         fs_location4    locations<>;\n/// };\n///\n/// /*\n///  * Various Access Control Entry (ACE) definitions\n///  */\n///\n/// /*\n///  * Mask that indicates which ACEs are supported.\n///  * Values for the fattr4_aclsupport attribute.\n///  */\n/// const ACL4_SUPPORT_ALLOW_ACL    = 0x00000001;\n/// const ACL4_SUPPORT_DENY_ACL     = 0x00000002;\n/// const ACL4_SUPPORT_AUDIT_ACL    = 0x00000004;\n/// const ACL4_SUPPORT_ALARM_ACL    = 0x00000008;\n///\n///\n/// typedef uint32_t        acetype4;\n///\n///\n/// /*\n///  * acetype4 values.  Others can be added as needed.\n///  */\n/// const ACE4_ACCESS_ALLOWED_ACE_TYPE      = 0x00000000;\n/// const ACE4_ACCESS_DENIED_ACE_TYPE       = 0x00000001;\n/// const ACE4_SYSTEM_AUDIT_ACE_TYPE        = 0x00000002;\n/// const ACE4_SYSTEM_ALARM_ACE_TYPE        = 0x00000003;\n///\n///\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * ACE flag\n///  */\n/// typedef uint32_t aceflag4;\n///\n///\n/// /*\n///  * ACE flag values\n///  */\n/// const ACE4_FILE_INHERIT_ACE             = 0x00000001;\n/// const ACE4_DIRECTORY_INHERIT_ACE        = 0x00000002;\n/// const ACE4_NO_PROPAGATE_INHERIT_ACE     = 0x00000004;\n/// const ACE4_INHERIT_ONLY_ACE             = 0x00000008;\n/// const ACE4_SUCCESSFUL_ACCESS_ACE_FLAG   = 0x00000010;\n/// const ACE4_FAILED_ACCESS_ACE_FLAG       = 0x00000020;\n/// const ACE4_IDENTIFIER_GROUP             = 0x00000040;\n/// const ACE4_INHERITED_ACE                = 0x00000080;\n///\n///\n///\n/// /*\n///  * ACE mask\n///  */\n/// typedef uint32_t        acemask4;\n///\n///\n/// /*\n///  * ACE mask values\n///  */\n/// const ACE4_READ_DATA            = 0x00000001;\n/// const ACE4_LIST_DIRECTORY       = 0x00000001;\n/// const ACE4_WRITE_DATA           = 0x00000002;\n/// const ACE4_ADD_FILE             = 0x00000002;\n/// const ACE4_APPEND_DATA          = 0x00000004;\n/// const ACE4_ADD_SUBDIRECTORY     = 0x00000004;\n/// const ACE4_READ_NAMED_ATTRS     = 0x00000008;\n/// const ACE4_WRITE_NAMED_ATTRS    = 0x00000010;\n/// const ACE4_EXECUTE              = 0x00000020;\n/// const ACE4_DELETE_CHILD         = 0x00000040;\n/// const ACE4_READ_ATTRIBUTES      = 0x00000080;\n/// const ACE4_WRITE_ATTRIBUTES     = 0x00000100;\n/// const ACE4_WRITE_RETENTION      = 0x00000200;\n/// const ACE4_WRITE_RETENTION_HOLD = 0x00000400;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// const ACE4_DELETE               = 0x00010000;\n/// const ACE4_READ_ACL             = 0x00020000;\n/// const ACE4_WRITE_ACL            = 0x00040000;\n/// const ACE4_WRITE_OWNER          = 0x00080000;\n/// const ACE4_SYNCHRONIZE          = 0x00100000;\n///\n///\n/// /*\n///  * ACE4_GENERIC_READ -- defined as a combination of\n///  *      ACE4_READ_ACL |\n///  *      ACE4_READ_DATA |\n///  *      ACE4_READ_ATTRIBUTES |\n///  *      ACE4_SYNCHRONIZE\n///  */\n///\n/// const ACE4_GENERIC_READ = 0x00120081;\n///\n/// /*\n///  * ACE4_GENERIC_WRITE -- defined as a combination of\n///  *      ACE4_READ_ACL |\n///  *      ACE4_WRITE_DATA |\n///  *      ACE4_WRITE_ATTRIBUTES |\n///  *      ACE4_WRITE_ACL |\n///  *      ACE4_APPEND_DATA |\n///  *      ACE4_SYNCHRONIZE\n///  */\n/// const ACE4_GENERIC_WRITE = 0x00160106;\n///\n///\n/// /*\n///  * ACE4_GENERIC_EXECUTE -- defined as a combination of\n///  *      ACE4_READ_ACL |\n///  *      ACE4_READ_ATTRIBUTES |\n///  *      ACE4_EXECUTE |\n///  *      ACE4_SYNCHRONIZE\n///  */\n/// const ACE4_GENERIC_EXECUTE = 0x001200A0;\n///\n///\n/// /*\n///  * ACE definition\n///  */\n/// struct nfsace4 {\n///         acetype4        type;\n///         aceflag4        flag;\n///         acemask4        access_mask;\n///         utf8str_mixed   who;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///\n///\n/// /*\n///  * Access Control List (ACL) flag\n///  */\n///\n/// typedef uint32_t aclflag4;\n///\n/// /*\n///  * ACL flag values\n///  */\n/// const ACL4_AUTO_INHERIT         = 0x00000001;\n/// const ACL4_PROTECTED            = 0x00000002;\n/// const ACL4_DEFAULTED            = 0x00000004;\n///\n///\n/// /*\n///  * Version 4.1 ACL definition\n///  */\n/// struct nfsacl41 {\n///         aclflag4        na41_flag;\n///         nfsace4         na41_aces<>;\n/// };\n///\n///\n/// /*\n///  * Field definitions for the fattr4_mode\n///  * and fattr4_mode_set_masked attributes\n///  */\n/// const MODE4_SUID = 0x800;  /* set user id on execution */\n/// const MODE4_SGID = 0x400;  /* set group id on execution */\n/// const MODE4_SVTX = 0x200;  /* save text even after use */\n/// const MODE4_RUSR = 0x100;  /* read permission: owner */\n/// const MODE4_WUSR = 0x080;  /* write permission: owner */\n/// const MODE4_XUSR = 0x040;  /* execute permission: owner */\n/// const MODE4_RGRP = 0x020;  /* read permission: group */\n/// const MODE4_WGRP = 0x010;  /* write permission: group */\n/// const MODE4_XGRP = 0x008;  /* execute permission: group */\n/// const MODE4_ROTH = 0x004;  /* read permission: other */\n/// const MODE4_WOTH = 0x002;  /* write permission: other */\n/// const MODE4_XOTH = 0x001;  /* execute permission: other */\n///\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Masked mode for the mode_set_masked attribute\n///  */\n/// struct mode_masked4 {\n///  mode4  mm_value_to_set; /* Values of bits\n///                             to set or reset\n///                             in mode */\n///\n///  mode4  mm_mask_bits;    /* Mask of bits to\n///                             set or reset\n///                             in mode */\n/// };\n///\n/// /*\n///  * Special data/attribute associated with\n///  * file types NF4BLK and NF4CHR\n///  */\n/// struct specdata4 {\n///  uint32_t specdata1; /* Major device number */\n///  uint32_t specdata2; /* Minor device number */\n/// };\n///\n/// /*\n///  * Values for fattr4_fh_expire_type\n///  */\n/// const FH4_PERSISTENT          = 0x00000000;\n/// const FH4_NOEXPIRE_WITH_OPEN  = 0x00000001;\n/// const FH4_VOLATILE_ANY        = 0x00000002;\n/// const FH4_VOL_MIGRATION       = 0x00000004;\n/// const FH4_VOL_RENAME          = 0x00000008;\n///\n///\n/// struct netaddr4 {\n///         /* See struct rpcb in RFC 1833. */\n///         string na_r_netid<>;    /* Network id */\n///         string na_r_addr<>;     /* Universal address */\n/// };\n///\n///\n/// /*\n///  * Data structures new to NFSv4.1\n///  */\n///\n/// struct nfs_impl_id4 {\n///         utf8str_cis   nii_domain;\n///         utf8str_cs    nii_name;\n///         nfstime4      nii_date;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///\n///\n/// /*\n///  * Stateid\n///  */\n/// struct stateid4 {\n///         uint32_t        seqid;\n///         opaque          other[NFS4_OTHER_SIZE];\n/// };\n///\n/// enum layouttype4 {\n///         LAYOUT4_NFSV4_1_FILES   = 0x1,\n///         LAYOUT4_OSD2_OBJECTS    = 0x2,\n///         LAYOUT4_BLOCK_VOLUME    = 0x3\n/// };\n///\n/// struct layout_content4 {\n///         layouttype4 loc_type;\n///         opaque      loc_body<>;\n/// };\n///\n///\n/// %/*\n/// % * LAYOUT4_OSD2_OBJECTS loc_body description\n/// % * is in a separate .x file.\n/// % */\n/// %\n/// %/*\n/// % * LAYOUT4_BLOCK_VOLUME loc_body description\n/// % * is in a separate .x file.\n/// % */\n///\n/// struct layouthint4 {\n///         layouttype4             loh_type;\n///         opaque                  loh_body<>;\n/// };\n///\n/// enum layoutiomode4 {\n///         LAYOUTIOMODE4_READ      = 1,\n///         LAYOUTIOMODE4_RW        = 2,\n///         LAYOUTIOMODE4_ANY       = 3\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct layout4 {\n///         offset4                 lo_offset;\n///         length4                 lo_length;\n///         layoutiomode4           lo_iomode;\n///         layout_content4         lo_content;\n/// };\n///\n/// const NFS4_DEVICEID4_SIZE = 16;\n///\n/// typedef opaque  deviceid4[NFS4_DEVICEID4_SIZE];\n///\n/// struct device_addr4 {\n///         layouttype4             da_layout_type;\n///         opaque                  da_addr_body<>;\n/// };\n///\n///\n/// struct layoutupdate4 {\n///         layouttype4             lou_type;\n///         opaque                  lou_body<>;\n/// };\n///\n/// %\n/// /* Constants used for LAYOUTRETURN and CB_LAYOUTRECALL */\n/// const LAYOUT4_RET_REC_FILE              = 1;\n/// const LAYOUT4_RET_REC_FSID              = 2;\n/// const LAYOUT4_RET_REC_ALL               = 3;\n/// %\n/// enum layoutreturn_type4 {\n///         LAYOUTRETURN4_FILE = LAYOUT4_RET_REC_FILE,\n///         LAYOUTRETURN4_FSID = LAYOUT4_RET_REC_FSID,\n///         LAYOUTRETURN4_ALL  = LAYOUT4_RET_REC_ALL\n/// };\n///\n/// struct layoutreturn_file4 {\n///         offset4         lrf_offset;\n///         length4         lrf_length;\n///         stateid4        lrf_stateid;\n/// %       /* layouttype4 specific data */\n///         opaque          lrf_body<>;\n/// };\n///\n/// union layoutreturn4 switch (layoutreturn_type4 lr_returntype) {\n///         case LAYOUTRETURN4_FILE:\n///                 layoutreturn_file4      lr_layout;\n///         default:\n///                 void;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// %\n///\n/// enum fs4_status_type {\n///         STATUS4_FIXED     = 1,\n///         STATUS4_UPDATED   = 2,\n///         STATUS4_VERSIONED = 3,\n///         STATUS4_WRITABLE  = 4,\n///         STATUS4_REFERRAL  = 5\n/// };\n///\n/// struct fs4_status {\n///         bool            fss_absent;\n///         fs4_status_type fss_type;\n///         utf8str_cs      fss_source;\n///         utf8str_cs      fss_current;\n///         int32_t         fss_age;\n///         nfstime4        fss_version;\n/// };\n///\n///\n/// const TH4_READ_SIZE     = 0;\n/// const TH4_WRITE_SIZE    = 1;\n/// const TH4_READ_IOSIZE   = 2;\n/// const TH4_WRITE_IOSIZE  = 3;\n///\n/// typedef length4 threshold4_read_size;\n/// typedef length4 threshold4_write_size;\n/// typedef length4 threshold4_read_iosize;\n/// typedef length4 threshold4_write_iosize;\n///\n/// struct threshold_item4 {\n///         layouttype4     thi_layout_type;\n///         bitmap4         thi_hintset;\n///         opaque          thi_hintlist<>;\n/// };\n///\n/// struct mdsthreshold4 {\n///         threshold_item4 mth_hints<>;\n/// };\n///\n/// const RET4_DURATION_INFINITE    = 0xffffffffffffffff;\n/// struct retention_get4 {\n///         uint64_t        rg_duration;\n///         nfstime4        rg_begin_time<1>;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct retention_set4 {\n///         bool            rs_enable;\n///         uint64_t        rs_duration<1>;\n/// };\n///\n/// const FSCHARSET_CAP4_CONTAINS_NON_UTF8  = 0x1;\n/// const FSCHARSET_CAP4_ALLOWS_ONLY_UTF8   = 0x2;\n///\n/// typedef uint32_t        fs_charset_cap4;\n///\n///\n/// /*\n///  * Data structures new to NFSv4.2\n///  */\n///\n/// enum netloc_type4 {\n///         NL4_NAME        = 1,\n///         NL4_URL         = 2,\n///         NL4_NETADDR     = 3\n/// };\n/// union netloc4 switch (netloc_type4 nl_type) {\n///         case NL4_NAME:          utf8str_cis nl_name;\n///         case NL4_URL:           utf8str_cis nl_url;\n///         case NL4_NETADDR:       netaddr4    nl_addr;\n/// };\n///\n/// enum change_attr_type4 {\n///            NFS4_CHANGE_TYPE_IS_MONOTONIC_INCR         = 0,\n///            NFS4_CHANGE_TYPE_IS_VERSION_COUNTER        = 1,\n///            NFS4_CHANGE_TYPE_IS_VERSION_COUNTER_NOPNFS = 2,\n///            NFS4_CHANGE_TYPE_IS_TIME_METADATA          = 3,\n///            NFS4_CHANGE_TYPE_IS_UNDEFINED              = 4\n/// };\n///\n/// struct labelformat_spec4 {\n///         policy4 lfs_lfs;\n///         policy4 lfs_pi;\n/// };\n///\n/// struct sec_label4 {\n///         labelformat_spec4       slai_lfs;\n///         opaque                  slai_data<>;\n/// };\n///\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct copy_from_auth_priv {\n///         secret4             cfap_shared_secret;\n///         netloc4             cfap_destination;\n///         /* The NFSv4 user name that the user principal maps to */\n///         utf8str_mixed       cfap_username;\n/// };\n///\n/// struct copy_to_auth_priv {\n///         /* Equal to cfap_shared_secret */\n///         secret4              ctap_shared_secret;\n///         netloc4              ctap_source<>;\n///         /* The NFSv4 user name that the user principal maps to */\n///         utf8str_mixed        ctap_username;\n/// };\n///\n/// struct copy_confirm_auth_priv {\n///         /* Equal to GSS_GetMIC() of cfap_shared_secret */\n///         opaque              ccap_shared_secret_mic<>;\n///         /* The NFSv4 user name that the user principal maps to */\n///         utf8str_mixed       ccap_username;\n/// };\n///\n///\n/// struct app_data_block4 {\n///         offset4         adb_offset;\n///         length4         adb_block_size;\n///         length4         adb_block_count;\n///         length4         adb_reloff_blocknum;\n///         count4          adb_block_num;\n///         length4         adb_reloff_pattern;\n///         opaque          adb_pattern<>;\n/// };\n///\n///\n/// struct data4 {\n///         offset4         d_offset;\n///         opaque          d_data<>;\n/// };\n///\n/// struct data_info4 {\n///         offset4         di_offset;\n///         length4         di_length;\n/// };\n///\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// enum data_content4 {\n///         NFS4_CONTENT_DATA = 0,\n///         NFS4_CONTENT_HOLE = 1\n/// };\n///\n///\n///\n/// enum stable_how4 {\n///         UNSTABLE4       = 0,\n///         DATA_SYNC4      = 1,\n///         FILE_SYNC4      = 2\n/// };\n///\n///\n///\n/// struct write_response4 {\n///         stateid4        wr_callback_id<1>;\n///         length4         wr_count;\n///         stable_how4     wr_committed;\n///         verifier4       wr_writeverf;\n/// };\n///\n///\n/// /*\n///  * NFSv4.1 attributes\n///  */\n/// typedef bitmap4         fattr4_supported_attrs;\n/// typedef nfs_ftype4      fattr4_type;\n/// typedef uint32_t        fattr4_fh_expire_type;\n/// typedef changeid4       fattr4_change;\n/// typedef uint64_t        fattr4_size;\n/// typedef bool            fattr4_link_support;\n/// typedef bool            fattr4_symlink_support;\n/// typedef bool            fattr4_named_attr;\n/// typedef fsid4           fattr4_fsid;\n/// typedef bool            fattr4_unique_handles;\n/// typedef nfs_lease4      fattr4_lease_time;\n/// typedef nfsstat4        fattr4_rdattr_error;\n/// typedef nfsace4         fattr4_acl<>;\n/// typedef uint32_t        fattr4_aclsupport;\n/// typedef bool            fattr4_archive;\n/// typedef bool            fattr4_cansettime;\n/// typedef bool            fattr4_case_insensitive;\n/// typedef bool            fattr4_case_preserving;\n/// typedef bool            fattr4_chown_restricted;\n/// typedef uint64_t        fattr4_fileid;\n/// typedef uint64_t        fattr4_files_avail;\n/// typedef nfs_fh4         fattr4_filehandle;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// typedef uint64_t        fattr4_files_free;\n/// typedef uint64_t        fattr4_files_total;\n/// typedef fs_locations4   fattr4_fs_locations;\n/// typedef bool            fattr4_hidden;\n/// typedef bool            fattr4_homogeneous;\n/// typedef uint64_t        fattr4_maxfilesize;\n/// typedef uint32_t        fattr4_maxlink;\n/// typedef uint32_t        fattr4_maxname;\n/// typedef uint64_t        fattr4_maxread;\n/// typedef uint64_t        fattr4_maxwrite;\n/// typedef ascii_REQUIRED4 fattr4_mimetype;\n/// typedef mode4           fattr4_mode;\n/// typedef mode_masked4    fattr4_mode_set_masked;\n/// typedef uint64_t        fattr4_mounted_on_fileid;\n/// typedef bool            fattr4_no_trunc;\n/// typedef uint32_t        fattr4_numlinks;\n/// typedef utf8str_mixed   fattr4_owner;\n/// typedef utf8str_mixed   fattr4_owner_group;\n/// typedef uint64_t        fattr4_quota_avail_hard;\n/// typedef uint64_t        fattr4_quota_avail_soft;\n/// typedef uint64_t        fattr4_quota_used;\n/// typedef specdata4       fattr4_rawdev;\n/// typedef uint64_t        fattr4_space_avail;\n/// typedef length4         fattr4_space_free;\n/// typedef uint64_t        fattr4_space_total;\n/// typedef uint64_t        fattr4_space_used;\n/// typedef bool            fattr4_system;\n/// typedef nfstime4        fattr4_time_access;\n/// typedef settime4        fattr4_time_access_set;\n/// typedef nfstime4        fattr4_time_backup;\n/// typedef nfstime4        fattr4_time_create;\n/// typedef nfstime4        fattr4_time_delta;\n/// typedef nfstime4        fattr4_time_metadata;\n/// typedef nfstime4        fattr4_time_modify;\n/// typedef settime4        fattr4_time_modify_set;\n/// /*\n///  * Attributes new to NFSv4.1\n///  */\n/// typedef bitmap4         fattr4_suppattr_exclcreat;\n/// typedef nfstime4        fattr4_dir_notif_delay;\n/// typedef nfstime4        fattr4_dirent_notif_delay;\n/// typedef layouttype4     fattr4_fs_layout_types<>;\n/// typedef fs4_status      fattr4_fs_status;\n/// typedef fs_charset_cap4 fattr4_fs_charset_cap;\n/// typedef uint32_t        fattr4_layout_alignment;\n/// typedef uint32_t        fattr4_layout_blksize;\n/// typedef layouthint4     fattr4_layout_hint;\n/// typedef layouttype4     fattr4_layout_types<>;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// typedef mdsthreshold4   fattr4_mdsthreshold;\n/// typedef retention_get4  fattr4_retention_get;\n/// typedef retention_set4  fattr4_retention_set;\n/// typedef retention_get4  fattr4_retentevt_get;\n/// typedef retention_set4  fattr4_retentevt_set;\n/// typedef uint64_t        fattr4_retention_hold;\n/// typedef nfsacl41        fattr4_dacl;\n/// typedef nfsacl41        fattr4_sacl;\n/// typedef change_policy4  fattr4_change_policy;\n/// /*\n///  * Attributes new to NFSv4.2\n///  */\n/// typedef uint64_t        fattr4_space_freed;\n/// typedef change_attr_type4\n///                 fattr4_change_attr_type;\n/// typedef sec_label4      fattr4_sec_label;\n/// typedef uint32_t        fattr4_clone_blksize;\n///\n/// %/*\n/// % * REQUIRED attributes\n/// % */\n/// const FATTR4_SUPPORTED_ATTRS    = 0;\n/// const FATTR4_TYPE               = 1;\n/// const FATTR4_FH_EXPIRE_TYPE     = 2;\n/// const FATTR4_CHANGE             = 3;\n/// const FATTR4_SIZE               = 4;\n/// const FATTR4_LINK_SUPPORT       = 5;\n/// const FATTR4_SYMLINK_SUPPORT    = 6;\n/// const FATTR4_NAMED_ATTR         = 7;\n/// const FATTR4_FSID               = 8;\n/// const FATTR4_UNIQUE_HANDLES     = 9;\n/// const FATTR4_LEASE_TIME         = 10;\n/// const FATTR4_RDATTR_ERROR       = 11;\n/// const FATTR4_FILEHANDLE         = 19;\n///\n/// %/*\n/// % * New to NFSv4.1\n/// % */\n/// const FATTR4_SUPPATTR_EXCLCREAT = 75;\n///\n/// %/*\n/// % * RECOMMENDED attributes\n/// % */\n/// const FATTR4_ACL                = 12;\n/// const FATTR4_ACLSUPPORT         = 13;\n/// const FATTR4_ARCHIVE            = 14;\n/// const FATTR4_CANSETTIME         = 15;\n/// const FATTR4_CASE_INSENSITIVE   = 16;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// const FATTR4_CASE_PRESERVING    = 17;\n/// const FATTR4_CHOWN_RESTRICTED   = 18;\n/// const FATTR4_FILEID             = 20;\n/// const FATTR4_FILES_AVAIL        = 21;\n/// const FATTR4_FILES_FREE         = 22;\n/// const FATTR4_FILES_TOTAL        = 23;\n/// const FATTR4_FS_LOCATIONS       = 24;\n/// const FATTR4_HIDDEN             = 25;\n/// const FATTR4_HOMOGENEOUS        = 26;\n/// const FATTR4_MAXFILESIZE        = 27;\n/// const FATTR4_MAXLINK            = 28;\n/// const FATTR4_MAXNAME            = 29;\n/// const FATTR4_MAXREAD            = 30;\n/// const FATTR4_MAXWRITE           = 31;\n/// const FATTR4_MIMETYPE           = 32;\n/// const FATTR4_MODE               = 33;\n/// const FATTR4_NO_TRUNC           = 34;\n/// const FATTR4_NUMLINKS           = 35;\n/// const FATTR4_OWNER              = 36;\n/// const FATTR4_OWNER_GROUP        = 37;\n/// const FATTR4_QUOTA_AVAIL_HARD   = 38;\n/// const FATTR4_QUOTA_AVAIL_SOFT   = 39;\n/// const FATTR4_QUOTA_USED         = 40;\n/// const FATTR4_RAWDEV             = 41;\n/// const FATTR4_SPACE_AVAIL        = 42;\n/// const FATTR4_SPACE_FREE         = 43;\n/// const FATTR4_SPACE_TOTAL        = 44;\n/// const FATTR4_SPACE_USED         = 45;\n/// const FATTR4_SYSTEM             = 46;\n/// const FATTR4_TIME_ACCESS        = 47;\n/// const FATTR4_TIME_ACCESS_SET    = 48;\n/// const FATTR4_TIME_BACKUP        = 49;\n/// const FATTR4_TIME_CREATE        = 50;\n/// const FATTR4_TIME_DELTA         = 51;\n/// const FATTR4_TIME_METADATA      = 52;\n/// const FATTR4_TIME_MODIFY        = 53;\n/// const FATTR4_TIME_MODIFY_SET    = 54;\n/// const FATTR4_MOUNTED_ON_FILEID  = 55;\n///\n/// %/*\n/// % * New to NFSv4.1\n/// % */\n/// const FATTR4_DIR_NOTIF_DELAY    = 56;\n/// const FATTR4_DIRENT_NOTIF_DELAY = 57;\n/// const FATTR4_DACL               = 58;\n/// const FATTR4_SACL               = 59;\n/// const FATTR4_CHANGE_POLICY      = 60;\n/// const FATTR4_FS_STATUS          = 61;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// const FATTR4_FS_LAYOUT_TYPES    = 62;\n/// const FATTR4_LAYOUT_HINT        = 63;\n/// const FATTR4_LAYOUT_TYPES       = 64;\n/// const FATTR4_LAYOUT_BLKSIZE     = 65;\n/// const FATTR4_LAYOUT_ALIGNMENT   = 66;\n/// const FATTR4_FS_LOCATIONS_INFO  = 67;\n/// const FATTR4_MDSTHRESHOLD       = 68;\n/// const FATTR4_RETENTION_GET      = 69;\n/// const FATTR4_RETENTION_SET      = 70;\n/// const FATTR4_RETENTEVT_GET      = 71;\n/// const FATTR4_RETENTEVT_SET      = 72;\n/// const FATTR4_RETENTION_HOLD     = 73;\n/// const FATTR4_MODE_SET_MASKED    = 74;\n/// const FATTR4_FS_CHARSET_CAP     = 76;\n///\n/// %/*\n/// % * New to NFSv4.2\n/// % */\n/// const FATTR4_CLONE_BLKSIZE      = 77;\n/// const FATTR4_SPACE_FREED        = 78;\n/// const FATTR4_CHANGE_ATTR_TYPE   = 79;\n/// const FATTR4_SEC_LABEL          = 80;\n///\n/// /*\n///  * File attribute container\n///  */\n/// struct fattr4 {\n///         bitmap4         attrmask;\n///         attrlist4       attr_vals;\n/// };\n///\n/// /*\n///  * Change info for the client\n///  */\n/// struct change_info4 {\n///         bool            atomic;\n///         changeid4       before;\n///         changeid4       after;\n/// };\n///\n/// typedef netaddr4 clientaddr4;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Callback program info as provided by the client\n///  */\n/// struct cb_client4 {\n///         uint32_t        cb_program;\n///         netaddr4        cb_location;\n/// };\n///\n/// /*\n///  * NFSv4.0 long-hand client ID\n///  */\n/// struct nfs_client_id4 {\n///         verifier4       verifier;\n///         opaque          id<NFS4_OPAQUE_LIMIT>;\n/// };\n///\n/// /*\n///  * NFSv4.1 client owner (aka long-hand client ID)\n///  */\n/// struct client_owner4 {\n///         verifier4       co_verifier;\n///         opaque          co_ownerid<NFS4_OPAQUE_LIMIT>;\n/// };\n///\n///\n/// /*\n///  * NFSv4.1 server owner\n///  */\n/// struct server_owner4 {\n///  uint64_t       so_minor_id;\n///  opaque         so_major_id<NFS4_OPAQUE_LIMIT>;\n/// };\n///\n///\n/// struct state_owner4 {\n///         clientid4       clientid;\n///         opaque          owner<NFS4_OPAQUE_LIMIT>;\n/// };\n///\n/// typedef state_owner4 open_owner4;\n/// typedef state_owner4 lock_owner4;\n///\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// enum nfs_lock_type4 {\n///         READ_LT         = 1,\n///         WRITE_LT        = 2,\n///         READW_LT        = 3,    /* Blocking read */\n///         WRITEW_LT       = 4     /* Blocking write */\n/// };\n///\n///\n/// %\n/// %/* Input for computing subkeys */\n/// enum ssv_subkey4 {\n///         SSV4_SUBKEY_MIC_I2T     = 1,\n///         SSV4_SUBKEY_MIC_T2I     = 2,\n///         SSV4_SUBKEY_SEAL_I2T    = 3,\n///         SSV4_SUBKEY_SEAL_T2I    = 4\n/// };\n/// %\n///\n/// %\n/// %/* Input for computing smt_hmac */\n/// struct ssv_mic_plain_tkn4 {\n///   uint32_t        smpt_ssv_seq;\n///   opaque          smpt_orig_plain<>;\n/// };\n/// %\n///\n/// %\n/// %/*\n/// % * Secret State Verifier Generic Security Service (SSV GSS)\n/// % * PerMsgToken token\n/// % */\n/// struct ssv_mic_tkn4 {\n///   uint32_t        smt_ssv_seq;\n///   opaque          smt_hmac<>;\n/// };\n/// %\n///\n/// %\n/// %/* Input for computing ssct_encr_data and ssct_hmac */\n/// struct ssv_seal_plain_tkn4 {\n///   opaque          sspt_confounder<>;\n///   uint32_t        sspt_ssv_seq;\n///   opaque          sspt_orig_plain<>;\n///   opaque          sspt_pad<>;\n/// };\n/// %\n///\n/// %",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// %/* SSV GSS SealedMessage token */\n/// struct ssv_seal_cipher_tkn4 {\n///   uint32_t      ssct_ssv_seq;\n///   opaque        ssct_iv<>;\n///   opaque        ssct_encr_data<>;\n///   opaque        ssct_hmac<>;\n/// };\n/// %\n///\n/// /*\n///  * Defines an individual server replica\n///  */\n/// struct fs_locations_server4 {\n///        int32_t          fls_currency;\n///        opaque           fls_info<>;\n///        utf8str_cis      fls_server;\n/// };\n///\n/// /*\n///  * Byte indices of items within\n///  * fls_info: flag fields, class numbers,\n///  * bytes indicating ranks and orders\n///  */\n/// const FSLI4BX_GFLAGS            = 0;\n/// const FSLI4BX_TFLAGS            = 1;\n///\n/// const FSLI4BX_CLSIMUL           = 2;\n/// const FSLI4BX_CLHANDLE          = 3;\n/// const FSLI4BX_CLFILEID          = 4;\n/// const FSLI4BX_CLWRITEVER        = 5;\n/// const FSLI4BX_CLCHANGE          = 6;\n/// const FSLI4BX_CLREADDIR         = 7;\n///\n/// const FSLI4BX_READRANK          = 8;\n/// const FSLI4BX_WRITERANK         = 9;\n/// const FSLI4BX_READORDER         = 10;\n/// const FSLI4BX_WRITEORDER        = 11;\n///\n/// /*\n///  * Bits defined within the general flag byte\n///  */\n/// const FSLI4GF_WRITABLE          = 0x01;\n/// const FSLI4GF_CUR_REQ           = 0x02;\n/// const FSLI4GF_ABSENT            = 0x04;\n/// const FSLI4GF_GOING             = 0x08;\n/// const FSLI4GF_SPLIT             = 0x10;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Bits defined within the transport flag byte\n///  */\n/// const FSLI4TF_RDMA              = 0x01;\n///\n/// /*\n///  * Defines a set of replicas sharing\n///  * a common value of the root path\n///  * within the corresponding\n///  * single-server namespaces\n///  */\n/// struct fs_locations_item4 {\n///        fs_locations_server4     fli_entries<>;\n///        pathname4                fli_rootpath;\n/// };\n///\n/// /*\n///  * Defines the overall structure of\n///  * the fs_locations_info attribute\n///  */\n/// struct fs_locations_info4 {\n///        uint32_t                 fli_flags;\n///        int32_t                  fli_valid_for;\n///        pathname4                fli_fs_root;\n///        fs_locations_item4       fli_items<>;\n/// };\n///\n/// /*\n///  * Flag bits in fli_flags\n///  */\n/// const FSLI4IF_VAR_SUB           = 0x00000001;\n///\n/// typedef fs_locations_info4 fattr4_fs_locations_info;\n///\n/// const NFL4_UFLG_MASK                    = 0x0000003F;\n/// const NFL4_UFLG_DENSE                   = 0x00000001;\n/// const NFL4_UFLG_COMMIT_THRU_MDS         = 0x00000002;\n/// const NFL42_UFLG_IO_ADVISE_THRU_MDS     = 0x00000004;\n/// const NFL4_UFLG_STRIPE_UNIT_SIZE_MASK   = 0xFFFFFFC0;\n///\n/// typedef uint32_t nfl_util4;\n///\n/// %\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// enum filelayout_hint_care4 {\n///         NFLH4_CARE_DENSE        = NFL4_UFLG_DENSE,\n///\n///         NFLH4_CARE_COMMIT_THRU_MDS\n///                                 = NFL4_UFLG_COMMIT_THRU_MDS,\n///\n///         NFL42_CARE_IO_ADVISE_THRU_MDS\n///                                 = NFL42_UFLG_IO_ADVISE_THRU_MDS,\n///\n///         NFLH4_CARE_STRIPE_UNIT_SIZE\n///                                 = 0x00000040,\n///\n///         NFLH4_CARE_STRIPE_COUNT = 0x00000080\n/// };\n/// %\n/// %/*\n/// % * Encoded in the loh_body field of data type layouthint4:\n/// % */\n/// %\n/// struct nfsv4_1_file_layouthint4 {\n///         uint32_t        nflh_care;\n///         nfl_util4       nflh_util;\n///         count4          nflh_stripe_count;\n/// };\n///\n/// %\n///\n/// %\n/// typedef netaddr4 multipath_list4<>;\n/// %\n/// %/*\n/// % * Encoded in the da_addr_body field of data type device_addr4:\n/// % */\n/// struct nfsv4_1_file_layout_ds_addr4 {\n///         uint32_t        nflda_stripe_indices<>;\n///         multipath_list4 nflda_multipath_ds_list<>;\n/// };\n///\n/// %\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// %\n/// %/*\n/// % * Encoded in the loc_body field of data type layout_content4:\n/// % */\n/// struct nfsv4_1_file_layout4 {\n///          deviceid4      nfl_deviceid;\n///          nfl_util4      nfl_util;\n///          uint32_t       nfl_first_stripe_index;\n///          offset4        nfl_pattern_offset;\n///          nfs_fh4        nfl_fh_list<>;\n/// };\n///\n/// %\n///\n///\n/// /*\n///  * Operation arrays (the opnum first)\n///  */\n///\n/// enum nfs_opnum4 {\n///  OP_ACCESS               = 3,\n///  OP_CLOSE                = 4,\n///  OP_COMMIT               = 5,\n///  OP_CREATE               = 6,\n///  OP_DELEGPURGE           = 7,\n///  OP_DELEGRETURN          = 8,\n///  OP_GETATTR              = 9,\n///  OP_GETFH                = 10,\n///  OP_LINK                 = 11,\n///  OP_LOCK                 = 12,\n///  OP_LOCKT                = 13,\n///  OP_LOCKU                = 14,\n///  OP_LOOKUP               = 15,\n///  OP_LOOKUPP              = 16,\n///  OP_NVERIFY              = 17,\n///  OP_OPEN                 = 18,\n///  OP_OPENATTR             = 19,\n///  OP_OPEN_CONFIRM         = 20, /* Mandatory not-to-implement */\n///  OP_OPEN_DOWNGRADE       = 21,\n///  OP_PUTFH                = 22,\n///  OP_PUTPUBFH             = 23,\n///  OP_PUTROOTFH            = 24,\n///  OP_READ                 = 25,\n///  OP_READDIR              = 26,\n///  OP_READLINK             = 27,\n///  OP_REMOVE               = 28,\n///  OP_RENAME               = 29,\n///  OP_RENEW                = 30, /* Mandatory not-to-implement */",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  OP_RESTOREFH            = 31,\n///  OP_SAVEFH               = 32,\n///  OP_SECINFO              = 33,\n///  OP_SETATTR              = 34,\n///  OP_SETCLIENTID          = 35, /* Mandatory not-to-implement */\n///  OP_SETCLIENTID_CONFIRM  = 36, /* Mandatory not-to-implement */\n///  OP_VERIFY               = 37,\n///  OP_WRITE                = 38,\n///  OP_RELEASE_LOCKOWNER    = 39, /* Mandatory not-to-implement */\n/// %\n/// %/* New operations for NFSv4.1 */\n/// %\n///  OP_BACKCHANNEL_CTL      = 40,\n///  OP_BIND_CONN_TO_SESSION = 41,\n///  OP_EXCHANGE_ID          = 42,\n///  OP_CREATE_SESSION       = 43,\n///  OP_DESTROY_SESSION      = 44,\n///  OP_FREE_STATEID         = 45,\n///  OP_GET_DIR_DELEGATION   = 46,\n///  OP_GETDEVICEINFO        = 47,\n///  OP_GETDEVICELIST        = 48,\n///  OP_LAYOUTCOMMIT         = 49,\n///  OP_LAYOUTGET            = 50,\n///  OP_LAYOUTRETURN         = 51,\n///  OP_SECINFO_NO_NAME      = 52,\n///  OP_SEQUENCE             = 53,\n///  OP_SET_SSV              = 54,\n///  OP_TEST_STATEID         = 55,\n///  OP_WANT_DELEGATION      = 56,\n///  OP_DESTROY_CLIENTID     = 57,\n///  OP_RECLAIM_COMPLETE     = 58,\n/// %",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// %/* New operations for NFSv4.2 */\n/// %\n///  OP_ALLOCATE             = 59,\n///  OP_COPY                 = 60,\n///  OP_COPY_NOTIFY          = 61,\n///  OP_DEALLOCATE           = 62,\n///  OP_IO_ADVISE            = 63,\n///  OP_LAYOUTERROR          = 64,\n///  OP_LAYOUTSTATS          = 65,\n///  OP_OFFLOAD_CANCEL       = 66,\n///  OP_OFFLOAD_STATUS       = 67,\n///  OP_READ_PLUS            = 68,\n///  OP_SEEK                 = 69,\n///  OP_WRITE_SAME           = 70,\n///  OP_CLONE                = 71,\n///  OP_ILLEGAL              = 10044\n/// };\n///\n///\n///\n/// const ACCESS4_READ       = 0x00000001;\n/// const ACCESS4_LOOKUP     = 0x00000002;\n/// const ACCESS4_MODIFY     = 0x00000004;\n/// const ACCESS4_EXTEND     = 0x00000008;\n/// const ACCESS4_DELETE     = 0x00000010;\n/// const ACCESS4_EXECUTE    = 0x00000020;\n///\n/// struct ACCESS4args {\n///         /* CURRENT_FH: object */\n///         uint32_t        access;\n/// };\n///\n/// struct ACCESS4resok {\n///         uint32_t        supported;\n///         uint32_t        access;\n/// };\n///\n/// union ACCESS4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          ACCESS4resok    resok4;\n///  default:\n///          void;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct CLONE4args {\n///         /* SAVED_FH: source file */\n///         /* CURRENT_FH: destination file */\n///         stateid4        cl_src_stateid;\n///         stateid4        cl_dst_stateid;\n///         offset4         cl_src_offset;\n///         offset4         cl_dst_offset;\n///         length4         cl_count;\n/// };\n///\n/// struct CLONE4res {\n///         nfsstat4        cl_status;\n/// };\n/// struct CLOSE4args {\n///         /* CURRENT_FH: object */\n///         seqid4          seqid;\n///         stateid4        open_stateid;\n/// };\n///\n/// union CLOSE4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          stateid4       open_stateid;\n///  default:\n///          void;\n/// };\n///\n/// struct COMMIT4args {\n///         /* CURRENT_FH: file */\n///         offset4         offset;\n///         count4          count;\n/// };\n///\n/// struct COMMIT4resok {\n///         verifier4       writeverf;\n/// };\n///\n/// union COMMIT4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          COMMIT4resok   resok4;\n///  default:\n///          void;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union createtype4 switch (nfs_ftype4 type) {\n///  case NF4LNK:\n///          linktext4 linkdata;\n///  case NF4BLK:\n///  case NF4CHR:\n///          specdata4 devdata;\n///  case NF4SOCK:\n///  case NF4FIFO:\n///  case NF4DIR:\n///          void;\n///  default:\n///          void;  /* Server should return NFS4ERR_BADTYPE. */\n/// };\n///\n/// struct CREATE4args {\n///         /* CURRENT_FH: directory for creation */\n///         createtype4     objtype;\n///         component4      objname;\n///         fattr4          createattrs;\n/// };\n///\n/// struct CREATE4resok {\n///         change_info4    cinfo;\n///         bitmap4         attrset;        /* Attributes set */\n/// };\n///\n/// union CREATE4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          /* New CURRENTFH: created object */\n///          CREATE4resok resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct DELEGPURGE4args {\n///         clientid4       clientid;\n/// };\n///\n/// struct DELEGPURGE4res {\n///         nfsstat4        status;\n/// };\n///\n/// struct DELEGRETURN4args {\n///         /* CURRENT_FH: delegated object */\n///         stateid4        deleg_stateid;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct DELEGRETURN4res {\n///         nfsstat4        status;\n/// };\n///\n/// struct GETATTR4args {\n///         /* CURRENT_FH: object */\n///         bitmap4         attr_request;\n/// };\n///\n/// struct GETATTR4resok {\n///         fattr4          obj_attributes;\n/// };\n///\n/// union GETATTR4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          GETATTR4resok  resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct GETFH4resok {\n///         nfs_fh4         object;\n/// };\n///\n/// union GETFH4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          GETFH4resok     resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct LINK4args {\n///         /* SAVED_FH: source object */\n///         /* CURRENT_FH: target directory */\n///         component4      newname;\n/// };\n///\n/// struct LINK4resok {\n///         change_info4    cinfo;\n/// };\n///\n/// union LINK4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          LINK4resok resok4;\n///  default:\n///          void;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * For LOCK, transition from open_stateid and lock_owner\n///  * to a lock stateid.\n///  */\n/// struct open_to_lock_owner4 {\n///         seqid4          open_seqid;\n///         stateid4        open_stateid;\n///         seqid4          lock_seqid;\n///         lock_owner4     lock_owner;\n/// };\n///\n/// /*\n///  * For LOCK, existing lock stateid continues to request new\n///  * file lock for the same lock_owner and open_stateid.\n///  */\n/// struct exist_lock_owner4 {\n///         stateid4        lock_stateid;\n///         seqid4          lock_seqid;\n/// };\n///\n/// union locker4 switch (bool new_lock_owner) {\n///  case TRUE:\n///         open_to_lock_owner4     open_owner;\n///  case FALSE:\n///         exist_lock_owner4       lock_owner;\n/// };\n///\n/// /*\n///  * LOCK/LOCKT/LOCKU: Record lock management\n///  */\n/// struct LOCK4args {\n///         /* CURRENT_FH: file */\n///         nfs_lock_type4  locktype;\n///         bool            reclaim;\n///         offset4         offset;\n///         length4         length;\n///         locker4         locker;\n/// };\n///\n/// struct LOCK4denied {\n///         offset4         offset;\n///         length4         length;\n///         nfs_lock_type4  locktype;\n///         lock_owner4     owner;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct LOCK4resok {\n///         stateid4        lock_stateid;\n/// };\n///\n/// union LOCK4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          LOCK4resok     resok4;\n///  case NFS4ERR_DENIED:\n///          LOCK4denied    denied;\n///  default:\n///          void;\n/// };\n///\n/// struct LOCKT4args {\n///         /* CURRENT_FH: file */\n///         nfs_lock_type4  locktype;\n///         offset4         offset;\n///         length4         length;\n///         lock_owner4     owner;\n/// };\n///\n/// union LOCKT4res switch (nfsstat4 status) {\n///  case NFS4ERR_DENIED:\n///          LOCK4denied    denied;\n///  case NFS4_OK:\n///          void;\n///  default:\n///          void;\n/// };\n///\n/// struct LOCKU4args {\n///         /* CURRENT_FH: file */\n///         nfs_lock_type4  locktype;\n///         seqid4          seqid;\n///         stateid4        lock_stateid;\n///         offset4         offset;\n///         length4         length;\n/// };\n///\n/// union LOCKU4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          stateid4       lock_stateid;\n///  default:\n///          void;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct LOOKUP4args {\n///         /* CURRENT_FH: directory */\n///         component4      objname;\n/// };\n///\n/// struct LOOKUP4res {\n///         /* New CURRENT_FH: object */\n///         nfsstat4        status;\n/// };\n///\n/// struct LOOKUPP4res {\n///         /* New CURRENT_FH: parent directory */\n///         nfsstat4        status;\n/// };\n///\n/// struct NVERIFY4args {\n///         /* CURRENT_FH: object */\n///         fattr4          obj_attributes;\n/// };\n///\n/// struct NVERIFY4res {\n///         nfsstat4        status;\n/// };\n///\n/// /*\n///  * Various definitions for OPEN\n///  */\n/// enum createmode4 {\n///         UNCHECKED4      = 0,\n///         GUARDED4        = 1,\n///         /* Deprecated in NFSv4.1 */\n///         EXCLUSIVE4      = 2,\n///         /*\n///          * New to NFSv4.1.  If session is persistent,\n///          * GUARDED4 MUST be used.  Otherwise, use\n///          * EXCLUSIVE4_1 instead of EXCLUSIVE4.\n///          */\n///         EXCLUSIVE4_1    = 3\n/// };\n///\n/// struct creatverfattr {\n///          verifier4      cva_verf;\n///          fattr4         cva_attrs;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union createhow4 switch (createmode4 mode) {\n///  case UNCHECKED4:\n///  case GUARDED4:\n///          fattr4         createattrs;\n///  case EXCLUSIVE4:\n///          verifier4      createverf;\n///  case EXCLUSIVE4_1:\n///          creatverfattr  ch_createboth;\n/// };\n///\n/// enum opentype4 {\n///         OPEN4_NOCREATE  = 0,\n///         OPEN4_CREATE    = 1\n/// };\n///\n/// union openflag4 switch (opentype4 opentype) {\n///  case OPEN4_CREATE:\n///          createhow4     how;\n///  default:\n///          void;\n/// };\n///\n/// /* Next definitions used for OPEN delegation */\n/// enum limit_by4 {\n///         NFS_LIMIT_SIZE          = 1,\n///         NFS_LIMIT_BLOCKS        = 2\n///         /* Others as needed */\n/// };\n///\n/// struct nfs_modified_limit4 {\n///         uint32_t        num_blocks;\n///         uint32_t        bytes_per_block;\n/// };\n///\n/// union nfs_space_limit4 switch (limit_by4 limitby) {\n///  /* Limit specified as file size */\n///  case NFS_LIMIT_SIZE:\n///          uint64_t               filesize;\n///  /* Limit specified by number of blocks */\n///  case NFS_LIMIT_BLOCKS:\n///          nfs_modified_limit4    mod_blocks;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Share Access and Deny constants for open argument\n///  */\n/// const OPEN4_SHARE_ACCESS_READ   = 0x00000001;\n/// const OPEN4_SHARE_ACCESS_WRITE  = 0x00000002;\n/// const OPEN4_SHARE_ACCESS_BOTH   = 0x00000003;\n///\n/// const OPEN4_SHARE_DENY_NONE     = 0x00000000;\n/// const OPEN4_SHARE_DENY_READ     = 0x00000001;\n/// const OPEN4_SHARE_DENY_WRITE    = 0x00000002;\n/// const OPEN4_SHARE_DENY_BOTH     = 0x00000003;\n///\n///\n/// /* New flags for share_access field of OPEN4args */\n/// const OPEN4_SHARE_ACCESS_WANT_DELEG_MASK        = 0xFF00;\n/// const OPEN4_SHARE_ACCESS_WANT_NO_PREFERENCE     = 0x0000;\n/// const OPEN4_SHARE_ACCESS_WANT_READ_DELEG        = 0x0100;\n/// const OPEN4_SHARE_ACCESS_WANT_WRITE_DELEG       = 0x0200;\n/// const OPEN4_SHARE_ACCESS_WANT_ANY_DELEG         = 0x0300;\n/// const OPEN4_SHARE_ACCESS_WANT_NO_DELEG          = 0x0400;\n/// const OPEN4_SHARE_ACCESS_WANT_CANCEL            = 0x0500;\n///\n/// const\n///  OPEN4_SHARE_ACCESS_WANT_SIGNAL_DELEG_WHEN_RESRC_AVAIL\n///  = 0x10000;\n///\n/// const\n///  OPEN4_SHARE_ACCESS_WANT_PUSH_DELEG_WHEN_UNCONTENDED\n///  = 0x20000;\n///\n/// enum open_delegation_type4 {\n///         OPEN_DELEGATE_NONE      = 0,\n///         OPEN_DELEGATE_READ      = 1,\n///         OPEN_DELEGATE_WRITE     = 2,\n///         OPEN_DELEGATE_NONE_EXT  = 3 /* New to NFSv4.1 */\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// enum open_claim_type4 {\n///         /*\n///          * Not a reclaim\n///          */\n///         CLAIM_NULL              = 0,\n///\n///         CLAIM_PREVIOUS          = 1,\n///         CLAIM_DELEGATE_CUR      = 2,\n///         CLAIM_DELEGATE_PREV     = 3,\n///\n///         /*\n///          * Not a reclaim\n///          *\n///          * Like CLAIM_NULL, but object identified\n///          * by the current filehandle\n///          */\n///         CLAIM_FH                = 4, /* New to NFSv4.1 */\n///\n///         /*\n///          * Like CLAIM_DELEGATE_CUR, but object identified\n///          * by current filehandle\n///          */\n///         CLAIM_DELEG_CUR_FH      = 5, /* New to NFSv4.1 */\n///\n///         /*\n///          * Like CLAIM_DELEGATE_PREV, but object identified\n///          * by current filehandle\n///          */\n///         CLAIM_DELEG_PREV_FH     = 6 /* New to NFSv4.1 */\n/// };\n///\n/// struct open_claim_delegate_cur4 {\n///         stateid4        delegate_stateid;\n///         component4      file;\n/// };\n///\n/// union open_claim4 switch (open_claim_type4 claim) {\n///  /*\n///   * No special rights to file.\n///   * Ordinary OPEN of the specified file.\n///   */\n///  case CLAIM_NULL:\n///         /* CURRENT_FH: directory */\n///         component4      file;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  /*\n///   * Right to the file established by an\n///   * open previous to server reboot.  File\n///   * identified by filehandle obtained at\n///   * that time rather than by name.\n///   */\n///  case CLAIM_PREVIOUS:\n///         /* CURRENT_FH: file being reclaimed */\n///         open_delegation_type4   delegate_type;\n///\n///  /*\n///   * Right to file based on a delegation\n///   * granted by the server.  File is\n///   * specified by name.\n///   */\n///  case CLAIM_DELEGATE_CUR:\n///         /* CURRENT_FH: directory */\n///         open_claim_delegate_cur4        delegate_cur_info;\n///\n///  /*\n///   * Right to file based on a delegation\n///   * granted to a previous boot instance\n///   * of the client.  File is specified by name.\n///   */\n///  case CLAIM_DELEGATE_PREV:\n///          /* CURRENT_FH: directory */\n///         component4      file_delegate_prev;\n///\n///  /*\n///   * Like CLAIM_NULL.  No special rights\n///   * to file.  Ordinary OPEN of the\n///   * specified file by current filehandle.\n///   */\n///  case CLAIM_FH: /* New to NFSv4.1 */\n///         /* CURRENT_FH: regular file to open */\n///         void;\n///\n///  /*\n///   * Like CLAIM_DELEGATE_PREV.  Right to file based on a\n///   * delegation granted to a previous boot\n///   * instance of the client.  File is identified\n///   * by filehandle.\n///   */\n///  case CLAIM_DELEG_PREV_FH: /* New to NFSv4.1 */\n///         /* CURRENT_FH: file being opened */\n///         void;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  /*\n///   * Like CLAIM_DELEGATE_CUR.  Right to file based on\n///   * a delegation granted by the server.\n///   * File is identified by filehandle.\n///   */\n///  case CLAIM_DELEG_CUR_FH: /* New to NFSv4.1 */\n///          /* CURRENT_FH: file being opened */\n///          stateid4       oc_delegate_stateid;\n///\n/// };\n///\n/// /*\n///  * OPEN: Open a file, potentially receiving an open delegation.\n///  */\n/// struct OPEN4args {\n///         seqid4          seqid;\n///         uint32_t        share_access;\n///         uint32_t        share_deny;\n///         open_owner4     owner;\n///         openflag4       openhow;\n///         open_claim4     claim;\n/// };\n///\n/// struct open_read_delegation4 {\n///  stateid4 stateid;    /* Stateid for delegation */\n///  bool     recall;     /* Pre-recalled flag for\n///                          delegations obtained\n///                          by reclaim (CLAIM_PREVIOUS) */\n///\n///  nfsace4 permissions; /* Defines users who don't\n///                          need an ACCESS call to\n///                          open for read */\n/// };\n///\n/// struct open_write_delegation4 {\n///  stateid4 stateid;      /* Stateid for delegation */\n///  bool     recall;       /* Pre-recalled flag for\n///                            delegations obtained\n///                            by reclaim\n///                            (CLAIM_PREVIOUS) */\n///\n///  nfs_space_limit4\n///            space_limit; /* Defines condition that\n///                            the client must check to\n///                            determine whether the\n///                            file needs to be flushed\n///                            to the server on close */\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  nfsace4   permissions; /* Defines users who don't\n///                            need an ACCESS call as\n///                            part of a delegated\n///                            open */\n/// };\n///\n///\n/// enum why_no_delegation4 { /* New to NFSv4.1 */\n///         WND4_NOT_WANTED                 = 0,\n///         WND4_CONTENTION                 = 1,\n///         WND4_RESOURCE                   = 2,\n///         WND4_NOT_SUPP_FTYPE             = 3,\n///         WND4_WRITE_DELEG_NOT_SUPP_FTYPE = 4,\n///         WND4_NOT_SUPP_UPGRADE           = 5,\n///         WND4_NOT_SUPP_DOWNGRADE         = 6,\n///         WND4_CANCELLED                  = 7,\n///         WND4_IS_DIR                     = 8\n/// };\n///\n/// union open_none_delegation4 /* New to NFSv4.1 */\n///  switch (why_no_delegation4 ond_why) {\n///          case WND4_CONTENTION:\n///                  bool ond_server_will_push_deleg;\n///          case WND4_RESOURCE:\n///                  bool ond_server_will_signal_avail;\n///          default:\n///                  void;\n/// };\n///\n/// union open_delegation4\n///  switch (open_delegation_type4 delegation_type) {\n///          case OPEN_DELEGATE_NONE:\n///                  void;\n///          case OPEN_DELEGATE_READ:\n///                  open_read_delegation4 read;\n///          case OPEN_DELEGATE_WRITE:\n///                  open_write_delegation4 write;\n///          case OPEN_DELEGATE_NONE_EXT: /* New to NFSv4.1 */\n///                  open_none_delegation4 od_whynone;\n/// };\n///\n/// /*\n///  * Result flags\n///  */\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /* Client must confirm open. */\n/// const OPEN4_RESULT_CONFIRM      = 0x00000002;\n/// /* Type of file-locking behavior at the server */\n/// const OPEN4_RESULT_LOCKTYPE_POSIX = 0x00000004;\n/// /* Server will preserve file if removed while open. */\n/// const OPEN4_RESULT_PRESERVE_UNLINKED = 0x00000008;\n///\n/// /*\n///  * Server may use CB_NOTIFY_LOCK on locks\n///  * derived from this open.\n///  */\n/// const OPEN4_RESULT_MAY_NOTIFY_LOCK = 0x00000020;\n///\n/// struct OPEN4resok {\n///  stateid4         stateid;      /* Stateid for open */\n///  change_info4     cinfo;        /* Directory change info */\n///  uint32_t         rflags;       /* Result flags */\n///  bitmap4          attrset;      /* Attribute set for create */\n///  open_delegation4 delegation;   /* Info on any open\n///                                    delegation */\n/// };\n///\n/// union OPEN4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          /* New CURRENT_FH: opened file */\n///          OPEN4resok      resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct OPENATTR4args {\n///         /* CURRENT_FH: object */\n///         bool    createdir;\n/// };\n///\n/// struct OPENATTR4res {\n///         /*\n///          * If status is NFS4_OK,\n///          *   New CURRENT_FH: named attribute\n///          *                   directory\n///          */\n///         nfsstat4        status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /* Obsolete in NFSv4.1 */\n/// struct OPEN_CONFIRM4args {\n///         /* CURRENT_FH: opened file */\n///         stateid4        open_stateid;\n///         seqid4          seqid;\n/// };\n///\n/// struct OPEN_CONFIRM4resok {\n///         stateid4        open_stateid;\n/// };\n///\n/// union OPEN_CONFIRM4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          OPEN_CONFIRM4resok     resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct OPEN_DOWNGRADE4args {\n///         /* CURRENT_FH: opened file */\n///         stateid4        open_stateid;\n///         seqid4          seqid;\n///         uint32_t        share_access;\n///         uint32_t        share_deny;\n/// };\n///\n/// struct OPEN_DOWNGRADE4resok {\n///         stateid4        open_stateid;\n/// };\n///\n/// union OPEN_DOWNGRADE4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          OPEN_DOWNGRADE4resok    resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct PUTFH4args {\n///         nfs_fh4         object;\n/// };\n///\n/// struct PUTFH4res {\n///         /*\n///          * If status is NFS4_OK,\n///          *   New CURRENT_FH: argument to PUTFH\n///          */\n///         nfsstat4        status;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///\n/// struct PUTPUBFH4res {\n///         /*\n///          * If status is NFS4_OK,\n///          *   New CURRENT_FH: public fh\n///          */\n///         nfsstat4        status;\n/// };\n///\n/// struct PUTROOTFH4res {\n///         /*\n///          * If status is NFS4_OK,\n///          *   New CURRENT_FH: root fh\n///          */\n///         nfsstat4        status;\n/// };\n///\n/// struct READ4args {\n///         /* CURRENT_FH: file */\n///         stateid4        stateid;\n///         offset4         offset;\n///         count4          count;\n/// };\n///\n/// struct READ4resok {\n///         bool            eof;\n///         opaque          data<>;\n/// };\n///\n/// union READ4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          READ4resok     resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct READDIR4args {\n///         /* CURRENT_FH: directory */\n///         nfs_cookie4     cookie;\n///         verifier4       cookieverf;\n///         count4          dircount;\n///         count4          maxcount;\n///         bitmap4         attr_request;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct entry4 {\n///         nfs_cookie4     cookie;\n///         component4      name;\n///         fattr4          attrs;\n///         entry4          *nextentry;\n/// };\n///\n/// struct dirlist4 {\n///         entry4          *entries;\n///         bool            eof;\n/// };\n///\n/// struct READDIR4resok {\n///         verifier4       cookieverf;\n///         dirlist4        reply;\n/// };\n///\n///\n/// union READDIR4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          READDIR4resok  resok4;\n///  default:\n///          void;\n/// };\n///\n///\n/// struct READLINK4resok {\n///         linktext4       link;\n/// };\n///\n/// union READLINK4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          READLINK4resok resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct REMOVE4args {\n///         /* CURRENT_FH: directory */\n///         component4      target;\n/// };\n///\n/// struct REMOVE4resok {\n///         change_info4    cinfo;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union REMOVE4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          REMOVE4resok   resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct RENAME4args {\n///         /* SAVED_FH: source directory */\n///         component4      oldname;\n///         /* CURRENT_FH: target directory */\n///         component4      newname;\n/// };\n///\n/// struct RENAME4resok {\n///         change_info4    source_cinfo;\n///         change_info4    target_cinfo;\n/// };\n///\n/// union RENAME4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          RENAME4resok    resok4;\n///  default:\n///          void;\n/// };\n///\n/// /* Obsolete in NFSv4.1 */\n/// struct RENEW4args {\n///         clientid4       clientid;\n/// };\n///\n/// struct RENEW4res {\n///         nfsstat4        status;\n/// };\n///\n/// struct RESTOREFH4res {\n///         /*\n///          * If status is NFS4_OK,\n///          *   New CURRENT_FH: value of saved fh\n///          */\n///         nfsstat4        status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct SAVEFH4res {\n///         /*\n///          * If status is NFS4_OK,\n///          *   New SAVED_FH: value of current fh\n///          */\n///         nfsstat4        status;\n/// };\n///\n/// struct SECINFO4args {\n///         /* CURRENT_FH: directory */\n///         component4      name;\n/// };\n///\n/// /*\n///  * From RFC 2203\n///  */\n/// enum rpc_gss_svc_t {\n///         RPC_GSS_SVC_NONE        = 1,\n///         RPC_GSS_SVC_INTEGRITY   = 2,\n///         RPC_GSS_SVC_PRIVACY     = 3\n/// };\n///\n/// struct rpcsec_gss_info {\n///         sec_oid4        oid;\n///         qop4            qop;\n///         rpc_gss_svc_t   service;\n/// };\n///\n/// /* RPCSEC_GSS has a value of \"6\".  See RFC 2203. */\n/// union secinfo4 switch (uint32_t flavor) {\n///  case RPCSEC_GSS:\n///          rpcsec_gss_info        flavor_info;\n///  default:\n///          void;\n/// };\n///\n/// typedef secinfo4 SECINFO4resok<>;\n///\n/// union SECINFO4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          /* CURRENTFH: consumed */\n///          SECINFO4resok resok4;\n///  default:\n///          void;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct SETATTR4args {\n///         /* CURRENT_FH: target object */\n///         stateid4        stateid;\n///         fattr4          obj_attributes;\n/// };\n///\n/// struct SETATTR4res {\n///         nfsstat4        status;\n///         bitmap4         attrsset;\n/// };\n///\n/// /* Obsolete in NFSv4.1 */\n/// struct SETCLIENTID4args {\n///         nfs_client_id4  client;\n///         cb_client4      callback;\n///         uint32_t        callback_ident;\n/// };\n///\n/// struct SETCLIENTID4resok {\n///         clientid4       clientid;\n///         verifier4       setclientid_confirm;\n/// };\n///\n/// union SETCLIENTID4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          SETCLIENTID4resok      resok4;\n///  case NFS4ERR_CLID_INUSE:\n///          clientaddr4    client_using;\n///  default:\n///          void;\n/// };\n///\n/// /* Obsolete in NFSv4.1 */\n/// struct SETCLIENTID_CONFIRM4args {\n///         clientid4       clientid;\n///         verifier4       setclientid_confirm;\n/// };\n///\n/// struct SETCLIENTID_CONFIRM4res {\n///         nfsstat4        status;\n/// };\n///\n/// struct VERIFY4args {\n///         /* CURRENT_FH: object */\n///         fattr4          obj_attributes;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct VERIFY4res {\n///         nfsstat4        status;\n/// };\n///\n/// struct WRITE4args {\n///         /* CURRENT_FH: file */\n///         stateid4        stateid;\n///         offset4         offset;\n///         stable_how4     stable;\n///         opaque          data<>;\n/// };\n///\n/// struct WRITE4resok {\n///         count4          count;\n///         stable_how4     committed;\n///         verifier4       writeverf;\n/// };\n///\n/// union WRITE4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          WRITE4resok    resok4;\n///  default:\n///          void;\n/// };\n///\n/// /* Obsolete in NFSv4.1 */\n/// struct RELEASE_LOCKOWNER4args {\n///         lock_owner4     lock_owner;\n/// };\n///\n/// struct RELEASE_LOCKOWNER4res {\n///         nfsstat4        status;\n/// };\n///\n/// struct ILLEGAL4res {\n///         nfsstat4        status;\n/// };\n///\n/// typedef opaque gsshandle4_t<>;\n///\n/// struct gss_cb_handles4 {\n///         rpc_gss_svc_t           gcbp_service; /* RFC 2203 */\n///         gsshandle4_t            gcbp_handle_from_server;\n///         gsshandle4_t            gcbp_handle_from_client;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union callback_sec_parms4 switch (uint32_t cb_secflavor) {\n///  case AUTH_NONE:\n///          void;\n///  case AUTH_SYS:\n///          authsys_parms   cbsp_sys_cred; /* RFC 5531 */\n///  case RPCSEC_GSS:\n///          gss_cb_handles4 cbsp_gss_handles;\n/// };\n///\n/// struct BACKCHANNEL_CTL4args {\n///         uint32_t                bca_cb_program;\n///         callback_sec_parms4     bca_sec_parms<>;\n/// };\n///\n/// struct BACKCHANNEL_CTL4res {\n///         nfsstat4                bcr_status;\n/// };\n///\n/// enum channel_dir_from_client4 {\n///  CDFC4_FORE             = 0x1,\n///  CDFC4_BACK             = 0x2,\n///  CDFC4_FORE_OR_BOTH     = 0x3,\n///  CDFC4_BACK_OR_BOTH     = 0x7\n/// };\n///\n/// struct BIND_CONN_TO_SESSION4args {\n///  sessionid4     bctsa_sessid;\n///\n///  channel_dir_from_client4\n///                 bctsa_dir;\n///\n///  bool           bctsa_use_conn_in_rdma_mode;\n/// };\n///\n/// enum channel_dir_from_server4 {\n///  CDFS4_FORE     = 0x1,\n///  CDFS4_BACK     = 0x2,\n///  CDFS4_BOTH     = 0x3\n/// };\n///\n/// struct BIND_CONN_TO_SESSION4resok {\n///  sessionid4     bctsr_sessid;\n///\n///  channel_dir_from_server4\n///                 bctsr_dir;\n///\n///  bool           bctsr_use_conn_in_rdma_mode;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///\n/// union BIND_CONN_TO_SESSION4res\n///  switch (nfsstat4 bctsr_status) {\n///          case NFS4_OK:\n///                  BIND_CONN_TO_SESSION4resok  bctsr_resok4;\n///          default:\n///                  void;\n/// };\n///\n/// const EXCHGID4_FLAG_SUPP_MOVED_REFER    = 0x00000001;\n/// const EXCHGID4_FLAG_SUPP_MOVED_MIGR     = 0x00000002;\n/// const EXCHGID4_FLAG_SUPP_FENCE_OPS      = 0x00000004;\n///\n/// const EXCHGID4_FLAG_BIND_PRINC_STATEID  = 0x00000100;\n///\n/// const EXCHGID4_FLAG_USE_NON_PNFS        = 0x00010000;\n/// const EXCHGID4_FLAG_USE_PNFS_MDS        = 0x00020000;\n/// const EXCHGID4_FLAG_USE_PNFS_DS         = 0x00040000;\n///\n/// const EXCHGID4_FLAG_MASK_PNFS           = 0x00070000;\n///\n/// const EXCHGID4_FLAG_UPD_CONFIRMED_REC_A = 0x40000000;\n/// const EXCHGID4_FLAG_CONFIRMED_R         = 0x80000000;\n///\n/// struct state_protect_ops4 {\n///         bitmap4 spo_must_enforce;\n///         bitmap4 spo_must_allow;\n/// };\n///\n/// struct ssv_sp_parms4 {\n///         state_protect_ops4      ssp_ops;\n///         sec_oid4                ssp_hash_algs<>;\n///         sec_oid4                ssp_encr_algs<>;\n///         uint32_t                ssp_window;\n///         uint32_t                ssp_num_gss_handles;\n/// };\n///\n/// enum state_protect_how4 {\n///         SP4_NONE      = 0,\n///         SP4_MACH_CRED = 1,\n///         SP4_SSV       = 2\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union state_protect4_a switch (state_protect_how4 spa_how) {\n///         case SP4_NONE:\n///                 void;\n///         case SP4_MACH_CRED:\n///                 state_protect_ops4      spa_mach_ops;\n///         case SP4_SSV:\n///                 ssv_sp_parms4           spa_ssv_parms;\n/// };\n///\n/// struct EXCHANGE_ID4args {\n///         client_owner4           eia_clientowner;\n///         uint32_t                eia_flags;\n///         state_protect4_a        eia_state_protect;\n///         nfs_impl_id4            eia_client_impl_id<1>;\n/// };\n///\n/// struct ssv_prot_info4 {\n///  state_protect_ops4     spi_ops;\n///  uint32_t               spi_hash_alg;\n///  uint32_t               spi_encr_alg;\n///  uint32_t               spi_ssv_len;\n///  uint32_t               spi_window;\n///  gsshandle4_t           spi_handles<>;\n/// };\n///\n/// union state_protect4_r switch (state_protect_how4 spr_how) {\n///  case SP4_NONE:\n///          void;\n///  case SP4_MACH_CRED:\n///          state_protect_ops4     spr_mach_ops;\n///  case SP4_SSV:\n///          ssv_prot_info4         spr_ssv_info;\n/// };\n///\n/// struct EXCHANGE_ID4resok {\n///  clientid4        eir_clientid;\n///  sequenceid4      eir_sequenceid;\n///  uint32_t         eir_flags;\n///  state_protect4_r eir_state_protect;\n///  server_owner4    eir_server_owner;\n///  opaque           eir_server_scope<NFS4_OPAQUE_LIMIT>;\n///  nfs_impl_id4     eir_server_impl_id<1>;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union EXCHANGE_ID4res switch (nfsstat4 eir_status) {\n///  case NFS4_OK:\n///          EXCHANGE_ID4resok      eir_resok4;\n///\n///  default:\n///          void;\n/// };\n///\n/// struct channel_attrs4 {\n///         count4                  ca_headerpadsize;\n///         count4                  ca_maxrequestsize;\n///         count4                  ca_maxresponsesize;\n///         count4                  ca_maxresponsesize_cached;\n///         count4                  ca_maxoperations;\n///         count4                  ca_maxrequests;\n///         uint32_t                ca_rdma_ird<1>;\n/// };\n///\n/// const CREATE_SESSION4_FLAG_PERSIST              = 0x00000001;\n/// const CREATE_SESSION4_FLAG_CONN_BACK_CHAN       = 0x00000002;\n/// const CREATE_SESSION4_FLAG_CONN_RDMA            = 0x00000004;\n///\n/// struct CREATE_SESSION4args {\n///         clientid4               csa_clientid;\n///         sequenceid4             csa_sequence;\n///\n///         uint32_t                csa_flags;\n///\n///         channel_attrs4          csa_fore_chan_attrs;\n///         channel_attrs4          csa_back_chan_attrs;\n///\n///         uint32_t                csa_cb_program;\n///         callback_sec_parms4     csa_sec_parms<>;\n/// };\n///\n/// struct CREATE_SESSION4resok {\n///         sessionid4              csr_sessionid;\n///         sequenceid4             csr_sequence;\n///\n///         uint32_t                csr_flags;\n///\n///         channel_attrs4          csr_fore_chan_attrs;\n///         channel_attrs4          csr_back_chan_attrs;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union CREATE_SESSION4res switch (nfsstat4 csr_status) {\n///  case NFS4_OK:\n///          CREATE_SESSION4resok   csr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct DESTROY_SESSION4args {\n///         sessionid4      dsa_sessionid;\n/// };\n///\n/// struct DESTROY_SESSION4res {\n///         nfsstat4        dsr_status;\n/// };\n///\n/// struct FREE_STATEID4args {\n///         stateid4        fsa_stateid;\n/// };\n///\n/// struct FREE_STATEID4res {\n///         nfsstat4        fsr_status;\n/// };\n///\n///\n/// typedef nfstime4 attr_notice4;\n///\n/// struct GET_DIR_DELEGATION4args {\n///         /* CURRENT_FH: delegated directory */\n///         bool            gdda_signal_deleg_avail;\n///         bitmap4         gdda_notification_types;\n///         attr_notice4    gdda_child_attr_delay;\n///         attr_notice4    gdda_dir_attr_delay;\n///         bitmap4         gdda_child_attributes;\n///         bitmap4         gdda_dir_attributes;\n/// };\n/// struct GET_DIR_DELEGATION4resok {\n///         verifier4       gddr_cookieverf;\n///         /* Stateid for get_dir_delegation */\n///         stateid4        gddr_stateid;\n///         /* Which notifications can the server support? */\n///         bitmap4         gddr_notification;\n///         bitmap4         gddr_child_attributes;\n///         bitmap4         gddr_dir_attributes;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// enum gddrnf4_status {\n///         GDD4_OK         = 0,\n///         GDD4_UNAVAIL    = 1\n/// };\n///\n/// union GET_DIR_DELEGATION4res_non_fatal\n///  switch (gddrnf4_status gddrnf_status) {\n///          case GDD4_OK:\n///               GET_DIR_DELEGATION4resok      gddrnf_resok4;\n///          case GDD4_UNAVAIL:\n///           bool                gddrnf_will_signal_deleg_avail;\n/// };\n///\n/// union GET_DIR_DELEGATION4res\n///  switch (nfsstat4 gddr_status) {\n///          case NFS4_OK:\n///           GET_DIR_DELEGATION4res_non_fatal   gddr_res_non_fatal4;\n///          default:\n///                  void;\n/// };\n///\n/// struct GETDEVICEINFO4args {\n///         deviceid4       gdia_device_id;\n///         layouttype4     gdia_layout_type;\n///         count4          gdia_maxcount;\n///         bitmap4         gdia_notify_types;\n/// };\n///\n/// struct GETDEVICEINFO4resok {\n///         device_addr4    gdir_device_addr;\n///         bitmap4         gdir_notification;\n/// };\n///\n/// union GETDEVICEINFO4res switch (nfsstat4 gdir_status) {\n///  case NFS4_OK:\n///          GETDEVICEINFO4resok     gdir_resok4;\n///  case NFS4ERR_TOOSMALL:\n///          count4                  gdir_mincount;\n///  default:\n///          void;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct GETDEVICELIST4args {\n///         /* CURRENT_FH: object belonging to the file system */\n///         layouttype4     gdla_layout_type;\n///\n///         /* Number of device IDs to return */\n///         count4          gdla_maxdevices;\n///\n///         nfs_cookie4     gdla_cookie;\n///         verifier4       gdla_cookieverf;\n/// };\n///\n/// struct GETDEVICELIST4resok {\n///         nfs_cookie4             gdlr_cookie;\n///         verifier4               gdlr_cookieverf;\n///         deviceid4               gdlr_deviceid_list<>;\n///         bool                    gdlr_eof;\n/// };\n///\n/// union GETDEVICELIST4res switch (nfsstat4 gdlr_status) {\n///  case NFS4_OK:\n///          GETDEVICELIST4resok     gdlr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// union newtime4 switch (bool nt_timechanged) {\n///  case TRUE:\n///          nfstime4           nt_time;\n///  case FALSE:\n///          void;\n/// };\n///\n/// union newoffset4 switch (bool no_newoffset) {\n///  case TRUE:\n///          offset4           no_offset;\n///  case FALSE:\n///          void;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct LAYOUTCOMMIT4args {\n///         /* CURRENT_FH: file */\n///         offset4                 loca_offset;\n///         length4                 loca_length;\n///         bool                    loca_reclaim;\n///         stateid4                loca_stateid;\n///         newoffset4              loca_last_write_offset;\n///         newtime4                loca_time_modify;\n///         layoutupdate4           loca_layoutupdate;\n/// };\n/// union newsize4 switch (bool ns_sizechanged) {\n///  case TRUE:\n///          length4         ns_size;\n///  case FALSE:\n///          void;\n/// };\n///\n/// struct LAYOUTCOMMIT4resok {\n///         newsize4                locr_newsize;\n/// };\n///\n/// union LAYOUTCOMMIT4res switch (nfsstat4 locr_status) {\n///  case NFS4_OK:\n///          LAYOUTCOMMIT4resok      locr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct LAYOUTGET4args {\n///         /* CURRENT_FH: file */\n///         bool                    loga_signal_layout_avail;\n///         layouttype4             loga_layout_type;\n///         layoutiomode4           loga_iomode;\n///         offset4                 loga_offset;\n///         length4                 loga_length;\n///         length4                 loga_minlength;\n///         stateid4                loga_stateid;\n///         count4                  loga_maxcount;\n/// };\n/// struct LAYOUTGET4resok {\n///         bool               logr_return_on_close;\n///         stateid4           logr_stateid;\n///         layout4            logr_layout<>;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union LAYOUTGET4res switch (nfsstat4 logr_status) {\n///  case NFS4_OK:\n///          LAYOUTGET4resok     logr_resok4;\n///  case NFS4ERR_LAYOUTTRYLATER:\n///          bool                logr_will_signal_layout_avail;\n///  default:\n///          void;\n/// };\n///\n///\n/// struct LAYOUTRETURN4args {\n///         /* CURRENT_FH: file */\n///         bool                    lora_reclaim;\n///         layouttype4             lora_layout_type;\n///         layoutiomode4           lora_iomode;\n///         layoutreturn4           lora_layoutreturn;\n/// };\n///\n///\n/// union layoutreturn_stateid switch (bool lrs_present) {\n///  case TRUE:\n///          stateid4                lrs_stateid;\n///  case FALSE:\n///          void;\n/// };\n///\n/// union LAYOUTRETURN4res switch (nfsstat4 lorr_status) {\n///  case NFS4_OK:\n///          layoutreturn_stateid    lorr_stateid;\n///  default:\n///          void;\n/// };\n///\n/// enum secinfo_style4 {\n///         SECINFO_STYLE4_CURRENT_FH       = 0,\n///         SECINFO_STYLE4_PARENT           = 1\n/// };\n///\n/// /* CURRENT_FH: object or child directory */\n/// typedef secinfo_style4 SECINFO_NO_NAME4args;\n///\n/// /* CURRENTFH: consumed if status is NFS4_OK */\n/// typedef SECINFO4res SECINFO_NO_NAME4res;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct SEQUENCE4args {\n///         sessionid4     sa_sessionid;\n///         sequenceid4    sa_sequenceid;\n///         slotid4        sa_slotid;\n///         slotid4        sa_highest_slotid;\n///         bool           sa_cachethis;\n/// };\n///\n/// const SEQ4_STATUS_CB_PATH_DOWN                  = 0x00000001;\n/// const SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRING      = 0x00000002;\n/// const SEQ4_STATUS_CB_GSS_CONTEXTS_EXPIRED       = 0x00000004;\n/// const SEQ4_STATUS_EXPIRED_ALL_STATE_REVOKED     = 0x00000008;\n/// const SEQ4_STATUS_EXPIRED_SOME_STATE_REVOKED    = 0x00000010;\n/// const SEQ4_STATUS_ADMIN_STATE_REVOKED           = 0x00000020;\n/// const SEQ4_STATUS_RECALLABLE_STATE_REVOKED      = 0x00000040;\n/// const SEQ4_STATUS_LEASE_MOVED                   = 0x00000080;\n/// const SEQ4_STATUS_RESTART_RECLAIM_NEEDED        = 0x00000100;\n/// const SEQ4_STATUS_CB_PATH_DOWN_SESSION          = 0x00000200;\n/// const SEQ4_STATUS_BACKCHANNEL_FAULT             = 0x00000400;\n/// const SEQ4_STATUS_DEVID_CHANGED                 = 0x00000800;\n/// const SEQ4_STATUS_DEVID_DELETED                 = 0x00001000;\n///\n/// struct SEQUENCE4resok {\n///         sessionid4      sr_sessionid;\n///         sequenceid4     sr_sequenceid;\n///         slotid4         sr_slotid;\n///         slotid4         sr_highest_slotid;\n///         slotid4         sr_target_highest_slotid;\n///         uint32_t        sr_status_flags;\n/// };\n///\n/// union SEQUENCE4res switch (nfsstat4 sr_status) {\n///  case NFS4_OK:\n///          SEQUENCE4resok  sr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct ssa_digest_input4 {\n///         SEQUENCE4args sdi_seqargs;\n/// };\n///\n/// struct SET_SSV4args {\n///         opaque          ssa_ssv<>;\n///         opaque          ssa_digest<>;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct ssr_digest_input4 {\n///         SEQUENCE4res sdi_seqres;\n/// };\n///\n/// struct SET_SSV4resok {\n///         opaque          ssr_digest<>;\n/// };\n///\n/// union SET_SSV4res switch (nfsstat4 ssr_status) {\n///  case NFS4_OK:\n///          SET_SSV4resok   ssr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct TEST_STATEID4args {\n///         stateid4        ts_stateids<>;\n/// };\n///\n/// struct TEST_STATEID4resok {\n///         nfsstat4        tsr_status_codes<>;\n/// };\n///\n/// union TEST_STATEID4res switch (nfsstat4 tsr_status) {\n///  case NFS4_OK:\n///          TEST_STATEID4resok tsr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// union deleg_claim4 switch (open_claim_type4 dc_claim) {\n/// /*\n///  * No special rights to object.  Ordinary delegation\n///  * request of the specified object.  Object identified\n///  * by filehandle.\n///  */\n///  case CLAIM_FH: /* New to NFSv4.1 */\n///          /* CURRENT_FH: object being delegated */\n///           void;\n///\n/// /*\n///  * Right to file based on a delegation granted\n///  * to a previous boot instance of the client.\n///  * File is specified by filehandle.\n///  */\n///  case CLAIM_DELEG_PREV_FH: /* New to NFSv4.1 */\n///          /* CURRENT_FH: object being delegated */\n///           void;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///\n/// /*\n///  * Right to the file established by an open previous\n///  * to server reboot.  File identified by filehandle.\n///  * Used during server reclaim grace period.\n///  */\n///  case CLAIM_PREVIOUS:\n///          /* CURRENT_FH: object being reclaimed */\n///           open_delegation_type4   dc_delegate_type;\n/// };\n///\n/// struct WANT_DELEGATION4args {\n///         uint32_t        wda_want;\n///         deleg_claim4    wda_claim;\n/// };\n///\n/// union WANT_DELEGATION4res switch (nfsstat4 wdr_status) {\n///  case NFS4_OK:\n///          open_delegation4 wdr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct DESTROY_CLIENTID4args {\n///         clientid4       dca_clientid;\n/// };\n///\n/// struct DESTROY_CLIENTID4res {\n///         nfsstat4        dcr_status;\n/// };\n///\n/// struct RECLAIM_COMPLETE4args {\n///         /*\n///          * If rca_one_fs TRUE,\n///          *\n///          *    CURRENT_FH: object in\n///          *    file system for which the\n///          *    reclaim is complete.\n///          */\n///         bool            rca_one_fs;\n/// };\n///\n/// struct RECLAIM_COMPLETE4res {\n///         nfsstat4        rcr_status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct COPY4args {\n///         /* SAVED_FH: source file */\n///         /* CURRENT_FH: destination file */\n///         stateid4        ca_src_stateid;\n///         stateid4        ca_dst_stateid;\n///         offset4         ca_src_offset;\n///         offset4         ca_dst_offset;\n///         length4         ca_count;\n///         bool            ca_consecutive;\n///         bool            ca_synchronous;\n///         netloc4         ca_source_server<>;\n/// };\n///\n///\n/// struct copy_requirements4 {\n///         bool            cr_consecutive;\n///         bool            cr_synchronous;\n/// };\n///\n/// struct COPY4resok {\n///         write_response4         cr_response;\n///         copy_requirements4      cr_requirements;\n/// };\n///\n/// union COPY4res switch (nfsstat4 cr_status) {\n///  case NFS4_OK:\n///          COPY4resok              cr_resok4;\n///  case NFS4ERR_OFFLOAD_NO_REQS:\n///          copy_requirements4      cr_requirements;\n///  default:\n///          void;\n/// };\n///\n/// struct COPY_NOTIFY4args {\n///         /* CURRENT_FH: source file */\n///         stateid4        cna_src_stateid;\n///         netloc4         cna_destination_server;\n/// };\n///\n/// struct COPY_NOTIFY4resok {\n///         nfstime4        cnr_lease_time;\n///         stateid4        cnr_stateid;\n///         netloc4         cnr_source_server<>;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union COPY_NOTIFY4res switch (nfsstat4 cnr_status) {\n///  case NFS4_OK:\n///          COPY_NOTIFY4resok       resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct OFFLOAD_CANCEL4args {\n///         /* CURRENT_FH: file to cancel */\n///         stateid4        oca_stateid;\n/// };\n///\n/// struct OFFLOAD_CANCEL4res {\n///         nfsstat4        ocr_status;\n/// };\n///\n///\n/// struct OFFLOAD_STATUS4args {\n///         /* CURRENT_FH: destination file */\n///         stateid4        osa_stateid;\n/// };\n///\n/// struct OFFLOAD_STATUS4resok {\n///         length4         osr_count;\n///         nfsstat4        osr_complete<1>;\n/// };\n///\n/// union OFFLOAD_STATUS4res switch (nfsstat4 osr_status) {\n///  case NFS4_OK:\n///          OFFLOAD_STATUS4resok            osr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct ALLOCATE4args {\n///         /* CURRENT_FH: file */\n///         stateid4        aa_stateid;\n///         offset4         aa_offset;\n///         length4         aa_length;\n/// };\n/// struct ALLOCATE4res {\n///         nfsstat4        ar_status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct DEALLOCATE4args {\n///         /* CURRENT_FH: file */\n///         stateid4        da_stateid;\n///         offset4         da_offset;\n///         length4         da_length;\n/// };\n///\n///\n/// struct DEALLOCATE4res {\n///         nfsstat4        dr_status;\n/// };\n/// enum IO_ADVISE_type4 {\n///         IO_ADVISE4_NORMAL                       = 0,\n///         IO_ADVISE4_SEQUENTIAL                   = 1,\n///         IO_ADVISE4_SEQUENTIAL_BACKWARDS         = 2,\n///         IO_ADVISE4_RANDOM                       = 3,\n///         IO_ADVISE4_WILLNEED                     = 4,\n///         IO_ADVISE4_WILLNEED_OPPORTUNISTIC       = 5,\n///         IO_ADVISE4_DONTNEED                     = 6,\n///         IO_ADVISE4_NOREUSE                      = 7,\n///         IO_ADVISE4_READ                         = 8,\n///         IO_ADVISE4_WRITE                        = 9,\n///         IO_ADVISE4_INIT_PROXIMITY               = 10\n/// };\n///\n/// struct IO_ADVISE4args {\n///         /* CURRENT_FH: file */\n///         stateid4        iaa_stateid;\n///         offset4         iaa_offset;\n///         length4         iaa_count;\n///         bitmap4         iaa_hints;\n/// };\n///\n/// struct IO_ADVISE4resok {\n///         bitmap4 ior_hints;\n/// };\n///\n/// union IO_ADVISE4res switch (nfsstat4 ior_status) {\n///  case NFS4_OK:\n///          IO_ADVISE4resok resok4;\n///  default:\n///          void;\n/// };\n///\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct device_error4 {\n///         deviceid4       de_deviceid;\n///         nfsstat4        de_status;\n///         nfs_opnum4      de_opnum;\n/// };\n///\n///\n/// struct LAYOUTERROR4args {\n///         /* CURRENT_FH: file */\n///         offset4                 lea_offset;\n///         length4                 lea_length;\n///         stateid4                lea_stateid;\n///         device_error4           lea_errors<>;\n/// };\n///\n/// struct LAYOUTERROR4res {\n///         nfsstat4        ler_status;\n/// };\n///\n/// struct io_info4 {\n///         uint64_t        ii_count;\n///         uint64_t        ii_bytes;\n/// };\n///\n/// struct LAYOUTSTATS4args {\n///         /* CURRENT_FH: file */\n///         offset4                 lsa_offset;\n///         length4                 lsa_length;\n///         stateid4                lsa_stateid;\n///         io_info4                lsa_read;\n///         io_info4                lsa_write;\n///         deviceid4               lsa_deviceid;\n///         layoutupdate4           lsa_layoutupdate;\n/// };\n///\n/// struct LAYOUTSTATS4res {\n///         nfsstat4        lsr_status;\n/// };\n///\n/// struct READ_PLUS4args {\n///         /* CURRENT_FH: file */\n///         stateid4        rpa_stateid;\n///         offset4         rpa_offset;\n///         count4          rpa_count;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// union read_plus_content switch (data_content4 rpc_content) {\n///  case NFS4_CONTENT_DATA:\n///          data4           rpc_data;\n///  case NFS4_CONTENT_HOLE:\n///          data_info4      rpc_hole;\n///  default:\n///          void;\n/// };\n///\n/// /*\n///  * Allow a return of an array of contents.\n///  */\n/// struct read_plus_res4 {\n///         bool                    rpr_eof;\n///         read_plus_content       rpr_contents<>;\n/// };\n///\n/// union READ_PLUS4res switch (nfsstat4 rp_status) {\n///  case NFS4_OK:\n///          read_plus_res4  rp_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct SEEK4args {\n///         /* CURRENT_FH: file */\n///         stateid4        sa_stateid;\n///         offset4         sa_offset;\n///         data_content4   sa_what;\n/// };\n/// struct seek_res4 {\n///         bool            sr_eof;\n///         offset4         sr_offset;\n/// };\n/// union SEEK4res switch (nfsstat4 sa_status) {\n///  case NFS4_OK:\n///          seek_res4       resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct WRITE_SAME4args {\n///         /* CURRENT_FH: file */\n///         stateid4        wsa_stateid;\n///         stable_how4     wsa_stable;\n///         app_data_block4 wsa_adb;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///\n/// union WRITE_SAME4res switch (nfsstat4 wsr_status) {\n///  case NFS4_OK:\n///          write_response4         resok4;\n///  default:\n///          void;\n/// };\n///\n///\n/// /*\n///  * Operation arrays (the rest)\n///  */\n///\n/// union nfs_argop4 switch (nfs_opnum4 argop) {\n///  case OP_ACCESS:         ACCESS4args opaccess;\n///  case OP_CLOSE:          CLOSE4args opclose;\n///  case OP_COMMIT:         COMMIT4args opcommit;\n///  case OP_CREATE:         CREATE4args opcreate;\n///  case OP_DELEGPURGE:     DELEGPURGE4args opdelegpurge;\n///  case OP_DELEGRETURN:    DELEGRETURN4args opdelegreturn;\n///  case OP_GETATTR:        GETATTR4args opgetattr;\n///  case OP_GETFH:          void;\n///  case OP_LINK:           LINK4args oplink;\n///  case OP_LOCK:           LOCK4args oplock;\n///  case OP_LOCKT:          LOCKT4args oplockt;\n///  case OP_LOCKU:          LOCKU4args oplocku;\n///  case OP_LOOKUP:         LOOKUP4args oplookup;\n///  case OP_LOOKUPP:        void;\n///  case OP_NVERIFY:        NVERIFY4args opnverify;\n///  case OP_OPEN:           OPEN4args opopen;\n///  case OP_OPENATTR:       OPENATTR4args opopenattr;\n///\n///  /* Not for NFSv4.1 */\n///  case OP_OPEN_CONFIRM:   OPEN_CONFIRM4args opopen_confirm;\n///\n///  case OP_OPEN_DOWNGRADE: OPEN_DOWNGRADE4args opopen_downgrade;\n///\n///  case OP_PUTFH:          PUTFH4args opputfh;\n///  case OP_PUTPUBFH:       void;\n///  case OP_PUTROOTFH:      void;\n///  case OP_READ:           READ4args opread;\n///  case OP_READDIR:        READDIR4args opreaddir;\n///  case OP_READLINK:       void;\n///  case OP_REMOVE:         REMOVE4args opremove;\n///  case OP_RENAME:         RENAME4args oprename;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  /* Not for NFSv4.1 */\n///  case OP_RENEW:          RENEW4args oprenew;\n///\n///  case OP_RESTOREFH:      void;\n///  case OP_SAVEFH:         void;\n///  case OP_SECINFO:        SECINFO4args opsecinfo;\n///  case OP_SETATTR:        SETATTR4args opsetattr;\n///\n///  /* Not for NFSv4.1 */\n///  case OP_SETCLIENTID:    SETCLIENTID4args opsetclientid;\n///\n///  /* Not for NFSv4.1 */\n///  case OP_SETCLIENTID_CONFIRM:\n///                          SETCLIENTID_CONFIRM4args\n///                                  opsetclientid_confirm;\n///\n///  case OP_VERIFY:         VERIFY4args opverify;\n///  case OP_WRITE:          WRITE4args opwrite;\n///\n///  /* Not for NFSv4.1 */\n///  case OP_RELEASE_LOCKOWNER:\n///                          RELEASE_LOCKOWNER4args\n///                                  oprelease_lockowner;\n///\n///  /* Operations new to NFSv4.1 */\n///  case OP_BACKCHANNEL_CTL:\n///                          BACKCHANNEL_CTL4args opbackchannel_ctl;\n///\n///  case OP_BIND_CONN_TO_SESSION:\n///                          BIND_CONN_TO_SESSION4args\n///                                  opbind_conn_to_session;\n///\n///  case OP_EXCHANGE_ID:    EXCHANGE_ID4args opexchange_id;\n///\n///  case OP_CREATE_SESSION: CREATE_SESSION4args opcreate_session;\n///\n///  case OP_DESTROY_SESSION:\n///                          DESTROY_SESSION4args opdestroy_session;\n///\n///  case OP_FREE_STATEID:   FREE_STATEID4args opfree_stateid;\n///\n///  case OP_GET_DIR_DELEGATION:\n///                          GET_DIR_DELEGATION4args\n///                                  opget_dir_delegation;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  case OP_GETDEVICEINFO:  GETDEVICEINFO4args opgetdeviceinfo;\n///  case OP_GETDEVICELIST:  GETDEVICELIST4args opgetdevicelist;\n///  case OP_LAYOUTCOMMIT:   LAYOUTCOMMIT4args oplayoutcommit;\n///  case OP_LAYOUTGET:      LAYOUTGET4args oplayoutget;\n///  case OP_LAYOUTRETURN:   LAYOUTRETURN4args oplayoutreturn;\n///\n///  case OP_SECINFO_NO_NAME:\n///                          SECINFO_NO_NAME4args opsecinfo_no_name;\n///\n///  case OP_SEQUENCE:       SEQUENCE4args opsequence;\n///  case OP_SET_SSV:        SET_SSV4args opset_ssv;\n///  case OP_TEST_STATEID:   TEST_STATEID4args optest_stateid;\n///\n///  case OP_WANT_DELEGATION:\n///                          WANT_DELEGATION4args opwant_delegation;\n///\n///  case OP_DESTROY_CLIENTID:\n///                          DESTROY_CLIENTID4args\n///                                  opdestroy_clientid;\n///\n///  case OP_RECLAIM_COMPLETE:\n///                          RECLAIM_COMPLETE4args\n///                                  opreclaim_complete;\n///\n///  /* Operations new to NFSv4.2 */\n///  case OP_ALLOCATE:       ALLOCATE4args opallocate;\n///  case OP_COPY:           COPY4args opcopy;\n///  case OP_COPY_NOTIFY:    COPY_NOTIFY4args opoffload_notify;\n///  case OP_DEALLOCATE:     DEALLOCATE4args opdeallocate;\n///  case OP_IO_ADVISE:      IO_ADVISE4args opio_advise;\n///  case OP_LAYOUTERROR:    LAYOUTERROR4args oplayouterror;\n///  case OP_LAYOUTSTATS:    LAYOUTSTATS4args oplayoutstats;\n///  case OP_OFFLOAD_CANCEL: OFFLOAD_CANCEL4args opoffload_cancel;\n///  case OP_OFFLOAD_STATUS: OFFLOAD_STATUS4args opoffload_status;\n///  case OP_READ_PLUS:      READ_PLUS4args opread_plus;\n///  case OP_SEEK:           SEEK4args opseek;\n///  case OP_WRITE_SAME:     WRITE_SAME4args opwrite_same;\n///  case OP_CLONE:          CLONE4args opclone;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  /* Operations not new to NFSv4.1 */\n///  case OP_ILLEGAL:        void;\n/// };\n///\n/// union nfs_resop4 switch (nfs_opnum4 resop) {\n///  case OP_ACCESS:         ACCESS4res opaccess;\n///  case OP_CLOSE:          CLOSE4res opclose;\n///  case OP_COMMIT:         COMMIT4res opcommit;\n///  case OP_CREATE:         CREATE4res opcreate;\n///  case OP_DELEGPURGE:     DELEGPURGE4res opdelegpurge;\n///  case OP_DELEGRETURN:    DELEGRETURN4res opdelegreturn;\n///  case OP_GETATTR:        GETATTR4res opgetattr;\n///  case OP_GETFH:          GETFH4res opgetfh;\n///  case OP_LINK:           LINK4res oplink;\n///  case OP_LOCK:           LOCK4res oplock;\n///  case OP_LOCKT:          LOCKT4res oplockt;\n///  case OP_LOCKU:          LOCKU4res oplocku;\n///  case OP_LOOKUP:         LOOKUP4res oplookup;\n///  case OP_LOOKUPP:        LOOKUPP4res oplookupp;\n///  case OP_NVERIFY:        NVERIFY4res opnverify;\n///  case OP_OPEN:           OPEN4res opopen;\n///  case OP_OPENATTR:       OPENATTR4res opopenattr;\n///  /* Not for NFSv4.1 */\n///  case OP_OPEN_CONFIRM:   OPEN_CONFIRM4res opopen_confirm;\n///\n///  case OP_OPEN_DOWNGRADE: OPEN_DOWNGRADE4res opopen_downgrade;\n///\n///  case OP_PUTFH:          PUTFH4res opputfh;\n///  case OP_PUTPUBFH:       PUTPUBFH4res opputpubfh;\n///  case OP_PUTROOTFH:      PUTROOTFH4res opputrootfh;\n///  case OP_READ:           READ4res opread;\n///  case OP_READDIR:        READDIR4res opreaddir;\n///  case OP_READLINK:       READLINK4res opreadlink;\n///  case OP_REMOVE:         REMOVE4res opremove;\n///  case OP_RENAME:         RENAME4res oprename;\n///  /* Not for NFSv4.1 */\n///  case OP_RENEW:          RENEW4res oprenew;\n///  case OP_RESTOREFH:      RESTOREFH4res oprestorefh;\n///  case OP_SAVEFH:         SAVEFH4res opsavefh;\n///  case OP_SECINFO:        SECINFO4res opsecinfo;\n///  case OP_SETATTR:        SETATTR4res opsetattr;\n///  /* Not for NFSv4.1 */\n///  case OP_SETCLIENTID:    SETCLIENTID4res opsetclientid;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  /* Not for NFSv4.1 */\n///  case OP_SETCLIENTID_CONFIRM:\n///                          SETCLIENTID_CONFIRM4res\n///                                  opsetclientid_confirm;\n///  case OP_VERIFY:         VERIFY4res opverify;\n///  case OP_WRITE:          WRITE4res opwrite;\n///\n///  /* Not for NFSv4.1 */\n///  case OP_RELEASE_LOCKOWNER:\n///                          RELEASE_LOCKOWNER4res\n///                                  oprelease_lockowner;\n///\n///  /* Operations new to NFSv4.1 */\n///  case OP_BACKCHANNEL_CTL:\n///                          BACKCHANNEL_CTL4res opbackchannel_ctl;\n///\n///  case OP_BIND_CONN_TO_SESSION:\n///                          BIND_CONN_TO_SESSION4res\n///                                  opbind_conn_to_session;\n///\n///  case OP_EXCHANGE_ID:    EXCHANGE_ID4res opexchange_id;\n///\n///  case OP_CREATE_SESSION: CREATE_SESSION4res opcreate_session;\n///\n///  case OP_DESTROY_SESSION:\n///                          DESTROY_SESSION4res opdestroy_session;\n///\n///  case OP_FREE_STATEID:   FREE_STATEID4res opfree_stateid;\n///\n///  case OP_GET_DIR_DELEGATION:\n///                          GET_DIR_DELEGATION4res\n///                                  opget_dir_delegation;\n///\n///  case OP_GETDEVICEINFO:  GETDEVICEINFO4res opgetdeviceinfo;\n///  case OP_GETDEVICELIST:  GETDEVICELIST4res opgetdevicelist;\n///  case OP_LAYOUTCOMMIT:   LAYOUTCOMMIT4res oplayoutcommit;\n///  case OP_LAYOUTGET:      LAYOUTGET4res oplayoutget;\n///  case OP_LAYOUTRETURN:   LAYOUTRETURN4res oplayoutreturn;\n///\n///  case OP_SECINFO_NO_NAME:\n///                          SECINFO_NO_NAME4res opsecinfo_no_name;\n///\n///  case OP_SEQUENCE:       SEQUENCE4res opsequence;\n///  case OP_SET_SSV:        SET_SSV4res opset_ssv;\n///  case OP_TEST_STATEID:   TEST_STATEID4res optest_stateid;\n///\n///  case OP_WANT_DELEGATION:\n///                          WANT_DELEGATION4res opwant_delegation;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///\n///  case OP_DESTROY_CLIENTID:\n///                          DESTROY_CLIENTID4res\n///                                  opdestroy_clientid;\n///\n///  case OP_RECLAIM_COMPLETE:\n///                          RECLAIM_COMPLETE4res\n///                                  opreclaim_complete;\n///\n///  /* Operations new to NFSv4.2 */\n///  case OP_ALLOCATE:       ALLOCATE4res opallocate;\n///  case OP_COPY:           COPY4res opcopy;\n///  case OP_COPY_NOTIFY:    COPY_NOTIFY4res opcopy_notify;\n///  case OP_DEALLOCATE:     DEALLOCATE4res opdeallocate;\n///  case OP_IO_ADVISE:      IO_ADVISE4res opio_advise;\n///  case OP_LAYOUTERROR:    LAYOUTERROR4res oplayouterror;\n///  case OP_LAYOUTSTATS:    LAYOUTSTATS4res oplayoutstats;\n///  case OP_OFFLOAD_CANCEL: OFFLOAD_CANCEL4res opoffload_cancel;\n///  case OP_OFFLOAD_STATUS: OFFLOAD_STATUS4res opoffload_status;\n///  case OP_READ_PLUS:      READ_PLUS4res opread_plus;\n///  case OP_SEEK:           SEEK4res opseek;\n///  case OP_WRITE_SAME:     WRITE_SAME4res opwrite_same;\n///  case OP_CLONE:          CLONE4res opclone;\n///\n///  /* Operations not new to NFSv4.1 */\n///  case OP_ILLEGAL:        ILLEGAL4res opillegal;\n/// };\n///\n/// struct COMPOUND4args {\n///         utf8str_cs       tag;\n///         uint32_t         minorversion;\n///         nfs_argop4       argarray<>;\n/// };\n///\n/// struct COMPOUND4res {\n///         nfsstat4         status;\n///         utf8str_cs       tag;\n///         nfs_resop4       resarray<>;\n/// };\n///\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Remote file service routines\n///  */\n/// program NFS4_PROGRAM {\n///         version NFS_V4 {\n///                 void\n///                          NFSPROC4_NULL(void) = 0;\n///\n///                 COMPOUND4res\n///                          NFSPROC4_COMPOUND(COMPOUND4args) = 1;\n///\n///         } = 4;\n/// } = 100003;\n///\n/// /*\n///  * NFS4 callback procedure definitions and program\n///  */\n/// struct CB_GETATTR4args {\n///         nfs_fh4 fh;\n///         bitmap4 attr_request;\n/// };\n///\n/// struct CB_GETATTR4resok {\n///         fattr4  obj_attributes;\n/// };\n///\n/// union CB_GETATTR4res switch (nfsstat4 status) {\n///  case NFS4_OK:\n///          CB_GETATTR4resok       resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct CB_RECALL4args {\n///         stateid4        stateid;\n///         bool            truncate;\n///         nfs_fh4         fh;\n/// };\n///\n/// struct CB_RECALL4res {\n///         nfsstat4        status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * CB_ILLEGAL: Response for illegal operation numbers\n///  */\n/// struct CB_ILLEGAL4res {\n///         nfsstat4        status;\n/// };\n///\n/// /*\n///  * NFSv4.1 callback arguments and results\n///  */\n///\n/// enum layoutrecall_type4 {\n///         LAYOUTRECALL4_FILE = LAYOUT4_RET_REC_FILE,\n///         LAYOUTRECALL4_FSID = LAYOUT4_RET_REC_FSID,\n///         LAYOUTRECALL4_ALL  = LAYOUT4_RET_REC_ALL\n/// };\n///\n/// struct layoutrecall_file4 {\n///         nfs_fh4         lor_fh;\n///         offset4         lor_offset;\n///         length4         lor_length;\n///         stateid4        lor_stateid;\n/// };\n///\n/// union layoutrecall4 switch (layoutrecall_type4 lor_recalltype) {\n///  case LAYOUTRECALL4_FILE:\n///          layoutrecall_file4 lor_layout;\n///  case LAYOUTRECALL4_FSID:\n///          fsid4              lor_fsid;\n///  case LAYOUTRECALL4_ALL:\n///          void;\n/// };\n///\n/// struct CB_LAYOUTRECALL4args {\n///         layouttype4             clora_type;\n///         layoutiomode4           clora_iomode;\n///         bool                    clora_changed;\n///         layoutrecall4           clora_recall;\n/// };\n/// struct CB_LAYOUTRECALL4res {\n///         nfsstat4        clorr_status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Directory notification types\n///  */\n/// enum notify_type4 {\n///         NOTIFY4_CHANGE_CHILD_ATTRS     = 0,\n///         NOTIFY4_CHANGE_DIR_ATTRS       = 1,\n///         NOTIFY4_REMOVE_ENTRY           = 2,\n///         NOTIFY4_ADD_ENTRY              = 3,\n///         NOTIFY4_RENAME_ENTRY           = 4,\n///         NOTIFY4_CHANGE_COOKIE_VERIFIER = 5\n/// };\n///\n/// /* Changed entry information */\n/// struct notify_entry4 {\n///         component4      ne_file;\n///         fattr4          ne_attrs;\n/// };\n///\n/// /* Previous entry information */\n/// struct prev_entry4 {\n///         notify_entry4   pe_prev_entry;\n///         /* What READDIR returned for this entry */\n///         nfs_cookie4     pe_prev_entry_cookie;\n/// };\n///\n/// struct notify_remove4 {\n///         notify_entry4   nrm_old_entry;\n///         nfs_cookie4     nrm_old_entry_cookie;\n/// };\n///\n/// struct notify_add4 {\n///         /*\n///          * During a rename, contains\n///          * the object that was deleted.\n///          */\n///         notify_remove4      nad_old_entry<1>;\n///         notify_entry4       nad_new_entry;\n///         /* What READDIR would have returned for this entry */\n///         nfs_cookie4         nad_new_entry_cookie<1>;\n///         prev_entry4         nad_prev_entry<1>;\n///         bool                nad_last_entry;\n/// };\n///\n/// struct notify_attr4 {\n///         notify_entry4   na_changed_entry;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct notify_rename4 {\n///         notify_remove4  nrn_old_entry;\n///         notify_add4     nrn_new_entry;\n/// };\n///\n/// struct notify_verifier4 {\n///         verifier4       nv_old_cookieverf;\n///         verifier4       nv_new_cookieverf;\n/// };\n///\n/// /*\n///  * Objects of type notify_<>4 and\n///  * notify_device_<>4 are encoded in this.\n///  */\n/// typedef opaque notifylist4<>;\n///\n/// struct notify4 {\n///         /* Composed from notify_type4 or notify_deviceid_type4 */\n///         bitmap4         notify_mask;\n///         notifylist4     notify_vals;\n/// };\n///\n/// struct CB_NOTIFY4args {\n///         stateid4    cna_stateid;\n///         nfs_fh4     cna_fh;\n///         notify4     cna_changes<>;\n/// };\n///\n/// struct CB_NOTIFY4res {\n///         nfsstat4    cnr_status;\n/// };\n///\n/// struct CB_PUSH_DELEG4args {\n///         nfs_fh4          cpda_fh;\n///         open_delegation4 cpda_delegation;\n///\n/// };\n///\n/// struct CB_PUSH_DELEG4res {\n///         nfsstat4 cpdr_status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// const RCA4_TYPE_MASK_RDATA_DLG          = 0;\n/// const RCA4_TYPE_MASK_WDATA_DLG          = 1;\n/// const RCA4_TYPE_MASK_DIR_DLG            = 2;\n/// const RCA4_TYPE_MASK_FILE_LAYOUT        = 3;\n/// const RCA4_TYPE_MASK_BLK_LAYOUT         = 4;\n/// const RCA4_TYPE_MASK_OBJ_LAYOUT_MIN     = 8;\n/// const RCA4_TYPE_MASK_OBJ_LAYOUT_MAX     = 9;\n/// const RCA4_TYPE_MASK_OTHER_LAYOUT_MIN   = 12;\n/// const RCA4_TYPE_MASK_OTHER_LAYOUT_MAX   = 15;\n///\n/// struct CB_RECALL_ANY4args      {\n///        uint32_t         craa_objects_to_keep;\n///        bitmap4          craa_type_mask;\n/// };\n///\n/// struct CB_RECALL_ANY4res {\n///         nfsstat4        crar_status;\n/// };\n///\n/// typedef CB_RECALL_ANY4args CB_RECALLABLE_OBJ_AVAIL4args;\n///\n/// struct CB_RECALLABLE_OBJ_AVAIL4res {\n///         nfsstat4        croa_status;\n/// };\n///\n/// struct CB_RECALL_SLOT4args {\n///         slotid4       rsa_target_highest_slotid;\n/// };\n///\n/// struct CB_RECALL_SLOT4res {\n///         nfsstat4   rsr_status;\n/// };\n///\n/// struct referring_call4 {\n///         sequenceid4     rc_sequenceid;\n///         slotid4         rc_slotid;\n/// };\n///\n/// struct referring_call_list4 {\n///         sessionid4      rcl_sessionid;\n///         referring_call4 rcl_referring_calls<>;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// struct CB_SEQUENCE4args {\n///         sessionid4           csa_sessionid;\n///         sequenceid4          csa_sequenceid;\n///         slotid4              csa_slotid;\n///         slotid4              csa_highest_slotid;\n///         bool                 csa_cachethis;\n///         referring_call_list4 csa_referring_call_lists<>;\n/// };\n///\n/// struct CB_SEQUENCE4resok {\n///         sessionid4         csr_sessionid;\n///         sequenceid4        csr_sequenceid;\n///         slotid4            csr_slotid;\n///         slotid4            csr_highest_slotid;\n///         slotid4            csr_target_highest_slotid;\n/// };\n///\n/// union CB_SEQUENCE4res switch (nfsstat4 csr_status) {\n///  case NFS4_OK:\n///          CB_SEQUENCE4resok   csr_resok4;\n///  default:\n///          void;\n/// };\n///\n/// struct CB_WANTS_CANCELLED4args {\n///         bool cwca_contended_wants_cancelled;\n///         bool cwca_resourced_wants_cancelled;\n/// };\n///\n/// struct CB_WANTS_CANCELLED4res {\n///         nfsstat4        cwcr_status;\n/// };\n///\n/// struct CB_NOTIFY_LOCK4args {\n///     nfs_fh4     cnla_fh;\n///     lock_owner4 cnla_lock_owner;\n/// };\n///\n/// struct CB_NOTIFY_LOCK4res {\n///         nfsstat4        cnlr_status;\n/// };\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Device notification types\n///  */\n/// enum notify_deviceid_type4 {\n///         NOTIFY_DEVICEID4_CHANGE = 1,\n///         NOTIFY_DEVICEID4_DELETE = 2\n/// };\n///\n/// /* For NOTIFY4_DEVICEID4_DELETE */\n/// struct notify_deviceid_delete4 {\n///         layouttype4     ndd_layouttype;\n///         deviceid4       ndd_deviceid;\n/// };\n///\n/// /* For NOTIFY4_DEVICEID4_CHANGE */\n/// struct notify_deviceid_change4 {\n///         layouttype4     ndc_layouttype;\n///         deviceid4       ndc_deviceid;\n///         bool            ndc_immediate;\n/// };\n///\n/// struct CB_NOTIFY_DEVICEID4args {\n///         notify4 cnda_changes<>;\n/// };\n///\n/// struct CB_NOTIFY_DEVICEID4res {\n///         nfsstat4        cndr_status;\n/// };\n///\n/// union offload_info4 switch (nfsstat4 coa_status) {\n///  case NFS4_OK:\n///          write_response4 coa_resok4;\n///  default:\n///          length4         coa_bytes_copied;\n/// };\n/// struct CB_OFFLOAD4args {\n///         nfs_fh4         coa_fh;\n///         stateid4        coa_stateid;\n///         offload_info4   coa_offload_info;\n/// };\n/// struct CB_OFFLOAD4res {\n///         nfsstat4        cor_status;\n/// };",
      "raw": true
    },
    {
      "indent": 3,
      "text": "/// /*\n///  * Various definitions for CB_COMPOUND\n///  */\n/// %\n/// enum nfs_cb_opnum4 {\n///         OP_CB_GETATTR                   = 3,\n///         OP_CB_RECALL                    = 4,\n/// %/* Callback operations new to NFSv4.1 */\n///         OP_CB_LAYOUTRECALL              = 5,\n///         OP_CB_NOTIFY                    = 6,\n///         OP_CB_PUSH_DELEG                = 7,\n///         OP_CB_RECALL_ANY                = 8,\n///         OP_CB_RECALLABLE_OBJ_AVAIL      = 9,\n///         OP_CB_RECALL_SLOT               = 10,\n///         OP_CB_SEQUENCE                  = 11,\n///         OP_CB_WANTS_CANCELLED           = 12,\n///         OP_CB_NOTIFY_LOCK               = 13,\n///         OP_CB_NOTIFY_DEVICEID           = 14,\n/// %/* Callback operations new to NFSv4.2 */\n///         OP_CB_OFFLOAD                   = 15,\n///\n///         OP_CB_ILLEGAL                   = 10044\n/// };\n///\n/// union nfs_cb_argop4 switch (nfs_cb_opnum4 argop) {\n///  case OP_CB_GETATTR:\n///       CB_GETATTR4args           opcbgetattr;\n///\n///  /* New NFSv4.1 operations */\n///  case OP_CB_RECALL:\n///       CB_RECALL4args            opcbrecall;\n///  case OP_CB_LAYOUTRECALL:\n///       CB_LAYOUTRECALL4args      opcblayoutrecall;\n///  case OP_CB_NOTIFY:\n///       CB_NOTIFY4args            opcbnotify;\n///  case OP_CB_PUSH_DELEG:\n///       CB_PUSH_DELEG4args        opcbpush_deleg;\n///  case OP_CB_RECALL_ANY:\n///       CB_RECALL_ANY4args        opcbrecall_any;\n///  case OP_CB_RECALLABLE_OBJ_AVAIL:\n///       CB_RECALLABLE_OBJ_AVAIL4args opcbrecallable_obj_avail;\n///  case OP_CB_RECALL_SLOT:\n///       CB_RECALL_SLOT4args       opcbrecall_slot;\n///  case OP_CB_SEQUENCE:\n///       CB_SEQUENCE4args          opcbsequence;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  case OP_CB_WANTS_CANCELLED:\n///       CB_WANTS_CANCELLED4args   opcbwants_cancelled;\n///  case OP_CB_NOTIFY_LOCK:\n///       CB_NOTIFY_LOCK4args       opcbnotify_lock;\n///  case OP_CB_NOTIFY_DEVICEID:\n///       CB_NOTIFY_DEVICEID4args   opcbnotify_deviceid;\n///\n///  /* New NFSv4.2 operations */\n///  case OP_CB_OFFLOAD:\n///       CB_OFFLOAD4args           opcboffload;\n///\n///  case OP_CB_ILLEGAL:            void;\n/// };\n///\n/// union nfs_cb_resop4 switch (nfs_cb_opnum4 resop) {\n///  case OP_CB_GETATTR:    CB_GETATTR4res  opcbgetattr;\n///  case OP_CB_RECALL:     CB_RECALL4res   opcbrecall;\n///\n///  /* New NFSv4.1 operations */\n///  case OP_CB_LAYOUTRECALL:\n///                         CB_LAYOUTRECALL4res\n///                                         opcblayoutrecall;\n///\n///  case OP_CB_NOTIFY:     CB_NOTIFY4res   opcbnotify;\n///\n///  case OP_CB_PUSH_DELEG: CB_PUSH_DELEG4res\n///                                         opcbpush_deleg;\n///\n///  case OP_CB_RECALL_ANY: CB_RECALL_ANY4res\n///                                         opcbrecall_any;\n///\n///  case OP_CB_RECALLABLE_OBJ_AVAIL:\n///                         CB_RECALLABLE_OBJ_AVAIL4res\n///                                 opcbrecallable_obj_avail;\n///\n///  case OP_CB_RECALL_SLOT:\n///                         CB_RECALL_SLOT4res\n///                                         opcbrecall_slot;\n///\n///  case OP_CB_SEQUENCE:   CB_SEQUENCE4res opcbsequence;\n///\n///  case OP_CB_WANTS_CANCELLED:\n///                         CB_WANTS_CANCELLED4res\n///                                 opcbwants_cancelled;\n///",
      "raw": true
    },
    {
      "indent": 3,
      "text": "///  case OP_CB_NOTIFY_LOCK:\n///                         CB_NOTIFY_LOCK4res\n///                                         opcbnotify_lock;\n///\n///  case OP_CB_NOTIFY_DEVICEID:\n///                         CB_NOTIFY_DEVICEID4res\n///                                         opcbnotify_deviceid;\n///\n///  /* New NFSv4.2 operations */\n///  case OP_CB_OFFLOAD:    CB_OFFLOAD4res  opcboffload;\n///\n///  /* Not new operation */\n///  case OP_CB_ILLEGAL:    CB_ILLEGAL4res  opcbillegal;\n/// };\n///\n///\n/// struct CB_COMPOUND4args {\n///         utf8str_cs      tag;\n///         uint32_t        minorversion;\n///         uint32_t        callback_ident;\n///         nfs_cb_argop4   argarray<>;\n/// };\n///\n/// struct CB_COMPOUND4res {\n///         nfsstat4 status;\n///         utf8str_cs      tag;\n///         nfs_cb_resop4   resarray<>;\n/// };\n///\n///\n///\n/// /*\n///  * Program number is in the transient range, since the client\n///  * will assign the exact transient program number and provide\n///  * that to the server via the CREATE_SESSION or\n///  * BACKCHANNEL_CTL operations.\n///  */\n/// program NFS4_CALLBACK {\n///         version NFS_CB {\n///                 void\n///                         CB_NULL(void) = 0;\n///                 CB_COMPOUND4res\n///                         CB_COMPOUND(CB_COMPOUND4args) = 1;\n///         } = 1;\n/// } = 0x40000000;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "ja": "<CODEはENDS>"
    },
    {
      "indent": 0,
      "text": "3. Security Considerations",
      "section_title": true,
      "ja": "3.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "See the Security Considerations section of [RFC7862].",
      "ja": "[RFC7862]のセキュリティの考慮事項のセクションを参照してください。"
    },
    {
      "indent": 0,
      "text": "4. IANA Considerations",
      "section_title": true,
      "ja": "4. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "See the IANA Considerations section of [RFC7862].",
      "ja": "[RFC7862]のIANAの考慮事項のセクションを参照してください。"
    },
    {
      "indent": 0,
      "text": "5. Normative References",
      "section_title": true,
      "ja": "5.引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC4506] Eisler, M., Ed., \"XDR: External Data Representation Standard\", STD 67, RFC 4506, DOI 10.17487/RFC4506, May 2006, <http://www.rfc-editor.org/info/rfc4506>.",
      "ja": "[RFC4506]アイスラー、M.、エド、 \"XDR：外部データ表現標準\"。、STD 67、RFC 4506、DOI 10.17487 / RFC4506、2006年5月、<http://www.rfc-editor.org/info/rfc4506 >。"
    },
    {
      "indent": 3,
      "text": "[RFC5662] Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed., \"Network File System (NFS) Version 4 Minor Version 1 External Data Representation Standard (XDR) Description\", RFC 5662, DOI 10.17487/RFC5662, January 2010, <http://www.rfc-editor.org/info/rfc5662>.",
      "ja": "[RFC5662] Shepler、S.編、アイスラー、M.、編、及びD. Noveck編、 \"ネットワークファイルシステム（NFS）バージョン4マイナーバージョン1外部データ表現標準（XDR）の説明\"、RFC 5662、DOI 10.17487 / RFC5662、2010年1月、<http://www.rfc-editor.org/info/rfc5662>。"
    },
    {
      "indent": 3,
      "text": "[RFC7531] Haynes, T., Ed., and D. Noveck, Ed., \"Network File System (NFS) Version 4 External Data Representation Standard (XDR) Description\", RFC 7531, DOI 10.17487/RFC7531, March 2015, <http://www.rfc-editor.org/info/rfc7531>.",
      "ja": "[RFC7531]ヘインズ、T.、エド。、およびD. Noveck、エド。、 \"ネットワークファイルシステム（NFS）バージョン4外部データ表現標準（XDR）の説明\"、RFC 7531、DOI 10.17487 / RFC7531、2015年3月、< http://www.rfc-editor.org/info/rfc7531>。"
    },
    {
      "indent": 3,
      "text": "[RFC7862] Haynes, T., \"Network File System (NFS) Version 4 Minor Version 2 Protocol\", RFC 7862, DOI 10.17487/RFC7862, November 2016, <http://www.rfc-editor.org/info/rfc7862>.",
      "ja": "[RFC7862]ヘインズ、T.、 \"ネットワークファイルシステム（NFS）バージョン4マイナーバージョン2プロトコル\"、RFC 7862、DOI 10.17487 / RFC7862、2016年11月、<http://www.rfc-editor.org/info/rfc7862 >。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Tom Haynes would like to thank NetApp, Inc. for its funding of his time on this project.",
      "ja": "トム・ヘインズは、このプロジェクトの自分の時間の資金調達のためのNetApp、Inc.に感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Thomas Haynes Primary Data, Inc. 4300 El Camino Real Ste 100 Los Altos, CA 94022 United States of America",
      "ja": "トーマス・ヘインズプライマリ・データ、株式会社アメリカの4300エル・カミノレアルサント100ロスアルトス、CA 94022米国"
    },
    {
      "indent": 3,
      "text": "Phone: +1 408 215 1519 Email: thomas.haynes@primarydata.com",
      "ja": "電話：+1 408 215 1519 Eメール：thomas.haynes@primarydata.com"
    }
  ]
}