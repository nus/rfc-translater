{
  "title": {
    "text": "RFC 7914 - The scrypt Password-Based Key Derivation Function",
    "ja": "RFC 7914 - scryptパスワードベースのキー派生関数"
  },
  "number": 7914,
  "created_at": "2019-11-01 20:37:52.564535+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                       C. Percival\nRequest for Comments: 7914                                       Tarsnap\nCategory: Informational                                     S. Josefsson\nISSN: 2070-1721                                                   SJD AB\n                                                             August 2016",
      "raw": true
    },
    {
      "indent": 11,
      "text": "The scrypt Password-Based Key Derivation Function",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document specifies the password-based key derivation function scrypt. The function derives one or more secret keys from a secret string. It is based on memory-hard functions, which offer added protection against attacks using custom hardware. The document also provides an ASN.1 schema.",
      "ja": "この文書では、パスワードベースのキー派生関数scryptを指定します。関数は、秘密の文字列から1つのまたは複数の秘密鍵を導出します。これは、カスタムハードウェアを使用した攻撃に対する追加の保護を提供するメモリ・ハードの機能に基づいています。文書はまた、ASN.1スキーマを提供します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7914.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7914で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2016 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2016 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2\n2.  scrypt Parameters . . . . . . . . . . . . . . . . . . . . . .   3\n3.  The Salsa20/8 Core Function . . . . . . . . . . . . . . . . .   4\n4.  The scryptBlockMix Algorithm  . . . . . . . . . . . . . . . .   5\n5.  The scryptROMix Algorithm . . . . . . . . . . . . . . . . . .   6\n6.  The scrypt Algorithm  . . . . . . . . . . . . . . . . . . . .   7\n7.  ASN.1 Syntax  . . . . . . . . . . . . . . . . . . . . . . . .   8\n  7.1.  ASN.1 Module  . . . . . . . . . . . . . . . . . . . . . .   9\n8.  Test Vectors for Salsa20/8 Core . . . . . . . . . . . . . . .   9\n9.  Test Vectors for scryptBlockMix . . . . . . . . . . . . . . .  10\n10. Test Vectors for scryptROMix  . . . . . . . . . . . . . . . .  11\n11. Test Vectors for PBKDF2 with HMAC-SHA-256 . . . . . . . . . .  12\n12. Test Vectors for scrypt . . . . . . . . . . . . . . . . . . .  13\n13. Test Vectors for PKCS#8 . . . . . . . . . . . . . . . . . . .  14\n14. Security Considerations . . . . . . . . . . . . . . . . . . .  14\n15. References  . . . . . . . . . . . . . . . . . . . . . . . . .  15\n  15.1.  Normative References . . . . . . . . . . . . . . . . . .  15\n  15.2.  Informative References . . . . . . . . . . . . . . . . .  15\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  16\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  16",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "Password-based key derivation functions are used in cryptography and security protocols for deriving one or more secret keys from a secret value. Over the years, several password-based key derivation functions have been used, including the original DES-based UNIX Crypt-function, FreeBSD MD5 crypt, Public-Key Cryptography Standards#5 (PKCS#5) PBKDF2 [RFC2898] (typically used with SHA-1), GNU SHA-256/512 crypt [SHA2CRYPT], Windows NT LAN Manager (NTLM) [NTLM] hash, and the Blowfish-based bcrypt [BCRYPT]. These algorithms are all based on a cryptographic primitive combined with salting and/or iteration. The iteration count is used to slow down the computation, and the salt is used to make pre-computation costlier.",
      "ja": "パスワードベースのキー派生関数は、秘密の値から1つまたは複数の秘密鍵を導出するための暗号化とセキュリティプロトコルで使用されています。長年の間に、いくつかのパスワードベースのキー派生関数は、元のDESベースのUNIXクリプト機能を含め、使用されている、FreeBSDのMD5の暗号、公開鍵暗号規格＃5（PKCS＃5）PBKDF2 [RFC2898]は（一般的に使用さSHA-1）、GNU SHA-512分の256陰窩[SHA2CRYPT]はWindows NT LANマネージャ（NTLM）[NTLM]ハッシュ、および[bcryptの】bcryptのフグ系。これらのアルゴリズムは、すべての塩析及び/又は反復と組み合わせた暗号プリミティブに基づいています。反復回数は計算を遅くするために使用され、そして塩が事前計算コスト高を作るために使用されます。"
    },
    {
      "indent": 3,
      "text": "All password-based key derivation functions mentioned above share the same weakness against powerful attackers. Provided that the number of iterations used is increased as computer systems get faster, this allows legitimate users to spend a constant amount of time on key derivation without losing ground to attackers' ever-increasing computing power -- as long as attackers are limited to the same software implementations as legitimate users. While parallelized hardware implementations may not change the number of operations performed compared to software implementations, this does not prevent them from dramatically changing the asymptotic cost, since in many contexts -- including the embarrassingly parallel task of performing a brute-force search for a passphrase -- dollar-seconds are the most appropriate units for measuring the cost of a computation. As semiconductor technology develops, circuits do not merely become faster; they also become smaller, allowing for a larger amount of parallelism at the same cost.",
      "ja": "上記のすべてのパスワードベースのキー派生関数は、強力な攻撃者に対して同じ弱点を共有しています。コンピュータシステムはより速く得るとして使用する反復回数が増加し、これは増え続けるコンピューティングパワー正当なユーザーが攻撃者に地面を失うことなく、鍵の導出に時間の一定量を費やすことを可能にすることを提供 - 限り、攻撃者がこれらに限定されているとして、正当なユーザーと同じソフトウェア実装。並列ハードウェア実装、ソフトウェア実装と比較して実行される動作の数を変更しないかもしれないが、これは多くの状況であるため、大幅に漸近的コストを変更するのを妨げない - パスフレーズを力まかせ探索を行うあきれる並列タスクを含みます - ドル秒は、計算のコストを測定するための最も適切な単位です。半導体技術が発展するにつれ、回路が単に速くなりません。彼らはまた、同じコストで並列処理をより多くを可能に、小さくなります。"
    },
    {
      "indent": 3,
      "text": "Consequently, with existing key derivation algorithms, even when the iteration count is increased so that the time taken to verify a password remains constant, the cost of finding a password by using a brute-force attack implemented in hardware drops each year.",
      "ja": "その結果、既存のキー導出アルゴリズムで、パスワードを確認するのに要する時間が一定になるように反復回数が増加しても、ハードウェアに実装ブルートフォース攻撃を使用してパスワードを見つけることのコストは毎年低下します。"
    },
    {
      "indent": 3,
      "text": "The scrypt function aims to reduce the advantage that attackers can gain by using custom-designed parallel circuits for breaking password-based key derivation functions.",
      "ja": "スクリプト機能は、攻撃者がパスワードベースのキー派生機能を破壊するためのカスタム設計の並列回路を使用することによって獲得できるという利点を削減することを目指しています。"
    },
    {
      "indent": 3,
      "text": "This document does not introduce scrypt for the first time. The original scrypt paper [SCRYPT] was published as a peer-reviewed scientific paper and contains further background and discussions.",
      "ja": "この文書は、初めてscryptを導入しません。元scrypt紙[SCRYPT]は査読科学論文として発表され、さらに背景や議論が含まれていました。"
    },
    {
      "indent": 3,
      "text": "The purpose of this document is to serve as a stable reference for documents making use of scrypt. The rest of this document is divided into sections that each describe parameter choices and algorithm steps needed for the final \"scrypt\" algorithm.",
      "ja": "このドキュメントの目的は、scryptを利用して文書のための安定した基準として機能することです。このドキュメントの残りの部分は、各パラメータの選択肢と最後の「scrypt」アルゴリズムのために必要なアルゴリズムステップを記述セクションに分かれています。"
    },
    {
      "indent": 0,
      "text": "2. scrypt Parameters",
      "section_title": true,
      "ja": "2。 Skaripitパラメータ"
    },
    {
      "indent": 3,
      "text": "The scrypt function takes several parameters. The passphrase P is typically a human-chosen password. The salt is normally uniquely and randomly generated [RFC4086]. The parameter r (\"blockSize\") specifies the block size. The CPU/Memory cost parameter N (\"costParameter\") must be larger than 1, a power of 2, and less than 2^(128 * r / 8). The parallelization parameter p (\"parallelizationParameter\") is a positive integer less than or equal to ((2^32-1) * 32) / (128 * r). The intended output length dkLen is the length in octets of the key to be derived (\"keyLength\"); it is a positive integer less than or equal to (2^32 - 1) * 32.",
      "ja": "scrypt機能は、いくつかのパラメータを取ります。パスフレーズPは、典型的には、ヒトが選択したパスワードです。塩は、通常、一意とランダムに生成された[RFC4086]です。パラメータr（「のblockSize」）はブロックサイズを指定します。 CPU /メモリコストパラメータN（ \"costParameter\"）は、2の累乗1よりも大きく、かつ2未満^（128 *のR / 8）しなければなりません。並列化パラメータp（ \"parallelizationParameter\"）は、以下（（2 ^ 32-1）* 32）/（128 *のR）に等しい正の整数です。意図出力長dkLenは（「KEYLENGTH」）を導出する鍵のオクテットの長さです。 * 32  - それは、以下（1 2 ^ 32）に等しい正の整数です。"
    },
    {
      "indent": 3,
      "text": "Users of scrypt can tune the parameters N, r, and p according to the amount of memory and computing power available, the latency-bandwidth product of the memory subsystem, and the amount of parallelism desired. At the current time, r=8 and p=1 appears to yield good results, but as memory latency and CPU parallelism increase, it is likely that the optimum values for both r and p will increase. Note also that since the computations of SMix are independent, a large value of p can be used to increase the computational cost of scrypt without increasing the memory usage; so we can expect scrypt to remain useful even if the growth rates of CPU power and memory capacity diverge.",
      "ja": "scryptのユーザーが調整できパラメータN、R、及びPメモリの量に応じて利用可能な電力、メモリサブシステムのレイテンシ帯域幅積を計算し、そして所望の平行度の量。現時点で、R = 8、P = 1は、良好な結果をもたらすように見えるが、メモリレイテンシとCPU並列処理の増加として、rおよびpの両方のための最適値が増加する可能性があります。 Smixのうちの計算は独立しているので、Pの値が大きい場合は、メモリ使用量を増加させることなくscryptの計算コストを増加させるために使用することができることにも留意されたいです。私たちはscryptはCPUパワーとメモリ容量の成長率が発散しても便利残ることを期待することができます。"
    },
    {
      "indent": 0,
      "text": "3. The Salsa20/8 Core Function",
      "section_title": true,
      "ja": "3. Salsa20 / 8コア機能"
    },
    {
      "indent": 3,
      "text": "Salsa20/8 Core is a round-reduced variant of the Salsa20 Core. It is a hash function from 64-octet strings to 64-octet strings. Note that Salsa20/8 Core is not a cryptographic hash function since it is not collision resistant. See Section 8 of [SALSA20SPEC] for its specification and [SALSA20CORE] for more information. The algorithm description, in C language, is included below as a stable reference, without endianness conversion and alignment.",
      "ja": "Salsa20 / 8コアはSalsa20コアのラウンド減少変種です。これは、64オクテット文字列に64オクテット文字列からハッシュ関数です。それは衝突耐性がないのでSalsa20 / 8コアは暗号ハッシュ関数ではないことに留意されたいです。 【SALSA20SPEC]その仕様および[SALSA20CORE]詳細については、セクション8を参照してください。アルゴリズム記述は、C言語では、エンディアン変換と位置合わせすることなく、安定した基準として以下が含まれます。"
    },
    {
      "indent": 3,
      "text": "#define R(a,b) (((a) << (b)) | ((a) >> (32 - (b))))\nvoid salsa20_word_specification(uint32 out[16],uint32 in[16])\n{\n  int i;\n  uint32 x[16];\n  for (i = 0;i < 16;++i) x[i] = in[i];\n  for (i = 8;i > 0;i -= 2) {\n    x[ 4] ^= R(x[ 0]+x[12], 7);  x[ 8] ^= R(x[ 4]+x[ 0], 9);\n    x[12] ^= R(x[ 8]+x[ 4],13);  x[ 0] ^= R(x[12]+x[ 8],18);\n    x[ 9] ^= R(x[ 5]+x[ 1], 7);  x[13] ^= R(x[ 9]+x[ 5], 9);\n    x[ 1] ^= R(x[13]+x[ 9],13);  x[ 5] ^= R(x[ 1]+x[13],18);\n    x[14] ^= R(x[10]+x[ 6], 7);  x[ 2] ^= R(x[14]+x[10], 9);\n    x[ 6] ^= R(x[ 2]+x[14],13);  x[10] ^= R(x[ 6]+x[ 2],18);\n    x[ 3] ^= R(x[15]+x[11], 7);  x[ 7] ^= R(x[ 3]+x[15], 9);\n    x[11] ^= R(x[ 7]+x[ 3],13);  x[15] ^= R(x[11]+x[ 7],18);\n    x[ 1] ^= R(x[ 0]+x[ 3], 7);  x[ 2] ^= R(x[ 1]+x[ 0], 9);\n    x[ 3] ^= R(x[ 2]+x[ 1],13);  x[ 0] ^= R(x[ 3]+x[ 2],18);\n    x[ 6] ^= R(x[ 5]+x[ 4], 7);  x[ 7] ^= R(x[ 6]+x[ 5], 9);\n    x[ 4] ^= R(x[ 7]+x[ 6],13);  x[ 5] ^= R(x[ 4]+x[ 7],18);\n    x[11] ^= R(x[10]+x[ 9], 7);  x[ 8] ^= R(x[11]+x[10], 9);\n    x[ 9] ^= R(x[ 8]+x[11],13);  x[10] ^= R(x[ 9]+x[ 8],18);\n    x[12] ^= R(x[15]+x[14], 7);  x[13] ^= R(x[12]+x[15], 9);\n    x[14] ^= R(x[13]+x[12],13);  x[15] ^= R(x[14]+x[13],18);\n  }\n  for (i = 0;i < 16;++i) out[i] = x[i] + in[i];\n}",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4. The scryptBlockMix Algorithm",
      "section_title": true,
      "ja": "4. scryptBlockMixアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The scryptBlockMix algorithm is the same as the BlockMix algorithm described in [SCRYPT] but with Salsa20/8 Core used as the hash function H. Below, Salsa(T) corresponds to the Salsa20/8 Core function applied to the octet vector T.",
      "ja": "scryptBlockMixアルゴリズム[SCRYPT]で説明BlockMixアルゴリズムと同じであるが、以下、ハッシュ関数Hとして使用Salsa20 / 8コアと、サルサ（T）はSalsa20 / 8コア機能に対応するオクテットベクトルTに適用"
    },
    {
      "indent": 3,
      "text": "Algorithm scryptBlockMix",
      "ja": "アルゴリズムscryptBlockMix"
    },
    {
      "indent": 3,
      "text": "Parameters: r Block size parameter.",
      "ja": "パラメータ：Rブロックサイズパラメータ。"
    },
    {
      "indent": 3,
      "text": "Input: B[0] || B[1] || ... || B[2 * r - 1] Input octet string (of size 128 * r octets), treated as 2 * r 64-octet blocks, where each element in B is a 64-octet block.",
      "ja": "入力：B [0] || B [1] || ... || B [2 * R  -  1]（サイズ128×rのオクテットの）入力オクテットストリング、Bの各要素は、64オクテットブロックである2 * R 64オクテットのブロックとして扱わ。"
    },
    {
      "indent": 3,
      "text": "Output: B'[0] || B'[1] || ... || B'[2 * r - 1] Output octet string.",
      "ja": "出力：B '[0] || B '[1] || ... || B '[2 * R  -  1]出力オクテットストリング。"
    },
    {
      "indent": 3,
      "text": "Steps:",
      "ja": "ステップ："
    },
    {
      "indent": 5,
      "text": "1. X = B[2 * r - 1]",
      "section_title": true,
      "ja": "1. X = B [2 * R  -  1]"
    },
    {
      "indent": 5,
      "text": "2. for i = 0 to 2 * r - 1 do T = X xor B[i] X = Salsa (T) Y[i] = X end for",
      "ja": "I = 0〜2 * Rの2  -  1は、T = Xの排他的論理和B [i]はX =サルサ（T）Y [I] = X端部のための操作を行います"
    },
    {
      "indent": 5,
      "text": "3. B' = (Y[0], Y[2], ..., Y[2 * r - 2], Y[1], Y[3], ..., Y[2 * r - 1])",
      "ja": "3. B」=（Y [0]、Y [2]、...、Y [2 * R  -  2]、Y [1]、Y [3]、...、Y [2 * R  -  1 ]）"
    },
    {
      "indent": 0,
      "text": "5. The scryptROMix Algorithm",
      "section_title": true,
      "ja": "5. scryptROMixアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The scryptROMix algorithm is the same as the ROMix algorithm described in [SCRYPT] but with scryptBlockMix used as the hash function H and the Integerify function explained inline.",
      "ja": "scryptROMixアルゴリズム[SCRYPT]でなくscryptBlockMixて説明ROMixアルゴリズムと同一であるハッシュ関数HとIntegerify関数がインラインを説明したように使用しました。"
    },
    {
      "indent": 3,
      "text": "Algorithm scryptROMix",
      "ja": "アルゴリズムscryptROMix"
    },
    {
      "indent": 3,
      "text": "Input: r Block size parameter. B Input octet vector of length 128 * r octets. N CPU/Memory cost parameter, must be larger than 1, a power of 2, and less than 2^(128 * r / 8).",
      "ja": "入力：Rブロックサイズパラメータ。長さ128×rのオクテットのB入力オクテットベクター。 N CPU /メモリコストパラメータは、2の累乗1より大きくなければならない、及び2未満^（128 *のR / 8）。"
    },
    {
      "indent": 3,
      "text": "Output: B' Output octet vector of length 128 * r octets.",
      "ja": "出力：長さ128 * rのオクテットのB」出力オクテットベクトル。"
    },
    {
      "indent": 3,
      "text": "Steps:",
      "ja": "ステップ："
    },
    {
      "indent": 5,
      "text": "1. X = B",
      "section_title": true,
      "ja": "1. X = B"
    },
    {
      "indent": 5,
      "text": "2. for i = 0 to N - 1 do V[i] = X X = scryptBlockMix (X) end for",
      "ja": "1 V [I] = X X = scryptBlockMix（X）端を行う -  I = 0 Nには、2."
    },
    {
      "indent": 5,
      "text": "3. for i = 0 to N - 1 do j = Integerify (X) mod N where Integerify (B[0] ... B[2 * r - 1]) is defined as the result of interpreting B[2 * r - 1] as a little-endian integer. T = X xor V[j] X = scryptBlockMix (T) end for",
      "ja": "I = 0 Nのための3  -  1 J = Integerify（X）を行うIntegerify（B [0] ...、B [2 * R  -  1]）MOD N [2 * R Bを解釈した結果として定義されます -  1]リトルエンディアン整数として。用T = X XOR V [J] X = scryptBlockMix（T）端"
    },
    {
      "indent": 5,
      "text": "4. B' = X",
      "section_title": true,
      "ja": "4. B」= X"
    },
    {
      "indent": 0,
      "text": "6. The scrypt Algorithm",
      "section_title": true,
      "ja": "6. scryptアルゴリズム"
    },
    {
      "indent": 3,
      "text": "The PBKDF2-HMAC-SHA-256 function used below denotes the PBKDF2 algorithm [RFC2898] used with HMAC-SHA-256 [RFC6234] as the Pseudorandom Function (PRF). The HMAC-SHA-256 function generates 32-octet outputs.",
      "ja": "以下で使用PBKDF2-HMAC-SHA-256機能は、擬似ランダム関数（PRF）としてHMAC-SHA-256と一緒に使用PBKDF2アルゴリズム[RFC2898]、[RFC6234]です。 HMAC-SHA-256の機能は、32オクテットの出力を生成します。"
    },
    {
      "indent": 3,
      "text": "Algorithm scrypt",
      "ja": "アルゴリズムscrypt"
    },
    {
      "indent": 3,
      "text": "Input: P Passphrase, an octet string. S Salt, an octet string. N CPU/Memory cost parameter, must be larger than 1, a power of 2, and less than 2^(128 * r / 8). r Block size parameter. p Parallelization parameter, a positive integer less than or equal to ((2^32-1) * hLen) / MFLen where hLen is 32 and MFlen is 128 * r. dkLen Intended output length in octets of the derived key; a positive integer less than or equal to (2^32 - 1) * hLen where hLen is 32.",
      "ja": "入力：Pパスフレーズ、オクテット文字列。 S塩、オクテット文字列。 N CPU /メモリコストパラメータは、2の累乗1より大きくなければならない、及び2未満^（128 *のR / 8）。 Rブロックサイズパラメータ。正の整数より小さいかさhLenは32であり、MFLEN 128 *のRである（（2 ^ 32-1）* hlen）フィールド/ MFLENに等しいP並列化パラメータ。派生キーのオクテットでdkLen意図した出力長;以下（2 ^ 32から1）に等しい正の整数*さhLenは32さhLen。"
    },
    {
      "indent": 3,
      "text": "Output: DK Derived key, of length dkLen octets.",
      "ja": "出力：長さdkLenオクテットのDK派生キー、。"
    },
    {
      "indent": 3,
      "text": "Steps:",
      "ja": "ステップ："
    },
    {
      "indent": 4,
      "text": "1. Initialize an array B consisting of p blocks of 128 * r octets each: B[0] || B[1] || ... || B[p - 1] = PBKDF2-HMAC-SHA256 (P, S, 1, p * 128 * r)",
      "ja": "1. 128 * rのオクテットそれぞれのp個のブロックからなるアレイBを初期化：B [0] || B [1] || ... || B [P  -  1] = PBKDF2-HMAC-SHA256（P、S、1、P * 128 * R）"
    },
    {
      "indent": 4,
      "text": "2. for i = 0 to p - 1 do B[i] = scryptROMix (r, B[i], N) end for",
      "ja": "PへのI = 0 2.  -  1のためのB [I] = scryptROMix（R、B [i]は、N）末端を行います"
    },
    {
      "indent": 4,
      "text": "3. DK = PBKDF2-HMAC-SHA256 (P, B[0] || B[1] || ... || B[p - 1], 1, dkLen)",
      "ja": "3. DK = PBKDF2-HMAC-SHA256（P、B [0] || B [1] || ... || B [P  -  1]、1、dkLen）"
    },
    {
      "indent": 0,
      "text": "7. ASN.1 Syntax",
      "section_title": true,
      "ja": "7. ASN.1構文"
    },
    {
      "indent": 3,
      "text": "This section defines ASN.1 syntax for the scrypt key derivation function (KDF). This is intended to operate on the same abstraction level as PKCS#5's PBKDF2. The OID id-scrypt below can be used where id-PBKDF2 is used, with scrypt-params corresponding to PBKDF2-params. The intended application of these definitions includes PKCS #8 and other syntax for key management.",
      "ja": "このセクションでは、scrypt鍵導出関数（KDF）はASN.1構文を定義します。これは、PKCS＃5のPBKDF2と同じ抽象化レベルで動作することを意図しています。 ID-PBKDF2が使用される場合、以下にOID ID-scryptはscrypt-paramsははPBKDF2-paramsはに対応して、使用することができます。これらの定義の意図する用途には、PKCS＃8と鍵管理のための他の構文が含まれています。"
    },
    {
      "indent": 3,
      "text": "The object identifier id-scrypt identifies the scrypt key derivation function.",
      "ja": "オブジェクト識別子ID-scryptはscrypt鍵導出関数を識別する。"
    },
    {
      "indent": 3,
      "text": "id-scrypt OBJECT IDENTIFIER ::= {1 3 6 1 4 1 11591 4 11}",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The parameters field associated with this OID in an AlgorithmIdentifier shall have type scrypt-params:",
      "ja": "AlgorithmIdentifierにこのOIDに関連したパラメータフィールドは型scrypt-のparamsを持っていなければなりません。"
    },
    {
      "indent": 3,
      "text": "scrypt-params ::= SEQUENCE {\n       salt OCTET STRING,\n       costParameter INTEGER (1..MAX),\n       blockSize INTEGER (1..MAX),\n       parallelizationParameter INTEGER (1..MAX),\n       keyLength INTEGER (1..MAX) OPTIONAL }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The fields of type scrypt-params have the following meanings:",
      "ja": "型scrypt-のparamsの分野には、以下の意味を持っています："
    },
    {
      "indent": 3,
      "text": "- salt specifies the salt value. It shall be an octet string.",
      "ja": " - 塩は塩の値を指定します。これは、オクテット文字列でなければなりません。"
    },
    {
      "indent": 3,
      "text": "- costParameter specifies the CPU/Memory cost parameter N.",
      "ja": " -  costParameterは、CPU /メモリのコストパラメータNを指定します"
    },
    {
      "indent": 3,
      "text": "- blockSize specifies the block size parameter r.",
      "ja": " - のblockSizeは、ブロックサイズパラメータrを指定します。"
    },
    {
      "indent": 3,
      "text": "- parallelizationParameter specifies the parallelization parameter.",
      "ja": " -  parallelizationParameterは、並列化パラメータを指定します。"
    },
    {
      "indent": 3,
      "text": "- keyLength, an optional field, is the length in octets of the derived key. The maximum key length allowed depends on the implementation; it is expected that implementation profiles may further constrain the bounds. This field only provides convenience; the key length is not cryptographically protected.",
      "ja": " -  KEYLENGTH、オプションフィールドは、導出鍵のオクテットの長さです。許容される最大キー長は実装に依存します。実装プロファイルは、さらに範囲を制約することが期待されています。このフィールドは利便性を提供します。キーの長さは、暗号で保護されていません。"
    },
    {
      "indent": 3,
      "text": "To be usable in PKCS#8 [RFC5208] and Asymmetric Key Packages [RFC5958], the following extension of the PBES2-KDFs type is needed:",
      "ja": "PKCS＃8 [RFC5208]と非対称鍵パッケージ[RFC5958]で使用するためには、PBES2-KDFsタイプの以下の拡張が必要とされています。"
    },
    {
      "indent": 6,
      "text": "PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n    { {scrypt-params IDENTIFIED BY id-scrypt}, ... }",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7.1. ASN.1 Module",
      "section_title": true,
      "ja": "7.1。 ASN.1モジュール"
    },
    {
      "indent": 3,
      "text": "For reference purposes, the ASN.1 syntax is presented as an ASN.1 module here.",
      "ja": "参考のため、ASN.1構文は、ここでASN.1モジュールとして提供されます。"
    },
    {
      "indent": 3,
      "text": "-- scrypt ASN.1 Module",
      "ja": " -  scrypt ASN.1モジュール"
    },
    {
      "indent": 3,
      "text": "scrypt-0 {1 3 6 1 4 1 11591 4 10}",
      "ja": "scrypt-0 {1 3 6 1 4 1 11591 4 10}"
    },
    {
      "indent": 3,
      "text": "DEFINITIONS ::= BEGIN",
      "raw": true
    },
    {
      "indent": 3,
      "text": "id-scrypt OBJECT IDENTIFIER ::= {1 3 6 1 4 1 11591 4 11}",
      "raw": true
    },
    {
      "indent": 3,
      "text": "scrypt-params ::= SEQUENCE {\n    salt OCTET STRING,\n    costParameter INTEGER (1..MAX),\n    blockSize INTEGER (1..MAX),\n    parallelizationParameter INTEGER (1..MAX),\n    keyLength INTEGER (1..MAX) OPTIONAL\n}",
      "raw": true
    },
    {
      "indent": 3,
      "text": "PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n       { {scrypt-params IDENTIFIED BY id-scrypt}, ... }",
      "raw": true
    },
    {
      "indent": 3,
      "text": "END",
      "ja": "終わり"
    },
    {
      "indent": 0,
      "text": "8. Test Vectors for Salsa20/8 Core",
      "section_title": true,
      "ja": "8.テストベクトルSalsa20 / 8コアの"
    },
    {
      "indent": 3,
      "text": "Below is a sequence of octets that illustrate input and output values for the Salsa20/8 Core. The octets are hex encoded and whitespace is inserted for readability. The value corresponds to the first input and output pair generated by the first scrypt test vector below.",
      "ja": "以下Salsa20 / 8コアの入力値と出力値を示すオクテットのシーケンスです。オクテットは16進符号化され、空白は読みやすくするために挿入されています。値は以下の第scryptテストベクトルによって生成された第1の入力と出力の対に対応します。"
    },
    {
      "indent": 3,
      "text": "INPUT: 7e 87 9a 21 4f 3e c9 86 7c a9 40 e6 41 71 8f 26 ba ee 55 5b 8c 61 c1 b5 0d f8 46 11 6d cd 3b 1d ee 24 f3 19 df 9b 3d 85 14 12 1e 4b 5a c5 aa 32 76 02 1d 29 09 c7 48 29 ed eb c6 8d b8 b8 c2 5e",
      "ja": "INPUT：7E 87 9A 21 4F 3EのC9 86 7C A9 40 E6 41 71 8F 26のBAはEE 55 5B 8C 61のC1 B5 0D F8 46 11 6D CD 3B 1D EE 24 F3 19 DF 9B 3D 85 14 12 1E 4B 5aはC5のAA 32 76 02 1D 29 09 C7 48 29編EB C6の8D B8 B8とC2は5E"
    },
    {
      "indent": 3,
      "text": "OUTPUT: a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05 04 4b 21 81 a2 fd 33 7d fd 7b 1c 63 96 68 2f 29 b4 39 31 68 e3 c9 e6 bc fe 6b c5 b7 a0 6d 96 ba e4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61 8f 81",
      "ja": "OUTPUT：CC 9C 66 08 85 1F 99の3B 81のCA、CB 02 0C EF 05 04 4B 21 81 A2のFD 33 7DのFD 7B 1C 63 96 68 2F 29 B4 39の31 68のE3のC9のFE BC E6 6B C5 B7 A0 6D 96のBA A4 E4 24、CC 10 2C 91 74 5C 24、広告67の3D C7 61 8F 81"
    },
    {
      "indent": 0,
      "text": "9. Test Vectors for scryptBlockMix",
      "section_title": true,
      "ja": "scryptBlockMix 9.テストベクトル"
    },
    {
      "indent": 3,
      "text": "Below is a sequence of octets that illustrate input and output values for scryptBlockMix. The test vector uses an r value of 1. The octets are hex encoded and whitespace is inserted for readability. The value corresponds to the first input and output pair generated by the first scrypt test vector below.",
      "ja": "以下scryptBlockMixの入力値と出力値を示すオクテットのシーケンスです。テストベクトルは、1のr値オクテットはヘクス符号化され、空白は読みやすくするために挿入されて使用されます。値は以下の第scryptテストベクトルによって生成された第1の入力と出力の対に対応します。"
    },
    {
      "indent": 3,
      "text": "INPUT B[0] = f7 ce 0b 65 3d 2d 72 a4 10 8c f5 ab e9 12 ff dd 77 76 16 db bb 27 a7 0e 82 04 f3 ae 2d 0f 6f ad 89 f6 8f 48 11 d1 e8 7b cc 3b d7 40 0a 9f fd 29 09 4f 01 84 63 95 74 f3 9a e5 a1 31 52 17 bc d7",
      "ja": "入力B [0] = F7のCE 0B 65のAB E9 12個のFF 77 76 16 27 A7 0E 82 04 F3 BB DB AE 2D 0F 6F広告89 F6 8F 48 11 D1 E8 7B CC 3B D7 40 ddは3D、2D 72 A4 10 8C F5 BC D7 31 52 17 A1 0A 9F FD 29 09 4F 01 84 63 95 74 F3 9aはE5"
    },
    {
      "indent": 3,
      "text": "B[1] = 89 49 91 44 72 13 bb 22 6c 25 b5 4d a8 63 70 fb cd 98 43 80 37 46 66 bb 8f fc b5 bf 40 c2 54 b0 67 d2 7c 51 ce 4a d5 fe d8 29 c9 0b 50 5a 57 1b 7f 4d 1c ad 6a 52 3c da 77 0e 67 bc ea af 7e 89",
      "ja": "B FEは29 C9 0B 50 D8 [1] = 89 49 91 44 72 13 BB 22 6C 25 B5 4D 63 70 FB CD 98 43 80 37 46 66のBB 8FのFc B5のBF 40 C2 54 B0 67 D2 7C 51 A8 CE 4aはD5図5a 57図1b 7F 4D 1C広告6A 52 3Cダ77 0E 67のBCのEA AF 7E 89"
    },
    {
      "indent": 3,
      "text": "OUTPUT B'[0] = a4 1f 85 9c 66 08 cc 99 3b 81 ca cb 02 0c ef 05 04 4b 21 81 a2 fd 33 7d fd 7b 1c 63 96 68 2f 29 b4 39 31 68 e3 c9 e6 bc fe 6b c5 b7 a0 6d 96 ba e4 24 cc 10 2c 91 74 5c 24 ad 67 3d c7 61 8f 81",
      "ja": "出力B '[0] = A4 1F 85 9C 66 08 CC 99の3B 81のCA、CB 02 0C EF 05 04 4B 21 81 a2はfdが33 7DのFD 7B 1C 63 96 68 2F 29 B4 39 31の68 E3のC9をE6 FE 6bとC5とBC B7 A0 6D 96 BA E4 24、CC 10 2C 91 74 5C 24、広告67の3D C7 61 8F 81"
    },
    {
      "indent": 3,
      "text": "B'[1] = 20 ed c9 75 32 38 81 a8 05 40 f6 4c 16 2d cd 3c 21 07 7c fe 5f 8d 5f e2 b1 a4 16 8f 95 36 78 b7 7d 3b 3d 80 3b 60 e4 ab 92 09 96 e5 9b 4d 53 b6 5d 2a 22 58 77 d5 ed f5 84 2c b9 f1 4e ef e4 25",
      "ja": "B「[1] = 20のED C9 75 32 38 81 A8 05 40 F6 4C 16 2D CD 3C 21 07 7C FE 5F 8D 5F E2 B1 A4 16 8F 95 36 78 B7 7D 3D 80 3B 60 E4 3B AB 92 09 96 E5図9b 4D 53 B6 5D 2A 22 58 77 D5のED 84 F5 2C B9 f1の4EのEFのE4 25"
    },
    {
      "indent": 0,
      "text": "10. Test Vectors for scryptROMix",
      "section_title": true,
      "ja": "scryptROMix 10.テストベクトル"
    },
    {
      "indent": 3,
      "text": "Below is a sequence of octets that illustrate input and output values for scryptROMix. The test vector uses an r value of 1 and an N value of 16. The octets are hex encoded and whitespace is inserted for readability. The value corresponds to the first input and output pair generated by the first scrypt test vector below.",
      "ja": "以下scryptROMixの入力値と出力値を示すオクテットのシーケンスです。テストベクトルは、オクテット進符号化され、空白文字が読みやすくするために挿入された1のr値および16のN値を使用します。値は以下の第scryptテストベクトルによって生成された第1の入力と出力の対に対応します。"
    },
    {
      "indent": 3,
      "text": "INPUT: B = f7 ce 0b 65 3d 2d 72 a4 10 8c f5 ab e9 12 ff dd 77 76 16 db bb 27 a7 0e 82 04 f3 ae 2d 0f 6f ad 89 f6 8f 48 11 d1 e8 7b cc 3b d7 40 0a 9f fd 29 09 4f 01 84 63 95 74 f3 9a e5 a1 31 52 17 bc d7 89 49 91 44 72 13 bb 22 6c 25 b5 4d a8 63 70 fb cd 98 43 80 37 46 66 bb 8f fc b5 bf 40 c2 54 b0 67 d2 7c 51 ce 4a d5 fe d8 29 c9 0b 50 5a 57 1b 7f 4d 1c ad 6a 52 3c da 77 0e 67 bc ea af 7e 89",
      "ja": "INPUT：B = F7 CE 0B 65のAB E9 12個のFF 77 76 16 2D 27 A7 0E 82 04 F3 BB DB AE 0F 6F広告89 F6 8F 48 11 D1 E8 7B CC 3B D7 40 0A 9Fをddは3D、2D 72 A4 10 8C F5 FD 29 09 4F 01 84 63 95 74 F3 9aはE5のA1 31 52 17のBC D7 63 70 FB CD 98 43 80 37 46 66のBB 8FのFc B5のBF 40 C2 54 B0 A8 89 49 91 44 72 13 BB 22 6C 25 B5 4D 67 D2 7C 51 CE 4A D5 FE D8 29 C9 0B 50 5A 57 1B 7F 4D 1C広告6A 52 3Cダ77 0E 67のBCのEA AF 7E 89"
    },
    {
      "indent": 3,
      "text": "OUTPUT: B = 79 cc c1 93 62 9d eb ca 04 7f 0b 70 60 4b f6 b6 2c e3 dd 4a 96 26 e3 55 fa fc 61 98 e6 ea 2b 46 d5 84 13 67 3b 99 b0 29 d6 65 c3 57 60 1f b4 26 a0 b2 f4 bb a2 00 ee 9f 0a 43 d1 9b 57 1a 9c 71 ef 11 42 e6 5d 5a 26 6f dd ca 83 2c e5 9f aa 7c ac 0b 9c f1 be 2b ff ca 30 0d 01 ee 38 76 19 c4 ae 12 fd 44 38 f2 03 a0 e4 e1 c4 7e c3 14 86 1f 4e 90 87 cb 33 39 6a 68 73 e8 f9 d2 53 9a 4b 8e",
      "ja": "OUTPUT：B = 79 CC C1 93 62 9D EB CA 04 7F 0B 70 60 4B F6 B6 2C E3 DD 4A 96 26 E3 55 FA FC 61 98 E6のEA 2B 46 D5 84 13 67 3B 99 B0 29 D6 65 C3 57 60 1F B4 26個のA0 B2 F4 BB A2 00 EE 9Fの0A 43 D1 9B 57 1A 9C 71 EF 11個の42 E6 5D部5a 26 6F DD CA 83 2C E5 9FのAA 7cと交流0B 9C F1こと2B FF 30 0D 01 EE 38 76 19 C4 CA AE 12 FD 44 38 F2 03 A0 E4 E1 C4 7E C3 14 86 1F 4E 90 87、CB 33 39 6A 68 73 E8 F9 D2 53 9A 4bは8E"
    },
    {
      "indent": 0,
      "text": "11. Test Vectors for PBKDF2 with HMAC-SHA-256",
      "section_title": true,
      "ja": "HMAC-SHA-256とPBKDF2 11.テストベクトル"
    },
    {
      "indent": 3,
      "text": "Below is a sequence of octets that illustrate input and output values for PBKDF2-HMAC-SHA-256. The octets are hex encoded and whitespace is inserted for readability. The test vectors below can be used to verify the PBKDF2-HMAC-SHA-256 [RFC2898] function. The password and salt strings are passed as sequences of ASCII [RFC20] octets.",
      "ja": "以下PBKDF2-HMAC-SHA-256のための入力値と出力値を示すオクテットのシーケンスです。オクテットは16進符号化され、空白は読みやすくするために挿入されています。以下テストベクトルはPBKDF2-HMAC-SHA-256 [RFC2898]の機能を検証するために使用することができます。パスワードとソルト文字列はASCII [RFC20]オクテットのシーケンスとして渡されます。"
    },
    {
      "indent": 3,
      "text": "PBKDF2-HMAC-SHA-256 (P=\"passwd\", S=\"salt\", c=1, dkLen=64) = 55 ac 04 6e 56 e3 08 9f ec 16 91 c2 25 44 b6 05 f9 41 85 21 6d de 04 65 e6 8b 9d 57 c2 0d ac bc 49 ca 9c cc f1 79 b6 45 99 16 64 b3 9d 77 ef 31 7c 71 b8 45 b1 e3 0b d5 09 11 20 41 d3 a1 97 83",
      "ja": "PBKDF2-HMAC-SHA-256（P = \"passwdの\"、Sは= \"塩\"、C = 1、dkLen = 64）= 55、AC 04 6E 56 E3 08 9F EC 16 91 C2 25 44 B6 05 F9 41 85 21 6D C2 04 65 E6 8B 9D 57ド97 83 49 A1のCA 9C CCはF1 BC 0D交流79 B6 45 99 16 64 B3 9D 77 EF 31 7C 71 B8 45 B1のE3 0B D5を09 11 20 41 D3"
    },
    {
      "indent": 3,
      "text": "PBKDF2-HMAC-SHA-256 (P=\"Password\", S=\"NaCl\", c=80000, dkLen=64) = 4d dc d8 f6 0b 98 be 21 83 0c ee 5e f2 27 01 f9 64 1a 44 18 d0 4c 04 14 ae ff 08 87 6b 34 ab 56 a1 d4 25 a1 22 58 33 54 9a db 84 1b 51 c9 b3 17 6a 27 2b de bb a1 d0 78 47 8f 62 b3 97 f3 3c 8d",
      "ja": "PBKDF2-HMAC-SHA-256（P = \"パスワード\"、S = \"塩化ナトリウム\"、C = 80000、dkLen = 64）は、4D直流D8のF6 0B 98 21 83 0C EE 5E F2 27 01 F9 64 1A 44 18 D0であります= FF 08 87 6B 34 AB 56 A1 D4 25 A1 22 58 33 54 9（a）のDB 84 1B 51 C9 B3 17 6A 27 2BデBB A1 D0 78 47 8F 62 B3 97 F3 3cと8dとAE 4C 04 14"
    },
    {
      "indent": 0,
      "text": "12. Test Vectors for scrypt",
      "section_title": true,
      "ja": "scrypt 12.テストベクトル"
    },
    {
      "indent": 3,
      "text": "For reference purposes, we provide the following test vectors for scrypt, where the password and salt strings are passed as sequences of ASCII [RFC20] octets.",
      "ja": "参考のため、我々は、パスワードとソルト文字列はASCII [RFC20]オクテットのシーケンスとして渡されscrypt、に対して次のテストベクトルを提供しています。"
    },
    {
      "indent": 3,
      "text": "The parameters to the scrypt function below are, in order, the password P (octet string), the salt S (octet string), the CPU/Memory cost parameter N, the block size parameter r, the parallelization parameter p, and the output size dkLen. The output is hex encoded and whitespace is inserted for readability.",
      "ja": "以下scrypt関数のパラメータは、順番に、パスワードP（オクテットストリング）、塩S（オクテットストリング）、CPU /メモリコストパラメータN、ブロックサイズパラメータr、並列化パラメータp、及び出力されますサイズdkLen。出力はヘクス符号化され、空白文字が読みやすくするために挿入されています。"
    },
    {
      "indent": 3,
      "text": "scrypt (P=\"\", S=\"\", N=16, r=1, p=1, dklen=64) = 77 d6 57 62 38 65 7b 20 3b 19 ca 42 c1 8a 04 97 f1 6b 48 44 e3 07 4a e8 df df fa 3f ed e2 14 42 fc d0 06 9d ed 09 48 f8 32 6a 75 3a 0f c8 1f 17 e8 d3 e0 fb 2e 0d 36 28 cf 35 e2 0c 38 d1 89 06",
      "ja": "scrypt（P = \"\"、S = \"\"、N = 16、R = 1、P = 1、dklen = 64）= 77 D6 57 62 38 65 7B 20 3B 19、CA 42 C1 8A 04 97 F1 6B 48 44 E3 14の42 fcが06 9Dは09 48 F8 32 6A 75 3A 0F C8 1F 17 E8 D3 E0 FB 2E 0D 36 28 CF 35 E2 0C 38 D1 89 06編D0 07 4A E8 DF DF FA 3FのED E2"
    },
    {
      "indent": 3,
      "text": "scrypt (P=\"password\", S=\"NaCl\", N=1024, r=8, p=16, dkLen=64) = fd ba be 1c 9d 34 72 00 78 56 e7 19 0d 01 e9 fe 7c 6a d7 cb c8 23 78 30 e7 73 76 63 4b 37 31 62 2e af 30 d9 2e 22 a3 88 6f f1 09 27 9d 98 30 da c7 27 af b9 4a 83 ee 6d 83 60 cb df a2 cc 06 40",
      "ja": "scrypt（P = \"パスワード\"、S = \"塩化ナトリウム\"、N = 1024、R = 8、P = 16、dkLen = 64）= FD BAは1C 9D 34 72 00 78 56 E7 19 0D 01 E9 FE 7C 6aはD7であります06 40 A2 CC DF CB C8 23 78 30 E7 73 76 63 4B 37 31 62 2E AF 30 D9 2E 22 A3 88 6F F1 09 27 9D 98 30 DA C7 27 AF B9 4A 83 EE 6D 83 60 CB"
    },
    {
      "indent": 3,
      "text": "scrypt (P=\"pleaseletmein\", S=\"SodiumChloride\", N=16384, r=8, p=1, dkLen=64) = 70 23 bd cb 3a fd 73 48 46 1c 06 cd 81 fd 38 eb fd a8 fb ba 90 4f 8e 3e a9 b5 43 f6 54 5d a1 f2 d5 43 29 55 61 3f 0f cf 62 d4 97 05 24 2a 9a f9 e6 1e 85 dc 0d 65 1e 40 df cf 01 7b 45 57 58 87",
      "ja": "scrypt（P = \"pleaseletmein\"、S = \"塩化ナトリウム\"、N = 16384、R = 8、P = 1、dkLen = 64）= 70 23のBD CB 3aとFD 73 48 46 1C 06 CD 81 FD 38 EB FDのA8のFB BA 90 4F 8E 3E A9、B5 43 F6 54 5D A1 F2 D5を43 29 55 61 3F 0F CF 62 D4 97 05 24 2A 9aはF9のE6 1E 85 DC 65 1E 40 0DのDF CF 01 7B 45 57 58 87"
    },
    {
      "indent": 3,
      "text": "scrypt (P=\"pleaseletmein\", S=\"SodiumChloride\", N=1048576, r=8, p=1, dkLen=64) = 21 01 cb 9b 6a 51 1a ae ad db be 09 cf 70 f8 81 ec 56 8d 57 4a 2f fd 4d ab e5 ee 98 20 ad aa 47 8e 56 fd 8f 4b a5 d0 9f fa 1c 6d 92 7c 40 f4 c3 37 30 40 49 e8 a9 52 fb cb f4 5c 6f a7 7a 41 a4",
      "ja": "scrypt（P = \"pleaseletmein\"、S = \"塩化ナトリウム\"、N = 1048576、R = 8、P = 1、dkLen = 64）= 21 01のCB 9B部6a 51 1A AE広告DBが09 CF 70 F8 81 EC 56 8DことFD 4D AB E5 EE 98 20広告AA 47 8E 56 2F 57 4A FD 8F 4B A5 D0 9F FA 1C 6D 92 7C 40 F4 C3を37 30 40 49 E8、A9 52 FB CB F4 5C 6F A7 7A 41 A4"
    },
    {
      "indent": 0,
      "text": "13. Test Vectors for PKCS#8",
      "section_title": true,
      "ja": "PKCS＃8 13.テストベクトル"
    },
    {
      "indent": 3,
      "text": "PKCS#8 [RFC5208] and Asymmetric Key Packages [RFC5958] encode encrypted private-keys. Using PBES2 with scrypt as the KDF, the following illustrates an example of a PKCS#8-encoded private-key. The password is \"Rabbit\" (without the quotes) with N=1048576, r=8, and p=1. The salt is \"Mouse\" and the encryption algorithm used is aes256-CBC. The derived key is: E2 77 EA 2C AC B2 3E DA-FC 03 9D 22 9B 79 DC 13 EC ED B6 01 D9 9B 18 2A-9F ED BA 1E 2B FB 4F 58.",
      "ja": "PKCS＃8 [RFC5208]と非対称鍵パッケージ[RFC5958]は暗号化されたプライベート・キーをエンコードします。 KDFとしてscryptとPBES2を使用して、以下に、PKCS＃8でエンコードされた秘密鍵の一例を示す図です。パスワードは、N = 1048576、R = 8、およびP = 1（引用符なし） \"うさぎ\" です。塩は、「マウス」であり、使用する暗号化アルゴリズムはAES256-CBCです。導出鍵は：EA 2C AC B2 3E DA-FC 03 9D 22（B）79 DC 13 EC ED B6 01 D9 9B 18 2A-9F ED BA 1E 2B FB 4F 58 E2 77。"
    },
    {
      "indent": 3,
      "text": "-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIHiME0GCSqGSIb3DQEFDTBAMB8GCSsGAQQB2kcECzASBAVNb3VzZQIDEAAAAgEI\nAgEBMB0GCWCGSAFlAwQBKgQQyYmguHMsOwzGMPoyObk/JgSBkJb47EWd5iAqJlyy\n+ni5ftd6gZgOPaLQClL7mEZc2KQay0VhjZm/7MbBUNbqOAXNM6OGebXxVp6sHUAL\niBGY/Dls7B1TsWeGObE0sS1MXEpuREuloZjcsNVcNXWPlLdZtkSH6uwWzR0PyG/Z\n+ZXfNodZtd/voKlvLOw5B3opGIFaLkbtLZQwMiGtl42AS89lZg==\n-----END ENCRYPTED PRIVATE KEY-----",
      "raw": true
    },
    {
      "indent": 0,
      "text": "14. Security Considerations",
      "section_title": true,
      "ja": "14.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document specifies a cryptographic algorithm, and there is always a risk that someone will find a weakness in it. By following the cryptographic research area, you may learn of publications relevant to scrypt.",
      "ja": "この文書では、暗号化アルゴリズムを指定し、誰かがそれの弱点を見つけるというリスクが常にあります。暗号研究領域に従うことで、あなたはscryptに関連する出版物を知ることがあります。"
    },
    {
      "indent": 3,
      "text": "ROMix has been proven sequential memory-hard under the random oracle model for the hash function. The security of scrypt relies on the assumption that BlockMix with Salsa20/8 Core does not exhibit any \"shortcuts\" that would allow it to be iterated more easily than a random oracle. For other claims about the security properties, see [SCRYPT].",
      "ja": "ROMixは、ハッシュ関数のランダムオラクルモデルの下で、シーケンシャルメモリ-ハード証明されています。 scryptのセキュリティはBlockMixがSalsa20 / 8コアは、それがランダムオラクルよりも簡単に繰り返すことができるようになる任意の「ショートカット」を示さないとの仮定に依存しています。セキュリティの特性に関する他の主張については、[SCRYPT]を参照してください。"
    },
    {
      "indent": 3,
      "text": "Passwords and other sensitive data, such as intermediate values, may continue to be stored in memory, core dumps, swap areas, etc., for a long time after the implementation has processed them. This makes attacks on the implementation easier. Thus, implementation should consider storing sensitive data in protected memory areas. How to achieve this is system dependent.",
      "ja": "このような中間値としてパスワードやその他の機密データは、実装がそれらを処理した後に長時間、など、メモリに格納され続け、コアダンプ、スワップ領域もよいです。これは、実装上の攻撃が容易になります。したがって、実装は保護されたメモリ領域内の機密データを格納する検討すべきです。これを達成するためにどのようにシステムに依存します。"
    },
    {
      "indent": 3,
      "text": "By nature and depending on parameters, running the scrypt algorithm may require large amounts of memory. Systems should protect against a denial-of-service attack resulting from attackers presenting unreasonably large parameters.",
      "ja": "自然によると、パラメータに依存し、scryptアルゴリズムを実行すると、大量のメモリを必要とするかもしれません。システムが不当に大きなパラメータを提示する攻撃者から生じたサービス拒否攻撃から保護する必要があります。"
    },
    {
      "indent": 3,
      "text": "Poor parameter choices can be harmful for security; for example, if you tune the parameters so that memory use is reduced to small amounts that will affect the properties of the algorithm.",
      "ja": "貧しいパラメータの選択肢は、セキュリティのために有害であり得ます。たとえば、あなたがチューニングパラメータの場合は、メモリ使用は、アルゴリズムの特性に影響を与えるだろう少量に低減されるように。"
    },
    {
      "indent": 0,
      "text": "15. References",
      "section_title": true,
      "ja": "15.参考文献"
    },
    {
      "indent": 0,
      "text": "15.1. Normative References",
      "section_title": true,
      "ja": "15.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2898] Kaliski, B., \"PKCS #5: Password-Based Cryptography Specification Version 2.0\", RFC 2898, DOI 10.17487/RFC2898, September 2000, <http://www.rfc-editor.org/info/rfc2898>.",
      "ja": "[RFC2898] Kaliski、B.、 \"PKCS＃5：パスワードベースの暗号化仕様バージョン2.0\"、RFC 2898、DOI 10.17487 / RFC2898、2000年9月、<http://www.rfc-editor.org/info/rfc2898> 。"
    },
    {
      "indent": 3,
      "text": "[RFC6234] Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)\", RFC 6234, DOI 10.17487/RFC6234, May 2011, <http://www.rfc-editor.org/info/rfc6234>.",
      "ja": "[RFC6234]イーストレイク3日、D.とT.ハンセン、 \"米国のセキュアハッシュアルゴリズム（SHAとHMACとHKDF SHAベース）\"、RFC 6234、DOI 10.17487 / RFC6234、2011年5月、<のhttp：//www.rfc- editor.org/info/rfc6234>。"
    },
    {
      "indent": 0,
      "text": "15.2. Informative References",
      "section_title": true,
      "ja": "15.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[BCRYPT] Provos, N. and D. Mazieres, \"A Future-Adaptable Password Scheme\", USENIX 1999, June 1999, <https://www.usenix.org/legacy/event/usenix99/provos/ provos.pdf>.",
      "ja": "[bcryptの]プロボス氏、N.およびD. Mazieres、 \"未来適応パスワードスキーム\"、USENIX 1999、1999年6月、<https://www.usenix.org/legacy/event/usenix99/provos/ provos.pdf> 。"
    },
    {
      "indent": 3,
      "text": "[NTLM] Microsoft, \"[MS-NLMP]: NT LAN Manager (NTLM) Authentication Protocol\", 2015, <https://msdn.microsoft.com/en-us/library/cc236621.aspx>.",
      "ja": "[NTLM]マイクロソフト、 \"[MS-NLMP]：NT LANマネージャー（NTLM）認証プロトコル\"、2015年、<https://msdn.microsoft.com/en-us/library/cc236621.aspx>。"
    },
    {
      "indent": 3,
      "text": "[RFC20] Cerf, V., \"ASCII format for network interchange\", STD 80, RFC 20, DOI 10.17487/RFC0020, October 1969, <http://www.rfc-editor.org/info/rfc20>.",
      "ja": "[RFC20]サーフ、V.、 \"ネットワークの交換のためのASCIIフォーマット\"、STD 80、RFC 20、DOI 10.17487 / RFC0020、1969年10月、<http://www.rfc-editor.org/info/rfc20>。"
    },
    {
      "indent": 3,
      "text": "[RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <http://www.rfc-editor.org/info/rfc4086>.",
      "ja": "[RFC4086]イーストレーク3日、D.、シラー、J.、およびS.クロッカー、 \"セキュリティのためにランダム要件\"、BCP 106、RFC 4086、DOI 10.17487 / RFC4086、2005年6月、<HTTP：//www.rfc-editor .ORG /情報/ RFC4086>。"
    },
    {
      "indent": 3,
      "text": "[RFC5208] Kaliski, B., \"Public-Key Cryptography Standards (PKCS) #8: Private-Key Information Syntax Specification Version 1.2\", RFC 5208, DOI 10.17487/RFC5208, May 2008, <http://www.rfc-editor.org/info/rfc5208>.",
      "ja": "[RFC5208] Kaliski、B.、 \"公開鍵暗号規格（PKCS）＃8：プライベート・キー情報構文仕様バージョン1.2\"、RFC 5208、DOI 10.17487 / RFC5208、2008年5月、<のhttp：//www.rfc- editor.org/info/rfc5208>。"
    },
    {
      "indent": 3,
      "text": "[RFC5958] Turner, S., \"Asymmetric Key Packages\", RFC 5958, DOI 10.17487/RFC5958, August 2010, <http://www.rfc-editor.org/info/rfc5958>.",
      "ja": "[RFC5958]ターナー、S.、 \"非対称鍵パッケージ\"、RFC 5958、DOI 10.17487 / RFC5958、2010年8月、<http://www.rfc-editor.org/info/rfc5958>。"
    },
    {
      "indent": 3,
      "text": "[SALSA20CORE] Bernstein, D., \"The Salsa20 Core\", March 2005, <http://cr.yp.to/salsa20.html>.",
      "ja": "[SALSA20CORE]バーンスタイン、D.、 \"Salsa20コア\"、2005年3月、<http://cr.yp.to/salsa20.html>。"
    },
    {
      "indent": 3,
      "text": "[SALSA20SPEC] Bernstein, D., \"Salsa20 specification\", April 2005, <http://cr.yp.to/snuffle/spec.pdf>.",
      "ja": "[SALSA20SPEC]バーンスタイン、D.、 \"Salsa20仕様\"、2005年4月、<http://cr.yp.to/snuffle/spec.pdf>。"
    },
    {
      "indent": 3,
      "text": "[SCRYPT] Percival, C., \"STRONGER KEY DERIVATION VIA SEQUENTIAL MEMORY-HARD FUNCTIONS\", BSDCan'09, May 2009, <http://www.tarsnap.com/scrypt/scrypt.pdf>.",
      "ja": "[SCRYPT]パーシバル、C.、 \"SEQUENTIAL MEMORY-HARD機能VIA STRONGER鍵導出\"、BSDCan'09、2009年5月、<http://www.tarsnap.com/scrypt/scrypt.pdf>。"
    },
    {
      "indent": 3,
      "text": "[SHA2CRYPT] Drepper, U., \"Unix crypt using SHA-256 and SHA-512\", April 2008, <http://www.akkadia.org/drepper/SHA-crypt.txt>.",
      "ja": "[SHA2CRYPT] Drepper、U.、 \"SHA-256とSHA-512を使用してUnixの暗号\"、2008年4月、<http://www.akkadia.org/drepper/SHA-crypt.txt>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Text in this document was borrowed from [SCRYPT] and [RFC2898]. The PKCS#8 test vector was provided by Stephen N. Henson.",
      "ja": "この文書内のテキストは、[SCRYPT]と[RFC2898]から借りました。 PKCS＃8のテストベクトルは、スティーブンN.ヘンソンによって提供されました。"
    },
    {
      "indent": 3,
      "text": "Feedback on this document was received from Dmitry Chestnykh, Alexander Klink, Rob Kendrick, Royce Williams, Ted Rolle, Jr., Eitan Adler, Stephen Farrel, Nikos Mavrogiannopoulos, and Paul Kyzivat.",
      "ja": "このドキュメントに関するフィードバックはドミトリーChestnykh、アレクサンダー・クリンク、ロブ・ケンドリック、ロイス・ウィリアムズ、テッド・ロル・ジュニア、エイタン・アドラー、スティーブン・ファレル、ニコスMavrogiannopoulos、そしてポール・Kyzivatから受信しました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Colin Percival Tarsnap",
      "ja": "コリン・パーシバルTrsnp"
    },
    {
      "indent": 3,
      "text": "Email: cperciva@tarsnap.com",
      "ja": "メール：cperciva@tarsnap.com"
    },
    {
      "indent": 3,
      "text": "Simon Josefsson SJD AB",
      "ja": "サイモンJosefsson氏SJD AB"
    },
    {
      "indent": 3,
      "text": "Email: simon@josefsson.org URI: http://josefsson.org/",
      "ja": "メール：simon@josefsson.org URI：http://josefsson.org/"
    }
  ]
}