{
  "title": {
    "text": "RFC 7661 - Updating TCP to Support Rate-Limited Traffic",
    "ja": "RFC 7661 - レート制限トラフィックをサポートするためにTCPを更新"
  },
  "number": 7661,
  "created_at": "2019-10-31 21:35:27.973275+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                      G. Fairhurst\nRequest for Comments: 7661                               A. Sathiaseelan\nObsoletes: 2861                                                R. Secchi\nCategory: Experimental                            University of Aberdeen\nISSN: 2070-1721                                             October 2015",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Updating TCP to Support Rate-Limited Traffic",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document provides a mechanism to address issues that arise when TCP is used for traffic that exhibits periods where the sending rate is limited by the application rather than the congestion window. It provides an experimental update to TCP that allows a TCP sender to restart quickly following a rate-limited interval. This method is expected to benefit applications that send rate-limited traffic using TCP while also providing an appropriate response if congestion is experienced.",
      "ja": "このドキュメントでは、TCPの送信レートは、アプリケーションではなく、輻輳ウィンドウによって制限されている期間を示すトラフィックに使用されたときに発生する問題に対処するためのメカニズムを提供します。これは、TCPの送信者がレート制限間隔以下に迅速に再起動することを可能にするTCPへの実験的なアップデートを提供します。この方法は、混雑が経験されている場合も、適切な応答を提供しながら、TCPを使用してレート制限トラフィックを送信するアプリケーションに利益をもたらすことが期待されます。"
    },
    {
      "indent": 3,
      "text": "This document also evaluates the Experimental specification of TCP Congestion Window Validation (CWV) defined in RFC 2861 and concludes that RFC 2861 sought to address important issues but failed to deliver a widely used solution. This document therefore reclassifies the status of RFC 2861 from Experimental to Historic. This document obsoletes RFC 2861.",
      "ja": "この文書はまた、RFC 2861で定義されたTCP輻輳ウィンドウ検証（CWV）の実験的仕様を評価し、RFC 2861には、重要な問題に対処しようが、広く使われているソリューションを提供するために失敗したと結論づけています。従って、この文書は歴史的に、実験からRFC 2861の状態を再分類します。この文書はRFC 2861を廃止します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、検査、実験的な実装、および評価のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document defines an Experimental Protocol for the Internet community. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "この文書は、インターネットコミュニティのためにExperimentalプロトコルを定義します。このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7661.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7661で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2015 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2015 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Implementation of New CWV ..................................5\n   1.2. Standards Status of This Document ..........................5\n2. Reviewing Experience with TCP-CWV ...............................5\n3. Terminology .....................................................7\n4. A New Congestion Window Validation Method .......................8\n   4.1. Initialisation .............................................8\n   4.2. Estimating the Validated Capacity Supported by a Path ......8\n   4.3. Preserving cwnd during a Rate-Limited Period ..............10\n   4.4. TCP Congestion Control during the Non-validated Phase .....11\n        4.4.1. Response to Congestion in the Non-validated Phase ..12\n        4.4.2. Sender Burst Control during the\n               Non-validated Phase ................................14\n        4.4.3. Adjustment at the End of the Non-validated\n               Period (NVP) .......................................14\n   4.5. Examples of Implementation ................................15\n        4.5.1. Implementing the pipeACK Measurement ...............15\n        4.5.2. Measurement of the NVP and pipeACK Samples .........16\n        4.5.3. Implementing Detection of the cwnd-Limited\n               Condition ..........................................17\n5. Determining a Safe Period to Preserve cwnd .....................17\n6. Security Considerations ........................................18\n7. References .....................................................18\n   7.1. Normative References ......................................18\n   7.2. Informative References ....................................19\nAcknowledgments ...................................................21\nAuthors' Addresses ................................................21",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "TCP is used for traffic with a range of application behaviours. The TCP congestion window (cwnd) controls the maximum number of unacknowledged packets/bytes that a TCP flow may have in the network at any time, a value known as the FlightSize [RFC5681]. FlightSize is a measure of the volume of data that is unacknowledged at a specific time. A bulk application will always have data available to transmit. The rate at which it sends is therefore limited by the maximum permitted by the receiver advertised window and the sender congestion window (cwnd). The FlightSize of a bulk flow increases with the cwnd and tracks the volume of data acknowledged in the last Round-Trip Time (RTT).",
      "ja": "TCPは、アプリケーションの動作の範囲とのトラフィックのために使用されています。 TCP輻輳ウィンドウ（CWND）は未確認パケットの最大数を制御/ TCPフローは、いつでもネットワークにFlightSize [RFC5681]として知られている値を有することができることバイト。 FlightSizeは、特定の時間における未確認であるデータの量の尺度です。バルクアプリケーションは、常に送信するのに利用可能なデータを持っています。それゆえ、受信機によって許容される最大値によって制限される送信速度は、ウィンドウと送信輻輳ウィンドウ（CWND）をアドバタイズ。 CWND有するバルク流増加のFlightSizeとは、最後のラウンドトリップ時間（RTT）に認めデータの量を追跡します。"
    },
    {
      "indent": 3,
      "text": "In contrast, a rate-limited application will experience periods when the sender is either idle or unable to send at the maximum rate permitted by the cwnd. In this case, the volume of data sent (FlightSize) can change significantly from one RTT to another and can be much less than the cwnd. Hence, it is possible that the FlightSize could significantly exceed the recently used capacity. The update in this document targets the operation of TCP in such rate-limited cases.",
      "ja": "送信者がアイドル状態又はCWNDによって許容される最大レートで送信することができないのいずれかである場合は対照的に、レート制限されたアプリケーションは、期間を経験します。この場合、送信されるデータの量（FlightSize）は、別のRTTから大幅に変更することができ、CWNDよりもはるかに小さくすることができます。したがって、FlightSizeが大幅に最近使用容量を超える可能性があります。このドキュメントの更新は、このようなレート制限の場合、TCPの動作を対象としています。"
    },
    {
      "indent": 3,
      "text": "Standard TCP states that a TCP sender SHOULD set cwnd to no more than the Restart Window (RW) before beginning transmission if the TCP sender has not sent data in an interval exceeding the retransmission timeout, i.e., when an application becomes idle [RFC5681]. [RFC2861] notes that this TCP behaviour was not always observed in current implementations. Experiments confirm this to still be the case (see [Bis08]).",
      "ja": "標準のTCPは、TCP送信者は、アプリケーションがアイドル[RFC5681]となった場合、すなわち、再送タイムアウトを超える間隔でデータを送信していない場合、TCP送信者が送信を開始する前に再起動ウィンドウ（RW）を超えないようにCWNDを設定すべきであると述べています。 [RFC2861]は、このTCPの挙動は常に現在の実装では観察されなかったことを指摘しています。実験は、これはまだ（[Bis08]参照）の場合であることを確認します。"
    },
    {
      "indent": 3,
      "text": "Congestion Window Validation (CWV) [RFC2861] introduced the term \"application-limited period\" for the time when the sender sends less than is allowed by the congestion or receiver windows. [RFC2861] described a method that improved support for applications that vary their transmission rate, i.e., applications that either have (short) idle periods between transmissions or change the rate at which they send. These applications are characterised by the TCP FlightSize often being less than the cwnd. Many Internet applications exhibit this behaviour, including web browsing, HTTP-based adaptive streaming, applications that support query/response type protocols, network file sharing, and live video transmission. Many such applications currently avoid using long-lived (persistent) TCP connections (e.g., servers that use HTTP/1.1 [RFC7230] typically support persistent HTTP connections but do not enable this by default). Instead, such applications often either use a succession of short TCP transfers or use UDP.",
      "ja": "輻輳ウィンドウ検証（CWV）[RFC2861]は、送信者が渋滞または受信ウィンドウによって許容されるよりも少ない送信時間用語「アプリケーション制限期間」を導入しました。 [RFC2861]は、その伝送速度、送信間の（短い）アイドル期間を有するか、またはそれらが送信する速度を変更するのいずれか、即ち、アプリケーションを変更するアプリケーションのサポートが改善された方法を記載しました。これらのアプリケーションは、TCP FlightSizeは、多くの場合にcwnd未満であることを特徴としています。 Webブラウジング、HTTPベースのアダプティブストリーミング、クエリ/レスポンス型のプロトコル、ネットワークファイル共有、およびライブ映像伝送をサポートするアプリケーションを含む、多くのインターネットアプリケーションの展示この動作。現在、長寿命（永続的な）TCPコネクションを使用しないようそのような多くのアプリケーション（例えば、HTTP / 1.1 [RFC7230]を使用するサーバは、一般的に永続的なHTTP接続をサポートしていますが、デフォルトでは、これを有効にしないでください）。代わりに、このようなアプリケーションは、多くの場合、どちらか短いTCP転送を連続して使用するか、またはUDPを使用しています。"
    },
    {
      "indent": 3,
      "text": "Standard TCP does not impose additional restrictions on the growth of the congestion window when a TCP sender is unable to send at the maximum rate allowed by the cwnd. In this case, the rate-limited sender may grow a cwnd far beyond that corresponding to the current transmit rate, resulting in a value that does not reflect current information about the state of the network path the flow is using. Use of such an invalid cwnd may result in reduced application performance and/or could significantly contribute to network congestion.",
      "ja": "TCPの送信者がCWNDによって許容される最大レートで送信することができないとき、標準TCPは輻輳ウィンドウの成長に追加の制限を課すことはありません。この場合、レート制限、送信者は、フローが使用しているネットワーク・パスの状態に関する現在の情報を反映していない値が得られ、遠い現在の送信レートに対応する超えCWNDを成長させることができます。無効なのcwndの使用が減少し、アプリケーションのパフォーマンスをもたらすことができる、および/または大幅ネットワークの混雑に貢献できます。"
    },
    {
      "indent": 3,
      "text": "[RFC2861] proposed a solution to these issues in an experimental method known as CWV. CWV was intended to help reduce cases where TCP accumulated an invalid (inappropriately large) cwnd. The use and drawbacks of using the CWV algorithm described in RFC 2861 with an application are discussed in Section 2.",
      "ja": "[RFC2861]はCWVとして知られている実験方法でこれらの問題に対する解決策を提案しました。 CWVは、TCPが無効（不適切大）にcwndを蓄積した例を削減することを意図していました。使用およびアプリケーションとRFC 2861に記載さCWVアルゴリズムを使用しての欠点は、セクション2に記載されています。"
    },
    {
      "indent": 3,
      "text": "Section 3 defines relevant terminology.",
      "ja": "第3節では、関連する用語を定義します。"
    },
    {
      "indent": 3,
      "text": "Section 4 specifies an alternative to CWV that seeks to address the same issues but does so in a way that is expected to mitigate the impact on an application that varies its sending rate. The updated method applies to the rate-limited conditions (including both application-limited and idle senders).",
      "ja": "第4節では、同じ問題に対処しようとするが、その送信レートを変化させるアプリケーションへの影響を軽減するために期待されている方法で、そうCWVの代替を指定します。更新方法は、（アプリケーション制限アイドル送信者の両方を含む）速度制限条件に適用されます。"
    },
    {
      "indent": 3,
      "text": "The goals of this update are:",
      "ja": "このアップデートの目的は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o To not change the behaviour of a TCP sender that performs bulk transfers that fully use the cwnd.",
      "ja": "oは完全にcwndを使用するバルク転送を行い、TCP送信者の振る舞いを変更しないでください。"
    },
    {
      "indent": 3,
      "text": "o To provide a method that co-exists with standard TCP and other flows that use this updated method.",
      "ja": "標準のTCPと、この更新方法を使用する他のフローと共存する方法を提供することで、O。"
    },
    {
      "indent": 3,
      "text": "o To reduce transfer latency for applications that change their rate over short intervals of time.",
      "ja": "oは時間の短い間隔でそのレートを変更するアプリケーションのための転送待ち時間を減らすために。"
    },
    {
      "indent": 3,
      "text": "o To avoid a TCP sender growing a large \"non-validated\" cwnd, when it has not recently sent using this cwnd.",
      "ja": "それが最近、このCWNDを使用して送信していない大規模な「未検証」にcwndを、成長しているTCPの送信者を避けるために、O。"
    },
    {
      "indent": 3,
      "text": "o To remove the incentive for ad hoc application or network stack methods (such as \"padding\") solely to maintain a large cwnd for future transmission.",
      "ja": "単に将来の送信のために大きい輻輳ウィンドウを維持する（例えば、「パディング」など）アドホックアプリケーションまたはネットワークスタック方法のためのインセンティブを削除するには、O。"
    },
    {
      "indent": 3,
      "text": "o To provide an incentive for the use of long-lived connections rather than a succession of short-lived flows, benefiting both the long-lived flows and other flows sharing capacity with these flows when congestion is encountered.",
      "ja": "oは長命フローと輻輳が発生したときに、これらのフローで容量を共有する他のフローの両方に恩恵をもたらす、かなり短命フローの連続より長命の接続の使用のためのインセンティブを提供します。"
    },
    {
      "indent": 3,
      "text": "Section 5 describes the rationale for selecting the safe period to preserve the cwnd.",
      "ja": "第5節ではcwndのを維持するために安全期間を選択するための理論的根拠を説明しています。"
    },
    {
      "indent": 0,
      "text": "1.1. Implementation of New CWV",
      "section_title": true,
      "ja": "1.1。新CWVの実装"
    },
    {
      "indent": 3,
      "text": "The method specified in Section 4 of this document is a sender-side-only change to the TCP congestion control behaviour of TCP.",
      "ja": "このドキュメントのセクション4で指定した方法は、TCPのTCPの輻輳制御動作に送信側のみの変更です。"
    },
    {
      "indent": 3,
      "text": "The method creates a new protocol state and requires a sender to determine when the cwnd is validated or non-validated to control the entry and exit from this state (see Section 4.3). It defines how a TCP sender manages the growth of the cwnd using the set of rules defined in Section 4.",
      "ja": "この方法は、新しいプロトコルの状態を作成し、CWNDが（セクション4.3を参照）検証またはこの状態から入退室を制御するために、非有効化されるときを決定するために、送信者を必要とします。これは、TCPの送信者がセクション4で定義されたルールのセットを使用してのcwndの成長をどのように管理するかを定義します。"
    },
    {
      "indent": 3,
      "text": "Implementation of this specification requires an implementor to define a method to measure the available capacity using a set of pipeACK samples. The details of this measurement are implementation-specific. An example is provided in Section 4.5.1, but other methods are permitted. A sender also needs to provide a method to determine when it becomes cwnd-limited. Implementation of this may require consideration of other TCP methods (see Section 4.5.3).",
      "ja": "この仕様の実装はpipeACKサンプルのセットを使用して利用可能な容量を測定するための方法を定義する実装を必要とします。この測定の詳細は、実装固有のものです。例はセクション4.5.1で提供されるが、他の方法が許可されています。送信者はまた、CWND-限定なるときを決定するための方法を提供する必要があります。これの実装は、他のTCP方式の検討が必要な場合があります（セクション4.5.3を参照してください）。"
    },
    {
      "indent": 3,
      "text": "A sender is also recommended to provide a method that controls the maximum burst size (see Section 4.4.2). However, implementors are allowed flexibility in how this method is implemented, and the choice of an appropriate method is expected to depend on the way in which the sender stack implements other TCP methods (such as TCP Segment Offload (TSO)).",
      "ja": "送信者は、また、最大バーストサイズ（セクション4.4.2を参照）を制御する方法を提供することが推奨されます。しかし、実装者は、この方法が実装されている方法に柔軟性を許可され、そして適切な方法の選択は、送信スタックが（例えばTCPセグメントオフロード（TSO）のような）他のTCPメソッドを実装する方法に依存すると予想されます。"
    },
    {
      "indent": 0,
      "text": "1.2. Standards Status of This Document",
      "section_title": true,
      "ja": "1.2。このドキュメントの標準状態"
    },
    {
      "indent": 3,
      "text": "The document obsoletes the methods described in [RFC2861]. It recommends a set of mechanisms, including the use of pacing during a non-validated period. The updated mechanisms are intended to have a less aggressive congestion impact than would be exhibited by a standard TCP sender.",
      "ja": "文書は、[RFC2861]に記載された方法を時代遅れ。これは、未検証期間中のペーシングの使用を含むメカニズムのセットを、お勧めします。更新のメカニズムは、標準のTCP送信者が展示されるよりも少ない積極的な輻輳の影響を与えることを意図しています。"
    },
    {
      "indent": 3,
      "text": "The specification in this document is classified as \"Experimental\" pending experience with deployed implementations of the methods.",
      "ja": "このドキュメントの仕様は「実験的」な方法の展開実装と、保留中の経験として分類されています。"
    },
    {
      "indent": 0,
      "text": "2. Reviewing Experience with TCP-CWV",
      "section_title": true,
      "ja": "TCP-CWV 2.見直しの経験"
    },
    {
      "indent": 3,
      "text": "[RFC2861] described a simple modification to the TCP congestion control algorithm that decayed the cwnd after the transition to a \"sufficiently-long\" idle period. This used the slow-start threshold (ssthresh) to save information about the previous value of the congestion window. The approach relaxed the standard TCP behaviour for an idle session [RFC5681], which was intended to improve application performance. CWV also modified the behaviour when a sender transmitted at a rate less than allowed by cwnd.",
      "ja": "[RFC2861]は、「十分に長い」アイドル期間に移行した後にCWNDを減衰TCPの輻輳制御アルゴリズムに単純な変更を記載しました。これは、輻輳ウィンドウの前の値についての情報を保存するために、スロースタートしきい値（SSTHRESH）を使用しました。アプローチは、アプリケーションのパフォーマンスを向上させることを意図していたアイドルセッション[RFC5681]、のための標準的なTCPの動作を緩和しました。送信者がCWNDによって許容さ未満のレートで送信するときCWVも動作を変更しました。"
    },
    {
      "indent": 3,
      "text": "[RFC2861] proposed two sets of responses: one after an \"application-limited period\" and one after an \"idle period\". Although this distinction was argued, in practice, differentiating the two conditions was found problematic in actual networks (see, e.g., [Bis10]). While this offered predictable performance for long on-off periods (>>1 RTT) or slowly varying rate-based traffic, the performance could be unpredictable for variable-rate traffic and depended both upon whether an accurate RTT had been obtained and the pattern of application traffic relative to the measured RTT.",
      "ja": "「アプリケーション制限期間」次々と「アイドル期間」次々：[RFC2861]は応答の二組を提案しました。この区別を論じたが、実際には、二つの条件を区別すること（[Bis10]、例えば、参照）実際のネットワークにおいて問題が見出されました。これは予測可能な長いオン・オフ期間のパフォーマンス（>> 1 RTT）又はゆっくりレートベースのトラフィックを変化させることを提供しながら、性能は、可変レートのトラフィックの予測不可能かつ正確なRTTが得られたかどうかに両方を依存し、パターンの可能性測定されたRTTのアプリケーショントラフィックの相対。"
    },
    {
      "indent": 3,
      "text": "Many applications can and often do vary their transmission over a wide range of rates. Using [RFC2861], such applications often experienced varying performance, which made it hard for application developers to predict the TCP latency even when using a path with stable network characteristics. We argue that an attempt to classify application behaviour as application-limited or idle is problematic and also inappropriate. This document therefore explicitly avoids trying to differentiate these two cases, instead treating all rate-limited traffic uniformly.",
      "ja": "多くのアプリケーションは、多くの場合、速度の広い範囲でそれらの送信を変える行うことができます。 [RFC2861]を使用して、このようなアプリケーションは、多くの場合、それは難しい安定したネットワーク特性を持つパスを用いた場合であっても、アプリケーション開発者は、TCPの待ち時間を予測するために作られた、様々なパフォーマンスを経験しました。私たちは、アプリケーション制限またはアイドルとして、アプリケーションの動作を分類する試みが問題とも不適切であると主張しています。従って、この文書は、明示的に代わりに一様にすべてのレート制限トラフィックを処理し、これらの2つの場合を区別しようとして回避します。"
    },
    {
      "indent": 3,
      "text": "[RFC2861] has been implemented in some mainstream operating systems as the default behaviour [Bis08]. Analysis (e.g., [Bis10] and [Fai12]) has shown that a TCP sender using CWV is able to use available capacity on a shared path after an idle period. This can benefit variable-rate applications, especially over long delay paths, when compared to the slow-start restart specified by standard TCP. However, CWV would only benefit an application if the idle period were less than several Retransmission Timeout (RTO) intervals [RFC6298], since the behaviour would otherwise be the same as for standard TCP, which resets the cwnd to the TCP Restart Window after this period.",
      "ja": "[RFC2861]は、デフォルトの動作[Bis08]などの一部の主流のオペレーティングシステムに実装されています。分析は（例えば、[Bis10]及び[Fai12]）CWVを使用してTCP送信者がアイドル期間の後、共有パス上の利用可能な容量を使用することが可能であることが示されています。標準TCPで指定されたスロースタートのリスタートと比較すると、これは、特に長い遅延パスを介して、可変レートのアプリケーションに利益をもたらすことができます。アイドル期間は、いくつかの再送タイムアウト（RTO）間隔[RFC6298]未満であった場合の動作は、それ以外の場合、この後にTCP再起動ウィンドウにCWNDをリセット標準TCP、の場合と同じであるので、CWVのみ、アプリケーションの恩恵を受ける期間。"
    },
    {
      "indent": 3,
      "text": "To enable better performance for variable-rate applications with TCP, some operating systems have chosen to support non-standard methods, or applications have resorted to \"padding\" streams by sending dummy data to maintain their sending rate when they have no data to transmit. Although transmitting redundant data across a network path provides good evidence that the path can sustain data at the offered rate, padding also consumes network capacity and reduces the opportunity for congestion-free statistical multiplexing. For variable-rate flows, the benefits of statistical multiplexing can be significant, and it is therefore a goal to find a viable alternative to padding streams.",
      "ja": "TCPと可変レートアプリケーションのためのより良いパフォーマンスを有効にするには、いくつかのオペレーティングシステムは、非標準的な方法をサポートすることを選択した、またはアプリケーションは、送信するデータがないとき、その送信レートを維持するためのダミーデータを送信することにより、「パディング」の流れに頼ってきました。ネットワーク経路を横切って冗長データを送信する経路が提供されるレートでデータを維持することができることを十分な証拠を提供するが、パディングは、ネットワークの容量を消費し、輻輳フリー統計的多重化のための機会を減少させます。可変レートのフローについては、統計的多重化のメリットが大きくなる可能性があり、それゆえ、パディングストリームに実行可能な代替を見つけるための目標です。"
    },
    {
      "indent": 3,
      "text": "Experience with [RFC2861] suggests that although the CWV method benefited the network in a rate-limited scenario (reducing the probability of network congestion), the behaviour was too conservative for many common rate-limited applications. This mechanism did not therefore offer the desirable increase in application performance for rate-limited applications, and it is unclear whether applications actually use this mechanism in the general Internet.",
      "ja": "[RFC2861]での経験は、CWV方法は（ネットワーク輻輳の可能性を低減する）速度制限シナリオにおけるネットワークを恩恵を受けているが、行動は多くの一般的なレート制限アプリケーションはあまりにも保守的であったことを示唆しています。このメカニズムは、したがって、レート制限アプリケーション用のアプリケーションのパフォーマンスが望ましい増加を提供していませんでした、そしてアプリケーションが実際に一般的なインターネットでこのメカニズムを使用するかどうかは不明です。"
    },
    {
      "indent": 3,
      "text": "Therefore, it was concluded that CWV, as defined in [RFC2861], was often a poor solution for many rate-limited applications. It had the correct motivation but the wrong approach to solving this problem.",
      "ja": "したがって、CWVは、[RFC2861]で定義されるように、多くのレート制限アプリケーションの貧液がしばしばあったと結論付けられました。それは正しい動機が、この問題を解決するための間違ったアプローチを持っていました。"
    },
    {
      "indent": 0,
      "text": "3. Terminology",
      "section_title": true,
      "ja": "3.用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "The document assumes familiarity with the terminology of TCP congestion control [RFC5681].",
      "ja": "文書には、TCPの輻輳制御[RFC5681]の専門用語に精通して前提としています。"
    },
    {
      "indent": 3,
      "text": "The following additional terminology is introduced in this document:",
      "ja": "以下の追加の用語は、本書で紹介されています。"
    },
    {
      "indent": 3,
      "text": "o cwnd-limited: A TCP flow that has sent the maximum number of segments permitted by the cwnd, where the application utilises the allowed sending rate (see Section 4.5.3).",
      "ja": "CWNDが制限されたO：アプリケーションが許容送信レートを利用CWND、によって許可セグメントの最大数を送信したTCPフロー（セクション4.5.3を参照）。"
    },
    {
      "indent": 3,
      "text": "o pipeACK sample: A measure of the volume of data acknowledged by the network within an RTT.",
      "ja": "O pipeACKサンプル：RTT内のネットワークによって承認されるデータの量の尺度。"
    },
    {
      "indent": 3,
      "text": "o pipeACK variable: A variable that measures the available capacity using the set of pipeACK samples (see Section 4.2).",
      "ja": "O pipeACK変数：pipeACKサンプルのセットを使用して利用可能な容量を測定変数（4.2節を参照）。"
    },
    {
      "indent": 3,
      "text": "o pipeACK Sampling Period: The maximum period that a measured pipeACK sample may influence the pipeACK variable.",
      "ja": "O pipeACKサンプリング周期：測定pipeACKサンプルはpipeACK変数に影響を及ぼし得ることを最大期間。"
    },
    {
      "indent": 3,
      "text": "o Non-validated phase: The phase where the cwnd reflects a previous measurement of the available path capacity.",
      "ja": "O非検証相：CWNDが使用可能なパスの容量の前回の測定を反映する位相。"
    },
    {
      "indent": 3,
      "text": "o Non-validated period (NVP): The maximum period for which cwnd is preserved in the non-validated phase.",
      "ja": "O非有効期限（NVP）：CWNDが非検証フェーズに保存された最大期間。"
    },
    {
      "indent": 3,
      "text": "o Rate-limited: A TCP flow that does not consume more than one half of cwnd and hence operates in the non-validated phase. This includes periods when an application is either idle or chooses to send at a rate less than the maximum permitted by the cwnd.",
      "ja": "Oレート制限：それゆえにcwndの半分以上を消費していないTCPフローは未検証フェーズで動作します。アプリケーションのいずれかであるアイドル又はCWNDによって許容される最大未満のレートで送信することを選択したときに期間を含みます。"
    },
    {
      "indent": 3,
      "text": "o Validated phase: The phase where the cwnd reflects a current estimate of the available path capacity.",
      "ja": "O検証さ相：CWNDが使用可能なパスの容量の現在の推定値を反映する位相。"
    },
    {
      "indent": 0,
      "text": "4. A New Congestion Window Validation Method",
      "section_title": true,
      "ja": "4.新しい輻輳ウィンドウ検証メソッド"
    },
    {
      "indent": 3,
      "text": "This section proposes an update to the TCP congestion control behaviour during a rate-limited interval. This new method intentionally does not differentiate between times when the sender has become idle or chooses to send at a rate less than the maximum allowed by the cwnd.",
      "ja": "このセクションでは、レート制限期間中にTCPの輻輳制御動作に更新を提案しています。送信者がアイドル状態になるかのcwndによって許可された最大値未満の速度で送信することを選択したときに、この新しい方法は、意図的に時間を区別しません。"
    },
    {
      "indent": 3,
      "text": "In the non-validated phase, the capacity used by an application can be less than that allowed by the TCP cwnd. This update allows an application to preserve a recently used cwnd while in the non-validated phase and then to resume transmission at a previous rate without incurring the delay of slow-start. However, if the TCP sender experiences congestion using the preserved cwnd, it is required to immediately reset the cwnd to an appropriate value specified by the method. If a sender does not take advantage of the preserved cwnd within the non-validated period (NVP), the value of cwnd is reduced, ensuring the value better reflects the capacity that was recently actually used.",
      "ja": "非検証フェーズでは、アプリケーションによって使用される容量は、TCP CWNDで許可さよりも小さくすることができます。この更新は、スロースタートの遅延を招くことなく、前のレートで送信を再開するために、非検証フェーズで、次いでながら、アプリケーションが最近使用されたCWNDを維持することを許可します。ただし、保存にcwndを使用してTCP送信者の経験の混雑場合は、直ちに法で指定された適切な値ににcwndをリセットするために必要とされます。送信者は未検証期間（NVP）内の保存にcwndを利用しない場合は、CWNDの値は、より良い値を確保し、減少し、最近実際に使用された能力を反映しています。"
    },
    {
      "indent": 3,
      "text": "It is expected that this update will satisfy the requirements of many rate-limited applications and at the same time provide an appropriate method for use in the Internet. New CWV reduces this incentive for an application to send \"padding\" data simply to keep transport congestion state.",
      "ja": "このアップデートは、多くのレート制限のアプリケーションの要件を満たすと同時に、インターネットで使用するための適切な方法を提供することが期待されます。新CWVは、トランスポート輻輳状態を維持するために、単純に「パディング」のデータを送信するアプリケーションのために、このインセンティブを低減します。"
    },
    {
      "indent": 3,
      "text": "The method is specified in the following subsections and is expected to encourage applications and TCP stacks to use standards-based congestion control methods. It may also encourage the use of long-lived connections where this offers benefit (such as persistent HTTP).",
      "ja": "この方法は、以下のサブセクションで指定されており、アプリケーションを促進することが期待されており、TCPは、標準ベースの輻輳制御方式を使用するスタック。また、これは（例えば永続的なHTTPなど）の利益を提供しています長命接続の使用を奨励することがあります。"
    },
    {
      "indent": 0,
      "text": "4.1. Initialisation",
      "section_title": true,
      "ja": "4.1。初期化"
    },
    {
      "indent": 3,
      "text": "A sender starts a TCP connection in the validated phase and initialises the pipeACK variable to the \"undefined\" value. This value inhibits use of the value in cwnd calculations.",
      "ja": "送信者は、検証フェーズでのTCP接続を開始し、「未定義」の値にpipeACK変数を初期化します。この値は、cwndの計算で値の使用を禁止します。"
    },
    {
      "indent": 0,
      "text": "4.2. Estimating the Validated Capacity Supported by a Path",
      "section_title": true,
      "ja": "4.2。パスによってサポートされている検証済みの容量の見積もり"
    },
    {
      "indent": 3,
      "text": "[RFC6675] defines \"FlightSize\", a variable that indicates the instantaneous amount of data that has been sent but not cumulatively acknowledged. In this method, a new variable \"pipeACK\" is introduced to measure the acknowledged size of the network pipe. This is used to determine if the sender has validated the cwnd. pipeACK differs from FlightSize in that it is evaluated over a window of acknowledged data, rather than reflecting the amount of data outstanding.",
      "ja": "[RFC6675]は「FlightSize」、送信されなく累積的に認識されているデータの瞬間的な量を示す変数を定義します。この方法では、新しい変数「pipeACKは、」ネットワークパイプの定評の大きさを測定するために導入されます。これは、送信者がのcwndを検証したかどうかを決定するために使用されます。それはむしろ、未処理データの量を反映するよりも、肯定応答データのウィンドウにわたって評価されるという点でpipeACKがFlightSizeは異なります。"
    },
    {
      "indent": 3,
      "text": "A sender determines a pipeACK sample by measuring the volume of data that was acknowledged by the network over the period of a measured Round-Trip Time (RTT). Using the variables defined in [RFC6675], a value could be measured by caching the value of HighACK and, after one RTT, measuring the difference between the cached HighACK value and the current HighACK value. A sender MAY count TCP DupACKs that acknowledge new data when collecting the pipeACK sample. Other equivalent methods may be used.",
      "ja": "送信者は、測定されたラウンドトリップ時間（RTT）の期間にわたってネットワークによって承認されたデータの量を測定することにより、pipeACKサンプルを決定します。 [RFC6675]で定義された変数を使用して、値がHighACKの値をキャッシュし、1 RTTの後、キャッシュされたHighACK値と現在HighACK値との差を測定することによって測定することができます。送信者はpipeACKの試料を採取する際に、新たなデータを確認するTCP DupACKsをカウントすることができます。他の同等の方法を用いることができます。"
    },
    {
      "indent": 3,
      "text": "A sender is not required to continuously update the pipeACK variable after each received ACK but SHOULD perform a pipeACK sample at least once per RTT when it has sent unacknowledged segments.",
      "ja": "送信者は、各々がACKを受信した後に連続pipeACK変数を更新する必要はないが、それは未確認のセグメントを送信したときに、少なくとも一度RTTあたりpipeACKサンプルを実行しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The pipeACK variable MAY consider multiple pipeACK samples over the pipeACK Sampling Period. The value of the pipeACK variable MUST NOT exceed the maximum (highest value) within the pipeACK Sampling Period. This specification defines the pipeACK Sampling Period as Max(3*RTT, 1 second). This period enables a sender to compensate for large fluctuations in the sending rate, where there may be pauses in transmission, and allows the pipeACK variable to reflect the largest recently measured pipeACK sample.",
      "ja": "pipeACK変数はpipeACKサンプリング周期を介して複数のpipeACKサンプルを考慮することができます。 pipeACK変数の値はpipeACKサンプリング期間内の最大値（最大値）を超えてはなりません。この仕様は、Max（3 * RTT、1秒）としてpipeACKサンプリング期間を規定します。この期間は、伝送中に休止があるかもしれない送信レートの大きな変動を補償するために、送信者ができ、そしてpipeACK変数最大の最近測定pipeACKサンプルを反映することを可能にします。"
    },
    {
      "indent": 3,
      "text": "When no measurements are available (e.g., a sender that has just started transmission or immediately after loss recovery), the pipeACK variable is set to the \"undefined value\". This value is used to inhibit entering the non-validated phase until the first new measurement of a pipeACK sample. (Section 4.5 provides examples of implementation.)",
      "ja": "いかなる測定値が利用できない場合（例えば、単に損失回復直後に送信または開始された送信者）、pipeACK変数は「不定値」に設定されています。この値はpipeACKサンプルの最初の新しい測定まで非検証フェーズに入る阻害するために使用されます。 （セクション4.5の実装の例を提供します。）"
    },
    {
      "indent": 3,
      "text": "The pipeACK variable MUST NOT be updated during TCP Fast Recovery. That is, the sender stops collecting pipeACK samples during loss recovery. The method RECOMMENDS enabling the TCP SACK option [RFC2018] and RECOMMENDS the method defined in [RFC6675] to recover missing segments. This allows the sender to more accurately determine the number of missing bytes during the loss recovery phase, and using this method will result in a more appropriate cwnd following loss.",
      "ja": "pipeACK変数は、TCP高速回復中に更新されてはなりません。つまり、損失回復の間にpipeACKサンプルを収集し、送信者の駅です。この方法は、TCP SACKオプション[RFC2018]を有効にすることをお勧めし、欠落しているセグメントを回復するために[RFC6675]で定義された方法を推奨しています。これは、送信者がより正確に損失回復段階の間に欠落したバイトの数を決定することができ、そしてこの方法を使用すると、損失以下のより適切なCWNDをもたらすであろう。"
    },
    {
      "indent": 3,
      "text": "Note: The use of pipeACK rather than FlightSize can change the behaviour of a TCP flow when a sender does not always have data available to send. One example arises when there is a pause in transmission after sending a sequence of many packets, and the sender experiences loss at or near the end of its transmission sequence. In this case, the TCP flow may have used a significant amount of capacity just prior to the loss (which would be reflected in the volume of data acknowledged, recorded in the pipeACK variable), but at the actual time of loss, the number of unacknowledged packets in flight (at the end of the sequence) may be small, i.e., there is a small FlightSize. After loss recovery, the sender resets its congestion control state.",
      "ja": "注意：送信者が常に送信するために利用可能なデータを持っていないときpipeACKではなくFlightSizeの使用はTCPフローの動作を変更することができます。伝送中に休止がその伝送シーケンスの最後またはその近く、多くのパケットのシーケンスを送信すると、送信者の経験の損失の後がある場合の一つの例が発生します。この場合、TCPフローが直前損失容量のかなりの量を使用している場合があり（データの量に反映されるであろうpipeACK変数に記録され、肯定応答）が、損失の実際の時間で、数の（配列の端で）飛行中の未確認パケットが小さくてよい、すなわち、小さなFlightSizeがあります。損失回復した後、送信者は、その輻輳制御状態をリセットします。"
    },
    {
      "indent": 3,
      "text": "[Fai12] explored the benefits of different responses to congestion for application-limited streams. If the response is based only on the Loss FlightSize, the sender would assign a small cwnd and ssthresh, based only on the volume of data sent after the loss. When the sender next starts to transmit, it can incur many RTTs of delay in slow-start before it reacquires its previous rate. When the pipeACK value is also used to calculate the cwnd and ssthresh (as specified in Section 4.4.1), the sender can use a value that also reflects the recently used capacity before the loss. This prevents a variable-rate application from being unduly penalised. When the sender resumes, it starts at one-half its previous rate, similar to the behaviour of a bulk TCP flow [Hos15]. To ensure an appropriate reaction to ongoing congestion, this method requires that the pipeACK variable is reset after it is used in this way.",
      "ja": "【Fai12】アプリケーション制限ストリームの輻輳に異なる応答の利点を​​検討しました。応答が唯一の損失FlightSizeに基づいている場合、送信者は、唯一の損失の後に送信されるデータの量に基づいて、小型のcwndとSSTHRESHを割り当てます。送信者が次の送信を開始するとき、それはその前の率を再取得する前に、それはスロースタートで遅れの多くのRTTを招くことができます。 （セクション4.4.1で指定されるように）pipeACK値もCWNDおよびSSTHRESHを計算するために使用される場合、送信者はまた、損失の前に最近使用された能力を反映した値を使用することができます。これは、過度にペナルティを課されるの可変レートのアプリケーションを防止します。場合は、送信者の履歴書、それは[Hos15]バルクTCPフローの挙動に類似し、半分その前のレートで開始します。進行中の混雑に適切な反応を確実にするために、この方法は、それがこのように使用された後pipeACK変数がリセットされることを必要とします。"
    },
    {
      "indent": 0,
      "text": "4.3. Preserving cwnd during a Rate-Limited Period",
      "section_title": true,
      "ja": "4.3。レート制限期間中にcwndを保存"
    },
    {
      "indent": 3,
      "text": "The updated method creates a new TCP sender phase that captures whether the cwnd reflects a validated or non-validated value. The phases are defined as:",
      "ja": "更新方法はcwndのが検証または非検証済みの値を反映しているかどうかを捉え、新たなTCPの送信者相を作成します。段階は次のように定義されています。"
    },
    {
      "indent": 3,
      "text": "o Validated phase: pipeACK >=(1/2)*cwnd, or pipeACK is undefined (i.e., at the start or directly after loss recovery). This is the normal phase, where cwnd is expected to be an approximate indication of the capacity currently available along the network path, and the standard methods are used to increase cwnd (currently, the standard methods are described in [RFC5681]).",
      "ja": "O検証さ相：pipeACK> =（1/2）* CWND、またはpipeACKが定義されていない（すなわち、開始時または直接損失回復後）。これは、CWNDは、ネットワーク経路に沿って、現在利用可能な容量のおおよその指標であると予想され、そして標準的な方法は、（現在、標準的な方法は、[RFC5681]に記載されている）にcwndを増加させるために使用される通常の位相、です。"
    },
    {
      "indent": 3,
      "text": "o Non-validated phase: pipeACK <(1/2)*cwnd. This is the phase where the cwnd has a value based on a previous measurement of the available capacity, and the usage of this capacity has not been validated in the pipeACK Sampling Period, that is, when it is not known whether the cwnd reflects the currently available capacity along the network path. The mechanisms to be used in this phase seek to determine a safe value for cwnd and an appropriate reaction to congestion.",
      "ja": "O非検証フェーズ：pipeACK <（1/2）* CWND。これは、CWNDは、利用可能な容量の以前の測定に基づく値を有する位相であり、この能力の使用はpipeACKサンプリング周期で検証されていない、CWNDが現在を反映しているかどうかは知られていない場合には、ありますネットワーク経路に沿って利用可能な容量。この段階で使用されるメカニズムは、CWNDおよび輻輳に適切な反応のために安全な値を決定しようとします。"
    },
    {
      "indent": 3,
      "text": "Note: A threshold is needed to determine whether a sender is in the validated or non-validated phase. A standard TCP sender in slow-start is permitted to double its FlightSize from one RTT to the next. This motivated the choice of a threshold value of 1/2. This threshold ensures a sender does not further increase the cwnd as long as the FlightSize is less than (1/2*cwnd). Furthermore, a sender with a FlightSize less than (1/2*cwnd) may, in the next RTT, be permitted by the cwnd to send at a rate that more than doubles the FlightSize; hence, this case needs to be regarded as non-validated, and a sender therefore needs to employ additional mechanisms while in this phase.",
      "ja": "注：閾値は、送信者が検証または非検証フェーズにあるかどうかを決定するために必要とされます。スロースタートで、標準TCPの送信者は1 RTTから次へとそのFlightSizeを倍増することが許可されています。これは1/2のしきい値の選択を動機。このしきい値は、送信者がさらに限りFlightSizeは、（1/2 * CWND）未満であるようにcwndを増加させない保証します。さらに、（CWND / 2 *）未満FlightSizeと送信者は、次のRTTで、以上はFlightSizeを倍増な速度で送信するCWNDによって許可されてもよいです。したがって、この場合には、非検証として見なされる必要があり、送信者は、したがって、この段階にある間に、追加の機構を採用する必要があります。"
    },
    {
      "indent": 0,
      "text": "4.4. TCP Congestion Control during the Non-validated Phase",
      "section_title": true,
      "ja": "4.4。非検証フェーズ中にTCPの輻輳制御"
    },
    {
      "indent": 3,
      "text": "A TCP sender implementing this specification MUST enter the non-validated phase when the pipeACK is less than (1/2)*cwnd. (The note at the end of Section 4.4.1 describes why pipeACK<=(1/2)*cwnd is expected to be a safe value.)",
      "ja": "pipeACKは（1/2）*のcwndよりも小さいときにこの仕様を実装するTCPの送信者は未検証フェーズを入力する必要があります。 （pipeACK <=（1/2）* CWNDを安全な値であることが予想される理由4.4.1の最後のノートでは説明しています。）"
    },
    {
      "indent": 3,
      "text": "A TCP sender that enters the non-validated phase preserves the cwnd (i.e., the cwnd only increases after a sender fully uses the cwnd in this phase; otherwise, the cwnd neither grows nor reduces). The phase is concluded when the sender transmits sufficient data so that pipeACK > (1/2)*cwnd (i.e., the sender is no longer rate-limited) or when the sender receives an indication of congestion.",
      "ja": "非検証フェーズはCWNDを維持入るTCP送信者は、（送信者が完全にこの段階でCWNDを使用した後、すなわち、CWNDだけ増加し、そうでなければ、CWNDが成長することも、減少もありません）。 pipeACK>（1/2）* CWNDとき、または送信者が、輻輳の指示を受信する（すなわち、送信者がもはや速度制限されない）ように送信者が十分なデータを送信する際に位相が終了します。"
    },
    {
      "indent": 3,
      "text": "After a fixed period of time (the non-validated period (NVP)), the sender adjusts the cwnd (Section 4.4.3). The NVP SHOULD NOT exceed five minutes. Section 5 discusses the rationale for choosing a safe value for this period.",
      "ja": "一定期間（未検証期間（NVP））した後、送信側はCWND（4.4.3）を調整します。 NVPは、5分を超えてはなりません。第5節では、この期間のために安全な値を選択するための理論的根拠を説明します。"
    },
    {
      "indent": 3,
      "text": "The behaviour in the non-validated phase is specified as:",
      "ja": "未検証フェーズでの動作は次のように指定されています。"
    },
    {
      "indent": 3,
      "text": "o A sender determines whether to increase the cwnd based upon whether it is cwnd-limited (see Section 4.5.3):",
      "ja": "送信者O（セクション4.5.3を参照）、CWND制限であるか否かに基づいて、CWNDが増加するか否かを判断します。"
    },
    {
      "indent": 6,
      "text": "* A sender that is cwnd-limited MAY use the standard TCP method to increase cwnd (i.e., the standard method permits a TCP sender that fully utilises the cwnd to increase the cwnd each time it receives an ACK).",
      "ja": "* CWNDを増加させるために、標準的なTCP方式を使用するかもしれcwndを制限され、送信者は、（すなわち、標準的な方法は、完全にCWNDがACKを受信するたびに増加するCWNDを利用TCPセンダを可能にします）。"
    },
    {
      "indent": 6,
      "text": "* A sender that is not cwnd-limited MUST NOT increase the cwnd when ACK packets are received in this phase (i.e., needs to avoid growing the cwnd when it has not recently sent using the current size of cwnd).",
      "ja": "* ACKパケットが、この段階で受信されたcwndを増加させてはならないcwndを、限定されるものではなく、送信者が（すなわち、それは最近のcwndの現在のサイズを使用して送信していないのcwndの成長を回避する必要があります）。"
    },
    {
      "indent": 3,
      "text": "o If the sender receives an indication of congestion while in the non-validated phase (i.e., detects loss), the sender MUST exit the non-validated phase (reducing the cwnd as defined in Section 4.4.1).",
      "ja": "非検証フェーズで（すなわち、損失を検出）しながら、送信側は、輻輳の指示を受信した場合（セクション4.4.1で定義されるようにCWNDを減少させる）O、送信者は、非検証フェーズを終了する必要があります。"
    },
    {
      "indent": 3,
      "text": "o If the Retransmission Timeout (RTO) expires while in the non-validated phase, the sender MUST exit the non-validated phase. It then resumes using the standard TCP RTO mechanism [RFC5681].",
      "ja": "非検証フェーズでは、送信者が非検証フェーズを終了する必要がありながら、O再送タイムアウト（RTO）が満了した場合。その後は、通常のTCP RTOメカニズム[RFC5681]を使用して再開します。"
    },
    {
      "indent": 3,
      "text": "o A sender with a pipeACK variable greater than (1/2)*cwnd SHOULD enter the validated phase. (A rate-limited sender will not normally be impacted by whether it is in a validated or non-validated phase, since it will normally not increase FlightSize to use the entire cwnd. However, a change to the validated phase will release the sender from constraints on the growth of cwnd and result in using the standard congestion response.)",
      "ja": "Oより大きいpipeACK変数と送信者が（1/2）* CWNDは検証フェーズを入力する必要があります。 （レート制限された送信者は、通常、それが正常に全体CWNDを使用するFlightSizeを増加しないので、それは、検証または非検証フェーズにあるかどうかによって影響されないであろう。しかし、検証相への変化から送信者を解放します標準の混雑応答を使用してのcwndと結果の成長の制約。）"
    },
    {
      "indent": 3,
      "text": "The cwnd-limited behaviour may be triggered during a transient condition that occurs when a sender is in the non-validated phase and receives an ACK that acknowledges received data, the cwnd was fully utilised, and more data is awaiting transmission than may be sent with the current cwnd. The sender MAY then use the standard method to increase the cwnd. (Note that if the sender succeeds in sending these new segments, the updated cwnd and pipeACK variables will eventually result in a transition to the validated phase.)",
      "ja": "CWND制限挙動はCWNDが十分に利用し、送信者が非検証フェーズであり、受信したデータを肯定応答ACKを受信したときに発生する過渡状態の間にトリガすることができ、より多くのデータを用いて送信することができるよりも、送信を待っています現在のcwnd。送信者は、その後にcwndを増やすために、標準的な方法を使用するかもしれません。 （送信者がこれらの新しいセグメントの送信に成功した場合、更新のcwndとpipeACK変数は、最終的に検証フェーズへの移行となることに注意して下さい。）"
    },
    {
      "indent": 0,
      "text": "4.4.1. Response to Congestion in the Non-validated Phase",
      "section_title": true,
      "ja": "4.4.1。非検証フェーズにおける輻輳への対応"
    },
    {
      "indent": 3,
      "text": "Reception of congestion feedback while in the non-validated phase is interpreted as an indication that it was inappropriate for the sender to use the preserved cwnd. The sender is therefore required to quickly reduce the rate to avoid further congestion. Since the cwnd does not have a validated value, a new cwnd value needs to be selected based on the utilised rate.",
      "ja": "輻輳フィードバックの受信は、非検証フェーズは、送信者が保存CWNDを使用することは不適切であったことを示すものとして解釈されるにしています。送信者は、したがって、迅速さらに混雑を避けるためにレートを低減することが要求されます。 CWNDが検証値を持っていないので、新しいcwndの値は、利用率に基づいて選択する必要があります。"
    },
    {
      "indent": 3,
      "text": "A sender that detects a packet drop MUST record the current FlightSize in the variable LossFlightSize and MUST calculate a safe cwnd for loss recovery using the method below:",
      "ja": "パケットドロップを検出し、送信者は、変数LossFlightSizeで現在FlightSizeを記録しなければなりませんし、以下の方法を使用して損失回復のために安全にcwndを計算する必要があります："
    },
    {
      "indent": 11,
      "text": "cwnd = (Max(pipeACK,LossFlightSize))/2.",
      "ja": "CWND =（MAX（pipeACK、LossFlightSize））/ 2。"
    },
    {
      "indent": 3,
      "text": "The pipeACK value is not updated during loss recovery (see Section 4.2). If there is a valid pipeACK value, the new cwnd is adjusted to reflect that a non-validated cwnd may be larger than the actual FlightSize or recently used FlightSize (recorded in pipeACK). The updated cwnd therefore prevents overshoot by a sender, significantly increasing its transmission rate during the recovery period.",
      "ja": "pipeACK値は損失回復の間に更新されていない（4.2節を参照してください）。有効pipeACK値がある場合、新しいCWNDは、非検証CWNDが実際FlightSizeよりも大きくてもよいことを反映するように調整または最近（pipeACKに記録）FlightSize使用されます。更新のcwndは、したがって、大幅に回復期間中にその伝送速度を高め、送信者によってオーバーシュートを防止します。"
    },
    {
      "indent": 3,
      "text": "At the end of the recovery phase, the TCP sender MUST reset the cwnd using the method below:",
      "ja": "回復期の終わりには、TCPの送信者は、以下の方法を使用してのcwndをリセットする必要があります。"
    },
    {
      "indent": 11,
      "text": "cwnd = (Max(pipeACK,LossFlightSize) - R)/2.",
      "ja": "CWND =（MAX（pipeACK、LossFlightSize） -  R）/ 2。"
    },
    {
      "indent": 3,
      "text": "Where R is the volume of data that was successfully retransmitted during the recovery phase. This corresponds to segments retransmitted and considered lost by the pipe estimation algorithm at the end of recovery. It does not include the additional cost of multiple retransmission of the same data. The loss of segments indicates that the path capacity was exceeded by at least R; hence, the calculated cwnd is reduced by at least R before the window is halved.",
      "ja": "Rが正常に回復期中に再送されたデータの量です。これは、再送信と回復の最後に、パイプ推定アルゴリズムによって失われたと考えられたセグメントに対応しています。これは、同じデータの複数の再送信の追加費用は含まれていません。セグメントの損失は、パス容量が少なくともRを超えたことを示します。ウィンドウが半分になる前に、したがって、計算CWNDは、少なくともRによって低減されます。"
    },
    {
      "indent": 3,
      "text": "The calculated cwnd value MUST NOT be reduced below 1 TCP Maximum Segment Size (MSS).",
      "ja": "計算されたcwndの値が1つのTCP最大セグメントサイズ（MSS）以下に減少してはなりません。"
    },
    {
      "indent": 3,
      "text": "After completing the loss recovery phase, the sender MUST re-initialise the pipeACK variable to the \"undefined\" value. This ensures that standard TCP methods are used immediately after completing loss recovery until a new pipeACK value can be determined.",
      "ja": "損失回復フェーズを完了した後、送信者が「未定義」の値にpipeACK変数を再初期化しなければなりません。これは、標準のTCPメソッドは、新しいpipeACK値が決定されるまでの損失の回復を完了した直後に使用されることが保証されます。"
    },
    {
      "indent": 3,
      "text": "The ssthresh is adjusted using the standard TCP method (Step 6 in Section 3.2 of RFC 5681 assigns the ssthresh a value equal to cwnd at the end of the loss recovery).",
      "ja": "SSTHRESHは（RFC 5681のセクション3.2でステップ6 SSTHRESHに損失回復の終わりにcwndを等しい値を割り当てる）は、標準的なTCP方式を使用して調整されます。"
    },
    {
      "indent": 3,
      "text": "Note: The adjustment by reducing cwnd by the volume of data not sent (R) follows the method proposed for Jump Start [Liu07]. The inclusion of the term R makes the adjustment more conservative than standard TCP. This is required, since a sender in the non-validated phase is allowed a rate higher than a standard TCP sender would have achieved in the last RTT (i.e., to have more than doubled the number of segments in flight relative to what was sent in the previous RTT). The additional reduction after congestion is beneficial when the LossFlightSize has significantly overshot the available path capacity, incurring significant loss (e.g., following a change of path characteristics or when additional traffic has taken a larger share of the network bottleneck during a period when the sender transmits less).",
      "ja": "注：（R）送信されていないデータの量によってCWNDを減少させることにより調整がジャンプスタート[Liu07]が提案された方法に従います。用語Rの包含は、標準的なTCPより保守的な調整を行います。未検証フェーズでの送信者が最後のRTT（に達成しているでしょう標準のTCP送信者よりも割合が高い許可されているので、これは、必要とされる、すなわち、で送信されたものと飛行に相対セグメントの数を倍以上を持っています前のRTT）。 LossFlightSizeが有意に（例えば、パス特性の変化または次の追加トラフィック期間中、ネットワークのボトルネックの大きなシェアを取ったときに、送信者が送信を重大な損失を被る、利用可能なパスの容量をオーバーシュートしたときに渋滞した後、追加の減少は有益ですもっと少なく）。"
    },
    {
      "indent": 3,
      "text": "Note: The pipeACK value is only valid during a non-validated phase; therefore, this does not exceed cwnd/2. If LossFlightSize and R were small, then this can result in the final cwnd after loss recovery being at most one-quarter of the cwnd on detection of congestion. This reduction is conservative, and pipeACK is then reset to undefined; hence, cwnd updates after a congestion event do not depend upon the pipeACK history before congestion was detected.",
      "ja": "注意：pipeACK値は未検証フェーズでのみ有効です。そのため、これはCWND / 2を超えません。 LossFlightSizeとRが小さかった場合、これは損失の回復が輻輳の検出についてのcwndのほとんどの四分の一にされた後、最終的にcwndをもたらす可能性があります。この減少は保守的であり、そしてpipeACKは、次いで未定義にリセットされます。輻輳が検出される前に、したがって、輻輳イベントの後にcwndの更新はpipeACK履歴に依存しません。"
    },
    {
      "indent": 0,
      "text": "4.4.2. Sender Burst Control during the Non-validated Phase",
      "section_title": true,
      "ja": "4.4.2。非検証フェーズ中に送信者のバースト制御"
    },
    {
      "indent": 3,
      "text": "TCP congestion control allows a sender to accumulate a cwnd that would allow it to send a burst of segments with a total size up to the difference between the FlightSize and cwnd. Such bursts can impact other flows that share a network bottleneck and/or may induce congestion when buffering is limited.",
      "ja": "TCP輻輳制御は、送信側は、それがFlightSizeとCWNDとの間の差の合計サイズを上にしてセグメントのバーストを送信することを可能にするCWNDを蓄積することを可能にします。そのようなバーストは、ネットワークのボトルネックを共有する他のフローに影響を与える可能性があり、および/またはバッファリングが限られている場合、輻輳を誘発することができます。"
    },
    {
      "indent": 3,
      "text": "Various methods have been proposed to control the sender burstiness [Hug01] [All05]. For example, TCP can limit the number of new segments it sends per received ACK. This is effective when a flow of ACKs is received but cannot be used to control a sender that has not sent appreciable data in the previous RTT [All05].",
      "ja": "種々の方法は、送信者のバースト[Hug01] [All05]を制御するために提案されています。たとえば、TCPは、受信ACKごとに送信する新しいセグメントの数を制限できます。 ACKのフローが受信されるが、前のRTT [All05]でかなりのデータを送信していない送信者を制御するために使用することができない場合に有効です。"
    },
    {
      "indent": 3,
      "text": "This document recommends using a method to avoid line-rate bursts after an idle or rate-limited interval when there is less reliable information about the capacity of the network path. A TCP sender in the non-validated phase SHOULD control the maximum burst size, e.g., using a rate-based pacing algorithm in which a sender paces out the cwnd over its estimate of the RTT, or some other method, to prevent many segments being transmitted contiguously at line-rate. The most appropriate method(s) to implement pacing depend on the design of the TCP/IP stack, speed of interface, and whether hardware support (such as TSO) is used. This document does not recommend any specific method.",
      "ja": "この文書では、ネットワーク経路の容量に関する信頼性の低い情報がある場合、アイドルまたは速度制限区間の後にラインレートのバーストを回避する方法を使用することをお勧めします。非検証フェーズは、送信者がある多くのセグメントを防止するために、そのRTTの推定値、またはいくつかの他の方法よりもCWNDをペーシングするレートベースのペーシング・アルゴリズムを使用して、例えば、最大バーストサイズを制御すべきでTCPセンダラインレートで連続的に送信されます。ペーシングを実装するための最も適切な方法（複数可）は、TCP / IPスタックの設計、インタフェースの速度、及び（例えばTSOなど）ハードウェアサポートを使用するかどうかに依存します。このドキュメントは、任意の特定の方法を推奨していません。"
    },
    {
      "indent": 0,
      "text": "4.4.3. Adjustment at the End of the Non-validated Period (NVP)",
      "section_title": true,
      "ja": "4.4.3。非検証期間の終了（NVP）で調整"
    },
    {
      "indent": 3,
      "text": "An application that remains in the non-validated phase for a period greater than the NVP is required to adjust its congestion control state. If the sender exits the non-validated phase after this period, it MUST update the ssthresh:",
      "ja": "NVPを超える期間のための非検証相のままであるアプリケーションは、その輻輳制御状態を調整する必要があります。送信者がこの期間の後に未検証フェーズを終了した場合、それはSSTHRESHを更新する必要があります。"
    },
    {
      "indent": 9,
      "text": "ssthresh = max(ssthresh, 3*cwnd/4).",
      "ja": "SSTHRESH = MAX（SSTHRESH、3×CWND / 4）。"
    },
    {
      "indent": 3,
      "text": "(This adjustment of ssthresh ensures that the sender records that it has safely sustained the present rate. The change is beneficial to rate-limited flows that encounter occasional congestion and could otherwise suffer an unwanted additional delay in recovering the sending rate.)",
      "ja": "（SSTHRESHのこの調整は、それが安全に現在のレートを維持した送信者のレコードが。変更は時折渋滞が発生し、そうでない場合は、送信率の回復に不必要な追加の遅延を被る可能性があり、レート制限の流れに有益であることを保証します。）"
    },
    {
      "indent": 3,
      "text": "The sender MUST then update cwnd to be not greater than:",
      "ja": "送信者は、その後、より大きくないことにcwndを更新する必要があります。"
    },
    {
      "indent": 12,
      "text": "cwnd = max((1/2)*cwnd, IW).",
      "ja": "CWND = MAX（（1/2）* CWND、IW）。"
    },
    {
      "indent": 3,
      "text": "Where IW is the appropriate TCP initial window used by the TCP sender (see, e.g., [RFC5681]).",
      "ja": "ここで、IWは、TCP送信者によって使用される適切なTCP初期ウィンドウである（参照、例えば、[RFC5681]）。"
    },
    {
      "indent": 3,
      "text": "Note: These cwnd and ssthresh adjustments cause the sender to enter slow-start (since ssthresh > cwnd). This adjustment ensures that the sender responds conservatively after remaining in the non-validated phase for more than the non-validated period. In this case, it reduces the cwnd by a factor of two from the preserved value. This adjustment is helpful when flows accumulate but do not use a large cwnd; this adjustment seeks to mitigate the impact when these flows later resume transmission. This could, for instance, mitigate the impact if multiple high-rate application flows were to become idle over an extended period of time and then were simultaneously awakened by an external event.",
      "ja": "注：これらのcwndとSSTHRESH調整が送信者が（SSTHRESH>のcwndので）スロースタートに入らせます。この調整は、送信者が保守的に未検証の期間以上未検証の段階で残りの後に応答することを保証します。この場合には、保存値から2倍CWNDを減少させます。流れが蓄積したが、大のcwndを使用しない場合は、この調整は便利です。この調整は、これらのフローは、後に送信を再開する際の衝撃を緩和することを目指しています。複数の高レートのアプリケーションフローが長時間にわたってアイドル状態になるようにし、次いで、同時に外部のイベントによって起こされた場合、これは、例えば、衝撃を緩和することができました。"
    },
    {
      "indent": 0,
      "text": "4.5. Examples of Implementation",
      "section_title": true,
      "ja": "4.5。実装の例"
    },
    {
      "indent": 3,
      "text": "This section provides informative examples of implementation methods. Implementations may choose to use other methods that comply with the normative requirements.",
      "ja": "このセクションでは、実装方法の参考例を提供します。実装は規範的要件に準拠して他の方法を使用することもできます。"
    },
    {
      "indent": 0,
      "text": "4.5.1. Implementing the pipeACK Measurement",
      "section_title": true,
      "ja": "4.5.1。 pipeACK測定を実装"
    },
    {
      "indent": 3,
      "text": "A pipeACK sample may be measured once each RTT. This reduces the sender processing burden for calculating after each acknowledgment and also reduces storage requirements at the sender.",
      "ja": "pipeACKサンプルは各RTT回測定することができます。これは、各承認後に計算するための送信元の処理負担を軽減し、また、送信側のストレージ要件を低減します。"
    },
    {
      "indent": 3,
      "text": "Since application behaviour can be bursty using CWV, it may be desirable to implement a maximum filter to accumulate the measured values so that the pipeACK variable records the largest pipeACK sample within the pipeACK Sampling Period. One simple way to implement this is to divide the pipeACK Sampling Period into several (e.g., five) equal-length measurement periods. The sender then records the start time for each measurement period and the highest measured pipeACK sample. At the end of the measurement period, any measurement(s) that is older than the pipeACK Sampling Period is discarded. The pipeACK variable is then assigned the largest of the set of the highest measured values.",
      "ja": "アプリケーションの動作がCWVを使用してバーストすることができるので、pipeACK変数pipeACKサンプリング期間内の最大pipeACKサンプルを記録するように測定値を蓄積する最大フィルタを実装することが望ましい場合があります。これを実現する一つの簡単な方法は、いくつかの（例えば、5）に等しい長さの測定期間中にpipeACKサンプリング周期を分割することです。送信者は、各測定期間の開始時間と最高の測定pipeACKサンプルを記録します。測定期間の終了時に、任意の測定（S）pipeACKサンプリング周期が破棄されるより古いです。 pipeACK変数は、最も高い測定値の集合の最大割り当てられています。"
    },
    {
      "indent": 3,
      "text": "pipeACK sample (Bytes)\n^\n|   +----------+----------+           +----------+---......\n|   | Sample A | Sample B | No        | Sample C | Sample D\n|   |          |          | Sample    |          |\n|   | |\\ 5     |          |           |          |\n|   | | |      |          |           |  /\\ 4    |\n|   | | |      |  |\\ 3    |           |  | \\     |\n|   | | \\      | |  \\---  |           |  /  \\    |   /| 2\n|   |/   \\------|       - |           | /    \\------/ \\...\n+//-+----------+---------\\+----/ /----+/---------+-------------> Time",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<------------------------------------------------|\n                    Sampling Period          Current Time",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 1: Example of Measuring pipeACK Samples",
      "ja": "図1：pipeACKサンプルの測定例"
    },
    {
      "indent": 3,
      "text": "Figure 1 shows an example of how measurement samples may be collected. At the time represented by the figure, new samples are being accumulated into sample D. Three previous samples also fall within the pipeACK Sampling Period: A, B, and C. There was also a period of inactivity between samples B and C during which no measurements were taken (because no new data segments were acknowledged). The current value of the pipeACK variable will be 5, the maximum across all samples. During this period, the pipeACK samples may be regarded as zero and hence do not contribute to the calculated pipeACK value.",
      "ja": "図1は、測定サンプルを収集することができる方法の一例を示しています。新しいサンプルは、前の3つのサンプルはまたpipeACKサンプリング周期内に入るサンプルD.に蓄積されている、図で示される時点で：A、B、およびCのない時、サンプルBとCの間に非アクティブ期間もありました（新しいデータセグメントが認められなかったので）測定を行いました。 pipeACK変数の現在の値は、全てのサンプルを横切って最大5あろう。この期間中、pipeACKサンプルをゼロとみなすことができ、したがって、算出pipeACK値に寄与しません。"
    },
    {
      "indent": 3,
      "text": "After one further measurement period, Sample A will be discarded, since it then is older than the pipeACK Sampling Period, and the pipeACK variable will be recalculated. Its value will be the larger of Sample C or the final value accumulated in Sample D.",
      "ja": "一つの更なる測定期間の後、サンプルAは、それが次いでpipeACKサンプリング期間よりも古いため、破棄され、pipeACK変数が再計算されます。その値は、サンプルC又はサンプルDに蓄積された最終値の大きくなります"
    },
    {
      "indent": 0,
      "text": "4.5.2. Measurement of the NVP and pipeACK Samples",
      "section_title": true,
      "ja": "4.5.2。 NVPとpipeACK試料の測定"
    },
    {
      "indent": 3,
      "text": "The mechanism requires a number of measurements of time. These measurements could be implemented using protocol timers but do not necessarily require a new timer to be implemented. Avoiding the use of dedicated timers can save operating system resources, especially when there may be large numbers of TCP flows.",
      "ja": "機構は、時間の測定回数が必要となります。これらの測定は、プロトコルタイマーを使用して実施することもできるが、必ずしも実施される新しいタイマーを必要としません。専用のタイマーの使用を回避することは、TCPフローの多数があるかもしれない場合は特に、オペレーティングシステムのリソースを節約することができます。"
    },
    {
      "indent": 3,
      "text": "The NVP could be measured by recording a timestamp when the sender enters the non-validated phase. Each time a sender transmits a new segment, this timestamp can be used to determine if the NVP has expired. If the measured period exceeds the NVP, the sender can then take into account how many units of the NVP have passed and make one reduction (defined in Section 4.4.3) for each NVP.",
      "ja": "NVPは、送信者が未検証の段階に入ったときにタイムスタンプを記録することにより測定することができました。送信者が新しいセグメントを送信するたびに、このタイムスタンプは、NVPの有効期限が切れているかどうかを決定するために使用することができます。測定期間はNVPを超えた場合、送信者はその後、NVPの多くのユニットが経過しているかを考慮に入れると、1人の削減を行うことができ、各NVPについて（4.4.3項で定義されています）。"
    },
    {
      "indent": 3,
      "text": "Similarly, the time measurements for collecting pipeACK samples and determining the pipeACK Sampling Period could be derived by using a timestamp to record when each sample was measured and using this to calculate how much time has passed when each new ACK is received.",
      "ja": "同様に、pipeACKサンプルを採取し、pipeACKサンプリング周期を決定するための時間測定は、各試料を測定したときに記録するタイムスタンプを使用し、それぞれの新しいACKが受信されたときに経過した時間を計算するためにこれを使用することによって導出することができます。"
    },
    {
      "indent": 0,
      "text": "4.5.3. Implementing Detection of the cwnd-Limited Condition",
      "section_title": true,
      "ja": "4.5.3。 cwndは-リミテッド状態の検出を実装します"
    },
    {
      "indent": 3,
      "text": "A sender needs to implement a method that detects the cwnd-limited condition (see Section 4.4). This detects a condition where a sender in the non-validated phase receives an ACK, but the size of cwnd prevents sending more new data.",
      "ja": "送信者はcwndの限定条件を（4.4節を参照）を検出する方法を実装する必要があります。これは、非検証フェーズでの送信者がACKを受信状態を検出したが、CWNDのサイズは、より新しいデータを送信することを防ぎます。"
    },
    {
      "indent": 3,
      "text": "In simple terms, this condition is true only when the FlightSize of a TCP sender is equal to or larger than the current cwnd. However, an implementation also needs to consider constraints on the way in which the cwnd variable can be used; for instance, implementations need to support other TCP methods such as the Nagle Algorithm and TCP Segment Offload (TSO) that also use cwnd to control transmission. These other methods can result in a sender becoming cwnd-limited when the cwnd is nearly, rather than completely, equal to the FlightSize.",
      "ja": "簡単に言えば、この条件は、TCP送信者のFlightSizeに等しいか、現在のcwndよりも大きい場合にのみ、真です。しかし、実装はcwnd変数を使用することができる方法に制約を考慮する必要があります。例えば、実装は、送信を制御するためにCWNDを使用するそのようなNagleアルゴリズムとTCPセグメントオフロード（TSO）などの他のTCP方式をサポートする必要があります。これらの他の方法は、CWNDは、むしろ完全に比べて、ほぼFlightSizeに等しい場合CWND限定なって送信者をもたらすことができます。"
    },
    {
      "indent": 0,
      "text": "5. Determining a Safe Period to Preserve cwnd",
      "section_title": true,
      "ja": "5.にcwndを維持するために安全期間の決定"
    },
    {
      "indent": 3,
      "text": "This section documents the rationale for selecting the maximum period that cwnd may be preserved, known as the NVP.",
      "ja": "このセクションでは、保存NVPとして知られてcwndを最大期間を選択するための理論的根拠を説明します。"
    },
    {
      "indent": 3,
      "text": "Limiting the period that cwnd may be preserved avoids undesirable side effects that would result if the cwnd were to be kept unnecessarily high for an arbitrarily long period, which was a part of the problem that CWV originally attempted to address. The period a sender may safely preserve the cwnd is a function of the period that a network path is expected to sustain the capacity reflected by cwnd. There is no ideal choice for this time.",
      "ja": "保存することができるcwndを期間を制限することにcwndがCWVがもともと対処しようとした問題の一部であった任意の長さの期間、のために高い不必要に保持されるようにした場合に生じる望ましくない副作用を回避します。送信者が安全にCWNDを維持できる期間は、ネットワークパスがCWNDによって反射能力を維持することが期待される期間の関数です。この時には理想的な選択肢はありません。"
    },
    {
      "indent": 3,
      "text": "A period of five minutes was chosen for this NVP. This is a compromise that was larger than the idle intervals of common applications but not sufficiently larger than the period for which the capacity of an Internet path may commonly be regarded as stable. The capacity of wired networks is usually relatively stable for periods of several minutes, and that load stability increases with the capacity. This suggests that cwnd may be preserved for at least a few minutes.",
      "ja": "5分の期間は、このNVPのために選ばれました。これは、インターネットパスの容量は、一般的に安定であるとみなすことができる期間よりも十分に大きい一般的なアプリケーションのアイドル間隔より大きくなかった妥協です。有線ネットワークの容量は、通常、数分の期間、比較的安定であり、その負荷安定容量と共に増加します。これは、CWNDは、少なくとも数分間保存され得ることを示唆しています。"
    },
    {
      "indent": 3,
      "text": "There are cases where the TCP throughput exhibits significant variability over a time less than five minutes. Examples could include wireless topologies, where TCP rate variations may fluctuate on the order of a few seconds as a consequence of medium access protocol instabilities. Mobility changes may also impact TCP performance over short time scales. Senders that observe such rapid changes in the path characteristic may also experience increased congestion with the new method; however, such variation would likely also impact TCP's behaviour when supporting interactive and bulk applications.",
      "ja": "TCPのスループットが5分未満の時間に比べて大きな変動を示す場合があります。例としては、TCP速度変動が、媒体アクセスプロトコルの不安定性の結果として数秒のオーダーで変動し得る無線トポロジを含むことができます。モビリティの変化も短い時間スケール上のTCPの性能に影響を与える可能性があります。路特性で、このような急激な変化を観察する送信者はまた、新しい方法で増加し、輻輳が発生する可能性があります。インタラクティブおよびバルクアプリケーションをサポートする場合しかし、そのような変化は、おそらくまたTCPの動作に影響を与えるでしょう。"
    },
    {
      "indent": 3,
      "text": "Routing algorithms may change the network path that is used by a transport. Although a change of path can in turn disrupt the RTT measurement and may result in a change of the capacity available to a TCP connection, we assume these path changes do not usually occur frequently (compared to a time frame of a few minutes).",
      "ja": "ルーティングアルゴリズムは、トランスポートによって使用されるネットワーク・パスを変更してもよいです。パスの変更が順番にRTTの測定を妨害することができ、TCP接続に利用可能な容量の変化をもたらすかもしれないが、我々は（数分の時間枠と比較して）これらのパスの変更は、通常は頻繁に発生しないと仮定します。"
    },
    {
      "indent": 3,
      "text": "The value of five minutes is therefore expected to be sufficient for most current applications. Simulation studies (e.g., [Bis11]) also suggest that for many practical applications, the performance using this value will not be significantly different from that observed using a non-standard method that does not reset the cwnd after idle.",
      "ja": "5分の値は、そのため、最新のアプリケーションのために十分であると期待されています。シミュレーション研究（例えば、[Bis11]）は、多くの実用的な用途のために、この値を使用して、パフォーマンスがそれとは有意に異なることはないであろうことを示唆しているアイドル状態の後のCWNDをリセットしない非標準的な方法を用いて観察しました。"
    },
    {
      "indent": 3,
      "text": "Finally, other TCP sender mechanisms have used a five-minute timer, and there could be simplifications in some implementations by reusing the same interval. TCP defines a default user timeout of five minutes [RFC793], which is how long transmitted data may remain unacknowledged before a connection is forcefully closed.",
      "ja": "最後に、他のTCP送信メカニズムは、5分タイマーを使用している、と同じ間隔を再利用することにより、いくつかの実装では単純化がある可能性があります。 TCPは、接続が強制的に閉じられる前に送信されたデータは、未確認のままである時間の長さである、[RFC793] 5分のデフォルトのユーザのタイムアウトを定義します。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "General security considerations concerning TCP congestion control are discussed in [RFC5681]. This document describes an algorithm that updates one aspect of the congestion control procedures, so the considerations described in [RFC5681] also apply to this algorithm.",
      "ja": "TCPの輻輳制御に関する一般的なセキュリティ上の考慮事項は、[RFC5681]で議論されています。この文書は、輻輳制御手順の一の態様を更新するアルゴリズムを説明するので、[RFC5681]に記載の考慮事項は、このアルゴリズムに適用されます。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7.参考"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC793] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, DOI 10.17487/RFC0793, September 1981, <http://www.rfc-editor.org/info/rfc793>.",
      "ja": "[RFC793]ポステル、J.、 \"伝送制御プロトコル\"、STD 7、RFC 793、DOI 10.17487 / RFC0793、1981年9月、<http://www.rfc-editor.org/info/rfc793>。"
    },
    {
      "indent": 3,
      "text": "[RFC2018] Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP Selective Acknowledgment Options\", RFC 2018, DOI 10.17487/RFC2018, October 1996, <http://www.rfc-editor.org/info/rfc2018>.",
      "ja": "[RFC2018]マティス、M.、Mahdavi、J.、フロイド、S.、とA. Romanow、 \"TCPの選択確認応答オプション\"、RFC 2018、DOI 10.17487 / RFC2018、1996年10月、<HTTP：//www.rfc- editor.org/info/rfc2018>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC2861] Handley, M., Padhye, J., and S. Floyd, \"TCP Congestion Window Validation\", RFC 2861, DOI 10.17487/RFC2861, June 2000, <http://www.rfc-editor.org/info/rfc2861>.",
      "ja": "[RFC2861]ハンドレー、M.、Padhye、J.、およびS.フロイド、 \"TCP輻輳ウィンドウ検証\"、RFC 2861、DOI 10.17487 / RFC2861、2000年6月、<http://www.rfc-editor.org/info / rfc2861>。"
    },
    {
      "indent": 3,
      "text": "[RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009, <http://www.rfc-editor.org/info/rfc5681>.",
      "ja": "[RFC5681]オールマン、M.、パクソン、V.、およびE.ブラントン、 \"TCP輻輳制御\"、RFC 5681、DOI 10.17487 / RFC5681、2009年9月、<http://www.rfc-editor.org/info/ rfc5681>。"
    },
    {
      "indent": 3,
      "text": "[RFC6298] Paxson, V., Allman, M., Chu, J., and M. Sargent, \"Computing TCP's Retransmission Timer\", RFC 6298, DOI 10.17487/RFC6298, June 2011, <http://www.rfc-editor.org/info/rfc6298>.",
      "ja": "[RFC6298]パクソン、V.、オールマン、M.、チュー、J.、およびM.サージェント、 \"コンピューティングTCPの再送信タイマー\"、RFC 6298、DOI 10.17487 / RFC6298、2011年6月、<のhttp：//www.rfc- editor.org/info/rfc6298>。"
    },
    {
      "indent": 3,
      "text": "[RFC6675] Blanton, E., Allman, M., Wang, L., Jarvinen, I., Kojo, M., and Y. Nishida, \"A Conservative Loss Recovery Algorithm Based on Selective Acknowledgment (SACK) for TCP\", RFC 6675, DOI 10.17487/RFC6675, August 2012, <http://www.rfc-editor.org/info/rfc6675>.",
      "ja": "[RFC6675]ブラントン、E.、オールマン、M.、王、L.、Jarvinen、I.、古城、M.、およびY.西田、 \"TCPのための選択的確認応答（SACK）に基づいて、保存的損失回復アルゴリズム\"、 RFC 6675、DOI 10.17487 / RFC6675、2012年8月、<http://www.rfc-editor.org/info/rfc6675>。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[All05] Allman, M. and E. Blanton, \"Notes on Burst Mitigation for Transport Protocols\", ACM SIGCOMM Computer Communication Review, Volume 35, Issue 2, DOI 10.1145/1064413.1064419, April 2005.",
      "ja": "[All05]オールマン、M.とE.ブラントンは、 \"トランスポートプロトコルのためのバースト軽減の注意事項\"、ACM SIGCOMMコンピュータコミュニケーションレビュー、35巻、2号、DOI 10.1145 / 1064413.1064419、2005年4月。"
    },
    {
      "indent": 3,
      "text": "[Bis08] Biswas, I. and G. Fairhurst, \"A Practical Evaluation of Congestion Window Validation Behaviour\", 9th Annual Postgraduate Symposium in the Convergence of Telecommunications, Networking and Broadcasting (PGNet), Liverpool, UK, 2008.",
      "ja": "[Bis08]ビスワス、I.およびG. Fairhurst、「輻輳ウィンドウ検証行動の実践的評価」、電気通信、ネットワーキング・放送（PGNet）、リバプール、英国、2008年の収束で第9回大学院シンポジウム。"
    },
    {
      "indent": 3,
      "text": "[Bis10] Biswas, I., Sathiaseelan, A., Secchi, R., and G. Fairhurst, \"Analysing TCP for Bursty Traffic\", Int'l J. of Communications, Network and System Sciences, DOI 10.4236/ijcns.2010.37078, July 2010.",
      "ja": "【Bis10]ビスワス、I.、Sathiaseelan、A.、Secchi、R​​.、およびG. Fairhurst、 \"バーストトラフィックを分析するTCP\"、通信、ネットワークおよびシステム科学国際J.、DOI 10.4236 / ijcns.2010.37078 、2010年7月。"
    },
    {
      "indent": 3,
      "text": "[Bis11] Biswas, I., \"Internet Congestion Control for Variable-Rate TCP Traffic\", PhD Thesis, School of Engineering, University of Aberdeen, 2011.",
      "ja": "[Bis11]ビスワス、博士論文I.、「可変レートTCPトラフィックのためのインターネットの輻輳制御」、工学部、アバディーン、2011年の大学。"
    },
    {
      "indent": 3,
      "text": "[Fai12] Sathiaseelan, A., Secchi, R., Fairhurst, G., and I. Biswas, \"Enhancing TCP Performance to support Variable-Rate Traffic\", 2nd Capacity Sharing Workshop, ACM CoNEXT, Nice, France, December 2012.",
      "ja": "[Fai12] Sathiaseelan、A.、Secchi、R​​.、Fairhurst、G.、およびI.ビスワス、ワークショップ、ACM CoNEXT、ニース、フランス、2012年12月の共有第二容量 \"可変レートトラフィックをサポートするためのTCPパフォーマンスの向上\"。"
    },
    {
      "indent": 3,
      "text": "[Hos15] Hossain, Z., \"A Study of Mechanisms to Support Variable-Rate Internet Applications over a Multi-service Satellite Platform\", PhD Thesis, School of Engineering, University of Aberdeen, January 2015.",
      "ja": "[Hos15]ホサイン、Z.、「マルチサービス衛星プラットフォーム上で可変レートのインターネットアプリケーションをサポートするためのメカニズムの研究」、博士論文、工学部、アバディーン、2015年1月の大学。"
    },
    {
      "indent": 3,
      "text": "[Hug01] Hughes, A., Touch, J., and J. Heidemann, \"Issues in TCP Slow-Start Restart After Idle\", Work in Progress, draft-hughes-restart-00, December 2001.",
      "ja": "[Hug01]ヒューズ、A.、タッチ、J.、およびJ. Heidemann、 \"TCPアイドルの後にスロースタート再起動で問題\" が進行中で働いて、ドラフト・ヒューズ再始動-00、2001年12月。"
    },
    {
      "indent": 3,
      "text": "[Liu07] Liu, D., Allman, M., Jin, S., and L. Wang, \"Congestion Control without a Startup Phase\", 5th International Workshop on Protocols for Fast Long-Distance Networks (PFLDnet), Los Angeles, California, February 2007.",
      "ja": "[Liu07]劉、D.、オールマン、M.、ジン、S.、およびL.王、「スタートアップフェーズのない輻輳制御」、高速長距離ネットワークのためのプロトコル上の第5回国際ワークショップ（PFLDnet）、ロサンゼルス、カリフォルニア、2007年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <http://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230]フィールディング、R.、エド。及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：メッセージの構文およびルーティング\"、RFC 7230、DOI 10.17487 / RFC7230、2014年6月、<http://www.rfc-editor.org/info/ rfc7230>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "This document was produced by the TCP Maintenance and Minor Extensions (tcpm) working group.",
      "ja": "このドキュメントは、TCPメンテナンスとマイナー拡張機能（tcpm）ワーキンググループによって作成されました。"
    },
    {
      "indent": 3,
      "text": "The authors acknowledge the contributions of Dr. I. Biswas and Dr. Ziaul Hossain in supporting the evaluation of CWV and for their help in developing the mechanisms proposed in this document. We also acknowledge comments received from the Internet Congestion Control Research Group, in particular Yuchung Cheng, Mirja Kuehlewind, Joe Touch, and Mark Allman. This work was partly funded by the European Community under its Seventh Framework Programme through the Reducing Internet Transport Latency (RITE) project (ICT-317700).",
      "ja": "著者はCWVの評価を支援する上で、この文書で提案されたメカニズムの開発に彼らの助けのために博士I.ビスワス博士Ziaulホサインの貢献を認めます。我々はまた、特定のYuchungチェン、Mirja Kuehlewind、ジョー・タッチ、そしてマーク・オールマンで、インターネットの輻輳制御研究グループから受け取ったコメントを認めます。この作品は、部分的に削減するインターネット交通レイテンシ（RITE）プロジェクト（ICT-317700）を介して、その第七次フレームワーク・プログラムの下で欧州共同体によって賄われていました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Godred Fairhurst University of Aberdeen School of Engineering Fraser Noble Building Aberdeen, Scotland AB24 3UE United Kingdom",
      "ja": "エンジニアリング・フレイザーノーブルビルアバディーン、スコットランドAB24 3UEイギリスのアバディーン大学のGodred Fairhurst大学"
    },
    {
      "indent": 3,
      "text": "Email: gorry@erg.abdn.ac.uk URI: http://www.erg.abdn.ac.uk",
      "ja": "メール：gorry@erg.abdn.ac.uk URI：http://www.erg.abdn.ac.uk"
    },
    {
      "indent": 3,
      "text": "Arjuna Sathiaseelan University of Aberdeen School of Engineering Fraser Noble Building Aberdeen, Scotland AB24 3UE United Kingdom",
      "ja": "エンジニアリング・フレイザーノーブルビルアバディーン、スコットランドAB24 3UEイギリスのアバディーン大学のアルジュナSathiaseelan大学"
    },
    {
      "indent": 3,
      "text": "Email: arjuna@erg.abdn.ac.uk URI: http://www.erg.abdn.ac.uk",
      "ja": "メール：arjuna@erg.abdn.ac.uk URI：http://www.erg.abdn.ac.uk"
    },
    {
      "indent": 3,
      "text": "Raffaello Secchi University of Aberdeen School of Engineering Fraser Noble Building Aberdeen, Scotland AB24 3UE United Kingdom",
      "ja": "エンジニアリング・フレイザーノーブルビルアバディーン、スコットランドAB24 3UEイギリスのアバディーン大学のラファエロSecchi大学"
    },
    {
      "indent": 3,
      "text": "Email: raffaello@erg.abdn.ac.uk URI: http://www.erg.abdn.ac.uk",
      "ja": "メール：raffaello@erg.abdn.ac.uk URI：http://www.erg.abdn.ac.uk"
    }
  ]
}