{
  "title": {
    "text": "RFC 7129 - Authenticated Denial of Existence in the DNS",
    "ja": "RFC 7129 - DNSでの存在の認証済み拒否"
  },
  "number": 7129,
  "created_at": "2019-10-28 22:08:53.795111+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                         R. Gieben\nRequest for Comments: 7129                                        Google\nCategory: Informational                                       W. Mekking\nISSN: 2070-1721                                               NLnet Labs\n                                                           February 2014",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Authenticated Denial of Existence in the DNS",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "Authenticated denial of existence allows a resolver to validate that a certain domain name does not exist. It is also used to signal that a domain name exists but does not have the specific resource record (RR) type you were asking for. When returning a negative DNS Security Extensions (DNSSEC) response, a name server usually includes up to two NSEC records. With NSEC version 3 (NSEC3), this amount is three.",
      "ja": "存在の認証された否定はリゾルバが特定のドメイン名が存在しないことを検証することができます。また、ドメイン名が存在しますが、特定のリソースレコード（RR）あなたが求めていたタイプを持っていないことを通知するために使用されます。負のDNSセキュリティ拡張機能（DNSSEC）応答を返す場合は、ネームサーバは通常2つのNSECレコードまで含まれています。 NSECバージョン3（NSEC3）では、この量は3です。"
    },
    {
      "indent": 3,
      "text": "This document provides additional background commentary and some context for the NSEC and NSEC3 mechanisms used by DNSSEC to provide authenticated denial-of-existence responses.",
      "ja": "この文書では、追加の背景の解説と認証さ拒否の存在応答を提供するために、DNSSECが使用するNSECとNSEC3のメカニズムのためのいくつかのコンテキストを提供します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "これは、独立して、他のRFCストリームの、RFCシリーズへの貢献です。 RFC Editorはその裁量でこの文書を公開することを選択し、実装や展開のためにその値についての声明を出すていません。 RFC編集者によって公表のために承認されたドキュメントは、インターネット標準の任意のレベルの候補ではありません。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7129.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7129で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2014 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2014 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n2. Denial of Existence .............................................4\n   2.1. NXDOMAIN Responses .........................................4\n   2.2. NODATA Responses ...........................................5\n3. Secure Denial of Existence ......................................6\n   3.1. NXT ........................................................7\n   3.2. NSEC .......................................................7\n   3.3. NODATA Responses ...........................................9\n   3.4. Drawbacks of NSEC .........................................10\n4. Experimental and Deprecated Mechanisms: NO, NSEC2, and DNSNR ...11\n5. NSEC3 ..........................................................12\n   5.1. Opt-Out ...................................................14\n   5.2. Loading an NSEC3 Zone .....................................15\n   5.3. Wildcards in the DNS ......................................15\n   5.4. CNAME Records .............................................18\n   5.5. The Closest Encloser NSEC3 Record .........................19\n   5.6. Three to Tango ............................................24\n6. Security Considerations ........................................25\n7. Acknowledgments ................................................25\n8. References .....................................................26\n   8.1. Normative References ......................................26\n   8.2. Informative References ....................................26\nAppendix A. Online Signing: Minimally Covering NSEC Records .......28\nAppendix B. Online Signing: NSEC3 White Lies ......................29\nAppendix C. List of Hashed Owner Names ............................29",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "DNSSEC can be somewhat of a complicated matter, and there are certain areas of the specification that are more difficult to comprehend than others. One such area is \"authenticated denial of existence\".",
      "ja": "DNSSECは、やや複雑な問題のあることができ、他の人よりも理解するのがより困難である仕様の特定の領域があります。そのような領域は、「存在の認証済み否定」です。"
    },
    {
      "indent": 3,
      "text": "Denial of existence is a mechanism that informs a resolver that a certain domain name does not exist. It is also used to signal that a domain name exists but does not have the specific RR type you were asking for.",
      "ja": "存在の否定は、特定のドメイン名が存在しないリゾルバを知らせる仕組みです。また、ドメイン名が存在しますが、あなたが求めていた特定のRRタイプを持っていないことを通知するために使用されます。"
    },
    {
      "indent": 3,
      "text": "The first is referred to as a nonexistent domain (NXDOMAIN) ([RFC2308], Section 2.1) and the latter as a NODATA ([RFC2308], Section 2.2) response. Both are also known as negative responses.",
      "ja": "第一は、NODATA（[RFC2308]、セクション2.2）応答として存在しないドメイン（NXDOMAIN）（[RFC2308]、セクション2.1）と後者と呼ばれています。どちらも否定的な反応として知られています。"
    },
    {
      "indent": 3,
      "text": "Authenticated denial of existence uses cryptography to sign the negative response. However, if there is no answer, what is it that needs to be signed? To further complicate this matter, there is the desire to pre-generate negative responses that are applicable for all queries for nonexistent names in the signed zone. See Section 3 for the details.",
      "ja": "存在の認証された否定は否定応答を署名する暗号技術を使用しています。応答がない場合は、それが署名する必要があることは何ですか？さらにこの問題を複雑にし、署名されたゾーンに存在しない名前に対するすべてのクエリに適用可能な否定応答を事前に生成することが望まれています。詳細については、第3節を参照してください。"
    },
    {
      "indent": 3,
      "text": "In this document, we will explain how authenticated denial of existence works. We begin by explaining the current technique in the DNS and work our way up to DNSSEC. We explain the first steps taken in DNSSEC and describe how NSEC and NSEC3 work. The NXT, NO, NSEC2, and DNSNR records also briefly make their appearance, as they have paved the way for NSEC and NSEC3.",
      "ja": "この文書では、我々は存在作品のどのように認証された否定を説明します。私たちは、DNSの現在の技術を説明することから始めるとDNSSECまでの私たちのように動作します。私たちは、DNSSECで撮影した最初のステップを説明し、どのようにNSECとNSEC3の作業について説明します。 NXT、NO、NSEC2、およびDNSNRレコード彼らはNSECとNSEC3のための道を開いてきたようにも簡単に、その外観を作ります。"
    },
    {
      "indent": 3,
      "text": "To complete the picture, we also need to explain DNS wildcards as these complicate matters, especially when combined with CNAME records.",
      "ja": "絵を完成させるために、我々はまた、CNAMEレコードと組み合わせる場合は特に、これらの複雑な事項として、DNSのワイルドカードを説明する必要があります。"
    },
    {
      "indent": 3,
      "text": "Note: In this document, domain names in zone file examples will have a trailing dot, but in the running text they will not. This text is written for people who have a fair understanding of DNSSEC. The following RFCs are not required reading, but they help in understanding the problem space. o [RFC5155] -- DNS Security (DNSSEC) Hashed Authenticated Denial of Existence;",
      "ja": "注：このドキュメントでは、ゾーンファイルの例のドメイン名は末尾のドットを持っていますが、実行されているテキストで彼らはしません。このテキストは、DNSSECの公正な理解を持っている人のために書かれています。次のRFCは、読書を必要とされていないが、彼らは問題空間を理解するのに役立ちます。 O [RFC5155]  -  DNSセキュリティ（DNSSEC）存在のハッシュ認証拒否。"
    },
    {
      "indent": 3,
      "text": "o [RFC4592] -- The Role of Wildcards in the Domain Name System.",
      "ja": "O [RFC4592]  - ドメインネームシステムにおけるワイルドカードの役割。"
    },
    {
      "indent": 3,
      "text": "And, these provide some general DNSSEC information.",
      "ja": "そして、これらは、いくつかの一般的なDNSSECの情報を提供します。"
    },
    {
      "indent": 3,
      "text": "o [RFC4033], [RFC4034], and [RFC4035] -- DNSSEC specifications;",
      "ja": "O [RFC4033]、[RFC4034]及び[RFC4035]  -  DNSSEC仕様。"
    },
    {
      "indent": 3,
      "text": "o [RFC4956] -- DNS Security (DNSSEC) Opt-In. This RFC has an Experimental status but is a good read.",
      "ja": "O [RFC4956]  -  DNSセキュリティ（DNSSEC）オプトイン。このRFCは実験的なステータスを持っていますが、良い読み物です。"
    },
    {
      "indent": 3,
      "text": "These three documents give some background information on the NSEC3 development.",
      "ja": "これらの3つの文書は、NSEC3の開発にいくつかの背景情報を与えます。"
    },
    {
      "indent": 3,
      "text": "o The NO record [DNSEXT];",
      "ja": "NOレコード[DNSEXT] O。"
    },
    {
      "indent": 3,
      "text": "o The NSEC2 record [DNSEXT-NSEC2];",
      "ja": "NSEC2レコードO [DNSEXT-NSEC2]。"
    },
    {
      "indent": 3,
      "text": "o The DNSNR record [DNSNR-RR].",
      "ja": "O DNSNRレコード[DNSNR-RR]。"
    },
    {
      "indent": 0,
      "text": "2. Denial of Existence",
      "section_title": true,
      "ja": "存在の2.拒否"
    },
    {
      "indent": 3,
      "text": "We start with the basics and take a look at NXDOMAIN handling in the DNS. To make it more visible, we are going to use a small DNS zone with three names (\"example.org\", \"a.example.org\", and \"d.example.org\") and four types (SOA, NS, A, and TXT). For brevity, the class is not shown (defaults to IN) and the SOA record is shortened, resulting in the following zone file:",
      "ja": "私たちは、基礎から始めて、DNSでの取り扱いNXDOMAINを見てみましょう。それをより見やすくするために、我々は3つの名前（「example.org」、「a.example.org」、および「d.example.org」）と4種類（SOA、NSで小さなDNSゾーンを使用しようとしています、 A、およびTXT）。簡潔にするために、クラスは、次のゾーンファイルをもたらす、（INデフォルト）に示されていないとSOAレコードが短縮されます。"
    },
    {
      "indent": 3,
      "text": "example.org. SOA ( ... ) example.org. NS a.example.org. a.example.org. A 192.0.2.1 TXT \"a record\" d.example.org. A 192.0.2.1 TXT \"d record\"",
      "ja": "example.org。 SOA（...）example.org。 NS a.example.org。 a.example.org。 192.0.2.1 TXT \"記録\" d.example.org。 192.0.2.1 TXT \"Dレコード\""
    },
    {
      "indent": 3,
      "text": "Figure 1: The Unsigned \"example.org\" Zone",
      "ja": "図1：符号なし「example.org」ゾーン"
    },
    {
      "indent": 0,
      "text": "2.1. NXDOMAIN Responses",
      "section_title": true,
      "ja": "2.1.  NXDOMAIN応答"
    },
    {
      "indent": 3,
      "text": "If a resolver asks the name server serving this zone for the TXT type belonging to \"a.example.org\", it sends the following question: \"a.example.org TXT\".",
      "ja": "「a.example.org TXT」：リゾルバは「a.example.org」に属するTXTタイプのため、このゾーンにサービスを提供するネームサーバを要求した場合、それは、次の質問を送信します。"
    },
    {
      "indent": 3,
      "text": "The name server looks in its zone data and generates an answer. In this case, a positive one: \"Yes, it exists and this is the data\", resulting in this reply:",
      "ja": "ネームサーバは、そのゾーンデータを調べ、答えを生成します。この場合、正1：「はい、それが存在し、これはデータである」、この応答をもたらします。"
    },
    {
      "indent": 3,
      "text": ";; status: NOERROR, id: 28203",
      "ja": ";;ステータス：NOERROR、ID：28203"
    },
    {
      "indent": 3,
      "text": ";; ANSWER SECTION: a.example.org. TXT \"a record\"",
      "ja": ";; ANSWERセクション：a.example.org。 TXT「記録」"
    },
    {
      "indent": 3,
      "text": ";; AUTHORITY SECTION: example.org. NS a.example.org.",
      "ja": ";; AUTHORITYのSECTION：example.org。 NS a.example.org。"
    },
    {
      "indent": 3,
      "text": "The \"status: NOERROR\" signals that everything is OK, and the \"id\" is an integer used to match questions and answers. In the ANSWER section, we find our answer. The AUTHORITY section holds the names of the name servers that have information concerning the \"example.org\" zone. Note that including this information is optional.",
      "ja": "「ステータス：NOERROR」すべてがOKである信号、および「idが」質問と回答を一致させるために使用される整数です。 ANSWERセクションでは、我々は我々の答えを見つけます。 AUTHORITYセクションでは、「example.org」ゾーンに関する情報を持っているネームサーバの名前を保持しています。この情報を含むことはオプションであることに注意してください。"
    },
    {
      "indent": 3,
      "text": "If a resolver asks for \"b.example.org TXT\", it gets an answer that this name does not exist:",
      "ja": "リゾルバは「b.example.org TXT」を要求する場合は、この名前が存在しないという答えを取得します。"
    },
    {
      "indent": 3,
      "text": ";; status: NXDOMAIN, id: 7042",
      "ja": ";;ステータス：NXDOMAIN、ID：7042"
    },
    {
      "indent": 3,
      "text": ";; AUTHORITY SECTION: example.org. SOA ( ... )",
      "ja": ";; AUTHORITYのSECTION：example.org。 SOA（...）"
    },
    {
      "indent": 3,
      "text": "In this case, we do not get an ANSWER section, and the status is set to NXDOMAIN. From this, the resolver concludes that \"b.example.org\" does not exist. The AUTHORITY section holds the SOA record of \"example.org\" that the resolver can use to cache the negative response.",
      "ja": "この場合、我々はANSWERセクションを得ることはありません、とステータスがNXDOMAINに設定されています。このことから、リゾルバは「b.example.org」は存在しないと結論づけています。 AUTHORITYセクションは、リゾルバが負の応答をキャッシュするために使用できる「example.org」のSOAレコードを保持しています。"
    },
    {
      "indent": 0,
      "text": "2.2. NODATA Responses",
      "section_title": true,
      "ja": "2.2.  NODATA応答"
    },
    {
      "indent": 3,
      "text": "It is important to realize that NXDOMAIN is not the only type of does-not-exist response. A name may exist, but the type you are asking for may not. This occurrence of nonexistence is called a NODATA response. Let us ask our name server for \"a.example.org AAAA\" and look at the answer:",
      "ja": "NXDOMAINが-存在しない応答の唯一のタイプではないことを認識することが重要です。名前が存在する可能性がありますが、求めているタイプではないかもしれません。不存在のこの発生はNODATA応答と呼ばれています。私たちは「a.example.orgのAAAA」のための私達のネームサーバを尋ねると、答えを見てみましょう："
    },
    {
      "indent": 3,
      "text": ";; status: NOERROR, id: 7944",
      "ja": ";;ステータス：NOERROR、ID：7944"
    },
    {
      "indent": 3,
      "text": ";; AUTHORITY SECTION: example.org. SOA ( ... )",
      "ja": ";; AUTHORITYのSECTION：example.org。 SOA（...）"
    },
    {
      "indent": 3,
      "text": "The status NOERROR shows that the \"a.example.org\" name exists, but the reply does not contain an ANSWER section. This differentiates a NODATA response from an NXDOMAIN response; the rest of the packet is very similar. The resolver has to put these pieces of information together and conclude that \"a.example.org\" exists, but it does not have a \"AAAA\" record.",
      "ja": "ステータスNOERRORは「a.example.org」名前が存在することを示しているが、返事はANSWERセクションが含まれていません。これはNXDOMAIN応答からNODATA応答を区別します。パケットの残りの部分は非常に似ています。リゾルバは、一緒にこれらの情報を入れて、「a.example.org」が存在すると結論しているが、それは「AAAA」のレコードを持っていません。"
    },
    {
      "indent": 0,
      "text": "3. Secure Denial of Existence",
      "section_title": true,
      "ja": "存在の3.セキュア拒否"
    },
    {
      "indent": 3,
      "text": "The above has to be translated to the security-aware world of DNSSEC. But, there are a few principles DNSSEC brings to the table:",
      "ja": "上記は、DNSSECのセキュリティを意識した世界に変換する必要があります。しかし、DNSSECがテーブルにもたらすいくつかの原則があります。"
    },
    {
      "indent": 3,
      "text": "1. A name server is free to compute the answer and signature(s) on the fly, but the protocol is written with a \"first sign, then load\" attitude in mind. It is rather asymmetrical, but a lot of the design in DNSSEC stems from fact that you need to accommodate authenticated denial of existence. If the DNS did not have NXDOMAIN, DNSSEC would be a lot simpler, but a lot less useful!",
      "ja": "1.ネームサーバは、心の中で態度を「そしてロード、最初の兆候」オンザフライでの回答と署名（S）を計算して自由であるが、プロトコルがで書かれています。それはかなり非対称であるが、DNSSECにおけるデザインの多くは、あなたが存在の認証済みの否定に対応する必要があるという事実に由来します。 DNSはNXDOMAINを持っていなかった場合は、DNSSECはずっと簡単、しかし、はるかに少ない有用であろう！"
    },
    {
      "indent": 3,
      "text": "2. The DNS packet header is not signed. This means that a \"status: NXDOMAIN\" cannot be trusted. In fact, the entire header may be forged, including the AD bit (AD stands for Authentic Data; see [RFC3655]), which may give some food for thought;",
      "ja": "2. DNSパケットヘッダは署名されていません。信頼することはできません。これは「NXDOMAINステータスが」ことを意味します。実際には、全体のヘッダは、ADビットを含む、偽造することができる（ADが本物のデータを表し、参照[RFC3655]）、思考のためのいくつかの食品を与えることができます。"
    },
    {
      "indent": 3,
      "text": "3. DNS wildcards and CNAME records complicate matters significantly. See more about this later in Sections 5.3 and 5.4.",
      "ja": "3. DNSのワイルドカードとCNAMEレコードはかなり問題を複雑。セクション5.3と5.4で、この後の詳細を参照してください。"
    },
    {
      "indent": 3,
      "text": "The first principle implies that all denial-of-existence answers need to be precomputed, but it is impossible to precompute (all conceivable) nonexistence answers.",
      "ja": "第一の原則は、すべて拒否の存在答えが事前に計算する必要があることを意味し、（すべての考えられる）存在しない答えを事前計算することは不可能です。"
    },
    {
      "indent": 3,
      "text": "A generic denial record that can be used in all denial-of-existence proofs is not an option: such a record is susceptible to replay attacks. When you are querying a name server for any record that actually exists, a man in the middle could replay that generic denial record that is unlimited in its scope, and it would be impossible to tell whether the response was genuine or spoofed. In other words, the generic record can be replayed to falsely deny _all_ possible responses.",
      "ja": "すべて拒否の存在証明に使用することができ、一般的な拒否レコードはオプションではありません：そのようなレコードは、リプレイ攻撃の影響を受けやすいです。あなたが実際に存在するすべてのレコードのネームサーバーを照会している場合は、真ん中の男は、その範囲で無制限であることを、一般的な拒否レコードを再生することができ、そして応答が本物か偽装されたかどうかを見分けることは不可能であろう。言い換えれば、一般的な記録は_all_可能な応答を拒否偽っするために再生することができます。"
    },
    {
      "indent": 3,
      "text": "We could also use the QNAME in the answer and sign that, essentially signing an NXDOMAIN response. While this approach could have worked technically, it is incompatible with offline signing.",
      "ja": "我々はまた、答えにQNAMEを使用して、本質的にNXDOMAIN応答に署名、その署名をことができます。このアプローチは、技術的に働いている可能性がありますが、それはオフライン署名と互換性がありません。"
    },
    {
      "indent": 3,
      "text": "The way this has been solved is by introducing a record that defines an interval between two existing names. Or, to put it another way, it defines the holes (nonexisting names) in the zone. This record can be signed beforehand and given to the resolver. Appendices A and B describe online signing techniques that are compatible with this scheme.",
      "ja": "これが解決されている方法は、既存の2つの名前の間の間隔を定義するレコードを導入することによるものです。それとも、別の言い方をすると、ゾーンの穴（存在しない名前）を定義します。このレコードは、予め署名し、レゾルバに与えることができます。付録AとBは、この方式に対応しているオンライン署名技術を記述する。"
    },
    {
      "indent": 6,
      "text": "Given all these troubles, why didn't the designers of DNSSEC go for the easy route and allow for online signing? Well, at that time (pre 2000), online signing was not feasible with the then-current hardware. Keep in mind that the larger servers get between 2000 and 6000 queries per second (qps), with peaks up to 20,000 qps or more. Scaling signature generation to these kind of levels is always a challenge. Another issue was (and is) key management. For online signing to work, _each_ authoritative name server needs access to the private key(s). This is considered a security risk. Hence, the protocol is required not to rely on on-line signing.",
      "ja": "すべてのこれらのトラブルを考えると、なぜDNSSECの設計者は、簡単にルートを行っていないと、オンライン署名が可能に？まあ、その時に（前2000年）、オンライン署名は、その後、現在のハードウェアで実現可能ではなかったです。大規模なサーバーが20,000 QPS以上までのピークで、毎秒2000と6000のクエリ（QPS）の間に取得することに注意してください。レベルのこれらの種類に署名生成をスケーリングすることは、常に挑戦です。もう一つの問題は、鍵管理だった（とされます）。オンライン署名が機能するためには、_each_権威ネームサーバは、秘密鍵（複数可）にアクセスする必要があります。これは、セキュリティ上のリスクと考えられています。したがって、プロトコルは、オンライン署名に依存しないことが要求されます。"
    },
    {
      "indent": 3,
      "text": "The road to the current solution (NSEC/NSEC3) was long. It started with the NXT (next) record. The NO (not existing) record was introduced, but it never made it into an RFC. Later on, NXT was superseded by the NSEC (next secure) record. From there, it went through NSEC2/DNSNR to finally reach NSEC3 (Next SECure version 3) in RFC 5155.",
      "ja": "現在のソリューション（NSEC / NSEC3）への道は長さでした。これは、NXT（次の）レコードで開始しました。 NO（存在しない）レコードを導入し、それはRFCにそれを作ったことはなかったです。その後、NXTはNSEC（次のセキュア）レコードに取って代わられました。そこから、それは最終的にはRFC 5155にNSEC3（次のセキュアバージョン3）に達するNSEC2 / DNSNRを通り抜けました。"
    },
    {
      "indent": 0,
      "text": "3.1. NXT",
      "section_title": true,
      "ja": "3.1.  NXT"
    },
    {
      "indent": 3,
      "text": "The first attempt to specify authenticated denial of existence was NXT ([RFC2535]). Section 5.1 of RFC 2535 introduces the record:",
      "ja": "存在の認証拒否を指定する最初の試みは、NXTであった（[RFC2535]）。 RFC 2535のセクション5.1には、レコードを紹介します。"
    },
    {
      "indent": 6,
      "text": "The NXT resource record is used to securely indicate that RRs with an owner name in a certain name interval do not exist in a zone and to indicate what RR types are present for an existing name.",
      "ja": "NXTリソースレコードは、特定の名前の間隔で所有者名の資源レコードがゾーン内に存在せず、既存の名前のために存在しているものRRタイプを示すようにすることを確実に示すために使用されます。"
    },
    {
      "indent": 3,
      "text": "By specifying what you do have, you implicitly tell what you don't have. NXT is superseded by NSEC. In the next section, we explain how NSEC (and thus NXT) works.",
      "ja": "あなたが持っていないものを指定することで、暗黙のうちに、あなたが持っていないものを教えてください。 NXTは、NSECに取って代わられます。次のセクションでは、NSEC（したがってNXT）がどのように動作するかを説明します。"
    },
    {
      "indent": 0,
      "text": "3.2. NSEC",
      "section_title": true,
      "ja": "3.2.  NSEC"
    },
    {
      "indent": 3,
      "text": "In [RFC3755], all the DNSSEC types were given new names: SIG was renamed RRSIG, KEY became DNSKEY, and NXT was renamed NSEC, and a minor issue was fixed in the process, namely the type bitmap was redefined to allow more than 127 types to be listed ([RFC2535], Section 5.2).",
      "ja": "SIGはRRSIGと改名された、KEYはDNSKEYになった、とNXTは、NSECと改名された、とマイナー問題は、プロセス中に固定された、すなわち型ビットマップが127を超えるを許可するように再定義されました：[RFC3755]では、すべてのDNSSECのタイプは、新しい名前を与えられましたリストされるタイプ（[RFC2535]、セクション5.2）。"
    },
    {
      "indent": 3,
      "text": "Just as NXT, NSEC is used to describe an interval between names: it indirectly tells a resolver which names do not exist in a zone.",
      "ja": "ただ、NXTとして、NSECは、名前の間の間隔を記述するために使用されています。それは間接的に名がゾーンに存在しないリゾルバに指示します。"
    },
    {
      "indent": 3,
      "text": "For this to work, we need our \"example.org\" zone to be sorted in canonical order ([RFC4034], Section 6.1), and then create the NSECs. We add three NSEC records, one for each name, and each one covers a certain interval. The last NSEC record points back to the first as required by RFC 4034 and depicted in Figure 2.",
      "ja": "これが機能するために、私たちは「example.org」ゾーンは、標準的な順序（[RFC4034]、6.1節）でソートされる必要があり、その後、NSECSを作成します。私たちは、3つのNSECレコード、それぞれの名前のための1つを追加し、それぞれが一定の間隔をカバーしています。最後NSECレコード点バック最初にRFC 4034によって要求されると、図2に示すように。"
    },
    {
      "indent": 3,
      "text": "1. The first NSEC covers the interval between \"example.org\" and \"a.example.org\";",
      "ja": "1.最初のNSECは「example.org」および「a.example.org」の間隔を覆います。"
    },
    {
      "indent": 3,
      "text": "2. The second NSEC covers \"a.example.org\" to \"d.example.org\";",
      "section_title": true,
      "ja": "2.第二NSECは「a.example.org」を「d.example.org」をカバーします。"
    },
    {
      "indent": 3,
      "text": "3. The third NSEC points back to \"example.org\" and covers \"d.example.org\" to \"example.org\" (i.e., the end of the zone).",
      "ja": "第3のNSEC点へ戻る「example.org」と「d.example.org」カバーに「example.org」（即ち、ゾーンの端）。"
    },
    {
      "indent": 3,
      "text": "As we have defined the intervals and put those in resource records, we now have something that can be signed.",
      "ja": "我々は間隔を定義し、リソースレコードのものを入れているように、我々は今、署名することができる何かを持っています。"
    },
    {
      "indent": 5,
      "text": "                  example.org\n                     **\n                 +-- ** <--+\n            (1) /  .    .   \\ (3)\n               /  .      .   \\\n              |  .        .  |\n              v .          . |\n              **    (2)     **\na.example.org ** ---------> ** d.example.org",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 2: The NSEC records of \"example.org\". The arrows represent NSEC records, starting from the apex.",
      "ja": "図2： \"example.org\" のNSECレコード。矢印は、頂点から始め、NSECレコードを表します。"
    },
    {
      "indent": 3,
      "text": "This signed zone is loaded into the name server. It looks like this:",
      "ja": "この署名付きゾーンは、ネームサーバにロードされます。それは次のようになります。"
    },
    {
      "indent": 3,
      "text": "example.org. SOA ( ... ) DNSKEY ( ... ) NS a.example.org. NSEC a.example.org. NS SOA RRSIG NSEC DNSKEY RRSIG(NS) ( ... ) RRSIG(SOA) ( ... ) RRSIG(NSEC) ( ... ) RRSIG(DNSKEY) ( ... ) a.example.org. A 192.0.2.1 TXT \"a record\" NSEC d.example.org. A TXT RRSIG NSEC RRSIG(A) ( ... ) RRSIG(TXT) ( ... ) RRSIG(NSEC) ( ... ) d.example.org. A 192.0.2.1 TXT \"d record\" NSEC example.org. A TXT RRSIG NSEC RRSIG(A) ( ... ) RRSIG(TXT) ( ... ) RRSIG(NSEC) ( ... )",
      "ja": "example.org。 SOA（...）DNSKEY（...）NS a.example.org。 NSECのa.example.org。 NS SOA RRSIG NSEC DNSKEY RRSIG（NS）（...）RRSIG（SOA）（...）RRSIG（NSEC）（...）RRSIG（DNSKEY）（...）a.example.org。 192.0.2.1 TXT \"記録\" NSEC d.example.org。 TXT RRSIG NSEC RRSIG（A）（...）RRSIG（TXT）（...）RRSIG（NSEC）（...）d.example.org。 192.0.2.1 TXT \"Dレコード\" NSECのexample.org。 TXT RRSIG NSEC RRSIG（A）（...）RRSIG（TXT）（...）RRSIG（NSEC）（...）"
    },
    {
      "indent": 3,
      "text": "Figure 3: The signed and sorted \"example.org\" zone with the added NSEC records (and signatures). For brevity, the class is not shown (defaults to IN) and the SOA, DNSKEY, and RRSIG records are shortened.",
      "ja": "図3：追加NSECレコード（および署名）と署名し、ソートされた「example.org」ゾーン。簡潔にするために、クラス（INデフォルト）とSOA、DNSKEYを、図示していないとRRSIGレコードが短縮されます。"
    },
    {
      "indent": 3,
      "text": "If a DNSSEC-aware resolver asks for \"b.example.org\", it gets back a \"status: NXDOMAIN\" packet, which by itself is meaningless (remember that the DNS packet header is not signed and thus can be forged). To be able to securely detect that \"b\" does not exist, there must also be a signed NSEC record that covers the name space where \"b\" lives.",
      "ja": "それ自体で意味がないパケット（DNSパケットヘッダが署名されていないので、偽造することができることに注意してください）：DNSSEC対応リゾルバが「b.example.org」を要求する場合、それは「NXDOMAINステータス」を取り戻します。しっかりと「b」は存在しないことを検出できるようにするために、また、「b」は住んでいる名前空間をカバー署名NSECレコードが存在しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The record:",
      "ja": "記録："
    },
    {
      "indent": 3,
      "text": "a.example.org. NSEC d.example.org. A TXT RRSIG NSEC",
      "ja": "a.example.org。 NSECのd.example.org。 TXT RRSIG NSEC"
    },
    {
      "indent": 3,
      "text": "does precisely that: \"b\" should come after \"a\", but the next owner name is \"d.example.org\", so \"b\" does not exist.",
      "ja": "正確というん：「B」「A」の後に来る必要がありますが、次の所有者名が「d.example.org」なので、「B」は存在しません。"
    },
    {
      "indent": 3,
      "text": "Only by making that calculation is a resolver able to conclude that the name \"b\" does not exist. If the signature of the NSEC record is valid, \"b\" is proven not to exist. We have authenticated denial of existence. A similar NSEC record needs to be included to deny wildcard expansion, see Section 5.3.",
      "ja": "それだけで計算を行うことにより、名前「b」は存在しないと結論することができリゾルバがあります。 NSECレコードの署名が有効である場合は、「B」は存在しないことが実証されています。私たちは、存在の否定を認証しています。同様のNSECレコードは、5.3節を参照して、ワイルドカードの展開を拒否するように含める必要があります。"
    },
    {
      "indent": 3,
      "text": "Note that a man in the middle may still replay this NXDOMAIN response when you're querying for, say, \"c.example.org\". But, it would not do any harm since it is provable that this is the proper response to the query.",
      "ja": "あなたは、たとえば、「c.example.org」を照会しているときに真ん中の男は、まだこのNXDOMAIN応答を再生することがあります。このクエリに対する適切な応答であることを証明可能であるため、しかし、それはどんな害をしないだろう。"
    },
    {
      "indent": 0,
      "text": "3.3. NODATA Responses",
      "section_title": true,
      "ja": "3.3.  NODATA応答"
    },
    {
      "indent": 3,
      "text": "NSEC records are also used in NODATA responses. In that case, we need to look more closely at the type bitmap. The type bitmap in an NSEC record tells which types are defined for a name. If we look at the NSEC record of \"a.example.org\", we see the following types in the bitmap: A, TXT, NSEC, and RRSIG. So, for the name \"a\", this indicates we must have an A, TXT, NSEC, and RRSIG record in the zone.",
      "ja": "NSECレコードもNODATA応答に使用されています。その場合には、我々はタイプビットマップをより詳しく調べる必要があります。 NSECレコード内のタイプビットマップは、タイプは、名前のために定義されているように指示します。 、TXT、NSECとRRSIG：私たちは「a.example.org」のNSECレコードを見れば、我々はビットマップで、次のタイプを参照してください。だから、名前「A」のために、これは我々がゾーンにA、TXT、NSECとRRSIGレコードを持っている必要がありますを示しています。"
    },
    {
      "indent": 3,
      "text": "With the type bitmap of the NSEC record, a resolver can establish that a name is there, but the type is not. For example, if a resolver asks for \"a.example.org AAAA\", the reply that comes back is:",
      "ja": "NSECレコードの種類のビットマップでは、リゾルバは名前があることを立証することができますが、タイプではありません。例えば、リゾルバは「a.example.orgのAAAA」、帰ってくるの返信を要求した場合："
    },
    {
      "indent": 3,
      "text": ";; status: NOERROR, id: 44638",
      "ja": ";;ステータス：NOERROR、ID：44638"
    },
    {
      "indent": 3,
      "text": ";; AUTHORITY SECTION: example.org. SOA ( ... ) example.org. RRSIG(SOA) ( ... ) a.example.org. NSEC d.example.org. A TXT RRSIG NSEC a.example.org. RRSIG(NSEC) ( ... )",
      "ja": ";; AUTHORITYのSECTION：example.org。 SOA（...）example.org。 RRSIG（SOA）（...）a.example.org。 NSECのd.example.org。 TXT RRSIG NSECのa.example.org。 RRSIG（NSEC）（...）"
    },
    {
      "indent": 3,
      "text": "The resolver should check the AUTHORITY section and conclude that:",
      "ja": "リゾルバはAUTHORITYセクションをチェックして、それを締結すべきです："
    },
    {
      "indent": 3,
      "text": "(1) \"a.example.org\" exists (because of the NSEC with that owner name); and",
      "ja": "（1）「a.example.org」は（そのため、所有者名を持つナノ秒）が存在します。そして"
    },
    {
      "indent": 3,
      "text": "(2) the type (AAAA) does not exist as it is not listed in the type bitmap.",
      "ja": "それは型のビットマップに記載されていない（2）タイプ（AAAA）が存在しません。"
    },
    {
      "indent": 3,
      "text": "The techniques used by NSEC form the basics of authenticated denial of existence in DNSSEC.",
      "ja": "NSECで使用される技術は、DNSSECにおける存在の認証された否定の基礎を形成します。"
    },
    {
      "indent": 0,
      "text": "3.4. Drawbacks of NSEC",
      "section_title": true,
      "ja": "3.4.  NSECの欠点"
    },
    {
      "indent": 3,
      "text": "There were two issues with NSEC (and NXT). The first is that it allows for zone walking. NSEC records point from one name to another; in our example: \"example.org\" points to \"a.example.org\", which points to \"d.example.org\", which points back to \"example.org\". So, we can reconstruct the entire \"example.org\" zone, thus defeating attempts to administratively block zone transfers ([RFC2065], Section 5.5).",
      "ja": "NSEC（およびNXT）との2つの問題がありました。最初はそれがゾーン歩行を可能にすることです。 NSECレコードは、1名から別のを指します。この例では：「example.org」のポイントに「a.example.org」、ポイントに「d.example.org」、「example.org」に戻って指しています。そこで、我々はこのように、管理ゾーン転送をブロックしようとする試みを破り、全体の「example.org」ゾーンを再構築することができます（[RFC2065]、セクション5.5）。"
    },
    {
      "indent": 3,
      "text": "The second issue is that when a large, delegation-centric ([RFC5155], Section 1.1) zone deploys DNSSEC, every name in the zone gets an NSEC plus RRSIG. So, this leads to a huge increase in the zone size (when signed). This would in turn mean that operators of such zones who are deploying DNSSEC face up-front costs. This could hinder DNSSEC adoption.",
      "ja": "第二の問題は、大規模な、委任中心（[RFC5155]は、セクション1.1）ゾーンがDNSSECを展開する場合、ゾーン内のすべての名称は、NSECプラスRRSIGを取得していることです。だから、これはゾーンサイズ（署名）の巨大な増加につながります。これによって、このようなゾーンの事業者がDNSSEC顔のアップフロントのコストを展開している人ということを意味します。これは、DNSSECの導入を妨げる可能性があります。"
    },
    {
      "indent": 3,
      "text": "These two issues eventually lead to NSEC3, which:",
      "ja": "これら2つの問題は、最終的NSEC3、につながります："
    },
    {
      "indent": 3,
      "text": "o Adds a way to garble the owner names thus thwarting zone walking;",
      "ja": "Oは、このように、ゾーンの歩行を阻止所有者名を文字化けする方法を追加します。"
    },
    {
      "indent": 3,
      "text": "o Makes it possible to skip names for the next owner name. This feature is called Opt-Out (see Section 5.1). It means not all names in your zone get an NSEC3 plus ditto signature, making it possible to \"grow into\" your DNSSEC deployment.",
      "ja": "oは次の所有者名の名前をスキップすることが可能となります。この機能は、オプトアウト（セクション5.1を参照）と呼ばれています。それはあなたのゾーンではないすべての名前は、あなたのDNSSECの展開「へと成長」することが可能となる、NSEC3プラス同上の署名を得ることを意味します。"
    },
    {
      "indent": 3,
      "text": "Note that there are other ways to mitigate zone walking. RFC 4470 [RFC4470] prevents zone walking by introducing minimally covering NSEC records. This technique is described in Appendix A.",
      "ja": "ゾーンの歩行を軽減する他の方法があることに注意してください。 RFC 4470 [RFC4470]は最小限被覆NSECレコードを導入することにより、ゾーンウォーキングを防止します。この技術は、付録Aに記載されています"
    },
    {
      "indent": 3,
      "text": "Before we delve into NSEC3, let us first take a look at its predecessors: NO, NSEC2, and DNSNR.",
      "ja": "NO、NSEC2、およびDNSNR：私たちはNSEC3掘り下げる前に、私たちはまず、前任者を見てみましょう。"
    },
    {
      "indent": 0,
      "text": "4. Experimental and Deprecated Mechanisms: NO, NSEC2, and DNSNR",
      "section_title": true,
      "ja": "4.実験および非推奨のメカニズム：NO、NSEC2、およびDNSNR"
    },
    {
      "indent": 3,
      "text": "Long before NSEC was defined, the NO record was introduced. It was the first record to use the idea of hashed owner names to fix the issue of zone walking that was present with the NXT record. It also fixed the type bitmap issue of the NXT record, but not in a space-efficient way. At that time (around 2000), zone walking was not considered important enough to warrant the new record. People were also worried that DNSSEC deployment would be hindered by developing an alternate means of denial of existence. Thus, the effort was shelved and NXT remained.",
      "ja": "NSECが定義されたロング前に、NOレコードが導入されました。 NXTレコードと存在していたゾーンの歩行の問題を解決するためにハッシュされた所有者名のアイデアを使用するには、最初のレコードでした。また、ではなく、スペース効率の高い方法で、NXTレコードの種類のビットマップの問題を修正しました。 （2000年前後）その時、ゾーンウォーキングは、新しいレコードを保証するのに十分重要であると考えられていませんでした。人々はまた、DNSSECの導入は、存在の否定の代替手段を開発することによって阻害されるだろうと心配していました。このように、努力が棚上げとNXTが残りました。"
    },
    {
      "indent": 3,
      "text": "When the new DNSSEC specification [RFC4034] was written, people were still not convinced that zone walking was a problem that should be solved. So, NSEC saw the light and inherited the two issues from NXT.",
      "ja": "新しいDNSSEC仕様[RFC4034]が書かれたとき、人々はまだ解決すべき問題だった歩いてそのゾーンを確信していませんでした。だから、NSECは光を見て、NXTからの二つの問題を継承しています。"
    },
    {
      "indent": 3,
      "text": "Several years after, NSEC2 was introduced as a way to solve the two issues of NSEC. The NSEC2 document [DNSEXT-NSEC2] contains the following paragraph:",
      "ja": "数年後、NSEC2はNSECの二つの問題を解決する方法として導入されました。 NSEC2ドキュメント[DNSEXT-NSEC2]は、次の段落が含まれています。"
    },
    {
      "indent": 6,
      "text": "This document proposes an alternate scheme which hides owner names while permitting authenticated denial of existence of non-existent names. The scheme uses two new RR types: NSEC2 and EXIST.",
      "ja": "この文書は、存在しない名前の存在の認証拒否を可能にしながら、所有者名を非表示に代替方式を提案します。 NSEC2をしてEXIST：スキームは、2つの新しいRRタイプを使用しています。"
    },
    {
      "indent": 3,
      "text": "When an authenticated denial-of-existence scheme starts to talk about EXIST records, it is worth paying extra attention. The EXIST record was defined as a record without RDATA that would be used to signal the presence of a domain name. From [DNSEXT-NSEC2]:",
      "ja": "認証された拒否の存在スキームが存在するレコードについて話し始めると、それは特別な注意を払う価値があります。 EXISTレコードは、ドメイン名の存在を知らせるために使用されるRDATAのない記録と定義しました。 [DNSEXT-NSEC2]から："
    },
    {
      "indent": 6,
      "text": "In order to prove the nonexistence of a record that might be covered by a wildcard, it is necessary to prove the existence of its closest encloser. This record does that. Its owner is the closest encloser. It has no RDATA. If there is another RR that proves the existence of the closest encloser, this SHOULD be used instead of an EXIST record.",
      "ja": "ワイルドカードでカバーされるかもしれない、レコードが存在しないことを証明するためには、その最も近いencloserの存在を証明する必要があります。このレコードは、それを行います。その所有者は最も近いencloserです。それは何のRDATAを持っていません。最も近いencloserの存在を証明他のRRがある場合、これはEXISTレコードの代わりに使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "The introduction of this record led to questions about what wildcards actually mean (especially in the context of DNSSEC). It is probably not a coincidence that \"The Role of Wildcards in the Domain Name System\" [RFC4592] was standardized before NSEC3 was.",
      "ja": "このレコードの導入は、実際に（特にDNSSECの文脈で）を意味するワイルドカード何についての質問につながりました。おそらくNSEC3だった前に、[RFC4592]「ドメインネームシステムにおけるワイルドカードの役割は、」標準化されたことが偶然ではありません。"
    },
    {
      "indent": 3,
      "text": "NSEC2 solved the zone-walking issue by hashing (with SHA1 and a salt) the \"next owner name\" in the record, thereby making it useless for zone walking. But, it did not have Opt-Out.",
      "ja": "NSEC2は、これにより、ゾーン歩行のための、それは無用なって、レコードに「次の所有者名」（SHA1と塩で）ハッシュしてゾーンを歩くの問題を解決しました。しかし、それはオプトアウトを持っていませんでした。"
    },
    {
      "indent": 3,
      "text": "The DNSNR record was another attempt that used hashed names to foil zone walking, and it also introduced the concept of opting out (called \"Authoritative Only Flag\"), which limited the use of DNSNR in delegation-centric zones.",
      "ja": "DNSNRレコードは、箔帯の歩行に名前をハッシュ化し、それはまた、代表団中心のゾーンでDNSNRの使用を制限（「権威専用フラグ」と呼ばれる）オプトアウトの概念を導入し使用する別の試みでした。"
    },
    {
      "indent": 3,
      "text": "All of these proposals didn't make it, but they did provide valuable insights. To summarize:",
      "ja": "これらの提案のすべては、それをしなかったが、彼らは貴重な洞察を提供しました。要約する："
    },
    {
      "indent": 3,
      "text": "o The NO record introduced hashing, but this idea lingered in the background for a long time;",
      "ja": "NO、レコードoをハッシング導入が、このアイデアは、長い時間のために、バックグラウンドで残っ;"
    },
    {
      "indent": 3,
      "text": "o The NSEC2 record made it clear that wildcards were not completely understood;",
      "ja": "O NSEC2レコードは、それが明確にワイルドカードを完全に理解していなかったと判断しました。"
    },
    {
      "indent": 3,
      "text": "o The DNSNR record used a new flag field in the RDATA to signal Opt-Out.",
      "ja": "O DNSNRレコードはオプトアウトを知らせるためにRDATAに新しいフラグフィールドを使用していました。"
    },
    {
      "indent": 0,
      "text": "5. NSEC3",
      "section_title": true,
      "ja": "X. Nskaa"
    },
    {
      "indent": 3,
      "text": "From the experience gained with NSEC2 and DNSNR, NSEC3 was forged. It incorporates both Opt-Out and the hashing of names. NSEC3 solves any issues people might have with NSEC, but it introduces some additional complexity.",
      "ja": "NSEC2とDNSNRで得られた経験から、NSEC3が偽造されました。それはオプトアウトと名前のハッシュ両方が組み込まれています。 NSEC3は、人々がNSECで持っている可能性のある問題を解決しますが、それはいくつかの追加の複雑さを紹介します。"
    },
    {
      "indent": 3,
      "text": "NSEC3 did not supersede NSEC; they are both defined for DNSSEC. So, DNSSEC is blessed with two different means to perform authenticated denial of existence: NSEC and NSEC3. In NSEC3, every name is hashed, including the owner name. This means that the NSEC3 chain is sorted in hash order, instead of canonical order. Because the owner names are hashed, the next owner name for \"example.org\" is unlikely to be \"a.example.org\". Because the next owner name is hashed, zone walking becomes more difficult.",
      "ja": "NSEC3は、NSECに優先しませんでした。彼らは両方のDNSSECのために定義されています。 NSECとNSEC3：だから、DNSSECは、存在の認証済みの否定を実行するために2つの異なる手段に恵まれています。 NSEC3では、すべての名前は、所有者名を含め、ハッシュされます。これはNSEC3チェーンではなく、標準的な順序で、ハッシュ順にソートされていることを意味します。所有者名がハッシュ化されているので、「example.org」の次の所有者名は「a.example.org」になることはほとんどありません。次の所有者名がハッシュされているので、ゾーンウォーキングはより困難になります。"
    },
    {
      "indent": 3,
      "text": "To make it even more difficult to retrieve the original names, the hashing can be repeated several times, each time taking the previous hash as input. To prevent the reuse of pre-generated hash values between zones, a (per-zone) salt can also be added. In the NSEC3 for \"example.org\", we have hashed the names thrice ([RFC5155], Section 5) and used the salt \"DEAD\". Let's look at a typical NSEC3 record:",
      "ja": "それがさらに困難元の名前を取得できるようにするため、ハッシュは、それぞれの時間は、入力として、前のハッシュを取って、数回繰り返すことができます。ゾーン間の事前生成されたハッシュ値の再使用を防止するために、（パーゾーン）塩を添加することもできます。 「example.org」のNSEC3では、我々は三度（[RFC5155]、セクション5）の名前をハッシュ化し、「DEAD」塩を使用していました。のは、典型的なNSEC3レコードを見てみましょう："
    },
    {
      "indent": 3,
      "text": "15bg9l6359f5ch23e34ddua6n1rihl9h.example.org. ( NSEC3 1 0 2 DEAD A6EDKB6V8VL5OL8JNQQLT74QMJ7HEB84 NS SOA RRSIG DNSKEY NSEC3PARAM )",
      "ja": "15bg9l6359f5ch23e34ddua6n1rihl9h.example.org。 （NSEC3 1 0 2 DEAD A6EDKB6V8VL5OL8JNQQLT74QMJ7HEB84 NS SOA RRSIG DNSKEY NSEC3PARAM）"
    },
    {
      "indent": 3,
      "text": "On the first line, we see the hashed owner name: \"15bg9l6359f5ch23e34ddua6n1rihl9h.example.org\"; this is the hashed name of the fully qualified domain name (FQDN) \"example.org\" encoded as Base32 [RFC4648]. Note that even though we hashed \"example.org\", the zone's name is added to make it look like a domain name again. In our zone, the basic format is \"Base32(SHA1(FQDN)).example.org\".",
      "ja": "最初の行では、我々は、ハッシュされた所有者名を参照してください。「15bg9l6359f5ch23e34ddua6n1rihl9h.example.org」。これは、Base32 [RFC4648]としてエンコード完全修飾ドメイン名（FQDN）「example.org」のハッシュ化された名前です。私たちは「example.org」をハッシュ化されていても、ゾーンの名前は、それが再びドメイン名のように見えるようにするために追加されることに注意してください。私たちのゾーンでは、基本的なフォーマットは、 \"Base32（SHA1（FQDN））。example.org\" です。"
    },
    {
      "indent": 3,
      "text": "The next hashed owner name \"A6EDKB6V8VL5OL8JNQQLT74QMJ7HEB84\" (line 2) is the hashed version of \"d.example.org\", represented as Base32. Note that \"d.example.org\" is used as the next owner name because in the hash ordering, its hash comes after the hash of the zone's apex. Also, note that \".example.org\" is not added to the next hashed owner name, as this name always falls in the current zone.",
      "ja": "次ハッシュ所有者名「A6EDKB6V8VL5OL8JNQQLT74QMJ7HEB84」（ライン2）Base32として表される、「d.example.org」のハッシュ化されたバージョンです。ハッシュの順序で、そのハッシュは、ゾーンの頂点のハッシュ後に来るので、「d.example.orgは、」次の所有者名として使用されることに注意してください。また、この名前は常に現在のゾーンに落ちるよう「.example.org」、次のハッシュされた所有者名に追加されていないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "The \"1 0 2 DEAD\" segment of the NSEC3 states:",
      "ja": "NSEC3状態の「1 0 2 DEAD」セグメント。"
    },
    {
      "indent": 3,
      "text": "o Hash Algorithm = 1 (SHA1 is the default; no other hash algorithms are currently defined for use in NSEC3; see Section 3.1.1 of [RFC5155]);",
      "ja": "Oハッシュアルゴリズム= 1（SHA1がデフォルトであり、他のハッシュアルゴリズムは、現在NSEC3における使用のために定義されていない。[RFC5155]のセクション3.1.1を参照します）。"
    },
    {
      "indent": 3,
      "text": "o Opt-Out = 0 (disabled; see Section 6 of [RFC5155]);",
      "ja": "Oオプトアウト= 0（無効、[RFC5155]のセクション6を参照）。"
    },
    {
      "indent": 3,
      "text": "o Hash Iterations = 2 (this yields three iterations, as a zero value is already one iteration; see Section 3.1.3 of [RFC5155]);",
      "ja": "Oハッシュ反復= 2（ゼロ値は、既に一回の反復であり、これは、3回の反復を生じる; [RFC5155]のセクション3.1.3を参照）。"
    },
    {
      "indent": 3,
      "text": "o Salt = \"DEAD\" (see Section 3.1.5 of [RFC5155].",
      "ja": "Oソルト= \"DEAD\" は、（[RFC5155]のセクション3.1.5を参照します。"
    },
    {
      "indent": 3,
      "text": "At the end, we see the type bitmap, which is identical to NSEC's bitmap, that lists the types present at the original owner name. Note that the type NSEC3 is absent from the list in the example above. This is due to the fact that the original owner name (\"example.org\") does not have the NSEC3 type. It only exists for the hashed name.",
      "ja": "終わりに、我々は、元の所有者名に存在するタイプをリストNSECのビットマップ、同じであるタイプのビットマップを参照してください。タイプNSEC3は、上記の例では、リストに存在しないことに留意されたいです。これは、元の所有者名（「example.org」）はNSEC3タイプを持っていないという事実によるものです。それだけでハッシュ化された名前のために存在します。"
    },
    {
      "indent": 3,
      "text": "Names like \"1.h.example.org\" hash to one label in NSEC3 and \"1.h.example.org\" becomes: \"117gercprcjgg8j04ev1ndrk8d1jt14k.example.org\" when used as an owner name. This is an important observation. By hashing the names, you lose the depth of a zone -- hashing introduces a flat space of names, as opposed to NSEC.",
      "ja": "NSEC3内の1枚のラベルに「1.h.example.org」ハッシュと「1.h.example.org」のような名前は次のようになります。所有者名として使用される「117gercprcjgg8j04ev1ndrk8d1jt14k.example.org」。これは重要な観察です。名前をハッシュすることによって、あなたは、ゾーンの深さを失う -  NSECとは対照的に、ハッシュは、名前のフラットなスペースを紹介します。"
    },
    {
      "indent": 3,
      "text": "The name used above (\"1.h.example.org\") creates an empty non-terminal. Empty non-terminals are domain names that have no RRs associated with them and exist only because they have one or more subdomains that do ([RFC5155], Section 1.3). The record:",
      "ja": "（「1.h.example.org」）上に使用される名前は、空の非末端を生成します。空の非端末は、それらに関連したRRを持っていないと、彼らは（[RFC5155]、セクション1.3）を行う一個の以上のサブドメインを持っているので、唯一存在するドメイン名です。記録："
    },
    {
      "indent": 7,
      "text": "1.h.example.org. TXT \"1.h record\"",
      "section_title": true,
      "ja": "1.h.example.org。 TXT \"1.Hレコード\""
    },
    {
      "indent": 3,
      "text": "creates two names:",
      "ja": "二つの名前を作成します。"
    },
    {
      "indent": 3,
      "text": "1. \"1.h.example.org\" that has the type: TXT;",
      "section_title": true,
      "ja": "種類がある。1.「1.h.example.org」：TXTを。"
    },
    {
      "indent": 3,
      "text": "2. \"h.example.org\", which has no types. This is the empty non-terminal.",
      "ja": "何の種類を持っていません。2.「h.example.org」、。これは、空の非端末です。"
    },
    {
      "indent": 3,
      "text": "An empty non-terminal will get an NSEC3 record but not an NSEC record. In Section 5.5, how the resolver uses these NSEC3 records to validate the denial-of-existence proofs is shown.",
      "ja": "空の非終端はNSEC3レコードではなく、NSECレコードを取得します。リゾルバが拒否の存在証明を検証するために、これらのNSEC3レコードをどのように使用するか、セクション5.5に示されています。"
    },
    {
      "indent": 3,
      "text": "Note that NSEC3 might not always be useful. For example, highly structured zones, like the reverse zones ip6.arpa and in-addr.arpa, can be walked even with NSEC3 due to their structure. Also, the names in small, trivial zones can be easily guessed. In these cases, it does not help to defend against zone walking, but it does add the computational load on authoritative servers and validators.",
      "ja": "NSEC3は、常に便利ではないかもしれないことに注意してください。例えば、高度に、それらの構造にもNSEC3で歩いすることができるip6.arpaとin-addr.arpa逆ゾーンのようなゾーンを、構造。また、小さな、些細なゾーンの名前は、容易に推測することができます。これらの例では、ゾーンの歩行を防御するためには役立ちませんが、それは権威サーバやバリデータで計算負荷を加えるん。"
    },
    {
      "indent": 0,
      "text": "5.1. Opt-Out",
      "section_title": true,
      "ja": "5.1. 身を引く"
    },
    {
      "indent": 3,
      "text": "Hashing mitigates the zone-walking issue of NSEC. The other issue, the high costs of securing a delegation to an insecure zone, is tackled with Opt-Out. When using Opt-Out, names that are an insecure delegation (and empty non-terminals that are only derived from insecure delegations) don't require an NSEC3 record. For each insecure delegation, the zone size can be decreased (compared with a fully signed zone without using Opt-Out) with at least two records: one NSEC3 record and one corresponding RRSIG record. If the insecure delegation would introduce empty non-terminals, even more records can be omitted from the zone.",
      "ja": "ハッシュは、NSECのゾーン歩行の問題を軽減します。他の問題は、安全でないゾーンへの委任を確保する高コストは、オプトアウトして取り組んで。オプトアウトを使用する場合、（唯一の不安定な代表団に由来していると、空の非端末）不安定な代表団をしている名前は、NSEC3レコードを必要としません。 1枚のNSEC3レコードとRRSIGレコードを対応する各安全でない委任に対して、ゾーンのサイズは、少なくとも二つのレコードを（オプトアウトを使用せずに完全に署名されたゾーンと比較して）減少させることができます。不安定な代表団が空の非端末を導入する場合は、さらに多くのレコードがゾーンから省略することができます。"
    },
    {
      "indent": 3,
      "text": "Opt-Out NSEC3 records are not able to prove or deny the existence of the insecure delegations. In other words, those delegations do not benefit from the cryptographic security that DNSSEC provides.",
      "ja": "オプトアウトNSEC3レコードは不安定な代表団の存在を証明するか、拒否することができません。言い換えれば、それらの代表団は、DNSSECが提供する暗号化セキュリティの恩恵を受けません。"
    },
    {
      "indent": 3,
      "text": "A recently discovered corner case (see RFC Errata ID 3441 [Err3441]) shows that not only those delegations remain insecure but also the empty non-terminal space that is derived from those delegations.",
      "ja": "最近発見されたコーナーケース（RFCエラッタID 3441 [Err3441]を参照）だけでなく、それらの代表は、安全でないだけでなく、それらの委任から誘導される空の非終端空間ままであることを示しています。"
    },
    {
      "indent": 3,
      "text": "Because the names in this empty non-terminal space do exist according to the definition in [RFC4592], the server should respond to queries for these names with a NODATA response. However, the validator requires an NSEC3 record proving the NODATA response ([RFC5155], Section 8.5):",
      "ja": "この空の非終端空間での名前は、[RFC4592]で定義に従って存在しないため、サーバがNODATA応答でこれらの名前に対するクエリに応答する必要があります。しかし、バリデータはNODATA応答（[RFC5155]、セクション8.5）証明NSEC3レコードを必要とします。"
    },
    {
      "indent": 6,
      "text": "The validator MUST verify that an NSEC3 RR that matches QNAME is present and that both the QTYPE and the CNAME type are not set in its Type Bit Maps field.",
      "ja": "バリデータは、QNAMEに一致するNSEC3 RRが存在し、QTYPEとCNAMEタイプの両方が、そのタイプビットマップフィールドに設定されていないことをことを確かめなければなりません。"
    },
    {
      "indent": 3,
      "text": "A way to resolve this contradiction in the specification is to always provide empty non-terminals with an NSEC3 record, even if it is only derived from an insecure delegation.",
      "ja": "仕様では、この矛盾を解決するための方法は、それが唯一の不安定な代表団に由来していても、常にNSEC3レコードで空の非端末を提供することです。"
    },
    {
      "indent": 0,
      "text": "5.2. Loading an NSEC3 Zone",
      "section_title": true,
      "ja": "5.2.  NSEC3ゾーンのロード"
    },
    {
      "indent": 3,
      "text": "Whenever an authoritative server receives a query for a non-existing record, it has to hash the incoming query name to determine into which interval between two existing hashes it falls. To do that, it needs to know the zone's specific NSEC3 parameters (hash iterations and salt).",
      "ja": "権威サーバが存在しないレコードのクエリを受信するたびに、それが落ちる既存の2つのハッシュ間のどの区間に決定するために、着信クエリ名をハッシュする必要があります。これを行うには、ゾーンの特定のNSEC3パラメータ（ハッシュの繰り返しと塩を）知っている必要があります。"
    },
    {
      "indent": 3,
      "text": "One way to learn them is to scan the zone during loading for NSEC3 records and glean the NSEC3 parameters from them. However, it would need to make sure that there is at least one complete set of NSEC3 records for the zone using the same parameters. Therefore, it would need to inspect all NSEC3 records.",
      "ja": "それらを学ぶための一つの方法は、NSEC3レコードのロード中にゾーンをスキャンし、それらからNSEC3パラメータを収集することです。しかし、それは同じパラメータを使用してゾーンのNSEC3レコードの少なくとも1つの完全なセットがあることを確認する必要があります。したがって、それはすべてのNSEC3レコードを検査する必要があります。"
    },
    {
      "indent": 3,
      "text": "A more graceful solution was designed. The solution was to create a new record, NSEC3PARAM, which must be placed at the apex of the zone. Its role is to provide a fixed place where an authoritative name server can directly see the NSEC3 parameters used, and by putting it in the zone, it allows for easy transfer to the secondaries.",
      "ja": "より優雅なソリューションを設計しました。解決策は、ゾーンの頂点に配置しなければならない新しいレコード、NSEC3PARAMを作成することでした。その役割は、権威ネームサーバが直接使用するNSEC3パラメータを見ることができる一定の場所を提供することであり、そしてゾーンでそれを置くことによって、それがセカンダリに簡単に転送することができます。"
    },
    {
      "indent": 0,
      "text": "5.3. Wildcards in the DNS",
      "section_title": true,
      "ja": "5.3.  DNSでのワイルドカード"
    },
    {
      "indent": 3,
      "text": "So far, we have only talked about denial of existence in negative responses. However, denial of existence may also occur in positive responses, i.e., where the ANSWER section of the response is not empty. This can happen because of wildcards.",
      "ja": "これまでのところ、我々は唯一の否定的な反応における存在の否定話しました。しかし、存在の否定は、応答の回答セクションが空でない正の応答、すなわち、で起こり得ます。これは、ワイルドカードで発生することがあります。"
    },
    {
      "indent": 3,
      "text": "Wildcards have been part of the DNS since the first DNS RFCs. They allow to define all names for a certain type in one go. In our \"example.org\" zone, we could, for instance, add a wildcard record:",
      "ja": "ワイルドカードは、最初のDNSのRFCので、DNSの一部となっています。彼らは一度では、特定のタイプのすべての名前を定義することができます。私たちの「example.org」ゾーンでは、我々は、例えば、ワイルドカードレコードを追加することができます。"
    },
    {
      "indent": 3,
      "text": "*.example.org. TXT \"wildcard record\"",
      "ja": "* .example.org。 TXT「ワイルドカードレコード」"
    },
    {
      "indent": 3,
      "text": "For completeness, our (unsigned) zone now looks like this:",
      "ja": "完全を期すために、私たちの（符号なし）ゾーンは次のようになります。"
    },
    {
      "indent": 3,
      "text": "example.org. SOA ( ... ) example.org. NS a.example.org. *.example.org. TXT \"wildcard record\" a.example.org. A 192.0.2.1 TXT \"a record\" d.example.org. A 192.0.2.1 TXT \"d record\"",
      "ja": "example.org。 SOA（...）example.org。 NS a.example.org。 * .example.org。 TXT \"ワイルドカードレコード\" a.example.org。 192.0.2.1 TXT \"記録\" d.example.org。 192.0.2.1 TXT \"Dレコード\""
    },
    {
      "indent": 3,
      "text": "Figure 4: The example.org Zone with a Wildcard Record",
      "ja": "図4：ワイルドカードレコードとexample.orgゾーン"
    },
    {
      "indent": 3,
      "text": "If a resolver asks for \"z.example.org TXT\", the name server will respond with an expanded wildcard instead of an NXDOMAIN:",
      "ja": "リゾルバは「z.example.org TXT」を要求した場合、ネームサーバは代わりにNXDOMAINの拡大ワイルドカードで応答します。"
    },
    {
      "indent": 3,
      "text": ";; status: NOERROR, id: 13658",
      "ja": ";;ステータス：NOERROR、ID：13658"
    },
    {
      "indent": 3,
      "text": ";; ANSWER SECTION: z.example.org. TXT \"wildcard record\"",
      "ja": ";; ANSWERセクション：z.example.org。 TXT「ワイルドカードレコード」"
    },
    {
      "indent": 3,
      "text": "Note, however, that the resolver cannot detect that this answer came from a wildcard. It just sees the answer as is. How will this answer look with DNSSEC?",
      "ja": "リゾルバは、この答えは、ワイルドカードから来たことを検出することができないこと、しかし、注意してください。であるように、それはちょうど答えを見ています。どのようにこの答えは、DNSSECに見えるのだろうか？"
    },
    {
      "indent": 3,
      "text": ";; status: NOERROR, id: 51790",
      "ja": ";;ステータス：NOERROR、ID：51790"
    },
    {
      "indent": 3,
      "text": ";; ANSWER SECTION: z.example.org. TXT \"wildcard record\" z.example.org. RRSIG(TXT) ( ... )",
      "ja": ";; ANSWERセクション：z.example.org。 TXT \"ワイルドカードレコード\" z.example.org。 RRSIG（TXT）（...）"
    },
    {
      "indent": 3,
      "text": ";; AUTHORITY SECTION: d.example.org. NSEC example.org. A TXT RRSIG NSEC d.example.org. RRSIG(NSEC) ( ... )",
      "ja": ";; AUTHORITYのSECTION：d.example.org。 NSECのexample.org。 TXT RRSIG NSECのd.example.org。 RRSIG（NSEC）（...）"
    },
    {
      "indent": 3,
      "text": "Figure 5: A Response with an Expanded Wildcard and DNSSEC",
      "ja": "図5：拡張ワイルドカードとDNSSECと回答"
    },
    {
      "indent": 3,
      "text": "The RRSIG of the \"z.example.org\" TXT record indicates there is a wildcard configured. The RDATA of the signature lists a label count, [RFC4034], Section 3.1.3., of two (not visible in the figure above), but the owner name of the signature has three labels. This mismatch indicates there is a wildcard \"*.example.org\" configured.",
      "ja": "「z.example.org」TXTレコードのRRSIGが設定され、ワイルドカードがあることを示しています。署名のRDATAは、二つのラベル数、[RFC4034]、セクション3.1.3。、（上図では見えない）をリストが、署名の所有者名が3つのラベルを有しています。このミスマッチは、設定され、ワイルドカード「* .example.org」があることを示しています。"
    },
    {
      "indent": 6,
      "text": "An astute reader may notice that it appears as if a \"z.example.org\" RRSIG(TXT) is created out of thin air. This is not the case. The signature for \"z.example.org\" does not exist. The signature you are seeing is the one for \"*.example.org\", which does exist; only the owner name is switched to \"z.example.org\". So, even with wildcards, no signatures have to be created on the fly.",
      "ja": "抜け目のない読者は、「z.example.org」RRSIG（TXT）が空中から作成されたかのように見えることに気づくことができます。これはそうではありません。 「z.example.org」の署名が存在しません。あなたが見ている署名が存在しない「* .example.org」の一つです。唯一の所有者名は「z.example.org」に切り替えています。だから、でもワイルドカードで、何の署名がその場で作成する必要がありません。"
    },
    {
      "indent": 3,
      "text": "The DNSSEC standard mandates that an NSEC (or NSEC3) is included in such responses. If it wasn't, an attacker could mount a replay attack and poison the cache with false data. Suppose that the resolver has asked for \"a.example.org TXT\". An attacker could modify the packet in such way that it looks like the response was generated through wildcard expansion, even though a record exists for \"a.example.org TXT\".",
      "ja": "NSEC（またはNSEC3）はそのような応答に含まれるDNSSEC標準義務付け。それがなかった場合、攻撃者は、リプレイ攻撃をマウントし、誤ったデータをキャッシュに毒を入れることができます。リゾルバは「a.example.org TXT」を求めたとします。攻撃者は、応答レコードが「a.example.org TXT」のために存在していても、ワイルドカードの展開によって生成されたように見えるようにパケットを変更することができます。"
    },
    {
      "indent": 3,
      "text": "The tweaking simply consists of adjusting the ANSWER section to:",
      "ja": "微調整は、単純にANSWERセクションを調整で構成されています。"
    },
    {
      "indent": 3,
      "text": ";; status: NOERROR, id: 31827",
      "ja": ";;ステータス：NOERROR、ID：31827"
    },
    {
      "indent": 3,
      "text": ";; ANSWER SECTION: a.example.org. TXT \"wildcard record\" a.example.org. RRSIG(TXT) ( ... )",
      "ja": ";; ANSWERセクション：a.example.org。 TXT \"ワイルドカードレコード\" a.example.org。 RRSIG（TXT）（...）"
    },
    {
      "indent": 3,
      "text": "Figure 6: A Forged Response without the Expanded Wildcard",
      "ja": "図6：拡張ワイルドカードなしの鍛造レスポンス"
    },
    {
      "indent": 3,
      "text": "Note the subtle difference from Figure 5 in the owner name. In this response, we see a \"a.example.org TXT\" record for which a record with different RDATA (see Figure 4) exists in the zone.",
      "ja": "所有者名で、図5の微妙な違いに注意してください。この応答では、我々は、異なるRDATAを持つレコードが（図4参照）ゾーン内に存在するため、「a.example.org TXT」レコードを参照してください。"
    },
    {
      "indent": 3,
      "text": "That would be a perfectly valid answer if we would not require the inclusion of an NSEC or NSEC3 record in the wildcard answer response. The resolver believes that \"a.example.org TXT\" is a wildcard record, and the real record is obscured. This is bad and defeats all the security DNSSEC can deliver. Because of this, the NSEC or NSEC3 must be present.",
      "ja": "私たちは、ワイルドカード答え応答におけるNSECまたはNSEC3のレコードを含めることを必要としない場合には、完全に有効な答えだろう。リゾルバは「a.example.org TXTは、」ワイルドカードレコードで、実際のレコードが隠されていると考えています。これは悪いですし、DNSSECが提供できるすべてのセキュリティを破ります。このため、NSECまたはNSEC3が存在しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Another way of putting this is that DNSSEC is there to ensure the name server has followed the steps as outlined in [RFC1034], Section 4.3.2 for looking up names in the zone. It explicitly lists wildcard lookup as one of these steps (3c), so with DNSSEC this must be communicated to the resolver: hence, the NSEC or NSEC3 record.",
      "ja": "これを置くことのもう一つの方法は、DNSSECは、[RFC1034]に概説されているようネームサーバがゾーン内の名前を検索するため、4.3.2項をステップに従った確実にするために存在することです。したがって、NSECまたはNSEC3レコードを：これはリゾルバに伝達されなければならないDNSSECを持つので、それは明示的に、これらのステップ（3C）の一つとして、ワイルドカード検索を示しています。"
    },
    {
      "indent": 0,
      "text": "5.4. CNAME Records",
      "section_title": true,
      "ja": "5.4.  CNAMEレコード"
    },
    {
      "indent": 3,
      "text": "So far, the maximum number of NSEC records a response will have is two: one for the denial of existence and another for the wildcard. We say maximum because sometimes a single NSEC can prove both. With NSEC3, this is three (as to why, we will explain in the next section).",
      "ja": "これまでのところ、NSECの最大数があります応答が2で記録されます。ワイルドカードのための存在の否定と別のものを。時々、単一のNSECは両方を証明することができますので、我々は最高を言います。 NSEC3では、これは（、我々は次のセクションで説明します理由として）3です。"
    },
    {
      "indent": 3,
      "text": "When we take CNAME wildcard records into account, we can have more NSEC or NSEC3 records. For every wildcard expansion, we need to prove that the expansion was allowed. Let's add some CNAME wildcard records to our zone:",
      "ja": "我々は考慮にCNAMEワイルドカードレコードを取るとき、私たちはより多くのNSECまたはNSEC3レコードを持つことができます。すべてのワイルドカードの展開のために、我々は拡張が許可されたことを証明する必要があります。私たちのゾーンにいくつかのCNAMEのワイルドカードレコードを追加してみましょう："
    },
    {
      "indent": 3,
      "text": "example.org. SOA ( ... ) example.org. NS a.example.org. *.example.org. TXT \"wildcard record\" a.example.org. A 192.0.2.1 TXT \"a record\" *.a.example.org. CNAME w.b *.b.example.org. CNAME w.c *.c.example.org. A 192.0.2.1 d.example.org. A 192.0.2.1 TXT \"d record\" w.example.org. CNAME w.a",
      "ja": "example.org。 SOA（...）example.org。 NS a.example.org。 * .example.org。 TXT \"ワイルドカードレコード\" a.example.org。 192.0.2.1 TXT \"記録\" * .a.example.org。 CNAMEのw.b * .b.example.org。 CNAMEのw.c * .c.example.org。 192.0.2.1のd.example.org。 192.0.2.1 TXT \"Dレコード\" w.example.org。 CNAME w.a"
    },
    {
      "indent": 3,
      "text": "Figure 7: A Wildcard CNAME Chain Added to the \"example.org\" Zone",
      "ja": "図7：「example.org」ゾーンに追加ワイルドカードCNAMEチェーン"
    },
    {
      "indent": 3,
      "text": "A query for \"w.example.org A\" will result in the following response:",
      "ja": "「w.example.org」次の応答になりますのクエリ："
    },
    {
      "indent": 3,
      "text": ";; status: NOERROR, id: 4307",
      "ja": ";;ステータス：NOERROR、ID：4307"
    },
    {
      "indent": 3,
      "text": ";; ANSWER SECTION: w.example.org. CNAME w.a.example.org. w.example.org. RRSIG(CNAME) ( ... ) w.a.example.org. CNAME w.b.example.org. w.a.example.org. RRSIG(CNAME) ( ... ) w.b.example.org. CNAME w.c.example.org. w.b.example.org. RRSIG(CNAME) ( ... ) w.c.example.org. A 192.0.2.1 w.c.example.org. RRSIG(A) ( ... )",
      "ja": ";; ANSWERセクション：w.example.org。 CNAMEはw.a.example.org。 w.example.org。 RRSIG（CNAME）（...）w.a.example.org。 CNAMEはw.b.example.org。 w.a.example.org。 RRSIG（CNAME）（...）w.b.example.org。 CNAMEはw.c.example.org。 w.b.example.org。 RRSIG（CNAME）（...）w.c.example.org。 192.0.2.1 w.c.example.org。 RRSIG（A）（...）"
    },
    {
      "indent": 3,
      "text": ";; AUTHORITY SECTION: *.a.example.org. NSEC *.b.example.org. CNAME RRSIG NSEC *.a.example.org. RRSIG(NSEC) ( ... ) *.b.example.org. NSEC *.c.example.org. CNAME RRSIG NSEC *.b.example.org. RRSIG(NSEC) ( ... ) *.c.example.org. NSEC d.example.org. A RRSIG NSEC *.c.example.org. RRSIG(NSEC) ( ... )",
      "ja": ";; AUTHORITYのSECTION：* .a.example.org。 NSEC * .b.example.org。 CNAME RRSIG NSEC * .a.example.org。 RRSIG（NSEC）（...）* .b.example.org。 NSEC * .c.example.org。 CNAME RRSIG NSEC * .b.example.org。 RRSIG（NSEC）（...）* .c.example.org。 NSECのd.example.org。 RRSIG NSEC *の.c.example.org。 RRSIG（NSEC）（...）"
    },
    {
      "indent": 3,
      "text": "The NSEC record \"*.a.example.org\" proves that wildcard expansion to \"w.a.example.org\" was appropriate: \"w.a.\" falls in the gap \"*.a\" to \"*.b\". Similarly, the NSEC record \"*.b.example.org\" proves that there was no direct match for \"w.b.example.org\" and \"*.c.example.org\" denies the direct match for \"w.c.example.org\".",
      "ja": "NSECレコード「* .a.example.orgは」「w.a.example.org」へのワイルドカードの展開が適切であったことを証明：「W.A.」 「* .B」に「.A *」ギャップに落ちます。同様に、NSECレコード「* .b.example.orgは」は直接試合はそこになかったことを証明している「w.b.example.org」と「* .c.example.orgは」「w.c.example.org」のための直接の試合を拒否します。"
    },
    {
      "indent": 3,
      "text": "DNAME records and wildcard names should not be used as reiterated in [RFC6672], Section 3.3.",
      "ja": "[RFC6672]、セクション3.3で繰り返されるようDNAMEレコードとワイルドカード名が使用されるべきではありません。"
    },
    {
      "indent": 0,
      "text": "5.5. The Closest Encloser NSEC3 Record",
      "section_title": true,
      "ja": "5.5. 最も近いencloser NSEC3録音"
    },
    {
      "indent": 3,
      "text": "We can have one or more NSEC3 records that deny the existence of the requested name and one NSEC3 record that denies wildcard synthesis. What do we miss?",
      "ja": "当社は、要求された名前とワイルドカード合成を拒否する1つのNSEC3レコードの存在を否定一つ以上のNSEC3レコードを持つことができます。私たちは何を欠場か？"
    },
    {
      "indent": 3,
      "text": "The short answer is that due to the hashing in NSEC3, you lose the depth of your zone and everything is hashed into a flat plane. To make up for this loss of information, you need an extra record.",
      "ja": "短い答えが原因NSEC3でハッシュに、あなたはあなたのゾーンの深さを失い、すべてが平面にハッシュされていることです。情報のこの損失を補うために、あなたは余分なレコードが必要です。"
    },
    {
      "indent": 3,
      "text": "To understand NSEC3, we will need two definitions:",
      "ja": "NSEC3を理解するために、我々は二つの定義が必要になります。"
    },
    {
      "indent": 3,
      "text": "Closest encloser: Introduced in [RFC4592] as:",
      "ja": "最寄の囲い：[RFC 4592]などで導入："
    },
    {
      "indent": 6,
      "text": "The closest encloser is the node in the zone's tree of existing domain names that has the most labels matching the query name (consecutively, counting from the root label downward).",
      "ja": "最も近いencloser（連続し、下方へのルートラベルから数えて）、クエリ名に一致する最もラベルを持つ既存のドメイン名のゾーンのツリー内のノードです。"
    },
    {
      "indent": 6,
      "text": "In our example, if the query name is \"x.2.example.org\", then \"example.org\" is the \"closest encloser\";",
      "ja": "クエリ名は「x.2.example.org」、そして「example.org」をされた場合の例では、「最も近いencloser」です。"
    },
    {
      "indent": 3,
      "text": "Next closer name: Introduced in [RFC5155], this is the closest encloser with one more label added to the left. So, if \"example.org\" is the closest encloser for the query name \"x.2.example.org\", \"2.example.org\" is the \"next closer name\".",
      "ja": "次近づく名前：[RFC5155]で導入が、これは1つのより多くのラベルが左に追加して最も近いencloserです。だから、「example.orgは、」クエリ名「x.2.example.org」のための最も近いencloserであれば、「2.example.orgは」「次に、より近い名前」です。"
    },
    {
      "indent": 3,
      "text": "An NSEC3 \"closest encloser proof\" consists of:",
      "ja": "NSEC3「最も近いencloser証拠は」で構成されています。"
    },
    {
      "indent": 3,
      "text": "1. An NSEC3 record that *matches* the \"closest encloser\". This means the unhashed owner name of the record is the closest encloser. This bit of information tells a resolver: \"The name you are asking for does not exist; the closest I have is this\".",
      "ja": "*「最も近いencloser」*と一致する1】NSEC3レコード。これは、レコードの未ハッシュの所有者名が最も近いencloserであることを意味します。情報のこのビットはリゾルバに指示します：「あなたは存在しないために求めている名前を、私が持っている最も近いがこれです」。"
    },
    {
      "indent": 3,
      "text": "2. An NSEC3 record that *covers* the \"next closer name\". This means it defines an interval in which the \"next closer name\" falls. This tells the resolver: \"The next closer name falls in this interval, and therefore the name in your question does not exist. In fact, the closest encloser is indeed the closest I have\".",
      "ja": "* *「次に、より近い名前を」カバー2.アンNSEC3レコード。これは、「次に、より近い名前は」落下する間隔を定義することを意味します。これは、リゾルバを伝えます：「次に、より近い名前がこの区間に落ちるので、あなたの質問に名前が存在しない実際には、最も近いencloserは確かに私が持っている最も近いです。」。"
    },
    {
      "indent": 3,
      "text": "These two records already deny the existence of the requested name, so we do not need an NSEC3 record that covers the actual queried name. By denying the existence of the next closer name, you also deny the existence of the queried name.",
      "ja": "これら二つのレコードは、すでに要求された名前の存在を否定するので、私たちは実際の照会の名前をカバーNSEC3レコードを必要としません。次に、より近い名前の存在を否定することで、あなたはまた、照会名の存在を否定します。"
    },
    {
      "indent": 3,
      "text": "Note that with NSEC, the existence of all empty non-terminals between the two names are denied, hence it implicitly contains the closest encloser.",
      "ja": "したがって、それは暗黙のうちに最も近いencloserが含まれ、NSECと、二つの名前の間のすべての空の非端末の存在が否定されることに注意してください。"
    },
    {
      "indent": 3,
      "text": "For a given query name, there is one (and only one) place where wildcard expansion is possible. This is the \"source of synthesis\" and is defined ([RFC4592], Sections 2.1.1 and 3.3.1) as:",
      "ja": "指定したクエリ名の場合は、1つだけのワイルドカードの展開が可能である場所があります。これは、（[RFC4592]、セクション2.1.1および3.3.1）「合成の源」であると定義されます。"
    },
    {
      "indent": 3,
      "text": "<asterisk label>.<closest encloser>",
      "ja": "<アスタリスクラベル>。<最も近い囲い>"
    },
    {
      "indent": 3,
      "text": "In other words, to deny wildcard synthesis, the resolver needs to know the hash of the source of synthesis. Since it does not know beforehand what the closest encloser of the query name is, it must be provided in the answer.",
      "ja": "換言すれば、ワイルドカード合成を拒否するように、レゾルバは、合成の源のハッシュを知る必要があります。それはクエリ名の最も近いencloserが事前に知っていないので、それが答えで提供されなければなりません。"
    },
    {
      "indent": 3,
      "text": "Take the following example. We have a zone with two TXT records to it. The records added are \"1.h.example.org\" and \"3.3.example.org\". It is signed with NSEC3, resulting in the following unsigned zone:",
      "ja": "以下の例を見てみましょう。私たちは、それには2つのTXTレコードを持つゾーンを持っています。追加されたレコードは、「1.h.example.org」と「3.3.example.org」です。それは、以下の符号なしのゾーンで、その結果、NSEC3で署名されています。"
    },
    {
      "indent": 4,
      "text": "example.org. SOA ( ... ) example.org. NS a.example.org. 1.h.example.org. TXT \"1.h record\" 3.3.example.org. TXT \"3.3 record\"",
      "ja": "example.org。 SOA（...）example.org。 NS a.example.org。 1.h.example.org。 TXT \"1.Hレコード\" 3.3.example.org。 TXT \"3.3記録\""
    },
    {
      "indent": 3,
      "text": "Figure 8: The TXT records in example.org. These records create two empty non-terminals: h.example.org and 3.example.org.",
      "ja": "図8：example.orgでTXTレコード。これらのレコードは、2つの空の非端末を作成します。h.example.orgと3.example.org。"
    },
    {
      "indent": 3,
      "text": "The resolver asks the following: \"x.2.example.org TXT\". This leads to an NXDOMAIN response from the server, which contains three NSEC3 records. A list of hashed owner names can be found in Appendix C. Also, see Figure 9; the numbers in that figure correspond with the following NSEC3 records:",
      "ja": "リゾルバは、次のことを尋ねる：「x.2.example.org TXT」。これは、3つのNSEC3レコードを含むサーバーからNXDOMAIN応答につながります。ハッシュされた所有者名のリストは、図9を参照して、また、付録Cに見出すことができます。その図中の番号は、次のNSEC3レコードに対応します。"
    },
    {
      "indent": 3,
      "text": "15bg9l6359f5ch23e34ddua6n1rihl9h.example.org. ( NSEC3 1 0 2 DEAD 1AVVQN74SG75UKFVF25DGCETHGQ638EK NS SOA RRSIG DNSKEY NSEC3PARAM )",
      "ja": "15bg9l6359f5ch23e34ddua6n1rihl9h.example.org。 （NSEC3 1 0 2 DEAD 1AVVQN74SG75UKFVF25DGCETHGQ638EK NS SOA RRSIG DNSKEY NSEC3PARAM）"
    },
    {
      "indent": 3,
      "text": "1avvqn74sg75ukfvf25dgcethgq638ek.example.org. ( NSEC3 1 0 2 DEAD 75B9ID679QQOV6LDFHD8OCSHSSSB6JVQ )",
      "ja": "1avvqn74sg75ukfvf25dgcethgq638ek.example.org。 （NSEC3 1 0 2 DEAD 75B9ID679QQOV6LDFHD8OCSHSSSB6JVQ）"
    },
    {
      "indent": 3,
      "text": "75b9id679qqov6ldfhd8ocshsssb6jvq.example.org. ( NSEC3 1 0 2 DEAD 8555T7QEGAU7PJTKSNBCHG4TD2M0JNPJ TXT RRSIG )",
      "ja": "75b9id679qqov6ldfhd8ocshsssb6jvq.example.org。 （NSEC3 1 0 2 DEAD 8555T7QEGAU7PJTKSNBCHG4TD2M0JNPJ TXT RRSIG）"
    },
    {
      "indent": 3,
      "text": "If we would follow the NSEC approach, the resolver is only interested in one thing. Does the hash of \"x.2.example.org\" fall in any of the intervals of the NSEC3 records it got?",
      "ja": "我々はNSECアプローチをたどる場合、リゾルバは一つのことだけに関心があります。 NSEC3の間隔のいずれかで「x.2.example.org」秋のハッシュは、それが持って記録していますか？"
    },
    {
      "indent": 3,
      "text": "                    example.org\n                       **\n                   +-- ** . . . . . . . . . . .\n              (1) /  . ^ .                     .\n                 /  .  |   .                    .\n                |  .   |    .                    .\n                v .    |     .                    .\n                **     | (2)  **                  ++\n  h.example.org ** ----+----> ** 3.example.org    ++ 2.example.org\n                .     /        . |                .\n                .    / (5)     . | (3)            .\n                .   /          . |                .\n                .  /           . v                .\n1.h.example.org **            **                  ++\n                ** <--------- ** 3.3.example.org  ++ x.2.example.org\n                         (4)",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 9: \"x.2.example.org\" does not exist. The five arrows represent the NSEC3 records; the ones numbered (1), (2), and (3) are the NSEC3s returned in our answer. \"2.example.org\" is covered by (3) and \"x.2.example.org\" is covered by (4).",
      "ja": "図9：「x.2.example.org」は存在しません。 5つの矢印はNSEC3レコードを表します。番号を付けたものは、（1）、（2）、及び（3）NSEC3sは、私たちの答えで返されます。 \"2.example.org\" は（3）で覆われていると \"x.2.example.org\" は（4）で覆われています。"
    },
    {
      "indent": 3,
      "text": "The hash of \"x.2.example.org\" is \"ndtu6dste50pr4a1f2qvr1v31g00i2i1\". Checking this hash on the first NSEC3 yields that it does not fall in between the interval: \"15bg9l6359f5ch23e34ddua6n1rihl9h\" to \"1avvqn74sg75ukfvf25dgcethgq638ek\". For the second NSEC3, the answer is also negative: the hash sorts outside the interval described by \"1avvqn74sg75ukfvf25dgcethgq638ek\" and \"75b9id679qqov6ldfhd8ocshsssb6jvq\". And, the third NSEC3, with interval \"75b9id679qqov6ldfhd8ocshsssb6jvq\" to \"8555t7qegau7pjtksnbchg4td2m0jnpj\" also isn't of any help.",
      "ja": "「x.2.example.org」のハッシュは、「ndtu6dste50pr4a1f2qvr1v31g00i2i1」です。 「1avvqn74sg75ukfvf25dgcethgq638ek」を「15bg9l6359f5ch23e34ddua6n1rihl9h」：それはインターバルの間に該当しない最初のNSEC3の利回りに、このハッシュをチェックします。二NSEC3のために、答えも否定である：「1avvqn74sg75ukfvf25dgcethgq638ek」と「75b9id679qqov6ldfhd8ocshsssb6jvq」で説明した区間外のハッシュのソート。そして、間隔「75b9id679qqov6ldfhd8ocshsssb6jvq」と第三NSEC3は、「8555t7qegau7pjtksnbchg4td2m0jnpj」にも任意のヘルプではありません。"
    },
    {
      "indent": 3,
      "text": "What is a resolver to do? It has been given the maximum amount of NSEC3s and they all seem useless.",
      "ja": "行うためのリゾルバとは何ですか？それはNSEC3sの最大量を与えられている、それらはすべて役に立たないように見えます。"
    },
    {
      "indent": 3,
      "text": "So, this is where the closest encloser proof comes into play. And, for the proof to work, the resolver needs to know what the closest encloser is. There must be an existing ancestor in the zone: a name must exist that is shorter than the query name. The resolver keeps hashing increasingly shorter names from the query name until an owner name of an NSEC3 matches. This owner name is the closest encloser.",
      "ja": "最も近いencloser証拠の出番ので、これはです。そして、仕事に証明するために、リゾルバは最も近いencloserが何であるかを知る必要があります。ゾーン内の既存の祖先が存在する必要があります：名前はそれがクエリ名よりも短くなって存在している必要があります。 NSEC3の所有者名が一致するまでリゾルバは、クエリ名からますます短い名前をハッシュ続けます。この所有者名は、最も近いencloserです。"
    },
    {
      "indent": 3,
      "text": "When the resolver has found the closest encloser, the next step is to construct the next closer name. This is the closest encloser with the last chopped label from the query name prepended to it: \"<last chopped label>.<closest encloser>\". The hash of this name should be covered by the interval set in any of the NSEC3 records.",
      "ja": "リゾルバが最も近いencloserを発見した場合は、次のステップは、次に、より近い名前を構築することです。 「<最後のみじん切りラベル> <最も近いencloser>。」：これはそれの前に追加クエリ名から最後のみじん切りラベルと最も近いencloserです。この名前のハッシュはNSEC3レコードのいずれかに設定された間隔でカバーする必要があります。"
    },
    {
      "indent": 3,
      "text": "Then, the resolver needs to check the presence of a wildcard. It creates the wildcard name by prepending the asterisk label to the closest encloser, \"*.<closest encloser>\", and uses the hash of that.",
      "ja": "その後、リゾルバは、ワイルドカードの存在をチェックする必要があります。これは、「<最も近いencloser>。*」、最も近いencloserにアスタリスクラベルを付加することで、ワイルドカード名を作成し、そのハッシュを使用しています。"
    },
    {
      "indent": 3,
      "text": "Going back to our example, the resolver must first detect the NSEC3 that matches the closest encloser. It does this by chopping up the query name, hashing each instance (with the same number of iterations and hash as the zone it is querying), and comparing that to the answers given. So, it has the following hashes to work with:",
      "ja": "私達の例に戻って、リゾルバは最初に最も近いencloserに一致するNSEC3を検出する必要があります。それは（それが照会されているゾーンと同じ反復回数とハッシュと共に）各インスタンスをハッシング、クエリ名を細断し、所定の回答にそれを比較することによってこれを行います。だから、それはで動作するように、次のハッシュを持っています："
    },
    {
      "indent": 3,
      "text": "x.2.example.org: \"ndtu6dste50pr4a1f2qvr1v31g00i2i1\", last chopped label: \"<empty>\";",
      "ja": "x.2.example.org： \"ndtu6dste50pr4a1f2qvr1v31g00i2i1\"、最後のみじん切りラベル： \"<空>\";"
    },
    {
      "indent": 3,
      "text": "2.example.org: \"7t70drg4ekc28v93q7gnbleopa7vlp6q\", last chopped label: \"x\";",
      "ja": "2.example.org：「7t70drg4ekc28v93q7gnbleopa7vlp6q」、最後のみじん切りラベル：「×」。"
    },
    {
      "indent": 3,
      "text": "example.org: \"15bg9l6359f5ch23e34ddua6n1rihl9h\", last chopped label: \"2\".",
      "ja": "example.org： \"15bg9l6359f5ch23e34ddua6n1rihl9h\"、最後のみじん切りラベル： \"2\"。"
    },
    {
      "indent": 3,
      "text": "Of these hashes, only one matches the owner name of one of the NSEC3 records: \"15bg9l6359f5ch23e34ddua6n1rihl9h\". This must be the closest encloser (unhashed: \"example.org\"). That's the main purpose of that NSEC3 record: tell the resolver what the closest encloser is.",
      "ja": "「15bg9l6359f5ch23e34ddua6n1rihl9h」：これらのハッシュの、一つだけはNSEC3レコードの1の所有者名と一致します。これは、最も近いencloser（「example.org」ハッシュ解除）でなければなりません。それは、そのNSEC3レコードの主な目的です：最も近いencloserが何であるかをリゾルバに伝えます。"
    },
    {
      "indent": 3,
      "text": "When using Opt-Out, it is possible that the actual closest encloser to the QNAME does not have an NSEC3 record. If so, we will have to do with the closest provable encloser, which is the closest enclosing authoritative name that does have an NSEC3 record. In the worst case, this is the NSEC3 record corresponding to the apex; this name must always have an NSEC3 record.",
      "ja": "オプトアウトを使用する場合は、QNAMEに、実際の最も近いencloserがNSEC3レコードを持っていない可能性があります。もしそうなら、私たちはNSEC3レコードを持っている最も近い囲み権威の名前である最も近い証明可能なencloser、で行う必要があります。最悪の場合、これは頂点に対応するNSEC3レコードです。この名前は、常にNSEC3レコードを持っている必要があります。"
    },
    {
      "indent": 3,
      "text": "With the closest (provable) encloser, the resolver constructs the next closer, which in this case is: \"2.example.org\"; \"2\" is the last label chopped when \"example.org\" is the closest encloser. The hash of this name should be covered in any of the other NSEC3s. And, it is -- \"7t70drg4ekc28v93q7gnbleopa7vlp6q\" falls in the interval set by \"75b9id679qqov6ldfhd8ocshsssb6jvq\" and \"8555t7qegau7pjtksnbchg4td2m0jnpj\" (this is our second NSEC3).",
      "ja": "最も近い（証明可能）なencloserと、レゾルバは、この場合にある、次近い構築：「2.example.org」。 「2」は「example.orgは」最も近いencloserであるときみじん切り最後のラベルです。この名前のハッシュは、他のNSEC3sのいずれかに含まれるべきです。そして、それは - 「7t70drg4ekc28v93q7gnbleopa7vlp6qは」（これは私たちの第二NSEC3である）「75b9id679qqov6ldfhd8ocshsssb6jvq」と「8555t7qegau7pjtksnbchg4td2m0jnpj」で設定した間隔に落ちます。"
    },
    {
      "indent": 3,
      "text": "So, what does the resolver learn from this?",
      "ja": "だから、リゾルバはここから何を学ぶのか？"
    },
    {
      "indent": 3,
      "text": "o \"example.org\" exists;",
      "ja": "O「example.org」は存在します。"
    },
    {
      "indent": 3,
      "text": "o \"2.example.org\" does not exist.",
      "ja": "O「2.example.org」は存在しません。"
    },
    {
      "indent": 3,
      "text": "And, if \"2.example.org\" does not exist, there is also no direct match for \"x.2.example.org\". The last step is to deny the existence of the source of synthesis to prove that no wildcard expansion was possible.",
      "ja": "「2.example.orgは」存在しない場合や、また「x.2.example.org」には直接の一致がありません。最後のステップは、ワイルドカードの展開は不可能であったことを証明するために、合成の源の存在を否定することです。"
    },
    {
      "indent": 3,
      "text": "The resolver hashes \"*.example.org\" to \"22670trplhsr72pqqmedltg1kdqeolb7\" and checks that it is covered. In this case, by the last NSEC3 (see Figure 9), the hash falls in the interval set by \"1avvqn74sg75ukfvf25dgcethgq638ek\" and \"75b9id679qqov6ldfhd8ocshsssb6jvq\". This means there is no wildcard record directly below the closest encloser, and \"x.2.example.org\" definitely does not exist.",
      "ja": "それが覆われていることを「22670trplhsr72pqqmedltg1kdqeolb7」とチェックにリゾルバハッシュ「* .example.org」。この場合、最後のNSEC3によって、ハッシュは「1avvqn74sg75ukfvf25dgcethgq638ek」および「75b9id679qqov6ldfhd8ocshsssb6jvq」によって設定された間隔に入る（図9参照）。これは間違いなく存在していないワイルドカードの直接最も近いencloser以下、レコード、および「x.2.example.org」がないことを意味します。"
    },
    {
      "indent": 3,
      "text": "When we have validated the signatures, we have reached our goal: authenticated denial of existence.",
      "ja": "存在の認証された否定：私たちは署名を検証しているとき、我々は我々の目標に達しています。"
    },
    {
      "indent": 0,
      "text": "5.6. Three to Tango",
      "section_title": true,
      "ja": "5.6. スリー・トゥ・タンゴ"
    },
    {
      "indent": 3,
      "text": "One extra NSEC3 record plus an additional signature may seem like a lot just to deny the existence of the wildcard record, but we cannot leave it out. If the standard would not mandate the closest encloser NSEC3 record but instead required two NSEC3 records -- one to deny the query name and one to deny the wildcard record -- an attacker could fool the resolver that the source of synthesis does not exist, while it in fact does.",
      "ja": "1つの余分NSEC3レコードに加えて、追加の署名はただワイルドカードレコードの存在を否定するためにたくさんのように見えるかもしれませんが、我々はそれを残すことはできません。標準では、最も近いencloser NSEC3レコードを義務付ける代わりに2つのNSEC3レコードが必要ではない場合 -  1つのワイルドカードレコードを拒否するようにクエリ名と1を否定するが - 攻撃者は、一方で、合成のソースが存在しないリゾルバをだますことができそれは実際にはありません。"
    },
    {
      "indent": 3,
      "text": "Suppose the wildcard record does exist, so our unsigned zone looks like this:",
      "ja": "私たちの符号なしのゾーンは次のようになりますので、ワイルドカードレコードは、存在しないと仮定します。"
    },
    {
      "indent": 3,
      "text": "example.org. SOA ( ... ) example.org. NS a.example.org. *.example.org. TXT \"wildcard record\" 1.h.example.org. TXT \"1.h record\" 3.3.example.org. TXT \"3.3 record\"",
      "ja": "example.org。 SOA（...）example.org。 NS a.example.org。 * .example.org。 TXT \"ワイルドカードレコード\" 1.h.example.org。 TXT \"1.Hレコード\" 3.3.example.org。 TXT \"3.3記録\""
    },
    {
      "indent": 3,
      "text": "The query \"x.2.example.org TXT\" should now be answered with:",
      "ja": "クエリ「x.2.example.org TXTは、」今で回答する必要があります。"
    },
    {
      "indent": 3,
      "text": "x.2.example.org. TXT \"wildcard record\"",
      "ja": "x.2.example.org。 TXT「ワイルドカードレコード」"
    },
    {
      "indent": 3,
      "text": "An attacker can deny this wildcard expansion by calculating the hash for the wildcard name \"*.2.example.org\" and searching for an NSEC3 record that covers that hash. The hash of \"*.2.example.org\" is \"fbq73bfkjlrkdoqs27k5qf81aqqd7hho\". Looking through the NSEC3 records in our zone, we see that the NSEC3 record of \"3.3\" covers this hash:",
      "ja": "攻撃者は、「.2.example.org *」ワイルドカード名のハッシュを計算し、そのハッシュをカバーNSEC3レコードを検索することで、このワイルドカード展開を拒否することができます。 「* .2.example.org」のハッシュは、「fbq73bfkjlrkdoqs27k5qf81aqqd7hho」です。私たちのゾーンのNSEC3のレコードを見ると、私たちは「3.3」のNSEC3レコードは、このハッシュをカバーしていることを参照してください。"
    },
    {
      "indent": 3,
      "text": "8555t7qegau7pjtksnbchg4td2m0jnpj.example.org. ( NSEC3 1 0 2 DEAD 15BG9L6359F5CH23E34DDUA6N1RIHL9H TXT RRSIG )",
      "ja": "8555t7qegau7pjtksnbchg4td2m0jnpj.example.org。 （NSEC3 1 0 2 DEAD 15BG9L6359F5CH23E34DDUA6N1RIHL9H TXT RRSIG）"
    },
    {
      "indent": 3,
      "text": "This record also covers the query name \"x.2.example.org\" (\"ndtu6dste50pr4a1f2qvr1v31g00i2i1\").",
      "ja": "このレコードは、クエリ名「x.2.example.org」（「ndtu6dste50pr4a1f2qvr1v31g00i2i1」）をカバーしています。"
    },
    {
      "indent": 3,
      "text": "Now an attacker adds this NSEC3 record to the AUTHORITY section of the reply to deny both \"x.2.example.org\" and any wildcard expansion. The net result is that the resolver determines that \"x.2.example.org\" does not exist, while in fact it should have been synthesized via wildcard expansion. With the NSEC3 matching the closest encloser \"example.org\", the resolver can be sure that the wildcard expansion should occur at \"*.example.org\" and nowhere else.",
      "ja": "今、攻撃者は、「x.2.example.org」と任意のワイルドカード展開の両方を否定する回答のAUTHORITYセクションに、このNSEC3レコードを追加します。最終結果は、リゾルバが、実際にそれがワイルドカードの展開を経て合成されている必要がありながら、「x.2.example.org」は、存在しないことを決定することです。最も近いencloser「example.org」を一致するNSEC3では、リゾルバは、ワイルドカードの展開は、どこにも「* .example.org」で発生しなければならないことを確認することができます。"
    },
    {
      "indent": 3,
      "text": "Coming back to the original question: Why do we need up to three NSEC3 records to deny a requested name? The resolver needs to be explicitly told what the \"closest encloser\" is, and this takes up a full NSEC3 record. Then, the next closer name needs to be covered in an NSEC3 record. Finally, an NSEC3 must say something about whether wildcard expansion was possible. That makes three to tango.",
      "ja": "元の質問に戻って来る：なぜ我々は要求された名前を否定するために、3つのNSEC3までのレコードを必要ですか？リゾルバは、明示的に「最も近いencloserは」何であるかを指示する必要があり、これは完全なNSEC3レコードを占めます。そして、次の近い名前がNSEC3レコードでカバーする必要があります。最後に、NSEC3は、ワイルドカードの拡張が可能であったかどうかについての何かを言わなければなりません。それはタンゴに3になります。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "DNSSEC does not protect against denial-of-service attacks, nor does it provide confidentiality. For more general security considerations related to DNSSEC, please see [RFC4033], [RFC4034], [RFC4035], and [RFC5155].",
      "ja": "DNSSECは、サービス拒否（DoS）攻撃から保護することはできません。また、機密性を提供しません。 DNSSECに関連するより一般的なセキュリティ上の考慮事項については、[RFC4033]、[RFC4034]、[RFC4035]、および[RFC5155]を参照してください。"
    },
    {
      "indent": 3,
      "text": "These RFCs are concise about why certain design choices have been made in the area of authenticated denial of existence. Implementations that do not correctly handle this aspect of DNSSEC create a severe hole in the security DNSSEC adds. This is specifically troublesome for secure delegations. If an attacker is able to deny the existence of a Delegation Signer (DS) record, the resolver cannot establish a chain of trust, and the resolver has to fall back to insecure DNS for the remainder of the query resolution.",
      "ja": "これらのRFCは、特定の設計の選択肢が存在の認証された否定の領域で行われてきた理由について簡潔です。正しくDNSSECのこの局面を処理しない実装はDNSSECは追加のセキュリティに深刻な穴を作成します。これは、安全な代表団のために特に面倒です。攻撃者は委任署名者（DS）レコードの存在を否定することができた場合、リゾルバは信頼の連鎖を確立することはできません、とリゾルバは、クエリの解決の残りのために戻って不安定なDNSにフォールする必要があります。"
    },
    {
      "indent": 3,
      "text": "This document aims to fill this \"documentation gap\" and provide would-be implementors and other interested parties with enough background knowledge to better understand authenticated denial of existence.",
      "ja": "この文書では、「ドキュメントのギャップ」を埋める、より良い存在の認証済みの拒否を理解するのに十分な背景知識を実装し、その他の利害関係者を自称提供することを目的とします。"
    },
    {
      "indent": 0,
      "text": "7. Acknowledgments",
      "section_title": true,
      "ja": "7.謝辞"
    },
    {
      "indent": 3,
      "text": "This document would not be possible without the help of Ed Lewis, Roy Arends, Wouter Wijngaards, Olaf Kolkman, Carsten Strotmann, Jan-Piet Mens, Peter van Dijk, Marco Davids, Esther Makaay, Antoin Verschuren, Lukas Wunner, Joe Abley, Ralf Weber, Geoff Huston, Dave Lawrence, Tony Finch, and Mark Andrews. Also valuable was the source code of Unbound (\"validator/val_nsec3.c\") [Unbound].",
      "ja": "この文書では、エド・ルイス、ロイ・アレンズ、はWouter Wijngaards、オラフKolkman、カールステンStrotmann、ヤン・ピエトメンズ、ピーター・バンダイク、マルコヴィッツ、エスター・マカーイ、Antoin Verschuren、ルーカスWunner、ジョーAbley、ラルフの助けなしには不可能であろうウェーバー、ジェフ・ヒューストン、デイブ・ローレンス、トニー・フィンチ、そしてマーク・アンドリュース。また、貴重な未結合のソースコード（「バリ/ val_nsec3.c」）結合していない]でした。"
    },
    {
      "indent": 3,
      "text": "Extensive feedback for early versions of this document was received from Karst Koymans.",
      "ja": "このドキュメントの初期バージョンのための広範なフィードバックはカルストKoymansから受信しました。"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8.参照文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC1034] Mockapetris, P., \"Domain names - concepts and facilities\", STD 13, RFC 1034, November 1987.",
      "ja": "[RFC1034] Mockapetris、P.、 \"ドメイン名 - 概念と設備\"、STD 13、RFC 1034、1987年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC2065] Eastlake, D. and C. Kaufman, \"Domain Name System Security Extensions\", RFC 2065, January 1997.",
      "ja": "[RFC2065]イーストレイク、D.およびC.カウフマン、 \"ドメインネームシステムのセキュリティ拡張機能\"、RFC 2065、1997年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC2308] Andrews, M., \"Negative Caching of DNS Queries (DNS NCACHE)\", RFC 2308, March 1998.",
      "ja": "[RFC2308]アンドリュース、M.、 \"DNSクエリのネガティブキャッシュ（DNS NCACHE）\"、RFC 2308、1998年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4033] Arends, R., Austein, R., Larson, M., Massey, D., and S. Rose, \"DNS Security Introduction and Requirements\", RFC 4033, March 2005.",
      "ja": "[RFC4033]アレンズ、R.、Austeinと、R.、ラーソン、M.、マッシー、D.、およびS.ローズ、 \"DNSセキュリティ序論と要件\"、RFC 4033、2005年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4034] Arends, R., Austein, R., Larson, M., Massey, D., and S. Rose, \"Resource Records for the DNS Security Extensions\", RFC 4034, March 2005.",
      "ja": "[RFC4034]アレンズ、R.、Austeinと、R.、ラーソン、M.、マッシー、D.、およびS.ローズ、 \"DNSセキュリティ拡張機能のためのリソースレコード\"、RFC 4034、2005年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4035] Arends, R., Austein, R., Larson, M., Massey, D., and S. Rose, \"Protocol Modifications for the DNS Security Extensions\", RFC 4035, March 2005.",
      "ja": "[RFC4035]アレンズ、R.、Austeinと、R.、ラーソン、M.、マッシー、D.、およびS.ローズ、 \"DNSセキュリティ拡張のためのプロトコル変更\"、RFC 4035、2005年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4592] Lewis, E., \"The Role of Wildcards in the Domain Name System\", RFC 4592, July 2006.",
      "ja": "[RFC4592]ルイス、E.、 \"ドメインネームシステムにおけるワイルドカードの役割\"、RFC 4592、2006年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC4648] Josefsson, S., \"The Base16, Base32, and Base64 Data Encodings\", RFC 4648, October 2006.",
      "ja": "[RFC4648] Josefsson氏、S.、 \"Base16、Base32、およびBase64でデータエンコーディング\"、RFC 4648、2006年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC5155] Laurie, B., Sisson, G., Arends, R., and D. Blacka, \"DNS Security (DNSSEC) Hashed Authenticated Denial of Existence\", RFC 5155, March 2008.",
      "ja": "[RFC5155]ローリー、B.、シッソン、G.、アレンズ、R.、およびD. Blacka、 \"DNSセキュリティ（DNSSEC）存在のハッシュ認証拒否\"、RFC 5155、2008年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC6672] Rose, S. and W. Wijngaards, \"DNAME Redirection in the DNS\", RFC 6672, June 2012.",
      "ja": "\"DNSにDNAMEリダイレクション\" [RFC6672]ローズ、S.およびW. Wijngaards、RFC 6672、2012年6月。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[DNSEXT-NSEC2] Laurie, B., \"DNSSEC NSEC2 Owner and RDATA Format\", Work in Progress, October 2004.",
      "ja": "[DNSEXT-NSEC2]ローリー、B.、 \"DNSSEC NSEC2所有者とRDATAフォーマット\"、進歩、2004年10月に作業。"
    },
    {
      "indent": 3,
      "text": "[DNSEXT] Josefsson, S., \"Authenticating denial of existence in DNS with minimum disclosure\", Work in Progress, November 2000.",
      "ja": "[DNSEXT] Josefsson氏、S.、「最低限の開示とDNSでの存在の否定の認証」、進歩、2000年11月に作業。"
    },
    {
      "indent": 3,
      "text": "[DNSNR-RR] Arends, R., \"DNSSEC Non-Repudiation Resource Record\", Work in Progress, June 2004.",
      "ja": "[DNSNR-RR]アレンズ、R.、 \"DNSSEC否認防止リソースレコード\"、進歩、2004年6月での作業。"
    },
    {
      "indent": 3,
      "text": "[Err3441] RFC Errata, Errata ID 3441, RFC 5155, <http://www.rfc-editor.org>.",
      "ja": "【Err3441] RFCエラッタ、エラッタのID 3441、RFC 5155、<http://www.rfc-editor.org>。"
    },
    {
      "indent": 3,
      "text": "[RFC2535] Eastlake, D., \"Domain Name System Security Extensions\", RFC 2535, March 1999.",
      "ja": "[RFC2535]イーストレイク、D.、 \"ドメインネームシステムのセキュリティ拡張機能\"、RFC 2535、1999年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC3655] Wellington, B. and O. Gudmundsson, \"Redefinition of DNS Authenticated Data (AD) bit\", RFC 3655, November 2003.",
      "ja": "[RFC3655]ウェリントン、B.およびO.グドムンソン、RFC 3655、2003年11月 \"DNS認証されたデータ（AD）ビットの再定義\"。"
    },
    {
      "indent": 3,
      "text": "[RFC3755] Weiler, S., \"Legacy Resolver Compatibility for Delegation Signer (DS)\", RFC 3755, May 2004.",
      "ja": "[RFC3755]ワイラー、S.、 \"委任署名者のためのレガシーレゾルバの互換性（DS）\"、RFC 3755、2004年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC4470] Weiler, S. and J. Ihren, \"Minimally Covering NSEC Records and DNSSEC On-line Signing\", RFC 4470, April 2006.",
      "ja": "[RFC4470]ワイラー、S.とJ. Ihren、 \"最低限カバリングNSECレコードとDNSSECオンライン署名\"、RFC 4470、2006年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC4956] Arends, R., Kosters, M., and D. Blacka, \"DNS Security (DNSSEC) Opt-In\", RFC 4956, July 2007.",
      "ja": "[RFC4956]アレンズ、R.、Kosters、M.、およびD. Blacka、 \"DNSセキュリティ（DNSSEC）オプトイン\"、RFC 4956、2007年7月。"
    },
    {
      "indent": 3,
      "text": "[Unbound] NLnet Labs, \"Unbound: a validating, recursive, and caching DNS resolver\", 2006, <http://unbound.net>.",
      "ja": "[結合していない] NLnet Labs社、 \"結合していない：検証、再帰的、およびキャッシュDNSリゾルバ\"、2006年、<http://unbound.net>。"
    },
    {
      "indent": 3,
      "text": "[phreebird] Kaminsky, D., \"Phreebird: a DNSSEC proxy\", January 2011, <http://dankaminsky.com/phreebird/>.",
      "ja": "[phreebird]カミンスキー、D.、 \"Phreebird：DNSSECプロキシ\"、2011年1月、<http://dankaminsky.com/phreebird/>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Online Signing: Minimally Covering NSEC Records",
      "ja": "付録A.オンライン署名：最低限カバーリングNSECレコード"
    },
    {
      "indent": 3,
      "text": "An NSEC record lists the next existing name in a zone and thus makes it trivial to retrieve all the names from the zone. This can also be done with NSEC3, but an adversary will then retrieve all the hashed names. With DNSSEC online signing, zone walking can be prevented by faking the next owner name.",
      "ja": "NSECレコードは、ゾーン内の次の既存の名前が一覧表示されますので、それは些細なゾーンからすべての名前を検索することができます。また、これはNSEC3で行うことができますが、敵は、すべてのハッシュ化された名前を取得します。 DNSSECのオンライン署名では、ゾーンウォーキングは、次の所有者名を偽造することによって防止することができます。"
    },
    {
      "indent": 3,
      "text": "To prevent retrieval of the next owner name with NSEC, a different, non-existing (according to the existence rules in [RFC4592], Section 2.2) name is used. However, not just any name can be used because a validator may make assumptions about the size of the span the NSEC record covers. The span must be large enough to cover the QNAME but not too large that it covers existing names.",
      "ja": "、NSECと次の所有者名の検索を防ぐ異なる、非存在（[RFC4592]に存在規則に従って、セクション2.2）名ために使用されます。バリデータがNSECレコードカバースパンの大きさについての仮定を行う可能性があるため、しかし、だけでなく、任意の名前を使用することができます。スパンは、QNAMEをカバーするのに十分な大きさが、それは既存の名前をカバーすることはないが大きすぎなければなりません。"
    },
    {
      "indent": 3,
      "text": "[RFC4470] introduces a scheme for generating minimally covering NSEC records. These records use a next owner name that is lexically closer to the NSEC owner name than the actual next owner name, ensuring that no existing names are covered. The next owner name can be derived from the QNAME with the use of so-called epsilon functions.",
      "ja": "[RFC4470]はNSECレコードを覆う最小限生成するためのスキームを導入します。これらのレコードは、既存の名前がカバーされていないことを確認して、実際の次の所有者名よりNSEC所有者名を辞書的に近い次の所有者名を使用します。次の所有者名は、いわゆるイプシロン機能を用いて、QNAMEに由来することができます。"
    },
    {
      "indent": 3,
      "text": "For example, to deny the existence of \"b.example.org\" in the zone from Section 3.2, the following NSEC record could have been generated:",
      "ja": "たとえば、3.2節からゾーンの「b.example.org」の存在を否定するために、以下のNSECレコードが生成されている可能性が："
    },
    {
      "indent": 3,
      "text": "a.example.org. NSEC c.example.org. RRSIG NSEC",
      "ja": "a.example.org。 NSECのc.example.org。 RRSIG NSEC"
    },
    {
      "indent": 3,
      "text": "This record also proves that \"b.example.org\" also does not exist, but an adversary _cannot_ use the next owner name in a zone-walking attack. Note the type bitmap only has the RRSIG and NSEC set because [RFC4470] states:",
      "ja": "このレコードはまた、「b.example.org」も存在していないことを証明しているが、敵はゾーン歩行攻撃で次の所有者名を使用し_cannot_。 [RFC4470]は述べているので、タイプのビットマップのみRRSIGとNSECセットを持って注意してください："
    },
    {
      "indent": 6,
      "text": "The generated NSEC record's type bitmap MUST have the RRSIG and NSEC bits set and SHOULD NOT have any other bits set.",
      "ja": "生成されたNSECレコードの種類のビットマップは、RRSIGとNSECビットが設定されていなければなりません、そして、設定された任意の他のビットを持つべきではありません。"
    },
    {
      "indent": 3,
      "text": "This is because the NSEC records may appear at names that did not exist before the zone was signed. In this case, however, \"a.example.org\" exists with other RR types, and we could have also set the A and TXT types in the bitmap.",
      "ja": "NSECレコードはゾーンが署名される前に存在していなかった名前で表示される可能性があるためです。しかし、この場合には、「a.example.orgは、」他のRRタイプで存在し、我々はまた、ビットマップでAとTXTタイプを設定している可能性があります。"
    },
    {
      "indent": 3,
      "text": "Because DNS ordering is very strict, the span should be shortened to a minimum. In order to do so, the last character in the leftmost label of the NSEC owner name needs to be decremented, and the label must be filled with octets of value 255 until the label length reaches the maximum of 63 octets. The next owner name is the QNAME with a leading label with a single null octet added. This gives the following minimally covering record for \"b.example.org\": a\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255 \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255 \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255 \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255.example.org. ( NSEC \\000.b.example.org. RRSIG NSEC )",
      "ja": "DNSの順序が非常に厳格であるため、スパンは最小限に短縮する必要があります。そうするためには、NSEC所有者名の左端のラベルの最後の文字を減算する必要があり、ラベルの長さが63オクテットの最大値に達するまで、ラベルは、値255のオクテットで満たされなければなりません。次の所有者名は、単一のヌルオクテットを持つ有力なラベルとQNAMEが追加されています。これは、 \"b.example.org\" のために、以下の最低限カバーのレコードを与える：255 \\ \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ \\ 255 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ 255 \\ \\ 255.example.org。 （NSEC \\ 000.b.example.org。RRSIG NSEC）"
    },
    {
      "indent": 0,
      "text": "Appendix B. Online Signing: NSEC3 White Lies",
      "ja": "付録B.オンライン署名：NSEC3白い嘘"
    },
    {
      "indent": 3,
      "text": "The same principle of minimally covering spans can be applied to NSEC3 records. This mechanism has been dubbed \"NSEC3 White Lies\" when it was implemented in Phreebird [phreebird]. Here, the NSEC3 owner name is the hash of the QNAME minus one, and the next owner name is the hash of the QNAME plus one.",
      "ja": "最小限のスパンをカバーするのと同じ原理がNSEC3レコードに適用することができます。このメカニズムは、それがPhreebird [phreebird]で実装されたときに「NSEC3ホワイトは嘘」と呼ばれています。ここでは、NSEC3の所有者名がQNAMEのマイナス1のハッシュであり、次の所有者名がQNAMEプラスワンのハッシュです。"
    },
    {
      "indent": 3,
      "text": "The following NSEC3 white lie denies \"b.example.org\" (recall that this hashes to \"iuu8l5lmt76jeltp0bir3tmg4u3uu8e7\"):",
      "ja": "次NSEC3白い嘘（これは「iuu8l5lmt76jeltp0bir3tmg4u3uu8e7」にハッシュことを思い出してください）「b.example.org」を拒否します。"
    },
    {
      "indent": 3,
      "text": "iuu8l5lmt76jeltp0bir3tmg4u3uu8e6.example.org. ( NSEC3 1 0 2 DEAD IUU815LMT76JELTP0BIR3TMG4U3UU8E8 )",
      "ja": "iuu8l5lmt76jeltp0bir3tmg4u3uu8e6.example.org。 （NSEC3 1 0 2 DEAD IUU815LMT76JELTP0BIR3TMG4U3UU8E8）"
    },
    {
      "indent": 3,
      "text": "The type bitmap is empty in this case. If the hash of \"b.example.org\" - 1 is a collision with an existing name, the bitmap should have been filled with the RR types that exist at that name. This record actually denies the existence of the next closer name (which is conveniently \"b.example.org\"). Of course, the NSEC3 records to match the closest encloser and the one to deny the wildcard are still required. These can be generated too:",
      "ja": "タイプビットマップは、この場合には空です。 「b.example.org」のハッシュ場合 -  1は、既存の名前との衝突で、ビットマップは、その名前で存在するRRタイプで満たされている必要があります。このレコードは実際には（便利な「b.example.org」である）次に、より近い名前の存在を否定します。もちろん、NSEC3レコードは最も近いencloser、まだ必要とされるワイルドカードを否定するものと一致します。これらはあまりにも生成することができます。"
    },
    {
      "indent": 3,
      "text": "# Matching `example.org`: `15bg9l6359f5ch23e34ddua6n1rihl9h` 15bg9l6359f5ch23e34ddua6n1rihl9h.example.org. ( NSEC3 1 0 2 DEAD 15BG9L6359F5CH23E34DDUA6N1RIHL9I NS SOA RRSIG DNSKEY NSEC3PARAM )",
      "ja": "＃マッチング `example.org`：` 15bg9l6359f5ch23e34ddua6n1rihl9h` 15bg9l6359f5ch23e34ddua6n1rihl9h.example.org。 （NSEC3 1 0 2 DEAD 15BG9L6359F5CH23E34DDUA6N1RIHL9I NS SOA RRSIG DNSKEY NSEC3PARAM）"
    },
    {
      "indent": 3,
      "text": "# Covering `*.example.org`: `22670trplhsr72pqqmedltg1kdqeolb7` 22670trplhsr72pqqmedltg1kdqeolb6.example.org.( NSEC3 1 0 2 DEAD 22670TRPLHSR72PQQMEDLTG1KDQEOLB8 )",
      "ja": "`22670trplhsr72pqqmedltg1kdqeolb7` 22670trplhsr72pqqmedltg1kdqeolb6.example.org（NSEC3 1 0 2 DEAD 22670TRPLHSR72PQQMEDLTG1KDQEOLB8）：` * .example.org`をカバー＃"
    },
    {
      "indent": 0,
      "text": "Appendix C. List of Hashed Owner Names",
      "ja": "ハッシュされたオーナーネームの付録C.一覧"
    },
    {
      "indent": 3,
      "text": "The following owner names are used in this document. The origin for these names is \"example.org\".",
      "ja": "次の所有者名は、このドキュメントで使用されています。これらの名前の由来は、「example.org」です。"
    },
    {
      "indent": 9,
      "text": "+----------------+-------------------------------------+\n| Original Name  | Hashed Name                         |\n+----------------+-------------------------------------+\n| \"a\"            | \"04sknapca5al7qos3km2l9tl3p5okq4c\"  |\n| \"1.h\"          | \"117gercprcjgg8j04ev1ndrk8d1jt14k\"  |\n| \"@\"            | \"15bg9l6359f5ch23e34ddua6n1rihl9h\"  |\n| \"h\"            | \"1avvqn74sg75ukfvf25dgcethgq638ek\"  |\n| \"*\"            | \"22670trplhsr72pqqmedltg1kdqeolb7\"  |\n| \"3\"            | \"75b9id679qqov6ldfhd8ocshsssb6jvq\"  |\n| \"2\"            | \"7t70drg4ekc28v93q7gnbleopa7vlp6q\"  |\n| \"3.3\"          | \"8555t7qegau7pjtksnbchg4td2m0jnpj\"  |\n| \"d\"            | \"a6edkb6v8vl5ol8jnqqlt74qmj7heb84\"  |\n| \"*.2\"          | \"fbq73bfkjlrkdoqs27k5qf81aqqd7hho\"  |\n| \"b\"            | \"iuu8l5lmt76jeltp0bir3tmg4u3uu8e7\"  |\n| \"x.2\"          | \"ndtu6dste50pr4a1f2qvr1v31g00i2i1\"  |\n+----------------+-------------------------------------+",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Table 1: Hashed Owner Names for \"example.org\" in Hash Order",
      "ja": "表1：「example.org」のハッシュオーナーネームハッシュ注文で"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "R. (Miek) Gieben Google",
      "ja": "R.（Miek）Giebenグーグル"
    },
    {
      "indent": 3,
      "text": "EMail: miek@google.com",
      "ja": "メールアドレス：miek@google.com"
    },
    {
      "indent": 3,
      "text": "W. (Matthijs) Mekking NLnet Labs Science Park 400 Amsterdam 1098 XH NL",
      "ja": "W.（Matthijs）Mekking NLnet Labsのサイエンスパーク400 1098 XHアムステルダム、NL"
    },
    {
      "indent": 3,
      "text": "EMail: matthijs@nlnetlabs.nl URI: http://www.nlnetlabs.nl/",
      "ja": "電子メール：matthijs@nlnetlabs.nl URI：http://www.nlnetlabs.nl/"
    }
  ]
}