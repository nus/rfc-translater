{
  "title": {
    "text": "RFC 7058 - Media Control Channel Framework (CFW) Call Flow Examples",
    "ja": "RFC 7058 - メディア制御チャネルフレームワーク（CFW）のコールフロー例"
  },
  "number": 7058,
  "created_at": "2019-10-28 04:09:08.390831+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                       A. Amirante\nRequest for Comments: 7058                          University of Napoli\nCategory: Informational                                      T. Castaldi\nISSN: 2070-1721                                               L. Miniero\n                                                                Meetecho\n                                                             S P. Romano\n                                                    University of Napoli\n                                                           November 2013",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Media Control Channel Framework (CFW) Call Flow Examples",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document provides a list of typical Media Control Channel Framework call flows. It aims at being a simple guide to the use of the interface between Application Servers and MEDIACTRL-based Media Servers, as well as a base reference document for both implementors and protocol researchers.",
      "ja": "この文書は、一般的なメディア制御チャネルフレームワークのコールフローのリストを提供します。これは、アプリケーション・サーバーとMEDIACTRLベースのメディアサーバーとの間のインタフェース、並びに実装とプロトコル研究の両方のための基本参照文書の使用に簡単なガイドであることを目的とします。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7058.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7058で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2013 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2013 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................4\n2. Conventions .....................................................5\n3. Terminology .....................................................5\n4. A Practical Approach ............................................6\n   4.1. State Diagrams .............................................6\n5. Control Channel Establishment ..................................10\n   5.1. COMEDIA Negotiation .......................................11\n   5.2. SYNC ......................................................14\n   5.3. K-ALIVE ...................................................15\n   5.4. Wrong Behavior ............................................17\n6. Use-Case Scenarios and Examples ................................20\n   6.1. Echo Test .................................................27\n        6.1.1. Direct Echo Test ...................................28\n        6.1.2. Echo Test Based on Recording .......................30\n   6.2. Phone Call ................................................39\n        6.2.1. Direct Connection ..................................42\n        6.2.2. Conference-Based Approach ..........................44\n        6.2.3. Recording a Conversation ...........................51\n   6.3. Conferencing ..............................................57\n        6.3.1. Simple Bridging ....................................62\n        6.3.2. Rich Conference Scenario ...........................66\n        6.3.3. Coaching Scenario ..................................75\n        6.3.4. Sidebars ...........................................83\n        6.3.5. Floor Control ......................................93\n   6.4. Additional Scenarios ......................................99\n        6.4.1. Voice Mail ........................................100\n        6.4.2. Current Time ......................................107\n        6.4.3. DTMF-Driven Conference Manipulation ...............112\n7. Media Resource Brokering ......................................126\n   7.1. Publishing Interface .....................................127\n   7.2. Consumer Interface .......................................136\n        7.2.1. Query Mode ........................................137\n        7.2.2. Inline-Aware Mode .................................140\n        7.2.3. Inline-Unaware Mode ...............................155\n   7.3. Handling Media Dialogs ...................................157\n        7.3.1. Query and Inline-Aware Mode .......................157\n        7.3.2. Inline-Unaware Mode ...............................160\n        7.3.3. CFW Protocol Behavior .............................167\n8. Security Considerations .......................................170\n9. Acknowledgments ...............................................180\n10. References ...................................................180\n   10.1. Normative References ....................................180\n   10.2. Informative References ..................................181",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "This document provides a list of typical MEDIACTRL Media Control Channel Framework [RFC6230] call flows. The motivation for this comes from our implementation experience with the framework and its protocol. This drove us to write a simple guide to the use of the several interfaces between Application Servers and MEDIACTRL-based Media Servers, and a base reference document for other implementors and protocol researchers.",
      "ja": "この文書は、一般的なMEDIACTRLメディア制御チャネルフレームワーク[RFC6230]コールフローのリストを提供します。この動機は、フレームワークとそのプロトコルとの実装経験から来ています。これは、アプリケーションサーバーとMEDIACTRLベースのメディアサーバー、および他の実装とプロトコルの研究者のためのベース基準文書間の複数のインタフェースを使用する簡単なガイドを書くために私達を運転しました。"
    },
    {
      "indent": 3,
      "text": "Following this spirit, this document covers several aspects of the interaction between Application Servers and Media Servers. However, in the context of this document, the call flows almost always depict the interaction between a single Application Server (which, for the sake of conciseness, is called the AS from now on) and a single Media Server (MS). In Section 7, some flows involving more entities by means of a Media Resource Broker compliant with [RFC6917] are presented. To help readers understand all the flows (as related to both SIP dialogs and Media Control Channel Framework (CFW) transactions), the domains hosting the AS and the MS in all the scenarios are called 'as.example.com' and 'ms.example.net', respectively, per [RFC2606]. The flows will often focus more on the CFW [RFC6230] interaction, rather than on the other involved protocols, e.g., SIP [RFC3261], the Session Description Protocol (SDP) [RFC3264], or RTP [RFC3550].",
      "ja": "この精神に続き、この文書は、アプリケーションサーバーとメディアサーバーの間の相互作用のいくつかの側面をカバーしています。しかし、この文書の文脈では、コールはほとんど常に（簡潔にするために、今からASと呼ばれる、）単一のApplication Serverおよび単一のメディアサーバ（MS）の間の相互作用を示している流れ。第7節では、いくつかのフローは、[RFC6917]に準拠したメディアリソースブローカーによって複数のエンティティを含む提示されています。 （SIPダイアログとメディア制御チャネルフレームワーク（CFW）トランザクションの両方に関連して）読者がすべてのフローを理解しやすくするために、すべてのシナリオでASとMSをホスティングしているドメインを「as.example.com」と「MSと呼ばれています。 [RFC2606]あたりそれぞれexample.net」、。フローはしばしばCFW [RFC6230]の相互作用ではなく、他の関与のプロトコル、例えば、SIP [RFC3261]、セッション記述プロトコル（SDP）[RFC3264]、またはRTP [RFC3550]にもっと焦点を当てます。"
    },
    {
      "indent": 3,
      "text": "In the next paragraphs, a brief overview of our implementation approach is described, with particular focus on protocol-related aspects. This involves state diagrams that depict both the client side (the AS) and the server side (the MS). Of course, this section is not at all to be considered a mandatory approach to the implementation of the framework. It is only meant to help readers understand how the framework works from a practical point of view.",
      "ja": "次の段落では、我々の実装アプローチの概要は、プロトコル関連の側面に特に着目して、記載されています。これは、クライアント側（AS）とサーバ側（MS）の両方を示す状態図を含みます。もちろん、このセクションは、すべてのフレームワークの実装に義務的なアプローチと考えるべきではないです。唯一の読者は、フレームワークは、実用的な観点からどのように動作するかを理解するのに役立つことを意図しています。"
    },
    {
      "indent": 3,
      "text": "Once done with these preliminary considerations, in the subsequent sections real-life scenarios are addressed. In this context, first of all, the establishment of the Control Channel is dealt with. After that, some use-case scenarios involving the most typical multimedia applications are depicted and described.",
      "ja": "一度これらの予備的な検討事項で行われ、以降のセクションでは、実生活のシナリオに対処しています。この文脈では、まず、制御チャネルの確立が取り扱われています。その後、最も一般的なマルチメディア・アプリケーションを含むいくつかのユース・ケース・シナリオが示され、記載されています。"
    },
    {
      "indent": 3,
      "text": "It is worth pointing out that this document is not meant in any way to be a self-contained guide to implementing a MEDIACTRL-compliant framework. The specifications are a mandatory read for all implementors, especially because this document follows their guidelines but does not delve into the details of every aspect of the protocol.",
      "ja": "これは、この文書はMEDIACTRL準拠のフレームワークを実装する自己完結型のガイドであることをどのような方法で意図されていないことを指摘する価値があります。仕様はこの文書は彼らのガイドラインに従いますが、プロトコルのあらゆる側面の詳細を掘り下げていない、特にため、すべての実装のために必須の読み取りです。"
    },
    {
      "indent": 0,
      "text": "2. Conventions",
      "section_title": true,
      "ja": "2.表記"
    },
    {
      "indent": 3,
      "text": "Note that due to RFC formatting conventions, SIP/SDP and CFW lines whose content exceeds 72 characters are split across lines. This line folding is marked by a backslash at the end of the first line. This backslash, the preceding whitespace, the following CRLF, and the whitespace beginning the next line would not appear in the actual protocol contents. Note also that the indentation of the XML content is only provided for readability. Actual messages will follow strict XML syntax, which allows, but does not require, indentation. Due to the same limit of 72 characters per line, this document also sometimes splits the content of XML elements across lines. Please be aware that when this happens, no whitespace is actually meant to be at either the beginning or the end of the element content.",
      "ja": "RFCフォーマット規則、その内容が72個の文字を行に分割されている超えるSIP / SDPとCFW線ことに留意されたいです。このライン折は、最初の行の末尾にバックスラッシュでマークされています。次の行を開始する。このバックスラッシュ、先行する空白、以下CRLF、および空白文字は、実際のプロトコルの内容には表示されません。 XMLコンテンツのインデントだけ読みやすくするために提供されていることにも注意してください。実際のメッセージは、インデントを可能に厳格なXML構文を、従いますが、必要ありません。行当たり72文字の同一の限界のため、この文書はまた、時々ラインを横切るXML要素の内容を分割します。この問題が発生したとき、何の空白が実際に先頭または要素コンテンツの最後のいずれかであることを意味していないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "Note also that a few diagrams show arrows that go from a network entity to itself. It's worth pointing out that such arrows do not represent any transaction message but are rather meant as an indication to the reader that the involved network entity made a decision, within its application logic, according to the input it previously received.",
      "ja": "いくつかの図は、それ自体にネットワークエンティティから行く矢印を示すことにも注意してください。このような矢印は任意の取引メッセージを表すものではないむしろ関与するネットワークエンティティは、それが以前に受信した入力に応じて、そのアプリケーションロジック内で、決定した読者に示すものとして意図されていることを指摘する価値があります。"
    },
    {
      "indent": 0,
      "text": "3. Terminology",
      "section_title": true,
      "ja": "3.用語"
    },
    {
      "indent": 3,
      "text": "This document uses the same terminology as [RFC6230], [RFC6231], [RFC6505], and [RFC6917]. The following terms are only a summarization of the terms most commonly used in this context and are mostly derived from the terminology used in the related documents:",
      "ja": "このドキュメントは[RFC6230]と同じ用語を使用して、[RFC6231]、[RFC6505]及び[RFC6917]。次の用語は、最も一般的に、この文脈で使用される用語の唯一の要約であり、ほとんどが関連文書で使用される用語に由来しています。"
    },
    {
      "indent": 3,
      "text": "COMEDIA: connection-oriented media (i.e., TCP and Transport Layer Security (TLS)). Also used to signify the support in SDP for connection-oriented media and the RFCs that define that support ([RFC4145] and [RFC4572]).",
      "ja": "COMEDIA：接続指向のメディア（すなわち、TCPおよびトランスポート層セキュリティ（TLS））。また、接続指向のメディアおよびそのサポート（[RFC4145]及び[RFC4572]）を定義するRFCのSDPにサポートを示すために使用されます。"
    },
    {
      "indent": 3,
      "text": "Application Server: an entity that requests media processing and manipulation from a Media Server; typical examples are Back-to-Back User Agents (B2BUAs) and endpoints requesting manipulation of a third party's media stream.",
      "ja": "アプリケーションサーバー：メディアサーバーからメディア処理や操作を要求するエンティティ。典型的な例は、バックツーバック第三者のメディアストリームの操作を要求するユーザエージェント（型B2BUA）とエンドポイントです。"
    },
    {
      "indent": 3,
      "text": "Media Server: an entity that performs a service, such as media processing, on behalf of an Application Server; typical provided functions are mixing, announcement, tone detection and generation, and play and record services.",
      "ja": "メディアサーバー：アプリケーションサーバーに代わって、そのようなメディア処理などのサービスを、実行するエンティティ。典型的な提供される機能は、アナウンス、トーン検出と生成を混合し、再生および録音サービスされています。"
    },
    {
      "indent": 3,
      "text": "Control Channel: a reliable connection between an Application Server and a Media Server that is used to exchange framework messages.",
      "ja": "制御チャネル：Application Serverとフレームワークのメッセージを交換するために使用されたメディアサーバー間の確実な接続。"
    },
    {
      "indent": 3,
      "text": "VCR controls: runtime control of aspects of an audio playback like speed and volume, via dual-tone multi-frequency (DTMF) signals sent by the user, in a manner that resembles the functions of a VCR (video cassette recorder) controller.",
      "ja": "VCRコントロール：デュアルトーンマルチ周波数介し速度及び体積等のオーディオ再生の態様のランタイム制御は、（DTMF）信号は、VCR（ビデオカセットレコーダ）コントローラの機能に似ているように、ユーザによって送信されます。"
    },
    {
      "indent": 0,
      "text": "4. A Practical Approach",
      "section_title": true,
      "ja": "4.実践的アプローチ"
    },
    {
      "indent": 3,
      "text": "In this document, we embrace an engineering approach to the description of a number of interesting scenarios that can be realized through the careful orchestration of the Media Control Channel Framework entities, namely the Application Server and the Media Server. We will demonstrate, through detailed call flows, how a variegated bouquet of services (ranging from very simple scenarios to much more complicated examples) can be implemented with the functionality currently offered, within the main MEDIACTRL framework, by the Control Packages that have been made available to date. The document aims at being a useful guide for those interested in investigating the inter-operation among MEDIACTRL components, as well as being a base reference document for application developers willing to build advanced services on top of the base infrastructure made available by the framework.",
      "ja": "この文書では、我々は、メディア制御チャネルフレームワークエンティティ、すなわちアプリケーションサーバーとメディアサーバーの慎重なオーケストレーションによって実現することができ、興味深いシナリオの数の説明に工学的アプローチを採用します。私たちは、（非常に単純なシナリオからはるかに複雑な例までの範囲）サービスの多彩な花束が行われている制御パッケージにより、メインMEDIACTRLの枠組みの中で、現在提供される機能を実装する方法、詳細なコールフローを通じて、デモンストレーションを行います現在まで利用可能。文書はMEDIACTRLコンポーネント間の相互動作を調査に興味のある人のために有用なガイドであること、ならびにフレームワークによって利用可能にベース・インフラストラクチャの上に高度なサービスを構築するために喜んで、アプリケーション開発者のための基本参照文書であることを目的とします。"
    },
    {
      "indent": 0,
      "text": "4.1. State Diagrams",
      "section_title": true,
      "ja": "4.1. ステートダイアグラム"
    },
    {
      "indent": 3,
      "text": "In this section, we present an \"informal\" view of the main MEDIACTRL protocol interactions, in the form of state diagrams. Each diagram is indeed a classical representation of a Mealy automaton, comprising a number of possible protocol states, indicated with rectangular boxes. Transitions between states are indicated through edges, with each edge labeled with a slash-separated pair representing a specific input together with the associated output (a dash in the output position means that, for that particular input, no output is generated from the automaton). Some of the inputs are associated with MEDIACTRL protocol messages arriving at a MEDIACTRL component while it is in a certain state. This is the case for 'CONTROL', 'REPORT' (in its various \"flavors\" -- pending, terminate, etc.), '200', '202', and 'Error' (error messages correspond to specific numeric codes). Further inputs represent triggers arriving at the MEDIACTRL automaton from the upper layer, namely the Application Programming Interface used by programmers while implementing MEDIACTRL-enabled services. Such inputs have been indicated with the term 'API' followed by the message that the API itself is triggering (as an example, 'API terminate' is a request to send a 'REPORT' message with a status of 'terminate' to the peering component).",
      "ja": "このセクションでは、我々は、状態図の形で、主MEDIACTRLプロトコル相互作用の「非公式」ビューを提示します。各図は、長方形のボックスで示さ可能プロトコル状態の数を含む、実際ミーリーオートマトンの古典的な表現です。状態間の遷移が関連出力と一緒に特定の入力を表すスラッシュで区切られたペアで標識された各エッジにエッジを介して示されている（出力位置におけるダッシュは、その特定の入力に対して、何も出力がオートマトンから生成されていない、ことを意味します） 。入力の一部は、それが特定の状態にある間MEDIACTRL成分に到達MEDIACTRLプロトコル・メッセージに関連付けられています。 （エラーメッセージが特定の数値コードに対応） - （保留中など、終了その様々な「フレーバー」）には、「200」、「202」、および「エラー」これは、「CONTROL」、「REPORT」の場合であります。さらなる入力は、上層、MEDIACTRL対応サービスを実現しながら、プログラマが使用すなわちアプリケーション・プログラミング・インタフェースからMEDIACTRLオートマトンに到着トリガーを表します。そのような入力は、API自体は、一例として（トリガされるメッセージが続く用語「API」、「APIを終了」と示されてきたことピアリングに「終了」の状態と「報告」メッセージを送信するための要求であります成分）。"
    },
    {
      "indent": 3,
      "text": "Four diagrams are provided. Two of them (Figures 1 and 2) describe normal operation of the framework. Figure 3 contains two diagrams describing asynchronous event notifications. Figure 1 embraces the MS perspective, whereas Figure 2 shows the AS side. The upper part of Figure 3 shows how events are generated, on the MS side, by issuing a CONTROL message addressed to the AS; events are acknowledged by the AS through standard 200 responses. Hence, the behavior of the AS, which mirrors that of the MS, is depicted in the lower part of the figure.",
      "ja": "四つの図が提供されています。それらの2つ（図1及び2）は、フレームワークの正常な動作を記述しています。図3は、非同期イベント通知を記述する2つの図を含んでいます。図2は、AS側を示し、一方、図1は、MSの観点を包含する。図3の上部には、イベントは、制御メッセージは、AS宛発行することにより、MS側で、生成される方法を示す図です。イベントは、標準の200の応答を通じてASによって確認されています。したがって、MSのミラーASの動作は、図の下部に示されています。"
    },
    {
      "indent": 3,
      "text": "Coming back to Figure 1, the diagram shows that the MS activates upon reception of CONTROL messages coming from the AS. The CONTROL messages instruct the MS regarding the execution of a specific command that belongs to one of the available Control Packages. The execution of the received command can either be quick or require some time. In the former case, right after completing its operation, the MS sends back to the AS a 200 message, which basically acknowledges correct termination of the invoked task. In the latter case, the MS first sends back an interlocutory 202 message containing a 'Timeout' value, which lets it enter a different state ('202' sent). While in the new state, the MS keeps on performing the invoked task. If the task does not complete in the provided timeout, the server will update the AS on the other side of the Control Channel by periodically issuing 'REPORT update' messages; each such message has to be acknowledged by the AS (through a '200' response). Eventually, when the MS is done with the required service, it sends to the AS a 'REPORT terminate' message. The transaction is concluded when the AS acknowledges receipt of the message. It is worth pointing out that the MS may send a 202 response after it determines that the request does not contain any errors that cannot be reported in a later REPORT terminate request instead. After the MS sends a 202 response, any error that it (or the API) finds in the request is reported in the final REPORT terminate request. Again, the behavior of the AS, as depicted in Figure 2, mirrors the above-described actions undertaken at the MS side. The figures also show the cases in which transactions cannot be successfully completed due to abnormal conditions; such conditions always trigger the creation and transmission of a specific 'Error' message that, as mentioned previously, is reported as a numeric error code.",
      "ja": "図1に戻って、図は、MSがASからの制御メッセージを受信すると活性化することを示しています。 CONTROLメッセージは、利用可能なコントロールパッケージのいずれかに属する特定のコマンドの実行に関するMSを指示します。受信したコマンドの実行は、いずれかの速さや、いくつかの時間を必要とすることができます。前者の場合、右のその動作を完了した後、MSは、基本的に起動タスクの正しい終了を承認200メッセージ、ASに返信します。後者の場合には、MSは最初に、異なる状態に入ることができます「タイムアウト」値を含む中間的202メッセージを返信する（「202」が送信されます）。新しい状態にある一方で、MSは、呼び出されたタスクを実行し続けています。タスクが提供タイムアウトに完了しない場合、サーバーは、定期的に「REPORT更新」メッセージを発行することによって制御チャネルの反対側にASを更新します。各そのようなメッセージは、（「200」応答を介して）ASによって承認されなければなりません。 MSが必要なサービスで行われたときに最終的に、それは「REPORT終了」メッセージと送信します。 ASは、メッセージの受信を確認すると、トランザクションが終了します。それは、要求が代わりに要求を終了後のレポートで報告することができないすべてのエラーが含まれていないことを決定した後、MSは202応答を送信することを指摘する価値があります。 MSは、202応答を送信した後に、それ（またはAPI）が要求に見つけたエラーは最終報告要求を終了で報告されています。再び、図2に示すようにASの動作は、MS側で行われ、上述した操作を反映します。図面はまた、トランザクションが正常、異常状態に完了できない場合を示す図です。このような状況は、常に、前述のように、数値のエラー・コードとして報告されている特定の「エラー」メッセージの作成と送信をトリガ。"
    },
    {
      "indent": 3,
      "text": "+------------------+  CONTROL/-  +------------------+ API 202/202\n| Idle/'terminate' |------------>| CONTROL received |---------+\n+------------------+             +------------------+         |\n  ^          ^   ^   API 200/200    |     |                   |\n  |          |   |                  |     |                   |\n  |          |   +------------------+     |                   |\n  | 200/-    |      API Error/Error       |                   |\n  |          +----------------------------+                   |\n  |                                                           |\n+-------------+                                               |\n| Waiting for |                                               v\n|  last 200   |<------------------------+             +------------+\n+-------------+                         |             | '202' sent |\n     ^                                  |             +------------+\n     |                                  |               |     |\n     |                                  +---------------+     |\n     | API terminate/                     API terminate/      |\n     | REPORT terminate                   REPORT terminate    |\n     |                                                        |\n   +--------------------+                                     |\n   | 'update' confirmed |------+                  API update/ |\n   +--------------------+      |                REPORT update |\n             ^                 | API update/                  |\n             |                 | REPORT update                |\n             |                 v                              |\n             |   200/-      +---------------+                 |\n             +--------------| 'update' sent |<----------------+\n                            +---------------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 1: Media Server CFW State Diagram",
      "ja": "図1：メディアサーバーCFW状態図"
    },
    {
      "indent": 0,
      "text": "                 +--------------+   202/-   +--------------+\n             +-->| CONTROL sent |---------->| 202 received |\n             |   +--------------+           +--------------+\n             |        |       |                 |     |\n             |        |       |                 |     |\nAPI CONTROL/ |        | 200/- |                 |     |\nsend CONTROL |        |       |                 |     |\n             |        |       | Error/          |     |\n+------------------+  |       | Error           |     |\n| Idle/'terminate' |<-+       |                 |     |\n+------------------+<---------+                 |     |\n    ^          ^                                |     |\n    |          |            REPORT 'terminate'/ |     |\n    |          |                       send 200 |     |\n    |          +--------------------------------+     | REPORT 'update'/\n    |                                                 | send 200\n    | REPORT 'terminate'/                             |\n    | send 200                                        |\n    |                     +-----------+               |\n    +---------------------| 'update ' |<--------------+\n                          +-----------+\n                            ^      |\n                            |      | REPORT 'update'/\n                            +------+ send 200",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 2: Application Server CFW State Diagram",
      "ja": "図2：アプリケーションサーバーCFW状態図"
    },
    {
      "indent": 19,
      "text": "                 +--------------+\n             +-->| CONTROL sent |\n             |   +--------------+\n             |           |\n             |           |\nAPI CONTROL/ |           | 200/-\nsend CONTROL |           |\n             |           |\n+------------------+     |\n| Idle/'terminate' |<----+\n+------------------+",
      "raw": true
    },
    {
      "indent": 26,
      "text": "(Media Server perspective)",
      "ja": "（メディアサーバーの観点）"
    },
    {
      "indent": 11,
      "text": "+------------------+  CONTROL/-  +------------------+\n| Idle/'terminate' |------------>| CONTROL received |\n+------------------+             +------------------+\n             ^       API 200/200          |\n             |                            |\n             +----------------------------+",
      "raw": true
    },
    {
      "indent": 23,
      "text": "(Application Server perspective)",
      "ja": "（アプリケーションサーバの視点）"
    },
    {
      "indent": 23,
      "text": "Figure 3: Event Notifications",
      "ja": "図3：イベント通知"
    },
    {
      "indent": 0,
      "text": "5. Control Channel Establishment",
      "section_title": true,
      "ja": "5.制御チャネルの確立"
    },
    {
      "indent": 3,
      "text": "As specified in [RFC6230], the preliminary step to any interaction between an AS and an MS is the establishment of a Control Channel between the two. As explained in the next subsection, this is accomplished by means of a connection-oriented media (COMEDIA) [RFC4145] [RFC4572] negotiation. This negotiation allows a reliable connection to be created between the AS and the MS. It is here that the AS and the MS agree on the transport-level protocol to use (TCP / Stream Control Transmission Protocol (SCTP)) and whether any application-level security is needed or not (e.g., TLS). For the sake of simplicity, we assume that an unencrypted TCP connection is negotiated between the two involved entities. Once they have connected, a SYNC message sent by the AS to the MS consolidates the Control Channel. An example of how a keep-alive message is triggered is also presented in the following paragraphs. For the sake of completeness, this section also includes a couple of common mistakes that can occur when dealing with the Control Channel establishment.",
      "ja": "[RFC6230]で指定されるように、ASとMSとの間の任意の相互作用の予備的ステップは、二つの間の制御チャネルの確立です。次のサブセクションで説明したように、これは、接続指向のメディア（COMEDIA）[RFC4145]、[RFC4572]のネゴシエーションによって達成されます。この交渉は信頼性の高い接続がASとMSの間で作成することができます。これは、ASとMSが使用するトランスポートレベルのプロトコルに同意することをここにある（TCP /ストリーム制御伝送プロトコル（SCTP））および任意のアプリケーションレベルのセキュリティが必要とされているかどうか（例えば、TLS）。簡単にするために、我々は暗号化されていないTCP接続が2関与するエンティティ間で交渉されていることを前提としています。彼らは接続したら、MSにASによって送信されるSYNCメッセージは、制御チャネルを統合します。キープアライブメッセージがトリガされた方法の例は、次の段落に提示されています。完全を期すために、このセクションでは、制御チャネルの確立を扱うときに発生する可能性が一般的な間違いのカップルが含まれています。"
    },
    {
      "indent": 15,
      "text": "AS                              MS\n|                               |\n| INVITE (COMEDIA)              |\n|------------------------------>|\n|                  100 (Trying) |\n|<------------------------------|\n|              200 OK (COMEDIA) |\n|<------------------------------|\n| ACK                           |\n|------------------------------>|\n|                               |\n|==============================>|\n| TCP CONNECT (CTRL CHANNEL)    |\n|==============================>|\n|                               |\n| SYNC (Dialog-ID, etc.)        |\n|+++++++++++++++++++++++++++++>>|\n|                               |--+\n|                               |  | Check SYNC\n|                               |<-+\n|                        200 OK |\n|<<+++++++++++++++++++++++++++++|\n|                               |\n.                               .\n.                               .",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 4: Control Channel Establishment",
      "ja": "図4：制御チャネルの確立"
    },
    {
      "indent": 0,
      "text": "5.1. COMEDIA Negotiation",
      "section_title": true,
      "ja": "5.1.  COMEDY交渉"
    },
    {
      "indent": 3,
      "text": "As a first step, the AS and the MS establish a Control SIP dialog. This is usually originated by the AS itself. The AS generates a SIP INVITE message containing in its SDP body information about the TCP connection it wants to establish with the MS. In the provided example (see Figure 5 and the attached call flow), the AS wants to actively open a new TCP connection, which on its side will be bound to port 5757. If the request is fine, the MS answers by communicating to the AS the transport address to connect to in order to establish the TCP connection. In the provided example, the MS will listen on port 7575. Once this negotiation is over, the AS can effectively connect to the MS.",
      "ja": "最初のステップとして、ASとMSは、Control SIPダイアログを確立します。これは通常、AS自身から発信されます。 ASは、それがMSに確立することを望んでいるTCP接続に関するそのSDPボディ情報に含むSIP INVITEメッセージを生成します。提供される例では（図5及び付属のコールフローを参照してください）、ASは、積極的に通信することにより、MSの答えを要求に問題がない場合は、その側のポート5757.にバインドされる新しいTCP接続をオープンしたいですTCPコネクションを確立するためにに接続するためのトランスポートアドレスAS。提供された例では、MSは、この交渉が終了すると、ASが効果的にMSに接続できるポート7575.に耳を傾けます。"
    },
    {
      "indent": 3,
      "text": "The negotiation includes additional attributes. The 'cfw-id' attribute is the most important, since it specifies the Dialog-ID, which in turn will be subsequently referred to by both the AS and the MS as specified in [RFC6230].",
      "ja": "交渉は、追加の属性を含んでいます。それは[RFC6230]で指定された順番に、その後ASとMSの両方によって参照されるダイアログ-IDを指定するため、「CFW-ID」属性は、最も重要です。"
    },
    {
      "indent": 21,
      "text": "AS                              MS\n|                               |\n| 1. INVITE (COMEDIA)           |\n|------------------------------>|\n|               2. 100 (Trying) |\n|<------------------------------|\n|           3. 200 OK (COMEDIA) |\n|<------------------------------|\n| 4. ACK                        |\n|------------------------------>|\n|                               |\n|==============================>|\n| TCP CONNECT (CTRL CHANNEL)    |\n|==============================>|\n|                               |\n.                               .\n.                               .",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 5: COMEDIA Negotiation: Sequence Diagram",
      "ja": "図5：COMEDIA交渉：シーケンス図"
    },
    {
      "indent": 0,
      "text": "1. AS -> MS (SIP INVITE)\n------------------------\n   INVITE sip:MediaServer@ms.example.net:5060 SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.1:5060;\\\n           branch=z9hG4bK-d8754z-9b07c8201c3aa510-1---d8754z-;rport=5060\n   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n   To: <sip:MediaServer@ms.example.net:5060>\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n   Call-ID: MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 INVITE\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type: application/sdp\n   Content-Length: 203",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 2890844526 2890842807 IN IP4 as.example.com s=MediaCtrl c=IN IP4 as.example.com t=0 0 m=application 5757 TCP cfw a=connection:new a=setup:active a=cfw-id:5feb6486792a",
      "ja": "V = 0 0 = lminiero 2890844526 2890842807 IN IP4 as.example.com S = MediaCtrl C = IN IP4 as.example.com T = 0、M =アプリケーション5757 TCPのCFWのA =接続：新A =セットアップ：アクティブA = CFW -id：5feb6486792a"
    },
    {
      "indent": 0,
      "text": "2. AS <- MS (SIP 100 Trying)\n----------------------------\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n           branch=z9hG4bK-d8754z-9b07c8201c3aa510-1---d8754z-;rport=5060\n   To: <sip:MediaServer@ms.example.net:5060>;tag=499a5b74\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n   Call-ID: MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 INVITE\n   Content-Length: 0",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3. AS <- MS (SIP 200 OK)\n------------------------\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n           branch=z9hG4bK-d8754z-9b07c8201c3aa510-1---d8754z-;rport=5060\n   Contact: <sip:MediaServer@ms.example.net:5060>\n   To: <sip:MediaServer@ms.example.net:5060>;tag=499a5b74\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n   Call-ID: MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 INVITE\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type: application/sdp\n   Content-Length: 199",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 2890844526 2890842808 IN IP4 ms.example.net s=MediaCtrl c=IN IP4 ms.example.net t=0 0 m=application 7575 TCP cfw a=connection:new a=setup:passive a=cfw-id:5feb6486792a",
      "ja": "V = 0 0 = lminiero 2890844526 2890842808 IN IP4 ms.example.net S = MediaCtrl C = IN IP4 ms.example.net T = 0、M =アプリケーション7575 TCPのCFWのA =接続：新A =セットアップ：受動A = CFW -id：5feb6486792a"
    },
    {
      "indent": 0,
      "text": "4. AS -> MS (SIP ACK)\n---------------------\n   ACK sip:MediaServer@ms.example.net:5060 SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n                branch=z9hG4bK-d8754z-22940f5f4589701b-1---d8754z-;rport\n   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n   To: <sip:MediaServer@ms.example.net:5060>;tag=499a5b74\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=4354ec63\n   Call-ID: MDk2YTk1MDU3YmVkZjgzYTQwYmJlNjE5NTA4ZDQ1OGY.\n   CSeq: 1 ACK\n   Content-Length: 0",
      "raw": true
    },
    {
      "indent": 0,
      "text": "5.2. SYNC",
      "section_title": true,
      "ja": "5.2.  SYNC"
    },
    {
      "indent": 3,
      "text": "Once the AS and the MS have successfully established a TCP connection, an additional step is needed before the Control Channel can be used. In fact, as seen in the previous subsection, the first interaction between the AS and the MS happens by means of a SIP dialog, which in turn allows the creation of the TCP connection. This introduces the need for a proper correlation between the above-mentioned entities (SIP dialog and TCP connection), so that the MS can be sure that the connection came from the AS that requested it. This is accomplished by means of a dedicated framework message called a SYNC message. This SYNC message uses a unique identifier called the Dialog-ID to validate the Control Channel. This identifier, as introduced previously, is meant to be globally unique and as such is properly generated by the caller (the AS in the call flow) and added as an SDP media attribute (cfw-id) to the COMEDIA negotiation in order to make both entities aware of its value:",
      "ja": "ASとMSが正常にTCP接続を確立したら制御チャネルを使用する前に、追加のステップが必要とされています。実際には、前節で見られるように、ASとMSの間の第一の相互作用は、順番にTCPコネクションの作成を可能にするSIPダイアログの手段によって起こります。 MSは、接続がそれを要求したASから来たことを確認することができるように、これは、上記のエンティティ（SIPダイアログとTCP接続）間の適切な相関関係の必要性を紹介します。これは、SYNCメッセージと呼ばれる専用のフレームワークメッセージの手段によって達成されます。このSYNCメッセージは、制御チャネルを検証するためのダイアログ-IDと呼ばれる一意の識別子を使用しています。この識別子は、以前に紹介したように、グローバルに一意であることを意味し、そのように適切に発信者（コールフローのように）によって生成されるとするためにCOMEDIAネゴシエーションにSDPメディア属性（CFW-ID）として添加しましたその価値を認識して両方のエンティティ："
    },
    {
      "indent": 3,
      "text": " a=cfw-id:5feb6486792a ^^^^^^^^^^^^ It also offers an additional negotiation mechanism. In fact, the AS uses the SYNC to not only properly correlate, as explained before, but also negotiate with the MS the Control Packages in which it is interested, as well as agree on a 'Keep-Alive' timer needed by both the AS and the MS so that they will know if problems on the connection occur. In the provided example (see Figure 6 and the related call flow), the AS sends a SYNC with a Dialog-ID constructed as needed (using the 'cfw-id' attribute from the SIP dialog) and requests access to two Control Packages: specifically, the Interactive Voice Response (IVR) package and the Mixer package. The AS also instructs the MS that a 100-second timeout is to be used for keep-alive messages. The MS validates the request by matching the received Dialog-ID with the SIP dialog values, and, assuming that it supports the Control Packages the AS requested access to (and for the sake of this document we assume that it does), it answers with a",
      "ja": "= CFW-ID：5feb6486792a ^^^^^^^^^^^^それはまた、追加交渉メカニズムを提供しています。実際には、ASは、適切に前に説明したように、相関が、また、それが興味のあるMSの制御パッケージとの交渉だけでなく、ASの両方が必要とする「キープアライブ」タイマーに同意するだけでなく、SYNCを使用しています接続上の問題が発生した場合、彼らはMSを知るようにします。提供された例では、ASは、（SIPダイアログから「CFW-ID」属性を使用して）必要に応じて構成されたダイアログIDとSYNCを送信する2つの制御パッケージへのアクセスを要求する（図6および関連するコールフローを参照）。具体的には、対話型音声応答（IVR）パッケージとミキサーパッケージ。 ASはまた、100秒のタイムアウトがキープアライブメッセージに使用されることをMSに指示します。 MSは、SIPダイアログの値を受信ダイアログ-IDを照合することによって、要求を検証し、そして、それはコントロールがASが（と私たちはそれがないと仮定し、この文書のために）へのアクセスを要求したパッケージサポートしていることを想定し、それがで答えますA"
    },
    {
      "indent": 3,
      "text": "200 message. Additionally, the MS provides the AS with a list of other unrequested packages it supports (in this case just a dummy package providing testing functionality).",
      "ja": "200メッセージ。また、MSは、（この場合にはテスト機能を提供するだけのダミーパッケージを）それがサポートする他の非要求パッケージのリストとASを提供します。"
    },
    {
      "indent": 13,
      "text": "AS                              MS\n.                               .\n.                               .\n|                               |\n| 1. SYNC (Dialog-ID, etc.)     |\n|+++++++++++++++++++++++++++++>>|\n|                               |--+\n|                               |  | Check SYNC\n|                               |<-+\n|                     2. 200 OK |\n|<<+++++++++++++++++++++++++++++|\n|                               |\n.                               .\n.                               .",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 6: SYNC: Sequence Diagram",
      "ja": "図6：SYNC：シーケンス図"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW SYNC)\n----------------------\n   CFW 6e5e86f95609 SYNC\n   Dialog-ID: 5feb6486792a\n   Keep-Alive: 100\n   Packages: msc-ivr/1.0,msc-mixer/1.0",
      "raw": true
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200)\n---------------------\n   CFW 6e5e86f95609 200\n   Keep-Alive: 100\n   Packages: msc-ivr/1.0,msc-mixer/1.0\n   Supported: msc-example-pkg/1.0",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The framework-level transaction identifier is obviously the same in both the request and the response (6e5e86f95609), since the AS needs to be able to match the response to the original request. At this point, the Control Channel is finally established, and it can be used by the AS to request services from the MS.",
      "ja": "ASは、元の要求への応答を一致させることができる必要があるので、フレームワークレベルのトランザクション識別子は、明らかに要求及び応答（6e5e86f95609）の両方で同じです。この時点で、制御チャネルは、最終的に確立され、MSからサービスを要求するためにASで使用することができます。"
    },
    {
      "indent": 0,
      "text": "5.3. K-ALIVE",
      "section_title": true,
      "ja": "5.3.  K-ALIVE"
    },
    {
      "indent": 3,
      "text": "[RFC6230] provides a mechanism for implementing a keep-alive functionality. Such a mechanism is especially useful whenever any NAT or firewall sits in the path between an AS and an MS. In fact, NATs and firewalls may have timeout values for the TCP connections they handle, which means that if no traffic is detected on these connections within a specific time they could be shut down. This could be the case for a Control Channel established between an AS and an MS but not used for some time. For this reason, [RFC6230] specifies a dedicated framework message (K-ALIVE) that the AS and MS can use in order to generate traffic on the TCP connection and keep it alive.",
      "ja": "[RFC6230]はキープアライブ機能を実装するためのメカニズムを提供します。任意のNATまたはファイアウォールがASとMSとの間の経路に座っているときはいつでも、そのような機構は、特に有用です。実際には、NATのファイアウォールは、トラフィックが特定の時間内にこれらの接続には検出されなかった場合、彼らがシャットダウンすることができることを意味し、彼らが扱うTCP接続のタイムアウト値を有することができます。これは、ASとMS間で確立が、いくつかの時間のために使用されていない制御チャネルのためのケースである可能性があります。この理由のために、[RFC6230]はASとMSは、TCP接続上のトラフィックを生成し、生きている、それを維持するために使用することができ、専用のフレームワークメッセージ（K-ALIVE）を指定します。"
    },
    {
      "indent": 3,
      "text": "As discussed in Section 5.2, the timeout value for the keep-alive mechanism is set by the SYNC request. Specifically, in the example, the AS specified a value of 100 seconds. In fact, the timeout value is not actually negotiated between the AS and MS, as it is simply specified by whichever endpoint takes the active role. The 100-second value is compliant with how NATs and firewalls are usually implemented, since in most cases the timeout value they use before shutting TCP connections down is around 2 minutes. Such a value has a strong meaning within the context of this mechanism. In fact, it means that the active role (the AS, in this case) has to send a K-ALIVE message before those 100 seconds pass; otherwise, the passive role (the MS) will tear down the connection, treating it like a timeout. [RFC6230] suggests a more conservative approach towards handling this timeout value, suggesting that the K-ALIVE message be triggered before 80% of the negotiated time passes (80 seconds, in this case). This is exactly the case presented in Figure 7.",
      "ja": "セクション5.2で議論するように、キープアライブ機構のタイムアウト値は、SYNC要求によって設定されます。具体的には、例では、ASは、100秒の値を指定しました。それは単純に積極的な役割を取るいずれかのエンドポイントで指定されているように、実際には、タイムアウト値は、実際に、ASとMSとの間でネゴシエートされません。 100秒の値は、ほとんどの場合、彼らはTCP接続をシャットダウンする前に使用してタイムアウト値は約2分であることから、NATのファイアウォールは、通常は実装されている方法に準拠しています。このような値は、このメカニズムの文脈の中で強い意味を持ちます。実際には、（この場合のように）積極的な役割は、これらの100秒が通過する前にK-ALIVEメッセージを送信しなければならないことを意味します。それ以外の場合は、受動的な役割（MS）は、タイムアウトのようにそれを処理し、接続を切断します。 [RFC6230]ネゴシエート時間の80％が（この場合、80秒）が経過する前にK-ALIVEメッセージがトリガされることを示唆し、このタイムアウト値を処理に向けて、より保守的なアプローチを示唆しています。これはまさに、図7に示す場合です。"
    },
    {
      "indent": 3,
      "text": "                AS                              MS\n                .                               .\n                .                               .\n                |                               |\n  ~80 s have +--|                               |\npassed since |  |                               |\nlast K-ALIVE +->|                               |\n                | 1. K-ALIVE                    |\n                |+++++++++++++++++++++++++++++>>|\n                |                               |--+ Reset the local\n                |                               |  | 'Keep-Alive'\n                |                               |<-+ timer\n                |                     2. 200 OK |\n                |<<+++++++++++++++++++++++++++++|\n   Reset the +--|                               |\n       local |  |                               |\n'Keep-Alive' +->|                               |\n       timer    |                               |\n                .                               .\n                .                               .",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 7: K-ALIVE: Sequence Diagram",
      "ja": "図7：K-ALIVE：シーケンス図"
    },
    {
      "indent": 3,
      "text": "After the Control Channel has been established (COMEDIA+SYNC), both the AS and the MS start local 'Keep-Alive' timers mapped to the negotiated keep-alive timeout value (100 seconds). When about 80 seconds have passed since the start of the timer (80% of 100 seconds), the AS sends a framework-level K-ALIVE message to the MS. The message as seen in the protocol message dump is very lightweight, since it only includes a single line with no additional header. When the MS receives the K-ALIVE message, it resets its local 'Keep-Alive' timer and sends a 200 message back as confirmation. As soon as the AS receives the 200 message, it resets its local 'Keep-Alive' timer as well, and the mechanism starts over again.",
      "ja": "制御チャネルは、（COMEDIA + SYNC）確立された後ASとMSの両方がネゴシエートキープアライブタイムアウト値（100秒）にマッピングされたローカル「キープアライブ」のタイマーを起動します。約80秒タイマー（100秒の80％）の開始から経過した場合、ASは、MSのフレームワークレベルのK-ALIVEメッセージを送信します。それだけでない、追加のヘッダを有する単一の行を含むため、プロトコルメッセージダンプに見られるように、メッセージは、非常に軽量です。 MSはK-ALIVEメッセージを受信すると、その地域の「キープアライブ」タイマーをリセットし、バック確認として200メッセージを送信します。すぐにASが200メッセージを受信すると、それは同様にその地域の「キープアライブ」タイマーをリセットし、メカニズムが何度も起動します。"
    },
    {
      "indent": 3,
      "text": "The actual transaction steps are presented below.",
      "ja": "実際の取引手順を以下に示します。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (K-ALIVE)\n---------------------\n   CFW 518ba6047880 K-ALIVE",
      "raw": true
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200)\n---------------------\n   CFW 518ba6047880 200",
      "raw": true
    },
    {
      "indent": 3,
      "text": "If the timer expired in either the AS or the MS (i.e., the K-ALIVE or the 200 arrived after the 100 seconds), the connection and the associated SIP control dialog would be torn down by the entity detecting the timeout, thus ending the interaction between the AS and the MS.",
      "ja": "タイマーがASまたはMS（すなわち、K-ALIVEまたは200は、100秒後に到着した）のいずれかで有効期限が切れた場合は、接続と関連付けられているSIP制御ダイアログは、このように終了、タイムアウトを検出するエンティティによって取り壊されることになりますASとMSの間の相互作用。"
    },
    {
      "indent": 0,
      "text": "5.4. Wrong Behavior",
      "section_title": true,
      "ja": "5.4. 間違った行動"
    },
    {
      "indent": 3,
      "text": "This section will briefly address some types of behavior that could represent the most common mistakes when dealing with the establishment of a Control Channel between an AS and an MS. These scenarios are obviously of interest, since they result in the AS and the MS being unable to interact with each other. Specifically, these simple scenarios will be described:",
      "ja": "このセクションでは、簡単にASとMSとの間の制御チャネルの確立を扱うときに最も一般的な間違いを表すことができ行動のいくつかの種類に対処します。彼らはASとMSが相互作用することができないことになるので、これらのシナリオは、明らかに興味深いです。具体的には、これらの単純なシナリオが説明されます。"
    },
    {
      "indent": 3,
      "text": "1. an AS providing the MS with a wrong Dialog-ID in the initial SYNC.",
      "ja": "1.最初のSYNCで間違ったダイアログ-IDとMSを提供するAS。"
    },
    {
      "indent": 3,
      "text": "2. an AS sending a generic CONTROL message instead of SYNC as a first transaction.",
      "ja": "2.最初のトランザクションとして代わりにSYNCの一般的な制御メッセージを送信するAS。"
    },
    {
      "indent": 3,
      "text": "The first scenario is depicted in Figure 8.",
      "ja": "最初のシナリオは、図8に示されています。"
    },
    {
      "indent": 13,
      "text": "AS                              MS\n.                               .\n.                               .\n|                               |\n| 1. SYNC (Dialog-ID, etc.)     |\n|+++++++++++++++++++++++++++++>>|\n|                               |--+\n|                               |  | Check SYNC (wrong!)\n|                               |<-+\n|                        2. 481 |\n|<<+++++++++++++++++++++++++++++|\n|                               |\n|<-XX- CLOSE TCP CONNECTION -XX-|\n|                               |\n| SIP BYE                       |\n|------------------------------>|\n|                               |\n.                               .\n.                               .",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Figure 8: SYNC with Wrong Dialog-ID: Sequence Diagram",
      "ja": "図8：間違ったダイアログIDとSYNC：シーケンス図"
    },
    {
      "indent": 3,
      "text": "This scenario is similar to the scenario presented in Section 5.2, but with a difference: instead of using the correct, expected Dialog-ID in the SYNC message (5feb6486792a, the one negotiated via COMEDIA), the AS uses a wrong value (4hrn7490012c). This causes the SYNC transaction to fail. First of all, the MS sends a framework-level 481 message. This response, when given in reply to a SYNC message, means that the SIP dialog associated with the provided Dialog-ID (the wrong identifier) does not exist. The Control Channel must be torn down as a consequence, and so the MS also closes the TCP connection it received the SYNC message from. The AS at this point is supposed to tear down its SIP control dialog as well, and so it sends a SIP BYE to the MS.",
      "ja": "このシナリオでは、第5.2節で提示シナリオと同様、その差である。代わりに、正しいを使用する、ダイアログIDは、ASが間違った値（4hrn7490012c）を使用し、SYNCメッセージ（5feb6486792a、COMEDIA介してネゴシエート1）で予想されます。これが失敗するSYNCトランザクションが発生します。まず、MSは、フレームワークレベル481のメッセージを送信します。 SYNCメッセージへの応答で与えられた場合、この応答は、提供されるダイアログID（間違った識別子）に関連付けられたSIPダイアログが存在しないことを意味します。制御チャネルは、結果として取り壊さなければならず、そのMSはまた、からのSYNCメッセージを受信したTCP接続を閉じます。この時点でのASは、同様にそのSIP制御ダイアログを取り壊すことになっている、そしてそれは、MSにSIP BYEを送信します。"
    },
    {
      "indent": 3,
      "text": "The actual transaction is presented below.",
      "ja": "実際の取引は以下の通りです。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW SYNC with wrong Dialog-ID)\n-------------------------------------------\n   CFW 2b4dd8724f27 SYNC\n   Dialog-ID: 4hrn7490012c\n   Keep-Alive: 100\n   Packages: msc-ivr/1.0,msc-mixer/1.0",
      "raw": true
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 481)\n---------------------\n   CFW 2b4dd8724f27 481",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The second scenario is depicted in Figure 9.",
      "ja": "第2のシナリオは、図9に示されています。"
    },
    {
      "indent": 13,
      "text": "AS                              MS\n.                               .\n.                               .\n|                               |\n| 1. CONTROL                    |\n|+++++++++++++++++++++++++++++>>|\n|                               |--+ First transaction\n|                               |  | is not a SYNC\n|                               |<-+\n|                        2. 403 |\n|<<+++++++++++++++++++++++++++++|\n|                               |\n|<-XX- CLOSE TCP CONNECTION -XX-|\n|                               |\n| SIP BYE                       |\n|------------------------------>|\n|                               |\n.                               .\n.                               .",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 9: Incorrect First Transaction: Sequence Diagram",
      "ja": "図9：不正最初のトランザクション：シーケンス図"
    },
    {
      "indent": 3,
      "text": "This scenario demonstrates another common mistake that could occur when trying to set up a Control Channel. In fact, [RFC6230] mandates that the first transaction after the COMEDIA negotiation be a SYNC to conclude the setup. If the AS, instead of triggering a SYNC message as expected, sends a different message to the MS (in the example below, it tries to send an <audit> message addressed to the IVR Control Package), the MS treats it like an error. As a consequence, the MS replies with a framework-level 403 message (Forbidden) and, just as before, closes the TCP connection and waits for the related SIP control dialog to be torn down.",
      "ja": "このシナリオでは、制御チャネルを設定しようとしたときに発生する可能性があり、他の一般的な間違いを示しています。実際には、[RFC6230]はCOMEDIA交渉後の最初の取引は、セットアップを締結するSYNCことが義務付け。 ASは、代わりに予想されるようにSYNCメッセージをトリガする（以下の例では、それが送信しようとする<監査>メッセージは、IVR制御パッケージ宛）MSに異なるメッセージを送信する場合、MSは、エラーのようにそれを扱い。その結果、MSは、フレームワークレベル403（禁止）メッセージと、ちょうど前のように、TCP接続をクローズし、関連するSIP制御ダイアログが解体されるのを待つで応答します。"
    },
    {
      "indent": 3,
      "text": "The actual transaction is presented below.",
      "ja": "実際の取引は以下の通りです。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW CONTROL instead of SYNC)\n-----------------------------------------\n   CFW 101fbbd62c35 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 78",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <audit/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscivr\"> <監査/> </ mscivr>"
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 403 Forbidden)\n-------------------------------\n   CFW 101fbbd62c35 403",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6. Use-Case Scenarios and Examples",
      "section_title": true,
      "ja": "6.ユースケースのシナリオと例"
    },
    {
      "indent": 3,
      "text": "The following scenarios have been chosen for their common presence in many rich real-time multimedia applications. Each scenario is depicted as a set of call flows involving both the SIP/SDP signaling (UACs<->AS<->MS) and the Control Channel communication (AS<->MS).",
      "ja": "次のシナリオでは、多くの豊かなリアルタイム・マルチメディア・アプリケーションでの一般的な存在のために選択されています。そして制御チャネル通信（AS < - > MS）コールのセットはSIP / SDPシグナリング（< -   - > AS <> MS求めるUAC）の両方を含む流れるように各シナリオが示されています。"
    },
    {
      "indent": 3,
      "text": "All the examples assume that a Control Channel has already been correctly established and SYNCed between the reference AS and MS. Also, unless stated otherwise, the same User Agent Client (UAC) session is referenced in all the examples that will be presented in this document. The UAC session is assumed to have been created as described in Figure 10:",
      "ja": "すべての例では、制御チャネルがすでに正しく参照ASとMS間で確立し、同期されていることを前提としています。特に明記しない限り、また、同じユーザエージェントクライアント（UAC）のセッションは、この文書で提示されるすべての例で参照されます。 UACセッションは、図10で説明したように作成されているものとします。"
    },
    {
      "indent": 3,
      "text": "UAC                  AS                          MS\n |                   |                           |\n | INVITE (X)        |                           |\n |------------------>|                           |\n |     180 (Ringing) |                           |\n |<------------------|                           |\n |                   |--+                        |\n |                   |  | Handle app(X)          |\n |                   |<-+                        |\n |                   | INVITE (Y) as 3PCC        |\n |                   |-------------------------->|\n |                   |              100 (Trying) |\n |                   |<--------------------------|\n |                   |                           |--+ Negotiate media\n |                   |                           |  | with UAC; map\n |                   |                           |<-+ tags and labels\n |                   |                    200 OK |\n |                   |<--------------------------|\n |            200 OK |                           |\n |<------------------|                           |\n | ACK               |                           |\n |------------------>|                           |\n |                   | ACK                       |\n |                   |-------------------------->|\n |                   |                           |\n |<<###########################################>>|\n |         RTP Media Stream(s) flowing           |\n |<<###########################################>>|\n |                   |                           |\n .                   .                           .\n .                   .                           .",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 10: 3PCC Sequence Diagram",
      "ja": "図10：3PCCシーケンス図"
    },
    {
      "indent": 3,
      "text": "Note well: This is only an example of a possible approach involving a Third-Party Call Control (3PCC) negotiation among the UAC, the AS, and the MS, and as such is not at all to be considered the mandatory way, nor best common practice, in the presented scenario. [RFC3725] provides several different solutions and many details about how 3PCC can be realized, with pros and cons. It is also worth pointing out that the two INVITEs displayed in the figure are different SIP dialogs.",
      "ja": "十分注意：これは、UAC、AS、及びMSの間で第三者呼制御（3PCC）交渉に関わる可能性のあるアプローチの一例であり、そのように、すべての必須の方法と考えるべきではないされ、また最高提示したシナリオでは一般的。 [RFC3725]は3PCCは賛否両論で、実現することができる方法について、いくつかの異なるソリューションおよび多くの詳細を提供します。また、図に表示された2つのINVITEが異なるSIPダイアログであることを指摘する価値があります。"
    },
    {
      "indent": 3,
      "text": "The UAC first places a call to a SIP URI for which the AS is responsible. The specific URI is not relevant to the examples, since the application logic behind the mapping between a URI and the service it provides is a matter that is important only to the AS. So, a generic 'sip:mediactrlDemo@as.example.com' is used in all the examples, whereas the service this URI is associated with in the AS logic is mapped scenario by scenario to the case under examination. The UAC INVITE is treated as envisaged in [RFC5567]. The INVITE is forwarded by the AS to the MS via a third party (e.g., the 3PCC approach), without the SDP provided by the UAC being touched, in order to have the session fully negotiated by the MS according to its description. The MS matches the UAC's offer with its own capabilities and provides its answer in a 200 OK. This answer is then forwarded, again without the SDP contents being touched, by the AS to the target UAC. This way, while the SIP signaling from the UAC is terminated in the AS, all the media would start flowing directly between the UAC and the MS.",
      "ja": "UACは最初のASが担当するSIP URIへの呼び出しを配置し​​ます。 URIとそれが提供するサービスとの間のマッピングの背後にあるアプリケーション・ロジックのみがASに重要である事柄であるため、特定のURIは、例に関連していません。だから、一般的な「SIP：mediactrlDemo@as.example.com」はすべての例で使用されている。このURIはASロジックに関連付けられているサービスに対し、検査中の場合には、シナリオによってシナリオがマッピングされています。 [RFC5567]で想定されるようUACは、治療されるINVITE。 UACによって提供されるSDPが完全にその記述に従ってMSによって交渉セッションを有するために、タッチされず、第三者（例えば、3PCCアプローチ）を介してMSにASによって転送されるINVITE。 MSは、独自の機能とUACの提案と一致し、200 OKでその答えを提供します。この回答は、ターゲットUACにASにより、SDPの内容をタッチすることなく、再び、転送されます。 UACからのSIPシグナリングはASに終了されながら、この方法では、すべてのメディアは、UACとMSとの間で直接流れ始めるでしょう。"
    },
    {
      "indent": 3,
      "text": "As a consequence of this negotiation, one or more media connections are created between the MS and the UAC. They are then addressed, when needed, by the AS and the MS by means of the concatenation of tags, as specified in [RFC6230]. How the identifiers are created and addressed is explained by using the sample signaling provided in the following lines.",
      "ja": "この交渉の結果として、1つまたは複数のメディア接続がMSとUACの間に作成されます。必要なときに[RFC6230]で指定されるように、それらは、その後、タグの連結によりASとMSによって、対処されます。どのように識別子が作成され、次の行で提供されるサンプル・シグナリングを用いて説明されて対処しました。"
    },
    {
      "indent": 0,
      "text": "1. UAC -> AS (SIP INVITE)\n-------------------------\n   INVITE sip:mediactrlDemo@as.example.com SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.2:5063;rport;branch=z9hG4bK1396873708\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n   To: <sip:mediactrlDemo@as.example.com>\n   Call-ID: 1355333098\n   CSeq: 20 INVITE\n   Contact: <sip:lminiero@203.0.113.2:5063>\n   Content-Type: application/sdp\n   Max-Forwards: 70\n   User-Agent: Linphone/2.1.1 (eXosip2/3.0.3)\n   Subject: Phone call\n   Expires: 120\n   Content-Length: 330 v=0\n   o=lminiero 123456 654321 IN IP4 203.0.113.2\n   s=A conversation\n   c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=1;QCIF=1",
      "raw": true
    },
    {
      "indent": 0,
      "text": "2. UAC <- AS (SIP 180 Ringing)\n------------------------------\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/UDP 203.0.113.2:5063;rport=5063; \\\n                                                branch=z9hG4bK1396873708\n   Contact: <sip:mediactrlDemo@as.example.com>\n   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n   Call-ID: 1355333098\n   CSeq: 20 INVITE\n   Content-Length: 0",
      "raw": true
    },
    {
      "indent": 0,
      "text": "3. AS -> MS (SIP INVITE)\n------------------------\n   INVITE sip:MediaServer@ms.example.net:5060;transport=UDP SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n                branch=z9hG4bK-d8754z-8723e421ebc45f6b-1---d8754z-;rport\n   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n   To: <sip:MediaServer@ms.example.net:5060>\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n   Call-ID: NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 INVITE\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type: application/sdp\n   Content-Length: 330 v=0\n   o=lminiero 123456 654321 IN IP4 203.0.113.2\n   s=A conversation\n   c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=1;QCIF=1",
      "raw": true
    },
    {
      "indent": 0,
      "text": "4. AS <- MS (SIP 100 Trying)\n----------------------------\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n           branch=z9hG4bK-d8754z-8723e421ebc45f6b-1---d8754z-;rport=5060\n   To: <sip:MediaServer@ms.example.net:5060>;tag=6a900179\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n   Call-ID: NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 INVITE\n   Content-Length: 0",
      "raw": true
    },
    {
      "indent": 0,
      "text": "5. AS <- MS (SIP 200 OK)\n------------------------\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n           branch=z9hG4bK-d8754z-8723e421ebc45f6b-1---d8754z-;rport=5060\n   Contact: <sip:MediaServer@ms.example.net:5060>\n   To: <sip:MediaServer@ms.example.net:5060>;tag=6a900179\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n   Call-ID: NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 INVITE\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type: application/sdp\n   Content-Length: 374",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654322 IN IP4 ms.example.net s=MediaCtrl c=IN IP4 ms.example.net t=0 0 m=audio 63442 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000 a=rtpmap:3 GSM/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15 a=ptime:20 a=label:7eda834 m=video 33468 RTP/AVP 98 a=rtpmap:98 H263-1998/90000 a=fmtp:98 CIF=2 a=label:0132ca2",
      "ja": "V = 0 0 = lminiero IP4 IN 123456 654322 ms.example.net S = MediaCtrl C = IN IP4 ms.example.net T = 0、M =オーディオ63442 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 8000 = rtpmap：3 GSM / 8000 = rtpmap：/ 8000 8 PCMA = rtpmap：101電話イベント/ 8000 =のfmtp：101 0-15 = PTIME：=ラベル20 A：7eda834 M =ビデオ33468 RTP / AVP 98 = rtpmap：98 H263-1998 / 90000 =のfmtp：98 CIF = 2、A =ラベル：0132ca2"
    },
    {
      "indent": 0,
      "text": "6. UAC <- AS (SIP 200 OK)\n-------------------------\n   SIP/2.0 200 OK\n   Via: SIP/2.0/UDP 203.0.113.2:5063;rport=5063; \\\n                                                branch=z9hG4bK1396873708\n   Contact: <sip:mediactrlDemo@as.example.com>\n   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n   Call-ID: 1355333098\n   CSeq: 20 INVITE\n   Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, UPDATE, REGISTER\n   Content-Type: application/sdp\n   Content-Length: 374",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654322 IN IP4 ms.example.net s=MediaCtrl c=IN IP4 ms.example.net t=0 0 m=audio 63442 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000 a=rtpmap:3 GSM/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15 a=ptime:20 a=label:7eda834 m=video 33468 RTP/AVP 98 a=rtpmap:98 H263-1998/90000 a=fmtp:98 CIF=2 a=label:0132ca2",
      "ja": "V = 0 0 = lminiero IP4 IN 123456 654322 ms.example.net S = MediaCtrl C = IN IP4 ms.example.net T = 0、M =オーディオ63442 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 8000 = rtpmap：3 GSM / 8000 = rtpmap：/ 8000 8 PCMA = rtpmap：101電話イベント/ 8000 =のfmtp：101 0-15 = PTIME：=ラベル20 A：7eda834 M =ビデオ33468 RTP / AVP 98 = rtpmap：98 H263-1998 / 90000 =のfmtp：98 CIF = 2、A =ラベル：0132ca2"
    },
    {
      "indent": 0,
      "text": "7. UAC -> AS (SIP ACK)\n----------------------\n   ACK sip:mediactrlDemo@as.example.com SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.2:5063;rport;branch=z9hG4bK1113338059\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n   Call-ID: 1355333098\n   CSeq: 20 ACK\n   Contact: <sip:lminiero@203.0.113.2:5063>\n   Max-Forwards: 70\n   User-Agent: Linphone/2.1.1 (eXosip2/3.0.3)\n   Content-Length: 0",
      "raw": true
    },
    {
      "indent": 0,
      "text": "8. AS -> MS (SIP ACK)\n---------------------\n   ACK sip:MediaServer@ms.example.net:5060;transport=UDP SIP/2.0\n   Via: SIP/2.0/UDP 203.0.113.1:5060; \\\n                branch=z9hG4bK-d8754z-5246003419ccd662-1---d8754z-;rport\n   Max-Forwards: 70\n   Contact: <sip:ApplicationServer@203.0.113.1:5060>\n   To: <sip:MediaServer@ms.example.net:5060;tag=6a900179\n   From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f\n   Call-ID: NzI0ZjQ0ZTBlMTEzMGU1ZjVhMjk5NTliMmJmZjE0NDQ.\n   CSeq: 1 ACK\n   Content-Length: 0",
      "raw": true
    },
    {
      "indent": 3,
      "text": "As a result of the 3PCC negotiation just presented, the following relevant information is retrieved:",
      "ja": "ちょうど提示3PCC交渉の結果、以下の関連情報が取得されます。"
    },
    {
      "indent": 3,
      "text": "1. The 'From' and 'To' tags (10514b7f and 6a900179, respectively) of the AS<->MS session:",
      "ja": "1. 'から' とASのタグ（10514b7fとそれぞれ6a900179、） 'に' < - > MSセッション："
    },
    {
      "indent": 5,
      "text": "From: <sip:ApplicationServer@as.example.com:5060>;tag=10514b7f ^^^^^^^^ To: <sip:MediaServer@ms.example.net:5060>;tag=6a900179 ^^^^^^^^",
      "ja": "From：<SIP：ApplicationServer@as.example.com：5060>;タグ= 10514b7f ^^^^^^^^へ：<SIP：MediaServer@ms.example.net：5060>;タグ= 6a900179 ^^^^ ^^^^"
    },
    {
      "indent": 3,
      "text": "2. The labels [RFC4574] associated with the negotiated media connections, in this case an audio stream (7eda834) and a video stream (0132ca2):",
      "ja": "2.この場合、オーディオストリーム（7eda834）とビデオストリーム（0132ca2）において、ネゴシエートされたメディア接続に関連付けられたラベル[RFC4574]："
    },
    {
      "indent": 6,
      "text": "m=audio 63442 RTP/AVP 0 3 8 101 [..] a=label:7eda834 ^^^^^^^",
      "ja": "M =オーディオ63442 RTP / AVP 0 3 8 101 [..] A =ラベル：7eda834 ^^^^^^^"
    },
    {
      "indent": 3,
      "text": " m=video 33468 RTP/AVP 98 [..] a=label:0132ca2 ^^^^^^^ These four identifiers allow the AS and MS to univocally and unambiguously address to each other the connections associated with the related UAC. Specifically:",
      "ja": "M =ビデオ33468 RTP / AVP 98 [..] A =ラベル：0132ca2 ^^^^^^^これらの4つの識別子は、ASとMSが一義的と明確互いに関連UACに関連付けられた接続に対処することを可能にします。具体的に："
    },
    {
      "indent": 3,
      "text": "1. 10514b7f:6a900179, the concatenation of the 'From' and 'To' tags through a colon (':') token, addresses all the media connections between the MS and the UAC.",
      "ja": "1. 10514b7f：6a900179、結腸スルータグ（「：」）「と」「から」との連結トークンは、MSとUACの間のすべてのメディア接続に対処します。"
    },
    {
      "indent": 3,
      "text": "2. 10514b7f:6a900179 <-> 7eda834, the association of the previous value with the label attribute, addresses only one of the media connections of the UAC session (in this case, the audio stream). Since, as will be made clearer in the example scenarios, the explicit identifiers in requests can only address 'from:tag' connections, an additional mechanism will be required to have a finer control of individual media streams (i.e., by means of the <stream> element in package-level requests).",
      "ja": "2. 10514b7f：6a900179は< - > 7eda834、label属性を持つ以前の値の関連付けは、UACセッションのメディア接続の一つだけ（この場合は、オーディオストリーム）を対応しています。例示的シナリオで明確説明するように、あるので、「から：タグ」のみ対処することができる要求で明示的な識別子の追加のメカニズムが必要とされる接続は、手段<によって、すなわち、個々のメディアストリーム（のより細かい制御を有することパッケージレベルの要求でストリーム>要素）。"
    },
    {
      "indent": 3,
      "text": "The mapping that the AS makes between the UACs<->AS and the AS<->MS SIP dialogs is out of scope for this document. We just assume that the AS knows how to address the right connection according to the related session it has with a UAC (e.g., to play an announcement to a specific UAC). This is obviously very important, since the AS is responsible for all the business logic of the multimedia application it provides.",
      "ja": "< - > ASを求めるUACの間になることをマッピングASおよびAS < - > MS SIPダイアログはこの文書の範囲外です。私達はちょうどASは、それがUAC（例えば、特定のUACに告知を再生するために）を持っている関連セッションに応じて、右の接続に対処する方法を知っていることを前提としています。 ASは、それが提供するマルチメディアアプリケーションのすべてのビジネスロジックを担当しているので、これは明らかに非常に重要です。"
    },
    {
      "indent": 0,
      "text": "6.1. Echo Test",
      "section_title": true,
      "ja": "6.1. エコーテスト"
    },
    {
      "indent": 3,
      "text": "The echo test is the simplest example scenario that can be achieved by means of an MS. It basically consists of a UAC directly or indirectly \"talking\" to itself. A media perspective of such a scenario is depicted in Figure 11.",
      "ja": "エコー検査は、MSの手段によって達成することができる最も簡単な例のシナリオです。それは基本的に自分自身に「話」を直接または間接的にUACから構成されています。このようなシナリオのメディア観点は、図11に示されています。"
    },
    {
      "indent": 14,
      "text": "+-------+  A (RTP)                 +--------+\n|  UAC  |=========================>| Media  |\n|   A   |<=========================| Server |\n+-------+                 A (RTP)  +--------+",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 11: Echo Test: Media Perspective",
      "ja": "図11：テストエコー：メディアの展望"
    },
    {
      "indent": 3,
      "text": "From the framework point of view, when the UAC's leg is not attached to anything yet, what appears is shown in Figure 12: since there's no connection involving the UAC yet, the frames it might be sending are discarded, and nothing is sent to it (except for silence, if its transmission is requested).",
      "ja": "まだUACを含む一切の接続がありませんから、それが送信される可能性がありますフレームは破棄され、何もそれに送信されません。図12に示されて表示されるものUACの足はまだ何も接続されていないビューの枠組みポイント、から、 （沈黙のために、その送信が要求された場合を除きます）。"
    },
    {
      "indent": 27,
      "text": "                MS\n             +------+\nUAC          |      |\n o----->>-------x   |\n o.....<<.......x   |\n             |      |\n             +------+",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 12: Echo Test: UAC Media Leg Not Attached",
      "ja": "図12：エコーテスト：UACメディア脚が付いていません"
    },
    {
      "indent": 3,
      "text": "Starting from these considerations, two different approaches to the Echo Test scenario are explored in this document:",
      "ja": "これらの考察から始めて、エコーテストシナリオには2つの異なるアプローチは、この文書で検討されています。"
    },
    {
      "indent": 3,
      "text": "1. a Direct Echo Test approach, where the UAC directly talks to itself.",
      "ja": "1. UACが直接自身に話す直接エコーテストアプローチ、。"
    },
    {
      "indent": 3,
      "text": "2. a Recording-based Echo Test approach, where the UAC indirectly talks to itself.",
      "ja": "2.録音ベースエコーテスト手法自体にUACは、間接的に交渉。"
    },
    {
      "indent": 0,
      "text": "6.1.1. Direct Echo Test",
      "section_title": true,
      "ja": "6.1.1. 直接エコーテスト"
    },
    {
      "indent": 3,
      "text": "In the Direct Echo Test approach, the UAC is directly connected to itself. This means that, as depicted in Figure 13, each frame the MS receives from the UAC is sent back to it in real time.",
      "ja": "直接エコーテスト手法では、UACは、それ自体に直接接続されています。これは、図13に示すように、MSは、UACから受信した各フレームをリアルタイムでそれに返送される、ことを意味します。"
    },
    {
      "indent": 27,
      "text": "                MS\n             +------+\nUAC          |      |\n o----->>-------@   |\n o-----<<-------@   |\n             |      |\n             +------+",
      "raw": true
    },
    {
      "indent": 12,
      "text": "Figure 13: Echo Test: Direct Echo (Self-Connection)",
      "ja": "図13：エコーテスト：直接エコー（自己接続）"
    },
    {
      "indent": 3,
      "text": "In the framework, this can be achieved by means of the Mixer Control Package [RFC6505], which is in charge of joining connections and conferences.",
      "ja": "フレームワークでは、これは接続や会議に参加を担当しているミキサーコントロールパッケージ[RFC6505]、によって達成することができます。"
    },
    {
      "indent": 3,
      "text": "A sequence diagram of a potential transaction is depicted in Figure 14:",
      "ja": "潜在的なトランザクションのシーケンス図は図14に示されています。"
    },
    {
      "indent": 2,
      "text": "UAC                      AS                                 MS\n |                       |                                  |\n |                       | 1. CONTROL (join UAC to itself)  |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |--+ self-\n |                       |                                  |  | join\n |                       |                        2. 200 OK |<-+ UAC\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |<<######################################################>>|\n |         Everything is now echoed back to the UAC         |\n |<<######################################################>>|\n |                       |                                  |\n .                       .                                  .\n .                       .                                  .",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 14: Self-Connection: Framework Transaction",
      "ja": "図14：セルフ接続：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The transaction steps have been numbered and are explained below:",
      "ja": "トランザクションステップは番号が付けられており、以下に説明されています。"
    },
    {
      "indent": 3,
      "text": "o The AS requests the joining of the connection to itself by sending to the MS a CONTROL request (1) that is specifically meant for the conferencing Control Package (msc-mixer/1.0). A <join> request is used for this purpose, and since the connection must be attached to itself, both id1 and id2 attributes are set to the same value, i.e., the connectionid.",
      "ja": "O ASは、MSに特異的に会議制御パッケージ（MSC-ミキサー/ 1.0）のために意図された制御要求（1）を送信することによって自身への接続の接合を要求します。 <参加>要求がこの目的のために使用され、接続自体に取り付けなければならないので、両方のID1とID2属性は同じ値、すなわち、connectionidに設定されています。"
    },
    {
      "indent": 3,
      "text": "o The MS, having checked the validity of the request, enforces the joining of the connection to itself. This means that all the frames sent by the UAC are sent back to it. To report the result of the operation, the MS sends a 200 OK (2) in reply to the AS, thus ending the transaction. The transaction ended successfully, as indicated by the body of the message (the 200 status code in the <response> tag).",
      "ja": "MS O、要求の正当性を確認した、それ自体への接続の接合を強制。これは、UACによって送信されたすべてのフレームがそれに戻って送信されていることを意味します。操作の結果を報告するには、MSは、このように取引を終了、ASへの返信で200 OK（2）を送信します。メッセージ（<応答>タグ200個のステータスコード）の本体によって示されるように、トランザクションは、正常に終了しました。"
    },
    {
      "indent": 3,
      "text": "The complete transaction -- that is, the full bodies of the exchanged messages -- is provided in the following lines:",
      "ja": "完全なトランザクションは - つまり、交換されるメッセージのフルボディは - 次の行で提供されます。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW CONTROL)\n-------------------------\n   CFW 4fed9bf147e2 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 130",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"10514b7f:6a900179\" id2=\"10514b7f:6a900179\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"10514b7f：6a900179\" ID2 = \"10514b7f：6a900179\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200 OK)\n------------------------\n   CFW 4fed9bf147e2 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "6.1.2. Echo Test Based on Recording",
      "section_title": true,
      "ja": "6.1.2. エコーテストの記録に基づいて、"
    },
    {
      "indent": 3,
      "text": "In the Recording-based Echo Test approach, the UAC is NOT directly connected to itself, but rather indirectly. This means that, as depicted in Figure 15, each frame the MS receives from the UAC is first recorded; then, when the recording process is ended, the whole recorded frames are played back to the UAC as an announcement.",
      "ja": "記録ベースエコーテスト手法では、UACが直接自身に接続され、むしろ間接的ではありません。これは、図15に示すように、MSは、UACから受信する各フレームが最初に記録されている、ことを意味します。記録処理が終了したときに、全体のフレームが発表とUACに再生されている記録しました。"
    },
    {
      "indent": 16,
      "text": "                MS\n             +------+\nUAC          |      |\n o----->>-------+~~~~~> (recording.wav) ~~+\n o-----<<-------+   |                     |\n             |  ^   |                     v\n             +--|---+                     |\n                +~~~~~~~~~~~<<~~~~~~~~~~~~+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 15: Echo Test: Recording Involved",
      "ja": "図15：テストエコー：関与記録"
    },
    {
      "indent": 3,
      "text": "In the framework, this can be achieved by means of the IVR Control Package [RFC6231], which is in charge of both the recording and the playout phases. However, the whole scenario cannot be accomplished in a single transaction; at least two steps, in fact, need to be performed:",
      "ja": "フレームワークでは、これは記録及び再生位相の両方を担当しているIVRコントロールパッケージ[RFC6231]、によって達成することができます。しかし、全体のシナリオは、単一のトランザクションで達成することはできません。少なくとも二つの段階で、実際には、実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "1. First, a recording (preceded by an announcement, if requested) must take place.",
      "ja": "1.まず、（要求された場合、告知が先行）記録が行われなければなりません。"
    },
    {
      "indent": 3,
      "text": "2. Then, a playout of the previously recorded media must occur.",
      "section_title": true,
      "ja": "2.次に、以前に記録されたメディアの再生が行われなければなりません。"
    },
    {
      "indent": 3,
      "text": "This means that two separate transactions need to be invoked. A sequence diagram of a potential multiple transaction is depicted in Figure 16:",
      "ja": "これは、2つの別々のトランザクションが呼び出される必要があることを意味します。潜在的な複数のトランザクションのシーケンス図は図16に示されています。"
    },
    {
      "indent": 1,
      "text": "UAC                      AS                                 MS\n |                       |                                  |\n |                       | A1. CONTROL (record for 10s)     |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                          A2. 202 |\n |                       |<<++++++++++++++++++++++++++++++++| prepare &\n |                       |                                  |--+ start\n |                       |                                  |  | the\n |                       |           A3. REPORT (terminate) |<-+ dialog\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       | A4. 200 OK                       |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |\n |<<########################################################|\n |           \"This is an echo test: say something\"          |\n |<<########################################################|\n |                       |                                  |\n |########################################################>>|\n |          10 s of audio from the UAC are recorded         |--+ save\n |########################################################>>|  | in a\n |                       |                                  |<-+ file\n |                       |       B1. CONTROL (<recordinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|\n |       Use recorded +--| B2. 200 OK                       |\n |       file to play |  |++++++++++++++++++++++++++++++++>>|\n |       announcement +->|                                  |\n |                       | C1. CONTROL (play recorded)      |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                          C2. 202 |\n |                       |<<++++++++++++++++++++++++++++++++| prepare &\n |                       |                                  |--+ start\n |                       |                                  |  | the\n |                       |           C3. REPORT (terminate) |<-+ dialog\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       | C4. 200 OK                       |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |\n |<<########################################################|\n |         \"Can you hear me? It's me, UAC, talking\"         |\n |<<########################################################|\n |                       |                                  |\n |                       |       D1. CONTROL (<promptinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       | D2. 200 OK                       |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |\n .                       .                                  .\n .                       .                                  .",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 16: Recording-Based Echo: Two Framework Transactions",
      "ja": "図16：録音ベースエコー：二つのフレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The first obvious difference that stands out when looking at the diagram is that, unlike the Direct Echo scenario, the MS does not reply with a 200 message to the CONTROL request originated by the AS. Instead, a 202 provisional message is sent first, followed by a REPORT message. The 202+REPORT(s) mechanism is used whenever the MS wants to tell the AS that the requested operation might take more time than the limit specified in the definition of the Control Package. So, while the <join> operation in the Direct Echo scenario was expected to be fulfilled in a very short time, the IVR request was assumed to last longer. A 202 message provides a timeout value and tells the AS to wait a bit, since the preparation of the dialog might not happen immediately. In this example, the preparation ends before the timeout, and so the transaction is concluded with a 'REPORT terminate', which reports the end of the transaction (as did the 200 message in the previous example). If the preparation took longer than the timeout, an additional 'REPORT update' would have been sent with a new timeout value, and so on, until completion by means of a 'REPORT terminate'.",
      "ja": "図を見ると際立っている最初の明らかな違いは、直接エコーのシナリオとは異なり、MSは、ASによって発信CONTROL要求に200メッセージで応答していない、ということです。代わりに、202仮メッセージ、レポートメッセージ、続いて最初に送信されます。 MSは、要求された操作は、制御パッケージの定義に指定されている制限よりも時間がかかる場合がありますことをASに伝えたいと考えていたときに202 + REPORT（S）メカニズムが使用されています。直接エコーのシナリオでは、<参加>操作が非常に短い時間で満たされると予想している間そう、IVR要求が長く続くと仮定しました。 202メッセージは、タイムアウト値を提供し、ダイアログの準備がすぐに起こらないかもしれないので、少し待つようにASを伝えます。この例では、製剤は、タイムアウトする前に終了し、そうトランザクションが（前の例では200メッセージを行ったように）トランザクションの終了を報告「REPORT終了」と締結されています。準備がタイムアウトよりも長くかかった場合は、追加された「REPORT更新が」「REPORT終了」によって完了するまで、その上に新しいタイムアウト値で送信され、されていたであろう。"
    },
    {
      "indent": 3,
      "text": "Note that the REPORT mechanism depicted is only shown to clarify its behavior. In fact, the 202+REPORT mechanism is assumed to be involved only when the requested transaction is expected to take a long time (e.g., retrieving a large media file for a prompt from an external server). In this scenario, the transaction would be prepared in much less time and as a consequence would very likely be completed within the context of a simple CONTROL+200 request/ response. The following scenarios will only involve 202+REPORTs when they are strictly necessary.",
      "ja": "図示REPORT機構のみ、その動作を明確にするために示されていることに留意されたいです。実際には、202 + REPORT機構が要求されたトランザクションが（例えば、外部サーバからのプロンプトの大規模なメディアファイルを取得）長い時間がかかることが予想されている場合にのみ関与していることが想定されます。このシナリオでは、トランザクションは、はるかに短い時間で準備されるだろうし、結果として非常に可能性の高いシンプルなCONTROL + 200リクエスト/レスポンスのコンテキスト内で完了することでしょう。彼らは厳密に必要な場合は、次のシナリオでは、唯一の202件の+レポートを含むことになります。"
    },
    {
      "indent": 3,
      "text": "Regarding the dialog itself, note how the AS-originated CONTROL transactions are terminated as soon as the requested dialogs start. As specified in [RFC6231], the MS uses a framework CONTROL message to report the result of the dialog and how it has proceeded. The two transactions (the AS-generated CONTROL request and the MS-generated CONTROL event) are correlated by means of the associated dialog identifier, as explained below. As before, the transaction steps have been numbered. The two transactions are distinguished by the preceding letter (A,B=recording, C,D=playout).",
      "ja": "ダイアログ自体については、AS-起源CONTROLの取引は、すぐに要求されたダイアログが起動して終了しているかに注意してください。 [RFC6231]で指定されているように、MSは、ダイアログとそれがどのように進行した結果を報告するために、フレームワークの制御メッセージを使用しています。以下に説明するように、2つのトランザクション（AS-生成された制御要求およびMS-生成された制御イベント）は、関連するダイアログ識別子によって相関されます。前述のように、トランザクションステップは番号が付けられています。二つのトランザクションは、先行する文字（A、B =記録、C、D =再生）によって区別されます。"
    },
    {
      "indent": 3,
      "text": "o The AS, as a first transaction, invokes a recording on the UAC connection by means of a CONTROL request (A1). The body is for the IVR package (msc-ivr/1.0) and requests the start (<dialogstart>) of a new recording context (<record>). The recording must be preceded by an announcement (<prompt>), must not last longer than 10 s (maxtime), and cannot be interrupted by a DTMF tone (dtmfterm=false). This is only done once (the missing repeatCount attribute is 1 by default for a <dialog>), which means that if the recording does not succeed the first time, the transaction must fail. A video recording is requested (considering that the associated connection includes both audio and video and no restriction is enforced on streams to record), which is to be fed by both of the negotiated media streams. A beep has to be played (beep=true) right before the recording starts, to notify the UAC.",
      "ja": "AS O、最初のトランザクションとして、制御要求（A1）によってUAC接続上の記録を呼び出します。ボディは、IVRパッケージ（MSC-IVR / 1.0）のためのものであり、新記録コンテキスト（<記録>）の開始を（<dialogstart>）を要求します。記録が発表（<>プロンプト）を付ける必要があり、長い10秒（MAXTIME）よりも続かないしなければならない、とDTMFトーン（dtmfterm =偽）によって中断することはできません。これが唯一の記録が初めて成功しなかった場合、トランザクションは失敗しなければならないことを意味し、（行方不明のrepeatCount属性は<ダイアログ>をするために、デフォルトでは1である）を1回行われます。映像記録は（関連する接続はオーディオとビデオの両方を含むことを考慮すると制限は、レコードへのストリームに適用されていない）が要求されるネゴシエートされたメディアストリームの両方によって供給されます、。ビープ音は、UACに通知するために、記録開始前に（ビープ音=真）権利を再生することがあります。"
    },
    {
      "indent": 3,
      "text": "o As seen before, the MS sends a provisional 202 response to let the AS know that the operation might need some time.",
      "ja": "前に見たようO、MSはAS操作はある程度の時間が必要になる場合がありますことを知らせるための暫定的な202応答を送信します。"
    },
    {
      "indent": 3,
      "text": "o In the meantime, the MS prepares the dialog (e.g., by retrieving the announcement file, for which an HTTP URL is provided, and by checking that the request is well formed) and if all is fine it starts it, notifying the AS with a new REPORT (A3) with a terminated status. As explained previously, interlocutory REPORT messages with an update status would have been sent if the preparation took longer than the timeout provided in the 202 message (e.g., if retrieving the resource via HTTP took longer than expected). Once the dialog has been prepared and started, the UAC connection is then passed to the IVR package, which first plays the announcement on the connection, followed by a beep, and then records all the incoming frames to a buffer. The MS also provides the AS with a unique dialog identifier (dialogid) that will be used in all subsequent event notifications concerning the dialog it refers to.",
      "ja": "O一方、MSは（例えば、HTTPのURLが提供されているアナウンスメントファイルを、取得することにより、要求がうまく形成されていることを確認することで）、ダイアログを用意し、すべてが細かい場合には、ASとを通知し、それを起動します終了ステータスを持つ新しいREPORT（A3）。先に説明したように調製長い202メッセージにおいて提供タイムアウトよりかかった場合に、更新ステータスを有する中間的報告メッセージ（例えば、HTTPを介してリソースを検索する場合には予​​想よりも長くかかった）送信されたであろう。ダイアログを調製し、開始された後は、UACの接続は、ビープ音に続いて最初の接続での発表を果たしているIVRパッケージ、に渡され、その後、バッファにすべての着信フレームを記録しています。 MSはまた、それが参照するダイアログに関するすべての後続のイベント通知に使用される一意のダイアログ識別子（dialogid）とASを提供します。"
    },
    {
      "indent": 3,
      "text": "o The AS acks the latest REPORT (A4), thus terminating this transaction, and waits for the results.",
      "ja": "O最新のレポート（A4）、ACKのASは、このように、このトランザクションを終了し、その結果を待ちます。"
    },
    {
      "indent": 3,
      "text": "o Once the recording is over, the MS prepares a notification CONTROL (B1). The <event> body is prepared with an explicit reference to the previously provided dialog identifier, in order to make the AS aware of the fact that the notification is related to that specific dialog. The event body is then completed with the recording-related information (<recordinfo>), in this case the path to the recorded file (here, an HTTP URL) that can be used by the AS for anything it needs. The payload also contains information about the prompt (<promptinfo>), which is, however, not relevant to the scenario.",
      "ja": "記録が終わったら、O、MSは、通知制御（B1）を作成します。 <イベント>体は、通知がその特定のダイアログに関連しているという事実をAS認識できるようにするために、以前に提供され、ダイアログ識別子を明示的に参照して準備されます。イベント体は、その後、記録に関連する情報を完成する（<recordinfo>）、この場合は、それが必要とする何のためにASで使用することができます記録されたファイル（ここでは、HTTPのURL）へのパス。ペイロードはまた、しかしながら、シナリオに関連していないプロンプト（<promptinfo>）についての情報を含みます。"
    },
    {
      "indent": 3,
      "text": "o The AS concludes this first recording transaction by acking the CONTROL event (B2).",
      "ja": "O ASは、CONTROLイベント（B2）を肯定応答（ACK）することによって、この第一の記録トランザクションを終了します。"
    },
    {
      "indent": 3,
      "text": "Now that the first transaction has ended, the AS has the 10-s recording of the UAC talking and can let the UAC hear it by having the MS play it for the UAC as an announcement:",
      "ja": "今、最初のトランザクションが終了したことを、ASは話してUACの10秒の記録を持っており、UACは、MSが発表としてUACのためにそれを再生することによって、それを聞かせすることができます："
    },
    {
      "indent": 3,
      "text": "o In the second transaction, the AS invokes a playout on the UAC connection by means of a new CONTROL request (C1). The body is once again for the IVR package (msc-ivr/1.0), but this time it requests the start (<dialogstart>) of a new announcement context (<prompt>). The file to be played is the file that was recorded before (<media>).",
      "ja": "O 2番目のトランザクションでは、ASは、新たな制御要求（C1）によってUAC接続の再生を呼び出します。ボディは、IVRパッケージ（MSC-IVR / 1.0）のために再びですが、今回はそれが新しいお知らせコンテキストの開始（<dialogstart>）（<プロンプト>）を要求します。再生するファイルは、（<メディア>）の前に記録されたファイルです。"
    },
    {
      "indent": 3,
      "text": "o Again, the usual provisional 202 (C2) takes place.",
      "ja": "O再び、通常仮202（C2）が行われます。"
    },
    {
      "indent": 3,
      "text": "o In the meantime, the MS prepares and starts the new dialog, and notifies the AS with a new REPORT (C3) with a terminated status. The connection is then passed to the IVR package, which plays the file on it.",
      "ja": "O一方、MSは準備して新しいダイアログを開始し、終了ステータスを持つ新しいREPORT（C3）でASに通知します。接続がそれにファイルを再生するIVRパッケージに渡されます。"
    },
    {
      "indent": 3,
      "text": "o The AS acks the terminating REPORT (C4), now waiting for the announcement to end.",
      "ja": "今終了する発表を待っている終端REPORT（C4）のACK AS、O。"
    },
    {
      "indent": 3,
      "text": "o Once the playout is over, the MS sends a CONTROL event (D1) that contains in its body (<promptinfo>) information about the just-concluded announcement. As before, the proper dialogid is used as a reference to the correct dialog.",
      "ja": "再生が終わったら、O、MSは、その本体に先程締結発表について（<promptinfo>）情報が含まれている制御イベント（D1）を送信します。前述のように、適切なdialogidは正しいダイアログへの参照として使用されています。"
    },
    {
      "indent": 3,
      "text": "o The AS concludes this second and last transaction by acking the CONTROL event (D2).",
      "ja": "O ASは、CONTROLイベント（D2）を肯定応答（ACK）により、この第二の、最後のトランザクションを終了します。"
    },
    {
      "indent": 3,
      "text": "As in the previous paragraph, the whole CFW interaction is provided for a more in-depth evaluation of the protocol interaction.",
      "ja": "前の段落のように、全体CFWの相互作用は、プロトコル相互作用のより詳細な評価のために設けられています。"
    },
    {
      "indent": 3,
      "text": "A1. AS -> MS (CFW CONTROL, record)\n----------------------------------\n   CFW 796d83aa1ce4 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 265",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"10514b7f:6a900179\"> <dialog> <prompt> <media loc=\"http://www.example.com/demo/echorecord.mpg\"/> </prompt> <record beep=\"true\" maxtime=\"10s\"/> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"10514b7f：6a900179\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// www.example.com/demo/echorecord.mpg \"/> </プロンプト> <レコードビープ=\" true」をMAXTIME = \"10S\" /> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 3,
      "text": "A2. AS <- MS (CFW 202)\n----------------------\n   CFW 796d83aa1ce4 202\n   Timeout: 5",
      "raw": true
    },
    {
      "indent": 3,
      "text": "A3. AS <- MS (CFW REPORT terminate)\n-----------------------------------\n   CFW 796d83aa1ce4 REPORT\n   Seq: 1\n   Status: terminate\n   Timeout: 25\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"68d6569\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"68d6569\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 3,
      "text": "A4. AS -> MS (CFW 200, ACK to 'REPORT terminate')\n-------------------------------------------------\n   CFW 796d83aa1ce4 200\n   Seq: 1",
      "raw": true
    },
    {
      "indent": 3,
      "text": "B1. AS <- MS (CFW CONTROL event)\n--------------------------------\n   CFW 0eb1678c0bfc CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 403",
      "raw": true
    },
    {
      "indent": 5,
      "text": " <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"68d6569\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"9987\" termmode=\"completed\"/> <recordinfo duration=\"10017\" termmode=\"maxtime\"> <mediainfo loc=\"http://www.example.net/recordings/recording-68d6569.mpg\" type=\"video/mpeg\" size=\"591872\"/> </recordinfo> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"68d6569\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>持続時間= \"9987\" TERMMODE = \"完了\" /> <recordinfo期間= \"10017\" TERMMODE = \"MAXTIME\"> <MediaInfoをLOC = \"http://www.example.net/recordings/recording-68d6569.mpg\" タイプ= \"ビデオ/ MPEG\" サイズ= \"591872\" /> </ recordinfo> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 3,
      "text": "B2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 0eb1678c0bfc 200",
      "raw": true
    },
    {
      "indent": 3,
      "text": "C1. AS -> MS (CFW CONTROL, play)\n--------------------------------\n   CFW 1632eead7e3b CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 241",
      "raw": true
    },
    {
      "indent": 5,
      "text": " <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"10514b7f:6a900179\"> <dialog> <prompt> <media loc=\"http://www.example.net/recordings/recording-68d6569.mpg\"/> </prompt> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"10514b7f：6a900179\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// www.example.net/recordings/recording-68d6569.mpg \"/> </プロンプト> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 3,
      "text": "C2. AS <- MS (CFW 202)\n----------------------\n   CFW 1632eead7e3b 202\n   Timeout: 5",
      "raw": true
    },
    {
      "indent": 3,
      "text": "C3. AS <- MS (CFW REPORT terminate)\n-----------------------------------\n   CFW 1632eead7e3b REPORT\n   Seq: 1\n   Status: terminate\n   Timeout: 25\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"5f5cb45\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"5f5cb45\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 3,
      "text": "C4. AS -> MS (CFW 200, ACK to 'REPORT terminate')\n-------------------------------------------------\n   CFW 1632eead7e3b 200\n   Seq: 1",
      "raw": true
    },
    {
      "indent": 3,
      "text": "D1. AS <- MS (CFW CONTROL event)\n--------------------------------\n   CFW 502a5fd83db8 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 230",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"5f5cb45\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"10366\" termmode=\"completed\"/> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"5f5cb45\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>期間= \"10366\" TERMMODE = \"完了\" /> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 3,
      "text": "D2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 502a5fd83db8 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6.2. Phone Call",
      "section_title": true,
      "ja": "6.2. 電話"
    },
    {
      "indent": 3,
      "text": "Another scenario that might involve the interaction between an AS and an MS is the classic phone call between two UACs. In fact, even though the most straightforward way to achieve this would be to let the UACs negotiate the session and the media to be used between them, there are cases when the services provided by an MS might also prove useful for such phone calls.",
      "ja": "ASとMSの間の相互作用を伴うかもしれないもう一つのシナリオは、以下の2つの求めるUACの間の古典的な電話です。実際には、これを達成する最も簡単な方法は、求めるUACはセッションとメディアがそれらの間で使用されるように交渉できるようにするだろうにもかかわらず、MSが提供するサービスはまた、携帯電話の通話のために有用証明するかもしれない場合があります。"
    },
    {
      "indent": 3,
      "text": "One of these cases is when the two UACs have no common supported codecs: having the two UACs directly negotiate the session would result in a session with no available media. Involving the MS as a transcoder would in this case still allow the two UACs to communicate. Another interesting case is when the AS (or any other entity on whose behalf the AS is working) is interested in manipulating or monitoring the media session between the UACs, e.g., to record the conversation. A similar scenario will be dealt with in Section 6.2.2.",
      "ja": "なしに直接使用可能なメディアとのセッションにつながるセッションをネゴシエート2つの求めるUACを持つ2つの求めるUACは何の共通サポートされるコーデックを持っていないときに、これらの例の一つです。トランスコーダとしてMSに関与することは、この場合には、依然として2つの求めるUACが通信することを可能にします。 AS（またはその代理としてAS上の任意の他のエンティティが働いている）とき、もう一つの興味深いケースがある会話を記録するために、例えば、求めるUACの間でメディアセッションを操作または監視に興味があります。同様のシナリオは、セクション6.2.2で対処されます。"
    },
    {
      "indent": 3,
      "text": "Before looking at how such a scenario might be accomplished by means of the Media Control Channel Framework, it is worth mentioning what the SIP signaling involving all the interested parties might look like. In fact, in such a scenario, a 3PCC approach is absolutely needed. An example is provided in Figure 17. Again, the presented example is not at all to be considered best common practice when 3PCC is needed in a MEDIACTRL-based framework. It is only described in order to help the reader more easily understand what the requirements are on the MS side, and as a consequence what information might be required. [RFC3725] provides a much more detailed overview on 3PCC patterns in several use cases. Only an explanatory sequence diagram is provided, without delving into the details of the exchanged SIP messages.",
      "ja": "このようなシナリオは、メディア制御チャネルフレームワークによって達成されるかもしれない方法を見る前に、すべての利害関係者が関与するSIPシグナリングはどのように見えるかを言及する価値があります。実際には、このようなシナリオでは、3PCCアプローチが絶対的に必要とされています。例えば、再度、提示された例が全く3PCCがMEDIACTRLベースのフレームワークで必要とされる最高の一般的な方法とみなされるべきではなく、図17に提供されます。これは、読者がより簡単に要件がMS側にあり、結果としてどのような情報が必要になることがありますかを理解するのを助けるために記載されています。 [RFC3725]はいくつかのユースケースにおける3PCCパターンに関するより詳細な概要を提供します。のみ説明するシーケンス図を交換SIPメッセージの詳細を掘り下げることなく、提供されます。"
    },
    {
      "indent": 3,
      "text": "UAC(1)        UAC(2)                  AS                          MS\n  |             |                     |                           |\n  | INVITE (offer A)                  |                           |\n  | Call-Id: A  |                     |                           |\n  |---------------------------------->|                           |\n  |             |          100 Trying |                           |\n  |             |          Call-Id: A |                           |\n  |<----------------------------------|                           |\n  |             |   INVITE (no offer) |                           |\n  |             |   Call-Id: B        |                           |\n  |             |<--------------------|                           |\n  |             | 180 Ringing         |                           |\n  |             | Call-Id: B          |                           |\n  |             |-------------------->|                           |\n  |             |         180 Ringing |                           |\n  |             |          Call-Id: A |                           |\n  |<----------------------------------|                           |\n  |             |                     | INVITE (offer A)          |\n  |             |                     | Call-Id: C                |\n  |             |                     |-------------------------->|\n  |             |                     |         200 OK (offer A') |\n  |             |                     |         Call-Id: C        |\n  |             |                     |<--------------------------|\n  |             |                     | ACK                       |\n  |             |                     | Call-Id: C                |\n  |             |                     |-------------------------->|\n  |             | 200 OK (offer B)    |                           |\n  |             | Call-Id: B          |                           |\n  |             |-------------------->|                           |\n  |             |                     | INVITE (offer B)          |\n  |             |                     | Call-Id: D                |\n  |             |                     |-------------------------->|\n  |             |                     |         200 OK (offer B') |\n  |             |                     |         Call-Id: D        |\n  |             |                     |<--------------------------|\n  |             |                     | ACK                       |\n  |             |                     | Call-Id: D                |\n  |             |                     |-------------------------->|\n  |             |      ACK (offer B') |                           |\n  |             |      Call-Id: B     |                           |",
      "raw": true
    },
    {
      "indent": 5,
      "text": "|             |<--------------------|                           |\n|             |   200 OK (offer A') |                           |\n|             |   Call-Id: A        |                           |\n|<----------------------------------|                           |\n| ACK         |                     |                           |\n| Call-Id: A  |                     |                           |\n|---------------------------------->|                           |\n|             |                     |                           |\n.             .                     .                           .\n.             .                     .                           .",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 17: Phone Call: Example of 3PCC",
      "ja": "図17：電話コール：3PCCの例"
    },
    {
      "indent": 3,
      "text": "In this example, UAC1 wants to place a phone call to UAC2. To do so, it sends an INVITE to the AS with its offer A. The AS sends an offerless INVITE to UAC2. When UAC2 responds with a 180, the same message is forwarded by the AS to UAC1 to notify it that the callee is ringing. In the meantime, the AS also adds a leg to the MS for UAC1, as explained at the beginning of Section 6. To do so, it of course uses the offer A that UAC1 made. Once UAC2 accepts the call by providing its own offer B in the 200, the AS also adds a leg for offer B to the MS. At this point, the negotiation can be completed by providing the two UACs with the SDP answer negotiated by the MS with them (A' and B', respectively).",
      "ja": "この例では、UAC1はUAC2へ電話をかけることを望んでいます。そのためには、ASがofferlessがUAC2にINVITEを送信し、そのプランAでASにINVITEを送信します。 UAC2は180で応答すると、同じメッセージが呼び出し先が鳴っていることを通知するUAC1するASによって転送されます。一方で、そうするために第6節の冒頭で説明したようにASはまた、UAC1のためにMSに足を追加し、もちろんそれはUAC1が行われていることのオファーAを使用しています。 UAC2は200で、独自のオファーBを提供することで、コールを受け入れたら、ASはまた、MSへのオファーB用の脚を追加します。この時点で、交渉はそれらとMS（A「及びB」のそれぞれ）によって交渉SDP回答で2つの求めるUACを提供することによって完成させることができます。"
    },
    {
      "indent": 3,
      "text": "Of course, this is only one way to deal with the signaling and shall not be considered an absolutely mandatory approach.",
      "ja": "もちろん、これは、シグナリングに対処する唯一の方法であり、絶対に必須なアプローチとはみなされません。"
    },
    {
      "indent": 3,
      "text": "Once the negotiation is over, the two UACs are not in communication yet. In fact, it's up to the AS now to actively trigger the MS to somehow attach their media streams to each other, by referring to the connection identifiers associated with the UACs as explained previously. This document presents two different approaches that might be followed, according to what needs to be accomplished. A generic media perspective of the phone call scenario is depicted in Figure 18. The MS is basically in the media path between the two UACs.",
      "ja": "交渉が終わったら、2つの求めるUACはまだ連絡していません。実際には、積極的にMSが何らかの形で先に説明したよう求めるUACに関連付けられた接続識別子を参照することで、お互いに自分のメディア・ストリームを添付するトリガするためにAS今次第です。この文書では、達成する必要があるものによると、続くかもしれない2つの異なるアプローチを提示します。電話のシナリオの一般的なメディアの観点を図18. MSに図示された2つの求めるUACの間のメディアパスに基本的です。"
    },
    {
      "indent": 3,
      "text": "+-------+  UAC1 (RTP)        +--------+  UAC1 (RTP)        +-------+\n|  UAC  |===================>| Media  |===================>|  UAC  |\n|   1   |<===================| Server |<===================|   2   |\n+-------+        UAC2 (RTP)  +--------+        UAC2 (RTP)  +-------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 18: Phone Call: Media Perspective",
      "ja": "図18：電話コール：メディアの展望"
    },
    {
      "indent": 3,
      "text": "From the framework point of view, when the UACs' legs are not attached to anything yet, what appears is shown in Figure 19: since there are no connections involving the UACs yet, the frames they might be sending are discarded, and nothing is sent to them (except for silence, if its transmission is requested).",
      "ja": "まだ求めるUACを伴う接続がないことから、彼らが送信される可能性がありますフレームは破棄され、何も送信されません。図19に示されて表示されるものを求めるUAC脚はまだ何に添付されていないビューの枠組みポイント、から、それらに（沈黙を除いて、その送信が要求された場合）。"
    },
    {
      "indent": 16,
      "text": "                     MS\n              +--------------+\nUAC 1         |              |         UAC 2\n  o----->>-------x        x.......>>.....o\n  o.....<<.......x        x-------<<-----o\n              |              |\n              +--------------+",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 19: Phone Call: UAC Media Leg Not Attached",
      "ja": "図19：電話コール：UACメディア脚装着されていません"
    },
    {
      "indent": 0,
      "text": "6.2.1. Direct Connection",
      "section_title": true,
      "ja": "6.2.1. 直結"
    },
    {
      "indent": 3,
      "text": "The Direct Connection approach is the easiest, and a more straightforward, approach to get the phone call between the two UACs to work. The idea is basically the same as that of the Direct Echo approach. A <join> directive is used to directly attach one UAC to the other, by exploiting the MS to only deal with the transcoding/ adaption of the flowing frames, if needed.",
      "ja": "直接接続のアプローチが最も簡単であり、より直接的なアプローチは、動作するように2つの求めるUACの間で電話を取得します。アイデアは、基本的には直接エコーアプローチの場合と同様です。 <参加>ディレクティブは、直接、必要な場合にのみ、流れるフレームのトランスコーディング/適応に対処するためにMSを利用して、他の1つのUACを取り付けるために使用されます。"
    },
    {
      "indent": 3,
      "text": "This approach is depicted in Figure 20.",
      "ja": "このアプローチは、図20に示されています。"
    },
    {
      "indent": 16,
      "text": "                     MS\n              +--------------+\nUAC 1         |              |         UAC 2\n  o----->>-------+~~~>>~~~+------->>-----o\n  o-----<<-------+~~~<<~~~+-------<<-----o\n              |              |\n              +--------------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 20: Phone Call: Direct Connection",
      "ja": "図20：電話コール：直接接続"
    },
    {
      "indent": 2,
      "text": "UAC1       UAC2         AS                                   MS\n |           |          |                                    |\n |           |          | 1. CONTROL (join UAC1 to UAC2)     |\n |           |          |++++++++++++++++++++++++++++++++++>>|\n |           |          |                                    |--+ join\n |           |          |                                    |  | UAC1\n |           |          |                          2. 200 OK |<-+ UAC2\n |           |          |<<++++++++++++++++++++++++++++++++++|\n |           |          |                                    |\n |<<#######################################################>>|\n |                UAC1 can hear UAC2 talking                 |\n |<<#######################################################>>|\n |           |          |                                    |\n |           |<<###########################################>>|\n |           |          UAC2 can hear UAC1 talking           |\n |           |<<###########################################>>|\n |           |          |                                    |\n |<*talking*>|          |                                    |\n .           .          .                                    .\n .           .          .                                    .",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Figure 21: Direct Connection: Framework Transactions",
      "ja": "図21：直接接続：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The framework transactions needed to accomplish this scenario are very trivial and easy to understand. They are basically the same as those presented in the Direct Echo Test scenario; the only difference is in the provided identifiers. In fact, this time the MS is not supposed to attach the UACs' media connections to themselves but has to join the media connections of two different UACs, i.e., UAC1 and UAC2. This means that in this transaction, id1 and i2 will have to address the media connections of UAC1 and UAC2. In the case of a successful transaction, the MS takes care of forwarding all media coming from UAC1 to UAC2 and vice versa, transparently taking care of any required transcoding steps, if necessary.",
      "ja": "このシナリオを実現するために必要なフレームワークの取引は非常に些細なと理解しやすいです。これらは基本的に直接エコーテストシナリオで提示したものと同じです。唯一の違いは、提供の識別子です。実際には、この時間は、MSは、自分自身に求めるUACのメディア接続を添付することになって2つの異なる求めるUAC、すなわち、UAC1とUAC2のメディア接続への参加を持っていません。これは、このトランザクションでは、ID1およびi2はUAC1とUAC2のメディア接続に対処する必要があることを意味します。成功したトランザクションの場合には、MSは、必要に応じて、透過、任意の必要なトランスコーディング手順の世話を、UAC1からUAC2およびその逆に来るすべてのメディアを転送するの世話をします。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW CONTROL)\n-------------------------\n   CFW 0600855d24c8 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 130",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"10514b7f:6a900179\" id2=\"e1e1427c:1c998d22\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"10514b7f：6a900179\" ID2 = \"e1e1427c：1c998d22\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200 OK)\n------------------------\n   CFW 0600855d24c8 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "Such a simple approach has its drawbacks. For instance, with such an approach, recording a conversation between two users might be tricky to accomplish. In fact, since no mixing would be involved, only the single connections (UAC1<->MS and UAC2<->MS) could be recorded. If the AS wants a conversation-recording service to be provided anyway, it needs additional business logic on its side. An example of such a use case is provided in Section 6.2.3.",
      "ja": "このような単純なアプローチは、その欠点を有しています。例えば、そのようなアプローチを用いて、二人のユーザ間の会話を記録することは達成するのが難しいかもしれません。いかなる混合が関与しないことになるので、実際には、単一の接続（UAC1 < - > MSとUAC2 < - > MS）を記録することができます。 ASは会話記録サービスがとにかく提供することを希望する場合は、その側に追加のビジネスロジックを必要とします。このようなユースケースの例は、セクション6.2.3に設けられています。"
    },
    {
      "indent": 0,
      "text": "6.2.2. Conference-Based Approach",
      "section_title": true,
      "ja": "6.2.2. 会議ベースのアプローチ"
    },
    {
      "indent": 3,
      "text": "The approach described in Section 6.2.1 surely works for a basic phone call but, as explained previously, might have some drawbacks whenever more advanced features are needed. For instance, one can't record the whole conversation -- only the single connections -- since no mixing is involved. Additionally, even the single task of playing an announcement over the conversation could be complex, especially if the MS does not support implicit mixing over media connections. For this reason, in more advanced cases a different approach might be taken, like the conference-based approach described in this section.",
      "ja": "6.2.1項で説明したアプローチは、確実に、基本的な電話のために動作しますが、先に説明したように、より高度な機能を必要とするたびに、いくつかの欠点があるかもしれません。たとえば、1は全体の会話を録音することはできません - ただ一つの接続を - 何の混合が関与していないので。また、会話上で告知を再生しても、単一のタスクは、MSがメディア接続を介して、暗黙的な混合をサポートしていない場合は特に、複雑である可能性があります。このため、より高度な例では別のアプローチは、このセクションで説明する会議ベースのアプローチのように、取られるかもしれません。"
    },
    {
      "indent": 3,
      "text": "The idea is to use a mixing entity in the MS that acts as a bridge between the two UACs. The presence of this entity allows more customization of what needs to be done with the conversation, like the recording of the conversation that has been provided as an example. The approach is depicted in Figure 22. The mixing functionality in the MS will be described in more detail in the following section (which deals with many conference-related scenarios), so only some hints will be provided here for basic comprehension of the approach.",
      "ja": "アイデアは、二つ求めるUACの間のブリッジとして機能するMSに混合エンティティを使用することです。このエンティティの存在は、一例として提供されている会話の記録のように、会話に何をすべきかのより多くのカスタマイズを可能にします。アプローチは、MSにおける図22.混合機能に描かれている唯一のいくつかのヒントは、アプローチの基本的な理解のためにここに提供されるように、（多くの会議に関連するシナリオを扱う）は、以下のセクションでより詳細に説明します。"
    },
    {
      "indent": 16,
      "text": "                      MS\n              +---------------+\nUAC A         |               |         UAC B\n  o----->>-------+~~>{#}::>+:::::::>>:::::o\n  o:::::<<:::::::+<::{#}<~~+-------<<-----o\n              |       :       |\n              |       :       |\n              +-------:-------+\n                      :\n                      +::::> (conversation.wav)",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 22: Phone Call: Conference-Based Approach",
      "ja": "図22：携帯電話の通話：会議ベースのアプローチ"
    },
    {
      "indent": 3,
      "text": "To identify a single sample scenario, let's consider a phone call that the AS wants to record.",
      "ja": "単一のサンプルシナリオを特定するには、のASは、記録したいという電話を考えてみましょう。"
    },
    {
      "indent": 3,
      "text": "Figure 23 shows how this could be accomplished in the Media Control Channel Framework. This example, as usual, hides the previous interaction between the UACs and the AS and instead focuses on the Control Channel operations and what follows.",
      "ja": "図23は、これがメディア制御チャネルフレームワークで達成することができる方法を示しています。この例では、いつものように、求めるUACとAS間の以前の相互作用を隠し、代わりに制御チャネルの操作に焦点を当て、何が続きます。"
    },
    {
      "indent": 1,
      "text": "UAC1        UAC2       AS                                 MS\n |           |         |                                  |\n |           |         | A1. CONTROL (create conference)  |\n |           |         |++++++++++++++++++++++++++++++++>>|\n |           |         |                                  |--+ create\n |           |         |                                  |  | conf and\n |           |         |      A2. 200 OK (conferenceid=Y) |<-+ its ID\n |           |         |<<++++++++++++++++++++++++++++++++|\n |           |         |                                  |\n |           |         | B1. CONTROL (record for 10800 s) |\n |           |         |++++++++++++++++++++++++++++++++>>|\n |           |         |                                  |--+ start\n |           |         |                                  |  | the\n |           |         |                       B2. 200 OK |<-+ dialog\n |           |         |<<++++++++++++++++++++++++++++++++|\n |        Recording +--|                                  |\n |       of the mix |  |                                  |\n |      has started +->|                                  |\n |           |         | C1. CONTROL (join UAC1<->confY)  |\n |           |         |++++++++++++++++++++++++++++++++>>|\n |           |         |                                  |--+  join\n |           |         |                                  |  | UAC1 &\n |           |         |                       C2. 200 OK |<-+ confY\n |           |         |<<++++++++++++++++++++++++++++++++|\n |           |         |                                  |\n |<<####################################################>>|\n |           Now UAC1 is mixed in the conference          |\n |<<####################################################>>|\n |           |         |                                  |\n |           |         | D1. CONTROL (join UAC2<->confY)  |\n |           |         |++++++++++++++++++++++++++++++++>>|\n |           |         |                                  |--+  join\n |           |         |                                  |  | UAC2 &\n |           |         |                       D2. 200 OK |<-+ confY\n |           |         |<<++++++++++++++++++++++++++++++++|\n |           |         |                                  |\n |           |<<########################################>>|\n |           |            Now UAC2 is mixed too           |\n |           |<#########################################>>|\n |           |         |                                  |\n |<*talking*>|         |                                  |\n |           |         |                                  |\n .           .         .                                  .\n .           .         .                                  .",
      "raw": true
    },
    {
      "indent": 7,
      "text": "Figure 23: Conference-Based Approach: Framework Transactions",
      "ja": "図23：会議ベースのアプローチ：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The AS uses two different packages to accomplish this scenario: the Mixer package (to create the mixing entity and join the UACs) and the IVR package (to record what happens in the conference). The framework transaction steps can be described as follows:",
      "ja": "ミキサーパッケージ（求めるUACを混合エンティティを作成し、参加する）とIVRパッケージ（会議で何が起こるかを記録するために）：ASは、このシナリオを実現するために、2つの異なるパッケージを使用しています。次のようなフレームワークのトランザクションステップを説明することができます。"
    },
    {
      "indent": 3,
      "text": "o First of all, the AS creates a new hidden conference by means of a <createconference> request (A1). This conference is properly configured according to the use it is assigned to. In fact, since only two participants will be joined to it, both 'reserved-talkers' and 'reserved-listeners' are set to 2, just as the 'n' value for the N-best audio mixing algorithm. The video layout is also set accordingly (<single-view>/<dual-view>).",
      "ja": "すべてのOまず、ASは、<createconference>リクエスト（A1）を用いて、新たな隠された会議が作成されます。この会議は、正しくそれが割り当てられている用途に応じて設定されています。 2つだけの参加者がそれに結合されるので、実際には、両方の「予約され、話者」と「予約-リスナーがちょうどNベストオーディオミキシングアルゴリズムの「N」値として、2に設定されています。ビデオレイアウトもそれに応じて設定されている（<シングルビュー> / <デュアルビュー>）。"
    },
    {
      "indent": 3,
      "text": "o The MS sends notification of the successful creation of the new conference in a 200 framework message (A2). The identifier assigned to the conference, which will be used in subsequent requests addressed to it, is 6013f1e.",
      "ja": "O MSは、200フレームワークのメッセージ（A2）に新しい会議の作成に成功の通知を送信します。後続の要求で使用される会議に割り当てられた識別子は、それに対処し、6013f1eです。"
    },
    {
      "indent": 3,
      "text": "o The AS requests a new recording for the newly created conference. To do so, it places a proper request to the IVR package (B1). The AS is interested in a video recording (type=video/mpeg), which must not last longer than 3 hours (maxtime=10800s), after which the recording must end. Additionally, no beep must be played on the conference (beep=false), and the recording must start immediately whether or not any audio activity has been reported (vadinitial=false is the default value for <record>).",
      "ja": "O ASは、新たに作成された会議のために新しい録音を要求します。そのためには、IVRパッケージ（B1）への適切な要求を配置します。 ASは、長い3時間以上持続してはいけません（MAXTIME = 10800s）、その後録音が終了しなければならない（タイプ=ビデオ/ MPEG）を記録、ビデオ、に興味があります。また、ビープ会議（ビープ音=偽）で再生しないことが必要であり、記録は任意のオーディオ活動が報告されているかどうかをすぐに開始する必要があります（= vadinitial偽のデフォルト値である<記録>）。"
    },
    {
      "indent": 3,
      "text": "o The transaction is handled by the MS, and when the dialog has been successfully started, a 200 OK is issued to the AS (B2). The message contains the dialogid associated with the dialog (00b29fb), which the AS must refer to for later notifications.",
      "ja": "OトランザクションはMSによって処理され、ダイアログが正常に起動されたとき、200 OKは、AS（B2）に発行されます。メッセージは、ASが後で通知のために参照する必要がありますダイアログ（00b29fb）、関連付けられたdialogidが含まれています。"
    },
    {
      "indent": 3,
      "text": "o At this point, the AS attaches both UACs to the conference with two separate <join> directives (C1/D1). When the MS confirms the success of both operations (C2/D2), the two UACs are actually in contact with each other (even though indirectly, since a hidden conference they're unaware of is on their path), and their media contribution is recorded.",
      "ja": "この時点で、O、ASは、2つの別個の<参加>ディレクティブ（C1 / D1）との会議の両方求めるUACを取り付けます。 MSは、両方の操作の成功（C2 / D2）を確認すると、2つの求めるUACは（彼らは彼らのパス上にあるのを知らないなら、隠れ会議以来、たとえ間接的に）互いに接触して実際にあり、そのメディアの貢献は、記録。"
    },
    {
      "indent": 0,
      "text": "A1. AS -> MS (CFW CONTROL, createconference)\n--------------------------------------------\n   CFW 238e1f2946e8 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 395",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <createconference reserved-talkers=\"2\" reserved-listeners=\"2\"> <audio-mixing type=\"nbest\" n=\"2\"/> <video-layouts> <video-layout min-participants='1'> <single-view/> </video-layout> <video-layout min-participants='2'> <dual-view/> </video-layout> </video-layouts> <video-switch> <controller/> </video-switch> </createconference> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <createconference予約-話者= \"2\" 予約-リスナー= \"2\"> <オーディオミキシングタイプ= \"nbest \"N =\" 2\" /> <ビデオ・レイアウト> <ビデオレイアウトMIN-参加= '1'> <シングルビュー/> </ビデオレイアウト> <ビデオレイアウトMIN-参加= '2'> <デュアルビュー/> </ビデオレイアウト> </ビデオ・レイアウト> <ビデオスイッチ> <コントローラ/> </ビデオスイッチ> </ createconference> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 238e1f2946e8 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 151",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Conference created\" conferenceid=\"6013f1e\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"会議作成\" conferenceid = \"6013f1e\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "B1. AS -> MS (CFW CONTROL, record)\n----------------------------------\n   CFW 515f007c5bd0 CONTROL\n   Control-Package: msc-ivr\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 226",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart conferenceid=\"6013f1e\"> <dialog> <record beep=\"false\" type=\"video/mpeg\" maxtime=\"10800s\"/> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart conferenceid = \"6013f1e\"> <ダイアログ> <レコードビープ= \"false\" をタイプ= \"ビデオ/ MPEG\" MAXTIME = \"10800s\" /> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "B2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 515f007c5bd0 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"00b29fb\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"00b29fb\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "C1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 0216231b1f16 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"10514b7f:6a900179\" id2=\"6013f1e\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"10514b7f：6a900179\" ID2 = \"6013f1e\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "C2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 0216231b1f16 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "D1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 140e0f763352 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 124",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"219782951:0b9d3347\" id2=\"6013f1e\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"219782951：0b9d3347\" ID2 = \"6013f1e\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "D2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 140e0f763352 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "The recording of the conversation can subsequently be accessed by the AS by waiting for an event notification from the MS. This event, which will be associated with the previously started recording dialog, will contain the URI of the recorded file. Such an event may be triggered by either a natural completion of the dialog (e.g., the dialog has reached its programmed 3 hours) or any interruption of the dialog itself (e.g., the AS actively requests that the recording be interrupted, since the call between the UACs ended).",
      "ja": "会話の記録は、その後、MSからのイベント通知を待つことによって、ASによってアクセスすることができます。以前に開始した記録ダイアログに関連付けされるこのイベントは、記録されたファイルのURIが含まれています。このようなイベントは、ダイアログの自然の完了のいずれかによってトリガすることができる（例えば、ダイアログはそのプログラムされた3時間に達している）、またはダイアログ自体の中断は、（例えば、AS積極間に呼び出してから、記録が中断されることを要求します求めるUAC）を終了しました。"
    },
    {
      "indent": 0,
      "text": "6.2.3. Recording a Conversation",
      "section_title": true,
      "ja": "6.2.3. 会話を録音"
    },
    {
      "indent": 3,
      "text": "The previous section described how to take advantage of the conferencing functionality of the Mixer package in order to allow the recording of phone calls in a simple way. However, using a dedicated mixer just for a phone call might be considered overkill. This section shows how recording a conversation and subsequently playing it out can be accomplished without a mixing entity involved in the call, i.e., by using the Direct Connection approach as described in Section 6.2.1.",
      "ja": "前のセクションでは、簡単な方法で携帯電話の通話の録音を可能にするためにミキサーパッケージの会議機能を活用する方法を説明しました。しかし、ちょうど電話専用のミキサーを使用してやり過ぎと考えられるかもしれません。このセクションでは、会話を記録し、続いてそれを再生は、セクション6.2.1に記載したように直接接続手法を用いて、即ち、コールに関与混合エンティティなしに達成することができる方法を示しています。"
    },
    {
      "indent": 3,
      "text": "As explained previously, if the AS wants to record a phone call between two UACs, the use of just the <join> directive without a mixer forces the AS to just rely on separate recording commands. That is, the AS can only instruct the MS to separately record the media flowing on each media leg: a recording for all the data coming from UAC1, and a different recording for all the data coming from UAC2. If someone subsequently wants to access the whole conversation, the AS may take at least two different approaches:",
      "ja": "前述したようにASが2つの求めるUACの間の通話を録音したい場合は、ちょうどミキサーなしディレクティブを<参加>の使用は、単に個別の記録コマンドに依存するASを強制します。 UAC1から来るすべてのデータの記録、およびUAC2から来るすべてのデータに対して異なる記録：それはASのみMSが個別に各メディアの脚に流れるメディアを記録するように指示することができ、あります。誰かが、その後、全体の会話をアクセスしたい場合は、ASは、少なくとも2つの異なるアプローチを取ることがあります。"
    },
    {
      "indent": 3,
      "text": "1. It may mix the two recordings itself (e.g., by delegating it to an offline mixing entity) in order to obtain a single file containing the combination of the two recordings. This way, a simple playout as described in Section 6.1.2 would suffice.",
      "ja": "1.これは、2つの記録の組み合わせを含む単一のファイルを得るために（例えば、エンティティを混合オフラインに委譲することにより）2つの記録自体を混合することができます。この方法では、6.1.2項で説明したように、単純な再生は十分であろう。"
    },
    {
      "indent": 3,
      "text": "2. Alternatively, it may take advantage of the mixing functionality provided by the MS itself. One way to do this is to create a hidden conference on the MS, attach the UAC as a passive participant to it, and play the separate recordings on the conference as announcements. This way, the UAC accessing the recording would experience both of the recordings at the same time.",
      "ja": "2.あるいは、MS自体によって提供されるミキシング機能を利用することができます。これを行う1つの方法は、MSに隠された会議を作成、それに受動的参加者としてUACを添付して、アナウンスメントとして会議に別々の録音を再生することです。この方法では、記録にアクセスしてUACを同時に録画の両方を経験するでしょう。"
    },
    {
      "indent": 3,
      "text": "The second approach is considered in this section. The framework transaction as described in Figure 24 assumes that a recording has already been requested for both UAC1 and UAC2, that the phone call has ended, and that the AS has successfully received the URIs to both of the recordings from the MS. Such steps are not described again, since they would be quite similar to the steps described in Section 6.1.2. As mentioned previously, the idea is to use a properly constructed hidden conference to mix the two separate recordings on the fly and present them to the UAC. It is, of course, up to the AS to subsequently unjoin the user from the conference and destroy the conference itself once the playout of the recordings ends for any reason.",
      "ja": "第二のアプローチは、このセクションにあると考えられます。図24で説明したようにフレームワークのトランザクションは記録が既に通話が終了したことを、UAC1とUAC2の両方のために要求されていること、およびASが正常にMSからの記録の両方にURIを受信したと仮定しています。彼らは6.1.2項で説明する手順と非常に似ていますので、そのような手順は、再度説明されていません。前述したように、アイデアは、その場で二つの別々の録音をミックスし、UACにそれらを提示するために適切に構築隠された会議を使用することです。これは、その後の会議からユーザーを退会し、録音の再生が何らかの理由で終了すると会議自体を破壊することはもちろん、ASまで、です。"
    },
    {
      "indent": 1,
      "text": "UAC3                     AS                                 MS\n |                       |                                  |\n | (UAC1 and UAC2 have previously been recorded; the AS has |\n |  the two different recordings available for playout.)    |\n |                       |                                  |\n |                       | A1. CONTROL (create conference)  |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |--+ create\n |                       |                                  |  | conf &\n |                       |      A2. 200 OK (conferenceid=Y) |<-+ its ID\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |                       | B1. CONTROL (join UAC3 & confY)  |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |--+ join\n |                       |                                  |  | UAC &\n |                       |                       B2. 200 OK |<-+ confY\n |                       |<+++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |<<######################################################>>|\n |   UAC3 is now a passive participant in the conference    |\n |<<######################################################>>|\n |                       |                                  |\n |                       | C1. CONTROL (play REC1 on confY) |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       | D1. CONTROL (play REC2 on confY) |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |--+ Start\n |                       |                                  |  | both\n |                       |                                  |  | of the\n |                       |                                  |  |dialogs\n |                       |                       C2. 200 OK |<-+\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                       D2. 200 OK |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |<<########################################################|\n |  The two recordings are mixed and played together to UAC |\n |<<########################################################|\n |                       |                                  |\n |                       |       E1. CONTROL (<promptinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       | E2. 200 OK                       |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |       F1. CONTROL (<promptinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|                       | F2. 200 OK                       |\n|                       |++++++++++++++++++++++++++++++++>>|\n|                       |                                  |\n.                       .                                  .\n.                       .                                  .",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 24: Phone Call: Playout of a Recorded Conversation",
      "ja": "図24：電話コール：録画会話の再生"
    },
    {
      "indent": 3,
      "text": "The diagram above assumes that a recording of both of the channels (UAC1 and UAC2) has already taken place. Later, when we desire to play the whole conversation to a new user, UAC3, the AS may take care of the presented transactions. The framework transaction steps are only apparently more complicated than those presented so far. The only difference, in fact, is that transactions C and D are concurrent, since the recordings must be played together.",
      "ja": "上記の図は、チャネル（UAC1とUAC2）の両方の記録が既に行われていることを前提としています。私たちは、新しいユーザーに会話全体を再生することを望むとき、後で、UAC3、ASは提示取引の世話をすることがあります。フレームワークのトランザクションステップは明らかにこれまでに提示されたものよりも複雑です。唯一の違いは、実際には、記録が一緒に演奏しなければならないので、トランザクションC及びDは、同時であるということです。"
    },
    {
      "indent": 3,
      "text": "o First of all, the AS creates a new conference to act as a mixing entity (A1). The settings for the conference are chosen according to the use case, e.g., the video layout, which is fixed to <dual-view>, and the switching type to <controller>. When the conference has been successfully created (A2), the AS takes note of the conference identifier.",
      "ja": "Oまず第一に、ASは、混合エンティティ（A1）として機能する新しい会議を作成します。会議の設定は、ユースケースに応じて選択され、例えば、<デュアルビュー>に固定されているビデオ・レイアウト、および<コントローラ>スイッチング型。会議が成功裏に（A2）が作成されたとき、ASは、会議識別子のノートを取ります。"
    },
    {
      "indent": 3,
      "text": "o At this point, UAC3 is attached to the conference as a passive user (B1). There would be no point in letting the user contribute to the conference mix, since he will only need to watch a recording. In order to specify his passive status, both the audio and video streams for the user are set to 'recvonly'. If the transaction succeeds, the MS notifies the AS (B2).",
      "ja": "この時点で、O、UAC3は、受動ユーザ（B1）として会議に取り付けられています。彼は唯一の記録を監視する必要がありますので、ユーザーは、会議ミックスに貢献させるにはポイントはないだろう。彼の受動的なステータスを指定するためには、ユーザーのためのオーディオおよびビデオストリームの両方を「がrecvonly」に設定されています。トランザクションが成功した場合、MSは、AS（B2）を通知します。"
    },
    {
      "indent": 3,
      "text": "o Once the conference has been created and UAC3 has been attached to it, the AS can request the playout of the recordings; in order to do so, it requests two concurrent <prompt> directives (C1 and D1), addressing the recording of UAC1 (REC1) and UAC2 (REC2), respectively. Both of the prompts must be played on the previously created conference and not to UAC3 directly, as can be deduced from the 'conferenceid' attribute of the <dialog> element.",
      "ja": "会議が作成されているとUAC3は、それに接続された後、O、ASは、録音の再生を要求することができます。そうするためには、それぞれ、UAC1（REC1）とUAC2（REC2）の記録に対処する、2つの同時<プロンプト>ディレクティブ（C1及びD1）を要求します。 <ダイアログ>要素の「conferenceid」属性から推定することができるようプロンプトの両方が、以前に作成した会議で再生する必要があり、直接UAC3しません。"
    },
    {
      "indent": 3,
      "text": "o The transactions \"live their lives\" exactly as explained for previous <prompt> examples. The originating transactions are first prepared and started (C2, D2), and then, as soon as the playout ends, a related CONTROL message is triggered by the MS (E1, F1). This notification may contain a <promptinfo> element with information about how the playout proceeded (e.g., whether the playout completed normally or was interrupted by a DTMF tone, etc.).",
      "ja": "前の<>プロンプトの例について説明したように、トランザクションoを正確に「自分たちの生活を生きます」。発信トランザクションが最初に製造及び（C2、D2）を開始し、その後、できるだけ早く再生が終了するように、関連した制御メッセージは、MS（E1、F1）によってトリガされます。この通知は、再生（例えば、再生が正常に完了またはDTMFトーン、等によって中断されたかどうか）に進行方法に関する情報を<promptinfo>要素を含んでいてもよいです。"
    },
    {
      "indent": 1,
      "text": "A1. AS -> MS (CFW CONTROL, createconference)\n--------------------------------------------\n   CFW 506e039f65bd CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 312",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <createconference reserved-talkers=\"0\" reserved-listeners=\"1\"> <audio-mixing type=\"controller\"/> <video-layouts> <video-layout min-participants='1'> <dual-view/> </video-layout> </video-layouts> <video-switch> <controller/> </video-switch> </createconference> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <createconference予約-話者= \"0\" 予約-リスナー= \"1\"> <オーディオミキシングタイプ= \"コントローラ「/> <ビデオ・レイアウト> <ビデオレイアウトMIN-参加= '1'> <デュアルビュー/> </ビデオレイアウト> </ビデオ・レイアウト> <ビデオスイッチ> <コントローラ/> </ビデオ-switch> </ createconference> </ mscmixer>"
    },
    {
      "indent": 1,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 506e039f65bd 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 151",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Conference created\" conferenceid=\"2625069\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> < \"作成した会議\" 応答ステータス= \"200\" 理由= conferenceid = \"2625069\" /> </ mscmixer>"
    },
    {
      "indent": 1,
      "text": "B1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 09202baf0c81 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 214",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"aafaf62d:0eac5236\" id2=\"2625069\"> <stream media=\"audio\" direction=\"recvonly\"/> <stream media=\"video\" direction=\"recvonly\"/> </join> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"aafaf62d：0eac5236\" ID2 = \"2625069\"> <ストリームメディア= \"オーディオ\" 方向=」がrecvonly \"/> <ストリームメディア=\" ビデオ」方向= \"がrecvonly\" /> </参加する> </ mscmixer>"
    },
    {
      "indent": 1,
      "text": "B2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 09202baf0c81 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 1,
      "text": "C1. AS -> MS (CFW CONTROL, play recording from UAC1)\n----------------------------------------------------\n   CFW 3c2a08be4562 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 229",
      "raw": true
    },
    {
      "indent": 3,
      "text": " <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart conferenceid=\"2625069\"> <dialog> <prompt> <media loc=\"http://www.example.net/recordings/recording-4ca9fc2.mpg\"/> </prompt> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart conferenceid = \"2625069\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// WWW。 example.net/recordings/recording-4ca9fc2.mpg \"/> </プロンプト> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 1,
      "text": "D1. AS -> MS (CFW CONTROL, play recording from UAC2)\n----------------------------------------------------\n   CFW 1c268d810baa CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 229",
      "raw": true
    },
    {
      "indent": 3,
      "text": " <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart conferenceid=\"2625069\"> <dialog> <prompt> <media loc=\"http://www.example.net/recordings/recording-39dfef4.mpg\"/> </prompt> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart conferenceid = \"2625069\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// WWW。 example.net/recordings/recording-39dfef4.mpg \"/> </プロンプト> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 1,
      "text": "C2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 1c268d810baa 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"7a457cc\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"7a457cc\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 1,
      "text": "D2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 3c2a08be4562 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"1a0c7cf\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"1a0c7cf\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 1,
      "text": "E1. AS <- MS (CFW CONTROL event, playout of recorded UAC1 ended)\n----------------------------------------------------------------\n   CFW 77aec0735922 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 230",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"7a457cc\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"10339\" termmode=\"completed\"/> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"7a457cc\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>期間= \"10339\" TERMMODE = \"完了\" /> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 1,
      "text": "E2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 77aec0735922 200",
      "raw": true
    },
    {
      "indent": 1,
      "text": "F1. AS <- MS (CFW CONTROL event, playout of recorded UAC2 ended)\n----------------------------------------------------------------\n   CFW 62726ace1660 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 230",
      "raw": true
    },
    {
      "indent": 4,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"1a0c7cf\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"10342\" termmode=\"completed\"/> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"1a0c7cf\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>期間= \"10342\" TERMMODE = \"完了\" /> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 1,
      "text": "F2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 62726ace1660 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6.3. Conferencing",
      "section_title": true,
      "ja": "6.3. 会議"
    },
    {
      "indent": 3,
      "text": "One of the most important services the MS must be able to provide is mixing. This involves mixing media streams from different sources and delivering the resulting mix(es) to each interested party, often according to per-user policies, settings, and encoding. A typical scenario involving mixing is, of course, media conferencing. In such a scenario, the media sent by each participant is mixed, and each participant typically receives the overall mix, excluding its own contribution and encoded in the format it negotiated. This example points out in a quite clear way how mixing must take care of the profile of each involved entity.",
      "ja": "最も重要なサービスの一つMSが混合されて提供することができなければなりません。これは、ユーザごとのポリシー、設定、及び符号化によれば、多くの場合、異なるソースからのメディアストリームを混合し、各当事者に、得られた混合物（複数可）を送達することを含みます。混合伴う典型的なシナリオは、当然のことながら、メディア会議です。そのようなシナリオでは、各参加者によって送信されたメディアが混合され、そして各参加者は、典型的には、独自の寄与を除くと、それが交渉形式でエンコードされ、全体のミックスを受信します。この例では、各関与エンティティのプロファイルの世話をしなければならない混合方法は非常に明確な方法で指摘しています。"
    },
    {
      "indent": 3,
      "text": "A media perspective of such a scenario is depicted in Figure 25.",
      "ja": "このようなシナリオのメディア観点は、図25に示されています。"
    },
    {
      "indent": 3,
      "text": "                             +-------+\n                             |  UAC  |\n                             |   C   |\n                             +-------+\n                                \" ^\n                        C (RTP) \" \"\n                                \" \"\n                                \" \" A+B (RTP)\n                                v \"\n+-------+  A (RTP)           +--------+  A+C (RTP)         +-------+\n|  UAC  |===================>| Media  |===================>|  UAC  |\n|   A   |<===================| Server |<===================|   B   |\n+-------+         B+C (RTP)  +--------+           B (RTP)  +-------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 25: Conference: Media Perspective",
      "ja": "図25：会議：メディアの展望"
    },
    {
      "indent": 3,
      "text": "From the framework point of view, when the UACs' legs are not attached to anything yet, what appears is shown in Figure 26: since there are no connections involving the UACs yet, the frames they might be sending are discarded, and nothing is sent back to them (except for silence, if its transmission is requested).",
      "ja": "まだ求めるUACを伴う接続がないことから、彼らが送信される可能性がありますフレームは破棄され、何も送信されません。図26に示されて表示されるものを求めるUAC脚はまだ何に添付されていないビューの枠組みポイント、から、それらに戻って（その伝送が要求された場合、沈黙を除きます）。"
    },
    {
      "indent": 15,
      "text": "                      MS\n              +----------------+\nUAC A         |                |         UAC B\n  o----->>-------x          x.......>>.....o\n  o.....<<.......x          x-------<<-----o\n              |                |\n              |                |\n              |       xx       |\n              |       |.       |\n              +-------|.-------+\n                      |.\n                      ^v\n                      ^v\n                      |.\n                      oo\n                    UAC C",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 26: Conference: UAC Legs Not Attached",
      "ja": "図26：会議：UAC脚は付いていません"
    },
    {
      "indent": 3,
      "text": "The next subsections will cover several typical scenarios involving mixing and conferencing as a whole, specifically:",
      "ja": "次のサブセクションでは、具体的には、全体として混合し、会議関わるいくつかの典型的なシナリオをカバーします。"
    },
    {
      "indent": 3,
      "text": "1. Simple Bridging scenario, which is a very basic (i.e., no \"special effects\"; just mixing involved) conference involving one or more participants.",
      "ja": "非常に基本的なものです。1.シンプルなブリッジングのシナリオ、（すなわち、ノー「特殊効果」;ちょうど関与混合）は、1人のまたは複数の参加者を会議に。"
    },
    {
      "indent": 3,
      "text": "2. Rich Conference scenario, which enriches the Simple Bridging scenario by adding additional features typically found in conferencing systems (e.g., DTMF collection for PIN-based conference access, private and global announcements, recordings, and so on).",
      "ja": "通常、会議システム（PINベースの会議へのアクセス、プライベートとグローバルの発表、録音などのために、例えば、DTMFコレクション）で見つかった追加機能を追加することにより、シンプルなブリッジングのシナリオを豊か2.豊富な会議のシナリオ、。"
    },
    {
      "indent": 3,
      "text": "3. Coaching scenario, which is a more complex scenario that involves per-user mixing (customers, agents, and coaches don't all get the same mixes).",
      "ja": "混合ユーザーごとに必要とするより複雑なシナリオである。3.コーチングシナリオ、（顧客、代理店、およびコーチはすべて同じミックスを得ることはありません）。"
    },
    {
      "indent": 3,
      "text": "4. Sidebars scenario, which adds more complexity to the previous conferencing scenarios by involving sidebars (i.e., separate conference instances that only exist within the context of a parent conference instance) and the custom media delivery that follows.",
      "ja": "サイドバー（のみ親会議インスタンスのコンテキスト内に存在し、すなわち、別の会議インスタンス）と、以下のカスタムメディア配信を含むことにより、以前の会議シナリオにより複雑に4.サイドバーシナリオ。"
    },
    {
      "indent": 3,
      "text": "5. Floor Control scenario, which provides some guidance on how floor control could be involved in a MEDIACTRL-based media conference.",
      "ja": "フロア制御がMEDIACTRLベースのメディアの会議に関与する可能性がどのようにいくつかのガイダンスを提供5.フロア制御のシナリオ、。"
    },
    {
      "indent": 3,
      "text": "All of the above-mentioned scenarios depend on the availability of a mixing entity. Such an entity is provided in the Media Control Channel Framework by the conferencing package. Besides allowing for the interconnection of media sources as seen in the Direct Echo Test section, this package enables the creation of abstract connections that can be joined to multiple connections. These abstract connections, called conferences, mix the contribution of each attached connection and feed them accordingly (e.g., a connection with a 'sendrecv' property would be able to contribute to the mix and listen to it, while a connection with a 'recvonly' property would only be able to listen to the overall mix but not actively contribute to it).",
      "ja": "上記のシナリオの全ては、混合エンティティの可用性に依存します。このようなエンティティは、会議パッケージによってメディア制御チャネルフレームワークで提供されます。直接エコーテストセクションに見られるようなメディアソースの相互接続を可能にする以外に、このパッケージは、複数の接続に接合することができる抽象接続の作成を可能にします。会議と呼ばれるこれらの抽象の接続は、各添付接続の貢献を混ぜると「がrecvonly」に関連しながら、「SENDRECV」プロパティとの接続がミックスに貢献し、それを聞くことができるだろう、例えば（従って、それらを養いますプロパティのみ）ミックス全体に耳を傾けるが、積極的に寄与しないことができるだろう。"
    },
    {
      "indent": 3,
      "text": "That said, each of the above-mentioned scenarios will start more or less in the same way: by the creation of a conference connection (or more than one, as needed in some cases) to be subsequently referred to when it comes to mixing. A typical framework transaction to create a new conference instance in the Media Control Channel Framework is depicted in Figure 27:",
      "ja": "会議接続の作成によって（または複数の、いくつかの場合には、必要に応じて）、続いてそれが混合に来る際に参照される：すなわち、上記のシナリオのそれぞれが、同じ方法で多かれ少なかれ開始する、と述べました。メディア制御チャネルFrameworkの新しい会議のインスタンスを作成するための一般的なフレームワークのトランザクションは、図27に描かれています。"
    },
    {
      "indent": 9,
      "text": "           AS                                 MS\n           |                                  |\n           | 1. CONTROL (create conference)   |\n           |++++++++++++++++++++++++++++++++>>|\n           |                                  |--+ create\n           |                                  |  | conf and\n           |       2. 200 OK (conferenceid=Y) |<-+ its ID\n           |<<++++++++++++++++++++++++++++++++|\nmap URI +--|                                  |\n X with |  |                                  |\n  confY +->|                                  |\n           |                                  |\n           .                                  .\n           .                                  .",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 27: Conference: Framework Transactions",
      "ja": "図27：会議：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The call flow is quite straightforward and can typically be summarized in the following steps:",
      "ja": "コールフローは非常に簡単であり、通常、次のステップに要約することができます。"
    },
    {
      "indent": 3,
      "text": "o The AS invokes the creation of a new conference instance by means of a CONTROL request (1); this request is addressed to the conferencing package (msc-mixer/1.0) and contains in the body the directive (<createconference>) with all the desired settings for the new conference instance. In the example below, the mixing policy is to mix the five ('reserved-talkers') loudest speakers (nbest), while ten listeners at maximum are allowed. Video settings are configured, including the mechanism used to select active video sources (<controller>, meaning the AS will explicitly instruct the MS about it) and details about the video layouts to make available. In this example, the AS is instructing the MS to use a <single-view> layout when only one video source is active, to pass to a <quad-view> layout when at least two video sources are active, and to use a <multiple-5x1> layout whenever the number of sources is at least five. Finally, the AS also subscribes to the \"active-talkers\" event, which means it wants to be informed (at a rate of 4 seconds) whenever an active participant is speaking.",
      "ja": "O ASは、制御要求（1）を用いて、新たな会議インスタンスの作成を呼び出します。この要求は、会議パッケージ宛（MSC-ミキサー/ 1.0）と新しい会議のインスタンスのすべての必要な設定を持つボディディレクティブ（<createconference>）に含まれています。以下の例では、混合ポリシーは、最大で10人のリスナーが許可されている間、5（「予約-話者」）最大音量スピーカー（nbest）を混合することです。ビデオの設定は、ビデオレイアウトの詳細については利用できるようにする（ASが明示的にそれについてMSに指示しますつまり、<コントローラ>）アクティブなビデオソースを選択するために使用されるメカニズムを含め、設定されています。この例では、ASは、唯一のビデオソースがアクティブであるときに、少なくとも2つのビデオソースがアクティブであり、使用する場合、<クワッドビュー>レイアウトに渡す、<シングルビュー>レイアウトを使用するようにMSに指示されています<複数-5X1>源の数​​が少なくとも5であるときはいつでもレイアウト。最後に、ASはまた、アクティブな参加者が話している時はいつでも（4秒のレートで）通知することを希望する意味「アクティブ・トーカー」イベントにサブスクライブします。"
    },
    {
      "indent": 3,
      "text": "o The MS creates the conference instance, assigns a unique identifier to it (6146dd5), and completes the transaction with a 200 response (2).",
      "ja": "O MSは、会議インスタンスを作成すること（6146dd5）に一意の識別子を割り当て、200レスポンス（2）との取引を完了する。"
    },
    {
      "indent": 3,
      "text": "o At this point, the requested conference instance is active and ready to be used by the AS. It is then up to the AS to integrate the use of this identifier in its application logic.",
      "ja": "この時点で、O、要求された会議のインスタンスがアクティブとASで使用できるようになりました。それは、そのアプリケーションのロジックでは、この識別子の使用を統合し、その後ASまでです。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW CONTROL)\n-------------------------\n   CFW 3032e5fb79a1 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 489",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <createconference reserved-talkers=\"5\" reserved-listeners=\"10\"> <audio-mixing type=\"nbest\"/> <video-layouts> <video-layout min-participants='1'> <single-view/> </video-layout> <video-layout min-participants='2'> <quad-view/> </video-layout> <video-layout min-participants='5'> <multiple-5x1/> </video-layout> </video-layouts> <video-switch> <controller/> </video-switch> <subscribe> <active-talkers-sub interval=\"4\"/> </subscribe> </createconference> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <createconference予約-話者= \"5\" 予約-リスナー= \"10\"> <オーディオミキシングタイプ= \"nbest 「/> <ビデオ・レイアウト> <ビデオレイアウトMIN-参加= '1'> <シングルビュー/> </ビデオレイアウト> <ビデオレイアウトMIN-参加= '2'> <クアッドビュー/> </ビデオレイアウト> <ビデオレイアウトMIN-参加= '5'> <複数-5X1 /> </ビデオレイアウト> </ビデオ・レイアウト> <ビデオスイッチ> <コントローラ/> </ビデオスイッチ> <購読> <アクティブ話者サブインターバル= \"4\" /> </サブスクライブ> </ createconference> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200)\n---------------------\n   CFW 3032e5fb79a1 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 151",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Conference created\" conferenceid=\"6146dd5\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"作成した会議\" conferenceid = \"6146dd5\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "6.3.1. Simple Bridging",
      "section_title": true,
      "ja": "6.3.1. シンプルなブリッジング"
    },
    {
      "indent": 3,
      "text": "As mentioned previously, the simplest way that an AS can use a conference instance is simple bridging. In this scenario, the conference instance just acts as a bridge for all the participants that are attached to it. The bridge takes care of transcoding, if needed (in general, different participants may use different codecs for their streams), echo cancellation (each participant will receive the overall mix, excluding its own contribution) and per-participant mixing (each participant may receive different mixed streams, according to what it needs/is allowed to send/receive). This assumes, of course, that each interested participant must be somehow joined to the bridge in order to indirectly communicate with the other participants. From the media perspective, the scenario can be seen as depicted in Figure 28.",
      "ja": "前述のように、ASは、会議のインスタンスを使用することができる最も簡単な方法は、単純なブリッジです。このシナリオでは、会議のインスタンスはそれに接続されているすべての参加者のためのブリッジとして機能します。ブリッジは、各参加者が受け取ることができる（ミキシング必要であれば、（一般的には、異なる参加者が自分のストリームに別のコーデックを使用することができます）、トランスコーディングの世話をするエコーキャンセル（各参加者が独自の貢献を除く全体のミックスを、受け取ることになります）ごとの参加者異なる混合ストリームは、それが必要なものに応じて/）を受信/送信することが許可されています。これは、各興味を持って参加者が何らかの形で間接的に他の参加者と通信するためにブリッジに参加しなければならないことを、もちろん、前提としています。メディアの観点から、シナリオは、図28に示されているように見ることができます。"
    },
    {
      "indent": 15,
      "text": "                       MS\n              +-----------------+\nUAC A         |                 |         UAC B\n  o----->>-------+~~~>{##}:::>+:::::::>>:::::o\n  o:::::<<:::::::+<:::{##}<~~~+-------<<-----o\n              |        ^:       |\n              |        |v       |\n              |        ++       |\n              |        |:       |\n              +--------|:-------+\n                       |:\n                       ^v\n                       ^v\n                       |:\n                       oo\n                     UAC C",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 28: Conference: Simple Bridging",
      "ja": "図28：会議：シンプルなブリッジング"
    },
    {
      "indent": 3,
      "text": "In the framework, the first step is obviously to create a new conference instance as seen in the introductory section (Figure 27). Assuming that a conference instance has already been created, bridging participants to it is quite straightforward and can be accomplished as seen in the Direct Echo Test scenario. The only difference here is that each participant is not directly connected to itself (Direct Echo) or another UAC (Direct Connection) but to the bridge instead. Figure 29 shows the example of two different UACs joining the same conference. The example, as usual, hides the previous interaction between each of the two UACs and the AS, and instead focuses on what the AS does in order to actually join the participants to the bridge so that they can interact in a conference. Please note also that to make the diagram more readable, two different identifiers (UAC1 and UAC2) are used in place of the identifiers previously employed to introduce the scenario (UAC A, B, C).",
      "ja": "フレームワークでは、最初のステップは、導入部（図27）に見られるように、新しい会議インスタンスを作成することは明らかです。会議インスタンスが既に作成されていると仮定すると、それに参加者を橋渡しすることは非常に簡単で、直接エコーテストシナリオで見られるように達成することができます。ここでの唯一の違いは、各参加者が直接自体（直接エコー）または別のUAC（直接接続）にではなく、ブリッジに接続されていないことです。図29は、同じ会議に参加する二つの異なる求めるUACの一例を示しています。例では、いつものように、2つの求めるUACとASのそれぞれとの間の以前の相互作用を隠し、代わりにASが、彼らは会議で対話できるように、実際にブリッジに参加者を参加させるために何をするかに焦点を当てています。その図を読みやすくするために、二つの異なる識別子（UAC1とUAC2）は以前（UAC A、B、C）のシナリオを導入するために用いられる識別子の代わりに使用されているにも注意してください。"
    },
    {
      "indent": 1,
      "text": "UAC1      UAC2         AS                                   MS\n |          |          |                                    |\n |          |          | A1. CONTROL (join UAC1 and confY)  |\n |          |          |++++++++++++++++++++++++++++++++++>>|\n |          |          |                                    |--+  join\n |          |          |                                    |  | UAC1 &\n |          |          |                         A2. 200 OK |<-+ confY\n |          |          |<<++++++++++++++++++++++++++++++++++|\n |          |          |                                    |\n |<<######################################################>>|\n |            Now UAC1 is mixed in the conference           |\n |<<######################################################>>|\n |          |          |                                    |\n |          |          | B1. CONTROL (join UAC2 and confY)  |\n |          |          |++++++++++++++++++++++++++++++++++>>|\n |          |          |                                    |--+  join\n |          |          |                                    |  | UAC2 &\n |          |          |                         B2. 200 OK |<-+ confY\n |          |          |<<++++++++++++++++++++++++++++++++++|\n |          |          |                                    |\n |          |<<###########################################>>|\n |          |    Now UAC2 too is mixed in the conference    |\n |          |<<###########################################>>|\n |          |          |                                    |\n .          .          .                                    .\n .          .          .                                    .",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 29: Simple Bridging: Framework Transactions (1)",
      "ja": "図29：簡単なブリッジング：Frameworkの取引（1）"
    },
    {
      "indent": 3,
      "text": "The framework transaction steps are actually quite trivial and easy to understand, since they're very similar to some previously described scenarios. The AS joins both UAC1 (id1 in A1) and UAC2 (id1 in B1) to the conference (id2 in both transactions). As a result of these two operations, both UACs are mixed in the conference. Since no <stream> is explicitly provided in any of the transactions, all the media from the UACs (audio/video) are attached to the conference (as long as the conference has been properly configured to support both, of course).",
      "ja": "彼らはいくつかの前述のシナリオと非常によく似ているので、フレームワークのトランザクションステップは、実際には非常に些細なと理解しやすいです。 ASはUAC1（A1でID1）との会議にUAC2（B1でID1）（両方のトランザクションでID2）の両方に参加します。これらの二つの操作の結果として、両方求めるUACは、会議中で混合します。何<流れ>が明示的トランザクションのいずれかに設けられているので、求めるUAC（オーディオ/ビデオ）からのすべてのメディアは、（あれば会議が正しくコースの両方をサポートするように構成されているように）会議に接続されていません。"
    },
    {
      "indent": 3,
      "text": "A1. AS -> MS (CFW CONTROL)\n--------------------------\n   CFW 434a95786df8 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 120",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"e1e1427c:1c998d22\" id2=\"6146dd5\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"e1e1427c：1c998d22\" ID2 = \"6146dd5\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 434a95786df8 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "B1. AS -> MS (CFW CONTROL)\n--------------------------\n   CFW 5c0cbd372046 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 120",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"10514b7f:6a900179\" id2=\"6146dd5\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"10514b7f：6a900179\" ID2 = \"6146dd5\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "B2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 5c0cbd372046 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "Once one or more participants have been attached to the bridge, their connections and how their media are handled by the bridge can be dynamically manipulated by means of another directive, called <modifyjoin>. A typical use case for this directive is the change of direction of an existing media (e.g., a previously speaking participant is muted, which means its media direction changes from 'sendrecv' to 'recvonly'). Figure 30 shows how a framework transaction requesting such a directive might appear.",
      "ja": "一回一つ以上の参加者がその接続、ブリッジに接続されているとどのように彼らのメディアがブリッジによって処理されると、動的に<modifyjoin>と呼ばれる別のディレクティブの手段によって操作することができます。この指示のための典型的な使用事例は、既存のメディアの方向の変化である（例えば、以前に話している参加者は、「recvonlyで」「へのsendrecv」からのメディア方向の変化を意味し、ミュートされています）。図30は、このようなディレクティブを要求するフレームワークのトランザクションが表示される場合があります方法を示しています。"
    },
    {
      "indent": 1,
      "text": "UAC1      UAC2         AS                                 MS\n |          |          |                                  |\n |          |          | 1. CONTROL (modifyjoin UAC1)     |\n |          |          |++++++++++++++++++++++++++++++++>>|\n |          |          |                                  |--+ modify\n |          |          |                                  |  | join\n |          |          |                        2. 200 OK |<-+ settings\n |          |          |<<++++++++++++++++++++++++++++++++|\n |          |          |                                  |\n |<<######################################################|\n |      Now UAC1 can receive but not send (recvonly)      |\n |<<######################################################|\n |          |          |                                  |\n .          .          .                                  .\n .          .          .                                  .",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 30: Simple Bridging: Framework Transactions (2)",
      "ja": "図30：簡単なブリッジング：Frameworkの取引（2）"
    },
    {
      "indent": 3,
      "text": "The directive used to modify an existing join configuration is <modifyjoin>, and its syntax is exactly the same as the syntax required in <join> instructions. In fact, the same syntax is used for identifiers (id1/id2). Whenever a <modifyjoin> is requested and id1 and id2 address one or more joined connections, the AS is requesting a change of the join configuration. In this case, the AS instructs the MS to mute (<stream> media=audio, direction=recvonly) UAC1 (id1=UAC1) in the conference (id2) it has been attached to previously. Any other connection existing between them is left untouched.",
      "ja": "既存の参加設定を変更するために使用ディレクティブは<modifyjoin>であり、その構文は<参加>の指示に必要な構文とまったく同じです。実際には、同じ構文は、識別子（ID1 / ID2）のために使用されています。 <modifyjoin>要求さ​​れ、ID1とID2のアドレス一つ以上の加入接続するたびに、ASは参加した構成の変更を要求しています。この場合、ASは、それは、以前に取り付けられた（<ストリーム>メディア=オーディオ、方向= recvonlyで）UAC1（ID1 = UAC1）会議中（ID2）ミュートするMSに指示します。それらの間に存在する他の接続がそのまま残されています。"
    },
    {
      "indent": 3,
      "text": "It is worth noting that the <stream> settings are enforced according to both the provided direction AND the id1 and id2 identifiers. For instance, in this example id1 refers to UAC1, while id2 refers to the conference in the MS. This means that the required modifications have to be applied to the stream specified in the <stream> element of the message, along the direction that goes from 'id1' to 'id2' (as specified in the <modifyjoin> element of the message). In the provided example, the AS wants to mute UAC1 with respect to the conference. To do so, the direction is set to 'recvonly', meaning that, for what affects id1, the media stream is only to be received. If id1 referred to the conference and id2 to UAC1, to achieve the same result the direction would have to be set to 'sendonly', meaning \"id1 (the conference) can only send to id2 (UAC1), and no media stream must be received\". Additional settings for a <stream> (e.g., audio volume, region assignments, and so on) follow the same approach, as discussed in subsequent sections.",
      "ja": "それは<ストリーム>の設定が提供さ方向、ID1とID2の識別子の両方に基づいて施行されていることは注目に値します。 ID2がMSに会議を指しながら、例えば、この例では、ID1、UAC1を指します。これは、必要な変更が「ID2」に「ID1」（メッセージの<modifyjoin>要素で指定されている）から進む方向に沿って、メッセージの<流れ>要素で指定されたストリームに適用されなければならないことを意味します。提供された例では、ASは、会議に対するUAC1をミュートしたいと考えています。そのためには、方向がID1に影響を及ぼし何のために、メディアストリームのみを受信することがある、ということを意味し、「がrecvonly」に設定されています。 ID1がUAC1に会議とID2と呼ば場合は、ID1（会議）のみID2（UAC1）に送ることができる」という意味、方向は「sendonlyで」に設定しなければならないであろうと同じ結果を達成するために、そして何のメディアストリームがあってはなりません」受け取りました。 <ストリーム>の追加設定（例えば、音量、などの領域の割り当て）次のセクションで説明したように、同じアプローチに従います。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW CONTROL)\n-------------------------\n   CFW 57f2195875c9 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 182",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <modifyjoin id1=\"e1e1427c:1c998d22\" id2=\"6146dd5\"> <stream media=\"audio\" direction=\"recvonly\"/> </modifyjoin> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <modifyjoin ID1 = \"e1e1427c：1c998d22\" ID2 = \"6146dd5\"> <ストリームメディア= \"オーディオ\" 方向=」がrecvonly \"/> </ modifyjoin> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200 OK)\n------------------------\n   CFW 57f2195875c9 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join modified\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <レスポンスステータス= \"200\" 理由= \"修飾参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "6.3.2. Rich Conference Scenario",
      "section_title": true,
      "ja": "6.3.2. 豊富な会議のシナリオ"
    },
    {
      "indent": 3,
      "text": "The previous scenario can be enriched with additional features often found in existing conferencing systems. Typical examples include IVR-based menus (e.g., the DTMF collection for PIN-based conference access), partial and complete recordings in the conference (e.g., for the \"state your name\" functionality and recording of the whole conference), private and global announcements, and so on. All of this can be achieved by means of the functionality provided by the MS. In fact, even if the conferencing and IVR features come from different packages, the AS can interact with both of them and achieve complex results by correlating the effects of different transactions in its application logic.",
      "ja": "前のシナリオでは、多くの場合、既存の会議システムで見つかった追加機能で濃縮することができます。典型的な例は、会議中に（例えば、PINベースの会議アクセス用のDTMFコレクション）IVRベースのメニュー、部分的および完全な録音を（例えば、「あなたの名前を述べる」機能や全体会議の記録のための）プライベートとグローバル、その上で発表、および。このすべては、MSが提供する機能によって達成することができます。実際には、会議とIVR機能が異なるパッケージから来た場合でも、ASは、それらの両方と相互作用することができ、そのアプリケーションロジックの異なる取引の影響を相関させることにより、複雑な結果を達成します。"
    },
    {
      "indent": 3,
      "text": "From the media and framework perspective, a typical Rich Conference scenario can be seen as depicted in Figure 31.",
      "ja": "図31に示すように、メディアフレームワークの観点から、一般的なリッチ会議シナリオを見ることができます。"
    },
    {
      "indent": 5,
      "text": "                                 MS\n                                  +-------- (announcement.wav)\n(conference_recording.wav) <:::::+|\n                                 :|\n                        +--------:|--------+\n          UAC A         |        :v        |         UAC B\n            o----->>-------+~~~>{##}:::>+:::::::>>:::::o\n            o:::::<<:::::::+<:::{##}<~~~+-------<<-----o\n                        |        ^:     |  |\n                        |        |v     v  |\n                        |        ++     * (collect DTMF, get name)\n                        |        |:        |\n                        +--------|:--------+\n                                 |:\n                                 ^v\n                                 ^v\n                                 |:\n                                 oo\n                               UAC C",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 31: Conference: Rich Conference Scenario",
      "ja": "図31：会議：リッチ会議のシナリオ"
    },
    {
      "indent": 3,
      "text": "To identify a single sample scenario, let's consider this sequence for a participant joining a conference (which again we assume has already been created):",
      "ja": "単一のサンプルシナリオを特定するには、のは（再び我々はすでに作成されていると仮定）会議に参加する参加者のために、このシーケンスを考えてみましょう："
    },
    {
      "indent": 3,
      "text": "1. The UAC as usual INVITEs a URI associated with a conference, and the AS follows the previously explained procedure to have the UAC negotiate a new media session with the MS.",
      "ja": "1.いつものようにUACは、会議に関連付けられたURIを招き、そしてASは以下の以前にUACがMSと新しいメディアセッションをネゴシエート持つように手順を説明しました。"
    },
    {
      "indent": 3,
      "text": "2. The UAC is presented with an IVR menu, in which it is requested to input a PIN code to access the conference.",
      "ja": "2. UACは、会議にアクセスするためのPINコードの入力を要求されているIVRメニューが提示されます。"
    },
    {
      "indent": 3,
      "text": "3. If the PIN is correct, the UAC is asked to state its name so that it can be recorded.",
      "ja": "3. PINが正しい場合、UACは、それが記録できるように、その名前を述べるように頼まれます。"
    },
    {
      "indent": 3,
      "text": "4. The UAC is attached to the conference, and the previously recorded name is announced globally to the conference to advertise its arrival.",
      "ja": "4. UACは、会議に取り付けられており、以前に録音された名前は、その到着を宣伝するために会議に世界的に発表しています。"
    },
    {
      "indent": 3,
      "text": "Figure 32 shows a single UAC joining a conference. The example, as usual, hides the previous interaction between the UAC and the AS, and instead focuses on what the AS does to actually interact with the participant and join it to the conference bridge.",
      "ja": "図32は、会議に参加する単一UACを示しています。例では、いつものように、UACとAS間の以前の相互作用を隠し、代わりにASが実際に参加者と対話し、会議ブリッジにそれを結合するために何をするかに焦点を当てています。"
    },
    {
      "indent": 1,
      "text": "UAC                      AS                                 MS\n |                       |                                  |\n |                       | A1. CONTROL (request DTMF PIN)   |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |--+ start\n |                       |                                  |  | the\n |                       |                       A2. 200 OK |<-+ dialog\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |<<########################################################|\n |   \"Please input the PIN number to join the conference\"   |\n |<<########################################################|\n |                       |                                  |\n |########################################################>>|\n |                   DTMF digits are collected              |--+ get\n |########################################################>>|  | DTMF\n |                       |                                  |<-+ digits\n |                       |      B1. CONTROL (<collectinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|\n |       Compare DTMF +--| B2. 200 OK                       |\n |        digits with |  |++++++++++++++++++++++++++++++++>>|\n |     the PIN number +->|                                  |\n |                       | C1. CONTROL (record name)        |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |--+ start\n |                       |                                  |  | the\n |                       |                       C2. 200 OK |<-+ dialog\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |<<########################################################|\n |          \"Please state your name after the beep\"         |\n |<<########################################################|\n |                       |                                  |\n |########################################################>>|\n |  Audio from the UAC is recorded (until timeout or DTMF)  |--+ save\n |########################################################>>|  | in a\n |                       |                                  |<-+ file\n |                       |       D1. CONTROL (<recordinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|     Store recorded +--| D2. 200 OK                       |\n|       file to play |  |++++++++++++++++++++++++++++++++>>|\n|    announcement in +->|                                  |\n|   conference later    |                                  |\n|                       | E1. CONTROL (join UAC & confY)   |\n|                       |++++++++++++++++++++++++++++++++>>|\n|                       |                                  |--+ join\n|                       |                                  |  | UAC &\n|                       |                       E2. 200 OK |<-+ confY\n|                       |<+++++++++++++++++++++++++++++++++|\n|                       |                                  |\n|<<######################################################>>|\n|     UAC is now included in the mix of the conference     |\n|<<######################################################>>|\n|                       |                                  |\n|                       | F1. CONTROL (play name on confY) |\n|                       |++++++++++++++++++++++++++++++++>>|\n|                       |                                  |--+ start\n|                       |                                  |  | the\n|                       |                       F2. 200 OK |<-+ dialog\n|                       |<<++++++++++++++++++++++++++++++++|\n|                       |                                  |\n|<<########################################################|\n|  Global announcement: \"Simon has joined the conference\"  |\n|<<########################################################|\n|                       |                                  |\n|                       |       G1. CONTROL (<promptinfo>) |\n|                       |<<++++++++++++++++++++++++++++++++|\n|                       | G2. 200 OK                       |\n|                       |++++++++++++++++++++++++++++++++>>|\n|                       |                                  |\n.                       .                                  .\n.                       .                                  .",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 32: Rich Conference Scenario: Framework Transactions",
      "ja": "図32：リッチ会議シナリオ：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "As can be deduced from the sequence diagram above, the AS, in its business logic, correlates the results of different transactions, addressed to different packages, to implement a conferencing scenario more complex than the Simple Bridging scenario previously described. The framework transaction steps are as follows:",
      "ja": "上記のシーケンス図から推定されるように、ASは、そのビジネスロジックに、異なるトランザクションの結果を相関、前述の単純なブリッジングのシナリオよりも複雑な会議のシナリオを実装するために、異なるパッケージに宛て。次のようなフレームワークのトランザクション手順は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o Since this is a private conference, the UAC is to be presented with a request for a password, in this case a PIN number. To do so, the AS instructs the MS (A1) to collect a series of DTMF digits from the specified UAC (connectionid=UAC). The request includes both a voice message (<prompt>) and the described digit collection context (<collect>). The PIN is assumed to be a",
      "ja": "これはプライベートな会議ですので、O、UACは、この場合、パスワードの要求、PIN番号を提示することです。そうするために、ASは、MS（A1）が指定されたUAC（connectionid = UAC）からのDTMFディジットのシリーズを収集するように指示します。要求は、（<>プロンプト）音声メッセージの両方を含むと記載桁収集コンテキスト（<収集します>）。 PINがあると想定されます"
    },
    {
      "indent": 6,
      "text": "4-digit number, and so the MS has to collect 4 digits maximum (maxdigits=4). The DTMF digit buffer must be cleared before collecting (cleardigitbuffer=true), and the UAC can use the star key to restart the collection (escapekey=*), e.g., if the UAC is aware that he mistyped any of the digits and wants to start again.",
      "ja": "4桁の数字などMSは最大（maxdigits = 4）4桁を収集しなければなりません。 DTMFディジットバッファは（cleardigitbuffer = true）を収集する前にクリアする必要があり、かつUACは、コレクションを再起動するためにスターキーを使用することができます（escapekey = *）、例えば、UACは、彼が数字のいずれかを誤って入力し、したいことを知っている場合再開する。"
    },
    {
      "indent": 3,
      "text": "o The transaction goes on as usual (A2), with the transaction being handled and notification of the dialog start being sent in a 200 OK. After that, the UAC is actually presented with the voice message and is subsequently requested to input the required PIN number.",
      "ja": "Oトランザクションは、トランザクションが処理されると、ダイアログ開始の通知が200 OKで送信されると、通常の（A2）として続きます。その後、UACは、実際に音声メッセージが提示され、その後、入力に必要なPIN番号を要求されています。"
    },
    {
      "indent": 3,
      "text": "o We assume that the UAC typed the correct PIN number (1234), which is reported by the MS to the AS by means of the usual MS-generated CONTROL event (B1). The AS correlates this event to the previously started dialog by checking the referenced dialogid (06d1bac) and acks the event (B2). It then extracts the information it needs from the event (in this case, the digits provided by the MS) from the <controlinfo> container (dtmf=1234) and verifies that it is correct.",
      "ja": "O我々は、UACは、通常のMS-生成された制御イベント（B1）によってASにMSによって報告された正しいPIN番号（1234）、入力したと仮定する。 ASは、参照dialogid（06d1bac）とACKのイベント（B2）をチェックすることにより、以前に開始したダイアログに、このイベントを相関させます。それは、それが（この場合、MSによって提供桁）イベントから<CONTROLINFO>容器（DTMF = 1234）から必要とそれが正しいことを検証する情報を抽出します。"
    },
    {
      "indent": 3,
      "text": "o Since the PIN is correct, the AS can proceed to the next step, i.e., asking the UAC to state his name, in order to subsequently play the recording on the conference to report the new participant. Again, this is done with a request to the IVR package (C1). The AS instructs the MS to play a voice message (\"state your name after the beep\"), to be followed by a recording of only the audio from the UAC (in stream, media=audio/sendonly, while media=video/inactive). A beep must be played right before the recording starts (beep=true), and the recording must only last 3 seconds (maxtime=3s), since it is only needed as a brief announcement.",
      "ja": "PINが正しいので、O、ASは次のステップ、すなわち、その後に新しい参加者を報告する会議の記録を再生するためには、彼の名前を述べるためにUACを尋ねるに進むことができます。再び、これは、IVRパッケージ（C1）への要求で行われます。 ASは、/ sendonlyの流れ、メディア=オーディオで（UACから音声のみの録音が続くことを、（「ビープ音の後にあなたの名前を述べる」）音声メッセージを再生するようにMSに指示し、メディア=ビデオ/非アクティブながら、 ）。ビープ音は右の記録を開始する（ビープ音=真）の前に再生されなければならない、そしてそれが唯一の簡単な発表として必要とされているので、記録は、3秒（MAXTIME = 3S）続く必要があります。"
    },
    {
      "indent": 3,
      "text": "o Without delving again into the details of a recording-related transaction (C2), the AS finally gets the URI of the requested recording (D1, acked in D2).",
      "ja": "O録画関連トランザクション（C2）の詳細に再び踏み込んなければ、ASは、最終的に要求された記録（D2にACKさD1）のURIを取得します。"
    },
    {
      "indent": 3,
      "text": "o At this point, the AS attaches the UAC (id1) to the conference (id2), just as explained for the Simple Bridging scenario (E1/E2).",
      "ja": "oがこの時点では、ASは、単純なブリッジングのシナリオ（E1 / E2）のための説明と同じように、会議へのUAC（ID1）（ID2）を添付します。"
    },
    {
      "indent": 3,
      "text": "o Finally, to notify the other participants that a new participant has arrived, the AS requests a global announcement on the conference. This is a simple <prompt> request to the IVR package (F1), as explained in previous sections (e.g., Section 6.1.2, among others), but with a slight difference: the target of the prompt is not a connectionid (a media connection) but the conference itself (conferenceid=6146dd5). As a result of this transaction, the announcement would be played on all the media connections attached to the conference that are allowed to receive media from it. The AS specifically requests that two media files be played:",
      "ja": "O最後に、新しい参加者が到着したことを他の参加者に通知するために、ASは、会議のグローバルな発表を要求します。これは、前のセクションで説明したように、IVRパッケージ（F1）への単純な<プロンプト>要求である（例えば、特に6.1.2項）が、微妙な違いを持つ：プロンプトのターゲットはconnectionidではありません（Aメディア接続）が、会議自体（conferenceid = 6146dd5）。この取引の結果、発表はそれからメディアを受信するために許可されている会議に接続されているすべてのメディア接続で再生されます。 AS、特に2つのメディアファイルを再生することを要求します。"
    },
    {
      "indent": 6,
      "text": "1. the media file containing the recorded name of the new user as retrieved in D1 (\"Simon...\").",
      "ja": "1. D1（「サイモン...」）で取得し、新しいユーザの録音名を含むメディアファイル。"
    },
    {
      "indent": 6,
      "text": "2. a pre-recorded media file explaining what happened (\"... has joined the conference\").",
      "ja": "2.（「...会議に参加した」）何が起こったかを説明する事前に記録されたメディアファイル。"
    },
    {
      "indent": 6,
      "text": "The transaction then follows its usual flow (F2), and the event that sends notification regarding the end of the announcement (G1, acked in G2) concludes the scenario.",
      "ja": "トランザクションは、その通常の流量（F2）、及びシナリオを終了する（G2にACKさG1）アナウンスの終了に関する通知を送信するイベントに従います。"
    },
    {
      "indent": 0,
      "text": "A1. AS -> MS (CFW CONTROL, collect)\n-----------------------------------\n   CFW 50e56b8d65f9 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 311",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"10514b7f:6a900179\"> <dialog> <prompt> <media loc=\"http://www.example.net/prompts/conf-getpin.wav\" type=\"audio/x-wav\"/> </prompt> <collect maxdigits=\"4\" escapekey=\"*\" cleardigitbuffer=\"true\"/> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"10514b7f：6a900179\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// www.example.net/prompts/conf-getpin.wav」TYPE = \"オーディオ/ X-WAV\" /> </プロンプト> <収集maxdigits = \"4\" escapekey = \"*\" cleardigitbuffer = \"TRUE\" /> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 50e56b8d65f9 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"06d1bac\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"06d1bac\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "B1. AS <- MS (CFW CONTROL event)\n--------------------------------\n   CFW 166d68a76659 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 272",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"06d1bac\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"2312\" termmode=\"completed\"/> <collectinfo dtmf=\"1234\" termmode=\"match\"/> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"06d1bac\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>持続時間= \"2312\" TERMMODE = \"完了\" /> <collectinfo DTMF = \"1234\" TERMMODE = \"一致\" /> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "B2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 166d68a76659 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "C1. AS -> MS (CFW CONTROL, record)\n----------------------------------\n   CFW 61fd484f196e CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 373",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"10514b7f:6a900179\"> <dialog> <prompt> <media loc=\"http://www.example.net/prompts/conf-rec-name.wav\" type=\"audio/x-wav\"/> </prompt> <record beep=\"true\" maxtime=\"3s\"/> </dialog> <stream media=\"audio\" direction=\"sendonly\"/> <stream media=\"video\" direction=\"inactive\"/> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"10514b7f：6a900179\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// www.example.net/prompts/conf-rec-name.wav」タイプ= \"オーディオ/ X-wavファイル\" /> </プロンプト> <レコードビープ= \"true\" をMAXTIME = \"3S\" /> </ダイアログ> <ストリームメディア= \"オーディオ\" 方向= \"sendonlyで\" /> <ストリームメディア= \"ビデオ\" 方向= \"非アクティブ\" /> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "C2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 61fd484f196e 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"1cf0549\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"1cf0549\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "D1. AS <- MS (CFW CONTROL event)\n--------------------------------\n   CFW 3ec13ab96224 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 402",
      "raw": true
    },
    {
      "indent": 2,
      "text": " <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"1cf0549\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"4988\" termmode=\"completed\"/> <recordinfo duration=\"3000\" termmode=\"maxtime\"> <mediainfo loc=\"http://www.example.net/recordings/recording-1cf0549.wav\" type=\"audio/x-wav\" size=\"48044\"/> </recordinfo> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"1cf0549\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>持続時間= \"4988\" TERMMODE = \"完了\" /> <recordinfo期間= \"3000\" TERMMODE = \"MAXTIME\"> <MediaInfoをLOC = \"http://www.example.net/recordings/recording-1cf0549.wav\" タイプ= \"オーディオ/ X-WAV\" サイズ= \"48044\" /> </ recordinfo> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "D2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 3ec13ab96224 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "E1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 261d188b63b7 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 120",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"10514b7f:6a900179\" id2=\"6146dd5\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"10514b7f：6a900179\" ID2 = \"6146dd5\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "E2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 261d188b63b7 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "F1. AS -> MS (CFW CONTROL, play)\n--------------------------------\n   CFW 718c30836f38 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 334",
      "raw": true
    },
    {
      "indent": 2,
      "text": " <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart conferenceid=\"6146dd5\"> <dialog> <prompt> <media loc=\"http://www.example.net/recordings/recording-1cf0549.wav\" type=\"audio/x-wav\"/> <media loc=\"http://www.example.net/prompts/conf-hasjoin.wav\" type=\"audio/x-wav\"/> </prompt> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart conferenceid = \"6146dd5\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// WWW。 example.net/recordings/recording-1cf0549.wav \"TYPE = \"オーディオ/ X-WAV\"/> <メディアLOC = \"http://www.example.net/prompts/conf-hasjoin.wav\" タイプ=\" オーディオ/ X-wavファイル \"/> </プロンプト> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "F2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 718c30836f38 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"5f4bc7e\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"5f4bc7e\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "G1. AS <- MS (CFW CONTROL event)\n--------------------------------\n   CFW 6485194f622f CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 229",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"5f4bc7e\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"1838\" termmode=\"completed\"/> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"5f4bc7e\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>期間= \"1838\" TERMMODE = \"完了\" /> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "G2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 6485194f622f 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6.3.3. Coaching Scenario",
      "section_title": true,
      "ja": "6.3.3. コーチングのシナリオ"
    },
    {
      "indent": 3,
      "text": "Another typical conference-based use case is the so-called Coaching scenario. In such a scenario, a customer (called \"A\" in the following example) places a call to a business call center. An agent (B) is assigned to the customer. A coach (C), who cannot be heard by the customer, provides the agent with whispered suggestions about what to say. This scenario is also described in [RFC4597].",
      "ja": "他の典型的な会議ベースのユースケースは、いわゆるコーチングのシナリオです。このようなシナリオでは、（次の例では「A」と呼ばれる）顧客がビジネスコールセンターに電話をかけます。エージェント（B）は、顧客に割り当てられています。顧客が聞くことができないコーチ（C）は、言うことをについてささやい提案を剤を提供します。このシナリオはまた、[RFC4597]に記載されています。"
    },
    {
      "indent": 3,
      "text": "As can be deduced from the scenario description, per-user policies for media mixing and delivery, i.e., who can hear what, are very important. The MS must make sure that only the agent can hear the coach's suggestions. Since this is basically a multiparty call (despite what the customer might be thinking), a mixing entity is needed in order to accomplish the scenario requirements. To summarize:",
      "ja": "シナリオの記述から推測できるように、何を聞くことができ、メディアミックスと配信、すなわち、のためのユーザごとのポリシーは非常に重要です。 MSは唯一のエージェントは、コーチの提案を聞くことができることを確認する必要があります。これは基本的に（顧客が考えるかもしれないものにもかかわらず）マルチパーティコールであるので、混合実体は、シナリオの要件を達成するために必要とされています。要約する："
    },
    {
      "indent": 3,
      "text": "o The customer (A) must only hear what the agent (B) says.",
      "ja": "O顧客（A）は、唯一のエージェント（B）が言うことを聞く必要があります。"
    },
    {
      "indent": 3,
      "text": "o The agent (B) must be able to hear both A and the coach (C).",
      "ja": "O剤（B）はAとコーチ（C）の両方を聞くことができなければなりません。"
    },
    {
      "indent": 3,
      "text": "o C must be able to hear both A and B in order to give B the right suggestions and also be aware of the whole conversation.",
      "ja": "O CはBに右の提案を与えるとも会話全体を認識するために、AとBの両方を聞くことができなければなりません。"
    },
    {
      "indent": 3,
      "text": "From the media and framework perspective, such a scenario can be seen as depicted in Figure 33.",
      "ja": "メディアフレームワークの観点から、そのようなシナリオでは、図33に示すように見ることができます。"
    },
    {
      "indent": 3,
      "text": " **************              +-------+\n * A=Customer *              |  UAC  |\n * B=Agent    *              |   C   |\n * C=Coach    *              +-------+\n **************                 \" ^\n                        C (RTP) \" \"\n                                \" \"\n                                \" \" A+B (RTP)\n                                v \"\n+-------+  A (RTP)           +--------+  A+C (RTP)         +-------+\n|  UAC  |===================>| Media  |===================>|  UAC  |\n|   A   |<===================| Server |<===================|   B   |\n+-------+           B (RTP)  +--------+           B (RTP)  +-------+",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 33: Coaching Scenario: Media Perspective",
      "ja": "図33：コーチングシナリオ：メディアの展望"
    },
    {
      "indent": 3,
      "text": "From the framework point of view, when the previously mentioned legs are not attached to anything yet, what appears is shown in Figure 34.",
      "ja": "前述の足はまだ何に添付されていないときのビューのフレームワークの観点から、どのような表示されますことは、図34に示しています。"
    },
    {
      "indent": 8,
      "text": "                            MS\n              +---------------------------+\n              |                           |\nUAC A         |                           |         UAC B\n  o.....<<.......x                     x-------<<-----o\n  o----->>-------x                     x.......>>.....o\n              |                           |\n              |                           |\n              |                           |\n              |                           |\n              |            xx             |\n              |            .|             +\n              +------------v^-------------+\n                           v^\n                           .|\n                           .|\n                           oo\n                          UAC C",
      "raw": true
    },
    {
      "indent": 12,
      "text": "Figure 34: Coaching Scenario: UAC Legs Not Attached",
      "ja": "図34：コーチングシナリオ：UAC脚が付いていません"
    },
    {
      "indent": 3,
      "text": "By contrast, what the scenario should look like is depicted in Figure 35. The customer receives media directly from the agent ('recvonly'), while all of the three involved participants contribute to a hidden conference. Of course, the customer is not allowed to receive the mixed flows from the conference ('sendonly'), unlike the agent and the coach, who must both be aware of the whole conversation ('sendrecv').",
      "ja": "3人の関与の参加者のすべてが隠された会議に貢献しながら、これとは対照的に、どのようなシナリオでは、図35の顧客に描かれているように見えるべきことは、エージェント（「がrecvonly」）から直接メディアを受け取ります。もちろん、顧客は、両方の会話全体（「SENDRECV」）を認識する必要があります誰が、エージェントとコーチとは違って、会議（「sendonlyの」）から混合流を受け取ることはできません。"
    },
    {
      "indent": 8,
      "text": "                            MS\n              +---------------------------+\n              |                           |\nUAC A         |                           |         UAC B\n  o-----<<-------+----<<----+----<<----+-------<<-----o\n  o----->>-------+          |          +------->>-----o\n              |  |          v          ^  |\n              |  +~~~~~~~>[##]::::>::::+  |\n              |            v^             |\n              |            ||             |\n              |            ++             |\n              |            :|             +\n              +------------v^-------------+\n                           v^\n                           :|\n                           :|\n                           oo\n                          UAC C",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 35: Coaching Scenario: UAC Legs Mixed and Attached",
      "ja": "図35：コーチングシナリオ：UAC美脚ミックスと添付"
    },
    {
      "indent": 3,
      "text": "In the framework, this can be achieved by means of the Mixer Control Package, which, as demonstrated in the previous conferencing examples, can be exploited whenever mixing and joining entities are needed. The needed steps can be summarized in the following list:",
      "ja": "フレームワークでは、これは、混合接合エンティティが必要とされるときはいつでも利用することができる前の会議の実施例で実証されるように、ミキサ制御パッケージの手段によって達成することができます。必要な手順は、以下のリストにまとめることができます。"
    },
    {
      "indent": 3,
      "text": "1. First of all, a hidden conference is created.",
      "section_title": true,
      "ja": "1.まずは、隠された会議が作成されます。"
    },
    {
      "indent": 3,
      "text": "2. Then, the three participants are all attached to it, each with a custom mixing policy, specifically:",
      "ja": "2.次に、3人の参加者は、すべてのカスタムとのそれぞれが具体的には、ポリシーを混合、それに接続されています。"
    },
    {
      "indent": 7,
      "text": "* the customer (A) as 'sendonly'.",
      "ja": "* 'sendonlyで' など、顧客（A）。"
    },
    {
      "indent": 7,
      "text": "* the agent (B) as 'sendrecv'.",
      "ja": "* 'のsendrecv' として剤（B）。"
    },
    {
      "indent": 7,
      "text": "* the coach (C) as 'sendrecv' and with a gain of -3 dB to halve the volume of its own contribution (so that the agent actually hears the customer at a louder volume and hears the coach whispering).",
      "ja": "*コーチ（C「）のsendrecv」として、独自の貢献（エージェントが実際に大声音量で顧客を聞き、コーチささやきを聞くように）の体積を半減するの-3dBの利得を有します。"
    },
    {
      "indent": 3,
      "text": "3. Finally, the customer is joined to the agent as a passive receiver ('recvonly').",
      "ja": "3.最後に、顧客は、パッシブ受信機（「がrecvonly」）のようにエージェントに接合されています。"
    },
    {
      "indent": 3,
      "text": "A diagram of such a sequence of transactions is depicted in Figure 36:",
      "ja": "トランザクションのこのような配列の図が図36に示されています。"
    },
    {
      "indent": 2,
      "text": "A      B      C       AS                                 MS\n|      |      |       |                                  |\n|      |      |       | A1. CONTROL (create conference)  |\n|      |      |       |++++++++++++++++++++++++++++++++>>|\n|      |      |       |                                  |--+ create\n|      |      |       |                                  |  | conf and\n|      |      |       |      A2. 200 OK (conferenceid=Y) |<-+ its ID\n|      |      |       |<<++++++++++++++++++++++++++++++++|\n|      |      |       |                                  |\n|      |      |       | B1. CONTROL (join A-->confY)     |\n|      |      |       |++++++++++++++++++++++++++++++++>>|\n|      |      |       |                                  |--+ join A\n|      |      |       |                                  |  | & confY\n|      |      |       |                       B2. 200 OK |<-+ sendonly\n|      |      |       |<<++++++++++++++++++++++++++++++++|\n|      |      |       |                                  |\n|######################################################>>|\n|   Customer (A) is mixed (sendonly) in the conference   |\n|######################################################>>|\n|      |      |       |                                  |\n|      |      |       | C1. CONTROL (join B<->confY)     |\n|      |      |       |++++++++++++++++++++++++++++++++>>|\n|      |      |       |                                  |--+ join B\n|      |      |       |                                  |  | & confY\n|      |      |       |                       C2. 200 OK |<-+ sendrecv\n|      |      |       |<<++++++++++++++++++++++++++++++++|\n|      |      |       |                                  |\n|      |<<#############################################>>|\n|      | Agent (B) is mixed (sendrecv) in the conference |\n|      |<##############################################>>|\n|      |      |       |                                  |\n|      |      |       | D1. CONTROL (join C<->confY)     |\n|      |      |       |++++++++++++++++++++++++++++++++>>|\n|      |      |       |                                  |--+ join C\n|      |      |       |                                  |  | & confY\n|      |      |       |                       D2. 200 OK |<-+ sendrecv\n|      |      |       |<<++++++++++++++++++++++++++++++++|\n|      |      |       |                                  |\n|      |      |<<######################################>>|\n|      |      |  Coach (C) is mixed (sendrecv) as well   |\n|      |      |<<######################################>>|\n|      |      |       |                                  |",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|      |      |       | E1. CONTROL (join A<--B)         |\n|      |      |       |++++++++++++++++++++++++++++++++>>|\n|      |      |       |                                  |--+ join\n|      |      |       |                                  |  | A & B\n|      |      |       |                       E2. 200 OK |<-+ recvonly\n|      |      |       |<<++++++++++++++++++++++++++++++++|\n|      |      |       |                                  |\n|<<######################################################|\n| Finally, Customer (A) is joined (recvonly) to Agent (B)|\n|<<######################################################|\n|      |      |       |                                  |\n.      .      .       .                                  .\n.      .      .       .                                  .",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Figure 36: Coaching Scenario: Framework Transactions",
      "ja": "図36：コーチングシナリオ：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "o First of all, the AS creates a new hidden conference by means of a <createconference> request (A1). This conference is properly configured according to the use it is assigned to, i.e., to mix all the involved parties accordingly. Since only three participants will be joined to it, 'reserved-talkers' is set to 3. 'reserved-listeners', on the other hand, is set to 2, since only the agent and the coach must receive a mix, while the customer must be unaware of the coach. Finally, the video layout is set to <dual-view> for the same reason, since only the customer and the agent must appear in the mix.",
      "ja": "すべてのOまず、ASは、<createconference>リクエスト（A1）を用いて、新たな隠された会議が作成されます。この会議は、適切にはそれに応じて、すべての関係者を混合すること、即ち、に割り当てられている用途に応じて構成されています。唯一剤およびコーチミックスを受信しなければならないので、間だけ3人の参加者は、それに結合されるので、「予約、話者が」一方、3「予約-リスナー」に設定されている、、、2に設定されています顧客がコーチを知らないでなければなりません。唯一の顧客とエージェントが混在して表示されなければならないので、最後に、ビデオレイアウトは、同じ理由で、<デュアルビュー>に設定されています。"
    },
    {
      "indent": 3,
      "text": "o The MS sends notification of the successful creation of the new conference in a 200 framework message (A2). The identifier assigned to the conference, which will be used in subsequent requests addressed to it, is 1df080e.",
      "ja": "O MSは、200フレームワークのメッセージ（A2）に新しい会議の作成に成功の通知を送信します。それに宛て後続の要求で使用される会議に割り当てられた識別子は、1df080eです。"
    },
    {
      "indent": 3,
      "text": "o Now that the conference has been created, the AS joins the three actors to it with different policies, namely (i) the customer (A) is joined as 'sendonly' to the conference (B1), (ii) the agent (B) is joined as 'sendrecv' to the conference (C1), and (iii) the coach (C) is joined as 'sendrecv' (but audio only) to the conference and with a lower volume (D1). The custom policies are enforced by means of properly constructed <stream> elements.",
      "ja": "O今会議が作成されていることを、ASは、（会議（B1）、（ⅱ）エージェントに「sendonlyの」として参加している別のポリシー、すなわち、（ⅰ）顧客（A）と、それにBを3人の役者に参加します）会議（C1）に「のsendrecv」、および（iii）コーチ（C）は「のsendrecv」（ただし、会議へと下部容積（D1）とのみ）オーディオのように接合されているように接合されています。カスタムポリシーを適切に構築<ストリーム>要素によって実施されます。"
    },
    {
      "indent": 3,
      "text": "o The MS takes care of the requests and acks them (B2, C2, D2). At this point, the conference will receive media from all the actors but only provide the agent and the coach with the resulting mix.",
      "ja": "O MSは、要求の世話をし、それらをACKS（B2、C2、D2）。この時点で、会議はすべての俳優からメディアを受け取るだけで、エージェントおよび得られた混合物とのコーチを提供します。"
    },
    {
      "indent": 3,
      "text": "o To complete the scenario, the AS joins A with B directly as 'recvonly' (E1). The aim of this request is to provide A with media too, namely the media contributed by B. This way, A is unaware of the fact that its media are accessed by C by means of the hidden mixer.",
      "ja": "Oシナリオを完了するために、ASは 'recvonlyで'（E1）として直接Bと合流します。この要求の目的は、あまりにもメディアに提供することで、Bによってこのように貢献すなわちメディアは、Aは、そのメディアが隠れミキサーでCによってアクセスされているという事実を知りません。"
    },
    {
      "indent": 3,
      "text": "o The MS takes care of this request too and acks it (E2), concluding the scenario.",
      "ja": "O MSはあまりにもこの要求の世話をして、シナリオを締結、（E2）を、それをACKを。"
    },
    {
      "indent": 3,
      "text": "A1. AS -> MS (CFW CONTROL, createconference)\n--------------------------------------------\n   CFW 238e1f2946e8 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 329",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <createconference reserved-talkers=\"3\" reserved-listeners=\"2\"> <audio-mixing type=\"nbest\"/> <video-layouts> <video-layout min-participants='1'> <dual-view/> </video-layout> </video-layouts> <video-switch> <controller/> </video-switch> </createconference> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <createconference予約-話者= \"3\" の予約・リスナー= \"2\"> <オーディオミキシングタイプ= \"nbest 「/> <ビデオ・レイアウト> <ビデオレイアウトMIN-参加= '1'> <デュアルビュー/> </ビデオレイアウト> </ビデオ・レイアウト> <ビデオスイッチ> <コントローラ/> </ビデオ-switch> </ createconference> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 238e1f2946e8 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 151",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Conference created\" conferenceid=\"1df080e\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"会議作成\" conferenceid = \"1df080e\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "B1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 2eb141f241b7 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 226",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"10514b7f:6a900179\" id2=\"1df080e\"> <stream media=\"audio\" direction=\"sendonly\"/> <stream media=\"video\" direction=\"sendonly\"/> </join> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"10514b7f：6a900179\" ID2 = \"1df080e\"> <ストリームメディア= \"オーディオ\" 方向=」 sendonlyで \"/> <ストリームメディア=\" ビデオ」方向= \"sendonlyで\" /> </参加する> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "B2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 2eb141f241b7 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "C1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 515f007c5bd0 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 122",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"756471213:c52ebf1b\" id2=\"1df080e\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"756471213：c52ebf1b\" ID2 = \"1df080e\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "C2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 515f007c5bd0 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "D1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 0216231b1f16 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 221",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"z9hG4bK19461552:1353807a\" id2=\"1df080e\"> <stream media=\"audio\"> <volume controltype=\"setgain\" value=\"-3\"/> </stream> </join> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"z9hG4bK19461552：1353807a\" ID2 = \"1df080e\"> <ストリームメディアは= \"オーディオ\"> <ボリュームcontroltype = \"setgain\" 値= \" -  3\" /> </ストリーム> </参加> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "D2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 0216231b1f16 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "E1. AS -> MS (CFW CONTROL, join)\n--------------------------------\n   CFW 140e0f763352 CONTROL\n   Control-Package: msc-mixer\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 236",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"10514b7f:6a900179\" id2=\"756471213:c52ebf1b\"> <stream media=\"audio\" direction=\"recvonly\"/> <stream media=\"video\" direction=\"recvonly\"/> </join> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"10514b7f：6a900179\" ID2 = \"756471213：c52ebf1b\"> <ストリームメディア= \"オーディオ\" の方向= \"がrecvonly\" /> <ストリームメディア= \"ビデオ\" 方向= \"がrecvonly\" /> </参加する> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "E2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 140e0f763352 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "6.3.4. Sidebars",
      "section_title": true,
      "ja": "6.3.4. サイドバー"
    },
    {
      "indent": 3,
      "text": "Within the context of conferencing, there could be a need for so-called sidebars, or side conferences. This would be the case, for instance, if two or more participants of a conference were willing to create a side conference among each other while still receiving part of the original conference mix in the background. Motivations for such a use case can be found in both [RFC4597] and [RFC5239]. It is clear that in such a case the side conference is actually a separate conference but must also somehow be related to the original conference. Although the application-level relationship is out of scope for this document (this \"belongs\" to Centralized Conferencing (XCON)), the media stream relationship is more relevant here, because there is a stronger relationship at the media level from the MEDIACTRL point of view. Consequently, it is interesting to analyze how sidebars could be used to construct the conference mixes according to the MEDIACTRL specification.",
      "ja": "会議の文脈の中で、いわゆるサイドバー、またはサイド会議の必要性があるかもしれません。会議の2人の以上の参加者が静止している背景の元の会議ミックスの一部を受信しながら、互いの間で側会議を作成するために喜んでいた場合、これは、例えば、場合です。このようなユースケースのための動機は、[RFC4597]及び[RFC5239]の両方に見出すことができます。このような場合にはサイド会議が実際に別の会議でも何とか元の会議に関連していなければならないことは明らかです。アプリケーションレベルの関係は、（これは集中管理会議（XCON）に「所属」）は、このドキュメントの範囲外ですがのMEDIACTRL点からメディアレベルでの強力な関係があるので、メディアストリームの関係は、ここでより関連性があります見る。したがって、MEDIACTRL仕様に従ってサイドバーがミックス会議を構築するために使用することができる方法を分析することは興味深いです。"
    },
    {
      "indent": 3,
      "text": "The scenario presented in this section is a conference hosting four different participants: A, B, C, and D. All these participants are attached to the conference as active senders and receivers of the existing media streams. At a certain point in time, two participants (B and D) decide to create a sidebar just for them. The sidebar they want to create is constructed so that only audio is involved. The audio mix of the sidebar must not be made available to the main conference. The mix of the conference must be attached to the sidebar, but with a lower volume (30%), because it is just background to the actual conversation. This would allow both B and D to talk to each other without A and C listening to them, while B and D could still have an overview of what's happening in the main conference.",
      "ja": "このセクションで提示シナリオは、4人の異なる参加ホスティング会議である：A、B、C、およびDをこれらのすべての参加者がアクティブな送信者と既存のメディアストリームの受信機として会議に取り付けられています。ある時点で、2人の参加者（BとD）は、ちょうど彼らのためにサイドバーを作成することにしました。音声のみが関与しているように、彼らが作成したいサイドバーが構築されます。サイドバーのオーディオミックスはメイン会議に利用できるようにはなりません。それが実際の会話にちょうど背景であるため、会議の混合物は、より低い体積（30％）と、サイドバーに取り付けなければなりません。これは、BとDはまだメインの会議で何が起こっているかの概要を持っている可能性がありながら、BとDの両方が、AとCは、それらに耳を傾けずにお互いに話をすることができるようになります。"
    },
    {
      "indent": 3,
      "text": "From the media and framework perspective, such a scenario can be seen as depicted in Figure 37.",
      "ja": "メディアフレームワークの観点から、そのようなシナリオでは、図37に示されているように見ることができます。"
    },
    {
      "indent": 4,
      "text": "                             +-------+\n                             |  UAC  |\n                             |   C   |\n                             +-------+\n                                \" ^\n                        C (RTP) \" \"\n                                \" \"\n                                \" \" A (RTP)\n                                v \"\n+-------+  A (RTP)           +--------+  D+[a+c] (RTP)     +-------+\n|  UAC  |===================>| Media  |===================>|  UAC  |\n|   A   |<===================| Server |<===================|   B   |\n+-------+           C (RTP)  +--------+           B (RTP)  +-------+\n                                ^ \"\n                                \" \" B+[a+c] (RTP)\n                                \" \"\n                        D (RTP) \" \"\n                                \" v\n                             +-------+\n                             |  UAC  |\n                             |   D   |\n                             +-------+",
      "raw": true
    },
    {
      "indent": 18,
      "text": "Figure 37: Sidebars: Media Perspective",
      "ja": "図37：補足記事：メディアの展望"
    },
    {
      "indent": 3,
      "text": "From the framework point of view, when all the participants are attached to the main conference, what appears is shown in Figure 38.",
      "ja": "すべての参加者がメイン会議に接続されている場合、ビューのフレームワークの観点から、どのような表示されますことは、図38に示しています。"
    },
    {
      "indent": 15,
      "text": "                     UAC C\n                       oo\n                       :|\n                       ^v\n                       ^v\n                       :|\n              +--------:|-------+\n              |        :|       |\n              |        ++       |\nUAC A         |        ^|       |         UAC B\n  o----->>-------+~~~>{##}:::>+:::::::>>:::::o\n  o:::::<<:::::::+<:::{##}<~~~+-------<<-----o\n              |        ^:       |\n              |        |v       |\n              |        ++       |\n              |        |:       |\n              +--------|:-------+\n                       |:\n                       ^v\n                       ^v\n                       |:\n                       oo\n                     UAC D",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 38: Sidebars: UAC Legs in Main Conference",
      "ja": "図38：サイドバー：メインの会議でUAC美脚"
    },
    {
      "indent": 3,
      "text": "By contrast, what the scenario should look like is depicted in Figure 39. A new mixer is created to host the sidebar. The main mix is then attached as 'sendonly' to the sidebar mix at a lower volume (in order to provide the sidebar users with a background of the main conference). The two interested participants (B and D) have their audio leg detached from the main conference and attached to the sidebar. This detachment can be achieved by either actually detaching the leg or just modifying the status of the leg to 'inactive'. Note that this only affects the audio stream: the video of the two users is still attached to the main conference, and what happens at the application level may or may not have been changed accordingly (e.g., XCON protocol interactions).",
      "ja": "これとは対照的に、シナリオが図39に描かれているように見えるべきか新しいミキサーは、サイドバーをホストするために作成されます。メインミックスは、次いで、（メイン会議の背景とサイドバーのユーザーに提供するために）より低い音量でサイドバーミックスに「sendonlyの」として取り付けられています。 2人の興味の参加者（BおよびD）は、それらのオーディオ脚部は、メイン会議から離脱し、サイドバーに取り付けられています。この剥離は、実際に足を取り外すか、単に「非アクティブ」への足の状態を変更することのいずれかによって達成することができます。これが唯一のオーディオストリームに影響を与えることに注意：二人のユーザのビデオはまだメイン会議に取り付けられており、どのようなアプリケーション・レベルで起こるが、または（例えば、XCONプロトコル相互作用）に応じて変更されていなくてもよいです。"
    },
    {
      "indent": 3,
      "text": "Please note that the main conference is assumed to be in place and the involved participants (A, B, C, and D) attached ('sendrecv') to it.",
      "ja": "メイン会議が適所にあると仮定し、関与者（A、B、C、およびD）がそれに（「のsendrecv」）取り付けられていることに注意してください。"
    },
    {
      "indent": 12,
      "text": "                     UAC C\n                       oo\n                       :|\n                       ^v\n                       ^v\n                       :|\n              +--------:|----------------+\n              |        :|                |\n              |        ++                |\nUAC A         |        ^|                |          UAC B\n  o----->>-------+~~~>{##}:::>{##}:::>+:::::::>>:::::o\n  o:::::<<:::::::+<:::{##}    {##}<~~~+-------<<-----o\n              |                ^:        |\n              |                ++        |\n              |                |v        |\n              +----------------|:--------+\n                               |:\n                               ^v\n                               ^v\n                               |:\n                               oo\n                              UAC D",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 39: Sidebars: UAC Legs Mixed and Attached",
      "ja": "図39：サイドバー：混合及び添付UAC美脚"
    },
    {
      "indent": 3,
      "text": "The situation may subsequently be reverted (e.g., destroying the sidebar conference and reattaching B and D to the main conference mix) in the same way. The AS would just need to unjoin B and D from the hidden conference and change their connection with the main conference back to 'sendrecv'. After unjoining the main mix and the sidebar mix, the sidebar conference could then be destroyed. For brevity, and because similar transactions have already been presented, these steps are not described here.",
      "ja": "状況が続いて同じ方法で（例えば、サイドバー会議を破壊し、メイン会議ミックスにBおよびDを再接続）戻すことができます。 ASはちょうど隠された会議からBとDを退会し、バック「のsendrecv」への主な会議との接続を変更する必要があります。メインミックスとサイドバーミックスをunjoiningした後、サイドバーの会議はその後、破壊される可能性があります。類似の取引が既に提示されているので、簡潔にするため、および、これらのステップは、ここで説明されていません。"
    },
    {
      "indent": 3,
      "text": "In the framework, just as in the previous section, the presented scenario can again be achieved by means of the Mixer Control Package. The needed steps can be summarized in the following list:",
      "ja": "フレームワークでは、直前のセクションのように、提示されたシナリオは、再びミキサーコントロールパッケージによって達成することができます。必要な手順は、以下のリストにまとめることができます。"
    },
    {
      "indent": 3,
      "text": "1. First of all, a hidden conference is created (the sidebar mix).",
      "section_title": true,
      "ja": "すべての、隠された会議が作成されるの1.まず、（サイドバーミックス）。"
    },
    {
      "indent": 3,
      "text": "2. Then, the main conference mix is attached to it as 'sendonly' and with a gain of -5 dB to limit the volume of its own contribution to 30% (so that B and D can hear each other at a louder volume while still listening to what's happening in the main conference in the background).",
      "ja": "2. B及びDは、大声体積一方で互いを聞くことができるように、そして、メイン会議ミックスを（30％独自の貢献の量を制限するために「sendonlyの」との-5デシベル利得と同様に、それに取り付けられています。まだ）バックグラウンドでメインの会議で何が起こっているのかを聞いて。"
    },
    {
      "indent": 3,
      "text": "3. B and D are detached from the main mix for audio (<modifyjoin> with 'inactive' status).",
      "ja": "3. BおよびDは、（「非アクティブ」状態と<modifyjoin>）オーディオ用のメインミックスから取り外されます。"
    },
    {
      "indent": 3,
      "text": "4. B and D are attached to the hidden sidebar mix for audio.",
      "section_title": true,
      "ja": "4. B及びDは、オーディオのための隠されたサイドバーミックスに取り付けられています。"
    },
    {
      "indent": 3,
      "text": "Note that for detaching B and D from the main mix, a <modifyjoin> with an 'inactive' status is used, instead of an <unjoin>. The motivation for this is related to how a subsequent rejoining of B and D to the main mix could take place. In fact, by using <modifyjoin> the resources created when first joining B and D to the main mix remain in place, even if marked as unused at the moment. An <unjoin>, on the other hand, would actually free those resources, which in turn could be granted to other participants joining the conference in the meantime. This means that when needing to reattach B and D to the main mix, the MS may not have the resources to do so, resulting in an undesired failure.",
      "ja": "代わり<退会>の、使用される「非アクティブ」状態とメインミックス、<modifyjoin>からBおよびDを着脱するためのことに注意してください。このための動機は、メインミックスにBとDのその後の再結合が行われる可能性がどのように関係しています。実際には、使用して<modifyjoin>最初のメインミックスにBとDを結合するときに作成されたリソースは、現時点では未使用とマークされた場合でも、所定の位置に残ります。 <退会>、一方で、実際に今度はその間に会議に参加する他の参加者に付与することができた、それらのリソースを解放します。これは、メインミックスにBおよびDを再接続する必要が場合、MSは、望ましくない障害をもたらす、そうするためのリソースを持っていないことを意味します。"
    },
    {
      "indent": 3,
      "text": "A diagram of such a sequence of transactions (where confX is the identifier of the pre-existing main conference mix) is depicted in Figure 40:",
      "ja": "（confXは、既存のメインの会議ミックスの識別子である）トランザクションのこのような配列の図が図40に示されています。"
    },
    {
      "indent": 2,
      "text": "B         D         AS                                 MS\n|         |         |                                  |\n|         |         | A1. CONTROL (create conference)  |\n|         |         |++++++++++++++++++++++++++++++++>>|\n|         |         |                                  |--+ create\n|         |         |                                  |  | conf and\n|         |         |      A2. 200 OK (conferenceid=Y) |<-+ its ID\n|         |         |<<++++++++++++++++++++++++++++++++|\n|         |         |                                  |\n|         |         | B1. CONTROL (join confX-->confY) |\n|         |         |++++++++++++++++++++++++++++++++>>|\n|         |         |                                  |--+ join confX\n|         |         |                                  |  | & confY\n|         |         |                       B2. 200 OK |<-+ sendonly\n|         |         |<<++++++++++++++++++++++++++++++++|    (30% vol)\n|         |         |                                  |\n|         |         | C1. CONTROL (modjoin B---confX)  |\n|         |         |++++++++++++++++++++++++++++++++>>|\n|         |         |                                  |--+ modjoin B\n|         |         |                                  |  | & confX\n|         |         |                       C2. 200 OK |<-+ (inactive)\n|         |         |<<++++++++++++++++++++++++++++++++|\n|         |         |                                  |",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|         |         | D1. CONTROL (join B<-->confY)    |\n|         |         |++++++++++++++++++++++++++++++++>>|\n|         |         |                                  |--+ join B\n|         |         |                                  |  | & confY\n|         |         |                       D2. 200 OK |<-+ sendrecv\n|         |         |<<++++++++++++++++++++++++++++++++|    (audio)\n|         |         |                                  |\n|<<##################################################>>|\n|   Participant B is mixed (sendrecv) in the sidebar   |\n|     (A, C, and D can't listen to her/him anymore)    |\n|<<##################################################>>|\n|         |         |                                  |\n|         |         | E1. CONTROL (modjoin D---confX)  |\n|         |         |++++++++++++++++++++++++++++++++>>|\n|         |         |                                  |--+ modjoin D\n|         |         |                                  |  | & confX\n|         |         |                       E2. 200 OK |<-+ (inactive)\n|         |         |<<++++++++++++++++++++++++++++++++|\n|         |         |                                  |\n|         |         | F1. CONTROL (join D<-->confY)    |\n|         |         |++++++++++++++++++++++++++++++++>>|\n|         |         |                                  |--+ join D\n|         |         |                                  |  | & confY\n|         |         |                       F2. 200 OK |<-+ sendrecv\n|         |         |<<++++++++++++++++++++++++++++++++|    (audio)\n|         |         |                                  |\n|         |<<########################################>>|\n|         |  D is mixed (sendrecv) in the sidebar too  |\n|         |  (A and C can't listen to her/him anymore) |\n|         |<<########################################>>|\n|         |                                            |\n.         .                                            .\n.         .                                            .",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 40: Sidebars: Framework Transactions",
      "ja": "図40：サイドバー：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "o First of all, the hidden conference mix is created (A1). The request is basically the same as that presented in previous sections, i.e., a <createconference> request addressed to the Mixer package. The request is very lightweight and asks the MS to only reserve two listener seats ('reserved-listeners', since only B and D have to hear something) and three talker seats ('reserved-listeners', because in addition to B and D the main mix is also an active contributor to the sidebar). The mixing will be driven by directives from the AS (mix-type=controller). When the mix is successfully created, the MS provides the AS with its identifier (519c1b9).",
      "ja": "、隠された会議ミックスが作成されたすべてのOまず（A1）。要求は、それは、前のセクションで提示される、すなわち、<createconference>要求がミキサーパッケージ宛てと基本的に同じです。要求は非常に軽量で、2つのだけリスナーの座席を予約するMSを要求する（のみB以来、「予約・リスナー」とDは何か聞くために持っている）ので、BとDに加えて、3話者席（ '予約-聞き手をメインミックス）もサイドバーに積極的に貢献しています。混合は、AS（混合型=コントローラ）からの指令により駆動されます。ミックスが正常に作成された場合、MSは、その識別子（519c1b9）とASを提供します。"
    },
    {
      "indent": 3,
      "text": "o As a first transaction after that, the AS joins the audio from the main conference and the newly created sidebar conference mix (B1). Only audio needs to be joined (media=audio), with a 'sendonly' direction (i.e., only flowing from the main conference to the sidebar and not vice versa) and at 30% volume with respect to the original stream (setgain=-5 dB). A successful completion of the transaction is reported to the AS (B2).",
      "ja": "その後の最初の取引であるO、ASは、メイン会議からの音声と、新しく作成されたサイドバー会議ミックス（B1）を結合します。 - 「sendonlyの」方向（すなわち、唯一のサイドバーにメイン会議から流れなくその逆）と、元のストリーム（setgain =に対して30％の容量で、（メディア=オーディオ）を接合するための唯一のオーディオニーズ5デシベル）。トランザクションの正常終了は、AS（B2）に報告されます。"
    },
    {
      "indent": 3,
      "text": "o At this point, the AS makes the connection of B (2133178233: 18294826) and the main conference (2f5ad43) inactive by means of a <modifyjoin> directive (C1). The request is taken care of by the MS (C2), and B is actually excluded from the mix for sending as well as receiving.",
      "ja": "そして<modifyjoin>ディレクティブ（C1）によって非アクティブメイン会議（2f5ad43）：この時点で、O、ASは、Bの接続（18294826 2133178233）を行います。要求は、MS（C2）での世話をされ、そしてBは、実際に送信並びに受信するための混合物から除外されます。"
    },
    {
      "indent": 3,
      "text": "o After that, the AS (D1) joins B (2133178233:18294826) to the sidebar mix created previously (519c1b9). The MS attaches the requested connections and sends confirmation to the AS (D2).",
      "ja": "以前に作成したサイドバーミックス（519c1b9）にします。oその後、AS（D1）がB（18294826 2133178233）を結合します。 MSは、要求された接続を添付して、AS（D2）に確認を送信します。"
    },
    {
      "indent": 3,
      "text": "o The same transactions already done for B are done for D as well (id1=1264755310:2beeae5b), i.e., the <modifyjoin> to make the connection in the main conference inactive (E1-2) and the <join> to attach D to the sidebar mix (F1-2). At the end of these transactions, A and C will only listen to each other, while B and D will listen to each other and to the conference mix as a comfortable background.",
      "ja": "すでにBのために行わ同じトランザクションは、（ID1 = 1264755310：2beeae5b）にもDのために行われているO、すなわち、<modifyjoin>メイン会議非アクティブ（E1-2）での接続を確立すると<参加> Dを添付することサイドバーミックス（F1-2）へ。 BとDが互いに快適な背景として会議ミックスを聴くする一方、これらの取引の終了時に、A及びCのみ、相互にリッスンします。"
    },
    {
      "indent": 3,
      "text": "A1. AS -> MS (CFW CONTROL, createconference)\n--------------------------------------------\n   CFW 7fdcc2331bef CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 198",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <createconference reserved-talkers=\"3\" reserved-listeners=\"2\"> <audio-mixing type=\"controller\"/> </createconference> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <createconference予約-話者= \"3\" の予約・リスナー= \"2\"> <オーディオミキシングタイプ= \"コントローラ「/> </ createconference> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 7fdcc2331bef 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 151",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Conference created\" conferenceid=\"519c1b9\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"会議作成\" conferenceid = \"519c1b9\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "B1. AS -> MS (CFW CONTROL, join with setgain)\n---------------------------------------------\n   CFW 4e6afb6625e4 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 226",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"2f5ad43\" id2=\"519c1b9\"> <stream media=\"audio\" direction=\"sendonly\"> <volume controltype=\"setgain\" value=\"-5\"/> </stream> </join> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <ID1 = \"2f5ad43\" に参加ID2 = \"519c1b9\"> <ストリームメディア= \"オーディオ\" 方向= \"sendonlyで\" > <ボリュームcontroltype = \"setgain\" 値= \" -  5\" /> </ストリーム> </参加> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "B2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 4e6afb6625e4 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "C1. AS -> MS (CFW CONTROL, modifyjoin with 'inactive' status)\n-----------------------------------------------------------\n   CFW 3f2dba317c83 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 193",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <modifyjoin id1=\"2133178233:18294826\" id2=\"2f5ad43\"> <stream media=\"audio\" direction=\"inactive\"/> </modifyjoin> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <modifyjoin ID1 = \"2133178233：18294826\" ID2 = \"2f5ad43\"> <ストリームメディア= \"オーディオ\" 方向=」非アクティブ \"/> </ modifyjoin> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "C2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 3f2dba317c83 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join modified\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <レスポンスステータス= \"200\" 理由= \"修飾参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "D1. AS -> MS (CFW CONTROL, join to sidebar)\n-------------------------------------------\n   CFW 2443a8582d1d CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 181",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"2133178233:18294826\" id2=\"519c1b9\"> <stream media=\"audio\" direction=\"sendrecv\"/> </join> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"2133178233：18294826\" ID2 = \"519c1b9\"> <ストリームメディア= \"オーディオ\" 方向=」 SENDRECV \"/> </参加する> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "D2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 2443a8582d1d 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "E1. AS -> MS (CFW CONTROL, modifyjoin with 'inactive' status)\n-----------------------------------------------------------\n   CFW 436c6125628c CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 193",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <modifyjoin id1=\"1264755310:2beeae5b\" id2=\"2f5ad43\"> <stream media=\"audio\" direction=\"inactive\"/> </modifyjoin> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <modifyjoin ID1 = \"1264755310：2beeae5b\" ID2 = \"2f5ad43\"> <ストリームメディア= \"オーディオ\" 方向=」非アクティブ \"/> </ modifyjoin> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "E2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 436c6125628c 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join modified\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <レスポンスステータス= \"200\" 理由= \"修飾参加\" /> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "F1. AS -> MS (CFW CONTROL, join to sidebar)\n-------------------------------------------\n   CFW 7b7ed00665dd CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 181",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"1264755310:2beeae5b\" id2=\"519c1b9\"> <stream media=\"audio\" direction=\"sendrecv\"/> </join> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <参加ID1 = \"1264755310：2beeae5b\" ID2 = \"519c1b9\"> <ストリームメディア= \"オーディオ\" 方向=」 SENDRECV \"/> </参加する> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "F2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 7b7ed00665dd 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 125",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join successful\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <応答ステータス= \"200\" 理由= \"成功参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "6.3.5. Floor Control",
      "section_title": true,
      "ja": "6.3.5. フロア制御"
    },
    {
      "indent": 3,
      "text": "As described in [RFC4597], floor control is a feature typically needed and employed in most conference scenarios. In fact, while not a mandatory feature to implement when realizing a conferencing application, it provides additional control of the media streams contributed by participants, thus allowing for moderation of the available resources. The Centralized Conferencing (XCON) framework [RFC5239] suggests the use of the Binary Floor Control Protocol (BFCP) [RFC4582] to achieve the aforementioned functionality. That said, a combined use of floor control functionality and the tools made available by the MEDIACTRL specification for conferencing would definitely be interesting to investigate. [RFC5567] introduces two different approaches to integrating floor control with the MEDIACTRL architecture: (i) a topology where the floor control server is co-located with the AS and (ii) a topology where the floor control server is co-located with the MS. The two approaches are obviously different with respect to the amount of information the AS and the MS have to deal with, especially when thinking about the logic behind the floor queues and automated decisions. Nevertheless, considering how the Media Control Channel Framework is conceived, approach (ii) would need a dedicated package (be it an extension or a totally new package) in order to make the MS aware of floor control and allow the",
      "ja": "[RFC4597]に記載されているように、フロア制御は、典型的には、ほとんどの会議のシナリオで必要と使用の特徴です。会議アプリケーションを実現していないときに必須の機能を実装しながら、実際には、それは、このように利用可能なリソースの緩和を可能に、参加者が貢献したメディアストリームの追加の制御を提供します。中央集中型会議（XCON）フレームワーク[RFC5239]は、前述の機能を達成するためのバイナリフロア制御プロトコル（BFCP）[RFC4582]を使用することを示唆しています。これは、フロア制御機能を組み合わせて使用​​すると、会議のためMEDIACTRL仕様で利用可能なツールは間違いなく調査する興味深いものになるだろう、と述べました。 （I）フロア制御サーバはASと同じ場所に配置されているトポロジとフロア制御サーバがと同じ場所に配置されている（II）トポロジー：[RFC5567]はMEDIACTRLアーキテクチャとフロア制御を統合する2つの異なるアプローチを紹介しますミズ。 2つのアプローチは、床キューおよび自動化された意思決定の背後にあるロジックを考えるとASとMSは特に、対処しなければならない情報の量に対して明らかに異なっています。それにも関わらず、メディア制御チャネルFrameworkが考えられる方法を検討、アプローチ（II）は、フロアコントロールのMSに認識させるとできるようにするために、専用のパッケージを（それが拡張または完全に新しいパッケージも）必要になります"
    },
    {
      "indent": 3,
      "text": "MS to interact with the interested UAC accordingly. At the time of writing, such a package doesn't exist yet, and as a consequence only approach (i) will be dealt with in the presented scenario.",
      "ja": "それに応じて興味を持ってUACと対話するMS。執筆時点では、このようなパッケージがまだ存在していない、そして結果としてのみアプローチ（i）が提示したシナリオで対処されます。"
    },
    {
      "indent": 3,
      "text": "The scenario will then assume that the Floor Control Server (FCS) is co-located with the AS. This means that all the BFCP requests will be sent by Floor Control Participants (FCPs) to the FCS, which will make the AS directly aware of the floor statuses. For the sake of simplicity, the scenario assumes that the involved participants are already aware of all the identifiers needed in order to make BFCP requests for a specific conference. Such information may have been carried according to the COMEDIA negotiation as specified in [RFC4583]. It is important to note that such information must not reach the MS. This means that within the context of the 3PCC mechanism that may have been used in order to attach a UAC to the MS, all the BFCP-related information negotiated by the AS and the UAC must be removed before making the negotiation available to the MS, which may be unable to understand the specification. A simplified example of how this could be achieved is presented in Figure 41. Please note that within the context of this example scenario, different identifiers may be used to address the same entity. Specifically, in this case the UAC (the endpoint sending and receiving media) is also a FCP, as it negotiates a BFCP channel too.",
      "ja": "シナリオは、フロア制御サーバ（FCS）はASと同じ場所に配置されることを前提としています。これは、すべてのBFCP要求が床の状態のAS直接認識させるだろうFCSにフロアコントロール参加者（FCPS）によって送信されます。簡単にするために、シナリオは、関係者が既に特定の会議のためのBFCP要求を行うために必要なすべての識別子を認識していることを前提としています。 [RFC4583]で指定されるように、そのような情報はCOMEDIAネゴシエーションに従って実施されていてもよいです。そのような情報は、MSに到達していなければならないことに注意することが重要です。これは、MSにUACを取り付けるために使用されている可能性が3PCC機構の文脈の中で、ASとUACによって交渉すべてBFCP関連情報はMSへの交渉が利用できるようにする前に除去しなければならないことを意味しますその仕様を理解することができない場合があります。これを達成することができる方法の簡略化された例は、この例のシナリオのコンテキスト内で、異なる識別子が同じエンティティに対処するために使用されてもよいことに注意してください。図41に示されています。それはあまりにもBFCPチャネルをネゴシエートするように、具体的に、この場合にはUAC（メディアを送信し、受信側エンドポイント）は、また、FCPです。"
    },
    {
      "indent": 1,
      "text": " UAC                               AS\n(FCP)                             (FCS)                              MS\n |                                 |                                 |\n | INVITE (SDP: RTP+BFCP)          |                                 |\n |-------------------------------->|                                 |\n |                                 | INVITE (SDP: RTP)               |\n |                                 |-------------------------------->|\n |                                 |          200 (SDP: RTP'+labels) |\n |                                 |<--------------------------------|\n |                        match +--|                                 |\n |                       floors |  |                                 |\n |                     & labels +->|                                 |\n |                                 |                                 |\n |    200 (SDP: RTP'+BFCP'+labels) |                                 |\n |<--------------------------------|                                 |\n | ACK                             |                                 |\n |-------------------------------->|                                 |\n |                                 | ACK                             |\n |                                 |-------------------------------->|\n |                                 |                                 |\n |<<###################### RTP MEDIA STREAMS ######################>>|\n |                                 |                                 |\n |<<******** BFCP CHANNEL *******>>|                                 |\n |                                 |                                 |\n .                                 .                                 .\n .                                 .                                 .",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 41: Floor Control: Example of Negotiation",
      "ja": "図41：フロア制御：ネゴシエーションの例"
    },
    {
      "indent": 3,
      "text": "From the media and framework perspective, such a scenario doesn't differ much from the conferencing scenarios presented earlier. It is more interesting to focus on the chosen topology for the scenario, as depicted in Figure 42.",
      "ja": "メディアとフレームワークの観点から、このようなシナリオでは、以前の提示会議シナリオからあまり違いはありません。図42に示すように、シナリオのために選択されたトポロジに焦点を当てるより興味深いです。"
    },
    {
      "indent": 3,
      "text": "+-------+                    +--------+\n|  UAC  |                    |   AS   |                     +-------+\n| (FCP) |<****** BFCP ******>|  (FCS) |<****** BFCP *******>| (FCC) |\n+-------+                    +--------+                     +-------+\n    ^                             ^\n    |                             |\n    |                         CFW |\n    |                             |\n    |                             v\n    |                        +--------+\n    +----------RTP---------->|   MS   |\n                             +--------+",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 42: Floor Control: Overall Perspective",
      "ja": "図42：フロア制御：総合見通し"
    },
    {
      "indent": 3,
      "text": "The AS, besides maintaining the already-known SIP signaling among the involved parties, also acts as the FCS for the participants in the conferences for which it is responsible. In the scenario, two Floor Control Participants are involved: a basic Participant (FCP) and a Chair (FCC).",
      "ja": "ASは、関係者の間で既に知られているSIPシグナリングを維持することに加えて、またそれが担当する会議の参加者のためのFCSとして機能します。シナリオでは、二つのフロア制御の参加者は、関与している：基本的な参加者（FCP）と議長（FCC）。"
    },
    {
      "indent": 3,
      "text": "As in all of the previously described conferencing examples, in the framework this can be achieved by means of the Mixer Control Package. Assuming that the conference has been created, the participant has been attached ('recvonly') to it, and the participant is aware of the involved BFCP identifiers, the needed steps can be summarized in the following list:",
      "ja": "前述の会議のすべての例のように、フレームワークでは、これはミキサーコントロールパッケージによって達成することができます。会議が作成されていると仮定すると、参加者はそれに（「がrecvonly」）添付されており、参加者が関与BFCP識別子を認識している、必要な手順は、以下のリストにまとめることができます。"
    },
    {
      "indent": 3,
      "text": "1. The assigned chair, FCC, sends a subscription for events related to the floor for which it is responsible (FloorQuery).",
      "ja": "1.割り当てられた椅子、FCCは、それが担当する床（FloorQuery）に関連するイベントのサブスクリプションを送信します。"
    },
    {
      "indent": 3,
      "text": "2. The FCP sends a BFCP request (FloorRequest) to access the audio resource (\"I want to speak\").",
      "ja": "2. FCPはBFCP要求（FloorRequest）は、オーディオリソースにアクセスするために送信する（「私が話したいです」）。"
    },
    {
      "indent": 3,
      "text": "3. The FCS (AS) sends a provisional response to the FCP (FloorRequestStatus PENDING) and handles the request in its queue. Since a chair is assigned to this floor, the request is forwarded to the FCC for a decision (FloorStatus).",
      "ja": "3. FCS（AS）は、FCP（FloorRequestStatus PENDING）に暫定応答を送信し、そのキューで要求を処理します。椅子は、このフロアに割り当てられているので、要求は意思決定のためのFCC（FloorStatus）に転送されます。"
    },
    {
      "indent": 3,
      "text": "4. The FCC makes a decision and sends it to the FCS (ChairAction ACCEPTED).",
      "ja": "4. FCCは、決定を行い、FCS（ChairAction ACCEPTED）に送信します。"
    },
    {
      "indent": 3,
      "text": "5. The FCS takes note of the decision and updates the queue accordingly. The decision is sent to the FCP (FloorRequestStatus ACCEPTED). The floor has not been granted yet.",
      "ja": "5. FCSは、意思決定のノートを取り、それに応じてキューを更新します。決定は、FCP（FloorRequestStatus ACCEPTED）に送信されます。床はまだ付与されていません。"
    },
    {
      "indent": 3,
      "text": "6. As soon as the queue allows it, the floor is actually granted to the FCP. The AS, which is co-located with the FCS, understands in its business logic that such an event is associated with the audio resource being granted to the FCP. As a consequence, a <modifyjoin> ('sendrecv') is sent through the Control Channel to the MS in order to unmute the FCP UAC in the conference.",
      "ja": "6.とすぐにキューがそれを可能にするよう、床は実際にFCPに付与されます。 FCSと同じ場所に配置されたASは、このようなイベントは、オーディオリソースがFCPに付与されて関連付けられていることをそのビジネスロジックに理解しています。結果として、<modifyjoin>（「のsendrecv」）会議にFCP UACのミュートを解除するために、MSに制御チャネルを介して送信されます。"
    },
    {
      "indent": 3,
      "text": "7. The FCP is notified of this event (FloorRequestStatus GRANTED), thus ending the scenario.",
      "ja": "7. FCPは、このようなシナリオを終了する（FloorRequestStatusが付与）このイベントが通知されます。"
    },
    {
      "indent": 3,
      "text": "A diagram of such a sequence of transactions (also involving the BFCP message flow at a higher level) is depicted in Figure 43:",
      "ja": "（また、より高いレベルでBFCPメッセージフローを含む）取引のような配列の図が図43に示されています。"
    },
    {
      "indent": 1,
      "text": "UAC1      UAC2       AS\n(FCP)     (FCC)     (FCS)                               MS\n |         |         |                                  |\n |<<####################################################|\n |   UAC1 is muted (recvonly stream) in the conference  |\n |<<####################################################|\n |         |         |                                  |\n |         | FloorQuery                                 |\n |         |*******>>|                                  |\n |         |         |--+ handle                        |\n |         |         |  | subscription                  |\n |         |         |<-+                               |\n |         | FloorStatus                                |\n |         |<<*******|                                  |\n |         |         |                                  |\n | FloorRequest      |                                  |\n |*****************>>|                                  |\n |         |         |--+ handle                        |\n |         |         |  | request                       |\n |           Pending |<-+ (queue)                       |\n |<<*****************|                                  |\n |         |         |                                  |\n |         | FloorStatus                                |\n |         |<<*******|                                  |\n |         |         |                                  |\n |         | ChairAction (ACCEPT)                       |",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|         |*******>>|                                  |\n|         | ChairActionAck                             |\n|         |<<*******|                                  |\n|         |         |--+ handle                        |\n|         |         |  | decision                      |\n|         |         |<-+ (queue)                       |\n|          Accepted |                                  |\n|<<*****************|                                  |\n|         | FloorStatus                                |\n|         |<<*******|                                  |\n|         |         |                                  |\n|         |         |--+ queue                         |\n|         |         |  | grants                        |\n|         |         |<-+ floor                         |\n|         |         |                                  |\n|         |         | 1. CONTROL (modjoin UAC<->conf)  |\n|         |         |++++++++++++++++++++++++++++++++>>|\n|         |         |                                  |--+ modjoin\n|         |         |                                  |  | UAC & conf\n|         |         |                        2. 200 OK |<-+ (sendrecv)\n|         |         |<<++++++++++++++++++++++++++++++++|\n|         |         |                                  |\n|<<##################################################>>|\n|   UAC1 is now unmuted (sendrecv) in the conference   |\n|        and can speak, contributing to the mix        |\n|<<##################################################>>|\n|         |         |                                  |\n|           Granted |                                  |\n|<<*****************|                                  |\n|         | FloorStatus                                |\n|         |<<*******|                                  |\n|         |         |                                  |\n.         .                                            .\n.         .                                            .",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 43: Floor Control: Framework Transactions",
      "ja": "図43：フロアコントロール：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "As can easily be deduced from the above diagram, the complex interaction at the BFCP level only results in a single transaction at the MEDIACTRL level. In fact, the purpose of the BFCP transactions is to moderate access to the audio resource, which means providing the event trigger to MEDIACTRL-based conference manipulation transactions. Before being granted the floor, the FCP UAC is excluded from the conference mix at the MEDIACTRL level ('recvonly'). As soon as the floor has been granted, the FCP UAC is included in the mix. In MEDIACTRL words:",
      "ja": "簡単に上の図から推定することができるように、BFCPレベルでの複雑な相互作用のみMEDIACTRLレベルで単一のトランザクションになります。実際には、BFCP取引の目的は、MEDIACTRLベースの会議操作取引にイベントトリガを提供することを意味オーディオリソースへのアクセスを緩和することです。床を付与される前に、FCP UACは（「がrecvonly」）MEDIACTRLレベルでの会議ミックスから除外されます。すぐに床が付与されているように、FCP UACはミックスに含まれています。 MEDIACTRLの言葉で："
    },
    {
      "indent": 3,
      "text": "o Since the FCP UAC must be included in the audio mix, a <modifyjoin> is sent to the MS in a CONTROL directive. The <modifyjoin> has as identifiers the connectionid associated with the FCP UAC (e1e1427c:1c998d22) and the conferenceid of the mix (cf45ee2). The <stream> element tells the MS that the audio media stream between the two must become bidirectional ('sendrecv'), changing the previous status ('recvonly'). Please note that in this case only audio was involved in the conference; if video were involved as well, and video had to be unchanged, a <stream> directive for video had to be placed in the request as well in order to maintain its current status.",
      "ja": "FCP UACは、オーディオミックスに含まれていなければならないので、O、<modifyjoin> CONTROLディレクティブでMSに送信されます。ミックス（cf45ee2）のconferenceid：FCPのUAC（1c998d22 e1e1427c）に関連connectionidが識別子として<modifyjoin>を有しています。 <ストリーム>要素は、二つの間のオーディオメディアストリームが双方向にならなければならないこと（「のsendrecv」）、以前の状態を変化させる（「がrecvonly」）をMSに指示します。この場合にのみ、音声が会議に関与していることに注意してください。ビデオも同様に関与し、映像はそのままでなければならなかった場合は、ビデオのための<ストリーム>ディレクティブは、現在の状態を維持するために、同様の要求に配置する必要がありました。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW CONTROL)\n-------------------------\n   CFW gh67ffg56w21 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 182",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <modifyjoin id1=\"e1e1427c:1c998d22\" id2=\"cf45ee2\"> <stream media=\"audio\" direction=\"sendrecv\"/> </modifyjoin> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <modifyjoin ID1 = \"e1e1427c：1c998d22\" ID2 = \"cf45ee2\"> <ストリームメディア= \"オーディオ\" 方向=」 SENDRECV \"/> </ modifyjoin> </ mscmixer>"
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200 OK)\n------------------------\n   CFW gh67ffg56w21 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join modified\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <レスポンスステータス= \"200\" 理由= \"修飾参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "6.4. Additional Scenarios",
      "section_title": true,
      "ja": "6.4. 追加シナリオ"
    },
    {
      "indent": 3,
      "text": "This section includes additional scenarios that can be of interest when dealing with AS<->MS flows. The aim of the following subsections is to present the use of features peculiar to the IVR package: specifically, variable announcements, VCR (video cassette recorder) prompts, parallel playback, recurring dialogs, and custom grammars. To describe how call flows involving such features might happen, three sample scenarios have been chosen:",
      "ja": "< - > MSフローこのセクションでは、ASを扱う際に関心のものとすることができる追加のシナリオが含まれています。具体的には、可変アナウンス、VCR（ビデオカセットレコーダ）が求められ、平行再生、繰り返しダイアログ、およびカスタム文法：以下のサブセクションの目的は、IVRパッケージ特有の機能の使用を提示することです。このような特徴を伴うコールフローが起こるかもしれない方法を説明するために、3つのサンプルシナリオが選択されています："
    },
    {
      "indent": 3,
      "text": "1. Voice Mail (variable announcements for digits, VCR controls).",
      "section_title": true,
      "ja": "1.ボイスメール（数字、VCRコントロールの変数発表）。"
    },
    {
      "indent": 3,
      "text": "2. Current Time (variable announcements for date and time, parallel playback).",
      "ja": "2.現在の時刻（日付と時刻の変数発表、並列再生）。"
    },
    {
      "indent": 3,
      "text": "3. DTMF-driven Conference Manipulation (recurring dialogs, custom grammars).",
      "ja": "3. DTMF主導の会議操作（定期的なダイアログ、カスタム文法）。"
    },
    {
      "indent": 0,
      "text": "6.4.1. Voice Mail",
      "section_title": true,
      "ja": "6.4.1. ボイスメール"
    },
    {
      "indent": 3,
      "text": "An application that typically uses the services an MS can provide is Voice Mail. In fact, while it is clear that many of its features are part of the application logic (e.g., the mapping of a URI with a specific user's voice mailbox, the list of messages and their properties, and so on), the actual media work is accomplished through the MS. Features needed by a Voice Mail application include the ability to record a stream and play it back at a later time, give verbose announcements regarding the status of the application, control the playout of recorded messages by means of VCR controls, and so on. These features are all supported by the MS through the IVR package.",
      "ja": "通常、MSが提供できるサービスを使用するアプリケーションは、ボイスメールです。実際には、その機能の多くは、アプリケーション・ロジック（例えば、特定のユーザーのボイスメールボックスを持つURIのマッピング、メッセージとそのプロパティのリストなど）、実際のメディアの仕事の一部であることは明らかである一方、 MSを介して達成されます。ボイスメールアプリケーションが必要とする機能は、ようにストリームを記録し、後でそれを再生すると、アプリケーションの状況に関する詳細な発表を与え、VCRコントロールの手段によって記録されたメッセージの再生を制御し、能力が含まれます。これらの機能は、すべてのIVRのパッケージを介してMSによってサポートされています。"
    },
    {
      "indent": 3,
      "text": "Without delving into the details of a full Voice Mail application and all its possible use cases, this section will cover a specific scenario and try to deal with as many interactions as possible that may happen between the AS and the MS in such a context. This scenario, depicted as a sequence diagram in Figure 44, will be as follows:",
      "ja": "フルボイスメールアプリケーションとそのすべての可能なユースケースの詳細に踏み込んでなければ、このセクションでは、特定のシナリオをカバーし、このような文脈でASとMSとの間で発生する可能性があり、できるだけ多くの相互作用に対処しようとします。次のように、図44のシーケンス図として示さこのシナリオは、次のようになります。"
    },
    {
      "indent": 3,
      "text": "1. The UAC INVITEs a URI associated with his mailbox, and the AS follows the previously explained procedure to have the UAC negotiate a new media session with the MS.",
      "ja": "1. UACが自分のメールボックスに関連付けられているURIを招き、そしてASは、UACがMSと新しいメディアセッションを交渉するために持って前に説明した手順に従います。"
    },
    {
      "indent": 3,
      "text": "2. The UAC is first prompted with an announcement giving him the amount of available new messages in the mailbox. After that, the UAC can choose which message to access by sending a DTMF tone.",
      "ja": "2. UACは最初の彼のメールボックスで利用可能な新しいメッセージの量を与える告知が表示されます。その後、UACは、DTMFトーンを送信することにより、アクセスするために、どのメッセージを選択することができます。"
    },
    {
      "indent": 3,
      "text": "3. The UAC is then presented with a VCR-controlled announcement, in which the chosen received mail is played back to him. VCR controls allow him to navigate through the prompt.",
      "ja": "3. UACは、その後、選択した受信メールは彼に再生されているVCR制御の発表が提示されます。 VCRコントロールは、彼はプロンプトをナビゲートすることができます。"
    },
    {
      "indent": 3,
      "text": "This is a quite oversimplified scenario, considering that it doesn't even allow the UAC to delete old messages or organize them but just to choose which received message to play. Nevertheless, it gives us the chance to deal with variable announcements and VCR controls -- two typical features that a Voice Mail application would almost always take advantage of. Other features that a Voice Mail application would rely upon (e.g., recording streams, event-driven IVR menus, and so on) have been introduced in previous sections, and so representing them would be redundant. This means that the presented call flows assume that some messages have already been recorded and are available at reachable locations. The example also assumes that the AS has placed the recordings in its own storage facilities, since it is not safe to rely upon the internal MS storage, which is likely to be temporary.",
      "ja": "これは、それもUACが古いメッセージを削除したり、それらを整理するだけでなく、再生するメッセージを受け取ったかを選択することを許可していないことを考えると、かなり単純化シナリオです。ボイスメールアプリケーションは、ほとんどの場合の利点を取る2つの典型的な特徴 - それにもかかわらず、それは私たちに、変数の発表やVCRのコントロールに対処するための機会を与えてくれます。ボイスメールアプリケーション（例えば、記録ストリーム、イベント駆動型のIVRメニューなど）に依存するであろう他の特徴は、前のセクションで導入され、そのためそれらは冗長になる表現されています。提示コールフローは、いくつかのメッセージが既に記録されていることを前提とし、到達可能な場所で利用可能であることをこれが意味しています。例では、一時的である可能性が高い内部MSストレージ、に頼ることは安全ではありませんので、ASは、自身の貯蔵施設で録音を置いていることを前提としています。"
    },
    {
      "indent": 1,
      "text": "UAC                      AS                                 MS\n |                       |                                  |\n |                       | A1. CONTROL (play variables and  |\n |                       |      collect the user's choice)  |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  | prepare &\n |                       |                                  |--+ start\n |                       |                                  |  | the\n |                       |                       A2. 200 OK |<-+ dialog\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |<<########################################################|\n |                \"You have five messages ...\"              |\n |<<########################################################|\n |                       |                                  |\n |                       |      B1. CONTROL (<collectinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       | B2. 200 OK                       |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |\n |                       | C1. CONTROL (VCR for chosen msg) |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  | prepare &\n |                       |                                  |--+ start\n |                       |                                  |  | the\n |                       |                       C2. 200 OK |<-+ dialog\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |<<########################################################|\n |          \"Hi there, I tried to call you but...\"          |--+\n |<<########################################################|  | handle\n |                       |                                  |  | VCR-\n |########################################################>>|  | driven\n |        The UAC controls the playout using DTMF           |  | (DTMF)\n |########################################################>>|  |playout\n |                       |                                  |<-+",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|                       |       D1. CONTROL (<dtmfnotify>) |\n|                       |<<++++++++++++++++++++++++++++++++|\n|                       | D2. 200 OK                       |\n|                       |++++++++++++++++++++++++++++++++>>|\n|                       |                                  |\n.                       .                                  .\n.       (other events are received in the meantime)        |\n.                       .                                  .\n|                       |      E1. CONTROL (<controlinfo>) |\n|                       |<<++++++++++++++++++++++++++++++++|\n|                       | E2. 200 OK                       |\n|                       |++++++++++++++++++++++++++++++++>>|\n|                       |                                  |\n.                       .                                  .\n.                       .                                  .",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 44: Voice Mail: Framework Transactions",
      "ja": "図44：ボイスメール：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The framework transaction steps are as follows:",
      "ja": "次のようなフレームワークのトランザクション手順は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The first transaction (A1) is addressed to the IVR package (msc-ivr). It is basically an [RFC6231] 'promptandcollect' dialog, but with a slight difference: some of the prompts to play are actual audio files, for which a URI is provided (media loc=\"xxx\"), while others are so-called <variable> prompts; these <variable> prompts are actually constructed by the MS itself according to the directives provided by the AS. In this example, the sequence of prompts requested by the AS is as follows:",
      "ja": "O最初のトランザクション（A1）は、IVRパッケージ（MSC-IVR）にアドレス指定されています。これは、基本的には[RFC6231] 'promptandcollect]ダイアログですが、若干の違いが：URIが設けられているため、実際の音声ファイル、（メディアLOC =「xxx」は）されている他は、いわゆるされている間、プロンプトの一部は、再生するために<変数>が求められます。これらの<変数>プロンプトは、実際にASによって提供される指示に応じてMS自身によって構成されています。この例では、ASによって要求されたプロンプトの順序は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "1. play a wav file (\"you have...\").",
      "section_title": true,
      "ja": "1. wavファイルを再生する（ \"あなたが持っています...\"）。"
    },
    {
      "indent": 6,
      "text": "2. play a digit (\"five...\") by building it (variable: digit=5).",
      "section_title": true,
      "ja": "2.（：数字= 5変数）を構築することにより、数字（ \"5を...\"）演じます。"
    },
    {
      "indent": 6,
      "text": "3. play a wav file (\"messages...\").",
      "section_title": true,
      "ja": "3. wavファイル（ \"メッセージ...\"）演じます。"
    },
    {
      "indent": 6,
      "text": "A DTMF collection is requested as well (<collect>) to be taken after the prompts have been played. The AS is only interested in a single digit (maxdigits=1).",
      "ja": "DTMFコレクションは、プロンプトが再生された後に撮影する（<収集>）なども要求されています。 ASは、一桁（maxdigits = 1）にのみ関心があります。"
    },
    {
      "indent": 3,
      "text": "o The transaction is handled by the MS, and if everything works fine (i.e., the MS retrieved all the audio files and successfully built the variable announcements), the dialog is started; its start is reported, together with the associated identifier (5db01f4) to the AS in a terminating 200 OK message (A2).",
      "ja": "Oトランザクションは、ダイアログが開始され、MSによって処理され、すべてが正常に動作している場合（すなわち、MSは、すべてのオーディオファイルを検索し、成功した変数のアナウンスを建て）されます。その開始は、一緒に終端200 OKメッセージ（A2）のように関連する識別子（5db01f4）と、報告されています。"
    },
    {
      "indent": 3,
      "text": "o The AS then waits for the dialog to end in order to retrieve the results in which it is interested (in this case, the DTMF tone the UAC chooses, since it will affect which message will have to be played subsequently).",
      "ja": "ダイアログは、それが興味のある結果を取得するために終了するためにASを待ちO（この場合には、それが影響するので、UACは、選択したDTMFトーンは、どのメッセージ後に再生する必要があります）。"
    },
    {
      "indent": 3,
      "text": "o The UAC hears the prompts and chooses a message to play. In this example, he wants to listen to the first message and so inputs \"1\". The MS intercepts this tone and notifies the AS of it in a newly created CONTROL event message (B1); this CONTROL includes information about how each single requested operation ended (<promptinfo> and <collectinfo>). Specifically, the event states that the prompt ended normally (termmode=completed) and that the subsequently collected tone is 1 (dtmf=1). The AS acks the event (B2), since the dialogid provided in the message is the same as that of the previously started dialog.",
      "ja": "O UACプロンプトを聞き、再生するメッセージを選択します。この例では、彼は最初のメッセージを聞きたいので、「1」を入力します。 MSインターセプトこのトーンと新しく作成された制御イベントメッセージ（B1）におけるそれのASに通知します。このコントロールは、各単一要求された操作が終了したかについての情報を含んでいる（<promptinfo>と<collectinfo>）。具体的には、イベントは（TERMMODE =完了）プロンプトが正常に終了したことを述べ、その後、収集トーンが1（= 1 DTMF）です。メッセージで提供dialogidが以前のものと同じであるので、イベント（B2）のACK ASは、ダイアログを開始しました。"
    },
    {
      "indent": 3,
      "text": "o At this point, the AS uses the value retrieved from the event to proceed with its business logic. It decides to present the UAC with a VCR-controllable playout of the requested message. This is done with a new request to the IVR package (C1), which contains two operations: <prompt> to address the media file to play (an old recording) and <control> to instruct the MS about how the playout of this media file shall be controlled via DTMF tones provided by the UAC (in this example, different DTMF digits are associated with different actions, e.g., pause/resume, fast forward, rewind, and so on). The AS also subscribes to DTMF events related to this control operation (matchmode=control), which means that the MS is to trigger an event any time that a DTMF associated with a control operation (e.g., 7=pause) is intercepted.",
      "ja": "この時点で、O、ASは、そのビジネス・ロジックを続行するイベントから取得した値を使用しています。これは、要求されたメッセージのVCR-制御可能な再生でUACを提示することを決定します。これは、2つの操作が含まれているIVRパッケージ（C1）への新しい要求で行われます。<プロンプト>についてのMSを指示するメディアファイル再生するには（旧記録）と<コントロール>を対処するためにどのようにこのメディアの再生ファイル（この例では、異なるDTMFディジットを巻き戻し、早送り、一時停止/再開、例えば、異なるアクションに関連付けられている、などされる）UACにより提供されるDTMFトーンを介して制御されなければなりません。 ASはまた、MSは、イベントに制御動作（例えば、7 =休止）に関連付けられたDTMFが傍受されていることを任意の時間をトリガすることであることを意味し、この制御動作（matchmode =対照）に関連するDTMFイベントにサブスクライブ。"
    },
    {
      "indent": 3,
      "text": "o The MS prepares the dialog and, when the playout starts, sends notification in a terminating 200 OK message (C2). At this point, the UAC is presented with the prompt and can use DTMF digits to control the playback.",
      "ja": "O MSダイアログを準備し、再生が開始されると、終端200 OKメッセージ（C2）に通知を送信します。この時点で、UACはプロンプトが表示され、再生を制御するためのDTMFディジットを使用することができます。"
    },
    {
      "indent": 3,
      "text": "o As explained previously, any DTMF associated with a VCR operation is then reported to the AS, together with a timestamp stating when the event happened. An example is provided (D1) in which the UAC pressed the fast-forward key (6) at a specific time. Of course, as for any other MS-generated event, the AS acks it (D2).",
      "ja": "Oなどは、VCRの操作に関連するすべてのDTMFは、その後のタイムスタンプは、イベントが起こった時に知らせるとともに、ASに報告され、先に説明しました。例では、UACは、特定の時点で早送りキー（6）を押下する（D1）が設けられています。もちろん、任意の他のMS-発生したイベントについては、ASは、（D2）がACKS。"
    },
    {
      "indent": 3,
      "text": "o When the playback ends (whether because the media reached its termination or because any other interruption occurred), the MS triggers a concluding event with information about the whole dialog (E1). This event, besides including information about the prompt itself (<promptinfo>), also includes information related to the VCR operations (<controlinfo>), that is, all the VCR controls the UAC used (fast forward/rewind/pause/resume in this example) and when it happened. The final ack by the AS (E2) concludes the scenario.",
      "ja": "ときに再生が終了する（メディアがその終了に達したため、またはその他の中断が発生したためか）O、MSは、全体のダイアログ（E1）に関する情報を総括イベントをトリガします。このイベントは、プロンプト自体（<promptinfo>）に関する情報を含む他に、つまり、（<CONTROLINFO>）VCR動作に関連する情報を含む、全てのVCRは、UACがで（早送り/巻き戻し/一時停止/再開を使用するコントロールこの例）とするとき、それは起こりました。 AS（E2）による最終ACKは、シナリオを終了します。"
    },
    {
      "indent": 0,
      "text": "A1. AS -> MS (CFW CONTROL, play and collect)\n--------------------------------------------\n   CFW 2f931de22820 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 429",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"10514b7f:6a900179\"> <dialog> <prompt> <media loc=\"http://www.example.net/prompts/vm-youhave.wav\" type=\"audio/x-wav\"/> <variable value=\"5\" type=\"digits\"/> <media loc=\"http://www.example.net/prompts/vm-messages.wav\" type=\"audio/x-wav\"/> </prompt> <collect maxdigits=\"1\" escapekey=\"*\" cleardigitbuffer=\"true\"/> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"10514b7f：6a900179\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// www.example.net/prompts/vm-youhave.wav \"タイプ= \"オーディオ/ X-wavファイル\"/> <変数の値= \"5\" タイプ= \"数字\"/> <メディアLOC =\" のhttp：// WWW。 example.net/prompts/vm-messages.wav」タイプ= \"オーディオ/のX-wavファイル\" /> </プロンプト> <maxdigitsを収集= \"1\" escapekey = \"*\" cleardigitbuffer = \"真\" /> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 2f931de22820 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"5db01f4\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"5db01f4\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "B1. AS <- MS (CFW CONTROL event)\n--------------------------------\n   CFW 7c97adc41b3e CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 270",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"5db01f4\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"11713\" termmode=\"completed\"/> <collectinfo dtmf=\"1\" termmode=\"match\"/> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"5db01f4\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>持続時間= \"11713\" TERMMODE = \"完了\" /> <collectinfo DTMF = \"1\" TERMMODE = \"一致\" /> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "B2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 7c97adc41b3e 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "C1. AS -> MS (CFW CONTROL, VCR)\n-------------------------------\n   CFW 3140c24614bb CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 423",
      "raw": true
    },
    {
      "indent": 2,
      "text": " <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"10514b7f:6a900179\"> <dialog> <prompt bargein=\"false\"> <media loc=\"http://www.example.com/messages/recording-4ca9fc2.mpg\"/> </prompt> <control gotostartkey=\"1\" gotoendkey=\"3\" ffkey=\"6\" rwkey=\"4\" pausekey=\"7\" resumekey=\"9\" volupkey=\"#\" voldnkey=\"*\"/> </dialog> <subscribe> <dtmfsub matchmode=\"control\"/> </subscribe> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"10514b7f：6a900179\"> <ダイアログ> <プロンプトbargein = \"偽\"> <メディアLOC = \"http://www.example.com/messages/recording-4ca9fc2.mpg\" /> </プロンプト> <制御gotostartkey = \"1\" gotoendkey = \"3\" ffkey = \"6\" rwkey = \"4\" pausekey =」 7\" resumekey = \"9\" volupkey = \"＃\" voldnkey = \"*\" /> </ダイアログ> <購読> <dtmfsub matchmode = \"コントロール\" /> </サブスクライブ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "C2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 3140c24614bb 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"3e936e0\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"3e936e0\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "D1. AS <- MS (CFW CONTROL event, dtmfnotify)\n--------------------------------------------\n   CFW 361840da0581 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 179",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"3e936e0\"> <dtmfnotify matchmode=\"control\" dtmf=\"6\" timestamp=\"2008-12-16T12:58:36Z\"/> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscivr\"> <イベントdialogid = \"3e936e0\"> <dtmfnotify matchmode = \"コントロール\" DTMF = \"6\" タイムスタンプ= \"2008- 12-16T12：58：36Z \"/> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "D2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 361840da0581 200",
      "raw": true
    },
    {
      "indent": 6,
      "text": "[..] The other VCR DTMF notifications are skipped for brevity [..]",
      "ja": "[..]他のVCR DTMF通知を簡潔にするためにスキップされ[..]"
    },
    {
      "indent": 0,
      "text": "E1. AS <- MS (CFW CONTROL event, dialogexit)\n--------------------------------------------\n   CFW 3ffab81c21e9 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 485",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"3e936e0\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"10270\" termmode=\"completed\"/> <controlinfo> <controlmatch dtmf=\"6\" timestamp=\"2008-12-16T12:58:36Z\"/> <controlmatch dtmf=\"4\" timestamp=\"2008-12-16T12:58:37Z\"/> <controlmatch dtmf=\"7\" timestamp=\"2008-12-16T12:58:38Z\"/> <controlmatch dtmf=\"9\" timestamp=\"2008-12-16T12:58:40Z\"/> </controlinfo> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"3e936e0\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>持続時間= \"10270\" TERMMODE = \"完了\" /> <CONTROLINFO> <controlmatch DTMF = \"6\" タイムスタンプ= \"2008-12-16T12：58：36Z\" /> <controlmatch DTMF = \"4\" タイムスタンプ= \"2008-12 -16T12：58：37Z \"/> <controlmatch DTMF =\" 7\" タイムスタンプ= \"2008-12-16T12：58：38Z\" /> <controlmatch DTMF = \"9\" タイムスタンプ= \"2008-12-16T12：58：40Z 「/> </ CONTROLINFO> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "E2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 3ffab81c21e9 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6.4.2. Current Time",
      "section_title": true,
      "ja": "6.4.2. 現在の時刻"
    },
    {
      "indent": 3,
      "text": "An interesting scenario to create with the help of features provided by the MS is what is typically called 'Current Time'. A UAC calls a URI, which presents the caller with the current date and time. As can easily be deduced by the very nature of the application, variable announcements play an important role in this scenario. In fact, rather than having the AS build an announcement according to the current time using different framework messages, it is much easier to rely upon the \"variable announcements\" mechanism provided by the IVR package, as variable announcements provide several ways to deal with dates and times.",
      "ja": "MSが提供する機能の助けを借りて作成する興味深いシナリオは、一般的に「現在時刻」と呼ばれるものです。 UACは、現在の日付と時刻、発信者に提示URIを呼び出します。簡単にアプリケーションの性質により推定されるように、変数の発表は、このシナリオで重要な役割を果たしています。変数アナウンスは日付に対処するためのいくつかの方法を提供して実際には、むしろASは異なるフレームワークメッセージを使用して現在の時刻に応じて発表を構築することよりも、IVRパッケージが提供する「変数発表」のメカニズムに依存している方がはるかに簡単ですそして回。"
    },
    {
      "indent": 3,
      "text": "To make the scenario more interesting and have it cover more functionality, the application is also assumed to have background music played during the announcement. Because most of the announcements will be variable, a means is needed to have more streams played in parallel on the same connection. This can be achieved in two different ways:",
      "ja": "シナリオをより面白くすると、それはより多くの機能をカバーするようにするには、アプリケーションはまた、発表中に再生バックグラウンドミュージックを有しているものとします。発表のほとんどが変数になりますので、手段が同じ接続上に平行に演奏以上のストリームを持つことが必要とされています。これは、2つの異なる方法で達成することができます。"
    },
    {
      "indent": 3,
      "text": "1. two separate and different dialogs, playing the variable announcements and the background track, respectively.",
      "ja": "それぞれ、可変アナウンス背景トラックを再生1.二つの別々の異なるダイアログ、。"
    },
    {
      "indent": 3,
      "text": "2. a single dialog implementing a parallel playback.",
      "section_title": true,
      "ja": "2.並列再生を実装する単一のダイアログ。"
    },
    {
      "indent": 3,
      "text": "The first approach assumes that the available MS implements implicit mixing, which may or may not be supported since it's a recommended feature but not mandatory. The second approach assumes that the MS implements support for more streams of the same media type (in this case audio) in the same dialog, which, exactly as for the case of implicit mixing, is not to be taken for granted. Because the first approach is quite straightforward and easy to understand, the following scenario uses the second approach and assumes that the available MS supports parallel playback of more audio tracks within the context of the same dialog.",
      "ja": "第1のアプローチは、利用可能なMSは、それが推奨される特徴が、必須ではないため、またはサポートしてもしなくてもよい暗黙的な混合を実現することを想定しています。第2のアプローチは、MSが正確に暗黙的混合の場合と同様に、当然の解釈されるべきではなく、同じダイアログで（この場合、オーディオに）同じメディアタイプの複数のストリームのためのサポートを実装することを想定しています。最初のアプローチは非常に簡単で理解しやすいですので、次のシナリオは、第二のアプローチを使用し、利用可能なMSは、同じダイアログのコンテキスト内で複数のオーディオトラックの並列再生をサポートしていることを前提としています。"
    },
    {
      "indent": 3,
      "text": "That said, the covered scenario, depicted as a sequence diagram in Figure 45, will be as follows:",
      "ja": "つまり、次のように、図45のシーケンス図として描か覆わシナリオは、あろう、と述べました。"
    },
    {
      "indent": 3,
      "text": "1. The UAC INVITEs a URI associated with the Current Time application, and the AS follows the previously explained procedure to have the UAC negotiate a new media session with the MS.",
      "ja": "1. UACは、現在の時刻アプリケーションに関連付けられているURIを招き、そしてASは、UACがMSと新しいメディアセッションを交渉するために持って前に説明した手順に従います。"
    },
    {
      "indent": 3,
      "text": "2. The UAC is presented with an announcement including (i) a voice stating the current date and time; (ii) a background music track; and (iii) a mute background video track.",
      "ja": "2. UACは、（i）現在の日付と時刻を知らせる音声などの発表が提示されます。 （ⅱ）バックグラウンドミュージックトラックを、および（iii）ミュート背景ビデオトラック。"
    },
    {
      "indent": 1,
      "text": "UAC                      AS                                 MS\n |                       |                                  |\n |                       | A1. CONTROL (play variables)     |\n |                       |++++++++++++++++++++++++++++++++>>| prepare\n |                       |                                  |--+ and\n |                       |                          A2. 202 |  | start\n |                       |<<++++++++++++++++++++++++++++++++|  | the\n |                       |                                  |  | dialog\n |                       |                                  |  | (takes\n |                       |           A3. REPORT (terminate) |<-+ time)\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       | A4. 200 OK                       |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |\n |<<########################################################|\n |            \"16th of december 2008, 5:31 PM...\"           |\n |<<########################################################|\n |                       |                                  |\n |                       |       B1. CONTROL (<promptinfo>) |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       | B2. 200 OK                       |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                                  |\n .                       .                                  .\n .                       .                                  .\n .                       .                                  .",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 45: Current Time: Framework Transactions",
      "ja": "図45：現在の時刻：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The framework transaction steps are as follows:",
      "ja": "次のようなフレームワークのトランザクション手順は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The first transaction (A1) is addressed to the IVR package (msc-ivr); it is basically an [RFC6231] 'playannouncements' dialog, but, unlike all the scenarios presented so far, it includes directives for a parallel playback, as indicated by the <par> element. There are three flows to play in parallel:",
      "ja": "O最初のトランザクション（A1）は、IVRパッケージ（MSC-IVR）にアドレス指定されています。それは<パー>要素によって示されるように、これまでに提示されたすべてのシナリオとは異なり、それは、並列再生の指示を含む、基本的に[RFC6231]「playannouncements」ダイアログが、。並行して再生するには3つのフローがあります。"
    },
    {
      "indent": 6,
      "text": "* a sequence (<seq>) of variable and static announcements (the actual time and date).",
      "ja": "*配列変数と静的アナウンスの（<配列>）（実際の時間と日付）。"
    },
    {
      "indent": 6,
      "text": "* a music track ('media=music.wav') to be played in the background at a lower volume (soundLevel=50%).",
      "ja": "低いボリューム（soundLevel = 50％）で、バックグラウンドで再生する*音楽トラック（「メディア= music.wav」）。"
    },
    {
      "indent": 6,
      "text": "* a mute background video track (media=clock.mpg).",
      "ja": "*ミュート背景ビデオトラック（メディア= clock.mpg）。"
    },
    {
      "indent": 6,
      "text": "The global announcement ends when the longest of the three parallel steps ends (endsync=last). This means that if one of the steps ends before the others, the step is muted for the rest of the playback. In this example, the series of static and <variable> announcements is requested by the AS:",
      "ja": "場合3つの平行なステップ端（endsync =最後）の最長のグローバル発表は終了します。これは、ステップの一つは、他の人の前に終了した場合、ステップは再生の残りのためにミュートされることを意味しています。この例では、静的および<変数>の発表のシリーズは、ASによって要求されます。"
    },
    {
      "indent": 6,
      "text": "* play a wav file (\"Tuesday...\").",
      "ja": "* WAVファイル（ \"火曜日を...\"）演じます。"
    },
    {
      "indent": 6,
      "text": "* play a date (\"16th of december 2008...\") by building it (variable: date with a ymd=year/month/day format).",
      "ja": "*それを構築することにより、日付（「2008年12月の第16回を...」）を再生（変数：YMD =年/月/日の形式で日付）。"
    },
    {
      "indent": 6,
      "text": "* play a time (\"5:31 PM...\") by building it (variable: time with a t12=12 hour day format, am/pm).",
      "ja": "*（変数：T12 = 12時間の日の形式で時刻、午前/午後）、それを構築することにより、時間（「17:31を...」）演じます。"
    },
    {
      "indent": 3,
      "text": "o The transaction is extended by the MS (A2) with a new timeout, as in this case the MS needs some more time to retrieve all the needed media files. Should the new timeout expire as well, the MS would send a further message to extend it again (a REPORT update), but for the sake of simplicity we assume that in this scenario it is not needed. If everything went fine (i.e., the MS retrieved all the audio files and successfully built the variable announcements, and it supports parallel playback as requested), the dialog is started. Its start is reported, together with the associated identifier (415719e), to the AS in a terminating REPORT message (A3).",
      "ja": "MSは、必要なすべてのメディアファイルを取得するには、いくつかのより多くの時間を必要とする。この場合のように、Oトランザクションは、新しいタイムアウトとMS（A2）によって拡張されます。新しいタイムアウトが同様に期限切れにする必要があり、MSは再びそれを拡張するために、さらにメッセージ（REPORT更新）を送るだろうが、単純化のために、私たちは、このシナリオでは、それが必要とされていないことを前提としています。すべてがうまくいった場合（すなわち、MSは、すべてのオーディオファイルを検索し、成功した変数のアナウンスを構築し、要求されたとして、それは並列再生をサポートしている）、ダイアログが起動されます。その開始は、終端REPORTメッセージ（A3）のように、互いに関連する識別子（415719e）で、報告されています。"
    },
    {
      "indent": 3,
      "text": "o The AS acks the REPORT (A4) and waits for the dialog to end in order to either conclude the application or proceed to further steps if required by the application itself.",
      "ja": "REPORT（A4）のACK AS O及びダイアログアプリケーションを締結又はアプリケーション自体によって必要に応じてさらなるステップに進んでいずれかのために終了するのを待ちます。"
    },
    {
      "indent": 3,
      "text": "o When the last of the three parallel announcements ends, the dialog terminates, and an event (B1) is triggered to the AS with the relevant information (promptinfo). The AS acks (B2) and terminates the scenario.",
      "ja": "3つの平行なアナウンスの最後が終了すると、O、ダイアログが終了し、イベント（B1）は、関連情報（promptinfo）のようにトリガされます。 ASのACK（B2）とは、シナリオを終了します。"
    },
    {
      "indent": 0,
      "text": "A1. AS -> MS (CFW CONTROL, play)\n--------------------------------\n   CFW 0c7680191bd2 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 506",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"21c8e07b:055a893f\"> <dialog> <prompt bargein=\"true\"> <par endsync=\"last\"> <seq> <media loc=\"http://www.example.com/day-2.wav\"/> <variable value=\"2008-12-16\" type=\"date\" format=\"ymd\"/> <variable value=\"17:31\" type=\"time\" format=\"t12\"/> </seq> <media loc=\"http://www.example.com/music.wav\" soundLevel=\"50%\"/> <media loc=\"http://www.example.com/clock.mpg\"/> </par> </prompt> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"21c8e07b：055a893f\"> <ダイアログ> <プロンプトbargein = \"真\"> <パーendsync = \"最後\"> <配列> <メディアLOC = \"http://www.example.com/day-2.wav\" /> <変数値= \"2008-12-16\" タイプ= \"日付\" 形式= \"YMD \"/> <変数値=\" 17時31\" 分タイプ= \"時間\" 形式= \"T12\" /> </ SEQ> <メディアLOC = \"http://www.example.com/music.wav\" soundLevel =」 50％ \"/> <メディアLOC =\" http://www.example.com/clock.mpg \"/> </パー> </プロンプト> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "A2. AS <- MS (CFW 202)\n----------------------\n   CFW 0c7680191bd2 202\n   Timeout: 5",
      "raw": true
    },
    {
      "indent": 0,
      "text": "A3. AS <- MS (CFW REPORT terminate)\n-----------------------------------\n   CFW 0c7680191bd2 REPORT\n   Seq: 1\n   Status: terminate\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"415719e\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= \"ダイアログが起動し、\" dialogid = \"415719e\" /応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "A4. AS -> MS (CFW 200, ACK to 'REPORT terminate')\n-------------------------------------------------\n   CFW 0c7680191bd2 200\n   Seq: 1",
      "raw": true
    },
    {
      "indent": 0,
      "text": "B1. AS <- MS (CFW CONTROL event)\n--------------------------------\n   CFW 4481ca0c4fca CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 229",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"415719e\"> <dialogexit status=\"1\" reason=\"Dialog successfully completed\"> <promptinfo duration=\"8046\" termmode=\"completed\"/> </dialogexit> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <promptinfo <イベントdialogid = \"415719e\"> <= \"ダイアログが正常に完了し、\" dialogexitステータス= \"1\" の理由>期間= \"8046\" TERMMODE = \"完了\" /> </ dialogexit> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "B2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 4481ca0c4fca 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "6.4.3. DTMF-Driven Conference Manipulation",
      "section_title": true,
      "ja": "6.4.3.  DTMFドリブン会議操作"
    },
    {
      "indent": 3,
      "text": "To complete the scenarios presented in Section 6.3, this section deals with how the AS can use the MS to detect DTMF tones from conference participants and take actions on the conference accordingly. A typical example is when participants in a conference are provided with specific codes to:",
      "ja": "6.3節で提示したシナリオ、ASは、会議参加者からのDTMFトーンを検出し、それに応じて会議の行動を取るようにMSを使用する方法と、このセクションのお得な情報を完了します。会議の参加者は、特定のコードが設けられている場合の典型的な例です。"
    },
    {
      "indent": 3,
      "text": "o mute/unmute themselves in the conference;",
      "ja": "O /会議で自分自身をミュートミュート解除。"
    },
    {
      "indent": 3,
      "text": "o change their volume in the conference, or the volume of the conference itself;",
      "ja": "O会議、または会議自体のボリュームでその音量を変更。"
    },
    {
      "indent": 3,
      "text": "o change the video layout in the conference, if allowed;",
      "ja": "O会議でビデオレイアウトを変更、許可されている場合。"
    },
    {
      "indent": 3,
      "text": "o kick abusive users out of the conference;",
      "ja": "Oカンファレンスのうち、虐待的なユーザーを蹴ります。"
    },
    {
      "indent": 3,
      "text": "and so on. To achieve all this, the simplest thing an AS can do is to prepare a recurring DTMF collection for each participant with specific grammars to match. If the collected tones match the grammar, the MS would notify the AS of the tones and start the collection again. Upon receipt of <collectinfo> events, the AS would in turn originate the proper related request, e.g., a <modifyjoin> on the participant's stream with the conference. This is made possible by three features provided by the IVR package:",
      "ja": "等々。このすべてを達成するために、ASが行うことができます最も簡単な方法は、一致するように、特定の文法と各参加者のために、定期的なDTMFコレクションを準備することです。収集したトーンが文法と一致した場合、MSは、トーンのASに通知し、再収集を開始します。 <collectinfo>イベントを受信すると、ASは、順番に会議での参加者のストリーム上の適切な関連の要求を、例えば、<modifyjoin>発信でしょう。これは、IVRパッケージで提供される3つの機能によって可能になります。"
    },
    {
      "indent": 3,
      "text": "1. the 'repeatCount' attribute.",
      "section_title": true,
      "ja": "1. 'repeatCountに' 属性。"
    },
    {
      "indent": 3,
      "text": "2. the subscription mechanism.",
      "section_title": true,
      "ja": "2.サブスクリプション・メカニズム。"
    },
    {
      "indent": 3,
      "text": "3. the Speech Recognition Grammar Specification (SRGS) [SRGS].",
      "section_title": true,
      "ja": "前記音声認識文法仕様（SRGS）[SRGS]。"
    },
    {
      "indent": 3,
      "text": "The first feature allows recurring instances of the same dialog without the need for additional requests upon completion of the dialog itself. In fact, the 'repeatCount' attribute indicates how many times the dialog has to be repeated. When the attribute has the value 0, it means that the dialog has to be repeated indefinitely, meaning that it's up to the AS to destroy it by means of a <dialogterminate> request when the dialog is no longer needed. The second feature allows the AS to subscribe to events related to the IVR package without waiting for the dialog to end, e.g., matching DTMF collections in this case. Finally, the last feature allows custom matching grammars to be specified. This way, only a subset of the possible DTMF strings can be specified, so that only those matches in which the AS is interested are reported. Grammars other than SRGS may be supported by the MS and will achieve the same result. This document will only describe the use of an SRGS grammar, since support for SRGS is mandated in [RFC6231].",
      "ja": "第一の特徴は、ダイアログ自体の完了時に追加の要求を必要とせずに同じダイアログの繰り返しインスタンスができます。実際には、「repeatCountに」属性は、ダイアログが繰り返されなければならない回数を示します。属性が値0を持っている場合は、ダイアログは、それはダイアログはもはや必要とされている<dialogterminate>要求によってそれを破壊するためにAS次第です。つまり、無限に繰り返さなければならないことを意味します。第二の特徴は、この場合にはDTMFコレクションに一致する、例えば、ASが最後にダイアログを待たずにIVRパッケージに関連したイベントをサブスクライブすることができます。最後に、最後の機能は、カスタムマッチする文法を指定することができます。 ASが興味のあるマッチのみが報告されているように、この方法は、可能なDTMF文字列のサブセットのみが、指定することができます。 SRGS以外の文法は、MSによってサポートされてもよいし、同じ結果を達成します。 SRGSのためのサポートは、[RFC6231]で義務付けられているので、この文書は、SRGS文法の使用を記載します。"
    },
    {
      "indent": 3,
      "text": "To identify a single sample scenario, we assume that a participant has successfully joined a conference, e.g., as detailed in Figure 32. We also assume that the following codes are to be provided within the conference to participants in order to let them take advantage of advanced features:",
      "ja": "単一のサンプルシナリオを特定するために、我々は、我々はまた、以下のコードは、彼らがを利用できるようにするために、参加者への会議内で提供されることを前提とし、図32で説明するように、例えば、参加者が会議を成功裏に参加したことを前提とし高度な機能："
    },
    {
      "indent": 3,
      "text": "1. *6 to mute/unmute themselves (on/off trigger).",
      "section_title": true,
      "ja": "1. * 6（オン/オフトリガに）自分自身をミュート/ミュート解除するには。"
    },
    {
      "indent": 3,
      "text": "2. *1 to lower their own volume in the conference and *3 to raise it.",
      "ja": "2. * 1は、会議で独自の音量を下げ、* 3、それを調達します。"
    },
    {
      "indent": 3,
      "text": "3. *7 to lower the volume of the conference stream they are receiving and *9 to raise it.",
      "ja": "彼らはそれを高めるために9を受け取り、*されている会議ストリームの音量を下げる* 7 3。"
    },
    {
      "indent": 3,
      "text": "4. *0 to leave the conference.",
      "section_title": true,
      "ja": "4. * 0は、会議を終了します。"
    },
    {
      "indent": 3,
      "text": "This means that six different codes are supported and are to be matched in the requested DTMF collection. All other codes are collected by the MS but discarded, and no event is triggered to the AS. Because all the codes have the '*' (star) DTMF code in common, the following is an example of an SRGS grammar that may be used in the request by the AS:",
      "ja": "これは、6つの異なるコードがサポートされており、要求されたDTMFコレクションに一致するようにしていることを意味します。他のすべてのコードは、MSによって収集されたが破棄され、何のイベントがASにトリガされませんされています。すべてのコードが共通で「*」（スター）DTMFコードを持っているので、以下では、ASによって要求で使用されてもよいSRGS文法の一例です。"
    },
    {
      "indent": 5,
      "text": "<grammar mode=\"dtmf\" version=\"1.0\" xmlns=\"http://www.w3.org/2001/06/grammar\"> <rule id=\"digit\"> <one-of> <item>0</item> <item>1</item> <item>3</item> <item>6</item> <item>7</item> <item>9</item> </one-of> </rule> <rule id=\"action\" scope=\"public\"> <item> * <item><ruleref uri=\"#digit\"/></item> </item> </rule> </grammar>",
      "ja": "<文法モード= \"DTMF\" バージョン= \"1.0\" のxmlns = \"http://www.w3.org/2001/06/grammar\"> <ルールID = \"数字\"> <一の>の<item> 0 < /商品> <商品> 1 </商品> <商品> 3 </商品> <商品> 6 </商品> <商品> 7 </商品> <商品> 9 </ item>を</ワンの> < /ルール> <ルールID = \"アクション\" スコープ= \"公共\"> <項目> * <項目> <ruleref URI = \"＃数字\" /> </ item>の</ item>の</ルール> </文法>"
    },
    {
      "indent": 3,
      "text": "As can be deduced by looking at the grammar, the presented SRGS XML code specifies exactly the requirements for the collections to match. The rule is to match any string that has a star ('*') followed by a single supported digit (0, 1, 3, 6, 7, or 9). Such grammar, as stated in [RFC6231], may be either provided inline in the request itself or referenced externally by means of the 'src' attribute. In the example scenario, we'll put it inline, but an external reference to the same document would achieve exactly the same result.",
      "ja": "文法を見ることで推測できるように、提示SRGS XMLコードが一致するように、コレクションのための正確な要件を指定します。ルールは、単一のサポートされている数字（0、1、3、6、7、または9）に続いてスターを（「*」）を有している任意の文字列を一致させることです。そのような文法は、[RFC6231]に記載されているように、いずれかの要求自体にインラインで提供または「SRC」属性によって外部参照されてもよいです。例のシナリオでは、インラインそれを置くだろうが、同じ文書への外部参照がまったく同じ結果を達成するであろう。"
    },
    {
      "indent": 3,
      "text": "Figure 46 shows how the AS might request the recurring collection for a UAC. As before, the example assumes that the UAC is already a participant in the conference.",
      "ja": "図46は、ASは、UACのための定期的なコレクションを要求する方法を示しています。前と同様に、例では、UACが既に会議の参加者であることを前提としています。"
    },
    {
      "indent": 1,
      "text": "UAC                  AS                                     MS\n |                   |                                      |\n |                   | A1. CONTROL (recurring collection)   |\n |                   |++++++++++++++++++++++++++++++++++++>>|\n |                   |                                      |--+ start\n |                   |                                      |  | the\n |                   |                           A2. 200 OK |<-+ dialog\n |                   |<<++++++++++++++++++++++++++++++++++++|\n |                   |                                      |\n |########################################################>>|\n |          Recurring DTMF digit collection starts          |--+ get\n |########################################################>>|  | DTMF\n |                   |                                      |<-+ digits\n |                   |            B1. CONTROL (dtmfinfo=*1) |\n |                   |<<++++++++++++++++++++++++++++++++++++|\n |                   | B2. 200 OK                           |--+ get\n |                   |++++++++++++++++++++++++++++++++++++>>|  | DTMF\n |                   |                                      |<-+ digits\n |                   | C1. CONTROL (modifyjoin UAC1-->conf) |\n |                   |++++++++++++++++++++++++++++++++++++>>|\n |                   |                                      |--+ modify\n |                   |                                      |  | UAC\n |                   |                           C2. 200 OK |<-+ volume\n |                   |<<++++++++++++++++++++++++++++++++++++|\n |                   |                                      |\n |########################################################>>|\n |          Volume of UAC in conference is lowered          |\n |########################################################>>|\n |                   |                                      |\n |                   |            D1. CONTROL (dtmfinfo=*9) |\n |                   |<<++++++++++++++++++++++++++++++++++++|\n |                   | D2. 200 OK                           |--+ get\n |                   |++++++++++++++++++++++++++++++++++++>>|  | DTMF\n |                   |                                      |<-+ digits\n |                   | E1. CONTROL (modifyjoin UAC1<--conf) |\n |                   |++++++++++++++++++++++++++++++++++++>>|\n |                   |                                      |--+ modify\n |                   |                                      |  | conf\n |                   |                           E2. 200 OK |<-+ volume\n |                   |<<++++++++++++++++++++++++++++++++++++|\n |                   |                                      |\n |<<########################################################|\n |  Now UAC can hear the conference mix at a higher volume  |\n |<<########################################################|",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|                   |                                      |\n|                   |            F1. CONTROL (dtmfinfo=*6) |\n|                   |<<++++++++++++++++++++++++++++++++++++|\n|                   | F2. 200 OK                           |--+ get\n|                   |++++++++++++++++++++++++++++++++++++>>|  | DTMF\n|                   |                                      |<-+ digits\n|                   | G1. CONTROL (modifyjoin UAC1-->conf) |\n|                   |++++++++++++++++++++++++++++++++++++>>|\n|                   |                                      |--+ mute\n|                   |                                      |  | UAC in\n|                   |                           G2. 200 OK |<-+ conf\n|                   |<<++++++++++++++++++++++++++++++++++++|\n|                   |                                      |\n|########################################################>>|\n|             UAC is now muted in the conference           |\n|########################################################>>|\n|                   |                                      |\n|                   |            H1. CONTROL (dtmfinfo=*0) |\n|                   |<<++++++++++++++++++++++++++++++++++++|\n|                   | H2. 200 OK                           |--+ get\n|                   |++++++++++++++++++++++++++++++++++++>>|  | DTMF\n|                   |                                      |<-+ digits\n|                   | I1. CONTROL (destroy DTMF dialog)    |\n|                   |++++++++++++++++++++++++++++++++++++>>|\n|                   |                                      |--+ delete\n|                   |                                      |  | the\n|                   |                           I2. 200 OK |<-+ dialog\n|                   |<<++++++++++++++++++++++++++++++++++++|    (DTMF\n|                   |                                      |collection\n|                   |                                      |    stops)\n|                   |             J1. CONTROL (dialogexit) |\n|                   |<<++++++++++++++++++++++++++++++++++++|\n|                   | J2. 200 OK                           |\n|                   |++++++++++++++++++++++++++++++++++++>>|\n|                   |                                      |\n|########################################################>>|\n|           No more tones from UAC are collected           |\n|########################################################>>|\n|                   |                                      |\n|                   | K1. CONTROL (unjoin UAC1<-X->conf)   |\n|                   |++++++++++++++++++++++++++++++++++++>>|\n|                   |                                      |--+ unjoin\n|                   |                                      |  | UAC &\n|                   |                           K2. 200 OK |<-+ conf\n|                   |<<++++++++++++++++++++++++++++++++++++|\n|                   |                                      |\n|                   |          L1. CONTROL (unjoin-notify) |\n|                   |<<++++++++++++++++++++++++++++++++++++|",
      "raw": true
    },
    {
      "indent": 2,
      "text": "|                   | L2. 200 OK                           |\n|                   |++++++++++++++++++++++++++++++++++++>>|\n|                   |                                      |\n.                   .                                      .\n.                   .                                      .",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 46: DTMF-Driven Conference Manipulation:\n            Framework Transactions",
      "raw": true
    },
    {
      "indent": 3,
      "text": "As can be deduced from the sequence diagram above, the AS, in its business logic, correlates the results of different transactions, addressed to different packages, to implement a more complex conferencing scenario. In fact, <dtmfnotify> events are used to take actions according to the functions of the DTMF codes. The framework transaction steps are as follows:",
      "ja": "上記のシーケンス図から推定されるように、ASは、そのビジネスロジックに、異なるトランザクションの結果を相関、より複雑な会議のシナリオを実装するために、異なるパッケージに宛て。実際には、<dtmfnotify>イベントは、DTMFコードの機能に応じた行動をとるために使用されています。次のようなフレームワークのトランザクション手順は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The UAC is already in the conference, and so the AS starts a recurring collect with a grammar to match. This is done by placing a CONTROL request addressed to the IVR package (A1). The operation to implement is a <collect>, and we are only interested in two-digit DTMF strings (maxdigits). The AS is not interested in a DTMF terminator (termchar is set to a non-conventional DTMF character), and the DTMF escape key is set to '#' (the default is '*', which would conflict with the code syntax for the conference and so needs to be changed). A custom SRGS grammar is provided inline (<grammar> with mode=dtmf). The whole dialog is to be repeated indefinitely (dialog has repeatCount=0), and the AS wants to be notified when matching collections occur (dtmfsub with matchmode=collect).",
      "ja": "O UACは、会議に既にある、とそうASが一致する文法を集める経常開始します。これは、IVRパッケージ（A1）に宛てた制御要求を置くことによって行われます。実装するための操作は、<収集>であり、我々は2桁のDTMF文字列（maxdigits）にのみ関心があります。 ASは、（termcharは、非従来型のDTMF文字に設定されている）DTMFターミネータに興味を持っていない、とDTMFエスケープキーはのためのコードの構文と競合する「＃」（デフォルトは「*」である、に設定されています会議などに変更する必要があります）。カスタムSRGS文法は、（モード= DTMFと<文法>）インラインで設けられています。全体のダイアログが（ダイアログがrepeatCountに= 0を持っている）無限に繰り返されるべきである、とASは、一致するコレクションが（=が収集matchmodeとdtmfsub）が発生したときに通知されることを望んでいます。"
    },
    {
      "indent": 3,
      "text": "o The request is handled by the MS (A2) and then successfully started (dialogid=01d1b38). This means that the MS has started collecting DTMF tones from the UAC.",
      "ja": "oを要求（dialogid = 01d1b38）MS（A2）によって処理した後、正常に開始されます。これは、MSがUACからのDTMFトーンを収集を開始したことを意味します。"
    },
    {
      "indent": 3,
      "text": "o The MS collects a matching DTMF string from the UAC (*1). Since the AS subscribed to this kind of event, a CONTROL event notification (dtmfnotify) is triggered by the MS (B1), including the collected tones. Since the dialog is recurring, the MS immediately restarts the collection.",
      "ja": "O MSは、UACからマッチングDTMF文字列を収集する（* 1）。イベントのこの種のAS加入ので、CONTROLイベント通知（dtmfnotify）を回収トーンを含む、MS（B1）によってトリガされます。ダイアログが定期的であるので、MSは、すぐにコレクションを再起動します。"
    },
    {
      "indent": 3,
      "text": "o The AS acks the event (B2) and in its business logic understands that the code '*1' means that the UAC wants its own volume to be lowered in the conference mix. The AS is able to associate the event with the right UAC by referring to the attached dialogid (01d1b38). It then acts accordingly by sending a <modifyjoin> (C1) that does exactly this: the provided <stream> child element instructs the MS to modify the volume of the UAC-->conference audio flow (setgain=-5 dB 'sendonly'). Note that the \"setgain\" value is the absolute volume level. If the user's request is to lower the volume level, the AS must remember the previously set volume level and from it calculate the new volume level. Note how the request also includes directives for the inverse direction. This verbose approach is needed; otherwise, the MS would not only change the volume in the requested direction but would also disable the media flow in the other direction. Having a proper <stream> addressing the UAC<--conf media flow as well ensures that this doesn't happen.",
      "ja": "イベント（B2）ACKおよびそのビジネスロジックであるOコード「* 1」UACは、独自のボリュームは、会議ミックスに低下させることを望んでいることを意味することを理解しています。 ASは、添付dialogid（01d1b38）を参照することにより、右UACとイベントを関連付けることができます。 >会議オーディオ流（setgain = -5デシベル「sendonlyの」 - 提供<ストリーム>子要素は、UACの容積を変更するためにMSに指示：それは次に正確これを行うこと<modifyjoin>（C1）を送信することによって、それに応じて作用します）。 「setgain」値は絶対的な音量レベルであることに留意されたいです。ユーザの要求は、音量レベルを下げることであるならば、ASは以前に設定した音量レベルを覚えていて、そこから新しい音量レベルを計算する必要があります。リクエストはまた、逆方向のためのディレクティブが含まれてどのように注意してください。この冗長なアプローチが必要とされています。そうでない場合、MSは、要求された方向にボリュームを変更しますだけでなく、他の方向にメディアフローを無効にします。適切な<ストリーム>のUAC <対処する - と同様のconfメディアフローは、これが起こらないことを保証します。"
    },
    {
      "indent": 3,
      "text": "o The MS successfully enforces the requested operation (C2), changing the volume.",
      "ja": "O MSが正常にボリュームを変更する、要求された操作（C2）を強制します。"
    },
    {
      "indent": 3,
      "text": "o A new matching DTMF string from the UAC is collected (*9). As before, an event is triggered to the AS (D1).",
      "ja": "O UACから新しいマッチングDTMF文字列が収集される（* 9）。前述のように、イベントは、AS（D1）にトリガされます。"
    },
    {
      "indent": 3,
      "text": "o The AS acks the event (D2) and matches the new code ('*9') with its related operation (raise the volume of the conference mix for the UAC), taking the proper action. A different <modifyjoin> is sent (E1) with the new instructions (setgain=+3 dB 'recvonly'). The same considerations regarding how the incremental operation should be mapped to the command apply here as well. Note also how a <stream> for the inverse direction ('sendonly') is again provided just as a placeholder, which basically instructs the MS that the settings for that direction are not to be changed, maintaining the previous directives of (C1).",
      "ja": "イベント（D2）のACK AS Oと適切な行動を取って、その関連操作で新しいコードを（「* 9」）（UACのための会議ミックスの音量を上げる）と一致します。異なる<modifyjoin>新しい命令（setgain = + 3デシベル 'がrecvonly'）と（E1）が送られます。増分操作はコマンドにマップする方法については、同じ考慮事項がここにも適用されます。注また、どのように逆方向（「sendonlyの」）のための<ストリームが>再びだけ基本的にその方向の設定は、（C1）の前の指令を維持、変更されるべきではないことをMSに指示するプレースホルダとして設けられています。"
    },
    {
      "indent": 3,
      "text": "o The MS successfully enforces this requested operation as well (E2), changing the volume in the specified direction.",
      "ja": "O MSが正常にこれは指定された方向に体積を変化させる、ならびに（E2）操作を要求し強制します。"
    },
    {
      "indent": 3,
      "text": "o At this point, a further matching DTMF string from the UAC is collected (*6) and sent to the AS (F1).",
      "ja": "この時点で、UACからさらにマッチングDTMF文字列が収集され、O（* 6）とAS（F1）に送られます。"
    },
    {
      "indent": 3,
      "text": "o After the required ack (F2), the AS reacts by implementing the action associated with the new code ('*6'), by which the UAC requested that it be muted within the conference. A new <modifyjoin> is sent (G1) with a properly constructed payload (setstate=mute 'sendonly'), and the MS enforces it (G2).",
      "ja": "O必要ACK（F2）の後、ASは、UACは、それが会議内でミュートされていることが要求される新しいコード（「* 6」）に関連付けられたアクションを実施することによって反応します。新しい<modifyjoin>（SETSTATE =ミュート 'sendonlyの'）適切に構成されたペイロードと（G1）を送信し、MSは、（G2）施行されます。"
    },
    {
      "indent": 3,
      "text": "o A last (in this scenario) matching DTMF string is collected by the MS (*0). As with all the previous codes, notification of this string is sent to the AS (H1).",
      "ja": "最後O（このシナリオで）一致DTMF文字列はMS（* 0）によって収集されます。以前のすべてのコードと同様に、この文字列の通知をAS（H1）に送られます。"
    },
    {
      "indent": 3,
      "text": "o The AS acks the event (H2) and understands that the UAC wants to leave the conference now (since the code is *0). This means that a series of actions must be taken:",
      "ja": "イベント（H2）のACK AS OとUACは（コードがあるので、0 *）今会議を残すために望んでいることを理解しています。これは、一連のアクションを取る必要があることを意味します。"
    },
    {
      "indent": 6,
      "text": "* The recurring collection is stopped, since it's no longer needed.",
      "ja": "それが不要になっていますので、*定期的なコレクションは、停止しています。"
    },
    {
      "indent": 6,
      "text": "* The UAC is unjoined from the conference it is in.",
      "ja": "* UACはそれがである会議から未接合です。"
    },
    {
      "indent": 6,
      "text": "* Additional operations might be considered, e.g., a global announcement stating that the UAC is leaving, but for the sake of conciseness such operations are not listed here.",
      "ja": "*追加の操作は、例えば、グローバルな発表はUACを残していることを示す、と考えるかもしれませんが、簡潔な操作のためにここにリストされていません。"
    },
    {
      "indent": 6,
      "text": "The former is accomplished by means of a <dialogterminate> request (I1) to the IVR package (dialogid=01d1b38) and the latter by means of an <unjoin> request (K1) to the Mixer package.",
      "ja": "前者は、ミキサーパッケージに<退会>要求（K1）によってIVRパッケージ（dialogid = 01d1b38）、後者を<dialogterminate>要求（I1）によって達成されます。"
    },
    {
      "indent": 3,
      "text": "o The <dialogterminate> request is handled by the MS (I2), and the dialog is terminated successfully. As soon as the dialog has actually been terminated, a <dialogexit> event is triggered as well to the AS (J1). This event has no report of the result of the last iteration (since the dialog was terminated abruptly with an immediate=true) and is acked by the AS (J2) to finally complete the dialog lifetime.",
      "ja": "O <dialogterminate>要求はMS（I2）によって処理され、そしてダイアログが正常に終了します。ダイアログが実際に終了しているとすぐに、<dialogexit>イベントは、AS（J1）にも同様にトリガされます。このイベントは、（ダイアログが即時=真で突然終了したので）、最後にダイアログ寿命を完了するために、AS（J2）によってACKされ、最後の反復の結果は報告がありません。"
    },
    {
      "indent": 3,
      "text": "o The <unjoin> request is immediately enforced (K2). As a consequence of the unjoin operation, an <unjoin-notify> event notification is triggered by the MS (L1) to confirm to the AS that the requested entities are no longer attached to each other. The status in the event is set to 0, which, as stated in the specification, means that the join has been terminated by an <unjoin> request. The ack from the AS (L2) concludes this scenario.",
      "ja": "O <退会>要求を直ちに（K2）を適用します。退会操作の結果として、<退会-通知>イベント通知が要求されたエンティティが、もはやお互いに結合していることをASに確認しないことMS（L1）によってトリガされます。イベント内の状態は、本明細書で述べたように、ザが<退会>要求によって終了された参加ことを意味し、0に設定されています。 AS（L2）からのA​​CKは、このシナリオを終えます。"
    },
    {
      "indent": 0,
      "text": "A1. AS -> MS (CFW CONTROL, recurring collect with grammar)\n----------------------------------------------------------\n   CFW 238e1f2946e8 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 809",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"14849028:37fc2523\"> <dialog repeatCount=\"0\"> <collect maxdigits=\"2\" termchar=\"A\" escapekey=\"#\"> <grammar> <grammar version=\"1.0\" mode=\"dtmf\" xmlns=\"http://www.w3.org/2001/06/grammar\"> <rule id=\"digit\"> <one-of> <item>0</item> <item>1</item> <item>3</item> <item>6</item> <item>7</item> <item>9</item> </one-of> </rule> <rule id=\"action\" scope=\"public\"> <example>*3</example> <one-of> <item> * <ruleref uri=\"#digit\"/> </item> </one-of> </rule> </grammar> </grammar> </collect> </dialog> <subscribe> <dtmfsub matchmode=\"collect\"/> </subscribe> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"14849028：37fc2523\"> <ダイアログのrepeatCount = \"0\"> <= \"2\" をmaxdigitsを集めますtermchar = \"\" escapekey = \"＃\"> <文法> <文法バージョン= \"1.0\" モード= \"DTMF\" のxmlns = \"http://www.w3.org/2001/06/grammar\"> <ルールID = \"数字\"> <一の>の<item> 0 </商品> <商品> 1 </商品> <商品> 3 </商品> <商品> 6 </商品> <商品> 7 </ item>を<アイテム> 9 </ item>を</ワンの> </ルール> <ルールID = \"アクション\" スコープ= \"パブリック\"> <例> * 3 </例> <一の>の<item> * <ruleref URI = \"＃数字\" /> </ item>の</ワンの> </ルール> </文法> </文法> </収集> </ダイアログ> <購読> <dtmfsub matchmode = \"集めます\" /> </サブスクライブ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "A2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 238e1f2946e8 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 137",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog started\" dialogid=\"01d1b38\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <応答ステータス= \"200\" 理由= \"ダイアログが起動し、\" dialogid = \"01d1b38\" /> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "B1. AS <- MS (CFW CONTROL dtmfnotify event)\n-------------------------------------------\n   CFW 1dd62e043c00 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 180",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"01d1b38\"> <dtmfnotify matchmode=\"collect\" dtmf=\"*1\" timestamp=\"2008-12-17T17:20:53Z\"/> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <イベントdialogid = \"01d1b38\"> <dtmfnotify matchmode = \"集める\" DTMF = \"* 1\" タイムスタンプ= \"2008 -12-17T17：20：53Z \"/> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "B2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 1dd62e043c00 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "C1. AS -> MS (CFW CONTROL, modifyjoin with setgain)\n---------------------------------------------------\n   CFW 0216231b1f16 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 290",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <modifyjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\"> <stream media=\"audio\" direction=\"sendonly\"> <volume controltype=\"setgain\" value=\"-5\"/> </stream> <stream media=\"audio\" direction=\"recvonly\"/> </modifyjoin> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <modifyjoin ID1 = \"873975758：a5105056\" ID2 = \"54b4ab3\"> <ストリームメディア= \"オーディオ\" 方向=」 sendonlyで \"> <ボリュームcontroltype =\" setgain」値= \" -  5\" /> </ストリーム> <ストリームメディア= \"オーディオ\" 方向= \"recvonlyで\" /> </ modifyjoin> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "C2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 0216231b1f16 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join modified\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <レスポンスステータス= \"200\" 理由= \"修飾参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "D1. AS <- MS (CFW CONTROL dtmfnotify event)\n-------------------------------------------\n   CFW 4d674b3e0862 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 180",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"01d1b38\"> <dtmfnotify matchmode=\"collect\" dtmf=\"*9\" timestamp=\"2008-12-17T17:20:57Z\"/> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <イベントdialogid = \"01d1b38\"> <dtmfnotify matchmode = \"集める\" DTMF = \"* 9\" タイムスタンプ= \"2008 -12-17T17：20：57Z \"/> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "D2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 4d674b3e0862 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "E1. AS -> MS (CFW CONTROL, modifyjoin with setgain)\n---------------------------------------------------\n   CFW 140e0f763352 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 292",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <modifyjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\"> <stream media=\"audio\" direction=\"recvonly\"> <volume controltype=\"setgain\" value=\"+3\"/> </stream> <stream media=\"audio\" direction=\"sendonly\"/> </modifyjoin> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <modifyjoin ID1 = \"873975758：a5105056\" ID2 = \"54b4ab3\"> <ストリームメディア= \"オーディオ\" 方向=」 recvonlyで \"> <ボリュームcontroltype =\" setgain」値= \"+ 3\" /> </ストリーム> <ストリームメディア= \"オーディオ\" 方向= \"sendonlyの\" /> </ modifyjoin> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "E2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 140e0f763352 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join modified\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <レスポンスステータス= \"200\" 理由= \"修飾参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "F1. AS <- MS (CFW CONTROL dtmfnotify event)\n-------------------------------------------\n   CFW 478ed6f1775b CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 180",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"01d1b38\"> <dtmfnotify matchmode=\"collect\" dtmf=\"*6\" timestamp=\"2008-12-17T17:21:02Z\"/> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <イベントdialogid = \"01d1b38\"> <dtmfnotify matchmode = \"集める\" DTMF = \"* 6\" タイムスタンプ= \"2008 -12-17T17：21：02Z \"/> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "F2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 478ed6f1775b 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "G1. AS -> MS (CFW CONTROL, modifyjoin with setstate)\n----------------------------------------------------\n   CFW 7fdcc2331bef CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 295",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <modifyjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\"> <stream media=\"audio\" direction=\"sendonly\"> <volume controltype=\"setstate\" value=\"mute\"/> </stream> <stream media=\"audio\" direction=\"recvonly\"/> </modifyjoin> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <modifyjoin ID1 = \"873975758：a5105056\" ID2 = \"54b4ab3\"> <ストリームメディア= \"オーディオ\" 方向=」 sendonlyで \"> <ボリュームcontroltype =\" SETSTATE」値= \"ミュート\" /> </ストリーム> <ストリームメディア= \"オーディオ\" 方向= \"recvonlyで\" /> </ modifyjoin> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "G2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 7fdcc2331bef 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 123",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join modified\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <レスポンスステータス= \"200\" 理由= \"修飾参加\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "H1. AS <- MS (CFW CONTROL dtmfnotify event)\n-------------------------------------------\n   CFW 750b917a5d4a CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 180",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"01d1b38\"> <dtmfnotify matchmode=\"collect\" dtmf=\"*0\" timestamp=\"2008-12-17T17:21:05Z\"/> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <イベントdialogid = \"01d1b38\"> <dtmfnotify matchmode = \"集める\" DTMF = \"* 0\" タイムスタンプ= \"2008 -12-17T17：21：05Z \"/> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "H2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 750b917a5d4a 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "I1. AS -> MS (CFW CONTROL, dialogterminate)\n-------------------------------------------\n   CFW 515f007c5bd0 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 128",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogterminate dialogid=\"01d1b38\" immediate=\"true\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogterminate dialogid = \"01d1b38\" 即時= \"真\" /> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "I2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 515f007c5bd0 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 140",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"200\" reason=\"Dialog terminated\" dialogid=\"01d1b38\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> </ mscivr> <= dialogid = \"01d1b38\" / \"ダイアログが終了し、\" 応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "J1. AS <- MS (CFW CONTROL dialogexit event)\n-------------------------------------------\n   CFW 76adc41122c1 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 155",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <event dialogid=\"01d1b38\"> <dialogexit status=\"0\" reason=\"Dialog terminated\"/> </event> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <イベントdialogid = \"01d1b38\"> <dialogexit状態= \"0\" 理由= \"ダイアログが終了\" /> </イベント> </ mscivr>"
    },
    {
      "indent": 0,
      "text": "J2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 76adc41122c1 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "K1. AS -> MS (CFW CONTROL, unjoin)\n----------------------------------\n   CFW 4e6afb6625e4 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 127",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <unjoin id1=\"873975758:a5105056\" id2=\"54b4ab3\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <退会ID1 = \"873975758：a5105056\" ID2 = \"54b4ab3\" /> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "K2. AS <- MS (CFW 200 OK)\n-------------------------\n   CFW 4e6afb6625e4 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 122",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <response status=\"200\" reason=\"Join removed\"/> </mscmixer>",
      "ja": "</ mscmixer> <mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：：NS mscmixer\"> <= / \"参加削除\" 応答ステータス= \"200\" の理由>"
    },
    {
      "indent": 0,
      "text": "L1. AS <- MS (CFW CONTROL unjoin-notify event)\n----------------------------------------------\n   CFW 577696293504 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 157",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <event> <unjoin-notify status=\"0\" id1=\"873975758:a5105056\" id2=\"54b4ab3\"/> </event> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <イベント> <退会 - 通知ステータスが \"0\" ID1 = \"873975758：a5105056\" ID2 = \"54b4ab3\" / > </イベント> </ mscmixer>"
    },
    {
      "indent": 0,
      "text": "L2. AS -> MS (CFW 200, ACK to 'CONTROL event')\n----------------------------------------------\n   CFW 577696293504 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "7. Media Resource Brokering",
      "section_title": true,
      "ja": "7.メディアリソースブローカ"
    },
    {
      "indent": 3,
      "text": "All the flows presented so far describe the interaction between a single AS and a single MS. This is the simplest topology that can be envisaged in a MEDIACTRL-compliant architecture, but it's not the only topology that is allowed. [RFC5567] presents several possible topologies that potentially involve several AS and several MS as well. To properly allow for such topologies, an additional element called the Media Resource Broker (MRB) has been introduced in the MEDIACTRL architecture. Such an entity, and the protocols needed to interact with it, has been standardized in [RFC6917].",
      "ja": "すべてのフローは、これまでにシングルとしてシングルMSとの間の相互作用を記述し発表しました。これはMEDIACTRL準拠のアーキテクチャで考えることができる最も簡単なトポロジですが、それは許可されているだけでトポロジではありません。 [RFC5567]は、潜在的にいくつかのASと同様に、いくつかのMSを伴ういくつかの可能なトポロジを示します。適切なトポロジーを可能にするために、追加的な要素は、メディアリソースブローカー（MRB）はMEDIACTRLアーキテクチャに導入されていると呼ばれます。このようなエンティティ、およびそれと対話するために必要なプロトコルは、[RFC6917]で標準化されています。"
    },
    {
      "indent": 3,
      "text": "An MRB is basically a locator that is aware of a pool of MS and makes them available to interested AS according to their requirements. For this reason, two different interfaces have been introduced:",
      "ja": "MRBは、基本的にMSのプールを認識しており、その要件に応じてAS興味が使用できるようにしたロケータです。このため、二つの異なるインタフェースが導入されました。"
    },
    {
      "indent": 3,
      "text": "o the Publishing interface (Section 7.1), which allows an MRB to subscribe for notifications at the MS it is handling (e.g., available and occupied resources, current state, etc.).",
      "ja": "MRBは、それが（例えば、利用可能な及び占有リソース、現在の状態など）を処理しているMSに通知をサブスクライブすることを可能にする公開インターフェース（セクション7.1）、O。"
    },
    {
      "indent": 3,
      "text": "o the Consumer interface (Section 7.2), which allows an interested AS to query an MRB for an MS capable of fulfilling its requirements.",
      "ja": "その要件を満たすことが可能なMS用MRBを照会するように興味を可能にする消費者インターフェース（セクション7.2）、O。"
    },
    {
      "indent": 3,
      "text": "The flows in the following sections will present some typical use-case scenarios involving an MRB and the different topologies in which it has been conceived to work.",
      "ja": "以下のセクションの流れは、動作するように考案されたMRBと異なるトポロジを含むいくつかの一般的なユース・ケース・シナリオを提示します。"
    },
    {
      "indent": 3,
      "text": "Additionally, a few considerations on the handling of media dialogs whenever an MRB is involved are presented in Section 7.3.",
      "ja": "また、MRBが関与するたびにメディアダイアログの取り扱いには、いくつかの考慮事項は、7.3節で提示されています。"
    },
    {
      "indent": 0,
      "text": "7.1. Publishing Interface",
      "section_title": true,
      "ja": "7.1. 出版インターフェース"
    },
    {
      "indent": 3,
      "text": "An MRB uses the MS's Publishing interface to acquire relevant information. This Publishing interface, as specified in [RFC6917], is made available as a Control Package for the Media Control Channel Framework. This means that in order to receive information from an MS, an MRB must negotiate a Control Channel as explained in Section 5. This package allows an MRB to either request information in the form of a direct request/answer from an MS or subscribe for events.",
      "ja": "MRBは、関連する情報を取得するためにMSの公開インタフェースを使用しています。この公開インタフェースは、[RFC6917]で指定されるように、メディア制御チャネルフレームワークのための制御パッケージとして利用できるようになります。第5節で説明したようにこれは、このパッケージには、MSから直接要求/答えの形式のいずれかで要求情報にMRBを可能にするか、イベントのためにサブスクライブMSからの情報を受信するためには、MRBは、制御チャネルを交渉しなければならないことを意味します。"
    },
    {
      "indent": 3,
      "text": "Of course, since the MRB is interested in the Publishing interface, the previously mentioned negotiation must be changed in order to take into account the need for the MRB Control Package. The name of this package is 'mrb-publish/1.0', which means that the SYNC might look like the following:",
      "ja": "MRBが公開インタフェースに興味を持っているので、当然のことながら、前述の交渉を考慮にMRB制御パッケージの必要性を取るために変更する必要があります。このパッケージの名前は、SYNCは、次のようになりますことを意味し、「/ 1.0 MRB-公開」です。"
    },
    {
      "indent": 3,
      "text": "1. MRB -> MS (CFW SYNC)\n-----------------------\n   CFW 6b8b4567327b SYNC\n   Dialog-ID: z9hG4bK-4542-1-0\n   Keep-Alive: 100\n   Packages: msc-ivr/1.0,msc-mixer/1.0,mrb-publish/1.0",
      "raw": true
    },
    {
      "indent": 3,
      "text": "2. MRB <- MS (CFW 200)\n----------------------\n   CFW 6b8b4567327b 200\n   Keep-Alive: 100\n   Packages: msc-ivr/1.0,msc-mixer/1.0,mrb-publish/1.0\n   Supported: msc-example-pkg/1.0",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The meaning of this negotiation was presented previously. It is enough to point out that the MRB in this case adds a new item to the 'Packages' it needs support for (mrb-publish/1.0). In this case, the MS supports it, and in fact it is added to the negotiated packages in the reply:",
      "ja": "この交渉の意味は、以前に発表されました。この場合、MRBは、それが（MRB-パブリッシュ/ 1.0）のサポートを必要とする「パッケージ」に新しい項目を追加することを指摘するのに十分です。この場合、MSはそれをサポートしており、実際には返信に交渉されたパッケージに追加されます。"
    },
    {
      "indent": 11,
      "text": "Packages: msc-ivr/1.0,msc-mixer/1.0,mrb-publish/1.0\n                                    ^^^^^^^^^^^^^^^",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The MS as described in Section 5, on the other hand, did not have support for that package, since only 'msc-example-pkg/1.0' was part of the 'Supported' list.",
      "ja": "第5節で説明したように、MSは、他の一方で、唯一「MSC-例-PKG / 1.0」以来、そのパッケージのサポートを持っていなかった「サポート」のリストの一部でした。"
    },
    {
      "indent": 3,
      "text": "Figure 47 presents a ladder diagram of a typical interaction based on the MRB Control Package.",
      "ja": "図47は、MRB制御パッケージに基づいて、典型的な相互作用のラダー図を提示しています。"
    },
    {
      "indent": 9,
      "text": "MRB                                            MS\n |                                              |\n | A1. CONTROL (MRB subscription)               |\n |--------------------------------------------->|\n |                                   A2. 200 OK |\n |<---------------------------------------------|\n |                                              |--+ collect\n |                                              |  | requested\n |                                              |<-+ info\n |               B1. CONTROL (MRB notification) |\n |<---------------------------------------------|\n | B2. 200 OK                                   |\n |--------------------------------------------->|\n |                                              |\n .                                              .\n .                                              .\n |                                              |\n |                                              |--+ collect\n |                                              |  | up-to-date\n |                                              |<-+ info\n |               C1. CONTROL (MRB notification) |\n |<---------------------------------------------|\n | C2. 200 OK                                   |\n |--------------------------------------------->|\n |                                              |\n .                                              .\n .                                              .\n |                                              |\n | D1. CONTROL (Update MRB subscription)        |\n |--------------------------------------------->|\n |                                   D2. 200 OK |\n |<---------------------------------------------|\n |                                              |\n .                                              .\n .                                              .",
      "raw": true
    },
    {
      "indent": 4,
      "text": "Figure 47: Media Resource Brokering: Subscription and Notification",
      "ja": "図47：メディアリソースブローカ：購読と通知"
    },
    {
      "indent": 3,
      "text": "In this example, the MRB subscribes for information at the specified MS, and events are triggered on a regular, negotiated basis. All of these messages flow through the Control Channel, as do all of the messages discussed in this document. The framework transaction steps are as follows:",
      "ja": "この例では、MRBは、指定されたMSに情報を契約、およびイベントは、通常、ネゴシエート基づいてトリガされます。この文書で説明したメッセージのすべてがそうであるように、これらのメッセージのすべては、制御チャネルを介して流れます。次のようなフレームワークのトランザクション手順は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The MRB sends a new CONTROL message (A1) addressed to the MRB package (mrb-publish/1.0); it is a subscription for information (<subscription>), and the MRB is asking to be notified at least every 10 minutes (<minfrequency>) or, if required, every 30 seconds at maximum. The subscription must last 30 minutes (<expires>), after which no additional notifications must be sent.",
      "ja": "MRB oを新しいCONTROLメッセージ（A1）はMRBパッケージ（MRB-パブリッシュ/ 1.0）宛に送信。それは情報のサブスクリプション（<サブスクリプション>）で、MRBが通知されることを求めている少なくとも10分ごとに（<minfrequency>）、または、必要に応じて、最大で30秒ごと。サブスクリプションは、追加の通知が送信されないことが必要になるまで30分（<期限が切れる>）、続く必要があります。"
    },
    {
      "indent": 3,
      "text": "o The MS acknowledges the request (A2) and sends notification of the success of the request in a 200 OK message (<mrbresponse>).",
      "ja": "MS要求（A2）を認識し、200 OKメッセージに要求の成功の通知を送るO（<mrbresponse>）。"
    },
    {
      "indent": 3,
      "text": "o The MS prepares and sends the first notification to the MRB (B1). As has been done with other packages, the notification has been sent as an MS-generated CONTROL message; it is a notification related to the request in the first message, because the 'id' (p0T65U) matches that request. All of the information that the MRB subscribed for is provided in the payload.",
      "ja": "O MSは、準備しMRB（B1）への最初の通知を送信します。他のパッケージで行われているように、通知は、MS-生成された制御メッセージとして送信されてきました。 「ID」（p0T65U）がその要求を一致するためには、最初のメッセージ内の要求に関する通知です。情報のすべてのMRBは、ペイロードで提供されるために加入していること。"
    },
    {
      "indent": 3,
      "text": "o The MRB acknowledges the notification (B2) and uses the retrieved information to update its own information as part of its business logic.",
      "ja": "oをMRB通知（B2）を認識し、そのビジネス・ロジックの一部として、自身の情報を更新するために取得した情報を使用します。"
    },
    {
      "indent": 3,
      "text": "o The previous step (the MRB acknowledges notifications and uses the retrieved information) repeats at the required frequency, with up-to-date information.",
      "ja": "前のステップO（MRBは、通知を認識し、取得した情報を使用して）最新の情報を用いて、必要な頻度で繰り返します。"
    },
    {
      "indent": 3,
      "text": "o After a while, the MRB updates its subscription (D1) to get more frequent updates (minfrequency=1, an update every second at least). The MS accepts the update (D2), although it may adjust the frequency in the reply according to its policies (e.g., a lower rate, such as minfrequency=30). The notifications continue, but at the newer rate; the expiration is also updated accordingly (600 seconds again, since the update refreshes it).",
      "ja": "Oしばらく、MRBがそのサブスクリプション（D1）は、より頻繁に更新を取得するために更新する（minfrequency = 1、更新少なくとも毎秒）。それは（例えばminfrequency = 30として、例えば、低レート、）そのポリシーに従って、応答の周波数を調整することができるものの、MSは、更新（D2）を受け付けます。通知は継続するが、新しいレートで。 （更新はそれを更新しているので、再び600秒）、有効期限もそれに応じて更新されます。"
    },
    {
      "indent": 0,
      "text": "A1. MRB -> MS (CONTROL, publish request)\n----------------------------------------\n   CFW lidc30BZObiC CONTROL\n   Control-Package: mrb-publish/1.0\n   Content-Type: application/mrb-publish+xml\n   Content-Length: 337",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"> <mrbrequest> <subscription action=\"create\" seqnumber=\"1\" id=\"p0T65U\"> <expires>60</expires> <minfrequency>600</minfrequency> <maxfrequency>30</maxfrequency> </subscription> </mrbrequest> </mrbpublish>",
      "ja": "<mrbpublishバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbpublish\"> <mrbrequest> <サブスクリプションアクション= \"作成\" seqnumber = \"1\" ID = \"p0T65U\"> 60 <満了します> </期限切れになる> <minfrequency> 600 </ minfrequency> <maxfrequency> 30 </ maxfrequency> </サブスクリプション> </ mrbrequest> </ mrbpublish>"
    },
    {
      "indent": 0,
      "text": "A2. MRB <- MS (200 to CONTROL, request accepted)\n------------------------------------------------\n   CFW lidc30BZObiC 200\n   Timeout: 10\n   Content-Type: application/mrb-publish+xml\n   Content-Length: 139",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"> <mrbresponse status=\"200\" reason=\"OK: Request accepted\"/> </mrbpublish>",
      "ja": "<mrbpublishバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbpublish\"> <mrbresponse状態= \"200\" 理由= \"OK：受け付けた要求\" /> </ mrbpublish>"
    },
    {
      "indent": 0,
      "text": "B1. MRB <- MS (CONTROL, event notification from MS)\n---------------------------------------------------\n   CFW 03fff52e7b7a CONTROL\n   Control-Package: mrb-publish/1.0\n   Content-Type: application/mrb-publish+xml\n   Content-Length: 4157",
      "raw": true
    },
    {
      "indent": 3,
      "text": "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"> <mrbnotification seqnumber=\"1\" id=\"p0T65U\"> <media-server-id>a1b2c3d4</media-server-id> <supported-packages> <package name=\"msc-ivr/1.0\"/> <package name=\"msc-mixer/1.0\"/> <package name=\"mrb-publish/1.0\"/> <package name=\"msc-example-pkg/1.0\"/> </supported-packages>",
      "ja": "<mrbpublishバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mrbpublish\"> <mrbnotification seqnumber = \"1\" ID = \"p0T65U\"> <メディアサーバID> a1b2c3d4 </、メディアにサーバー-ID> <サポート・パッケージ> <パッケージ名= \"MSC-IVR / 1.0\" /> <パッケージ名= \"MSC-ミキサー/ 1.0\" /> <パッケージ名= \"MRB-パブリッシュ/ 1.0\" /> <パッケージ名前= \"MSC-例-PKG / 1.0\" /> </サポート・パッケージ>"
    },
    {
      "indent": 8,
      "text": "<active-rtp-sessions>\n    <rtp-codec name=\"audio/basic\">\n        <decoding>10</decoding>\n        <encoding>20</encoding>\n    </rtp-codec>\n</active-rtp-sessions>\n<active-mixer-sessions>\n    <active-mix conferenceid=\"7cfgs43\">\n        <rtp-codec name=\"audio/basic\">\n            <decoding>3</decoding>\n            <encoding>3</encoding>\n        </rtp-codec>\n    </active-mix>\n</active-mixer-sessions>\n<non-active-rtp-sessions>\n    <rtp-codec name=\"audio/basic\">\n        <decoding>50</decoding>\n        <encoding>40</encoding>\n    </rtp-codec>\n</non-active-rtp-sessions>\n<non-active-mixer-sessions>\n    <non-active-mix available=\"15\">\n        <rtp-codec name=\"audio/basic\">\n            <decoding>15</decoding>\n            <encoding>15</encoding>\n        </rtp-codec>\n    </non-active-mix>\n</non-active-mixer-sessions>\n<media-server-status>active</media-server-status>\n<supported-codecs>\n    <supported-codec name=\"audio/basic\">\n        <supported-codec-package name=\"msc-ivr/1.0\">\n            <supported-action>encoding</supported-action>\n            <supported-action>decoding</supported-action>\n        </supported-codec-package>\n        <supported-codec-package name=\"msc-mixer/1.0\">\n            <supported-action>encoding</supported-action>\n            <supported-action>decoding</supported-action>\n        </supported-codec-package>\n    </supported-codec>\n</supported-codecs>",
      "raw": true
    },
    {
      "indent": 8,
      "text": "<application-data>TestbedPrototype</application-data> <file-formats> <supported-format name=\"audio/x-wav\"> <supported-file-package> msc-ivr/1.0 </supported-file-package> </supported-format> </file-formats> <max-prepared-duration> <max-time max-time-seconds=\"3600\"> <max-time-package>msc-ivr/1.0</max-time-package> </max-time> </max-prepared-duration> <dtmf-support> <detect> <dtmf-type package=\"msc-ivr/1.0\" name=\"RFC4733\"/> <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"/> </detect> <generate> <dtmf-type package=\"msc-ivr/1.0\" name=\"RFC4733\"/> <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"/> </generate> <passthrough> <dtmf-type package=\"msc-ivr/1.0\" name=\"RFC4733\"/> <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"/> </passthrough> </dtmf-support> <mixing-modes> <audio-mixing-modes> <audio-mixing-mode package=\"msc-ivr/1.0\"> \\ nbest \\ </audio-mixing-mode> </audio-mixing-modes> <video-mixing-modes activespeakermix=\"true\" vas=\"true\"> <video-mixing-mode package=\"msc-mixer/1.0\"> \\ single-view \\ </video-mixing-mode> <video-mixing-mode package=\"msc-mixer/1.0\"> \\ dual-view \\ </video-mixing-mode> <video-mixing-mode package=\"msc-mixer/1.0\"> \\ dual-view-crop \\ </video-mixing-mode> <video-mixing-mode package=\"msc-mixer/1.0\"> \\ dual-view-2x1 \\ </video-mixing-mode>",
      "ja": "<アプリケーションデータ> TestbedPrototype </アプリケーションデータ> <ファイル形式> <サポートされるフォーマット名= \"オーディオ/ X-WAV\"> <サポートされているファイル・パッケージ> MSC-IVR / 1.0 </サポートされているファイルパッケージ> </サポートフォーマット> </ FILE-フォーマット> <MAX-準備-期間> <MAX-時間MAX-時間秒= \"3600\"> <MAX-時間パッケージ> MSC-IVR / 1.0 </ MAX-タイムパッケージ> </最大時> </ MAX-準備-期間> <DTMF-サポート> <検出> <DTMF型パッケージ= \"MSC-IVR / 1.0\" 名前= \"RFC4733\" /> <DTMF型パッケージ= \"MSC-ミキサー/ 1.0\" NAME = \"RFC4733\" /> </検出> <生成> <DTMF型パッケージ= \"MSC-IVR / 1.0\" NAME = \"RFC4733\" /> <DTMF型パッケージ=」 MSC-ミキサー/ 1.0\" 名前= \"RFC4733\" /> </生成> <パススルー> <DTMF型パッケージ= \"MSC-IVR / 1.0\" 名前= \"RFC4733\" /> <DTMF型パッケージ= \"MSC-ミキサー/1.0\" 名前= \"RFC4733\" /> </パススルー> </ DTMF-サポート> <混合-モード> <オーディオ・ミキシング・モード> <オーディオミキシングモードパッケージは= \"MSC-IVR / 1.0\"> \\ nbest \\ </オーディオミキシングモード> </オーディオ・ミキシング・モード> <ビデオ・モードが混合activespeakermix = \"true\" をVAS = \"真\"> <ビデオミキシングモードパッケージ= \"MSC-ミキサー/ 1.0\"> \\シングルV IEW \\ </ビデオミキシングモード> <ビデオミキシングモードパッケージ= \"MSC-ミキサー/ 1.0\">デュアルビュー\\ \\ </ビデオミキシングモード> <ビデオミキシングモードパッケージ= \"MSC-ミキサー/ 1.0 \">デュアルビュー作物\\ \\ </ビデオミキシングモード> <ビデオミキシングモードパッケージ=\" MSC-ミキサー/ 1.0\" >デュアルビュー-2x1の\\ \\ </ビデオミキシングモード>"
    },
    {
      "indent": 8,
      "text": "        <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n             dual-view-2x1-crop \\\n        </video-mixing-mode>\n        <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n             quad-view \\\n        </video-mixing-mode>\n        <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n             multiple-5x1 \\\n        </video-mixing-mode>\n        <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n             multiple-3x3 \\\n        </video-mixing-mode>\n        <video-mixing-mode package=\"msc-mixer/1.0\"> \\\n             multiple-4x4 \\\n        </video-mixing-mode>\n    </video-mixing-modes>\n</mixing-modes>\n<supported-tones>\n    <supported-country-codes>\n        <country-code package=\"msc-ivr/1.0\">GB</country-code>\n        <country-code package=\"msc-ivr/1.0\">IT</country-code>\n        <country-code package=\"msc-ivr/1.0\">US</country-code>\n    </supported-country-codes>\n    <supported-h248-codes>\n        <h248-code package=\"msc-ivr/1.0\">cg/*</h248-code>\n        <h248-code package=\"msc-ivr/1.0\">biztn/ofque</h248-code>\n        <h248-code package=\"msc-ivr/1.0\">biztn/erwt</h248-code>\n        <h248-code package=\"msc-mixer/1.0\">conftn/*</h248-code>\n    </supported-h248-codes>\n</supported-tones>\n<file-transfer-modes>\n    <file-transfer-mode package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n</file-transfer-modes>\n<asr-tts-support>\n    <asr-support>\n        <language xml:lang=\"en\"/>\n    </asr-support>\n    <tts-support>\n        <language xml:lang=\"en\"/>\n    </tts-support>\n</asr-tts-support>\n<vxml-support>\n    <vxml-mode package=\"msc-ivr/1.0\" support=\"rfc6231\"/>\n</vxml-support>",
      "raw": true
    },
    {
      "indent": 3,
      "text": " <media-server-location> <civicAddress xml:lang=\"it\"> <country>IT</country> <A1>Campania</A1> <A3>Napoli</A3> <A6>Via Claudio</A6> <HNO>21</HNO> <LMK>University of Napoli Federico II</LMK> <NAM>Dipartimento di Informatica e Sistemistica</NAM> <PC>80210</PC> </civicAddress> </media-server-location> <label>TestbedPrototype-01</label> <media-server-address> sip:MediaServer@ms.example.net </media-server-address> <encryption/> </mrbnotification> </mrbpublish>",
      "ja": "<メディア・サーバのロケーション> <civicAddressのxml：LANG = \"EN\"> <国> EN </国> <A1>カンパニア</ A1> <A3>ナポリ</ A3> <A6>経由クラウディオ</ A6>フェデリコIIの<HNO> 21 </ HNO> <LMK>大学コンピュータサイエンスの</ LMK> <NAM>カテゴリー</ NAM> <PC> 80210 </ PC> </ civicAddress> </メディアサーバ - 場所> <ラベル> TestbedPrototype-01 </ label>は<メディアサーバアドレス> SIP：MediaServer@ms.example.net </メディアサーバアドレス> <暗号化/> </ mrbnotification> </ mrbpublish>"
    },
    {
      "indent": 0,
      "text": "B2. MRB -> MS (200 to CONTROL)\n------------------------------\n   CFW 03fff52e7b7a 200",
      "raw": true
    },
    {
      "indent": 0,
      "text": "(C1 and C2 omitted for brevity)",
      "ja": "（C1とC2は、簡潔にするために省略します）"
    },
    {
      "indent": 0,
      "text": "D1. MRB -> MS (CONTROL, publish request)\n----------------------------------------\nCFW pyu788fc32wa CONTROL\nControl-Package: mrb-publish/1.0\nContent-Type: application/mrb-publish+xml\nContent-Length: 342",
      "raw": true
    },
    {
      "indent": 0,
      "text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"> <mrbrequest> <subscription action=\"update\" seqnumber=\"2\" id=\"p0T65U\"> <expires>600</expires> <minfrequency>1</minfrequency> </subscription> </mrbrequest> </mrbpublish>",
      "ja": "<？xml version = \"1.0\" エンコード= \"UTF-8\" スタンドアロン= \"はい\"？> <mrbpublishバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbpublish\"> <mrbrequest> <サブスクリプション・アクション= \"更新\" seqnumber = \"2\" ID = \"p0T65U\"> 600 </満了する> <minfrequency> 1 </ minfrequency> </サブスクリプション> </ mrbrequest> </ mrbpublish> <満了します>"
    },
    {
      "indent": 0,
      "text": "D2. MRB <- MS (200 to CONTROL, request accepted)\n------------------------------------------------\nCFW pyu788fc32wa 200\nTimeout: 10\nContent-Type: application/mrb-publish+xml\nContent-Length: 332",
      "raw": true
    },
    {
      "indent": 0,
      "text": "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"> <mrbresponse status=\"200\" reason=\"OK: Request accepted\"> <subscription action=\"create\" seqnumber=\"2\" id=\"p0T65U\"> <expires>600</expires> <minfrequency>30</minfrequency> </subscription> </mrbresponse> </mrbpublish>",
      "ja": "<mrbpublishバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbpublish\"> <mrbresponse状態= \"200\" 理由= \"OK：要求受け入れ\"> <サブスクリプションアクション= \"作成\" seqnumber = \"2\" ID = \"p0T65U\"> <満了する> 600 </満了する> <minfrequency> 30 </ minfrequency> </サブスクリプション> </ mrbresponse> </ mrbpublish>"
    },
    {
      "indent": 0,
      "text": "7.2. Consumer Interface",
      "section_title": true,
      "ja": "7.2. 消費者インタフェース"
    },
    {
      "indent": 3,
      "text": "Whereas the Publishing interface is used by an MS to publish its functionality and up-to-date information to an MRB, the Consumer interface is used by an interested AS to access a resource. An AS can use the Consumer interface to contact an MRB and describe the resources it needs. The MRB then replies with the needed information: specifically, the address of an MS that is capable of meeting the requirements.",
      "ja": "公開インタフェースはMRBにその機能と最新情報を公開するためにMSによって使用されるがリソースにアクセスするため、消費者インタフェースは興味が使用しています。 ASはMRBに連絡して、必要なリソースを記述するために消費者のインタフェースを使用することができます。 MRBは、次に必要な情報を返信：具体的には、要件を満たすことが可能であるMSのアドレス。"
    },
    {
      "indent": 3,
      "text": "However, unlike the Publishing interface, the Consumer interface is not specified as a Control Package. Rather, it is conceived as an XML-based protocol that can be transported by means of either HTTP or SIP, as will be shown in the following sections.",
      "ja": "しかし、公開インタフェースとは異なり、消費者インタフェースは、制御パッケージとして指定されていません。むしろ、以下のセクションで示されるように、HTTPまたはSIPによって搬送することができるXMLベースのプロトコルとして考えられます。"
    },
    {
      "indent": 3,
      "text": "As specified in [RFC6917], the Consumer interface can be involved in two topologies: Query mode and Inline mode. In the Query mode (Section 7.2.1), the Consumer requests and responses are conveyed by means of HTTP. Once the AS gets the answer, the usual MEDIACTRL interactions occur between the AS and the MS chosen by the MRB. By contrast, in the Inline mode, the MRB is in the path between the AS and the pool of MS it is handling. In this case, an AS can place Consumer requests using SIP as a transport, by means of a multipart payload (Section 7.2.2) containing the Consumer request itself and an SDP related either to the creation of a Control Channel or to a UAC media dialog. This is called Inline-aware mode, since it assumes that the interested AS knows that an MRB is in place and knows how to talk to it. The MRB is also conceived to work with AS that are unaware of its functionality, i.e., unaware of the Consumer interface. In this kind of scenario, the Inline mode is still used, but with the AS thinking the MRB it is talking to is actually an MS. This approach is called Inline-unaware mode (Section 7.2.3).",
      "ja": "クエリモードとインラインモード：[RFC6917]で指定されているように、消費者インタフェースは、2つのトポロジに関与することができます。クエリモード（7.2.1）では、消費者の要求と応答は、HTTPを用いて搬送されます。 ASは答えを取得したら、通常のMEDIACTRLの相互作用は、ASとMRBによって選ばれたMSとの間で生じます。対照的に、インラインモードでは、MRBは、ASとそれが処理しているMSのプールとの間の経路です。この場合、ASは、消費者の要求自体と制御チャネルの作成またはUAC媒体のいずれかに関連するSDPを含むマルチペイロード（セクション7.2.2）によって、トランスポートとしてSIPを使用して消費者の要求を配置することができダイアログ。それはAS興味がMRBが所定の位置にあり、それに話をする方法を知っていることを知っていることを前提としているのでこれは、インライン対応モードと呼ばれています。 MRBはまた、すなわち、消費者インターフェースを知らないその機能性に気づいていないASで動作するように考えられています。このようなシナリオでは、インラインモードがまだ使用されますが、ASは、それがに話しているMRBを考えると、実際にMSです。このアプローチは、インライン非対応モード（7.2.3）と呼ばれています。"
    },
    {
      "indent": 0,
      "text": "7.2.1. Query Mode",
      "section_title": true,
      "ja": "7.2.1. クエリモード"
    },
    {
      "indent": 3,
      "text": "As discussed in the previous section, in the Query mode the AS sends Consumer requests by means of HTTP. Specifically, an HTTP POST is used to convey the request. The MRB is assumed to send its response by means of an HTTP 200 OK reply. Since a successful Consumer response contains information to contact a specific MS (the MS the MRB has deemed most capable of fulfilling the AS's requirements), an AS can subsequently directly contact the MS, as described in Section 5. This means that in the Query mode the MRB acts purely as a locator, and then the AS and the MS can talk 1:1.",
      "ja": "前のセクションで説明したように、クエリモードでASは、HTTPを介して消費者の要求を送信します。具体的には、HTTPのPOST要求を伝えるために使用されます。 MRBはHTTP 200 OK応答によってその応答を送信するものとします。成功した消費者の反応は、特定のMSに連絡するための情報が含まれているので（MSは、MRBはASの要件を満たすの最も有能とみなさた）、ASは、その後、直接セクション5で説明したようにこれは、クエリモードであることを意味し、MSに連絡することができますMRBは、ロケータとして純粋に機能し、その後、ASとMSは1を話すことができる：1。"
    },
    {
      "indent": 3,
      "text": "Figure 48 presents a ladder diagram of a typical Consumer request in the Query topology:",
      "ja": "図48は、クエリトポロジの典型的な消費者の要求のラダー図を示します。"
    },
    {
      "indent": 5,
      "text": "AS                                             MRB\n |                                              |\n | 1. HTTP POST (Consumer request)              |\n |--------------------------------------------->|\n |                                              |\n |                                              |\n |                                              |--+ Parse request\n |                                              |  | and see if any\n |                                              |<-+ MS applies\n |                                              |\n |                2. 200 OK (Consumer response) |\n |<---------------------------------------------|\n |                                              |\n |--+ Parse response and                        |\n |  | start session (SIP/COMEDIA/CFW)           |\n |<-+ with MS reported by MRB                   |\n |                                              |\n .                                              .\n .                                              .",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 48: Media Resource Brokering: Query Mode",
      "ja": "図48：メディアリソースブローカ：クエリモード"
    },
    {
      "indent": 3,
      "text": "In this example, the AS is interested in an MS meeting a defined set of requirements. The MS must:",
      "ja": "この例では、ASは、MSの会議の要件の定義されたセットに興味があります。 MSは、次の条件を満たす必要があります。"
    },
    {
      "indent": 3,
      "text": "1. support both the IVR and Mixer packages.",
      "section_title": true,
      "ja": "1.サポートIVRの両方とミキサーパッケージ。"
    },
    {
      "indent": 3,
      "text": "2. provide at least 10 G.711 encoding/decoding RTP sessions for IVR purposes.",
      "ja": "2. IVR目的のために、少なくとも10 G.711符号化/復号RTPセッションを提供します。"
    },
    {
      "indent": 3,
      "text": "3. support HTTP-based streaming and support for the audio/x-wav file format in the IVR package.",
      "ja": "IVRパッケージ内のオーディオ/ X-wavファイル形式3.サポートHTTPベースのストリーミングおよびサポート。"
    },
    {
      "indent": 3,
      "text": "These requirements are properly formatted according to the MRB Consumer syntax. The framework transaction steps are as follows:",
      "ja": "これらの要件は、適切にMRBの消費者の構文に従ってフォーマットされています。次のようなフレームワークのトランザクション手順は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o The AS sends an HTTP POST message to the MRB (1). The payload is, of course, the Consumer request, which is reflected by the Content-Type header (application/mrb-consumer+xml). The Consumer request (<mediaResourceRequest>, uniquely identified by its 'id' attribute set to the random value 'n3un93wd'), includes some general requirements (<generalInfo>) and some IVR-specific requirements (<ivrInfo>). The general part of the requests contains the set of required packages (<packages>). The IVR-specific section contains requirements concerning the number of required IVR sessions (<ivr-sessions>), the file formats that are to be supported (<file-formats>), and the required file transfer capabilities (<file-transfer-modes>).",
      "ja": "あるO MRB（1）へのHTTP POSTメッセージを送信します。ペイロードは、もちろん、Content-Typeヘッダ（アプリケーション/ MRBコンシューマ+ XML）によって反射された消費者の要求です。 （一意ランダム値「n3un93wd」に設定された「ID」属性によって識別される<mediaResourceRequest>）消費者の要求は、いくつかの一般的な要件（<generalInfo>）と、いくつかのIVR固有の要件（<ivrInfo>）を含みます。リクエストの一般的な部分は、必要なパッケージ（<パッケージ>）のセットが含まれています。 IVR固有のセクションは、必要なIVRセッションの数（<IVR-セッション>）（<ファイル形式>）がサポートされるファイル形式、および必要なファイル転送機能（<ファイルtransfer-に関する要件が含まれモード>）。"
    },
    {
      "indent": 3,
      "text": "o The MRB gets the request and parses it. Then, according to its business logic, it realizes it can't find a single MS capable of targeting the request and as a consequence picks two MS instances that can handle 60 and 40 of the requested sessions, respectively. It prepares a Consumer response (2) to provide the AS with the requested information. The response (<mediaResourceResponse>, which includes the same 'id' attribute as the request) indicates success (status=200) and includes the relevant information (<response-session-info>). Specifically, the response includes transaction-related information (the same session-id and seq provided by the AS in its request, to allow proper request/ response matching) together with information on the duration of the reservation (expires=3600, i.e., after an hour the request will expire) and the SIP addresses of the chosen MS.",
      "ja": "O MRBは要求を取得し、それを解析します。次いで、そのビジネスロジックに応じて、それは、要求をターゲットにすることが可能な単一のMSを見つけることができない実現し、結果として、それぞれ、要求されたセッションの60および40を取り扱うことができる2つのMSインスタンスを選択します。これは、要求された情報とASを提供するために、消費者の反応（2）を用意します。 （要求と同じ「ID」属性を含む<mediaResourceResponse>）応答が成功（ステータス= 200）を示し、関連する情報を含む（<応答セッション情報>）。具体的には、応答は一緒に予約継続時間に関する情報を（適切な要求/応答のマッチングを可能にするために、その要求にASによって提供される同じセッションID及び配列）取引に関する情報を含む（= 3600、すなわち、後に満了要求が期限切れになる時間）と選択したMSのSIPアドレス。"
    },
    {
      "indent": 3,
      "text": "Note how the sequence number the MRB returned is not 1. According to the MRB specification, this is the starting value to increment for the sequence number to be used in subsequent requests. This means that should the AS want to update or remove the session it should use 10 as a value for the sequence number in the related request. According to Section 12 of [RFC6917], this random value for the first sequence number is also a way to help prevent a malicious entity from messing with or disrupting another AS session with the MRB. In fact, sequence numbers in requests and responses have to match, and failure to provide the correct sequence number would result in session failure and a 405 error message.",
      "ja": "MRBが返されるシーケンス番号はMRBの仕様によれば、これは後続のリクエストで使用されるシーケンス番号をインクリメントするための開始値ではない1れる方法に注意してください。これはつまり、ASは、それが関連する要求内のシーケンス番号の値として10を使用する必要があり、セッションを更新または削除するべきであることを意味します。 [RFC6917]のセクション12によれば、最初のシーケンス番号は、このランダム値もいじりまたはMRBとのセッションとして他を破壊する悪意のあるエンティティを防ぐための方法です。実際には、要求と応答のシーケンス番号が一致する必要があり、正しいシーケンス番号を提供するために、失敗はセッション失敗と405エラーメッセージが表示されます。"
    },
    {
      "indent": 0,
      "text": "1. AS -> MRB (HTTP POST, Consumer request)\n------------------------------------------\n POST /Mrb/Consumer HTTP/1.1\n Content-Length: 893\n Content-Type: application/mrb-consumer+xml\n Host: mrb.example.com:8080\n Connection: Keep-Alive\n User-Agent: Apache-HttpClient/4.0.1 (java 1.5)",
      "raw": true
    },
    {
      "indent": 1,
      "text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"> <mediaResourceRequest id=\"n3un93wd\"> <generalInfo> <packages> <package>msc-ivr/1.0</package> <package>msc-mixer/1.0</package> </packages> </generalInfo> <ivrInfo> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>100</decoding> <encoding>100</encoding> </rtp-codec> </ivr-sessions> <file-formats> <required-format name=\"audio/x-wav\"/> </file-formats> <file-transfer-modes> <file-transfer-mode package=\"msc-ivr/1.0\" name=\"HTTP\"/> </file-transfer-modes> </ivrInfo> </mediaResourceRequest> </mrbconsumer>",
      "ja": "<？xml version = \"1.0\" エンコード= \"UTF-8\" スタンドアロン= \"はい\"？> <mrbconsumerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbconsumer\"> <mediaResourceRequest ID = \"n3un93wd\"> <generalInfo> <パッケージ> <パッケージ> MSC-IVR / 1.0 </パッケージ> <パッケージ> MSC-ミキサー/ 1.0 </パッケージ> </パッケージ> </ generalInfo> <ivrInfo> <IVR-セッション> <RTPコーデック名= \"オーディオ/基本的な\"> <デコード> 100 </復号化> <符号化> 100 </エンコーディング> </ RTPコーデック> </ IVR-セッション> <ファイルフォーマット> <必須フォーマット= \"オーディオ/ X-wavファイル\" /> </ファイル・フォーマット> <ファイル転送モード> <ファイル転送モードパッケージ= \"MSC-IVR / 1.0\" 名= \"HTTP\" という名前を付ける/> </ファイル - 転送モード> </ ivrInfo> </ mediaResourceRequest> </ mrbconsumer>"
    },
    {
      "indent": 0,
      "text": "2. AS <- MRB (200 to POST, Consumer response)\n---------------------------------------------\n HTTP/1.1 200 OK\n X-Powered-By: Servlet/2.5\n Server: Sun GlassFish Communications Server 1.5\n Content-Type: application/mrb-consumer+xml;charset=ISO-8859-1\n Content-Length: 1146\n Date: Thu, 28 Jul 2011 10:34:45 GMT",
      "raw": true
    },
    {
      "indent": 1,
      "text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"> <mediaResourceResponse reason=\"Resource found\" status=\"200\" id=\"n3un93wd\"> <response-session-info> <session-id>z603G3yaUzM8</session-id> <seq>9</seq> <expires>3600</expires> <media-server-address uri=\"sip:MediaServer@ms.example.com:5080\"> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>60</decoding> <encoding>60</encoding> </rtp-codec> </ivr-sessions> </media-server-address> <media-server-address uri=\"sip:OtherMediaServer@pool.example.net:5080\"> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>40</decoding> <encoding>40</encoding> </rtp-codec> </ivr-sessions> </media-server-address> </response-session-info> </mediaResourceResponse> </mrbconsumer>",
      "ja": "<？xml version = \"1.0\" エンコード= \"UTF-8\" スタンドアロン= \"はい\"？> <mrbconsumerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbconsumer\"> <mediaResourceResponse理由=ステータス= \"200\" ID = \"n3un93wd\"> <応答セッション情報> <セッションID> z603G3yaUzM8 </セッションID> <配列> 9 </配列が> <> 3600 </有効期限が切れる期限が切れる \"リソースが見つかりました。\" > <メディア・サーバー・アドレスURI = \"SIP：MediaServer@ms.example.com：5080\"> <IVR-セッション> <RTP-コーデック名= \"オーディオ/ベーシック\"> <デコード> 60 </デコード> <エンコーディング> 60 </エンコーディング> </ RTP-コーデック> </ IVR-セッション> </メディアサーバアドレス> <メディア・サーバー・アドレスURI = \"SIP：OtherMediaServer@pool.example.net：5080\"> <IVR -sessions> <RTP-コーデック名= \"オーディオ/ベーシック\"> <デコード> 40 </デコード> <エンコーディング> 40 </エンコーディング> </ RTP-コーデック> </ IVR-セッション> </メディア・サーバのアドレス> </応答セッション情報> </ mediaResourceResponse> </ mrbconsumer>"
    },
    {
      "indent": 3,
      "text": "For the sake of conciseness, the subsequent steps are not presented. They are very trivial, since they basically consist of the AS issuing a COMEDIA negotiation with either of the obtained MS, as already presented in Section 5. The same can be said with respect to attaching UAC media dialogs. In fact, since after the Query the AS<->MS interaction becomes 1:1, UAC media dialogs can be redirected directly to the proper MS using the 3PCC approach, e.g., as shown in Figure 10.",
      "ja": "簡潔にするため、その後の工程が提示されていません。彼らは基本的に得られたMSのいずれかでCOMEDIAネゴシエーションを発行ASから成るので、既に同じセクション5に示すように、それらは、非常に些細であるUACメディアダイアログを取り付けるに対して言うことができます。実際には、クエリとして後ので< - > MS相互作用は1となる。図10に示すように1、UACメディアダイアログは、例えば、3PCCアプローチを使用して適切なMSに直接リダイレクトすることができます。"
    },
    {
      "indent": 0,
      "text": "7.2.2. Inline-Aware Mode",
      "section_title": true,
      "ja": "7.2.2. インラインアウェアモード"
    },
    {
      "indent": 3,
      "text": "Unlike the Query mode, in the Inline-Aware MRB Mode (IAMM) the AS sends Consumer requests by means of SIP. Of course, saying that the transport changes from HTTP to SIP is not as trivial as it seems. In fact, HTTP and SIP behave in very different ways, and this is reflected in the way the Inline-aware mode is conceived.",
      "ja": "照会モードとは異なり、インライン-AwareのMRBモード（IAMM）ASにSIPを用いて消費者の要求を送信します。もちろん、HTTPからSIPへの輸送の変化が、それは思ったほど簡単ではないことを言って。実際には、HTTPとSIPは非常に異なった方法で振る舞い、そしてこれは、インライン対応モードが考案されている方法に反映されています。"
    },
    {
      "indent": 3,
      "text": "An AS willing to issue a Consumer request by means of SIP has to do so by means of an INVITE. As specified in [RFC6917], the payload of the INVITE can't contain only the Consumer request itself. In fact, the Consumer request is assumed to be carried within a SIP transaction. A Consumer session is not strictly associated with the lifetime of any SIP transaction, meaning that Consumer requests belonging to the same session may be transported over different SIP messages; therefore, a hangup on any of these SIP dialogs would not affect a Consumer session.",
      "ja": "SIPによって消費者の要求を発行するAS喜んINVITEによって、そうしなければなりません。 [RFC6917]で指定されるように、INVITEのペイロードは、消費者の要求自体を含めることはできません。実際には、消費者の要求は、SIPトランザクション内で実行されているものとします。消費者のセッションは厳密に同じセッションに属する消費者の要求が異なるSIPメッセージを介して輸送することができることを意味し、任意のSIPトランザクションの寿命に関連付けられていません。そのため、これらのSIPダイアログのいずれかの上のハングアップは、消費者のセッションに影響を与えません。"
    },
    {
      "indent": 3,
      "text": "That said, as documented in [RFC6230], [RFC6917] envisages two kinds of SIP dialogs over which a Consumer request may be sent: a SIP control dialog (a SIP dialog sent by the AS in order to set up a Control Channel) and a UAC media dialog (a SIP dialog sent by the AS in order to attach a UAC to an MS). In both cases, the AS would prepare a multipart/mixed payload to achieve both ends, i.e., receiving a reply to its Consumer request and effectively carrying on the negotiation described in the SDP payload.",
      "ja": "その[RFC6230]に記載されているように、前記、[RFC6917]は消費者の要求を送信することができる上にSIPダイアログの二種類の想定：SIP制御ダイアログ（制御チャネルを設定するために、ASによって送信されたSIPダイアログ）とUACメディアダイアログ（MSにUACを取り付けるためにASによって送信されたSIPダイアログ）。両方の場合において、ASは、その消費者の要求と有効SDPペイロードに記載のネゴシエーションに搬送する応答を受信する、即ち、両端を達成するために、混合/マルチペイロードを準備することになります。"
    },
    {
      "indent": 3,
      "text": "The behaviors in the two cases, which are called the CFW-based approach and the media dialog-based approach, respectively, are only slightly different, but both will be presented to clarify how they could be exploited. To make things clearer for the reader, the same Consumer request as the Consumer request presented in the Query mode will be sent, in order to clarify how the behavior of the involved parties may differ.",
      "ja": "CFWベースのアプローチとメディア・ダイアログベースのアプローチと呼ばれている2例、中の行動は、それぞれ、わずかに異なっているが、両方は、それらが悪用される可能性がありますどのように明確にするために提示されます。読者のために、物事をより明確にするために、クエリモードで提示消費者の要求と同じ消費者の要求は、関係当事者の振る舞いが異なる場合がありますどのように明確にするために、送信されます。"
    },
    {
      "indent": 0,
      "text": "7.2.2.1. Inline-Aware Mode: CFW-Based Approach",
      "section_title": true,
      "ja": "7.2.2.1。インラインアウェアモード：CFWベースのアプローチ"
    },
    {
      "indent": 3,
      "text": "Figure 49 presents a ladder diagram of a typical Consumer request in the CFW-based Inline-aware topology:",
      "ja": "図49は、CFWベースのインライン対応のトポロジでの典型的な消費者の要求のラダー図を示します。"
    },
    {
      "indent": 3,
      "text": "AS                      MRB                          MS\n |                       |                           |\n | 1. INVITE             |                           |\n | (multipart/mixed:     |                           |\n |  application/cfw,     |                           |\n |  application/mrb-consumer+xml)                    |\n |---------------------->|                           |\n |       2. 100 (Trying) |                           |\n |<----------------------|                           |\n |                       |--+ Extract SDP and        |\n |                       |  | MRB payloads; handle   |\n |                       |<-+ Consumer request to    |\n |                       |    pick MS                |\n |                       |                           |",
      "raw": true
    },
    {
      "indent": 4,
      "text": "|                       | 3. INVITE                 |\n|                       | (application/cfw from 1.) |\n|                       |-------------------------->|\n|                       |           4. 100 (Trying) |\n|                       |<--------------------------|\n|                       |                           |--+ Negotiate\n|                       |                           |  | CFW Control\n|                       |                           |<-+ Channel\n|                       |                 5. 200 OK |\n|                       | (application/cfw from MS) |\n|                       |<--------------------------|\n|                       | 6. ACK                    |\n|                       |-------------------------->|\n|        Prepare new +--|                           |\n|       payload with |  |                           |\n|    SDP from MS and +->|                           |\n|     Consumer reply    |                           |\n|                       |                           |\n|             7. 200 OK |                           |\n|     (multipart/mixed: |                           |\n|      application/cfw from MS,                     |\n|      application/mrb-consumer+xml)                |\n|<----------------------|                           |\n| 8. ACK                |                           |\n|---------------------->|                           |\n|                       |                           |\n|--+ Read Consumer      |                           |\n|  | reply and use SDP  |                           |\n|<-+ to create CFW Chn. |                           |\n|                       |                           |\n|                                                   |\n|<<############## TCP CONNECTION #################>>|\n|                                                   |\n| CFW SYNC                                          |\n|++++++++++++++++++++++++++++++++++++++++++++++++++>|\n|                                                   |\n.                       .                           .\n.                       .                           .",
      "raw": true
    },
    {
      "indent": 5,
      "text": "Figure 49: Media Resource Brokering: CFW-Based Inline-Aware Mode",
      "ja": "図49：メディアリソースブローカ：CFWベースのインラインアウェアモード"
    },
    {
      "indent": 3,
      "text": "To make the scenario easier to understand, we assume that the AS is interested in exactly the same set of requirements as those presented in Section 7.2.1. This means that the Consumer request originated by the AS will be the same as before, with only the transport/topology changing.",
      "ja": "理解するシナリオを簡単にするために、我々は、ASは、7.2.1項で提示されたものなどの要件を正確に同じセットに興味があることを前提としています。これは、ASによって発信消費者の要求をのみ、トランスポート/トポロジの変更で、前と同じになることを意味します。"
    },
    {
      "indent": 3,
      "text": "Please note that to make the protocol contents easier to read, a simple 'Part' is used whenever a boundary for a multipart/mixed payload is provided, instead of the actual boundary that would be inserted in the SIP messages.",
      "ja": "multipart / mixedのペイロードの境界が提供されるたびに読みプロトコルの内容を容易にすることに注意してください、簡単な「部分が」の代わりにSIPメッセージに挿入される実際の境界で、使用されています。"
    },
    {
      "indent": 3,
      "text": "The framework transaction steps (for simplicity's sake, only the payloads, and not the complete SIP transactions, are reported) are as follows:",
      "ja": "次のようなフレームワークのトランザクションステップは、（簡単のため、唯一のペイロードではなく、完全なSIPトランザクションは、報告されている）、次のとおりです。"
    },
    {
      "indent": 0,
      "text": "1. AS -> MRB (INVITE multipart/mixed)\n-------------------------------------\n   [..]\n   Content-Type: multipart/mixed;boundary=\"Part\"",
      "raw": true
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/sdp",
      "ja": "--PartのContent-Type：アプリケーション/ SDP"
    },
    {
      "indent": 3,
      "text": "v=0 o=- 2890844526 2890842807 IN IP4 as.example.com s=MediaCtrl c=IN IP4 as.example.com t=0 0 m=application 48035 TCP cfw a=connection:new a=setup:active a=cfw-id:vF0zD4xzUAW9",
      "ja": "V = 0 0 =  -  2890844526 2890842807 IN IP4 as.example.com S = MediaCtrl C = IN IP4 as.example.com T = 0、M =アプリケーション48035 TCPのCFWのA =接続：新A =セットアップ：アクティブA = CFW -id：vF0zD4xzUAW9"
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/mrb-consumer+xml",
      "ja": "--PartのContent-Type：アプリケーション/ MRB-消費者+ xmlの"
    },
    {
      "indent": 3,
      "text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"> <mediaResourceRequest id=\"fr34asx1\"> <generalInfo> <packages> <package>msc-ivr/1.0</package> <package>msc-mixer/1.0</package> </packages> </generalInfo> <ivrInfo> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>100</decoding> <encoding>100</encoding> </rtp-codec> </ivr-sessions>",
      "ja": "<？xml version = \"1.0\" エンコード= \"UTF-8\" スタンドアロン= \"はい\"？> <mrbconsumerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbconsumer\"> <mediaResourceRequest ID = \"fr34asx1\"> <generalInfo> <パッケージ> <パッケージ> MSC-IVR / 1.0 </パッケージ> <パッケージ> MSC-ミキサー/ 1.0 </パッケージ> </パッケージ> </ generalInfo> <ivrInfo> <IVR-セッション> <RTPコーデック名= \"オーディオ/基本的な\"> <デコード> 100 </復号化> <符号化> 100 </エンコーディング> </ RTPコーデック> </ IVR-セッション>"
    },
    {
      "indent": 3,
      "text": " <file-formats> <required-format name=\"audio/x-wav\"/> </file-formats> <file-transfer-modes> <file-transfer-mode package=\"msc-ivr/1.0\" name=\"HTTP\"/> </file-transfer-modes> </ivrInfo> </mediaResourceRequest> </mrbconsumer>",
      "ja": "<ファイルフォーマット> <必要なフォーマット名= \"オーディオ/ X-WAV\" /> </ファイルフォーマット> <ファイル転送モード> <ファイル転送モードパッケージ= \"MSC-IVR / 1.0\" 名前= \"HTTP\" /> </ファイル転送モード> </ ivrInfo> </ mediaResourceRequest> </ mrbconsumer>"
    },
    {
      "indent": 3,
      "text": "--Part",
      "ja": " - 部"
    },
    {
      "indent": 0,
      "text": "3. MRB -> MS (INVITE SDP only)\n------------------------------\n   [..]\n   Content-Type: application/sdp",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=- 2890844526 2890842807 IN IP4 as.example.com s=MediaCtrl c=IN IP4 as.example.com t=0 0 m=application 48035 TCP cfw a=connection:new a=setup:active a=cfw-id:vF0zD4xzUAW9",
      "ja": "V = 0 0 =  -  2890844526 2890842807 IN IP4 as.example.com S = MediaCtrl C = IN IP4 as.example.com T = 0、M =アプリケーション48035 TCPのCFWのA =接続：新A =セットアップ：アクティブA = CFW -id：vF0zD4xzUAW9"
    },
    {
      "indent": 0,
      "text": "5. MRB <- MS (200 OK SDP)\n-------------------------\n   [..]\n   Content-Type: application/sdp",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 2890844526 2890842808 IN IP4 ms.example.net s=MediaCtrl c=IN IP4 ms.example.net t=0 0 m=application 7575 TCP cfw a=connection:new a=setup:passive a=cfw-id:vF0zD4xzUAW9",
      "ja": "V = 0 0 = lminiero 2890844526 2890842808 IN IP4 ms.example.net S = MediaCtrl C = IN IP4 ms.example.net T = 0、M =アプリケーション7575 TCPのCFWのA =接続：新A =セットアップ：受動A = CFW -id：vF0zD4xzUAW9"
    },
    {
      "indent": 0,
      "text": "7. AS <- MRB (200 OK multipart/mixed)\n-------------------------------------\n   [..]\n   Content-Type: multipart/mixed;boundary=\"Part\"",
      "raw": true
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/sdp",
      "ja": "--PartのContent-Type：アプリケーション/ SDP"
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 2890844526 2890842808 IN IP4 ms.example.net s=MediaCtrl c=IN IP4 ms.example.net t=0 0 m=application 7575 TCP cfw a=connection:new a=setup:passive a=cfw-id:vF0zD4xzUAW9",
      "ja": "V = 0 0 = lminiero 2890844526 2890842808 IN IP4 ms.example.net S = MediaCtrl C = IN IP4 ms.example.net T = 0、M =アプリケーション7575 TCPのCFWのA =接続：新A =セットアップ：受動A = CFW -id：vF0zD4xzUAW9"
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/mrb-consumer+xml",
      "ja": "--PartのContent-Type：アプリケーション/ MRB-消費者+ xmlの"
    },
    {
      "indent": 3,
      "text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"> <mediaResourceResponse reason=\"Resource found\" status=\"200\" id=\"fr34asx1\"> <response-session-info> <session-id>z603G3yaUzM8</session-id> <seq>9</seq> <expires>3600</expires> <media-server-address uri=\"sip:MediaServer@ms.example.com:5080\"> <connection-id>32pbdxZ8:KQw677BF</connection-id> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>60</decoding> <encoding>60</encoding> </rtp-codec> </ivr-sessions> </media-server-address>",
      "ja": "<？xml version = \"1.0\" エンコード= \"UTF-8\" スタンドアロン= \"はい\"？> <mrbconsumerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbconsumer\"> <mediaResourceResponse理由=ステータス= \"200\" ID = \"fr34asx1\"> <応答セッション情報> <セッションID> z603G3yaUzM8 </セッションID> <配列> 9 </配列が> <> 3600 </有効期限が切れる期限が切れる \"リソースが見つかりました。\" > <メディア・サーバー・アドレスURI = \"SIP：MediaServer@ms.example.com：5080\"> <接続ID> 32pbdxZ8：KQw677BF </接続-ID> <IVR-セッション> <RTP-コーデック名= \"オーディオ/基本的な \"> <デコード> 60 </復号化> <符号化> 60 </エンコーディング> </ RTPコーデック> </ IVR-セッション> </メディアサーバアドレス>"
    },
    {
      "indent": 3,
      "text": " <media-server-address uri=\"sip:OtherMediaServer@pool.example.net:5080\"> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>40</decoding> <encoding>40</encoding> </rtp-codec> </ivr-sessions> </media-server-address> </response-session-info> </mediaResourceResponse> </mrbconsumer>",
      "ja": "<メディア・サーバー・アドレスURI = \"SIP：OtherMediaServer@pool.example.net：5080\"> <デコード> 40 </デコード> <エンコーディング> <IVR-セッション> <RTP-コーデック名= \"基本的なオーディオ/\"> 40 </エンコーディング> </ RTP-コーデック> </ IVR-セッション> </メディアサーバアドレス> </応答セッション情報> </ mediaResourceResponse> </ mrbconsumer>"
    },
    {
      "indent": 3,
      "text": "--Part",
      "ja": " - 部"
    },
    {
      "indent": 3,
      "text": "The sequence diagram and the dumps effectively show the different approach with respect to the Query mode. The SIP INVITE sent by the AS (1.) includes both a Consumer request (the same as before) and an SDP to negotiate a CFW channel with an MS. The MRB takes care of the request exactly as before (provisioning two MS instances) but with a remarkable difference: first of all, it picks one of the two MS instances on behalf of the AS (negotiating the Control Channel in steps 3 to 6) and only then replies to the AS with both the MS side of the SDP negotiation (with information on how to set up the Control Channel) and the Consumer response itself.",
      "ja": "シーケンス図とダンプを効果的クエリモードに対して異なるアプローチを示しています。 AS（1）によって送信されたINVITE SIPは、消費者の要求（前と同じ）とMSとCFWチャネルを交渉するためにSDPの両方を含みます。まず第一に、それは（3〜6の手順で制御チャネルを交渉）ASに代わって2つのMSのインスタンスのいずれかを選ぶ：MRBはリクエストの面倒を正確に前と同じように（2つのMSインスタンスをプロビジョニング）が、顕著な差でだけにして（制御チャネルを設定する方法についての情報を持つ）SDPネゴシエーションと消費者の反応自体のMS側の両方でASに返信します。"
    },
    {
      "indent": 3,
      "text": "The Consumer response is also slightly different in the first place. In fact, as can be seen in 7., there's an additional element (<connection-id>) that the MRB has added to the message. This element contains the 'connection-id' that the AS and MS would have built out of the 'From' and 'To' tags as explained in Section 6, had the AS contacted the MS directly. Since the MRB has actually done the negotiation on behalf of the AS, without this information the AS and MS would refer to different connectionid attributes to target the same dialog, thus causing the CFW protocol not to behave as expected. This aspect will be more carefully described in the next section (for the media dialog-based approach), since the 'connection-id' attribute is strictly related to media sessions.",
      "ja": "消費者の反応はまた、最初の場所では少し異なります。実際には、7に見られるように、MRBがメッセージに追加した追加の要素（<接続ID>）があります。この要素は、第6節で説明したようにASとMSが「から」と「から」タグの外に建てられたであろう「接続ID」を含んでいる、ASが直接MSに連絡していました。 MRBが実際にASとMSが異なるconnectionidを参照することになり、この情報なしで、ASに代わって交渉を行っているので、これCFWプロトコル期待どおりに動作しない原因を、同じダイアログをターゲットに属性。 「接続ID」属性は、メディアセッションに厳密に関連しているので、この態様は、より慎重に、（メディア・ダイアログ・ベースのアプローチのための）次のセクションで説明します。"
    },
    {
      "indent": 3,
      "text": "As before, for the sake of conciseness the subsequent steps of the previous transaction are quite trivial and therefore are not presented. In fact, as shown in the flow, the SIP negotiation has resulted in both the AS and the chosen MS negotiating a Control Channel. This means that the AS is only left to instantiate the Control Channel and send CFW requests according to its application logic.",
      "ja": "前述のように、簡潔にするために前のトランザクションの後続のステップは非常に些細なため、提示されないです。フローに示すように実際には、SIPネゴシエーションがASおよび制御チャネルを交渉選ばれたMSの両方をもたらしました。これはASのみ制御チャネルをインスタンス化し、そのアプリケーションロジックに従って、CFWのリクエストを送信するために残されていることを意味します。"
    },
    {
      "indent": 3,
      "text": "It is worthwhile to highlight the fact that, as in the Query example, the AS gets the addresses of both of the chosen MS in this example as well, since a Consumer transaction has taken place. This means that, just as in the Query case, any UAC media dialog can be redirected directly to the proper MS using the 3PCC approach, e.g., as shown in Figure 10, rather than again using the MRB as a Proxy/B2BUA. Of course, a separate SIP control dialog would be needed before attempting to use the second MS instance.",
      "ja": "消費者の取引が行われたので、同様のクエリ例のように、ASは、この例で選択されたMSの両方のアドレスを取得する、という事実を強調するために価値があります。これはむしろ、再びプロキシ/ B2BUAとしてMRBを使用するよりも、図10に示すように、単にクエリと同様に、任意のUACメディアダイアログは、例えば、3PCCアプローチを使用して適切なMSに直接リダイレクトすることができる、ということを意味します。もちろん、別のSIP制御ダイアログは、第二のMSのインスタンスを使用する前に必要とされるであろう。"
    },
    {
      "indent": 0,
      "text": "7.2.2.2. Inline-Aware Mode: Media Dialog-Based Approach",
      "section_title": true,
      "ja": "7.2.2.2。インラインアウェアモード：メディアダイアログベースのアプローチ"
    },
    {
      "indent": 3,
      "text": "There's a second way to take advantage of the IAMM mode, i.e., exploiting SIP dialogs related to UAC media dialogs as 'vessels' for Consumer messages. As will be made clearer in the following sequence diagram and protocol dumps, this scenario does not differ much from the scenario presented in Section 7.2.2.1 with respect to the Consumer request/response, but it may be useful to compare these two scenarios and show how they may differ with respect to the management of the media dialog itself and any CFW Control Channel that may be involved.",
      "ja": "すなわち、消費者のメッセージのための「船」としてUACのメディア・ダイアログに関連したSIPダイアログを利用し、IAMMモードを利用する2番目の方法があります。以下のシーケンス図とプロトコル・ダンプに明確に説明するように、このシナリオでは、消費者の要求/応答に対してセクション7.2.2.1に示されたシナリオからあまり変わらないが、これらの2つのシナリオとショーを比較するために有用であり得ます彼らはどのように関与している可能性があるメディアダイアログ自体と任意のCFW制御チャネルの管理に関して異なる場合があります。"
    },
    {
      "indent": 3,
      "text": "Figure 50 presents a ladder diagram of a typical Consumer request in the media dialog-based Inline-aware topology:",
      "ja": "図50は、メディアダイアログベースのインライン対応のトポロジでの典型的な消費者の要求のラダー図を示します。"
    },
    {
      "indent": 3,
      "text": "UAC              AS                     MRB                        MS\n |               |                       |                          |\n | 1. INVITE     |                       |                          |\n | (audio/video) |                       |                          |\n |-------------->|                       |                          |\n | 2. 100 Trying |                       |                          |\n |<--------------|                       |                          |\n |               | 3. INVITE             |                          |\n |               | (multipart/mixed:     |                          |\n |               |  audio/video from 1., |                          |\n |               |  application/mrb-consumer+xml)                   |\n |               |---------------------->|                          |\n |               |       4. 100 (Trying) |                          |\n |               |<----------------------|                          |\n |               |                       |--+ Extract SDP and       |\n |               |                       |  | MRB payloads; handle  |\n |               |                       |<-+ Consumer request to   |\n |               |                       |    pick Media Servers    |\n |               |                       |                          |\n |               |                       | 5. INVITE                |\n |               |                       | (audio/video from 3.)    |\n |               |                       |------------------------->|",
      "raw": true
    },
    {
      "indent": 4,
      "text": "|               |                       |          6. 100 (Trying) |\n|               |                       |<-------------------------|\n|               |                       |                       +--|\n|               |                       |   Handle media dialog |  |\n|               |                       |       (connection-id) +->|\n|               |                       |                          |\n|               |                       |                7. 200 OK |\n|               |                       |    (audio/video from MS) |\n|               |                       |<-------------------------|\n|               |                       | 8. ACK                   |\n|               |                       |------------------------->|\n|               |        Prepare new +--|                          |\n|               |       payload with |  |                          |\n|               |    SDP from MS and +->|                          |\n|               |     Consumer reply    |                          |\n|               |                       |                          |\n|               |             9. 200 OK |                          |\n|               |     (multipart/mixed: |                          |\n|               |      audio/video from MS,                        |\n|               |      application/mrb-consumer+xml)               |\n|               |<----------------------|                          |\n|               | 10. ACK               |                          |\n|               |---------------------->|                          |\n|               |                       |                          |\n|               |--+ Read Consumer      |                          |\n|               |  | reply and send     |                          |\n|               |<-+ SDP back to UAC    |                          |\n|    11. 200 OK |                       |                          |\n|(audio/video from MS)                  |                          |\n|<--------------|                       |                          |\n| 12. ACK       |                       |                          |\n|-------------->|                       |                          |\n|               |                       |                          |\n|<<*************************** RTP ******************************>>|\n|               |                       |                          |\n|               |--+ Negotiate          |                          |\n|               |  | CFW channel        |                          |\n|               |<-+ towards MS         |                          |\n|               |    (if needed)        |                          |\n.               .                       .                          .\n.               .                       .                          .\n|               |                       |                          |\n|               |<<############## TCP CONNECTION ################>>|\n|               |                                                  |",
      "raw": true
    },
    {
      "indent": 4,
      "text": "|               | CFW SYNC                                         |\n|               |+++++++++++++++++++++++++++++++++++++++++++++++++>|\n|               |                                                  |\n.               .                       .                          .\n.               .                       .                          .",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 50: Media Resource Brokering: Media Dialog-Based\n                   Inline-Aware Mode",
      "raw": true
    },
    {
      "indent": 3,
      "text": "To make the scenario easier to understand, we assume that the AS is interested in exactly the same set of requirements as those presented in Section 7.2.1. This means that the Consumer request originated by the AS will be the same as before, with only the transport/topology changing.",
      "ja": "理解するシナリオを簡単にするために、我々は、ASは、7.2.1項で提示されたものなどの要件を正確に同じセットに興味があることを前提としています。これは、ASによって発信消費者の要求をのみ、トランスポート/トポロジの変更で、前と同じになることを意味します。"
    },
    {
      "indent": 3,
      "text": "Again, please note that to make the protocol contents easier to read, a simple 'Part' is used whenever a boundary for a multipart/mixed payload is provided, instead of the actual boundary that would be inserted in the SIP messages.",
      "ja": "ここでも、それが読みプロトコル内容やすくするために注意してください、簡単な「パート」multipart / mixedのペイロードの境界が提供されるたびに代わりにSIPメッセージに挿入される実際の境界で、使用されています。"
    },
    {
      "indent": 3,
      "text": "The framework transaction steps (for simplicity's sake, only the relevant headers and payloads, and not the complete SIP transactions, are reported) are as follows:",
      "ja": "以下のように（簡単のために、唯一の関連ヘッダとペイロードではなく、完全なSIPトランザクション、報告されている）フレームワークのトランザクション手順は次のとおりです。"
    },
    {
      "indent": 0,
      "text": "1. UAC -> AS (INVITE with media SDP)\n------------------------------------\n   [..]\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n   To: <sip:mediactrlDemo@as.example.com>\n   [..]\n   Content-Type: application/sdp",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654321 IN IP4 203.0.113.2 s=A conversation c=IN IP4 203.0.113.2 t=0 0 m=audio 7078 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000/1 a=rtpmap:3 GSM/8000/1 a=rtpmap:8 PCMA/8000/1 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-11 m=video 9078 RTP/AVP 98",
      "ja": "V = 0 0 = lminiero 123456 654321 IP4 IN 203.0.113.2 S =会話C = IP4 IN 203.0.113.2 T = 0、M =オーディオ7078 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 1分の8000 = rtpmap：3 GSM / 8000/1（a）= rtpmap：8 PCMA / 8000/1（a）= rtpmap：101電話イベント/ 8000 =のfmtp：101 0〜11メートル=映像9078 RTP / AVP 98"
    },
    {
      "indent": 0,
      "text": "3. AS -> MRB (INVITE multipart/mixed)\n-------------------------------------\n   [..]\n   From: <sip:ApplicationServer@as.example.com>;tag=fd4fush5\n   To: <sip:Mrb@mrb.example.org>\n   [..]\n   Content-Type: multipart/mixed;boundary=\"Part\"",
      "raw": true
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/sdp",
      "ja": "--PartのContent-Type：アプリケーション/ SDP"
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654321 IN IP4 203.0.113.2 s=A conversation c=IN IP4 203.0.113.2 t=0 0 m=audio 7078 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000/1 a=rtpmap:3 GSM/8000/1 a=rtpmap:8 PCMA/8000/1 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-11 m=video 9078 RTP/AVP 98",
      "ja": "V = 0 0 = lminiero 123456 654321 IP4 IN 203.0.113.2 S =会話C = IP4 IN 203.0.113.2 T = 0、M =オーディオ7078 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 1分の8000 = rtpmap：3 GSM / 8000/1（a）= rtpmap：8 PCMA / 8000/1（a）= rtpmap：101電話イベント/ 8000 =のfmtp：101 0〜11メートル=映像9078 RTP / AVP 98"
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/mrb-consumer+xml",
      "ja": "--PartのContent-Type：アプリケーション/ MRB-消費者+ xmlの"
    },
    {
      "indent": 3,
      "text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"> <mediaResourceRequest id=\"bnv3xc45\"> <generalInfo> <packages> <package>msc-ivr/1.0</package> <package>msc-mixer/1.0</package> </packages> </generalInfo> <ivrInfo> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>100</decoding> <encoding>100</encoding> </rtp-codec> </ivr-sessions> <file-formats> <required-format name=\"audio/x-wav\"/> </file-formats>",
      "ja": "<？xml version = \"1.0\" エンコード= \"UTF-8\" スタンドアロン= \"はい\"？> <mrbconsumerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbconsumer\"> <mediaResourceRequest ID = \"bnv3xc45\"> <generalInfo> <パッケージ> <パッケージ> MSC-IVR / 1.0 </パッケージ> <パッケージ> MSC-ミキサー/ 1.0 </パッケージ> </パッケージ> </ generalInfo> <ivrInfo> <IVR-セッション> <RTPコーデック名= \"オーディオ/基本的な\"> <デコード> 100 </復号化> <符号化> 100 </エンコーディング> </ RTPコーデック> </ IVR-セッション> <ファイルフォーマット> <必須フォーマット名前= \"オーディオ/ X-wavファイル\" /> </ファイル形式>"
    },
    {
      "indent": 3,
      "text": " <file-transfer-modes> <file-transfer-mode package=\"msc-ivr/1.0\" name=\"HTTP\"/> </file-transfer-modes> </ivrInfo> </mediaResourceRequest> </mrbconsumer>",
      "ja": "<ファイル転送モード> <ファイル転送モードパッケージ= \"MSC-IVR / 1.0\" 名= \"HTTP\" /> </ファイル転送モード> </ ivrInfo> </ mediaResourceRequest> </ mrbconsumer>"
    },
    {
      "indent": 3,
      "text": "--Part",
      "ja": " - 部"
    },
    {
      "indent": 0,
      "text": "5. MRB -> MS (INVITE SDP only)\n------------------------------\n   [..]\n   From: <sip:Mrb@mrb.example.org:5060>;tag=32pbdxZ8\n   To: <sip:MediaServer@ms.example.com:5080>\n   [..]\n   Content-Type: application/sdp",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654321 IN IP4 203.0.113.2 s=A conversation c=IN IP4 203.0.113.2 t=0 0 m=audio 7078 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000/1 a=rtpmap:3 GSM/8000/1 a=rtpmap:8 PCMA/8000/1 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-11 m=video 9078 RTP/AVP 98",
      "ja": "V = 0 0 = lminiero 123456 654321 IP4 IN 203.0.113.2 S =会話C = IP4 IN 203.0.113.2 T = 0、M =オーディオ7078 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 1分の8000 = rtpmap：3 GSM / 8000/1（a）= rtpmap：8 PCMA / 8000/1（a）= rtpmap：101電話イベント/ 8000 =のfmtp：101 0〜11メートル=映像9078 RTP / AVP 98"
    },
    {
      "indent": 0,
      "text": "7. MRB <- MS (200 OK SDP)\n-------------------------\n   [..]\n   From: <sip:Mrb@mrb.example.org:5060>;tag=32pbdxZ8\n   To: <sip:MediaServer@ms.example.com:5080>;tag=KQw677BF\n   [..]\n   Content-Type: application/sdp",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654322 IN IP4 203.0.113.1 s=MediaCtrl c=IN IP4 203.0.113.1 t=0 0 m=audio 63442 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000 a=rtpmap:3 GSM/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15 a=ptime:20 a=label:7eda834 m=video 33468 RTP/AVP 98 a=rtpmap:98 H263-1998/90000 a=fmtp:98 CIF=2 a=label:0132ca2",
      "ja": "V = 0 0 = lminiero 123456 IP4 203.0.113.1 T IN IP4 203.0.113.1 S = MediaCtrl C = IN 654322 = 0、M =オーディオ63442 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 8000 = rtpmap： 3 GSM / 8000 = rtpmap：8 PCMA / 8000 = rtpmap：101電話イベント/ 8000 =のfmtp：101 0-15 = PTIME：20、A =ラベル：7eda834 M =ビデオ33468 RTP / AVP 98 = rtpmap：98 H263-1998 / 90000 =のfmtp：=ラベル98 CIF = 2 A：0132ca2"
    },
    {
      "indent": 0,
      "text": "9. AS <- MRB (200 OK multipart/mixed)\n-------------------------------------\n   [..]\n   From: <sip:ApplicationServer@as.example.com>;tag=fd4fush5\n   To: <sip:Mrb@mrb.example.org>;tag=117652221\n   [..]\n   Content-Type: multipart/mixed;boundary=\"Part\"",
      "raw": true
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/sdp",
      "ja": "--PartのContent-Type：アプリケーション/ SDP"
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654322 IN IP4 203.0.113.1 s=MediaCtrl c=IN IP4 203.0.113.1 t=0 0 m=audio 63442 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000 a=rtpmap:3 GSM/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15 a=ptime:20 a=label:7eda834 m=video 33468 RTP/AVP 98 a=rtpmap:98 H263-1998/90000 a=fmtp:98 CIF=2 a=label:0132ca2",
      "ja": "V = 0 0 = lminiero 123456 IP4 203.0.113.1 T IN IP4 203.0.113.1 S = MediaCtrl C = IN 654322 = 0、M =オーディオ63442 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 8000 = rtpmap： 3 GSM / 8000 = rtpmap：8 PCMA / 8000 = rtpmap：101電話イベント/ 8000 =のfmtp：101 0-15 = PTIME：20、A =ラベル：7eda834 M =ビデオ33468 RTP / AVP 98 = rtpmap：98 H263-1998 / 90000 =のfmtp：=ラベル98 CIF = 2 A：0132ca2"
    },
    {
      "indent": 3,
      "text": "--Part Content-Type: application/mrb-consumer+xml",
      "ja": "--PartのContent-Type：アプリケーション/ MRB-消費者+ xmlの"
    },
    {
      "indent": 3,
      "text": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\" > <mediaResourceResponse reason=\"Resource found\" status=\"200\" id=\"bnv3xc45\"> <response-session-info> <session-id>z1skKYZQ3eFu</session-id> <seq>9</seq> <expires>3600</expires> <media-server-address uri=\"sip:MediaServer@ms.example.com:5080\"> <connection-id>32pbdxZ8:KQw677BF</connection-id> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>60</decoding> <encoding>60</encoding> </rtp-codec> </ivr-sessions> </media-server-address> <media-server-address uri=\"sip:OtherMediaServer@pool.example.net:5080\"> <ivr-sessions> <rtp-codec name=\"audio/basic\"> <decoding>40</decoding> <encoding>40</encoding> </rtp-codec> </ivr-sessions> </media-server-address> </response-session-info> </mediaResourceResponse> </mrbconsumer>",
      "ja": "<？xml version = \"1.0\" エンコード= \"UTF-8\" スタンドアロン= \"はい\"？> <mrbconsumerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mrbconsumer\"> <mediaResourceResponse理由=ステータス= \"200\" ID = \"bnv3xc45\"> <応答セッション情報> <セッションID> z1skKYZQ3eFu </セッションID> <配列> 9 </配列が> <> 3600 </有効期限が切れる期限が切れる \"リソースが見つかりました。\" > <メディア・サーバー・アドレスURI = \"SIP：MediaServer@ms.example.com：5080\"> <接続ID> 32pbdxZ8：KQw677BF </接続-ID> <IVR-セッション> <RTP-コーデック名= \"オーディオ/基本的な \"> <デコード> 60 </復号化> <符号化> 60 </エンコーディング> </ RTPコーデック> </ IVR-セッション> </メディアサーバアドレス> <メディアサーバアドレスURI =\" SIP ：OtherMediaServer@pool.example.net：5080 \"> <IVR-セッション> <RTPコーデック名=\" オーディオ/基本的な \"> <デコード> 40 </復号化> <符号化> 40 </エンコーディング> </ RTPコーデック> </ IVR-セッション> </メディアサーバアドレス> </応答セッション情報> </ mediaResourceResponse> </ mrbconsumer>"
    },
    {
      "indent": 3,
      "text": "--Part",
      "ja": " - 部"
    },
    {
      "indent": 0,
      "text": "11. UAC <- AS (200 OK SDP)\n--------------------------\n   [..]\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n   To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n   [..]\n   Content-Type: application/sdp",
      "raw": true
    },
    {
      "indent": 3,
      "text": "v=0 o=lminiero 123456 654322 IN IP4 203.0.113.1 s=MediaCtrl c=IN IP4 203.0.113.1 t=0 0 m=audio 63442 RTP/AVP 0 3 8 101 a=rtpmap:0 PCMU/8000 a=rtpmap:3 GSM/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15 a=ptime:20 a=label:7eda834 m=video 33468 RTP/AVP 98 a=rtpmap:98 H263-1998/90000 a=fmtp:98 CIF=2 a=label:0132ca2",
      "ja": "V = 0 0 = lminiero 123456 IP4 203.0.113.1 T IN IP4 203.0.113.1 S = MediaCtrl C = IN 654322 = 0、M =オーディオ63442 RTP / AVP 0 3 8 101 = rtpmap：0 PCMU / 8000 = rtpmap： 3 GSM / 8000 = rtpmap：8 PCMA / 8000 = rtpmap：101電話イベント/ 8000 =のfmtp：101 0-15 = PTIME：20、A =ラベル：7eda834 M =ビデオ33468 RTP / AVP 98 = rtpmap：98 H263-1998 / 90000 =のfmtp：=ラベル98 CIF = 2 A：0132ca2"
    },
    {
      "indent": 3,
      "text": "The first obvious difference is that the first INVITE (1.) is not originated by the AS itself (the AS was willing to set up a Control Channel in the previous example) but by an authorized UAC (e.g., to take advantage of a media service provided by the AS). As such, the first INVITE only contains an SDP to negotiate an audio and video channel. The AS in its business logic needs to attach this UAC to an MS according to some specific requirements (e.g., the called URI is associated to a specific service) and as such prepares a Consumer request to be sent to the MRB in order to obtain a valid MS for that purpose. As before, the Consumer request is sent together with the SDP to the MRB (3.). The MRB extracts the Consumer payload and takes care of it as usual; it picks two MS instances and attaches the UAC to the first MS instance (5.). Once the MS has successfully negotiated the audio and video streams (7.), the MRB takes note of the 'connection-id' associated with this call (which will be needed afterwards in order to manipulate the audio and video streams for this user) and sends back to the AS both the SDP returned by the MS and the Consumer response (9.). The AS extracts the Consumer response and takes note of both the MS instances it has been given and the connection-id information. It then completes the scenario by sending back to the UAC the SDP returned by the MS (11.).",
      "ja": "最初の明白な違いは、（1）最初はINVITEということですが、それ自体AS（ASは、前の例では制御チャネルを設定して喜んでいた）が、メディアを利用する認可UAC（例えば、によってによって発信されていませんASが提供するサービス）。このように、INVITE最初は、オーディオおよびビデオチャネルを交渉するためにSDPを含んでいます。そのビジネスロジックでASは、いくつかの特定の要件（例えば、URIと呼ばれる特定のサービスに関連している）によるMSに、このUACを添付し、そのようなものが得るために、MRBに送信する消費者の要求を準備してする必要がありますそのための有効なMS。以前のように、消費者の要求がMRBにSDP（3）と一緒に送信されます。 MRBは、消費者のペイロードを抽出し、いつものように、それの世話をします。これは、2つのMSインスタンスをピックアップし、第一MSインスタンス（5）にUACを取り付けます。 MSが正常にオーディオおよびビデオストリーム（7）を交渉した後、MRBは、（このユーザーのオーディオおよびビデオストリームを操作するために、後で必要になります）、この呼び出しに関連付けられている「接続ID」の注意を要しますバックASの両方のMSと消費者の反応（9）によって返されたSDPに送信します。 ASは、消費者の反応を抽出し、それが与えられたMSインスタンスと接続ID情報の両方に留意します。その後、バックUACにMS（11）によって返されるSDPを送信することによってシナリオを完了する。"
    },
    {
      "indent": 3,
      "text": "At this point, the UAC has successfully been attached to an MS. The AS only needs to set up a Control Channel to that MS, if needed. This step may not be required, especially if the Consumer request is an update to an existing session rather than the preparation of a new session. Assuming that a Control Channel towards that MS doesn't exist yet, the AS creates it as usual by sending an INVITE directly to the MS for which it has an address. Once done with that, it can start manipulating the audio and video streams of the UAC. To do so, it refers to the <connection-id> element as reported by the MRB, rather than relying on the <connection-id> element that it is aware of. In fact, the AS is aware of a connection-id value (fd4fush5: 117652221, built out of the messages exchanged with the MRB), while the MS is aware of another (32pbdxZ8:KQw677BF, built out of the",
      "ja": "この時点で、UACが正常にMSに添付されています。 ASは、必要な場合にのみ、そのMSに制御チャネルを設定する必要があります。このステップでは、消費者の要求は、既存のセッションへのアップデートではなく、新しいセッションの作成である場合は特に、必要とされないことがあります。そのMSに向けた制御チャネルがまだ存在しないと仮定すると、ASは、それがアドレスを持っているMSに直接INVITEを送信することによって、いつものようにそれを作成します。それで行われたら、それはUACのオーディオおよびビデオストリームを操作し始めることができます。 MRBによって報告さそのためには、むしろ、それが認識している<接続ID>要素に頼るよりも、<接続ID>要素を指します。実際には、ASが接続-ID値を知っているから構築、KQw677BF：MSが別の（32pbdxZ8を認識しながら、（fd4fush5 117652221、メッセージから構築はMRBと交換しました）"
    },
    {
      "indent": 3,
      "text": "MRB-MS interaction). The right connection-id is of course the one the MS is aware of, and as such the AS refers to that connection-id, which the MRB added to the Consumer response just for that purpose.",
      "ja": "MRB-MSの相互作用）。右の接続IDは、もちろん、MSが認識され、そのようなものとしては、MRBが単にその目的のために消費者の反応に加え、その接続-ID、を指すものです。"
    },
    {
      "indent": 0,
      "text": "7.2.3. Inline-Unaware Mode",
      "section_title": true,
      "ja": "7.2.3. インライン非対応モード"
    },
    {
      "indent": 3,
      "text": "Whereas in the Inline-aware mode the AS knows it is sending an INVITE to an MRB and not to an MS, and acts accordingly (using the multipart/mixed payload to query for an MS able to fulfill its requirements), in the Inline-Unaware MRB Mode (IUMM) the AS does not distinguish an MRB from an MS. This means that an MRB-unaware AS having access to an MRB talks to it as if it were a generic MEDIACTRL MS: i.e., the AS negotiates a Control Channel directly with the MRB and attaches its media dialogs there as well. Of course, since the MRB doesn't provide any MS functionality by itself, it must act as a Proxy/B2BUA between the AS and an MS for both the Control Channel dialog and the media dialogs. According to implementation or deployment choices, simple redirects could also be exploited for that purpose.",
      "ja": "インライン対応モードとは、MSにMRBに招待していない送信され知って、それに応じて作用するのに対しInline-に、（その要件を満たすことができるMSの照会に複合/混合ペイロードを使用して）気付かMRBモード（IUMM）ASは、MSからMRBを区別しません。すなわち、ASは、MRBと直接制御チャネルを交渉し、そこにもそのメディア・ダイアログを添付：これは、一般的なMEDIACTRL MSであるかのようにそれにMRB会談へのアクセス権を持つAS MRBを認識しないことを意味します。 MRBは、それ自体で任意のMSの機能を提供していないので、もちろん、それは制御チャネルダイアログとメディア・ダイアログの両方のためのASとMSの間のプロキシ/ B2BUAとして機能しなければなりません。実装または展開の選択肢によると、簡単なリダイレクトもその目的のために悪用される可能性があります。"
    },
    {
      "indent": 3,
      "text": "The problem is that without any Consumer request being placed by the MRB-unaware AS the MRB can't rely on AS-originated directives to pick one MS rather than another. In fact, the MRB can't know what the AS is looking for. The MRB is then assumed to pick one according to its logic, which is implementation specific.",
      "ja": "問題は、どの消費者の要求せずに別のではなく、1 MSを選択するAS-起源ディレクティブに頼ることができないMRB AS MRB-意識しないで配置されているということです。実際には、MRBは、ASが探しているものを知ることはできません。 MRBは、その後実装固有であり、その論理に応じていずれかを選択するものとします。"
    },
    {
      "indent": 3,
      "text": "Figure 51 presents a ladder diagram of a typical Consumer request in the Inline-unaware topology:",
      "ja": "図51は、インライン非対応トポロジでの典型的な消費者の要求のラダー図を示します。"
    },
    {
      "indent": 3,
      "text": "AS                      MRB                          MS\n |                       |                           |\n | 1. INVITE             |                           |\n | (application/cfw)     |                           |\n |---------------------->|                           |\n |       2. 100 (Trying) |                           |\n |<----------------------|                           |\n |                       |--+ Pick an MS             |\n |                       |  | and redirect           |\n |                       |<-+ INVITE there           |\n |                       |                           |\n |                       | 3. INVITE                 |\n |                       | (application/cfw from 1.) |\n |                       |-------------------------->|\n |                       |           4. 100 (Trying) |\n |                       |<--------------------------|\n |                       |                           |--+ Negotiate\n |                       |                           |  | CFW Control\n |                       |                           |<-+ Channel\n |                       |                 5. 200 OK |\n |                       | (application/cfw from MS) |\n |                       |<--------------------------|\n |                       | 6. ACK                    |\n |                       |-------------------------->|\n |                       |                           |\n |             7. 200 OK |                           |\n |(application/cfw from MS)                          |\n |<----------------------|                           |\n | 8. ACK                |                           |\n |---------------------->|                           |\n |                       |                           |\n |                                                   |\n |<<############## TCP CONNECTION #################>>|\n |                                                   |\n | CFW SYNC                                          |\n |++++++++++++++++++++++++++++++++++++++++++++++++++>|\n |                                                   |\n .                       .                           .\n .                       .                           .",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 51: Media Resource Brokering: Inline-Unaware Mode",
      "ja": "図51：メディアリソースブローカ：インライン非対応モード"
    },
    {
      "indent": 3,
      "text": "As can be seen in the diagram, in this topology the MRB basically acts as a 3PCC between the AS and the chosen MS.",
      "ja": "図から分かるように、このトポロジではMRBは基本的に、選択されたMSとの間の3PCCとして作用します。"
    },
    {
      "indent": 3,
      "text": "The same can be said with respect to attaching UAC media dialogs. The MRB remembers the MS it has chosen for the AS, and for every UAC media dialog the AS tries to attach to the MRB, it makes sure that it is somehow actually redirected to the MS.",
      "ja": "同じことは、UACのメディアダイアログを取り付けるに関して言うことができます。 MRBは、それがASのために選択したMSを覚えて、そしてすべてのUACのメディア・ダイアログのASがMRBに接続しようとすると、それが何らかの形で実際にMSにリダイレクトされていることを確認します。"
    },
    {
      "indent": 3,
      "text": "No content for the presented messages is provided in this section, as in the IUMM mode no Consumer transaction is involved. In this example, a simple [RFC6230] Control Channel negotiation occurs where the MRB acts as an intermediary, that is, picking an MS for the AS according to some logic. In this case, in fact, the AS does not support the MRB specification and so just tries to set up a Control Channel according to its own logic.",
      "ja": "提示したメッセージにはコンテンツが全く消費者取引が関与していないIUMMモードと同様に、このセクションで提供されていません。この例では、単純な[RFC6230]制御チャネルのネゴシエーションは、MRBが仲介として働く場合、それはいくつかのロジックに従ってASのMSをピッキング、ある起こります。この場合、実際には、ASは、MRB仕様をサポートし、これだけの独自のロジックに従って制御チャネルを設定しようとしません。"
    },
    {
      "indent": 3,
      "text": "It is worth pointing out that the MRB may actually enforce its decision about the MS to grant to the AS in different ways. Specifically, the sentence \"redirect the INVITE\" that is used in Figure 51 does not necessarily mean that a SIP 302 message should be used for that purpose. A simple way to achieve this may be provisioning the unaware AS with different URIs, all actually transparently handled by the MRB itself; this would allow the MRB to simply map those URIs to different MS instances. The SIP 'Contact' header may also be used by the MRB in a reply to an INVITE coming from an AS to provide the actual URI on which the chosen MS might be reached. A motivation for such a discussion, and more details on this topic, are provided in Section 7.3.2.",
      "ja": "MRBが実際に異なる方法でASに付与するMSについて、その決定を執行することを指摘する価値があります。具体的には、文は、必ずしもSIP 302メッセージは、その目的のために使用されるべきであることを意味するものではない。図51で使用される「INVITEリダイレクト」。これは別のURIを、実際に透過的にMRB自体によって処理されるすべてのと同じように気づいていないのプロビジョニングをすることができる達成するための簡単な方法。これは、MRBは、単に異なるMSインスタンスにそれらのURIをマッピングできるようになります。 SIP「接触」ヘッダはまた、選択されたMSに到達する可能性がある上に実際のURIを提供するために、ASからのINVITEに対する応答でMRBによって使用されてもよいです。このトピックのような説明のためのモチベーション、そしてより多くの詳細は、7.3.2で提供されています。"
    },
    {
      "indent": 0,
      "text": "7.3. Handling Media Dialogs",
      "section_title": true,
      "ja": "7.3. メディアダイアログの取り扱い"
    },
    {
      "indent": 3,
      "text": "It is worthwhile to briefly address how media dialogs would be managed whenever an MRB is involved in the following scenarios. In fact, the presence of an MRB may introduce an additional complexity compared to the quite straightforward 1:1 AS-MS topology.",
      "ja": "簡単にMRBは次のシナリオに関与している時はいつでも、メディアダイアログが管理される方法に対処する価値があります。 1 AS-MSトポロジ：実際には、MRBの存在は非常に簡単1に比べて、追加の複雑さを導入することができます。"
    },
    {
      "indent": 0,
      "text": "7.3.1. Query and Inline-Aware Mode",
      "section_title": true,
      "ja": "7.3.1. クエリとインラインアウェアモード"
    },
    {
      "indent": 3,
      "text": "Normally, especially in the Query and IAMM case, the MRB would only handle Consumer requests by an AS, and after that the AS and the MS picked by the MRB for a specific request would talk directly to each other by means of SIP. This is made possible by the fact that the AS gets the MS SIP URI in reply to its request. In this case, an AS can simply relay media dialogs associated with that session to the right MS to have them handled accordingly. Of course, in order for this to work it is assumed that the AS creates a Control Channel to a chosen MS before it has any requests to service.",
      "ja": "通常、特にクエリとIAMM場合には、MRBはASによって消費者の要求を処理なり、その後ASとMSは、特定の要求がSIPによって互いに直接話でしょうのためにMRBが選びました。これは、ASは、その要求に対する応答にMS SIP URIを取得しているという事実によって可能になります。この場合、ASは、単に、それらはそれに応じて取り扱わ持って右MSにそのセッションに関連付けられたメディアダイアログを中継することができます。もちろん、これが機能するためには、それは、サービスへの要求を持って前にASが選ばれたMSへの制御チャネルを作成することが想定されます。"
    },
    {
      "indent": 3,
      "text": "An example of such a scenario is presented in Figure 52. Please note that this diagram and subsequent diagrams in this section are simplified with respect to the actual protocol interactions. For instance, the whole SIP transactions are not presented, and only the originating messages are presented in order to clarify the scenario in a simple way.",
      "ja": "そのようなシナリオの例が図52に示されているこのセクションでは、この図と後続の図は、実際のプロトコル相互作用に対して簡略化されていることに注意してください。例えば、全体のSIPトランザクションが提示されていない、とだけ送信されたメッセージは、簡単な方法でシナリオを明確にするために提示されています。"
    },
    {
      "indent": 0,
      "text": "UAC              AS                           MRB                     MS\n |                |                            |                      |\n |                | 1. Consumer request        |                      |\n |                |--------------------------->|                      |\n |                |                            |                      |\n |                |       2. Consumer response |                      |\n |                |<---------------------------|                      |\n |                |                            |                      |\n |                | 3. COMEDIA negotiation to create CFW channel      |\n |                |-------------------------------------------------->|\n |                |                            |                      |\n |                |<<############## CFW CONNECTION #################>>|\n | 4. INVITE xyz  |                            |                      |\n |--------------->|                            |                      |\n |                | 5. Attach UAC to MS (3PCC)                        |\n |                |-------------------------------------------------->|\n |                |                            |                      |\n |<<++++++++++++++++++++++ RTP channels ++++++++++++++++++++++++++++>>|\n |                |                            |                      |\n .                .                            .                      .\n .                .                            .                      .",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 52: Handling Media Dialogs in Query/IAMM",
      "ja": "図52：クエリ/ IAMMでメディアダイアログの取り扱い"
    },
    {
      "indent": 3,
      "text": "As can be deduced from the diagram, the interactions among the components are quite straightforward. The AS knows which MS it has been assigned to (as a consequence of the MRB Consumer request, whether it has been achieved by means of HTTP or SIP), and so it can easily attach any UAC accessing its functionality to the MS itself and manipulate its media connections by using the CFW Control Channel as usual.",
      "ja": "図から推測できるように、コンポーネント間の相互作用は非常に簡単です。 ASは、（それがHTTPまたはSIPによって達成されたかどうか、MRBの消費者要求の結果として）に割り当てられたMS知っており、それは容易MS自身にその機能にアクセスする任意のUACを取り付け、操作することができいつものようにCFW制御チャネルを使用して、そのメディア接続。"
    },
    {
      "indent": 3,
      "text": "In such a scenario, the MRB is only involved as a locator. Once the MRB provides the AS with the URI of the required resource, it doesn't interfere with subsequent interactions unless it wants to perform monitoring (e.g., by exploiting the Publishing information reported by the MS). As a consequence, the scenario basically becomes 1:1 between the AS and the MS again.",
      "ja": "そのようなシナリオでは、MRBは、ロケータとしてのみ関与しています。 MRBが必要なリソースのURIとASを提供したら、それは（MSによって報告された公開情報を利用することによって、例えば）の監視を行いたい場合を除き、それはその後の相互作用を妨害しません。再びASとMSとの間で1：結果として、シナリオは基本的に1になります。"
    },
    {
      "indent": 3,
      "text": "Nevertheless, there are cases when having an MRB in the SIP signaling path as well might be a desired feature, e.g., for more control over the use of the resources. Considering how the Consumer interface has been envisaged, this feature is easily achievable, with no change to the protocol required at all. Specifically, in order to achieve such functionality, the MRB may reply to a Consumer request with a URI for which the MRB is responsible (rather than the MS SIP URI as discussed previously) and map this URI to the actual MS URI in its business logic; this would be transparent to the AS. This way, the AS would interact with the MRB as if it were the MS itself.",
      "ja": "リソースの使用をより細かく制御するために、例えば、所望の特徴かもしれないだけでなくSIPシグナリングパスにMRBを有する場合、それにもかかわらず、場合があります。消費者インタフェースが想定されてきたかを考えると、この機能は、すべての必要なプロトコルを変更せずに、容易に達成可能です。具体的には、このような機能を達成するために、MRBは、（前述したように、むしろMS SIP URIより）MRBが担当するURIと消費者要求に応答することができ、そのビジネスロジックに実際のMS URIこのURIをマッピング;これはASに透明になります。それはMS自身であるかのようにこの方法では、ASは、MRBと対話します。"
    },
    {
      "indent": 3,
      "text": "Figure 53 shows how the scenario would change in this case.",
      "ja": "図53は、シナリオが、この場合にはどのように変化するかを示しています。"
    },
    {
      "indent": 1,
      "text": "UAC              AS                           MRB                    MS\n |                |                            |                      |\n |                | 1. Consumer request        |                      |\n |                |--------------------------->|                      |\n |                |                            |                      |\n |                |       2. Consumer response |                      |\n |                |<---------------------------|                      |\n |                |                            |                      |\n |                | 3. COMEDIA negotiation     |                      |\n |                |--------------------------->|                      |\n |                |                            | 4. COMEDIA neg.      |\n |                |                            |--------------------->|\n |                |                            |                      |\n |                |<<############## CFW CONNECTION #################>>|\n | 5. INVITE xyz  |                            |                      |\n |--------------->|                            |                      |\n |                | 6. Attach UAC to MS (3PCC) |                      |\n |                |--------------------------->|                      |\n |                |                            | 7. Attach UAC (3PCC) |\n |                |                            |--------------------->|\n |                |                            |                      |\n |<<++++++++++++++++++++++ RTP channels ++++++++++++++++++++++++++++>>|\n |                |                            |                      |\n .                .                            .                      .\n .                .                            .                      .",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 53: Handling Media Dialogs in Query/IAMM:\n            MRB in the Signaling Path",
      "raw": true
    },
    {
      "indent": 3,
      "text": "This time, even though the MRB has picked a specific MS after a request from an AS, it replies with another SIP URI, a URI it would reply to itself. The AS would contact that URI in order to negotiate the Control Channel, and the MRB would proxy/forward the request to the actual MS transparently. Eventually, the Control Channel would be instantiated between the AS and the MS. The same happens for UACs handled by the AS; the AS would forward the calls to the URI provided to it, the one handled by the MRB, which would in turn relay the call to the MS in order to have the proper RTP channels created between the UAC and the MS.",
      "ja": "この時間は、MRBがASからの要求の後に特定のMSを取り上げているにもかかわらず、それが別のSIP URI、それ自体に返信することになるURIで応答します。 ASは、制御チャネルを交渉するために、それはURIに接触すると、MRBは、プロキシ/透過実際のMSに要求を転送します。最終的に、制御チャネルは、ASとMSとの間でインスタンス化されるだろう。同じことは、ASによって扱わ求めるUACのために起こります。 ASは、URIに通話を転送します、それを順番にUACとMSとの間で作成された適切なRTPチャネルを持っているために、MSへの呼び出しを中継うMRBで扱うものを、提供します。"
    },
    {
      "indent": 3,
      "text": "This scenario is not very different from the previous scenario, except that the MRB is now on the signaling path for both the SIP control dialog and the SIP media dialogs, allowing it to have more control of the resources (e.g., triggering a BYE if a resource has expired). There are several possible approaches an MRB might take to allocate URIs to map to a requested MS. For example, an MRB might use SIP URI parameters to generate multiple SIP URIs that are unique but that all route to the same host and port, e.g., sip:MrbToMs@mrb.example.com:5080;p=1234567890. Alternatively, the MRB might simply allocate a pool of URIs for which it would be responsible and manage the associations with the requested MS services accordingly.",
      "ja": "このシナリオでは、MRBは、SIP制御ダイアログとSIPメディアダイアログの両方のためのシグナリングパスになっていることを除いて、前のシナリオとは大きく異なるものではない、それはリソース（例えばより多くの制御ができるようになり、場合BYEをトリガリソースは）有効期限が切れています。可能ないくつかありMRBが要求されたMSにマッピングするためにURIを割り当てることがかかる場合がありますアプローチです。例えば、MRBは一意である複数のSIP URIを生成するために、SIP URIパラメータを使用するかもしれないが、同じホストおよびポートへのすべての経路、例えば、SIP：MrbToMs@mrb.example.com：5080; P = 1234567890。また、MRBは、単にそれが責任を負うこと、それに応じて要求されたMSサービスとの関連付けを管理することになるためのURIのプールを割り当てることがあります。"
    },
    {
      "indent": 0,
      "text": "7.3.2. Inline-Unaware Mode",
      "section_title": true,
      "ja": "7.3.2. インライン非対応モード"
    },
    {
      "indent": 3,
      "text": "As mentioned previously, in the IUMM case the AS would interact with the MRB as if it were the MS itself. One might argue that this would make the AS act as it would in the IAMM case. This is not the case, however, since the AS actually provided the MRB with information about the resources it required, leading to the selection of a proper MS, while in the IUMM case the MRB would have to pick an MS with no help from the AS at all.",
      "ja": "前述したように、それはMS自身であるかのように、IUMMの場合のようにはMRBと対話します。一つは、それがIAMMの場合と同じように、これはAS行為になるだろうと主張しているかもしれません。 AS実際IUMMケースにMRBがから助け無しでMSを選択しなければならない一方で、適切なMSの選択につながる、それが必要なリソースに関する情報をMRBを提供するので、これは、しかし、そうではありませんすべてのAS。"
    },
    {
      "indent": 3,
      "text": "That said, the IUMM case is also very interesting with respect to media dialog management. In fact, in the MRB-unaware mode, there would be no Consumer request, and an AS would actually see the MRB as an MS. Unlike the previous scenarios, because there is no AS<->MRB interaction and as such no MS selection process, the MRB would likely be in the signaling path anyway, at least when the AS first shows up. The MRB could either redirect the AS to an MS directly or transparently act as a Proxy/B2BUA and contact an MS (according to implementation-specific policies) on behalf of the unaware AS.",
      "ja": "それは言った、IUMMケースがメディアダイアログ管理に関しても非常に興味深いです。実際には、MRB非対応モードでは、何の消費者の要求はないであろう、そしてASは実際にMSとしてMRBを見るでしょう。 < - > NOとがないため、前のシナリオとは異なり、MRBの相互作用およびそのようなないMSの選択処理として、MRBはおそらくAS最初に現れ、少なくともとき、とにかくシグナリングパスであろう。 MRBが直接MSするリダイレクトまたは透過プロキシ/ B2BUAとして機能し、ASに気付かないの代わりにMS（実装固有のポリシーに従って）に連絡可能性のいずれか。"
    },
    {
      "indent": 3,
      "text": "While apparently not a problem, this raises an issue when the same unaware AS has several sessions with different MS. The AS would only see one \"virtual\" MS (the MRB), and so it would relay all calls there, making it hard for the MRB to understand where these media dialogs should belong: specifically, whether the UAC calling belongs to the AS application logic leading to MS1 or MS2, or somewhere else.",
      "ja": "AS同じ気づいていないが、別のMSとの複数のセッションを持っていたときに明らかに問題ではないが、これは問題を提起します。 ASは、唯一の「仮想」MS（MRB）を見るであろう、そしてそれはそこにすべてのコールを中継だろう、それは難しいこれらのメディアダイアログが属すべきところMRBを理解するために作る：具体的には、UACの呼び出しは、ASのアプリケーションに属しているかどうかどこか別の場所MS1またはMS2につながるロジック、または。"
    },
    {
      "indent": 3,
      "text": "One possible, and very simple, approach to take care of this issue is to always relay the SIP dialogs from the same unaware AS to the same MS, as depicted in Figure 54.",
      "ja": "この問題の世話をするための一つの、可能、かつ非常に単純なアプローチは、図54に示すように、常に、同じMSと同じで気付かないからSIPダイアログを中継することです。"
    },
    {
      "indent": 0,
      "text": "UAC1  UAC2       AS                           MRB                     MS\n |     |          |                            |                      |\n |     |          | 1. COMEDIA negotiation (A) |                      |\n |     |          |--------------------------->|                      |\n |     |          |                            | 2. COMEDIA neg. (A)  |\n |     |          |                            |--------------------->|\n |     |          |                            |                      |\n |     |          |<<############## CFW CONNECTION #################>>|\n |     |          |                            |                      |\n |     |          | 3. COMEDIA negotiation (B) |                      |\n |     |          |--------------------------->|                      |\n |     |          |                            | 4. COMEDIA neg. (B)  |\n |     |          |                            |--------------------->|\n |     |          |                            |                      |\n |     |          |<<############## CFW CONNECTION #################>>|\n | 5. INVITE xyz  |                            |                      |\n |--------------->|                            |                      |\n |     |          | 6. Attach UAC1 to MS (3PCC)|                      |\n |     |          |--------------------------->|                      |\n |     |          |                            | 7. Attach UAC (3PCC) |\n |     |          |                            |--------------------->|\n |     |          |                            |                      |\n |<<++++++++++++++++++++++ RTP channels ++++++++++++++++++++++++++++>>|\n |     |          |                            |                      |\n |     | 8. INVITE|                            |                      |\n |     |    jkl   |                            |                      |\n |     |--------->|                            |                      |\n |     |          | 9. Attach UAC2 to MS (3PCC)|                      |\n |     |          |--------------------------->|                      |\n |     |          |                            | 10. Attach UAC (3PCC)|\n |     |          |                            |--------------------->|\n |     |          |                            |                      |\n |     |<<++++++++++++++++ RTP channels ++++++++++++++++++++++++++++>>|\n |     |          |                            |                      |\n .     .          .                            .                      .\n .     .          .                            .                      .",
      "raw": true
    },
    {
      "indent": 7,
      "text": "Figure 54: Handling Media Dialogs in IUMM: Always the Same MS",
      "ja": "図54：IUMMでメディアダイアログの取り扱い：常に同じMS"
    },
    {
      "indent": 3,
      "text": "In this example, the AS creates two different Control Channel sessions (A and B) to address two different business logic implementations; e.g., the AS SIP URI 'xyz' (associated with CFW session A) may be an IVR pizza-ordering application, while the AS SIP URI 'jkl' (associated with CFW session B) may be associated with a conference room. It's quite clear, then, that if the MRB forwarded the two CFW sessions to two different MS, the handling of UAC media dialogs would prove troublesome, because the MRB would have difficulty figuring out whether UAC1 should be attached to the MS managing CFW session A or the MS managing CFW session B. In this example, forwarding all CFW sessions and UAC media dialogs coming from the same MRB-unaware AS to the same MS would work as expected. The MRB would in fact leave the mapping of media dialogs and CFW sessions up to the AS.",
      "ja": "この例では、ASは、二つの異なるビジネスロジックの実装に対処するために、2つの異なる制御チャネル・セッション（A及びB）を作成します。 （CFWセッションBに関連付けられている）のようなSIP URI「JKL」は会議室に関連付けられてもよいが、例えば、（CFWセッションAに関連付けられている）のようなSIP URI「XYZ」は、IVRピザ注文アプリケーションであってもよいです。これは、MRBは、2つの異なるMSに2つのCFWセッションを転送した場合MRBは困難UAC1はMS管理CFWセッションAに添付する必要があるかどうかを考え出す必要があるため、UACのメディアダイアログの取り扱いは、面倒な証明すること、そして、かなり明確ですまたはMSが期待どおりに動作するのと同じMSと同じでMRB-気づかないから来るすべてのCFWセッションとUACのメディアダイアログを転送し、この例ではCFWセッションBを管理します。 MRBは、実際にはメディア・ダイアログやASまでのCFWセッションのマッピングを残すでしょう。"
    },
    {
      "indent": 3,
      "text": "This approach, while very simple and indeed not very scalable, would actually help take care of the issue. In fact, no matter how many separate Control Channels the AS might have with the MRB/MS (in this example, Control Channel A would be mapped to application xyz and Control Channel B to application jkl), the termination point would still always be the same MS, which would consequently be the destination for all media dialogs as well.",
      "ja": "このアプローチは、非常に簡単で、確かに非常にスケーラブルではないが、実際には問題の世話をするに役立つだろう。実際には、何の問題としては、MRB / MSを持っているかもしれませんどのように多くの個別の制御チャネル（この例では、制御チャネルAがアプリケーションJKLへのアプリケーションのxyzと制御チャネルBにマッピングされないであろう）、終端点は、やはり常にだろうその結果もすべてのメディアダイアログの宛先であろう同じMS、。"
    },
    {
      "indent": 3,
      "text": "To overcome the scalability limitations of such an approach, at least in regard to the MRB being in the SIP signaling path for all calls, a different approach needs to be exploited. In fact, especially in the case of different applications handled by the same unaware AS, it makes sense to try to exploit different MS for that purpose and to correctly track media dialogs being forwarded accordingly. This means that the MRB must find a way to somehow redirect the unaware AS to different MS when it predicts or realizes that a different application logic is involved.",
      "ja": "少なくともMRBは、すべての通話のためのSIPのシグナリングパスにあるに関して、そのようなアプローチのスケーラビリティの限界を克服するために、異なるアプローチが利用される必要があります。実際には、特に同じ気づかないASが取り扱うさまざまなアプリケーションの場合には、その目的のために別のMSを悪用しようとすると、正しくそれに応じて転送されるメディア・ダイアログを追跡するために理にかなっています。これは、予測または別のアプリケーションロジックが関与していることを認識したときにMRBが何らかの形で異なるMSにAS気づかないをリダイレクトする方法を見つけなければならないことを意味します。"
    },
    {
      "indent": 3,
      "text": "To do so, the MRB might use different approaches. One approach would use redirection, e.g., by means of a SIP 302 message in reply to a Control Channel negotiation originated by an unaware AS. Such an approach is depicted in Figure 55.",
      "ja": "そのためには、MRBは異なるアプローチを使用する場合があります。一つのアプローチは気付かASによって発信制御チャネルネゴシエーションに対する応答でSIP 302メッセージにより、例えば、リダイレクションを使用します。そのようなアプローチは、図55に示されています。"
    },
    {
      "indent": 0,
      "text": "UAC1             AS                           MRB                     MS\n |                |                            |                      |\n |                | 1. COMEDIA negotiation     |                      |\n |                |--------------------------->|                      |\n |                |                            |                      |\n |                |          2. 302 Moved (MS) |                      |\n |                |<---------------------------|                      |\n |                |                            |                      |\n |                | 3. COMEDIA negotiation     |                      |\n |                |-------------------------------------------------->|\n |                |                            |                      |\n |                |<<############## CFW CONNECTION #################>>|\n |                |                            |                      |\n | 4. INVITE xyz  |                            |                      |\n |--------------->|                            |                      |\n |                | 5. Attach UAC1 to MS (3PCC)|                      |\n |                |-------------------------------------------------->|\n |                |                            |                      |\n |<<++++++++++++++++++++++ RTP channels ++++++++++++++++++++++++++++>>|\n |                |                            |                      |\n .                .                            .                      .\n .                .                            .                      .",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 55: Handling Media Dialogs in IUMM: Redirection",
      "ja": "図55：IUMMでメディアダイアログの取り扱い：リダイレクション"
    },
    {
      "indent": 3,
      "text": "With this approach, the MRB might redirect the AS to a specific MS whenever a new Control Channel is to be created, and as a consequence the AS would redirect the related calls there. This is similar to the first approach of the Query/IAMM case, with the difference that no Consumer request would be involved. The scenario would again fall back to a 1:1 topology between the AS and the MS, making the interactions quite simple.",
      "ja": "新しい制御チャネルが作成されるたびに、このアプローチでは、MRBは、特定のMSにASリダイレクト可能性があり、結果として、ASがあり、関連のコールをリダイレクトします。これには消費者の要求が関与しないであろう差は、クエリ/ IAMMケースの最初のアプローチに似ています。相互作用は非常に簡単作り、ASとMSとの間に1トポロジ：シナリオが再び1に下落するだろう。"
    },
    {
      "indent": 3,
      "text": "Just as before, the MRB might be interested in being in the signaling path for the SIP dialogs, instead of just acting as a locator. A third potential approach could be implementing the \"virtual\" URIs handled by the MRB, as described in the previous section. Rather than resorting to explicit redirection or always using the same MS, the MRB may redirect new SIP control dialogs to one of its own URIs, using the same approach previously presented in Figure 53. Such an approach, as applied to the IUMM case, is depicted in Figure 56.",
      "ja": "ただ、以前のように、MRBではなく、単にロケータとして作用する、SIPダイアログのシグナリングパスであることに興味があるかもしれません。前のセクションで説明したように、第3の電位のアプローチは、MRBが扱う「仮想」のURIを実装することができます。むしろ明示的なリダイレクトに頼るか、常に同じMSを使用するよりも、MRBはIUMMケースに適用される以前に、図53にそのようなアプローチを提示し、同じアプローチを用いて、それ自身のURIのいずれかに新しいSIP制御ダイアログをリダイレクトしてもよい、です図56に示されています。"
    },
    {
      "indent": 0,
      "text": "UAC1             AS                              MRB                  MS\n |                |                               |                   |\n |                | 1. COMEDIA negotiation (MRB)  |                   |\n |                |------------------------------>|                   |\n |                |                               |                   |\n |                |           2. 302 Moved (MRB') |                   |\n |                |<------------------------------|                   |\n |                |                               |                   |\n |                | 3. COMEDIA negotiation (MRB') |                   |\n |                |------------------------------>|                   |\n |                |                               | 4. COMEDIA neg.   |\n |                |                               |------------------>\n |                |                               |                   |\n |                |<<############## CFW CONNECTION #################>>|\n |                |                               |                   |\n | 5. INVITE xyz  |                               |                   |\n |--------------->|                               |                   |\n |                | 6. Attach UAC1 to MRB' (3PCC) |                   |\n |                |------------------------------>|                   |\n |                |                               | 7 Attach UAC (3PCC)\n |                |                               |------------------>\n |                |                               |                   |\n |<<++++++++++++++++++++++ RTP channels ++++++++++++++++++++++++++++>>|\n |                |                               |                   |\n .                .                               .                   .\n .                .                               .                   .",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Figure 56: Handling Media Dialogs in IUMM: MRB in the Signaling Path",
      "ja": "図56：シグナリングパスにMRB：IUMMでメディアダイアログの取り扱い"
    },
    {
      "indent": 3,
      "text": "It is worth pointing out, though, that in both cases there are scenarios where there could be no assurance that the 302 sent by the MRB would be seen by the AS. In fact, should a proxy be between the AS and the MRB, such a proxy could itself act on the 302. To properly cope with such an issue, the MRB might also use the 'Contact' header in the SIP responses to the INVITE to address the right MS. Although the AS is not required to use the information in such a header to reach the MS, it could be reasonable to exploit it for that purpose, as it would take care of the proxy scenario mentioned above.",
      "ja": "これは、両方のケースでMRBによって送られた302は、ASによって見られるという保証はない可能性のシナリオがあること、しかし、指摘する価値があります。実際には、プロキシは、このようなプロキシ自体は適切な問題に対処するために302に作用する可能性があり、ASおよびMRBの間でなければなりません、MRBもに招待するSIP応答で「コンタクト」ヘッダを使用する場合があります右のMSに取り組みます。 ASは、MSに到達するために、このようなヘッダ内の情報を使用する必要はないが、それは、上述したプロキシ・シナリオの世話をするだろうとして、その目的のためにそれを利用するのが妥当であることができます。"
    },
    {
      "indent": 3,
      "text": "To conclude, there is a further approach an MRB might try to exploit to take care of the IUMM case. Since, as explained before, the issues related to the IUMM case mostly relate to the fact that the MRB is seen as a single MS instance by the AS, a simple way to overcome this might be to make the MRB look like a set of different MS right away; this can be done by simply provisioning the unaware AS with a series of different URIs, all handled by the MRB itself acting as a pool of \"virtual\" MS. This way, the AS may be designed to use different MS for different classes of calls, e.g., for different applications it is managing (two in the example presented in this section), and as such would contact two different provisioned URIs to create two distinct Control Channels towards two different MS. Since both of the URIs would be handled by the MRB, the MRB can use them to determine to which MS each call should be directed. Expanding on Figure 54 by removing the constraint to always use the same MS, this new scenario might look like that depicted in Figure 57.",
      "ja": "結論するには、さらなるアプローチがありMRBはIUMMケースの世話をするために活用しようとします。前に説明したように、以来、IUMMケースに関連する問題は、ほとんどがMRBはAS、これはMRBが異なるのセットのように見えるようになるかもしれない克服するための簡単な方法によって、単一のMSのインスタンスとして見られているという事実に関係しますすぐにMS。これは、単に別のURIのシリーズ、MRB自体が「仮想」MSのプールとして作用することによって処理されるすべてのと同じように気づいていないのプロビジョニングを行うことによって行うことができます。この方法では、ASは、異なるアプリケーションのために、それは（ここで説明する例では2）管理している、例えば、通話の異なるクラスに異なるMSを使用するように設計することができる、そのように明確な2を作成するために、2つの異なるプロビジョニングさURIを連絡します二つの異なるMSに対する制御チャネル。 URIの両方はMRBによって処理されることになるので、MRBは、MS各コールが向けられるべきかを決定するためにそれらを使用することができます。常に同じMSを使用するための制約を除去することにより、図54に拡大し、この新しいシナリオでは、図57に示したもののように見えるかもしれません。"
    },
    {
      "indent": 1,
      "text": "UAC1  UAC2       AS                           MRB              MS1  MS2\n |     |          |                            |                 |    |\n |     |          | 1. COMEDIA negotiation (A) |                 |    |\n |     |          |    INVITE fake-ms1         |                 |    |\n |     |          |--------------------------->|                 |    |\n |     |          |                            | 2. COMEDIA (A)  |    |\n |     |          |                            |---------------->|    |\n |     |          |                            |                 |    |\n |     |          |<<############## CFW CONNECTION 1 ##########>>|    |\n |     |          |                            |                 |    |\n |     |          | 3. COMEDIA negotiation (B) |                 |    |\n |     |          |    INVITE fake-ms2         |                 |    |\n |     |          |--------------------------->|                 |    |\n |     |          |                            | 4. COMEDIA neg. (B)  |\n |     |          |                            |--------------------->|\n |     |          |                            |                 |    |\n |     |          |<<############## CFW CONNECTION 2 ###############>>|\n |     |          |                            |                 |    |\n | 5. INVITE xyz  |                            |                 |    |\n |--------------->|                            |                 |    |\n |     |          | 6. Attach UAC1 to fake-ms1 (3PCC)            |    |\n |     |          |--------------------------->|                 |    |\n |     |          |                            | 7. Attach UAC   |    |\n |     |          |                            |---------------->|    |\n |     |          |                            |                 |    |\n |<<++++++++++++++++++++++ RTP channels +++++++++++++++++++++++>>|    |\n |     |          |                            |                 |    |\n | 8. INVITE jkl  |                            |                 |    |\n |--------------->|                            |                 |    |\n |     |          | 9. Attach UAC2 to fake-ms2 (3PCC)            |    |\n |     |          |--------------------------->|                 |    |\n |     |          |                            | 10. Attach UAC  |    |\n |     |          |                            |--------------------->|\n |     |          |                            |                 |    |\n |<<+++++++++++++++++++++++++ RTP channels +++++++++++++++++++++++++>>|\n |     |          |                            |                 |    |\n .     .          .                            .                 .    .\n .     .          .                            .                 .    .",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 57: Handling Media Dialogs in IUMM: Provisioned URIs",
      "ja": "図57：IUMMにメディアダイアログの取り扱い：プロビジョニングのURI"
    },
    {
      "indent": 3,
      "text": "In this new example, we still assume that the same unaware AS is handling two different applications, still associated with the same URIs as before. This time, though, we also assume that the AS has been designed to try to use different MS instances to handle the two very different applications for which it is responsible. We also assume that it has been configured to be able to use two different MS instances, reachable at SIP URI 'fake-ms1' and 'fake-ms2', respectively, and both actually handled by the MRB transparently. This results, just as before, in two different Control Channels (A and B) being created, but this time towards two different MS. Specifically, the MRB makes sure that for this AS the Control Channel negotiation towards 'fake-ms1' is actually redirected to MS1. At the same time, 'fake-ms2' is associated with MS2. Once the AS has set up the Control Channels with both of the MS, it is ready to handle media dialogs. UAC1 calls the SIP URI 'xyz' on the AS to order a pizza. The AS attaches the media dialog to the MS it knows is responsible for that branch of application logic, i.e., 'fake-ms1'. The MRB in turn makes sure that it reaches the right MS instance, MS1. Later on, a different user, UAC2, calls SIP URI 'jkl' to join a conference room. This time, the AS attaches this new media dialog to the MS instance handling the conference application, i.e., 'fake-ms2'. Again, the MRB makes sure that it is actually MS2 that receives the dialog.",
      "ja": "この新しい例では、我々はまだ気づいていない、同じ2つの異なるアプリケーションを処理しているAS、以前と同じように同じURIに関連付けられていることを前提としています。この時間は、しかし、我々はまた、ASは、それが担当する2つの非常に異なるアプリケーションを処理するために、異なるMSインスタンスを使用しようとするように設計されていることを前提としています。我々はまた、それぞれ、SIP URI「偽-MS1」と「偽-MS2」で到達可能な、2つの異なるMSインスタンスを使用できるように構成されていることを前提とし、両者は実際透過MRBによって処理します。これは、二つの異なる制御チャネル（AおよびB）が作成され、2つの異なるMSに向かって、この時に、ちょうど前のように、生じます。具体的には、MRBは「偽-MS1」に向けた制御チャネルネゴシエーションASこのため、実際にMS1にリダイレクトされていることを確認します。同時に、「偽-MS2は」MS2と関連しています。 ASは、MSの両方で制御チャネルを設定したら、メディアダイアログを処理する準備ができています。 UAC1はピザを注文するASのSIP URI「XYZ」を呼び出します。 ASは、それが知っているMSへのメディアダイアログがアプリケーションロジックの枝、すなわち、「偽-MS1」を担当して接続します。順番にMRBはそれが正しいMSインスタンス、MS1に到達したことを確認します。その後、別のユーザー、UAC2は、会議室に参加するSIP URI「JKL」を呼び出します。今回は、ASは、会議アプリケーション、すなわち、「偽-MS2」を扱うMSインスタンスにこの新しいメディアダイアログを添付します。ここでも、MRBは、それが実際のダイアログを受け取るMS2であることを確認します。"
    },
    {
      "indent": 3,
      "text": "Again, this diagram is only meant to describe how the MRB might enforce its decisions. Just as described in the previous examples, the MRB may choose to either act as a Proxy/B2BUA between the AS and the MS instances or redirect the AS to the right MS instances when they're first contacted (e.g., by means of the Contact header and/or a SIP redirect, as explained before) and let the AS attach the media dialogs by itself.",
      "ja": "繰り返しますが、この図は唯一MRBはその決定を強制する方法を記載することを意味します。前の例で説明したのと同じように、MRBはASとMSのインスタンス間のプロキシ/ B2BUAとしてのいずれかの行為に選ぶことができるか、それらが最初に接触しているときなど、連絡先によって（右MSインスタンスへのASリダイレクトヘッダ及び/又はSIPリダイレクト、前に説明したように）とASは、自身がメディアダイアログを取り付けできます。"
    },
    {
      "indent": 0,
      "text": "7.3.3. CFW Protocol Behavior",
      "section_title": true,
      "ja": "7.3.3.  CFWプロトコルの動作"
    },
    {
      "indent": 3,
      "text": "As shown in the previous diagrams, no matter what the topology, the AS and MS usually end up with a direct connection with respect to the CFW Control Channel. As such, it can be expected that the CFW protocol continue to work as it should, and as a consequence all the call flows presented in this document can easily be reproduced in those circumstances as well.",
      "ja": "前の図に示すように、どんなトポロジ、ASとMSは通常CFW制御チャネルに関しての直接接続で終わるん。このように、CFWプロトコルはそれが必要、との結果として、この文書のすべてのコールフローを簡単に、同様な状況に再現できるように動作し続けることを期待することができます。"
    },
    {
      "indent": 3,
      "text": "Nevertheless, one aspect needs to be considered very carefully. It's worthwhile to remind readers that both the AS and the MS use some SIP-related information to address the entities they manipulate. This is the case, for instance, for the <connectionid> element to which both the AS and the MS refer when addressing a specific UAC. As explained in Section 6, this 'connectionid' identifier is constructed by concatenating the 'From' and 'To' tags extracted from a SIP header: specifically, from the headers of the AS<->MS leg that allows a UAC to be attached to the MS. The presence of an additional component in the path between the AS and the MS, the MRB, might alter these tags, thus causing the AS to use tags (AS<->MRB) different than those used by the MS (MRB<->MS). This would result in the AS and MS using different 'connectionid' identifiers to address the same UAC, thus preventing the protocol from working as expected. As a consequence, it's very important that any MRB implementation take very good care to preserve the integrity of the involved SIP headers when proxying/forwarding SIP dialogs between the AS and MS, in order not to \"break\" the behavior of the protocol.",
      "ja": "それにもかかわらず、一つの側面は非常に慎重に検討する必要があります。これは、ASとMSの両方が、彼らが操作するエンティティに対処するために、いくつかのSIP関連の情報を使用して、読者を思い出させるために価値があります。これは、例えば、特定のUACに対処するときASとMSの両方が参照れる<connectionid>要素のための、場合です。 < - > UACが結合されることを可能にするMS脚具体的には、ASのヘッダから：第6節で説明したように、この「connectionid」識別子は、SIPヘッダから抽出されたタグ「に」「から」とを連結することによって構成されていますMSへ。 < - > MS（MRBによって使用されるものとは異なる -  ASとMSとの間の経路における追加の成分の存在、MRBは、このようにASが（MRB <> AS）タグを使用させる、これらのタグを変更するかもしれませんミズ）。これにより期待どおりに動作からプロトコルを防止する、同じUACに対処するために異なる「connectionid」の識別子を使用してASとMSをもたらすであろう。結果として、それがどのMRBの実装がプロトコルの動作を「壊す」しないようにするために、ASとMSとの間のときプロキシ/転送SIPダイアログ関与SIPヘッダの整合性を維持するために非常に良い世話をすることが非常に重要です。"
    },
    {
      "indent": 3,
      "text": "Let's take, for instance, the scenario depicted in Figure 53, especially steps 6 and 7, which specifically address a UAC being attached by an AS to an MS via the MRB. Let's assume that Figure 58 shows what happens to the 'From' and 'To' headers in that scenario, when dealing with the 3PCC approach to attach a specific UAC to the MS.",
      "ja": "例えば、図53に示されているシナリオは、特に具体的MRBを介してMSにASによって結合されUACに対処6及び7を、ステップ、のみましょう。のが図58でMSに特定のUACを添付する3PCCのアプローチを扱うことのシナリオでは、ヘッダー、「に」「から」とに何が起こるかを示していると仮定しましょう。"
    },
    {
      "indent": 0,
      "text": "UAC              AS                         MRB                       MS\n |                |                          |                        |\n | INVITE xyz     |                          |                        |\n |--------------->|                          |                        |\n |                | SIP [..]                 |                        |\n |                | From: <..>;tag=a1b2c3    |                        |\n |                | To: <..>;tag=d4e5f6      |                        |\n |                |<------------------------>|                        |\n |                |                          | SIP [..]               |\n |                |                          | From: <..>;tag=aaabbb  |\n |                |                          | To: <..>;tag=cccddd    |\n |                |                          |<---------------------->|\n |                |                          |                        |\n |                | 1. CONTROL (play announcement to UAC)             |\n |                |-------------------------------------------------->|\n |                |                               2. 200 (IVR Error!) |\n |                |<--------------------------------------------------|\n |                |                          |                        |\n .                .                          .                        .\n .                .                          .                        .",
      "raw": true
    },
    {
      "indent": 5,
      "text": "Figure 58: CFW Protocol Behavior in the Case of Manipulated Tags",
      "ja": "図58：操作タグの場合でCFWプロトコルの動作"
    },
    {
      "indent": 3,
      "text": "In this example, once done with the 3PCC, and now that the UAC is attached to the MS, the AS and the MS end up with different interpretations of what the 'connectionid' for the UAC should be. In fact, the AS builds a 'connectionid' using the tags it is aware of (a1b2c3:d4e5f6), while the MS builds a different identifier after receiving different information from the MRB (aaabbb:cccddd).",
      "ja": "この例では、いったんUACは、UACのための「connectionid」はどうあるべきかの異なる解釈で終わるMS、ASとMSに接続されていることを今3PCCで行われ、そして。 MSは、MRB（：cccddd AAABBB）とは異なる情報を受信した後に別の識別子を構築しながら、：実際には、ASは、それが（d4e5f6 a1b2c3）を認識しているタグを使用して「connectionid」を構築します。"
    },
    {
      "indent": 3,
      "text": "As a consequence, when the AS tries to play an announcement to the UAC using the connectionid it correctly constructed, the MS just as correctly replies with an error, since it doesn't know that identifier. This is correct protocol behavior, because in this case it was caused by misuse of the information needed for it to work as expected.",
      "ja": "ASは、それが正しく構築さconnectionidを使用してUACに告知を再生しようとしたとき、それはその識別子を知らないので、結果として、MSは、同じように正しく、エラーで応答します。この場合には、それが期待通りに動作するために必要な情報の誤用により発生したため、これは、正しいプロトコルの動作です。"
    },
    {
      "indent": 3,
      "text": "1. AS -> MS (CFW CONTROL, play)\n-------------------------------\n   CFW ffhg45dzf123 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 284",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogstart connectionid=\"a1b2c3:d4e5f6\"> <dialog> <prompt> <media loc=\"http://www.example.net/hello.wav\"/> </prompt> </dialog> </dialogstart> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogstart connectionid = \"a1b2c3：d4e5f6\"> <ダイアログ> <プロンプト> <メディアLOC = \"のhttp：// www.example.net/hello.wav \"/> </プロンプト> </ダイアログ> </ dialogstart> </ mscivr>"
    },
    {
      "indent": 3,
      "text": "2. AS <- MS (CFW 200 OK)\n------------------------\n   CFW ffhg45dzf123 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 148",
      "raw": true
    },
    {
      "indent": 6,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <response status=\"407\" reason=\"connectionid does not exist\" dialogid=\"\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <レスポンスステータス= \"407\" 理由= \"connectionidが存在しない\" dialogid = \"\" /> </ mscivr>"
    },
    {
      "indent": 3,
      "text": "In an even worse scenario, the connectionid might actually exist but might be mapped to a different UAC. In such a case, the transaction would succeed, but a completely different UAC would be involved, thus causing a silent failure that neither the AS nor the MS would be aware of.",
      "ja": "さらに悪いシナリオでは、connectionidは、実際に存在するかもしれないが、別のUACにマッピングされている可能性があります。そのような場合には、トランザクションは成功するだろうが、完全に異なるUACは、このようにASもMSもないのを承知しているであろうサイレント障害を引き起こし、関与することでしょう。"
    },
    {
      "indent": 3,
      "text": "That said, proper management of these sensitive pieces of information by the MRB would prevent such failure scenarios from happening. How this issue is taken care of in the IAMM case (both CFW-based and media dialog-based) has already been described. Addressing this issue for the IUMM case is not documented in [RFC6917] as explicitly out of scope and as such may be implementation specific.",
      "ja": "MRBによる情報のこれらの敏感な部分のこと言った、適切な管理が起きてから、このような障害シナリオを防止するであろう。どのようにこの問題はIAMMケースにお世話になっている（CFWベースとメディア・ダイアログベースの両方）、既に記載されています。 IUMMの場合について、この問題に対処する実装固有とすることができる範囲の外にそのような限り明示[RFC6917]に記載されていません。"
    },
    {
      "indent": 3,
      "text": "The same applies to SDP fields as well. In fact, the AS and MS use ad hoc SDP attributes to instantiate a Control Channel, as they use SDP labels to address specific media connections of a UAC media dialog when a fine-grained approach is needed. As a consequence, any",
      "ja": "同じことが、同様SDPフィールドに適用されます。実際には、ASとMSは、彼らがきめ細かいアプローチが必要なときにUACのメディアダイアログの特定のメディア接続に対処するためにSDPのラベルを使用してアドホックSDPは、制御チャネルをインスタンス化する属性を使用しています。結果として、任意の"
    },
    {
      "indent": 3,
      "text": "MRB implementation should limit any SDP manipulation as much as possible or at least take very good care not to cause changes that could \"break\" the expected behavior of the CFW protocol.",
      "ja": "MRBの実装は、可能な限り任意のSDPの操作を制限するか、少なくともCFWプロトコルの期待される動作を「壊す」ことができ、変更を生じさせない非常に良い世話をする必要があります。"
    },
    {
      "indent": 0,
      "text": "8. Security Considerations",
      "section_title": true,
      "ja": "8.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "All the MEDIACTRL documents have strong statements regarding security considerations within the context of the interactions occurring at all levels among the involved parties. Considering the sensitive nature of the interaction between AS and MS, particular efforts have been devoted to providing guidance on how to secure what flows through a Control Channel. In fact, transactions concerning dialogs, connections, and mixes are quite strongly related to resources actually being deployed and used in the MS. This means that it is in the interest of both AS and MS that resources created and handled by an entity are not manipulated by a potentially malicious third party if permission was not granted.",
      "ja": "すべてのMEDIACTRL文書は、関係当事者間のすべてのレベルで発生する相互作用のコンテキスト内のセキュリティ上の考慮事項についての強い声明を持っています。 ASとMSの間の相互作用の敏感な性質を考慮すると、特定の努力が制御チャネルを介して流れるものを保護する方法に関するガイダンスを提供することに専念してきています。実際には、トランザクションはダイアログ、接続に関して、そしてミックスは非常に強く、実際に配備され、MSに使用されているリソースに関連しています。これは、権限が付与されていなかった場合には、企業が作成したと扱わ資源が潜在的に悪意のある第三者によって操作されていないASとMSの両方の利益になることを意味しています。"
    },
    {
      "indent": 3,
      "text": "Because strong statements are provided in the aforementioned documents and these documents provide good guidance to implementors with respect to these issues, this section will only provide the reader with some MEDIACTRL call flows that show how a single secured MS is assumed to reply to different AS when receiving requests that may cross the bounds within which each AS is constrained. This would be the case, for instance, for generic auditing requests, or explicit conference manipulation requests where the involved identifiers are not part of the context of the originating AS.",
      "ja": "強力なステートメントは、上記の文書で提供し、これらの文書は、これらの問題に対する実装者への良好なガイダンスを提供しているため、このセクションでは、単一の確保MSがするときなど、さまざまに返信すると想定される方法を示すいくつかのMEDIACTRLコールフローを読者に提供します各ASが拘束される境界を横断することができる要求を受け取ります。これは、関係する識別子がAS発信元のコンテキストの一部ではない、一般的な監査要求、または明示的な会議操作の要求に対して、例えば、ケースになります。"
    },
    {
      "indent": 3,
      "text": "To address a very specific scenario, let's assume that two different AS, AS1 and AS2, have established a Control Channel with the same MS. Considering the SYNC transaction that an AS and an MS use to set up a Control Channel, the MS is able to discern the requests coming from AS1 from the requests coming from AS2. In fact, as explained in Sections 5.1 and 5.2, an AS and an MS negotiate a cfw-id attribute in the SDP, and the same value is subsequently used in the SYNC message on the Control Channel that is created after the negotiation, thus reassuring both the AS and the MS that the Control Channel they share is in fact the channel they negotiated in the first place.",
      "ja": "非常に特定のシナリオに対処するために、の2つの異なるAS、AS1とAS2は、同じMSとの制御チャネルを確立していると仮定しましょう。 ASとMSは、制御チャネルを設定するために使用するSYNCトランザクションを考慮すると、MSはAS2からの要求からAS1からの要求を識別することができます。セクション5.1および5.2で説明したように、実際には、ASとMSは、SDPでCFW-id属性をネゴシエートし、同じ値が続いネゴシエーション後に作成された制御チャネル上のSYNCメッセージで使用され、したがって安心します彼らは共有制御チャネルは、実際には、彼らが最初の場所で交渉チャネルであることをASとMSの両方。"
    },
    {
      "indent": 3,
      "text": "Let's also assume that AS1 has created a conference mix (confid=74b6d62) to which it has attached some participants within the context of its business logic, while AS2 has created a currently active IVR dialog (dialogid=dfg3252) with a user agent it is handling (237430727:a338e95f). AS2 has also joined two connections to each other (1:75d4dd0d and 1:b9e6a659). Clearly, it is highly desirable that AS1 not be aware of what AS2 is doing with the MS and vice versa, and that they not be allowed to manipulate each other's resources. The following transactions will occur:",
      "ja": "それはユーザーエージェントとのも（dialogid = dfg3252）AS1はAS2は、現在アクティブなIVRダイアログを作成していながら、それは、そのビジネス・ロジックのコンテキスト内で一部の参加を添付しているために会議ミックス（confid = 74b6d62）を作成したと仮定しましょう（237430727：a338e95f）を取り扱います。 （：75d4dd0dと1：b9e6a659 1）AS2はまた、お互いに2つの接続に参加しています。明らかに、AS1がAS2は、MSおよびその逆でやっていることを認識していないことが非常に望ましい、と彼らはお互いのリソースを操作することは許されないこと。次のトランザクションが発生します。"
    },
    {
      "indent": 3,
      "text": "1. AS1 places a generic audit request to both the Mixer and IVR packages.",
      "ja": "1. AS1は、ミキサーやIVRパッケージの両方に、一般的な監査要求を配置します。"
    },
    {
      "indent": 3,
      "text": "2. AS2 places a generic audit request to both the Mixer and IVR packages.",
      "ja": "2. AS2は、ミキサーやIVRパッケージの両方に、一般的な監査要求を配置します。"
    },
    {
      "indent": 3,
      "text": "3. AS1 tries to terminate the dialog created by AS2 (6791fee).",
      "section_title": true,
      "ja": "3. AS1はAS2（6791fee）によって作成されたダイアログを終了しようとします。"
    },
    {
      "indent": 3,
      "text": "4. AS2 tries to join a user agent it handles (1:272e9c05) to the conference mix created by AS1 (74b6d62).",
      "ja": "AS1（74b6d62）によって作成された会議ミックスに：4. AS2は、それが処理するユーザエージェント（272e9c05 1）に参加しようとします。"
    },
    {
      "indent": 3,
      "text": "A sequence diagram of the above-mentioned transactions is depicted in Figure 59, which shows how the MS is assumed to reply in all cases, in order to avoid security issues:",
      "ja": "上記トランザクションのシーケンス図では、MSは、セキュリティ上の問題を回避するために、すべての場合に返信するものとする方法を示し、図59に示されています。"
    },
    {
      "indent": 6,
      "text": "AS1                     AS2                                 MS\n |                       |                                  |\n | A1. CONTROL (IVR audit)                                  |\n |++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>|\n |                       |                       A2. 200 OK |\n |<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n |                       |                                  |\n | B1. CONTROL (Mixer audit)                                |\n |++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>|\n |                       |                       B2. 200 OK |\n |<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |                       | C1. CONTROL (IVR audit)          |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                       C2. 200 OK |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |                       | D1. CONTROL (Mixer audit)        |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                       D2. 200 OK |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n | E1. CONTROL (dialogterminate)                            |\n |++++++++++++++++++++++++++++++++++++++++++++++++++++++++>>|\n |                       |                E2. 403 Forbidden |\n |<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++|\n |                       |                                  |\n |                       | F1. CONTROL (join UAC&conf[AS1]) |\n |                       |++++++++++++++++++++++++++++++++>>|\n |                       |                F2. 403 Forbidden |\n |                       |<<++++++++++++++++++++++++++++++++|\n |                       |                                  |\n .                       .                                  .\n .                       .                                  .",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 59: Security Considerations: Framework Transaction",
      "ja": "図59：セキュリティの考慮：フレームワークのトランザクション"
    },
    {
      "indent": 3,
      "text": "The expected outcome of the transaction is that the MS partially \"lies\" to both AS1 and AS2 when replying to the audit requests (not all of the identifiers are reported, but only those identifiers with which each AS is directly involved), and the MS denies the requests for the unauthorized operations (403). Looking at each transaction separately:",
      "ja": "トランザクションの予想結果の監査要求に返信するときAS1とAS2の両方にMSが部分的に「嘘」ということである（すべてではない識別子のが報告されているが、各ASが直接関与しているもののみ識別子）、およびMS不正操作（403）の要求を拒否します。個別に各トランザクションを見てみると："
    },
    {
      "indent": 3,
      "text": "o In the first transaction (A1), AS1 places a generic <audit> request to the IVR package. The request is generic, since no attributes are passed as part of the request, meaning that AS1 is interested in the MS capabilities as well as all of the dialogs that the MS is currently handling. As can be seen in the reply (A2), the MS only reports in the <auditresponse> the package capabilities, while the <dialogs> element is empty; this is because the only dialog the MS is handling has actually been created by AS2, which causes the MS not to report the related identifier (6791fee) to AS1. In fact, AS1 could use that identifier to manipulate the dialog, e.g., by tearing it down and thus causing the service to be interrupted without AS2's intervention.",
      "ja": "O最初のトランザクション（A1）では、AS1は、IVRパッケージへの一般的な<監査>要求を配置します。属性がAS1は、MSの能力だけでなく、MSが現在処理しているダイアログのすべてに興味があることを意味し、要求の一部として渡されていないため、要求は、一般的なもので。応答（A2）に見られるように、<ダイアログ>要素が空である間、MSのみ、<auditresponse>パッケージの機能に報告します。 MSが処理している唯一のダイアログが実際にAS1に関連する識別子（6791fee）を報告していないMSの原因となるAS2、によって作成されたためです。実際には、AS1は、それを引き裂くため、サービスがAS2の介入なしに中断させることにより、例えば、ダイアログを操作するためにその識別子を使用することができます。"
    },
    {
      "indent": 3,
      "text": "o In the second transaction (B1), AS1 places an identical <audit> request to the Mixer package. The request is again generic, meaning that AS1 is interested in the package capabilities as well as all the mixers and connections that the package is handling at the moment. This time, the MS reports not only capabilities (B2) but information about mixers and connections as well. However, this information is not complete; in fact, only information about mixers and connections originated by AS1 is reported (mixer 74b6d62 and its participants), while the information originated by AS2 is omitted in the report. The motivation is the same as before.",
      "ja": "O 2番目のトランザクション（B1）において、AS1は、ミキサーパッケージに同じ<監査>要求を課します。要求は、AS1は、パッケージの機能だけでなく、パッケージは、現時点で処理しているすべてのミキサーとの接続に興味があることを意味し、再び総称です。今回は、MSは、同様の機能（B2）が、ミキサーと接続に関する情報だけではないを報告します。しかし、この情報は完全ではありません。 AS2によって発信情報、レポートでは省略されている間、実際には、AS1によって発信ミキサーとの接続に関する情報だけでは、（ミキサー74b6d62とその参加者を）報告しています。動機は前と同じです。"
    },
    {
      "indent": 3,
      "text": "o In the third and fourth transactions (C1 and D1), it's AS2 that places an <audit> request to both the IVR and Mixer packages. As with the previous transactions, the audit requests are generic. Looking at the replies (C2 and D2), it's obvious that the capabilities section is identical to the replies given to AS1. In fact, the MS has no reason to \"lie\" about what it can do. The <dialogs> and <mixers> sections are totally different. AS2 in fact receives information about its own IVR dialog (6791fee), which was omitted in the reply to AS1, while it only receives information about the only connection it created (1:75d4dd0d and 1:b9e6a659) without any details related to the mixers and connections originated by AS1.",
      "ja": "O第三及び第四のトランザクション（C1及びD1）では、IVRとミキサーパッケージの両方に<監査>要求を配置AS2です。以前の取引と同様に、監査要求は一般的なものです。回答（C2とD2）を見ると、それは能力のセクションでは、AS1に与えられた回答と同じであることは明らかです。実際には、MSは、それが何ができるかについての「嘘」に理由はありません。 <ダイアログ>と<ミキサー>セクションが全く異なっています。それだけで、それが作成しただけ接続に関する情報を受信しながら、実際にはAS2​​は、AS1への返信では省略した独自のIVRダイアログ（6791fee）、情報を受け取るミキサーに関連する詳細情報なし（1：b9e6a659：75d4dd0dと1）そして、の接続がAS1によって発信します。"
    },
    {
      "indent": 3,
      "text": "o In the fifth transaction (E1), AS1, instead of just auditing the packages, tries to terminate (<dialogterminate>) the dialog created by AS2 (6791fee). Since the identifier has not been reported by the MS in the reply to the previous audit request, we assume that AS1 accessed it via a different out-of-band mechanism. This is assumed to be an unauthorized operation, because the above-mentioned dialog is outside the bounds of AS1; therefore, the MS, instead of handling the syntactically correct request, replies (E2) with a framework-level 403 message (Forbidden), leaving the dialog untouched.",
      "ja": "O第五のトランザクション（E1）において、AS1は、代わりに、単にパッケージを監査、（<dialogterminate>）AS2（6791fee）によって作成されたダイアログを終了しようとします。識別子は、以前の監査要求に対する応答にMSによって報告されていないので、我々は、AS1は、異なるアウトオブバンドメカニズムを介してそれにアクセスすると仮定する。上記ダイアログは、AS1の範囲外であるため、これは、不正な操作であると仮定されます。従って、MSは、代わりに、構文的に正しい要求を処理する、そのままダイアログを残して、フレームワークレベル403のメッセージ（禁止）と（E2）を返信します。"
    },
    {
      "indent": 3,
      "text": "o Similarly, in the sixth and last transaction (F1), AS2 tries to attach (<join>) one of the UACs it is handling to the conference mix created by AS1 (74b6d62). Just as in the previous transaction, the identifier is assumed to have been accessed by AS2 via some out-of-band mechanism, since the MS didn't report it in the reply to the previous audit request. While one of the identifiers (the UAC) is actually handled by AS2, the other (the conference mix) is not; therefore, as with the fifth transaction, this last transaction is regarded by the MS as outside the bounds of AS2. For the same reason as before, the MS replies (F2) with a framework-level 403 message (Forbidden), leaving the mix and the UAC unjoined.",
      "ja": "O同様に、第6および最後のトランザクション（F1）に、AS2は、AS1（74b6d62）によって作成された会議ミックスに処理している求めるUACのいずれか（<参加>）アタッチしよう。ただ、前回の取引のように、識別子は、MSが前の監査要求に応答して、それを報告しなかったことから、いくつかのアウトオブバンド機構を介してAS2によってアクセスされているものとします。識別子（UAC）のいずれかが実際にAS2によって処理されている間、（会議ミックス）他のではありません。従って、第五の取引と同様に、この最後のトランザクションは、AS2の範囲外としてMSによってみなされています。前と同じ理由で、MSは、ミックスとUAC非接合を残し、（禁止）フレームワークレベル403のメッセージと（F2）を返信します。"
    },
    {
      "indent": 2,
      "text": "A1. AS1 -> MS (CFW CONTROL, audit IVR)\n--------------------------------------\n   CFW 140e0f763352 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 81",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <audit/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscivr\"> <監査/> </ mscivr>"
    },
    {
      "indent": 2,
      "text": "A2. AS1 <- MS (CFW 200, auditresponse)\n--------------------------------------\n   CFW 140e0f763352 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 1419",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <auditresponse status=\"200\"> <capabilities> <dialoglanguages/> <grammartypes/> <recordtypes> <mimetype>audio/x-wav</mimetype> <mimetype>video/mpeg</mimetype> </recordtypes> <prompttypes> <mimetype>audio/x-wav</mimetype> <mimetype>video/mpeg</mimetype> </prompttypes> <variables> <variabletype type=\"date\" desc=\"value formatted as YYYY-MM-DD\"> <format desc=\"month day year\">mdy</format> <format desc=\"year month day\">ymd</format> <format desc=\"day month year\">dmy</format> <format desc=\"day month\">dm</format> </variabletype> <variabletype type=\"time\" desc=\"value formatted as HH:MM\"> <format desc=\"24 hour format\">t24</format> <format desc=\"12 hour format with am/pm\">t12</format> </variabletype> <variabletype type=\"digits\" desc=\"value formatted as D+\"> <format desc=\"general digit string\">gen</format> <format desc=\"cardinal\">crn</format> <format desc=\"ordinal\">ord</format> </variabletype> </variables> <maxpreparedduration>60s</maxpreparedduration> <maxrecordduration>1800s</maxrecordduration> <codecs> <codec name=\"audio\"><subtype>basic</subtype></codec> <codec name=\"audio\"><subtype>gsm</subtype></codec> <codec name=\"video\"><subtype>h261</subtype></codec> <codec name=\"video\"><subtype>h263</subtype></codec> <codec name=\"video\"><subtype>h263-1998</subtype></codec> <codec name=\"video\"><subtype>h264</subtype></codec> </codecs>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <auditresponseステータス= \"200\"> <機能> <dialoglanguages /> <grammartypes /> <recordtypes> <MIMEタイプ>オーディオ/ X-WAV </ MIMEタイプ> <MIMEタイプ>ビデオ/ MPEG </ MIMEタイプ> </ recordtypes> <prompttypes> <MIMEタイプ>オーディオ/ X-WAV </ MIMEタイプ> <MIMEタイプ>ビデオ/ MPEG </ MIMEタイプ> </ prompttypes> <変数> <variabletypeタイプ= \"日付\" DESC => <書式DESC = \"月日年\"> MDY </フォーマット> <書式DESC = \"年月日\" \"YYYY-MM-DDとしてフォーマット値\"> YMD </フォーマット> <フォーマットDESC = \"日月年\"> DMY </フォーマット> <書式DESC = \"日月\"> DM </フォーマット> </ variabletype> <variabletypeタイプ= \"時間\" DESC = \"値フォーマットされましたHH：MM \"> <書式DESC =\" 24時間形式 \"> T24 </フォーマット> <書式DESC =\" 午前/午後と12時間形式 \"> T12 </フォーマット> </ variabletype> <variabletypeタイプ=\" 数字\"DESC =\" D + \"> <フォーマットDESC =\" 一般的な数字列としてフォーマット値 \"> GEN </フォーマット> <フォーマットDESC =\" カーディナル \"> CRN </フォーマット> <フォーマットDESC =\" 序 \"> ORD </フォーマット> </ variabletype> </変数> <maxpreparedduration> 60代</ maxpre paredduration> <maxrecordduration> 1800 </ maxrecordduration> <コーデック> <コーデック名= \"オーディオ\"> <サブタイプ>基本</サブタイプ> </コーデック> <コーデック名= \"オーディオ\"> <サブタイプ> GSM </サブタイプ> < /コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H261 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H263 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\" > <サブタイプ> h263-1998 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H264 </サブタイプ> </コーデック> </コーデック>"
    },
    {
      "indent": 5,
      "text": " </capabilities> <dialogs> </dialogs> </auditresponse> </mscivr>",
      "ja": "</機能> <ダイアログ> </ダイアログ> </ auditresponse> </ mscivr>"
    },
    {
      "indent": 2,
      "text": "B1. AS1 -> MS (CFW CONTROL, audit mixer)\n----------------------------------------\n   CFW 0216231b1f16 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 87",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <audit/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <監査/> </ mscmixer>"
    },
    {
      "indent": 2,
      "text": "B2. AS1 <- MS (CFW 200, auditresponse)\n--------------------------------------\n   CFW 0216231b1f16 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 903",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <auditresponse status=\"200\"> <capabilities> <codecs> <codec name=\"audio\"><subtype>basic</subtype></codec> <codec name=\"audio\"><subtype>gsm</subtype></codec> <codec name=\"video\"><subtype>h261</subtype></codec> <codec name=\"video\"><subtype>h263</subtype></codec> <codec name=\"video\"><subtype>h263-1998</subtype></codec> <codec name=\"video\"><subtype>h264</subtype></codec> </codecs> </capabilities> <mixers> <conferenceaudit conferenceid=\"74b6d62\"> <participants> <participant id=\"1864574426:e2192766\"/> <participant id=\"1:5a97fd79\"/> </participants> <video-layout min-participants=\"1\"> <quad-view/> </video-layout> </conferenceaudit>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <auditresponseステータス= \"200\"> <機能> <コーデック> <コーデック名= \"オーディオ\"> <サブタイプ>基本的な</サブタイプ> </コーデック> <コーデック名= \"オーディオ\"> <サブタイプ> GSM </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H261 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H263 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> h263-1998 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H264 </サブタイプ> </コーデック> </コーデック> </機能> <ミキサー> <conferenceaudit conferenceid = \"74b6d62\"> <参加者> <参加者ID = \"1864574426：e2192766\" /> <参加者ID = \"1 ：5a97fd79 \"/> </参加者> <ビデオレイアウトMIN-参加=\" 1\" > <クアッドビュー/> </ビデオレイアウト> </ conferenceaudit>"
    },
    {
      "indent": 5,
      "text": " <joinaudit id1=\"1864574426:e2192766\" id2=\"74b6d62\"/> <joinaudit id1=\"1:5a97fd79\" id2=\"74b6d62\"/> </mixers> </auditresponse> </mscmixer>",
      "ja": "<joinaudit ID1 = \"1864574426：e2192766\" ID2 = \"74b6d62\" /> <joinaudit ID1 = \"1：5a97fd79\" ID2 = \"74b6d62\" /> </ミキサー> </ auditresponse> </ mscmixer>"
    },
    {
      "indent": 2,
      "text": "C1. AS2 -> MS (CFW CONTROL, audit IVR)\n--------------------------------------\n   CFW 0216231b1f16 CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 81",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <audit/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscivr\"> <監査/> </ mscivr>"
    },
    {
      "indent": 2,
      "text": "C2. AS2 <- MS (CFW 200, auditresponse)\n--------------------------------------\n   CFW 0216231b1f16 200\n   Timeout: 10\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 1502",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <auditresponse status=\"200\"> <capabilities> <dialoglanguages/> <grammartypes/> <recordtypes> <mimetype>audio/wav</mimetype> <mimetype>video/mpeg</mimetype> </recordtypes> <prompttypes> <mimetype>audio/wav</mimetype> <mimetype>video/mpeg</mimetype> </prompttypes> <variables> <variabletype type=\"date\" desc=\"value formatted as YYYY-MM-DD\"> <format desc=\"month day year\">mdy</format> <format desc=\"year month day\">ymd</format> <format desc=\"day month year\">dmy</format> <format desc=\"day month\">dm</format> </variabletype>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <auditresponseステータス= \"200\"> <機能> <dialoglanguages /> <grammartypes /> <recordtypes> <MIMEタイプ>オーディオ/ wavファイル</ MIMEタイプ> <MIMEタイプ>ビデオ/ MPEG </ MIMEタイプ> </ recordtypes> <prompttypes> <MIMEタイプ>オーディオ/ WAV </ MIMEタイプ> <MIMEタイプ>ビデオ/ MPEG </ MIMEタイプ> </ prompttypes> <変数> <フォーマットDESC = \"月日年\"> MDY </フォーマット> <フォーマットDESC = \"年月日\"> YMD </フォーマット> <variabletypeタイプ= \"日付\" DESC = \"YYYY-MM-DDとしてフォーマット値\" > <フォーマットDESC = \"日月年\"> DMY </フォーマット> <書式DESC = \"日月\"> DM </フォーマット> </ variabletype>"
    },
    {
      "indent": 5,
      "text": " <variabletype type=\"time\" desc=\"value formatted as HH:MM\"> <format desc=\"24 hour format\">t24</format> <format desc=\"12 hour format with am/pm\">t12</format> </variabletype> <variabletype type=\"digits\" desc=\"value formatted as D+\"> <format desc=\"general digit string\">gen</format> <format desc=\"cardinal\">crn</format> <format desc=\"ordinal\">ord</format> </variabletype> </variables> <maxpreparedduration>60s</maxpreparedduration> <maxrecordduration>1800s</maxrecordduration> <codecs> <codec name=\"audio\"><subtype>basic</subtype></codec> <codec name=\"audio\"><subtype>gsm</subtype></codec> <codec name=\"video\"><subtype>h261</subtype></codec> <codec name=\"video\"><subtype>h263</subtype></codec> <codec name=\"video\"><subtype>h263-1998</subtype></codec> <codec name=\"video\"><subtype>h264</subtype></codec> </codecs> </capabilities> <dialogs> <dialogaudit dialogid=\"6791fee\" state=\"started\" connectionid=\"237430727:a338e95f\"/> </dialogs> </auditresponse> </mscivr>",
      "ja": "<フォーマットDESC = \"24時間形式\"> T24 </フォーマット> <フォーマットDESC = \"AM / PM 12時間形式\"> T12 </ <variabletypeタイプ= \"時間\" DESC = \"MM HHとして書式設定値\">フォーマット> </ variabletype>> <フォーマットDESC = \"一般的な数字列\" <variabletypeタイプ= \"数字\" DESC = \"D +としてフォーマット値\"> GEN </フォーマット> <フォーマットDESC = \"カーディナル\"> CRN </フォーマット> <書式DESC = \"序\"> ORD </フォーマット> </ variabletype> </変数> <maxpreparedduration> 60代</ maxpreparedduration> <maxrecordduration> 1800 </ maxrecordduration> <コーデック> <コーデック名= \"オーディオ\"> <サブタイプ>基本的な</サブタイプ> </コーデック> <コーデック名= \"オーディオ\"> <サブタイプ> GSM </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H261 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H263 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> h263-1998 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H264 </サブタイプ> </コーデック> </コーデック> </機能> <ダイアログ> <dialogaudit dialogid = \"6791fee\" 状態= \"開始\" connectionid = \"237430727：a338e95f\" /> </ダイアログ> </ auditresponse> </ mscivr>"
    },
    {
      "indent": 2,
      "text": "D1. AS2 -> MS (CFW CONTROL, audit mixer)\n----------------------------------------\n   CFW 515f007c5bd0 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 87",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <audit/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <監査/> </ mscmixer>"
    },
    {
      "indent": 2,
      "text": "D2. AS2 <- MS (CFW 200, auditresponse)\n--------------------------------------\n   CFW 515f007c5bd0 200\n   Timeout: 10\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 548",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <auditresponse status=\"200\"> <capabilities> <codecs> <codec name=\"audio\"><subtype>basic</subtype></codec> <codec name=\"audio\"><subtype>gsm</subtype></codec> <codec name=\"video\"><subtype>h261</subtype></codec> <codec name=\"video\"><subtype>h263</subtype></codec> <codec name=\"video\"><subtype>h263-1998</subtype></codec> <codec name=\"video\"><subtype>h264</subtype></codec> </codecs> </capabilities> <mixers> <joinaudit id1=\"1:75d4dd0d\" id2=\"1:b9e6a659\"/> </mixers> </auditresponse> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscmixer\"> <auditresponseステータス= \"200\"> <機能> <コーデック> <コーデック名= \"オーディオ\"> <サブタイプ>基本的な</サブタイプ> </コーデック> <コーデック名= \"オーディオ\"> <サブタイプ> GSM </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H261 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H263 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> h263-1998 </サブタイプ> </コーデック> <コーデック名= \"ビデオ\"> <サブタイプ> H264 </サブタイプ> </コーデック> </コーデック> </機能> <ミキサー> <joinaudit ID1 = \"1：75d4dd0d\" ID2 = \"1：b9e6a659\" /> </ミキサー> </ auditresponse> </ mscmixer>"
    },
    {
      "indent": 2,
      "text": "E1. AS1 -> MS (CFW CONTROL, dialogterminate)\n--------------------------------------------\n   CFW 7fdcc2331bef CONTROL\n   Control-Package: msc-ivr/1.0\n   Content-Type: application/msc-ivr+xml\n   Content-Length: 127",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"> <dialogterminate dialogid=\"6791fee\" immediate=\"true\"/> </mscivr>",
      "ja": "<mscivrバージョン= \"1.0\" のxmlns = \"壷：IETF：のparams：XML：NS：mscivr\"> <dialogterminate dialogid = \"6791fee\" 即時= \"真\" /> </ mscivr>"
    },
    {
      "indent": 2,
      "text": "E2. AS1 <- MS (CFW 403 Forbidden)\n---------------------------------\n   CFW 7fdcc2331bef 403",
      "raw": true
    },
    {
      "indent": 2,
      "text": "F1. AS2 -> MS (CFW CONTROL, join to conference)\n-----------------------------------------------\n   CFW 140e0f763352 CONTROL\n   Control-Package: msc-mixer/1.0\n   Content-Type: application/msc-mixer+xml\n   Content-Length: 117",
      "raw": true
    },
    {
      "indent": 5,
      "text": "<mscmixer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-mixer\"> <join id1=\"1:272e9c05\" id2=\"74b6d62\"/> </mscmixer>",
      "ja": "<mscmixerバージョン= \"1.0\" のxmlns = \"URN：IETF：paramsは：XML：NS：mscmixer\"> <参加ID1 = \"1：272e9c05\" ID2 = \"74b6d62\" /> </ mscmixer>"
    },
    {
      "indent": 2,
      "text": "F2. AS2 <- MS (CFW 403 Forbidden)\n---------------------------------\n   CFW 140e0f763352 403",
      "raw": true
    },
    {
      "indent": 0,
      "text": "9. Acknowledgments",
      "section_title": true,
      "ja": "9.謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Dale Worley for the thorough review of the whole document and for contributing text to make the document easier to read.",
      "ja": "著者は、文書全体の徹底的なレビューのために、読み文書を容易にするために、テキストを貢献するためデールウォーリーを感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "10. References",
      "section_title": true,
      "ja": "10.参考文献"
    },
    {
      "indent": 0,
      "text": "10.1. Normative References",
      "section_title": true,
      "ja": "10.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC3261] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A., Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP: Session Initiation Protocol\", RFC 3261, June 2002.",
      "ja": "[RFC3261]ローゼンバーグ、J.、Schulzrinneと、H.、カマリロ、G.、ジョンストン、A.、ピーターソン、J.、スパークス、R.、ハンドレー、M.、およびE.学生、 \"SIP：セッション開始プロトコル\" 、RFC 3261、2002年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC3264] Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with Session Description Protocol (SDP)\", RFC 3264, June 2002.",
      "ja": "[RFC3264]ローゼンバーグ、J.とH. Schulzrinneと、RFC 3264、2002年6月 \"セッション記述プロトコル（SDP）とのオファー/アンサーモデル\"。"
    },
    {
      "indent": 3,
      "text": "[RFC3550] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson, \"RTP: A Transport Protocol for Real-Time Applications\", STD 64, RFC 3550, July 2003.",
      "ja": "[RFC3550] Schulzrinneと、H.、Casner、S.、フレデリック、R.、およびV.ヤコブソン、 \"RTP：リアルタイムアプリケーションのためのトランスポートプロトコル\"、STD 64、RFC 3550、2003年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC4574] Levin, O. and G. Camarillo, \"The Session Description Protocol (SDP) Label Attribute\", RFC 4574, August 2006.",
      "ja": "[RFC4574]レヴィン、O.およびG.キャマリロ、 \"セッション記述プロトコル（SDP）label属性\"、RFC 4574、2006年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC4145] Yon, D. and G. Camarillo, \"TCP-Based Media Transport in the Session Description Protocol (SDP)\", RFC 4145, September 2005.",
      "ja": "[RFC4145]ヨン、D.とG.カマリロ、 \"TCPベースのセッション記述プロトコル（SDP）にメディアトランスポート\"、RFC 4145、2005年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC4572] Lennox, J., \"Connection-Oriented Media Transport over the Transport Layer Security (TLS) Protocol in the Session Description Protocol (SDP)\", RFC 4572, July 2006.",
      "ja": "[RFC4572]レノックス、J.、 \"接続指向のセッション記述プロトコル（SDP）でTransport Layer Security（TLS）プロトコルを介してメディアトランスポート\"、RFC 4572、2006年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC6230] Boulton, C., Melanchuk, T., and S. McGlashan, \"Media Control Channel Framework\", RFC 6230, May 2011.",
      "ja": "[RFC6230]ボールトン、C.、Melanchuk、T.、およびS. McGlashan、 \"メディア制御チャネルフレームワーク\"、RFC 6230、2011年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC6231] McGlashan, S., Melanchuk, T., and C. Boulton, \"An Interactive Voice Response (IVR) Control Package for the Media Control Channel Framework\", RFC 6231, May 2011.",
      "ja": "[RFC6231] McGlashan、S.、Melanchuk、T.、およびC.ボールトン、 \"対話型音声応答（IVR）メディア制御チャネルフレームワークのための制御パッケージ\"、RFC 6231、2011年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC6505] McGlashan, S., Melanchuk, T., and C. Boulton, \"A Mixer Control Package for the Media Control Channel Framework\", RFC 6505, March 2012.",
      "ja": "[RFC6505] McGlashan、S.、Melanchuk、T.、およびC.ボールトン、 \"メディア制御チャネルフレームワークのためのミキサーコントロールパッケージ\"、RFC 6505、2012年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC6917] Boulton, C., Miniero, L., and G. Munson, \"Media Resource Brokering\", RFC 6917, April 2013.",
      "ja": "[RFC6917]ボールトン、C.、Miniero、L.、およびG.マンソン、 \"メディアリソースブローカ\"、RFC 6917、2013年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC5239] Barnes, M., Boulton, C., and O. Levin, \"A Framework for Centralized Conferencing\", RFC 5239, June 2008.",
      "ja": "[RFC5239]バーンズ、M.、ボールトン、C.、およびO.レヴィン、 \"集中型会議のためのフレームワーク\"、RFC 5239、2008年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC4582] Camarillo, G., Ott, J., and K. Drage, \"The Binary Floor Control Protocol (BFCP)\", RFC 4582, November 2006.",
      "ja": "[RFC4582]キャマリロ、G.、オット、J.、およびK.糖剤、 \"バイナリフロア制御プロトコル（BFCP）\"、RFC 4582、2006年11月。"
    },
    {
      "indent": 3,
      "text": "[RFC4583] Camarillo, G., \"Session Description Protocol (SDP) Format for Binary Floor Control Protocol (BFCP) Streams\", RFC 4583, November 2006.",
      "ja": "、RFC 4583、2006年11月[RFC4583]キャマリロ、G.、 \"バイナリフロア制御プロトコル（BFCP）ストリームのセッション記述プロトコル（SDP）フォーマット\"。"
    },
    {
      "indent": 0,
      "text": "10.2. Informative References",
      "section_title": true,
      "ja": "10.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC2606] Eastlake, D. and A. Panitz, \"Reserved Top Level DNS Names\", BCP 32, RFC 2606, June 1999.",
      "ja": "[RFC2606]イーストレイク、D.とA. Panitz、 \"予約トップレベルDNS名\"、BCP 32、RFC 2606、1999年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC3725] Rosenberg, J., Peterson, J., Schulzrinne, H., and G. Camarillo, \"Best Current Practices for Third Party Call Control (3pcc) in the Session Initiation Protocol (SIP)\", BCP 85, RFC 3725, April 2004.",
      "ja": "[RFC3725]ローゼンバーグ、J.、ピーターソン、J.、Schulzrinneと、H.、およびG.カマリロ、BCP 85、RFC 3725 \"セッション開始プロトコル（SIP）における第三者呼制御（3PCC）のベスト・プラクティスの現在\" 、2004年4月。"
    },
    {
      "indent": 3,
      "text": "[SRGS] Hunt, A. and S. McGlashan, \"Speech Recognition Grammar Specification Version 1.0\", W3C Recommendation, March 2004.",
      "ja": "[SRGS]ハント、A.とS. McGlashan、 \"音声認識文法仕様バージョン1.0\"、W3C勧告、2004年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC4597] Even, R. and N. Ismail, \"Conferencing Scenarios\", RFC 4597, August 2006.",
      "ja": "[RFC4597]であっても、R.とN.イスマイル、 \"会議のシナリオ\"、RFC 4597、2006年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC5567] Melanchuk, T., \"An Architectural Framework for Media Server Control\", RFC 5567, June 2009.",
      "ja": "[RFC5567] Melanchuk、T.、 \"メディアサーバ制御のためのアーキテクチャーのフレームワーク\"、RFC 5567、2009年6月。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Alessandro Amirante University of Napoli Via Claudio 21 Napoli 80125 Italy",
      "ja": "クラウディオ21 80125ナポリイタリアViaナポリのアレッサンドロAmirante大学"
    },
    {
      "indent": 3,
      "text": "EMail: alessandro.amirante@unina.it",
      "ja": "メールアドレス：alessandro.amirante@unina.it"
    },
    {
      "indent": 3,
      "text": "Tobia Castaldi Meetecho Via Carlo Poerio 89 Napoli 80100 Italy",
      "ja": "トビアCastaldi Meetecho経由カーロ・ポアーリオ89 80100ナポリイタリア"
    },
    {
      "indent": 3,
      "text": "EMail: tcastaldi@meetecho.com",
      "ja": "メールアドレス：tcastaldi@meetecho.com"
    },
    {
      "indent": 3,
      "text": "Lorenzo Miniero Meetecho Via Carlo Poerio 89 Napoli 80100 Italy",
      "ja": "ロレンツォMiniero Meetecho経由カーロ・ポアーリオ89 80100ナポリイタリア"
    },
    {
      "indent": 3,
      "text": "EMail: lorenzo@meetecho.com",
      "ja": "メールアドレス：lorenzo@meetecho.com"
    },
    {
      "indent": 3,
      "text": "Simon Pietro Romano University of Napoli Via Claudio 21 Napoli 80125 Italy",
      "ja": "ナポリのシモン・ペテロロマーノ大学経由クラウディオ21 80125ナポリイタリア"
    },
    {
      "indent": 3,
      "text": "EMail: spromano@unina.it",
      "ja": "メールアドレス：spromano@unina.it"
    }
  ]
}