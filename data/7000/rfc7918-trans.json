{
  "title": {
    "text": "RFC 7918 - Transport Layer Security (TLS) False Start",
    "ja": "RFC 7918 - トランスポート層セキュリティ（TLS）不正スタート"
  },
  "number": 7918,
  "created_at": "2019-11-01 21:49:59.985281+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                        A. Langley\nRequest for Comments: 7918                                   N. Modadugu\nCategory: Informational                                       B. Moeller\nISSN: 2070-1721                                                   Google\n                                                             August 2016",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Transport Layer Security (TLS) False Start",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document specifies an optional behavior of Transport Layer Security (TLS) client implementations, dubbed \"False Start\". It affects only protocol timing, not on-the-wire protocol data, and can be implemented unilaterally. A TLS False Start reduces handshake latency to one round trip.",
      "ja": "この文書では、「偽スタート」と呼ばトランスポート層セキュリティ（TLS）クライアント実装のオプションの動作を指定します。これは、唯一のプロトコルのタイミングではなく、オン・ザ・ワイヤ・プロトコル・データに影響を与え、一方的に実施することができます。 TLS不正スタートは1つの往復に握手待ち時間を短縮します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 7841のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7918.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7918で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2016 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2016 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2\n2.  Requirements Notation . . . . . . . . . . . . . . . . . . . .   4\n3.  False Start Compatibility . . . . . . . . . . . . . . . . . .   4\n4.  Client-Side False Start . . . . . . . . . . . . . . . . . . .   4\n5.  Security Considerations . . . . . . . . . . . . . . . . . . .   5\n  5.1.  Symmetric Cipher  . . . . . . . . . . . . . . . . . . . .   6\n  5.2.  Protocol Version  . . . . . . . . . . . . . . . . . . . .   7\n  5.3.  Key Exchange and Client Certificate Type  . . . . . . . .   7\n6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8\n  6.1.  Normative References  . . . . . . . . . . . . . . . . . .   8\n  6.2.  Informative References  . . . . . . . . . . . . . . . . .   9\nAppendix A.  Implementation Notes . . . . . . . . . . . . . . . .  10\nAcknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  11\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  11",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "A full handshake in TLS protocol versions up to TLS 1.2 [RFC5246] requires two full protocol rounds (four flights) before the handshake is complete and the protocol parties may begin to send application data. Thus, using TLS can add a latency penalty of two network round-trip times for application protocols in which the client sends data first, such as HTTP [RFC7230]. Figure 1 (copied from [RFC5246]) shows the message flow for a full handshake.",
      "ja": "ハンドシェイクが完了し、プロトコル当事者がアプリケーションデータを送信し始めることができる前に、TLS 1.2 [RFC5246]へのTLSプロトコルバージョンの完全なハンドシェイクが2つの完全なプロトコルラウンド（4便）を必要とします。したがって、使用TLSは、HTTP [RFC7230]などのクライアントが最初にデータを送信するアプリケーションプロトコルのための2つのネットワークラウンドトリップ時間の待ち時間ペナルティを追加することができます。 （[RFC5246]からコピー）図1は、完全なハンドシェイクのメッセージフローを示します。"
    },
    {
      "indent": 6,
      "text": "Client Server",
      "ja": "クライアントサーバー"
    },
    {
      "indent": 6,
      "text": "ClientHello                  -------->\n                                                ServerHello\n                                               Certificate*\n                                         ServerKeyExchange*\n                                        CertificateRequest*\n                             <--------      ServerHelloDone\nCertificate*\nClientKeyExchange\nCertificateVerify*\n[ChangeCipherSpec]\nFinished                     -------->\n                                         [ChangeCipherSpec]\n                             <--------             Finished\nApplication Data             <------->     Application Data",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 1: Message Flow for a Full Handshake",
      "ja": "図1：フルハンドシェイクのメッセージフロー"
    },
    {
      "indent": 3,
      "text": "This document describes a technique that alleviates the latency burden imposed by TLS: the client-side TLS False Start. If certain conditions are met, the client can start to send application data when the full handshake is only partially complete, namely, when the client has sent its own ChangeCipherSpec and Finished messages (thus having updated its TLS Record Protocol write state as negotiated in the handshake) but has yet to receive the server's ChangeCipherSpec and Finished messages. (Per Section 7.4.9 of [RFC5246], after a full handshake, the client would have to delay sending application data until it has received and validated the server's Finished message.) Accordingly, the latency penalty for using TLS with HTTP can be kept at one round-trip time.",
      "ja": "この文書では、TLSによって課される待ち時間の負担を軽減手法について説明します。クライアント側がFalse Start]をTLS。特定の条件が満たされている場合、クライアントは完全なハンドシェイクが部分的にしか完了したときに、アプリケーション・データを送信するために開始することができ、クライアントは自身のChangeCipherSpecをしてFinishedメッセージを（送信したとき、つまり、これで交渉としてのTLSレコードプロトコルは、状態を記述し更新しましたハンドシェイク）が、サーバのChangeCipherSpecを完成したメッセージを受信するためには至っていません。 （[RFC5246]のセクション7.4.9あたり、完全なハンドシェイクの後、クライアントはそれを受信して​​、サーバのFinishedメッセージを検証するまで、アプリケーションデータの送信を遅らせなければならないでしょう。）により、HTTPとTLSを使用するための待ち時間のペナルティを保つことができます1ラウンドトリップ時間で。"
    },
    {
      "indent": 3,
      "text": "Note that in practice, the TCP three-way handshake [RFC0793] typically adds one round-trip time before the client can even send the ClientHello. See [RFC7413] for a latency improvement at that level.",
      "ja": "クライアントものClientHelloを送ることができる前に、実際には、TCP 3ウェイハンドシェイク[RFC0793]は、通常、1つのラウンドトリップ時間を追加することに注意してください。そのレベルでの待ち時間の改善のために[RFC7413]を参照。"
    },
    {
      "indent": 3,
      "text": "When an earlier TLS session is resumed, TLS uses an abbreviated handshake with only three protocol flights. For application protocols in which the client sends data first, this abbreviated handshake adds just one round-trip time to begin with, so there is no need for a client-side False Start. However, if the server sends application data first, the abbreviated handshake adds two round-trip times, and this could be reduced to just one added round-trip time by doing a server-side False Start. There is little need for this in practice, so this document does not consider server-side False Starts further.",
      "ja": "以前のTLSセッションが再開されると、TLSは3つだけのプロトコル便で簡略ハンドシェイクを使用しています。クライアントが最初にデータを送信するアプリケーションプロトコルの場合、この簡略ハンドシェイクはそもそも一つだけのラウンドトリップ時間が追加されますので、クライアント側の不正スタートのための必要はありません。サーバーは、最初のアプリケーションデータを送る場合は、簡略ハンドシェイクは2往復時間を追加し、これはサーバー側の不正スタートをすることによって一つだけ追加のラウンドトリップ時間を減少させることができました。そこ実際には、このために少し必要があるので、この文書では、さらに、サーバー側不正スタートを考慮していません。"
    },
    {
      "indent": 3,
      "text": "Note also that TLS versions 1.3 [TLS13] and beyond are out of scope for this document. False Start will not be needed with these newer versions since protocol flows minimizing the number of round trips have become a first-order design goal.",
      "ja": "音符もTLSのバージョンが1.3 [TLS13]以降この文書の範囲外であること。プロトコルは、ラウンドトリップの数が一次設計の目標となっている最小限に流れるため偽のスタートは、これらの新しいバージョンで必要とされることはありません。"
    },
    {
      "indent": 3,
      "text": "In a False Start, when the client sends application data before it has received and verified the server's Finished message, there are two possible outcomes:",
      "ja": "不正スタートで、それを受信して​​、サーバのFinishedメッセージを検証する前に、クライアントがアプリケーションデータを送信する際に、2つの可能な結果があります。"
    },
    {
      "indent": 3,
      "text": "o The handshake completes successfully: The handshake is retroactively validated when both Finished messages have been received and verified. This retroactively validates the handshake. In this case, the transcript of protocol data carried over the transport underlying TLS will look as usual, apart from the different timing.",
      "ja": "Oハンドシェークが正常に完了：両方Finishedメッセージが受信され、検証されていたときに握手を遡及的に検証されます。これは、さかのぼって握手を検証します。この場合、輸送基盤となるTLS上で搬送されるプロトコルデータの転写物は、異なるタイミングから離れて、いつものようになります。"
    },
    {
      "indent": 3,
      "text": "o The handshake fails: If a party does not receive the other side's Finished message or if the Finished message's contents are not correct, the handshake never gets validated. This means that an attacker may have removed, changed, or injected handshake messages. In this case, data has been sent over the underlying transport that would not have been sent without the False Start.",
      "ja": "Oハンドシェークは失敗します。当事者が反対側のFinishedメッセージを受信して​​いないか、Finishedメッセージの内容が正しくない場合、ハンドシェイクが検証されることは決してありません場合。これにより、攻撃者は、削除、変更、またはハンドシェイクメッセージを注入している可能性があることを意味します。この場合、データは不正スタートせずに送信されなかったであろう基本的なトランスポートを介して送信されてきました。"
    },
    {
      "indent": 3,
      "text": "The latter scenario makes it necessary to restrict when a False Start is allowed, as described in this document. Section 3 considers basic requirements for using False Start. Section 4 specifies the behavior for clients, referring to important security considerations in Section 5.",
      "ja": "後者のシナリオは、不正スタートが許可されているときに、この文書で説明したように、必要に応じて、制限することができます。第3節では、不正スタートを使用するための基本的な要件を考慮します。第4節では、第5節では、重要なセキュリティ上の考慮事項を参照して、クライアントの動作を指定します。"
    },
    {
      "indent": 0,
      "text": "2. Requirements Notation",
      "section_title": true,
      "ja": "2.要件表記"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\",\"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はありますRFC 2119 [RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. False Start Compatibility",
      "section_title": true,
      "ja": "3.不正スタートの互換性"
    },
    {
      "indent": 3,
      "text": "TLS False Start as described in detail in the subsequent sections, if implemented, is an optional feature.",
      "ja": "以降のセクションで詳細に説明するようにTLS不正スタートは、実装されている場合、オプション機能です。"
    },
    {
      "indent": 3,
      "text": "A TLS server implementation is defined to be \"False Start compatible\" if it tolerates receiving TLS records on the transport connection early, before the protocol has reached the state to process them. For successful use of client-side False Start in a TLS connection, the server has to be False Start compatible. Out-of-band knowledge that the server is False Start compatible may be available, e.g., if this is mandated by specific application profile standards. As discussed in Appendix A, the requirement for False Start compatibility generally does not pose a hindrance in practice.",
      "ja": "プロトコルはそれらを処理する状態に達する前に、それは、初期のトランスポート接続上のTLSレコードを受信許容場合はTLSサーバの実装は、「互換性のある偽スタート」になるように定義されます。 TLS接続でクライアント側の不正スタートの使用の成功のために、サーバが不正スタート互換性があります。アウトオブバンドこれは、特定のアプリケーションプロファイル規格で義務付けられている場合、サーバは、例えば、利用できる不正スタート互換性のある知識。付録Aで説明したように、不正スタートの互換性のための要件は、一般的に、実際に障害をもたらすことはありません。"
    },
    {
      "indent": 0,
      "text": "4. Client-Side False Start",
      "section_title": true,
      "ja": "4.クライアント側の不正スタート"
    },
    {
      "indent": 3,
      "text": "This section specifies a change to the behavior of TLS client implementations in full TLS handshakes.",
      "ja": "このセクションでは、完全なTLSハンドシェイクでTLSクライアント実装の振る舞いの変更を指定します。"
    },
    {
      "indent": 3,
      "text": "When the client has sent its ChangeCipherSpec and Finished messages, its default behavior per [RFC5246] is to not send application data until it has received the server's ChangeCipherSpec and Finished messages, which completes the handshake. With the False Start protocol modification, the client MAY send application data earlier (under the new Cipher Spec) if each of the following conditions is satisfied:",
      "ja": "クライアントがChangeCipherSpecをしてFinishedメッセージを送信した場合は、[RFC5246]あたりのデフォルトの動作は、それがハンドシェイクを完了し、サーバーのChangeCipherSpecを完成したメッセージを、受信するまでアプリケーションデータを送信しないことです。以下の各条件が満たされた場合はFalseを開始プロトコルの変更では、クライアントが（新しい暗号スペックの下で）以前のアプリケーションデータを送信することがあります。"
    },
    {
      "indent": 3,
      "text": "o The application layer has requested the TLS False Start option.",
      "ja": "Oアプリケーション層は、TLSはFalse Start]オプションを要求しました。"
    },
    {
      "indent": 3,
      "text": "o The symmetric cipher defined by the cipher suite negotiated in this handshake has been whitelisted for use with False Start according to the Security Considerations in Section 5.1.",
      "ja": "Oこのハンドシェイクで交渉した暗号スイートによって定義された対称暗号は、5.1節でのセキュリティの考慮事項に基づいて不正スタートで使用するためにホワイトリストに登録されています。"
    },
    {
      "indent": 3,
      "text": "o The protocol version chosen by ServerHello.server_version has been whitelisted for use with False Start according to the Security Considerations in Section 5.2.",
      "ja": "O ServerHello.server_versionによって選ばれたプロトコルバージョンは、5.2節でのセキュリティの考慮事項に基づいて不正スタートで使用するためにホワイトリストに登録されています。"
    },
    {
      "indent": 3,
      "text": "o The key exchange method defined by the cipher suite negotiated in this handshake and, if applicable, its parameters have been whitelisted for use with False Start according to the Security Considerations in Section 5.3.",
      "ja": "このハンドシェイクで交渉した暗号スイートによって定義された鍵交換方法Oと、該当する場合、そのパラメータは、5.3節でのセキュリティの考慮事項に基づいて不正スタートで使用するためにホワイトリストに登録されています。"
    },
    {
      "indent": 3,
      "text": "o In the case of a handshake with client authentication, the client certificate type has been whitelisted for use with False Start according to the Security Considerations in Section 5.3.",
      "ja": "Oクライアント認証とのハンドシェイクの場合は、クライアント証明書の種類は、5.3節でのセキュリティの考慮事項に基づいて不正スタートで使用するためにホワイトリストに登録されています。"
    },
    {
      "indent": 3,
      "text": "The rules for receiving data from the server remain unchanged.",
      "ja": "サーバーからデータを受信するためのルールが変更されないまま。"
    },
    {
      "indent": 3,
      "text": "Note that the TLS client cannot infer the presence of an authenticated server until all handshake messages have been received. With False Start, unlike with the default handshake behavior, applications are able to send data before this point has been reached: from an application point of view, being able to send data does not imply that an authenticated peer is present. Accordingly, it is recommended that TLS implementations allow the application layer to query whether the handshake has completed.",
      "ja": "すべてのハンドシェイクメッセージが受信されるまで、TLSクライアントが認証サーバーの存在を推測することができないことに注意してください。アプリケーションの観点から、認証されたピアが存在することを意味しないデータを送信することができること：Falseのスタートでは、デフォルトのハンドシェイクの動作とは異なり、アプリケーションは、この点に達した前にデータを送信することができます。したがって、TLSの実装は、アプリケーション層は、ハンドシェイクが完了したかどうかを照会できるようにすることをお勧めします。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "In a TLS handshake, the Finished messages serve to validate the entire handshake. These messages are based on a hash of the handshake so far processed by a Pseudorandom Function (PRF) keyed with the new master secret (serving as a Message Authentication Code (MAC)) and are also sent under the new Cipher Spec with its keyed MAC, where the MAC key again is derived from the master secret. The protocol design relies on the assumption that any server and/or client authentication done during the handshake carries over to this. While an attacker could, for example, have changed the cipher suite list sent by the client to the server and thus influenced cipher suite selection (presumably towards a less secure choice) or could have made other modifications to handshake messages in transmission, the attacker would not be able to round off the modified handshake with a valid Finished message: every TLS cipher suite is presumed to key the PRF appropriately to ensure unforgeability. Verifying the Finished messages validates the handshake and confirms that the handshake has not been tampered with; thus, secure encryption is bootstrapped from secure authentication.",
      "ja": "TLSハンドシェイクでは、Finishedメッセージは、全体の握手を検証するのに役立ちます。これらのメッセージは、これまで（メッセージ認証コード（MAC）として）新しいマスターシークレットとキー擬似ランダム関数（PRF）によって処理されたハンドシェイクのハッシュに基づいており、また、そのキー付きMACと新しい暗号スペックの下に送られ、 、MACキーが再びマスターシークレットから派生しているところ。プロトコルの設計は、ハンドシェイク中に行わ任意のサーバおよび/またはクライアント認証はこれに引き継がれるという仮定に依存しています。攻撃者は、例えば、サーバにクライアントから送信された暗号スイートのリストを変更しているので、（おそらく少ない安全な選択に向けて）暗号スイートの選択に影響を与えたり、伝送中にメッセージをハンドシェイクするために他の変更を行った可能性ができますが、攻撃者が希望有効なFinishedメッセージで変性したハンドシェイクを四捨五入することはできません：すべてのTLS暗号スイートは、偽造を確実にするために、適切にPRFをキー入力すると推定されます。 Finishedメッセージの確認握手を検証し、ハンドシェークが改ざんされていないことを確認しました。このように、安全な暗号化は、安全な認証からブートストラップされます。"
    },
    {
      "indent": 3,
      "text": "Using False Start interferes with this approach of bootstrapping secure encryption from secure authentication, as application data may have already been sent before Finished validation confirms that the handshake has not been tampered with -- so there is generally no way to be sure that communication with the expected peer is indeed taking place during the False Start. Instead, the security goal is to ensure that if anyone at all can decrypt the application data sent in a False Start, it must be the legitimate peer. While an attacker could be influencing the handshake (restricting cipher suite selection, modifying key exchange messages, etc.), the attacker should not be able to benefit from this. The TLS protocol already relies on such a security property for authentication; with False Start, the same is needed for encryption. This motivates the rules put forth in the following subsections.",
      "ja": "その確認と通信することを可能にする方法が一般的にありません - 完成検証はハンドシェークが改ざんされていないことを確認する前にアプリケーションデータがすでに送信された可能性がありますと不正スタートを使用することで、セキュアな認証からブートストラップ安全な暗号化のこのアプローチを妨げます予想ピアは確かに偽のスタート時に行われています。代わりに、セキュリティの目標は、まったく誰がFalseスタートで送信されたアプリケーションデータを復号化することができれば、それは正当な相手でなければならないことを確実にするためです。攻撃者が（等、暗号スイートの選択を制限し、鍵交換メッセージを変更する）ハンドシェークに影響を与えることができるが、攻撃者がこの恩恵を受けることができないはずです。 TLSプロトコルは、すでに認証のため、このようなセキュリティプロパティに依存しています。不正スタートで、同じ暗号化のために必要とされています。これは、以下のサブセクションで出すルールに動機を与えます。"
    },
    {
      "indent": 3,
      "text": "It is prudent for applications to be even more restrictive. If heuristically a small list of cipher suites and a single protocol version is found to be sufficient for the majority of TLS handshakes in practice, it could make sense to forego False Start for any handshake that does not match this expected pattern, even if there is no concrete reason to assume a cryptographic weakness. Similarly, if handshakes almost always use ephemeral Elliptic Curve Diffie-Hellman (ECDH) over one of a few named curves, it could make sense to disallow False Start with any other supported curve.",
      "ja": "アプリケーションは、より限定的であることが賢明です。発見的に暗号スイートおよび単一のプロトコルバージョンの小さなリストは、実際にはTLS握手の大多数のために十分であることが判明した場合、それがあったとしても、この予想されるパターンと一致していない任意の握手のために偽のスタートを見送ることに意味を作ることができます暗号の弱点を前提とする具体的な理由はありません。握手はほとんど常にいくつかの名前の曲線のうちの1つの上にはかない楕円曲線のDiffie-Hellmanの（ECDH）を使用する場合同様に、それはサポートされている他の曲線と不正スタートを禁止することに意味を作ることができます。"
    },
    {
      "indent": 0,
      "text": "5.1. Symmetric Cipher",
      "section_title": true,
      "ja": "5.1。対称暗号"
    },
    {
      "indent": 3,
      "text": "Clients MUST NOT use the False Start protocol modification in a handshake unless the cipher suite uses a symmetric cipher that is considered cryptographically strong.",
      "ja": "暗号スイートは、暗号的に強いと考えられている対称暗号を使用しない限り、クライアントは握手で不正スタートプロトコルの変更を使用してはなりません。"
    },
    {
      "indent": 3,
      "text": "Implementations may have their own classification of ciphers (and may additionally allow the application layer to provide a classification), but generally only symmetric ciphers with an effective key length of 128 bits or more can be considered strong. Also, various ciphers specified for use with TLS are known to have cryptographic weaknesses regardless of key length (none of the ciphers specified in [RFC4492] and [RFC5246] can be recommended for use with False Start). The AES_128_GCM_SHA256 or AES_256_GCM_SHA384 ciphers specified in [RFC5288] and [RFC5289] can be considered sufficiently strong for most uses. Implementations that support additional cipher suites have to be careful to whitelist only suitable symmetric ciphers; if in doubt, False Start should not be used with a given symmetric cipher.",
      "ja": "実装は、暗号化方式の独自の分類を有していてもよい（および加えて分類を提供するためのアプリケーション層を可能にすることができる）が、通常128ビット以上の有効なキーの長さを持つ唯一の対称暗号は強いと考えることができます。また、TLSで使用するために指定された様々な暗号が関係なく、鍵の長さの暗号の弱点を持っていることが知られている（[RFC4492]と[RFC5246]で指定された暗号のいずれも不正スタートでの使用は推奨できません）。 [RFC5288]と[RFC5289]で指定AES_128_GCM_SHA256またはAES_256_GCM_SHA384暗号は、ほとんどの用途に十分に強いと考えることができます。追加の暗号スイートをサポートする実装は、適切な対称暗号をホワイトリストに登録して注意する必要があります。疑問がある場合、不正スタートは、与えられた対称暗号で使用されるべきではありません。"
    },
    {
      "indent": 3,
      "text": "While an attacker can change handshake messages to force a downgrade to a less secure symmetric cipher than otherwise would have been chosen, this rule ensures that in such a downgrade attack, no application data will be sent under an insecure symmetric cipher.",
      "ja": "攻撃者は、そうでない場合は選択されていたよりも安全性の低い対称暗号へのダウングレードを強制的にハンドシェイクメッセージを変更することができますが、このルールは、ダウングレード攻撃で、何のアプリケーションデータが安全でない対称暗号の下に送られないことを保証します。"
    },
    {
      "indent": 0,
      "text": "5.2. Protocol Version",
      "section_title": true,
      "ja": "5.2。プロトコルバージョン"
    },
    {
      "indent": 3,
      "text": "Clients MUST NOT use the False Start protocol modification in a handshake unless the protocol version chosen by ServerHello.server_version has been whitelisted for this use.",
      "ja": "ServerHello.server_versionによって選ばれたプロトコルバージョンは、この使用のためにホワイトリストに登録されていない限り、クライアントは握手で不正スタートプロトコルの変更を使用してはなりません。"
    },
    {
      "indent": 3,
      "text": "Generally, to avoid potential protocol downgrade attacks, implementations should whitelist only their latest (highest-valued) supported TLS protocol version (and, if applicable, any earlier protocol versions that they would use in fallback retries without TLS_FALLBACK_SCSV [RFC7507]).",
      "ja": "一般的に、潜在的なプロトコルのダウングレード攻撃を回避するために、実装が唯一の彼らの最新のホワイトリストに登録する必要があり（最高値）TLSプロトコルのバージョン（彼らはTLS_FALLBACK_SCSVせずにフォールバックの再試行に使用すると、該当する場合、以前のプロトコルバージョン[RFC7507]）をサポート。"
    },
    {
      "indent": 3,
      "text": "The details of nominally identical cipher suites can differ between protocol versions, so this reinforces Section 5.1.",
      "ja": "名目上同一の暗号スイートの詳細については、プロトコルのバージョンの間で異なることができ、これはセクション5.1を補強します。"
    },
    {
      "indent": 0,
      "text": "5.3. Key Exchange and Client Certificate Type",
      "section_title": true,
      "ja": "5.3。鍵交換とクライアント証明書の種類"
    },
    {
      "indent": 3,
      "text": "Clients MUST NOT use the False Start protocol modification in a handshake unless the cipher suite uses a key exchange method that has been whitelisted for this use. Also, clients MUST NOT use the False Start protocol modification unless any parameters to the key exchange methods (such as ServerDHParams or ServerECDHParams) have been whitelisted for this use. Furthermore, when using client authentication, clients MUST NOT use the False Start protocol modification unless the client certificate type has been whitelisted for this use.",
      "ja": "暗号スイートは、この使用のためにホワイトリストに登録された鍵交換方式を使用しない限り、クライアントは握手で不正スタートプロトコルの変更を使用してはなりません。 （このようServerDHParamsまたはServerECDHParamsなど）鍵交換方式のいずれかのパラメータがこの使用のためにホワイトリストに登録されていない限り、また、クライアントが不正スタートプロトコルの変更を使用してはなりません。クライアント認証を使用している場合、クライアント証明書の種類は、この使用のためにホワイトリストに登録されていない限り、また、クライアントが不正スタートプロトコルの変更を使用してはなりません。"
    },
    {
      "indent": 3,
      "text": "Implementations may have their own whitelists of key exchange methods, parameters, and client certificate types (and may additionally allow the application layer to specify whitelists). Generally, out of the options from [RFC5246] and [RFC4492], the following whitelists are recommended:",
      "ja": "実装は、鍵交換方法、パラメータ、およびクライアント証明書の種類の独自のホワイトリストを有していてもよい（および加えてアプリケーション層はホワイトリストを指定することを可能にします）。一般的に、[RFC5246]と[RFC4492]からオプションのうち、以下のホワイトリストをお勧めします。"
    },
    {
      "indent": 3,
      "text": "o Key exchange methods: DHE_RSA, ECDHE_RSA, DHE_DSS, ECDHE_ECDSA",
      "ja": "Oキー交換方法：DHE_RSA、ECDHE_RSA、DHE_DSS、ECDHE_ECDSA"
    },
    {
      "indent": 3,
      "text": "o Parameters: well-known DH groups (at least 3,072 bits), named curves (at least 256 bits)",
      "ja": "Oパラメータ：曲線（少なくとも256ビット）という名前のよく知られたDH群（少なくとも3072ビット）"
    },
    {
      "indent": 3,
      "text": "o Client certificate types: none",
      "ja": "oクライアント証明書の種類：なし"
    },
    {
      "indent": 3,
      "text": "However, if an implementation that supports only key exchange methods from [RFC5246] and [RFC4492] does not support any of the above key exchange methods, all of its supported key exchange methods can be whitelisted for False Start use. Care is required with any additional key exchange methods, as these may not have similar properties.",
      "ja": "ただし、[RFC5246]と[RFC4492]からのみ鍵交換方式をサポートしている場合、実装は、そのサポート鍵交換方式のすべてがFalseスタート用にホワイトリストに登録することができ、上記の鍵交換のいずれかの方法をサポートしていません。これらは、類似した性質を持っていない可能性としてケアは、任意の追加の鍵交換方式で必要とされます。"
    },
    {
      "indent": 3,
      "text": "The recommended whitelists are such that if cryptographic algorithms suitable for forward secrecy would possibly be negotiated, no False Start will take place if the current handshake fails to provide forward secrecy. (Forward secrecy can be achieved using ephemeral Diffie-Hellman or ephemeral Elliptic Curve Diffie-Hellman; there is no forward secrecy when using a key exchange method of RSA, RSA_PSK, DH_DSS, DH_RSA, ECDH_ECDSA, or ECDH_RSA, or a client certificate type of rsa_fixed_dh, dss_fixed_dh, rsa_fixed_ecdh, or ecdsa_fixed_ecdh.) As usual, the benefits of forward secrecy may need to be balanced against efficiency, and accordingly, even implementations that support the above key exchange methods might whitelist further key exchange methods and client certificate types.",
      "ja": "推奨ホワイトリストは、前進の秘密保持に適した暗号化アルゴリズムはおそらく交渉されるならば、現在のハンドシェイクが前進の秘密保持を提供するために失敗した場合、何の不正スタートは行われませんようになっています。 （転送秘密は、はかないディフィー - ヘルマン又ははかない楕円曲線ディフィー - ヘルマンを使用して達成することができる、RSA、RSA_PSK、DH_DSS、DH_RSA、ECDH_ECDSA、又はECDH_RSAの鍵交換法、またはクライアント証明書のタイプを使用するときに全く転送秘密はありませんrsa_fixed_dh、dss_fixed_dh、rsa_fixed_ecdh、またはecdsa_fixed_ecdh。）いつものように、前進の秘密保持の利点は、効率とのバランスが必要になる場合があり、それに応じて、上記の鍵交換方式をサポートしても、実装はさらに、鍵交換方法およびクライアント証明書の種類をホワイトリストに登録することがあります。"
    },
    {
      "indent": 3,
      "text": "Client certificate types rsa_sign, dss_sign, and ecdsa_sign do allow forward security, but using False Start with any of these means sending application data tied to the client's signature before the server's authenticity (and thus the CertificateRequest message) has been completely verified, so these too are not generally suitable for the client certificate type whitelist.",
      "ja": "クライアント証明書の種類は、dss_signをrsa_sign、そしてecdsa_signは前方セキュリティを許可しますが、これらの手段のいずれかが、サーバーの信憑前にクライアントの署名に関連付けられたアプリケーションデータを送信する（したがって、CertificateRequestメッセージ）で不正スタートを使用しない、完全に検証されていますので、これらのあまりにクライアント証明書のタイプのホワイトリストのために、一般的には適していません。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6.参照"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC4492] Blake-Wilson, S., Bolyard, N., Gupta, V., Hawk, C., and B. Moeller, \"Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)\", RFC 4492, DOI 10.17487/RFC4492, May 2006, <http://www.rfc-editor.org/info/rfc4492>.",
      "ja": "[RFC4492]ブレイク・ウィルソン、S.、Bolyard、N.、グプタ、V.、ホーク、C.、​​およびB.メラー、 \"楕円曲線暗号（ECC）暗号スイートトランスポート層セキュリティ（TLS）のための\"、RFC 4492 、DOI 10.17487 / RFC4492、2006年5月、<http://www.rfc-editor.org/info/rfc4492>。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, DOI 10.17487/RFC5246, August 2008, <http://www.rfc-editor.org/info/rfc5246>.",
      "ja": "[RFC5246]ダークス、T.およびE.レスコラ、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.2\"、RFC 5246、DOI 10.17487 / RFC5246、2008年8月、<http://www.rfc-editor.org/info / RFC5246>。"
    },
    {
      "indent": 3,
      "text": "[RFC5288] Salowey, J., Choudhury, A., and D. McGrew, \"AES Galois Counter Mode (GCM) Cipher Suites for TLS\", RFC 5288, DOI 10.17487/RFC5288, August 2008, <http://www.rfc-editor.org/info/rfc5288>.",
      "ja": "[RFC5288] Salowey、J.、チョードリー、A.、およびD.マグリュー、 \"AESガロアカウンタモード（GCM）TLSの暗号スイート\"、RFC 5288、DOI 10.17487 / RFC5288、2008年8月、<のhttp：// WWW。 rfc-editor.org/info/rfc5288>。"
    },
    {
      "indent": 3,
      "text": "[RFC5289] Rescorla, E., \"TLS Elliptic Curve Cipher Suites with SHA-256/384 and AES Galois Counter Mode (GCM)\", RFC 5289, DOI 10.17487/RFC5289, August 2008, <http://www.rfc-editor.org/info/rfc5289>.",
      "ja": "[RFC5289]レスコラ、E.、RFC 5289 \"SHA-256/384およびAESガロアカウンタモード（GCM）とTLS楕円曲線暗号スイート\"、DOI 10.17487 / RFC5289、2008年8月、<のhttp：//www.rfc- editor.org/info/rfc5289>。"
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC0793] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, DOI 10.17487/RFC0793, September 1981, <http://www.rfc-editor.org/info/rfc793>.",
      "ja": "[RFC0793]ポステル、J.、 \"伝送制御プロトコル\"、STD 7、RFC 793、DOI 10.17487 / RFC0793、1981年9月、<http://www.rfc-editor.org/info/rfc793>。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <http://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230]フィールディング、R.、エド。及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：メッセージの構文およびルーティング\"、RFC 7230、DOI 10.17487 / RFC7230、2014年6月、<http://www.rfc-editor.org/info/ rfc7230>。"
    },
    {
      "indent": 3,
      "text": "[RFC7413] Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014, <http://www.rfc-editor.org/info/rfc7413>.",
      "ja": "[RFC7413]チェン、Y.、チュー、J.、ラダクリシュナン、S.、およびA.ジェイン、 \"TCP高速開く\"、RFC 7413、DOI 10.17487 / RFC7413、2014年12月、<HTTP：//www.rfc-editor .ORG /情報/ rfc7413>。"
    },
    {
      "indent": 3,
      "text": "[RFC7507] Moeller, B. and A. Langley, \"TLS Fallback Signaling Cipher Suite Value (SCSV) for Preventing Protocol Downgrade Attacks\", RFC 7507, DOI 10.17487/RFC7507, April 2015, <http://www.rfc-editor.org/info/rfc7507>.",
      "ja": "[RFC7507]メラー、B.とA.ラングレー、RFC 7507 \"TLSフォールバックシグナリング暗号スイート値（SCSV）プロトコルダウングレード攻撃の防止のために\"、DOI 10.17487 / RFC7507、2015年4月、<のhttp：//www.rfc-editor .ORG /情報/ rfc7507>。"
    },
    {
      "indent": 3,
      "text": "[TLS13] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", Work in Progress, draft-ietf-tls-tls13-14, July 2016.",
      "ja": "[TLS13]レスコラ、E.、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.3\" が進行中で働いて、ドラフト-IETF-TLS-tls13-14、2016年7月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Implementation Notes",
      "ja": "付録A.実装ノート"
    },
    {
      "indent": 3,
      "text": "TLS False Start is a modification to the TLS protocol, and some implementations that conform to [RFC5246] may have problems interacting with implementations that use the False Start modification. If the peer uses a False Start, application data records may be received directly following the peer's Finished message, before the TLS implementation has sent its own Finished message. False Start compatibility as defined in Section 3 ensures that these records with application data will simply remain buffered for later processing.",
      "ja": "TLS不正スタートは、TLSプロトコルの変形例であり、[RFC5246]に準拠するいくつかの実装は、不正スタート修飾を使用する実装と相互作用する問題を有していてもよいです。ピアがFalse Start]を使用している場合はTLSの実装は、独自のFinishedメッセージを送信した前に、アプリケーション・データ・レコードは、ピアのFinishedメッセージ、次の直接受信することができます。第3節で定義された不正スタートの互換性は、アプリケーションデータを持つこれらのレコードは、単に、後の処理のためにバッファリングされたままになることを保証します。"
    },
    {
      "indent": 3,
      "text": "A False Start compatible TLS implementation does not have to be aware of the False Start concept and is certainly not expected to detect whether a False Start handshake is currently taking place: thanks to transport layer buffering, typical implementations will be False Start compatible without having been designed for it.",
      "ja": "不正スタート互換性のあるTLSの実装は不正スタートの概念を意識する必要はありませんし、確かに不正スタートハンドシェイクが現在行われているかどうかを検出することが予想されていません。おかげで、層のバッファリングを輸送するために、典型的な実装はされずに互換性のある偽のスタートになりますそれのために設計されています。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors wish to thank Wan-Teh Chang, Ben Laurie, Martin Thomson, Eric Rescorla, and Brian Smith for their input.",
      "ja": "作者は彼らの入力のためのワン・テー・チャン、ベン・ローリー、マーティン・トムソン、エリックレスコラ、およびブライアン・スミスに感謝したいです。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Adam Langley Google Inc. 345 Spear St San Francisco, CA 94105 United States of America",
      "ja": "アダム・ラングレーグーグル株式会社345スピアStサンフランシスコアメリカの94105米国"
    },
    {
      "indent": 3,
      "text": "Email: agl@google.com",
      "ja": "メール：agl@google.com"
    },
    {
      "indent": 3,
      "text": "Nagendra Modadugu Google Inc. 1600 Amphitheatre Parkway Mountain View, CA 94043 United States of America",
      "ja": "Nagendra Modaduguグーグル株式会社1600アンフィシアターパークウェイマウンテンビュー、カリフォルニア州アメリカの94043米国"
    },
    {
      "indent": 3,
      "text": "Email: nagendra@cs.stanford.edu",
      "ja": "メール：nagendra@cs.stanford.edu"
    },
    {
      "indent": 3,
      "text": "Bodo Moeller Google Switzerland GmbH Brandschenkestrasse 110 Zurich 8002 Switzerland",
      "ja": "ボードーメラーGoogleのスイス社Brandschenkestrasse 110チューリッヒ8002スイス"
    },
    {
      "indent": 3,
      "text": "Email: bmoeller@acm.org",
      "ja": "メール：bmoeller@acm.org"
    }
  ]
}