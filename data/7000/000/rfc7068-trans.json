{
  "title": {
    "text": "RFC 7068 - Diameter Overload Control Requirements",
    "ja": "RFC 7068 - 直径過負荷制御の要件"
  },
  "number": 7068,
  "created_at": "2019-10-28 07:49:28.880806+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                        E. McMurry\nRequest for Comments: 7068                                   B. Campbell\nCategory: Informational                                           Oracle\nISSN: 2070-1721                                            November 2013",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Diameter Overload Control Requirements",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "When a Diameter server or agent becomes overloaded, it needs to be able to gracefully reduce its load, typically by advising clients to reduce traffic for some period of time. Otherwise, it must continue to expend resources parsing and responding to Diameter messages, possibly resulting in a progressively severe overload condition. The existing Diameter mechanisms are not sufficient for managing overload conditions. This document describes the limitations of the existing mechanisms. Requirements for new overload management mechanisms are also provided.",
      "ja": "Diameterサーバまたはエージェントが過負荷になると、それは通常、ある程度の期間のトラフィックを減らすために、クライアントに助言により、優雅にその負荷を軽減することができる必要があります。そうでなければ、それはおそらく、次第に厳しい過負荷状態になり、解析しDiameterメッセージに応答して、リソースを消費し続けなければなりません。既存の直径メカニズムは、過負荷状態を管理するのに十分ではありません。この文書では、既存のメカニズムの制限について説明します。新しい過負荷管理メカニズムのための要件も提供されます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7068.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7068で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2013 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2013 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................4\n   1.1. Documentation Conventions ..................................4\n   1.2. Causes of Overload .........................................5\n   1.3. Effects of Overload ........................................6\n   1.4. Overload vs. Network Congestion ............................6\n   1.5. Diameter Applications in a Broader Network .................7\n2. Overload Control Scenarios ......................................7\n   2.1. Peer-to-Peer Scenarios .....................................8\n   2.2. Agent Scenarios ...........................................10\n   2.3. Interconnect Scenario .....................................14\n3. Diameter Overload Case Studies .................................15\n   3.1. Overload in Mobile Data Networks ..........................15\n   3.2. 3GPP Study on Core Network Overload .......................16\n4. Existing Mechanisms ............................................17\n5. Issues with the Current Mechanisms .............................18\n   5.1. Problems with Implicit Mechanism ..........................18\n   5.2. Problems with Explicit Mechanisms .........................18\n6. Extensibility and Application Independence .....................19\n7. Solution Requirements ..........................................20\n   7.1. General ...................................................20\n   7.2. Performance ...............................................21\n   7.3. Heterogeneous Support for Solution ........................22\n   7.4. Granular Control ..........................................23\n   7.5. Priority and Policy .......................................23\n   7.6. Security ..................................................23\n   7.7. Flexibility and Extensibility .............................24\n8. Security Considerations ........................................25\n   8.1. Access Control ............................................25\n   8.2. Denial-of-Service Attacks .................................26\n   8.3. Replay Attacks ............................................26\n   8.4. Man-in-the-Middle Attacks .................................26\n   8.5. Compromised Hosts .........................................27\n9. References .....................................................27\n   9.1. Normative References ......................................27\n   9.2. Informative References ....................................27\nAppendix A. Contributors ..........................................29\nAppendix B. Acknowledgements ......................................29",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "A Diameter [RFC6733] node is said to be overloaded when it has insufficient resources to successfully process all of the Diameter requests that it receives. When a node becomes overloaded, it needs to be able to gracefully reduce its load, typically by advising clients to reduce traffic for some period of time. Otherwise, it must continue to expend resources parsing and responding to Diameter messages, possibly resulting in a progressively severe overload condition. The existing mechanisms provided by Diameter are not sufficient for managing overload conditions. This document describes the limitations of the existing mechanisms and provides requirements for new overload management mechanisms.",
      "ja": "直径[RFC6733]ノードは、それが正常にそれが受け取る直径要求のすべてを処理するのに十分なリソースを有する場合に、オーバーロードされると言われます。ノードが過負荷になると、それは通常、ある程度の期間のトラフィックを減らすために、クライアントに助言により、優雅にその負荷を軽減することができる必要があります。そうでなければ、それはおそらく、次第に厳しい過負荷状態になり、解析しDiameterメッセージに応答して、リソースを消費し続けなければなりません。直径が提供する既存のメカニズムは、過負荷状態を管理するのに十分ではありません。この文書では、既存のメカニズムの限界を説明し、新たな過負荷管理メカニズムのための要件を提供します。"
    },
    {
      "indent": 3,
      "text": "This document draws on the work done on SIP overload control ([RFC5390], [RFC6357]) as well as on experience gained via overload handling in Signaling System No. 7 (SS7) networks and studies done by the Third Generation Partnership Project (3GPP) (Section 3).",
      "ja": "この文書では、SIPに行われた作業に描画します（[RFC5390]、[RFC6357]）コントロールをオーバーロードだけでなく、経験上、第3世代パートナーシップ・プロジェクト（3GPPによって行わ信号システム第7号（SS7）ネットワークや研究に過負荷処理を介して得られます）（第3節）。"
    },
    {
      "indent": 3,
      "text": "Diameter is not typically an end-user protocol; rather, it is generally used as one component in support of some end-user activity.",
      "ja": "直径は、典型的には、エンドユーザーのプロトコルではありません。むしろ、それは一般的に、いくつかのエンドユーザ・アクティビティのサポートにおける一の成分として使用されます。"
    },
    {
      "indent": 3,
      "text": "For example, a SIP server might use Diameter to authenticate and authorize user access. Overload in the Diameter backend infrastructure will likely impact the experience observed by the end user in the SIP application.",
      "ja": "例えば、SIPサーバが認証し、ユーザーアクセスを許可するために直径を使用する場合があります。直径バックエンドインフラストラクチャに過負荷がおそらくSIPアプリケーションのエンドユーザによって観察経験に影響を与えます。"
    },
    {
      "indent": 3,
      "text": "The impact of Diameter overload on the client application (a client application may use the Diameter protocol and other protocols to do its job) is beyond the scope of this document.",
      "ja": "クライアント・アプリケーション（クライアントアプリケーションがその仕事をするためにDiameterプロトコル及び他のプロトコルを使用してもよい）で直径過負荷の影響は、この文書の範囲外です。"
    },
    {
      "indent": 3,
      "text": "This document presents non-normative descriptions of causes of overload, along with related scenarios and studies. Finally, it offers a set of normative requirements for an improved overload indication mechanism.",
      "ja": "この文書は、関連するシナリオと研究とともに、過負荷の原因の非規範的な記述を提示します。最後に、それが改善され、過負荷表示機構のための規範的要件のセットを提供しています。"
    },
    {
      "indent": 0,
      "text": "1.1. Documentation Conventions",
      "section_title": true,
      "ja": "1.1。マニュアルの表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as defined in [RFC2119], with the exception that they are not intended for interoperability of implementations. Rather, they are used to describe requirements towards future specifications where the interoperability requirements will be defined.",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]で定義されるように、それらは実装の相互運用性のために意図されていないことを除いて、解釈されます。むしろ、それらは相互運用性の要件が定義されるであろう将来の仕様に対する要件を記述するために使用されています。"
    },
    {
      "indent": 3,
      "text": "The terms \"client\", \"server\", \"agent\", \"node\", \"peer\", \"upstream\", and \"downstream\" are used as defined in [RFC6733].",
      "ja": "[RFC6733]で定義されるように、用語「クライアント」、「サーバ」、「薬剤」、「ノード」、「ピア」、「上流」および「下流」は、使用されています。"
    },
    {
      "indent": 0,
      "text": "1.2. Causes of Overload",
      "section_title": true,
      "ja": "1.2。過負荷の原因"
    },
    {
      "indent": 3,
      "text": "Overload occurs when an element, such as a Diameter server or agent, has insufficient resources to successfully process all of the traffic it is receiving. Resources include all of the capabilities of the element used to process a request, including CPU processing, memory, I/O, and disk resources. It can also include external resources such as a database or DNS server, in which case the CPU, processing, memory, I/O, and disk resources of those elements are effectively part of the logical element processing the request.",
      "ja": "そのようなDiameterサーバまたはエージェントなどの元素は、正常にそれが受信されるトラフィックのすべてを処理するのに十分なリソースを有している場合、過負荷が発生します。リソースはCPU処理、メモリ、I / O、およびディスクリソースを含む要求を処理するために使用される要素のすべての機能を、含まれています。それはまた、これらの要素のCPU、処理、メモリ、I / O、およびディスクリソースが効率的に要求を処理する論理要素の一部である場合には、データベースやDNSサーバなどの外部リソースを含むことができます。"
    },
    {
      "indent": 3,
      "text": "External resources can include upstream Diameter nodes; for example, a Diameter agent can become effectively overloaded if one or more upstream nodes are overloaded.",
      "ja": "外部リソースは、上流のDiameterノードを含むことができます。一つ以上の上流のノードがオーバーロードされた場合、例えば、直径剤を効果的に過負荷になることができます。"
    },
    {
      "indent": 3,
      "text": "A Diameter node can become overloaded due to request levels that exceed its capacity, a reduction of available resources (for example, a local or upstream hardware failure), or a combination of the two.",
      "ja": "Diameterノードは、その能力、利用可能な資源の減少（例えば、ローカルまたは上流のハードウェア障害）、またはこの2つの組合せを超える要求レベルに過負荷になることができます。"
    },
    {
      "indent": 3,
      "text": "Overload can occur for many reasons, including:",
      "ja": "過負荷は、多くの理由を含むが発生する可能性があります。"
    },
    {
      "indent": 3,
      "text": "Inadequate capacity: When designing Diameter networks, that is, application-layer multi-node Diameter deployments, it can be very difficult to predict all scenarios that may cause elevated traffic. It may also be more costly to implement support for some scenarios than a network operator may deem worthwhile. This results in the likelihood that a Diameter network will not have adequate capacity to handle all situations.",
      "ja": "不十分な容量：直径ネットワークを設計するとき、つまり、アプリケーション層マルチノード直径の展開は、それが高いトラフィックを引き起こす可能性があり、すべてのシナリオを予測することは非常に困難な場合があります。また、ネットワークオペレータは価値があるとみなすことができるよりも、いくつかのシナリオのサポートを実装するために、よりコストがかかる可能性があります。これは、Diameterネットワークは、すべての状況を処理するのに十分な能力を持っていないという可能性につながります。"
    },
    {
      "indent": 3,
      "text": "Dependency failures: A Diameter node can become overloaded because a resource on which it depends has failed or become overloaded, greatly reducing the logical capacity of the node. In these cases, even minimal traffic might cause the node to go into overload. Examples of such dependency overloads include DNS servers, databases, disks, and network interfaces that have failed or become overloaded.",
      "ja": "依存性障害：それが依存するリソースが大きくノードの論理容量を減少させる、過負荷故障またはなったため、Diameterノードが過負荷になることができます。これらのケースでは、さえも最小限のトラフィックは、ノードが過負荷に入る可能性があります。そのような依存オーバーロードの例には、失敗したか過負荷になっているDNSサーバ、データベース、ディスク、およびネットワークインタフェースを含みます。"
    },
    {
      "indent": 3,
      "text": "Component failures: A Diameter node can become overloaded when it is a member of a cluster of servers that each share the load of traffic and one or more of the other members in the cluster fail. In this case, the remaining nodes take over the work of the failed nodes. Normally, capacity planning takes such failures into account, and servers are typically run with enough spare capacity to handle failure of another node. However, unusual failure conditions can cause many nodes to fail at once. This is often the case with software failures, where a bad packet or bad database entry hits the same bug in a set of nodes in a cluster.",
      "ja": "コンポーネントの障害：Diameterノードは、それぞれのトラフィック負荷を共有し、クラスタ内の他のメンバーの1つ以上が故障サーバのクラスタのメンバーである場合に過負荷になることができます。この場合、残りのノードが失敗したノードの作業を引き継ぎます。通常は、キャパシティプランニングを考慮に入れ、そのような失敗を取り、サーバーは通常、別のノードの障害を処理するのに十分な余力で実行されています。しかし、異常な障害状態は、多くのノードが一度失敗する可能性があります。これは、多くの場合、不正なパケットか悪いのデータベースエントリは、クラスタ内のノードのセットで同じバグに当たったソフトウェア障害、の場合です。"
    },
    {
      "indent": 3,
      "text": "Network-initiated traffic flood: Certain access network events can precipitate floods of Diameter signaling traffic. For example, operational changes can trigger avalanche restarts, or frequent radio overlay handovers can generate excessive authorization requests. Failure of a Diameter proxy may also result in a large amount of signaling as connections and sessions are reestablished.",
      "ja": "ネットワーク開始トラフィックの洪水：特定のアクセスネットワークイベントは直径シグナリングトラフィックの洪水を沈殿させることができます。例えば、動作上の変更は、雪崩の再起動をトリガーすることができ、または頻繁ラジオオーバーレイハンドオーバは、過剰な認証要求を生成することができます。接続およびセッションが再確立されるダイアメータプロキシの障害はまた、シグナリングの多量に生じ得ます。"
    },
    {
      "indent": 3,
      "text": "Subscriber-initiated traffic flood: Large gatherings of subscribers or events that result in many subscribers interacting with the network in close time proximity can result in Diameter signaling traffic floods. For example, the finale of a large fireworks show could be immediately followed by many subscribers posting messages, pictures, and videos concentrated on one portion of a network. Subscriber devices such as smartphones may use aggressive registration strategies that generate unusually high Diameter traffic loads.",
      "ja": "加入者が開始したトラフィックの洪水：直径シグナリングトラフィックの洪水をもたらすことが近接した時間でのネットワークとの相互作用多くの加入者になり、加入者やイベントの巨大な集まり。たとえば、大規模な花火ショーのフィナーレは、すぐにネットワークの1部に集中メッセージ、写真、動画を投稿し、多くの加入者を続けることができました。スマートフォンなどの加入者装置は、異常に高い直径トラフィックの負荷を生成する積極的な登録戦略を使用することができます。"
    },
    {
      "indent": 3,
      "text": "DoS attacks: An attacker wishing to disrupt service in the network can cause a large amount of traffic to be launched at a target element. This can be done from a central source of traffic or through a distributed DoS attack. In all cases, the volume of traffic well exceeds the capacity of the element, sending the system into overload.",
      "ja": "DoS攻撃：ネットワークでサービスを中断することを望む攻撃者が大量のトラフィックをターゲット要素で発表される可能性があります。これは、トラフィックの中央のソースから、または分散DoS攻撃を介して行うことができます。全ての場合において、トラフィックの量は、十分に過負荷にシステムを送信、素子の容量を超えます。"
    },
    {
      "indent": 0,
      "text": "1.3. Effects of Overload",
      "section_title": true,
      "ja": "1.3。過負荷の影響"
    },
    {
      "indent": 3,
      "text": "Modern Diameter networks, composed of application-layer multi-node deployments of Diameter elements, may operate at very large transaction volumes. If a Diameter node becomes overloaded or, even worse, fails completely, a large number of messages may be lost very quickly. Even with redundant servers, many messages can be lost in the time it takes for failover to complete. While a Diameter client or agent should be able to retry such requests, an overloaded peer may cause a sudden large increase in the number of transactions needing to be retried, rapidly filling local queues or otherwise contributing to local overload. Therefore, Diameter devices need to be able to shed load before critical failures can occur.",
      "ja": "直径素子のアプリケーション層マルチノード展開からなる近代的直径ネットワークは、非常に大きい取引量で動作することができます。 Diameterノードが過負荷や、さらに悪いことになった場合、完全に失敗し、多数のメッセージは非常に迅速に失われることがあります。でも、冗長サーバで、多くのメッセージは、フェイルオーバーが完了するのにかかる時間内に失われることがあります。 Diameterクライアントまたはエージェントがそのような要求を再試行することができなければならないが、過負荷ピアは、再試行する必要が急速にローカルキューを充填するか、そうでなければローカル過負荷に貢献するトランザクションの数が急激に大きな増加を引き起こす可能性があります。したがって、直径デバイスは、重大な障害が発生する前に負荷を流すことができるようにする必要があります。"
    },
    {
      "indent": 0,
      "text": "1.4. Overload vs. Network Congestion",
      "section_title": true,
      "ja": "1.4。ネットワーク輻輳対過負荷"
    },
    {
      "indent": 3,
      "text": "This document uses the term \"overload\" to refer to application-layer overload at Diameter nodes. This is distinct from \"network congestion\", that is, congestion that occurs at the lower networking layers that may impact the delivery of Diameter messages between nodes. This document recognizes that element overload and network congestion are interrelated, and that overload can contribute to network congestion and vice versa.",
      "ja": "この文書は、Diameterノードにおいてアプリケーション層の過負荷を指すために、用語「過負荷」を使用します。これは、ノード間のDiameterメッセージの配信に影響を与える可能性が低いネットワーク層で発生する「ネットワークの混雑」、すなわち、渋滞とは区別されます。この文書では、その要素の過負荷やネットワークの混雑が相互に関連しており、その過負荷は、ネットワークの輻輳およびその逆に寄与することができます認識しています。"
    },
    {
      "indent": 3,
      "text": "Network congestion issues are better handled by the transport protocols. Diameter uses TCP and the Stream Control Transmission Protocol (SCTP), both of which include congestion management features. Analysis of whether those features are sufficient for transport-level congestion between Diameter nodes and of any work to further mitigate network congestion is out of scope for both this document and the work proposed by it.",
      "ja": "ネットワークの輻輳の問題は、より良いトランスポートプロトコルによって処理されます。直径は、輻輳管理機能を含む両方がTCPおよびストリーム制御伝送プロトコル（SCTP）を、使用します。これらの機能は、さらに、ネットワークの輻輳を軽減するためにDiameterノードとの間の任意のワークのトランスポート・レベルの輻輳のために十分であるかどうかの分析は、このドキュメントとそれによって提案作業の両方のための範囲の外です。"
    },
    {
      "indent": 0,
      "text": "1.5. Diameter Applications in a Broader Network",
      "section_title": true,
      "ja": "1.5。より広範なネットワークのDiameterアプリケーション"
    },
    {
      "indent": 3,
      "text": "Most elements using Diameter applications do not use Diameter exclusively. It is important to realize that overload of an element can be caused by a number of factors that may be unrelated to the processing of Diameter or Diameter applications.",
      "ja": "Diameterアプリケーションを使用してほとんどの要素は、専用の直径を使用しないでください。素子の過負荷が直径または直径アプリケーションの処理とは無関係とすることができる多くの要因によって引き起こされ得ることを理解することは重要です。"
    },
    {
      "indent": 3,
      "text": "An element that doesn't use Diameter exclusively needs to be able to signal to Diameter peers that it is experiencing overload regardless of the cause of the overload, since the overload will affect that element's ability to process Diameter transactions. If the element communicates with protocols other than Diameter, it may also need to signal the overload situation on these protocols, depending on its function and the architecture of the network and application for which it is providing services. Whether that is necessary can only be decided within the context of that architecture and use cases. This specification details the requirements for a mechanism for signaling overload with Diameter; this mechanism provides Diameter nodes the ability to inform their Diameter peers of overload, mitigating that part of the issue. Diameter nodes may need to use this, as well as other mechanisms, to solve their broader overload issues. Indicating overload on protocols other than Diameter is out of scope for this document and for the work proposed by it.",
      "ja": "過負荷が直径トランザクションを処理するために、その要素の能力に影響を与えますので、直径を使用していない要素が独占的に、それは関係なく、過負荷の原因の過負荷が発生して直径ピアに知らせることができる必要があります。エレメントが直径よりも他のプロトコルと通信する場合、それはまた、その機能と、それがサービスを提供しているネットワークとアプリケーションのアーキテクチャに応じて、これらのプロトコル上の過負荷状態をシグナリングする必要があるかもしれません。それが必要であるかどうかだけそのアーキテクチャおよび使用例コンテキスト内で決定することができます。この仕様は、直径の過負荷をシグナリングするためのメカニズムのための要件を詳述します。このメカニズムは、Diameterノードに問題の一部を軽減する、過負荷のその直径ピアに通知する機能を提供します。直径ノードは、これを使用する必要があり、ならびに他の機構、それらの広い過負荷の問題を解決することができます。直径以外のプロトコルの過負荷を示すことは、この文書の適用範囲外とそれによって提案された仕事のためです。"
    },
    {
      "indent": 0,
      "text": "2. Overload Control Scenarios",
      "section_title": true,
      "ja": "2.過負荷制御のシナリオ"
    },
    {
      "indent": 3,
      "text": "Several Diameter deployment scenarios exist that may impact overload management. The following scenarios help motivate the requirements for an overload management mechanism.",
      "ja": "いくつかの直径の展開シナリオは、過負荷管理に影響を与える可能性が存在します。次のシナリオでは、過負荷管理メカニズムのための要件を動機づけに役立ちます。"
    },
    {
      "indent": 3,
      "text": "These scenarios are by no means exhaustive and are in general simplified for the sake of clarity. In particular, this document assumes for the sake of clarity that the client sends Diameter requests to the server, and the server sends responses to the client, even though Diameter supports bidirectional applications. Each direction in such an application can be modeled separately.",
      "ja": "これらのシナリオは、決して網羅的であり、一般的に明確にするために簡略化されています。特に、この文書では、クライアントがサーバに直径リクエストを送信し、サーバは直径が双方向アプリケーションをサポートしていても、クライアントに応答を送信することを明瞭にするために想定しています。このようなアプリケーションの各方向を別々にモデル化することができます。"
    },
    {
      "indent": 3,
      "text": "In a large-scale deployment, many of the nodes represented in these scenarios would be deployed as clusters of servers. This document assumes that such a cluster is responsible for managing its own internal load-balancing and overload management so that it appears as a single Diameter node. That is, other Diameter nodes can treat it as a single, monolithic node for the purposes of overload management.",
      "ja": "大規模な展開では、これらのシナリオで表されたノードの多くは、サーバーのクラスタとして展開されるだろう。この文書では、このようなクラスタは、単一Diameterノードとして表示されるように、独自の内部負荷分散および過負荷管理を管理するための責任があることを前提としています。すなわち、他のDiameterノードは、過負荷管理の目的のために、単一の、モノリシックなノードとしてそれを扱うことができています。"
    },
    {
      "indent": 3,
      "text": "These scenarios do not illustrate the client application. As mentioned in Section 1, Diameter is not typically an end-user protocol; rather, it is generally used in support of some other client application. These scenarios do not consider the impact of Diameter overload on the client application.",
      "ja": "これらのシナリオは、クライアント・アプリケーションを示していません。第1節で述べたように、直径は、典型的には、エンドユーザーのプロトコルではありません。むしろ、それは一般的にいくつかの他のクライアントアプリケーションのサポートに使用されています。これらのシナリオは、クライアントアプリケーション上の直径の過負荷の影響を考慮していません。"
    },
    {
      "indent": 0,
      "text": "2.1. Peer-to-Peer Scenarios",
      "section_title": true,
      "ja": "2.1。ピア・ツー・ピアのシナリオ"
    },
    {
      "indent": 3,
      "text": "This section describes Diameter peer-to-peer scenarios, that is, scenarios where a Diameter client talks directly with a Diameter server, without the use of a Diameter agent.",
      "ja": "このセクションでは、Diameterピア・ツー・ピアのシナリオ、つまり、Diameterクライアントは、直径剤を使用せずに、Diameterサーバと直接話しシナリオについて説明します。"
    },
    {
      "indent": 3,
      "text": "Figure 1 illustrates the simplest possible Diameter relationship. The client and server share a one-to-one peer-to-peer relationship. If the server becomes overloaded, either because the client exceeds the server's capacity or because the server's capacity is reduced due to some resource dependency, the client needs to reduce the amount of Diameter traffic it sends to the server. Since the client cannot forward requests to another server, it must either queue requests until the server recovers or itself become overloaded in the context of the client application and other protocols it may also use.",
      "ja": "図1は、最も単純な直径の関係を示す図です。クライアントとサーバーの共有一対一のピア・ツー・ピアの関係。サーバが過負荷になった場合、どちらかのクライアントは、サーバのキャパシティを超えているためか、サーバーの容量が何らかのリソースの依存関係に縮小されるため、クライアントは、サーバに送信する直径トラフィックの量を削減する必要があります。クライアントが前方に別のサーバに要求することができないので、サーバーが回復するか、それ自体が、それはまた、使用することができ、クライアントアプリケーションと他のプロトコルの文脈で過負荷状態になるまで、それはどちらかのキューを要求しなければなりません。"
    },
    {
      "indent": 28,
      "text": "+------------------+\n|                  |\n|                  |\n|     Server       |\n|                  |\n+--------+---------+\n         |\n         |\n+--------+---------+\n|                  |\n|                  |\n|     Client       |\n|                  |\n+------------------+",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 1: Basic Peer-to-Peer Scenario",
      "ja": "図1：基本的なピア・ツー・ピアのシナリオ"
    },
    {
      "indent": 3,
      "text": "Figure 2 shows a similar scenario, except in this case the client has multiple servers that can handle work for a specific realm and application. If Server 1 becomes overloaded, the client can forward traffic to Server 2. Assuming that Server 2 has sufficient reserve capacity to handle the forwarded traffic, the client should be able to continue serving client application protocol users. If Server 1 is approaching overload, but can still handle some number of new requests, it needs to be able to instruct the client to forward a subset of its traffic to Server 2.",
      "ja": "図2は、クライアントが特定の分野やアプリケーションのための作業を処理することができ、複数のサーバーを持っている。この場合を除き、同様のシナリオを示しています。サーバ1が過負荷になった場合、クライアントは2が転送されたトラフィックを処理するのに十分な余力を持っているサーバーを想定すると、サーバ2にトラフィックを転送することができ、クライアントは、クライアントのアプリケーションプロトコルのユーザーにサービスを提供する継続することができるはずです。サーバ1は、過負荷に近づいている場合は、まだ新しい要求のいくつかの数を扱うことができ、それはサーバー2へのトラフィックのサブセットを転送するようにクライアントに指示できるようにする必要があります。"
    },
    {
      "indent": 15,
      "text": "+------------------+     +------------------+\n|                  |     |                  |\n|                  |     |                  |\n|     Server 1     |     |     Server 2     |\n|                  |     |                  |\n+--------+-`.------+     +------.'+---------+\n             `.               .'\n               `.           .'\n                 `.       .'\n                   `.   .'\n             +-------`.'--------+\n             |                  |\n             |                  |\n             |     Client       |\n             |                  |\n             +------------------+",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 2: Multiple-Server Peer-to-Peer Scenario",
      "ja": "図2：複数サーバのピア・ツー・ピアのシナリオ"
    },
    {
      "indent": 3,
      "text": "Figure 3 illustrates a peer-to-peer scenario with multiple Diameter realm and application combinations. In this example, Server 2 can handle work for both applications. Each application might have different resource dependencies. For example, a server might need to access one database for Application A and another for Application B. This creates a possibility that Server 2 could become overloaded for Application A but not for Application B, in which case the client would need to divert some part of its Application A requests to Server 1, but the client should not divert any Application B requests. This requires that Server 2 be able to distinguish between applications when it indicates an overload condition to the client.",
      "ja": "図3は、複数のDiameterレルムとアプリケーションの組合せでピアツーピアのシナリオを示します。この例では、サーバ2は、両方のアプリケーションのための作業を処理することができます。各アプリケーションは、異なるリソースの依存関係を持っているかもしれません。例えば、サーバは、このクライアントは、いくつかのパーツを流用する必要があり、その場合、サーバ2は、アプリケーションAのためではなく、アプリケーションBのために過負荷になることができる可能性を、作成したアプリケーションBのアプリケーションAと別のための1つのデータベースをアクセスする必要がありますサーバ1への応用のA要求のが、クライアントは任意のアプリケーションBの要求をそらすべきではありません。これは、クライアントへの過負荷状態を示す場合にサーバ2は、アプリケーションを区別できることが必要です。"
    },
    {
      "indent": 3,
      "text": "On the other hand, it's possible that the servers host many applications. If Server 2 becomes overloaded for all applications, it would be undesirable for it to have to notify the client separately for each application. Therefore, it also needs a way to indicate that it is overloaded for all possible applications.",
      "ja": "一方、サーバは、多くのアプリケーションをホストすることが可能です。サーバ2は、すべてのアプリケーションのために過負荷になった場合、それはアプリケーションごとに個別にクライアントに通知する必要がありますするために、それは望ましくないであろう。したがって、それはまた、それが可能なすべてのアプリケーションのために過負荷になっていることを示すための方法が必要です。"
    },
    {
      "indent": 3,
      "text": "+---------------------------------------------+\n| Application A       +----------------------+----------------------+\n|+------------------+ |  +----------------+  |  +------------------+|\n||                  | |  |                |  |  |                  ||\n||                  | |  |                |  |  |                  ||\n||     Server 1     | |  |    Server 2    |  |  |     Server 3     ||\n||                  | |  |                |  |  |                  ||\n|+--------+---------+ |  +-------+--------+  |  +-+----------------+|\n|         |           |          |           |    |                 |\n+---------+-----------+----------+-----------+    |                 |\n          |           |          |                |                 |\n          |           |          |                |  Application B  |\n          |           +----------+----------------+-----------------+\n          ``-.._                 |                |\n                `-..__           |            _.-''\n                     `--._       |        _.-''\n                          ``-._  |   _.-''\n                         +-----`-.-''-----+\n                         |                |\n                         |                |\n                         |     Client     |\n                         |                |\n                         +----------------+",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Figure 3: Multiple-Application Peer-to-Peer Scenario",
      "ja": "図3：複数のアプリケーション・ピア・ツー・ピアシナリオ"
    },
    {
      "indent": 0,
      "text": "2.2. Agent Scenarios",
      "section_title": true,
      "ja": "2.2。エージェントのシナリオ"
    },
    {
      "indent": 3,
      "text": "This section describes scenarios that include a Diameter agent, in the form of either a Diameter relay or Diameter proxy. These scenarios do not consider Diameter redirect agents, since they are more readily modeled as end servers. The examples have been kept simple deliberately, to illustrate basic concepts. Significantly more complicated topologies are possible with Diameter, including multiple intermediate agents in a path connected in a variety of ways.",
      "ja": "このセクションでは、Diameterリレーまたは直径プロキシのいずれかの形で、直径剤を含むシナリオを記述する。それらはより容易にエンドサーバーとしてモデル化されているので、これらのシナリオは、直径リダイレクトエージェントを考慮していません。例として、基本的な概念を説明するために、意図的にシンプルに保たれています。有意に、より複雑なトポロジは、さまざまな方法で接続されたパス内の複数の中間物質を含む、直径が可能です。"
    },
    {
      "indent": 3,
      "text": "Figure 4 illustrates a simple Diameter agent scenario with a single client, agent, and server. In this case, overload can occur at the server, at the agent, or both. But in most cases, client behavior is the same whether overload occurs at the server or at the agent. From the client's perspective, server overload and agent overload are the same thing.",
      "ja": "図4は、単一のクライアント、エージェント、およびサーバとの単純な直径エージェントのシナリオを示します。この場合、過負荷は、薬剤、またはその両方で、サーバで行うことができます。しかし、ほとんどの場合、クライアントの動作は、過負荷がサーバーで、またはエージェントで発生するかどうかと同じです。クライアントの観点からは、サーバーの過負荷とエージェントの過負荷は同じものです。"
    },
    {
      "indent": 27,
      "text": "+------------------+\n|                  |\n|                  |\n|     Server       |\n|                  |\n+--------+---------+\n         |\n         |\n+--------+---------+\n|                  |\n|                  |\n|      Agent       |\n|                  |\n+--------+---------+\n         |\n         |\n+--------+---------+\n|                  |\n|                  |\n|     Client       |\n|                  |\n+------------------+",
      "raw": true
    },
    {
      "indent": 22,
      "text": "Figure 4: Basic Agent Scenario",
      "ja": "図4：基本エージェントのシナリオ"
    },
    {
      "indent": 3,
      "text": "Figure 5 shows an agent scenario with multiple servers. If Server 1 becomes overloaded but Server 2 has sufficient reserve capacity, the agent may be able to transparently divert some or all Diameter requests originally bound for Server 1 to Server 2.",
      "ja": "図5は、複数のサーバとエージェントのシナリオを示しています。サーバ1が過負荷状態が、サーバ2は、十分な余力を持っているになった場合、エージェントは透過的に、もともとサーバー2にサーバー1に向かう一部またはすべての直径の要求をそらすことができるかもしれません。"
    },
    {
      "indent": 3,
      "text": "In most cases, the client does not have detailed knowledge of the Diameter topology upstream of the agent. If the agent uses dynamic discovery to find eligible servers, the set of eligible servers may not be enumerable from the perspective of the client. Therefore, in most cases the agent needs to deal with any upstream overload issues in a way that is transparent to the client. If one server notifies the agent that it has become overloaded, the notification should not be passed back to the client in a way that the client could mistakenly perceive the agent itself as being overloaded. If the set of all possible destinations upstream of the agent no longer has sufficient capacity for incoming load, the agent itself becomes effectively overloaded.",
      "ja": "ほとんどの場合、クライアントは、エージェントの上流の直径トポロジの詳細な知識を持っていません。エージェントが対象とサーバを見つけるために、動的検出を使用している場合は、対象とサーバーのセットは、クライアントの観点から、可算ではないかもしれません。そのため、ほとんどの場合、エージェントは、クライアントに対して透過的な方法で任意の上流の過負荷の問題に対処する必要があります。 1台のサーバが過負荷になってきたエージェントを通知した場合、通知は、クライアントが誤って過負荷にされているように、エージェント自体を感じることができることのようにクライアントに戻されるべきではありません。エージェントの上流のすべての可能な宛先のセットは、もはや、着信負荷のために十分な容量を持っている場合は、エージェント自体が効果的に過負荷になりません。"
    },
    {
      "indent": 3,
      "text": "On the other hand, there are cases where the client needs to be able to select a particular server from behind an agent. For example, if a Diameter request is part of a multiple-round-trip authentication, or is otherwise part of a Diameter \"session\", it may have a Destination-Host Attribute-Value Pair (AVP) that requires that the request be served by Server 1. Therefore, the agent may need to inform a client that a particular upstream server is overloaded or otherwise unavailable. Note that there can be many ways a server can be specified, which may have different implications (e.g., by IP address, by host name, etc).",
      "ja": "一方、クライアントは、エージェントの背後から特定のサーバを選択できるようにする必要が場合があります。直径要求は、複数の往復認証の一部である、またはそれ以外の場合は直径「セッション」の一部である場合、例えば、それは、宛先ホストの属性値ペア（AVP）要求が提供されている必要があります持っていることサーバ1でそのため、エージェントは、特定のアップストリームサーバーが過負荷あるいは利用できないことをクライアントに通知する必要があるかもしれません。異なる意味合い（例えば、IPアドレスによって、ホスト名で、など）を有していてもよい、サーバーを指定することができる多くの方法があることに注意してください。"
    },
    {
      "indent": 14,
      "text": "+------------------+     +------------------+\n|                  |     |                  |\n|                  |     |                  |\n|     Server 1     |     |     Server 2     |\n|                  |     |                  |\n+--------+-`.------+     +------.'+---------+\n             `.               .'\n               `.           .'\n                 `.       .'\n                   `.   .'\n             +-------`.'--------+\n             |                  |\n             |                  |\n             |     Agent        |\n             |                  |\n             +--------+---------+\n                      |\n                      |\n                      |\n             +--------+---------+\n             |                  |\n             |                  |\n             |     Client       |\n             |                  |\n             +------------------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 5: Multiple-Server Agent Scenario",
      "ja": "図5：複数サーバエージェントのシナリオ"
    },
    {
      "indent": 3,
      "text": "Figure 6 shows a scenario where an agent routes requests to a set of servers for more than one Diameter realm and application. In this scenario, if Server 1 becomes overloaded or unavailable while Server 2 still has available capacity, the agent may effectively operate at reduced capacity for Application A but at full capacity for Application B. Therefore, the agent needs to be able to report that it is overloaded for one application but not for another.",
      "ja": "図6は、エージェントのルートが複数直径レルムとアプリケーションのためのサーバのセットに要求するシナリオを示しています。サーバ2は、まだ利用可能な容量を有しているサーバ1が過負荷または使用できなくなった場合、このシナリオでは、薬剤は、効果的にアプリケーションAのための低減容量で動作してもよいが、アプリケーションBの全容量でしたがって、エージェントはそのことを報告することができる必要があります1つのアプリケーションのためではなく、別のために過負荷になっています。"
    },
    {
      "indent": 3,
      "text": "+--------------------------------------------+\n| Application A       +----------------------+----------------------+\n|+------------------+ |  +----------------+  |  +------------------+|\n||                  | |  |                |  |  |                  ||\n||                  | |  |                |  |  |                  ||\n||     Server 1     | |  |    Server 2    |  |  |     Server 3     ||\n||                  | |  |                |  |  |                  ||\n|+---------+--------+ |  +-------+--------+  |  +--+---------------+|\n|          |          |          |           |     |                |\n+----------+----------+----------+-----------+     |                |\n           |          |          |                 |                |\n           |          |          |                 | Application B  |\n           |          +----------+-----------------+----------------+\n           |                     |                 |\n            ``--.__              |                _.\n                   ``-.__        |          __.--''\n                         `--.._  |    _..--'\n                         +----``-+.''-----+\n                         |                |\n                         |                |\n                         |    Agent       |\n                         |                |\n                         +-------+--------+\n                                 |\n                                 |\n                         +-------+--------+\n                         |                |\n                         |                |\n                         |    Client      |\n                         |                |\n                         +----------------+",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 6: Multiple-Application Agent Scenario",
      "ja": "図6：複数のアプリケーションエージェントのシナリオ"
    },
    {
      "indent": 0,
      "text": "2.3. Interconnect Scenario",
      "section_title": true,
      "ja": "2.3。インターコネクトのシナリオ"
    },
    {
      "indent": 3,
      "text": "Another scenario to consider when looking at Diameter overload is that of multiple network operators using Diameter components connected through an interconnect service, e.g., using IPX (IP Packet eXchange). IPX [IR.34] is an Inter-Operator IP Backbone that provides a roaming interconnection network between mobile operators and service providers. IPX is also used to transport Diameter signaling between operators [IR.88]. Figure 7 shows two network operators with an interconnect network between them. There could be any number of these networks between any two network operators' networks.",
      "ja": "ダイアメータ過負荷を見たときに考慮すべき別のシナリオでは、IPX（IPパケット交換）を用いて、例えば、相互接続サービスを介して接続された直径のコンポーネントを使用して、複数のネットワークオペレータのものです。 IPXは、[IR.34]携帯電話事業者やサービスプロバイダ間のローミングの相互接続ネットワークを提供し、オペレータ間のIPバックボーンです。 IPXはまた、[IR.88】オペレータ間の直径シグナリングを搬送するために使用されます。図7は、それらの間の相互接続ネットワークを有する2つのネットワークオペレータを示します。任意の2つのネットワークオペレータのネットワーク間でこれらのネットワークの数に制限はありませんでした。"
    },
    {
      "indent": 3,
      "text": "            +-------------------------------------------+\n            |               Interconnect                |\n            |                                           |\n            |   +--------------+      +--------------+  |\n            |   |   Server 3   |------|   Server 4   |  |\n            |   +--------------+      +--------------+  |\n            |         .'                      `.        |\n            +------.-'--------------------------`.------+\n                 .'                               `.\n              .-'                                   `.\n------------.'-----+                             +----`.-------------\n      +----------+ |                             | +----------+\n      | Server 1 | |                             | | Server 2 |\n      +----------+ |                             | +----------+\n                   |                             |\nNetwork Operator 1 |                             | Network Operator 2\n-------------------+                             +-------------------",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Figure 7: Two-Network Interconnect Scenario",
      "ja": "図7：二ネットワークの相互接続のシナリオ"
    },
    {
      "indent": 3,
      "text": "The characteristics of the information that an operator would want to share over such a connection are different from the information shared between components within a network operator's network. For example, network operators may not want to convey topology or operational information; this would in turn limit how much overload and loading information can be sent. For the interconnect scenario shown in Figure 7, Server 2 may want to signal overload to Server 1, to affect traffic coming from Network Operator 1.",
      "ja": "オペレータは、このような接続を介して共有したい情報の特性は、ネットワークオペレータのネットワーク内のコンポーネント間で共有される情報とは異なります。例えば、ネットワークオペレータは、トポロジや動作情報を伝えたいないかもしれません。これは、ターン制限に多くの過負荷および負荷情報がどのように送信することができます。図7に示す相互接続シナリオでは、サーバ2は、ネットワーク・オペレータ1からのトラフィックに影響を与えるために、サーバ1への過負荷を通知することもできます。"
    },
    {
      "indent": 3,
      "text": "This case is distinct from those internal to a network operator's network, where there may be many more elements in a more complicated topology. Also, the elements in the interconnect network may not support Diameter overload control, and the network operators may not want the interconnect network to use overload or loading information. They may only want the information to pass through the interconnect network without further processing or action by the interconnect network, even if the elements in the interconnect network do support Diameter overload control.",
      "ja": "この場合は、より複雑なトポロジーでより多くの要素が存在し得るネットワークオペレータのネットワーク、内部のものとは区別されます。また、相互接続ネットワーク内の要素は、Diameter過負荷制御をサポートしていてもよく、ネットワークオペレータは、相互接続ネットワークが過負荷又は負荷情報を使用したくないかもしれません。彼らは、相互接続ネットワーク内の要素は、直径過負荷制御をサポートしない場合でも、情報は、相互接続ネットワークによって更なる処理又はアクションなしで相互接続ネットワークを通過することができます。"
    },
    {
      "indent": 0,
      "text": "3. Diameter Overload Case Studies",
      "section_title": true,
      "ja": "3.直径過負荷のケーススタディ"
    },
    {
      "indent": 0,
      "text": "3.1. Overload in Mobile Data Networks",
      "section_title": true,
      "ja": "3.1。モバイルデータネットワークにおける過負荷"
    },
    {
      "indent": 3,
      "text": "As the number of smartphone devices that are Third Generation (3G) and Long Term Evolution (LTE) enabled continues to expand in mobile networks, there have been situations where high signaling traffic load led to overload events at the Diameter-based Home Location Registers (HLRs) and/or Home Subscriber Servers (HSS) [TR23.843]. The root causes of the HLR overload events were manifold but included hardware failure and procedural errors. The result was high signaling traffic load on the HLR and HSS.",
      "ja": "第三世代（3G）およびロング・ターム・エボリューション（LTE）が有効になっているスマートフォンのデバイスの数は、モバイルネットワークに拡大し続けると、高いシグナリングトラフィック負荷が（直径ベースのホームロケーションレジスタでイベントをオーバーロードするために導いた状況がありましたHLR）および/またはホーム加入者サーバ（HSS）[TR23.843]。 HLR過負荷事象の根本原因は多種多様であったが、ハードウェア障害や手続きのエラーが含まれています。その結果は、HLRとHSSの高いシグナリングトラフィック負荷しました。"
    },
    {
      "indent": 3,
      "text": "The 3GPP architecture [TS23.002] makes extensive use of Diameter. It is used for mobility management [TS29.272], the IP Multimedia Subsystem (IMS) [TS29.228], and policy and charging control [TS29.212], as well as other functions. The details of the architecture are out of scope for this document, but it is worth noting that there are quite a few Diameter applications, some with quite large amounts of Diameter signaling in deployed networks.",
      "ja": "3GPPアーキテクチャ[TS23.002]は直径の広範な利用します。これは[TS29.272]、IPマルチメディアサブシステム（IMS）[TS29.228]、およびポリシーおよび制御を充電[TS29.212]、ならびに他の機能モビリティ管理のために使用されます。アーキテクチャの詳細については、この文書の範囲外であるが、それはかなりの数のDiameterアプリケーション、展開されたネットワークの直径シグナリングのかなり大量にあるいくつかあることは注目に値します。"
    },
    {
      "indent": 3,
      "text": "The 3GPP specifications do not currently address overload for Diameter applications or provide a load control mechanism equivalent to those provided in the more traditional SS7 elements in the Global System for Mobile Communications (GSM); see [TS29.002]. The capabilities specified in the 3GPP standards do not adequately address the abnormal condition where excessively high signaling traffic load situations are experienced.",
      "ja": "3GPP仕様は、現在、Diameterアプリケーションのために過負荷に対処するか、移動通信用グローバルシステム（GSM）において、より伝統的なSS7要素に設けられたものと、負荷制御機構等価を提供しません。 [TS29.002]を参照してください。 3GPP規格で指定された機能は十分に過度に高いシグナリングトラフィック負荷の状況を経験している異常状態に対応していません。"
    },
    {
      "indent": 3,
      "text": "Smartphones, which comprise an increasingly large percentage of mobile devices, contribute much more heavily, relative to non-smartphones, to the continuation of a registration surge, due to their very aggressive registration algorithms. Smartphone behavior contributes to network loading and can contribute to overload conditions. The aggressive smartphone logic is designed to:",
      "ja": "モバイル機器のますます大きな割合を構成するスマートフォンは、それらの非常に積極的な登録アルゴリズムに、登録サージの継続に、非スマートフォンに比べて、はるかに大きく貢献しています。スマートフォンの動作はロードをネットワークに貢献するとの条件をオーバーロードするために貢献することができます。積極的なスマートフォンロジックがするように設計されています。"
    },
    {
      "indent": 3,
      "text": "a. always have voice and data registration, and",
      "ja": "A。常に音声とデータの登録があり、"
    },
    {
      "indent": 3,
      "text": "b. constantly try to be on 3G or LTE data (and thus on 3G voice or Voice over LTE (VoLTE) [IR.92]) for their added benefits.",
      "ja": "B。常に3GやLTEのデータにもしよう（したがって、LTE（VoLTEのオーバー3Gの音声または音声）[IR.92]上の）その追加の利点について。"
    },
    {
      "indent": 3,
      "text": "Non-smartphones typically have logic to wait for a time period after registering successfully on voice and data.",
      "ja": "非スマートフォンは、一般的に、音声とデータで正常に登録した後の時間を待つロジックを持っています。"
    },
    {
      "indent": 3,
      "text": "The aggressive smartphone registration is problematic in two ways:",
      "ja": "積極的なスマートフォンの登録は、2つの方法で問題があります："
    },
    {
      "indent": 3,
      "text": "o first, by generating excessive signaling load towards the HSS that is ten times the load from a non-smartphone, and",
      "ja": "非スマートフォンから10倍の負荷であるHSSに向かって過大なシグナリング負荷を生成することにより、第1のO、及び"
    },
    {
      "indent": 3,
      "text": "o second, by causing continual registration attempts when a network failure affects registrations through the 3G data network.",
      "ja": "O秒、継続的な登録の試みを引き起こすことによってネットワーク障害は、3Gデータネットワークを介して、登録に影響を与える場合。"
    },
    {
      "indent": 0,
      "text": "3.2. 3GPP Study on Core Network Overload",
      "section_title": true,
      "ja": "3.2。コアネットワーク過負荷の3GPP研究"
    },
    {
      "indent": 3,
      "text": "A study in the 3GPP System Aspects working group 2 (SA2) on core network overload has produced the technical report [TR23.843]. This enumerates several causes of overload in mobile core networks, including portions that are signaled using Diameter. [TR23.843] is a work in progress and is not complete. However, it is useful for pointing out scenarios and the general need for an overload control mechanism for Diameter.",
      "ja": "コアネットワークの過負荷のグループ2（SA2）を作動3GPPシステムの態様での研究では、[TR23.843]テクニカルレポートを作成しました。これは、直径を使用してシグナリングされる部分を含むモバイルコアネットワークに過負荷のいくつかの原因を列挙する。 [TR23.843]進行中の作業であり、完全なものではありません。しかし、シナリオ及び直径に対して過負荷制御機構のための一般的な必要性を指摘するために有用です。"
    },
    {
      "indent": 3,
      "text": "It is common for mobile networks to employ more than one radio technology and to do so in an overlay fashion with multiple technologies present in the same location (such as 2nd or 3rd generation mobile technologies, along with LTE). This presents opportunities for traffic storms when issues occur on one overlay and not another as all devices that had been on the overlay with issues switch. This causes a large amount of Diameter traffic as locations and policies are updated.",
      "ja": "モバイルネットワークは、複数の無線技術を使用すると（LTEと一緒に、例えば第2又は第3世代モバイル技術などの）同じ位置に存在する複数の技術と、オーバーレイ様式でこれを行うことが一般的です。問題にオーバーレイにされていたすべてのデバイスがスイッチとして問題が1つのオーバーレイではなく、別の上に発生したときにこれは、トラフィックストームのための機会を提供します。場所とポリシーが更新されるので、これは直径大量のトラフィックが発生します。"
    },
    {
      "indent": 3,
      "text": "Another scenario called out by this study is a flood of registration and mobility management events caused by some element in the core network failing. This flood of traffic from end nodes falls under the network-initiated traffic flood category. There is likely to also be traffic resulting directly from the component failure in this case. A similar flood can occur when elements or components recover as well.",
      "ja": "本研究でアウトと呼ばれる別のシナリオは、コアネットワークの失敗で、いくつかの要素によって引き起こさ登録およびモビリティ管理イベントの洪水です。エンドノードからのトラフィックのこの洪水は、ネットワーク開始トラフィックの洪水のカテゴリに該当します。また、この場合、コンポーネントの障害から直接結果のトラフィックをする可能性があります。要素または成分が同様に回復する場合も、同様の洪水が発生する可能性があります。"
    },
    {
      "indent": 3,
      "text": "Subscriber-initiated traffic floods are also indicated in this study as an overload mechanism where a large number of mobile devices are attempting to access services at the same time, such as in response to an entertainment event or a catastrophic event.",
      "ja": "加入者が開始したトラフィックの洪水は、モバイルデバイスの大多数は、このようなエンターテイメントイベントまたは致命的なイベントに応答して、同時にサービスにアクセスしようとしている過負荷メカニズムとして、本研究で示されています。"
    },
    {
      "indent": 3,
      "text": "While this 3GPP study is concerned with the broader effects of these scenarios on wireless networks and their elements, they have implications specifically for Diameter signaling. One of the goals of this document is to provide guidance for a core mechanism that can be used to mitigate the scenarios called out by this study.",
      "ja": "この3GPPの研究は、無線ネットワークとその要素に関するこれらのシナリオのより広範な影響を懸念しているが、それらは、特に直径のシグナル伝達に影響を持っています。このドキュメントの目標の一つは、この研究によって呼び出さシナリオを軽減するために使用することができますコアメカニズムのためのガイダンスを提供することです。"
    },
    {
      "indent": 0,
      "text": "4. Existing Mechanisms",
      "section_title": true,
      "ja": "4.既存のメカニズム"
    },
    {
      "indent": 3,
      "text": "Diameter offers both implicit and explicit mechanisms for a Diameter node to learn that a peer is overloaded or unreachable. The implicit mechanism is simply the lack of responses to requests. If a client fails to receive a response in a certain time period, it assumes that the upstream peer is unavailable or is overloaded to the point of effective unavailability. The watchdog mechanism [RFC3539] ensures that transaction responses occur at a certain rate even when there is otherwise little or no other Diameter traffic.",
      "ja": "直径は、ピアが過負荷または到達不能であることを学ぶためにDiameterノードのための暗黙的および明示的の両方のメカニズムを提供します。暗黙のメカニズムは、単に要求への応答の欠如です。クライアントは、特定の期間内に応答を受信できなかった場合、それは、上流ピアが利用できない場合、または効果的な使用できないのポイントに過負荷になっていることを前提としています。ウォッチドッグ・メカニズム[RFC3539]はそうでない場合はほとんど、あるいはまったく別の直径のトラフィックがある場合でも、トランザクションの応答が一定の割合で発生していることを保証します。"
    },
    {
      "indent": 3,
      "text": "The explicit mechanism can involve specific protocol error responses, where an agent or server tells a downstream peer that it is either too busy to handle a request (DIAMETER_TOO_BUSY) or unable to route a request to an upstream destination (DIAMETER_UNABLE_TO_DELIVER) perhaps because that destination itself is overloaded to the point of unavailability.",
      "ja": "明示的なメカニズムは、エージェントまたはサーバが、おそらくその宛先自体ため上流宛先（DIAMETER_UNABLE_TO_DELIVER）に要求すぎる要求（DIAMETER_TOO_BUSY）を処理するのに忙しいまたはルートにできないのいずれかである下流のピアに通知し、特定のプロトコルエラー応答を含むことができます使用不能のポイントにオーバーロードされます。"
    },
    {
      "indent": 3,
      "text": "Another explicit mechanism, a DPR (Disconnect-Peer-Request) message, can be sent with a Disconnect-Cause of BUSY. This signals the sender's intent to close the transport connection and requests that the client not reconnect.",
      "ja": "別の明示的な機構、DPR（切断ピア - 要求）メッセージは、BUSYの切断原因で送信することができます。これは、トランスポート接続を閉じるには、送信者の意図を合図し、クライアントが再接続しないことを要求します。"
    },
    {
      "indent": 3,
      "text": "Once a Diameter node learns via one of these mechanisms that an upstream peer has become overloaded, it can then attempt to take action to reduce the load. This usually means forwarding traffic to an alternate destination, if available. If no alternate destination is available, the node must either reduce the number of messages it originates (in the case of a client) or inform the client to reduce traffic (in the case of an agent).",
      "ja": "Diameterノードは、上流ピアが過負荷となっているこれらのメカニズムのうちの1つを介して学習した後、それは、負荷を減らすために行動を取ることを試みることができます。これは通常、利用可能な場合は、別の宛先にトラフィックを転送することを意味します。いかなる代替宛先が利用できない場合、ノードは、それが（クライアントの場合）発信メッセージの数を減らすか、または（エージェントの場合）トラフィックを減らすために、クライアントに通知する必要があります。"
    },
    {
      "indent": 3,
      "text": "Diameter requires the use of a congestion-managed transport layer, currently TCP or SCTP, to mitigate network congestion. It is expected that these transports manage network congestion and that issues with transport (e.g., congestion propagation and window management) are managed at that level. But even with a congestion-managed transport, a Diameter node can become overloaded at the Diameter protocol or application layers due to the causes described in Section 1.2, and congestion-managed transports do not provide facilities (and are at the wrong level) to handle server overload. Transport-level congestion management is also not sufficient to address overload in cases of multi-hop and multi-destination signaling.",
      "ja": "直径は、ネットワークの輻輳を軽減するために、輻輳管理のトランスポート層、現在、TCPやSCTPを使用する必要があります。これらのトランスポートは、ネットワークの輻輳を管理し、輸送の問題（例えば、輻輳伝播とウィンドウ管理）は、そのレベルで管理されていることが予想されます。しかし、たとえ輻輳管理の輸送で、処理するために、Diameterノードが原因のセクション1.2に記載の原因にDiameterプロトコルやアプリケーション層での過負荷になることができ、および輻輳管理のトランスポートは、施設を提供していない（と間違ったレベルにあります）サーバーの過負荷。トランスポートレベルの輻輳管理は、マルチホップ、マルチ先シグナリングの場合には過負荷に対処するのに十分ではありません。"
    },
    {
      "indent": 0,
      "text": "5. Issues with the Current Mechanisms",
      "section_title": true,
      "ja": "現在のメカニズム5.問題"
    },
    {
      "indent": 3,
      "text": "The currently available Diameter mechanisms for indicating an overload condition are not adequate to avoid service outages due to overload. This inadequacy may, in turn, contribute to broader impacts resulting from overload due to unresponsive Diameter nodes causing application-layer or transport-layer retransmissions. In particular, they do not allow a Diameter agent or server to shed load as it approaches overload. At best, a node can only indicate that it needs to entirely stop receiving requests, i.e., that it has effectively failed. Even that is problematic due to the inability to indicate durational validity on the transient errors available in the base Diameter protocol. Diameter offers no mechanism to allow a node to indicate different overload states for different categories of messages, for example, if it is overloaded for one Diameter application but not another.",
      "ja": "過負荷状態を示すための現在利用可能な直径機構は、過負荷によるサービス停止を回避するのに十分ではありません。この不備は、順番に、起因アプリケーション層またはトランスポート層再送信を引き起こす無応答Diameterノードへの過負荷に起因する広い影響に寄与し得ます。特に、彼らはそれが過負荷に近づくにつれて直径エージェントまたはサーバーが負荷を当てることはできません。せいぜい、ノードは、それが効果的に失敗したこと、すなわち、それは完全にリクエストの受信を停止する必要があることを示すことができます。それが原因ベースDiameterプロトコルで利用可能な一時的なエラーでdurational有効性を示すことができないことに問題があります。それは1つのDiameterアプリケーションではなく、別のオーバーロードされた場合の直径は、例えば、メッセージの異なるカテゴリに異なる過負荷状態を示すために、ノードを許可するメカニズムを提供しています。"
    },
    {
      "indent": 0,
      "text": "5.1. Problems with Implicit Mechanism",
      "section_title": true,
      "ja": "5.1。暗黙的メカニズムの問題"
    },
    {
      "indent": 3,
      "text": "The implicit mechanism doesn't allow an agent or server to inform the client of a problem until it is effectively too late to do anything about it. The client does not know that it needs to take action until the upstream node has effectively failed. A Diameter node has no opportunity to shed load early to avoid collapse in the first place.",
      "ja": "暗黙のメカニズムは、効果的にそれについて何かをするには遅すぎまで、エージェントまたはサーバーが問題のクライアントに通知することはできません。上流ノードが効果的に失敗するまでクライアントは、それが行動を取る必要があることを知りません。 Diameterノードは、最初の場所での崩壊を避けるために、早期に負荷を当てるする機会を持っていません。"
    },
    {
      "indent": 3,
      "text": "Additionally, the implicit mechanism cannot distinguish between overload of a Diameter node and network congestion. Diameter treats the failure to receive an answer as a transport failure.",
      "ja": "また、暗黙の機構は、Diameterノード及びネットワークの輻輳の過負荷を区別することができません。直径は交通障害などの答えを受け取るために失敗したことを扱います。"
    },
    {
      "indent": 0,
      "text": "5.2. Problems with Explicit Mechanisms",
      "section_title": true,
      "ja": "5.2。明示的なメカニズムの問題"
    },
    {
      "indent": 3,
      "text": "The Diameter specification is ambiguous on how a client should handle receipt of a DIAMETER_TOO_BUSY response. The base specification [RFC6733] indicates that the sending client should attempt to send the request to a different peer. It makes no suggestion that the receipt of a DIAMETER_TOO_BUSY response should affect future Diameter messages in any way.",
      "ja": "直径仕様では、クライアントがDIAMETER_TOO_BUSY応答の受信をどのように処理するかについて曖昧です。基本仕様[RFC6733]は送信側クライアントが異なるピアに要求を送信することを試みるべきであることを示しています。それはDIAMETER_TOO_BUSY応答の受信がどのような方法で将来のDiameterメッセージに影響を与える必要があることを示唆するものではありません。"
    },
    {
      "indent": 3,
      "text": "The Authentication, Authorization, and Accounting (AAA) Transport Profile [RFC3539] recommends that a AAA node that receives a \"Busy\" response failover all remaining requests to a different agent or server. But while the Diameter base specification explicitly depends on [RFC3539] to define transport behavior, it does not refer to [RFC3539] in the description of behavior on receipt of a DIAMETER_TOO_BUSY error. There's a strong likelihood that at least some implementations will continue to send Diameter requests to an upstream peer even after receiving a DIAMETER_TOO_BUSY error.",
      "ja": "認証、許可、アカウンティング（AAA）トランスポートプロファイル[RFC3539]は「ビジー」応答のフェイルオーバーを、異なる薬剤またはサーバに残りのすべての要求を受信したAAAノードすることをお勧めします。直径基本仕様が明示的に搬送動作を定義するために、[RFC3539]に依存するが、それはDIAMETER_TOO_BUSYエラーを受信する動作の説明では[RFC3539]を参照していません。少なくともいくつかの実装でもDIAMETER_TOO_BUSYエラーを受信した後、上流のピアに直径要求を送信し続けるという強い可能性があります。"
    },
    {
      "indent": 3,
      "text": "BCP 41 [RFC2914] describes, among other things, how end-to-end application behavior can help avoid congestion collapse. In particular, an application should avoid sending messages that will never be delivered or processed. The DIAMETER_TOO_BUSY behavior as described in the Diameter base specification fails at this, since if an upstream node becomes overloaded, a client attempts each request and does not discover the need to failover the request until the initial attempt fails.",
      "ja": "BCP 41 [RFC2914]は、エンドツーエンドのアプリケーションの動作が輻輳崩壊を避けるためにどのように役立つか、他のもののうち、説明しています。具体的には、アプリケーションが提供されなかったり、処理する決してメッセージを送信することは避けてください。上流ノードが過負荷になった場合、クライアントは各リクエストを試み、最初の試行が失敗するまで、要求をフェイルオーバーする必要性を検出しないためのDiameterベース明細書に記載されているようにDIAMETER_TOO_BUSY挙動は、これに失敗します。"
    },
    {
      "indent": 3,
      "text": "The situation is improved if implementations follow the [RFC3539] recommendation to keep state about upstream peer overload. But even then, the Diameter specification offers no guidance on how long a client should wait before retrying the overloaded destination. If an agent or server supports multiple realms and/or applications, DIAMETER_TOO_BUSY offers no way to indicate that it is overloaded for one application but not another. A DIAMETER_TOO_BUSY error can only indicate overload at a \"whole server\" scope.",
      "ja": "実装は、上流ピア過負荷についての状態を維持する[RFC3539]勧告に従うならば、状況は改善されます。しかし、その後も、直径仕様では、クライアントが再試行する前に、オーバーロードされた目的地を待機する時間に何のガイダンスを提供しています。エージェントまたはサーバーが複数の領域および/またはアプリケーションをサポートしている場合は、DIAMETER_TOO_BUSYは、それが一つのアプリケーションではなく、別のオーバーロードされていることを示すする方法を提供しています。 DIAMETER_TOO_BUSYのエラーは、「サーバ全体」のスコープで過負荷を示すことができます。"
    },
    {
      "indent": 3,
      "text": "Agent processing of a DIAMETER_TOO_BUSY response is also problematic as described in the base specification. DIAMETER_TOO_BUSY is defined as a protocol error. If an agent receives a protocol error, it may either handle it locally or forward the response back towards the downstream peer. If a downstream peer receives the DIAMETER_TOO_BUSY response, it may stop sending all requests to the agent for some period of time, even though the agent may still be able to deliver requests to other upstream peers.",
      "ja": "基本仕様に記載されているようにDIAMETER_TOO_BUSY応答のエージェント処理も問題です。 DIAMETER_TOO_BUSYは、プロトコルエラーとして定義されています。エージェントは、プロトコルエラーを受信した場合、それはいずれかのローカルに処理またはバック下流ピアに向かって応答を転送することができます。下流のピアがDIAMETER_TOO_BUSY応答を受信した場合、それはエージェントがまだ他の上流のピアに要求を提供することであっても、しばらくの間、エージェントへのすべての要求の送信を停止します。"
    },
    {
      "indent": 3,
      "text": "DIAMETER_UNABLE_TO_DELIVER errors, or using DPR with cause code BUSY, also have no mechanisms for specifying the scope or cause of the failure, or the durational validity.",
      "ja": "DIAMETER_UNABLE_TO_DELIVERエラー、原因コードBUSYとDPRを使用するには、また、障害の範囲や原因を指定するためのメカニズム、またはdurational妥当性を持っていません。"
    },
    {
      "indent": 3,
      "text": "The issues with error responses described in [RFC6733] extend beyond the particular issues for overload control and have been addressed in an ad hoc fashion by various implementations. Addressing these in a standard way would be a useful exercise, but it is beyond the scope of this document.",
      "ja": "[RFC6733]に記載されたエラー応答の問題は、過負荷制御のための特定の問題を越えて延び、さまざまな実装によって、アドホックな方法で対処されてきました。標準的な方法でこれらに対処するに有用な運動であってもよいが、それはこのドキュメントの範囲を超えてしまいます。"
    },
    {
      "indent": 0,
      "text": "6. Extensibility and Application Independence",
      "section_title": true,
      "ja": "6.拡張性とアプリケーションの独立性"
    },
    {
      "indent": 3,
      "text": "Given the variety of scenarios in which Diameter elements can be deployed and the variety of roles they can fulfill with Diameter and other technologies, a single algorithm for handling overload may not be sufficient. For purposes of this discussion, an algorithm is inclusive of behavior for control of overload but does not encompass the general mechanism for transporting control information. This effort cannot anticipate all possible future scenarios and roles. Extensibility, particularly of algorithms used to deal with overload, will be important to cover these cases.",
      "ja": "直径要素が展開可能なシナリオの多様性と、それらが直径及び他の技術を用いて果たすことができる役割の多様な所定の過負荷を処理するための単一のアルゴリズムは十分ではないかもしれません。この議論の目的のために、このアルゴリズムは、過負荷の制御のための行動の包括的であるが、制御情報を転送するための一般的な機構を包含していません。この努力は、すべての可能な将来のシナリオと役割を予測することはできません。拡張性は、特に過負荷に対処するために使用されるアルゴリズムの、これらのケースをカバーすることが重要になります。"
    },
    {
      "indent": 3,
      "text": "Similarly, the scopes to which overload information may apply may include cases that have not yet been considered. Extensibility in this area will also be important.",
      "ja": "同様に、情報が適用される過負荷たスコープはまだ考慮されていない場合を含むことができます。この領域の拡張性も重要になります。"
    },
    {
      "indent": 3,
      "text": "The basic mechanism is intended to be application independent, that is, a Diameter node can use it across any existing and future Diameter applications and expect reasonable results. Certain Diameter applications might, however, benefit from application-specific behavior over and above the mechanism's defaults. For example, an application specification might specify relative priorities of messages or selection of a specific overload control algorithm.",
      "ja": "基本的なメカニズムは、アプリケーションに依存しないようにつまり、Diameterノードは、既存および将来のDiameterアプリケーションを渡ってそれを使用して、合理的な結果を期待できることを意図しています。特定のDiameterアプリケーションは、しかし、以上の機構のデフォルト上記のアプリケーション固有の動作の恩恵を受ける可能性があります。例えば、アプリケーション仕様は、メッセージまたは特定の過負荷制御アルゴリズムの選択の相対的な優先度を指定するかもしれません。"
    },
    {
      "indent": 0,
      "text": "7. Solution Requirements",
      "section_title": true,
      "ja": "7.ソリューションの要件"
    },
    {
      "indent": 3,
      "text": "This section proposes requirements for an improved mechanism to control Diameter overload, with the goals of addressing the issues described in Section 5 and supporting the scenarios described in Section 2. These requirements are stated primarily in terms of individual node behavior to inform the design of the improved mechanism; solution designers should keep in mind that the overall goal is improved overall system behavior across all the nodes involved, not just improved behavior from specific individual nodes.",
      "ja": "このセクションでは、これらの要件は、設計を知らせるために、個々のノードの挙動に関して主に記載されている第5節で説明している問題に対処し、セクション2で説明したシナリオをサポートする目的で、ダイアメータ過負荷を制御するための改良されたメカニズムのための要件を提案しています改良された機構。ソリューションの設計者は、全体的な目標は、単に特定の個々のノードからの行動を改善していない、関係するすべてのノードで、システム全体の動作を改善していることを心に留めておく必要があります。"
    },
    {
      "indent": 0,
      "text": "7.1. General",
      "section_title": true,
      "ja": "7.1。一般的な"
    },
    {
      "indent": 3,
      "text": "REQ 1: The solution MUST provide a communication method for Diameter nodes to exchange load and overload information.",
      "ja": "REQ：1溶液を交流負荷にDiameterノードの通信方法を提供し、情報をオーバーロードしなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 2: The solution MUST allow Diameter nodes to support overload control regardless of which Diameter applications they support. Diameter clients and agents must be able to use the received load and overload information to support graceful behavior during an overload condition. Graceful behavior under overload conditions is best described by REQ 3.",
      "ja": "REQ 2：溶液は、Diameterノードに関係なく、それらがサポートする直径アプリケーションの過負荷制御をサポートすることを可能にしなければなりません。直径のクライアントとエージェントは、過負荷状態の間、優雅な動作をサポートするために、受信した負荷および過負荷情報を使用することができなければなりません。過負荷状態の下で優雅な振る舞いは最高REQ 3によって説明されます。"
    },
    {
      "indent": 3,
      "text": "REQ 3: The solution MUST limit the impact of overload on the overall useful throughput of a Diameter server, even when the incoming load on the network is far in excess of its capacity. The overall useful throughput under load is the ultimate measure of the value of a solution.",
      "ja": "REQ 3：ソリューションは、ネットワーク上の着信負荷がその容量を超えて離れている場合でも、Diameterサーバの全体的な有用スループットに過負荷の影響を制限しなければなりません。荷重下での全体的な有用なスループットは、溶液の値の最終的な尺度です。"
    },
    {
      "indent": 3,
      "text": "REQ 4: Diameter allows requests to be sent from either side of a connection, and either side of a connection may have need to provide its overload status. The solution MUST allow each side of a connection to independently inform the other of its overload status.",
      "ja": "REQ 4：直径は、要求は、接続のどちらの側から送信することができ、接続のどちらかの側が過負荷状況を提供する必要性を有していてもよいです。溶液は、接続の各側は、独立して、過負荷状態の他に通知することを可能にしなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 5: Diameter allows nodes to determine their peers via dynamic discovery or manual configuration. The solution MUST work consistently without regard to how peers are determined.",
      "ja": "REQ 5：直径は、ノードが動的検出または手動構成を介して仲間を決定することを可能にします。ソリューションは、ピアがどのように決定されるかに関係なく、一貫して動作しなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 6: The solution designers SHOULD seek to minimize the amount of new configuration required in order to work. For example, it is better to allow peers to advertise or negotiate support for the solution, rather than to require that this knowledge be configured at each node.",
      "ja": "REQ 6：ソリューションの設計者は、動作するために必要な新しい構成の量を最小限にするために努めるべきです。例えば、ピアが広告するか、この知識が各ノードで構成されることを必要とするのではなく、解決策のサポートをネゴシエートできるようにする方がよいです。"
    },
    {
      "indent": 0,
      "text": "7.2. Performance",
      "section_title": true,
      "ja": "7.2。演奏"
    },
    {
      "indent": 3,
      "text": "REQ 7: The solution and any associated default algorithm(s) MUST ensure that the system remains stable. At some point after an overload condition has ended, the solution MUST enable capacity to stabilize and become equal to what it would be in the absence of an overload condition. Note that this also requires that the solution MUST allow nodes to shed load without introducing non-converging oscillations during or after an overload condition.",
      "ja": "REQ 7：溶液および任意の関連するデフォルトのアルゴリズム（複数可）は、システムが安定したままであることを保証しなければなりません。過負荷状態が終了した後にいくつかの時点で、溶液を安定化し、それが過負荷状態が存在しない場合にどうなるかと等しくなるように容量を有効にする必要があります。これはまた、溶液は、ノードが、過負荷状態の間または後に非収束振動を導入することなく負荷を流しすることを可能にしなければならないことを必要とすることに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "REQ 8: Supporting nodes MUST be able to distinguish current overload information from stale information.",
      "ja": "REQ 8：サポートノードは、古い情報から現在の過負荷情報を区別できなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 9: The solution MUST function across fully loaded as well as quiescent transport connections. This is partially derived from the requirement for stability in REQ 7.",
      "ja": "REQ 9：ソリューションは、完全にロードされただけでなく、静止交通機関の接続を越え機能しなければなりません。これは、部分的REQ 7における安定性のための要件に由来します。"
    },
    {
      "indent": 3,
      "text": "REQ 10: Consumers of overload information MUST be able to determine when the overload condition improves or ends.",
      "ja": "REQ 10：過負荷情報の消費者は、過負荷状態が改善または終了したときに決定できなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 11: The solution MUST be able to operate in networks of different sizes.",
      "ja": "REQ 11：溶液は、異なるサイズのネットワークで動作できなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 12: When a single network node fails, goes into overload, or suffers from reduced processing capacity, the solution MUST make it possible to limit the impact of the affected node on other nodes in the network. This helps to prevent a small-scale failure from becoming a widespread outage.",
      "ja": "REQ 12：単一のネットワーク・ノードに障害が発生し、過負荷になり、又は低減処理能力を患って、溶液は、それが可能なネットワーク内の他のノードに影響を受けたノードの影響を制限するように作るしなければなりません。これは、広範囲の停電になることから、小規模な失敗を防ぐことができます。"
    },
    {
      "indent": 3,
      "text": "REQ 13: The solution MUST NOT introduce substantial additional work for a node in an overloaded state. For example, a requirement for an overloaded node to send overload information every time it received a new request would introduce substantial work.",
      "ja": "REQ 13：ソリューションが過負荷状態のノードのためにかなりの追加作業を導入してはなりません。例えば、オーバーロードされたノードのための要件は、過負荷情報にそれが実質的な仕事を紹介する新しい要求を受けたすべての時間を送信します。"
    },
    {
      "indent": 3,
      "text": "REQ 14: Some scenarios that result in overload involve a rapid increase of traffic with little time between normal levels and levels that induce overload. The solution SHOULD provide for rapid feedback when traffic levels increase.",
      "ja": "REQ 14：過負荷につながるいくつかのシナリオでは、過負荷を誘発し、正常なレベルとレベル間の少しの時間とトラフィックの急激な増加を伴います。トラフィックレベルが増加したときに解決策を迅速にフィードバックを提供すべきです。"
    },
    {
      "indent": 3,
      "text": "REQ 15: The solution MUST NOT interfere with the congestion control mechanisms of underlying transport protocols. For example, a solution that opened additional TCP connections when the network is congested would reduce the effectiveness of the underlying congestion control mechanisms.",
      "ja": "REQ 15：溶液は、基礎となるトランスポートプロトコルの輻輳制御機構を妨害してはなりません。たとえば、ネットワークが混雑している時に、追加のTCP接続をオープンした解決策は、根本的な輻輳制御メカニズムの有効性を減少させるであろう。"
    },
    {
      "indent": 0,
      "text": "7.3. Heterogeneous Support for Solution",
      "section_title": true,
      "ja": "7.3。ソリューションのための異機種混在のサポート"
    },
    {
      "indent": 3,
      "text": "REQ 16: The solution is likely to be deployed incrementally. The solution MUST support a mixed environment where some, but not all, nodes implement it.",
      "ja": "REQ 16：ソリューションは、増分展開される可能性が高いです。解決策はいくつかが、すべてではなく、ノードがそれを実装混在環境をサポートしなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 17: In a mixed environment with nodes that support the solution and nodes that do not, the solution MUST NOT result in materially less useful throughput during overload as would have resulted if the solution were not present. It SHOULD result in less severe overload in this environment.",
      "ja": "REQ 17：ソリューションが存在しない場合生じるであろうように、溶液とそうでないノードをサポートノードとの混在環境では、解決策は、過負荷時の実質あまり有用でスループットが得られてはなりません。これは、この環境ではそれほど深刻な過負荷を生じるはずです。"
    },
    {
      "indent": 3,
      "text": "REQ 18: In a mixed environment of nodes that support the solution and nodes that do not, the solution MUST NOT preclude elements that support overload control from treating elements that do not support overload control in an equitable fashion relative to those that do. Users and operators of nodes that do not support the solution MUST NOT unfairly benefit from the solution. The solution specification SHOULD provide guidance to implementors for dealing with elements not supporting overload control.",
      "ja": "REQ 18：しない溶液とノードをサポートノードが混在する環境において、溶液はないものへの公平な様式に相対過負荷制御をサポートしていない要素を処理するから過負荷制御をサポートする要素を排除してはいけません。ソリューションをサポートしていないノードのユーザーと事業者が不当ソリューションの恩恵を受けるてはなりません。ソリューションの仕様は、過負荷制御をサポートしていない要素を扱うための実装者へのガイダンスを提供すべきです。"
    },
    {
      "indent": 3,
      "text": "REQ 19: It MUST be possible to use the solution between nodes in different realms and in different administrative domains.",
      "ja": "REQ 19：それは、異なるレルムに、異なる管理ドメイン内のノード間の溶液を使用することが可能でなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 20: Any explicit overload indication MUST be clearly distinguishable from other errors reported via Diameter.",
      "ja": "REQ 20：任意の明示的な過負荷指示は、ビア径報告他のエラーから明確に区別していなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 21: In cases where a network node fails, is so overloaded that it cannot process messages, or cannot communicate due to a network failure, it may not be able to provide explicit indications of the nature of the failure or its levels of overload. The solution MUST result in at least as much useful throughput as would have resulted if the solution were not in place.",
      "ja": "REQ 21：ネットワーク・ノードに障害が発生した場合において、それは、ネットワーク障害のためにメッセージを処理することができない、または通信できないことがオーバーロードされて、故障や過負荷のそのレベルの性質の明確な表示を提供することができないかもしれません。解決策が所定の位置になかったら生じるであろうように、溶液は、少なくとも同じくらい便利なスループットをもたらさなければなりません。"
    },
    {
      "indent": 0,
      "text": "7.4. Granular Control",
      "section_title": true,
      "ja": "7.4。きめ細かい制御"
    },
    {
      "indent": 3,
      "text": "REQ 22: The solution MUST provide a way for a node to throttle the amount of traffic it receives from a peer node. This throttling SHOULD be graded so that it can be applied gradually as offered load increases. Overload is not a binary state; there may be degrees of overload.",
      "ja": "REQ 22：溶液は、ノードがピア・ノードから受信したトラフィックの量を絞るための方法を提供しなければなりません。それが提供された負荷が増加するにつれて徐々に適用することができるように、この調整は、傾斜されるべきです。過負荷は、バイナリ状態ではありません。過負荷の程度があるかもしれません。"
    },
    {
      "indent": 3,
      "text": "REQ 23: The solution MUST provide sufficient information to enable a load-balancing node to divert messages that are rejected or otherwise throttled by an overloaded upstream node to other upstream nodes that are the most likely to have sufficient capacity to process them.",
      "ja": "REQ 23：ソリューションが拒否、あるいはそれらを処理するのに十分な容量を持っている可能性が最も高い他の上流のノードに過負荷の上流ノードで絞られたメッセージをそらすために、負荷分散ノードを有効にするために十分な情報を提供しなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 24: The solution MUST provide a mechanism for indicating load levels, even when not in an overload condition, to assist nodes in making decisions to prevent overload conditions from occurring.",
      "ja": "REQ 24：溶液が生じるから過負荷状態を防止するために意思決定のノードを支援するために、さらには過負荷状態で、負荷のレベルを示すための機構を提供しなければなりません。"
    },
    {
      "indent": 0,
      "text": "7.5. Priority and Policy",
      "section_title": true,
      "ja": "7.5。優先度と方針"
    },
    {
      "indent": 3,
      "text": "REQ 25: The base specification for the solution SHOULD offer general guidance on which message types might be desirable to send or process over others during times of overload, based on application-specific considerations. For example, it may be more beneficial to process messages for existing sessions ahead of new sessions. Some networks may have a requirement to give priority to requests associated with emergency sessions. Any normative or otherwise detailed definition of the relative priorities of message types during an overload condition will be the responsibility of the application specification.",
      "ja": "REQ 25：ソリューションの基本仕様は、メッセージ・タイプは、アプリケーション固有の考慮事項に基づいて、過負荷の時間中に他人を介して送信または処理することが望ましいかもしれないれている一般的なガイダンスを提供するべきです。例えば、先に新規セッションの既存のセッションのためのメッセージを処理する方が有益であろう。ネットワークによっては、緊急セッションに関連付けられたリクエストを優先する必要性を有することができます。過負荷状態の間のメッセージ・タイプの相対的な優先順位の任意の規範または他の詳細な定義は、アプリケーション仕様の責任であろう。"
    },
    {
      "indent": 3,
      "text": "REQ 26: The solution MUST NOT prevent a node from prioritizing requests based on any local policy, so that certain requests are given preferential treatment, given additional retransmission, not throttled, or processed ahead of others.",
      "ja": "REQ 26：溶液は、特定の要求が優遇与えられているように、与えられた追加の再送、絞り、又は先に他の処理されない、任意のローカルポリシーに基づいて要求を優先順位付けからノードを妨げてはなりません。"
    },
    {
      "indent": 0,
      "text": "7.6. Security",
      "section_title": true,
      "ja": "7.6。セキュリティ"
    },
    {
      "indent": 3,
      "text": "REQ 27: The solution MUST NOT provide new vulnerabilities to malicious attack or increase the severity of any existing vulnerabilities. This includes vulnerabilities to DoS and DDoS attacks as well as replay and man-in-the-middle attacks. Note that the Diameter base specification [RFC6733] lacks end-to-end security, and this must be considered (see Security Considerations in this document (Section 8)). Note",
      "ja": "REQ 27：ソリューションは、悪意のある攻撃に新たな脆弱性を提供したり、既存の脆弱性の深刻度を高めてはなりません。これはDoS攻撃への脆弱性とDDoS攻撃だけでなく、リプレイやman-in-the-middle攻撃が含まれています。直径基本仕様[RFC6733]は、エンドツーエンドのセキュリティを欠いている、そしてこれが（この文書のセキュリティの考慮事項（セクション8）を参照）を考慮しなければならないことに留意されたいです。注意"
    },
    {
      "indent": 11,
      "text": "that this requirement was expressed at a high level so as to\nnot preclude any particular solution.  Is is expected that\nthe solution will address this in more detail.",
      "raw": true
    },
    {
      "indent": 3,
      "text": "REQ 28: The solution MUST NOT depend on being deployed in environments where all Diameter nodes are completely trusted. It SHOULD operate as effectively as possible in environments where other nodes are malicious; this includes preventing malicious nodes from obtaining more than a fair share of service. Note that this does not imply any responsibility on the solution to detect, or take countermeasures against, malicious nodes.",
      "ja": "REQ 28：ソリューションは、すべてのDiameterノードが完全に信頼されている環境に展開されているに依存してはなりません。それは、他のノードが悪意ある環境で可能な限り効果的に動作しなければなりません。これはサービスの公正な取り分より多くを得ることから、悪意のあるノードを防止することが含まれます。これは検出するソリューションに一切の責任を暗示、または、悪意のあるノード対策を取らないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "REQ 29: It MUST be possible for a supporting node to make authorization decisions about what information will be sent to peer nodes based on the identity of those nodes. This allows a domain administrator who considers the load of their nodes to be sensitive information to restrict access to that information. Of course, in such cases, there is no expectation that the solution itself will help prevent overload from that peer node.",
      "ja": "REQ 29：サポートするノードは、それらのノードの識別情報に基づいてノードをピアに送信されますどのような情報についての認可決定を下すすることが可能でなければなりません。これは彼らのノードの負荷は、その情報へのアクセスを制限する機密情報であると考えて、ドメイン管理者を可能にします。もちろん、そのような場合には、溶液自体がそのピア・ノードからの過負荷を防ぐのを助けるであろうことは期待されていません。"
    },
    {
      "indent": 3,
      "text": "REQ 30: The solution MUST NOT interfere with any Diameter-compliant method that a node may use to protect itself from overload from non-supporting nodes or from denial-of-service attacks.",
      "ja": "REQ 30：溶液ノードが非サポートノードから、またはサービス拒否攻撃からの過負荷から自身を保護するために使用することができる任意の直径準拠法を妨害してはなりません。"
    },
    {
      "indent": 0,
      "text": "7.7. Flexibility and Extensibility",
      "section_title": true,
      "ja": "7.7。柔軟性と拡張性"
    },
    {
      "indent": 3,
      "text": "REQ 31: There are multiple situations where a Diameter node may be overloaded for some purposes but not others. For example, this can happen to an agent or server that supports multiple applications, or when a server depends on multiple external resources, some of which may become overloaded while others are fully available. The solution MUST allow Diameter nodes to indicate overload with sufficient granularity to allow clients to take action based on the overloaded resources without unreasonably forcing available capacity to go unused. The solution MUST support specification of overload information with granularities of at least \"Diameter node\", \"realm\", and \"Diameter application\" and MUST allow extensibility for others to be added in the future.",
      "ja": "REQ 31：Diameterノードは、いくつかの目的ではなく、他人のために過負荷にすることができる複数の状況があります。例えば、これは、複数のアプリケーションをサポートするエージェントまたはサーバに起こることができ、またはサーバーが複数の外部リソースに依存する場合、他は完全に利用可能であるが、そのうちのいくつかは、過負荷になることがあります。ソリューションは、Diameterノードは、クライアントが不当に使用されていない行くために利用可能な容量を強制することなく、オーバーロードのリソースに基づいてアクションを実行するのに十分な粒度での過負荷を示すために許容しなければなりません。溶液は、少なくとも「Diameterノード」、「レルム」、および「Diameterアプリケーション」の粒度と過負荷情報の仕様をサポートしなければならないし、他の人が将来的に追加するための拡張を可能にしなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 32: The solution MUST provide a method for extending the information communicated and the algorithms used for overload control.",
      "ja": "REQ 32：溶液が通信される情報を拡張するための方法および過負荷制御のために使用されるアルゴリズムを提供しなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 33: The solution MUST provide a default algorithm that is mandatory to implement.",
      "ja": "REQ 33：ソリューションを実装するために必須であるデフォルトのアルゴリズムを提供しなければなりません。"
    },
    {
      "indent": 3,
      "text": "REQ 34: The solution SHOULD provide a method for exchanging overload and load information between elements that are connected by intermediaries that do not support the solution.",
      "ja": "REQ 34：溶液は、溶液をサポートしない仲介により接続される要素間過負荷および負荷情報を交換するための方法を提供すべきです。"
    },
    {
      "indent": 0,
      "text": "8. Security Considerations",
      "section_title": true,
      "ja": "8.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "A Diameter overload control mechanism is primarily concerned with the load-related and overload-related behavior of nodes in a Diameter network, and the information used to affect that behavior. Load and overload information is shared between nodes and directly affects the behavior, and thus the information is potentially vulnerable to a number of methods of attack.",
      "ja": "ダイアメータ過負荷制御機構は、Diameterネットワーク内のノードの負荷に関連し、過負荷に関連する動作、およびその動作に影響を与えるために使用される情報と主に関するものです。負荷と過負荷情報はノード間で共有し、直接行動に影響を与え、ひいては情報は、攻撃の多くの方法に潜在的に脆弱です。"
    },
    {
      "indent": 3,
      "text": "Load and overload information may also be sensitive from both business and network protection viewpoints. Operators of Diameter equipment want to control the visibility of load and overload information to keep it from being used for competitive intelligence or for targeting attacks. It is also important that the Diameter overload control mechanism not introduce any way in which any other information carried by Diameter is sent inappropriately.",
      "ja": "ロードおよび過負荷情報も、ビジネスやネットワーク保護の観点から感受性がある可能性があります。直径機器のオペレータは、負荷の可視性を制御し、競合他社の情報のためまたは攻撃を標的とするために使用されているから、それを維持するために情報をオーバーロードします。直径過負荷制御機構は直径によって運ばれる他の情報が不適切に送信される任意の方法を導入しないことも重要です。"
    },
    {
      "indent": 3,
      "text": "Note that the Diameter base specification [RFC6733] lacks end-to-end security, making it difficult for non-adjacent nodes to verify the authenticity and ownership of load and overload information. Authentication of load and overload information helps to alleviate several of the security issues listed in this section.",
      "ja": "直径基本仕様[RFC6733]は、それが困難な非隣接ノードが負荷と過負荷情報の信憑性および所有権を確認するために作る、エンドツーエンドのセキュリティを欠いていることに留意されたいです。負荷および過負荷情報の認証は、このセクションに記載されているセキュリティ上の問題のいくつかを軽減するのに役立ちます。"
    },
    {
      "indent": 3,
      "text": "This document includes requirements intended to mitigate the effects of attacks and to protect the information used by the mechanism. This section discusses potential security considerations for overload control solutions. This discussion provides the motivation for several normative requirements described in Section 7. The discussion includes specific references to the normative requirements that apply for each issue.",
      "ja": "この文書では、攻撃の影響を軽減するために機構で使用される情報を保護することを目的と要件が含まれています。このセクションでは、過負荷制御ソリューションのための潜在的なセキュリティの考慮事項について説明します。この議論は議論がそれぞれの問題に適用する規範的要件に固有の参照が含まれ、セクション7に記載されているいくつかの規範的要件のための動機を提供します。"
    },
    {
      "indent": 0,
      "text": "8.1. Access Control",
      "section_title": true,
      "ja": "8.1。アクセス制御"
    },
    {
      "indent": 3,
      "text": "To control the visibility of load and overload information, sending should be subject to some form of authentication and authorization of the receiver. It is also important to the receivers that they are confident the load and overload information they receive is from a legitimate source. REQ 28 requires that the solution work without assuming that all Diameter nodes in a network are trusted for the purposes of exchanging overload and load information. REQ 29 requires that the solution let nodes restrict unauthorized parties from seeing overload information. Note that this implies a certain amount of configurability on the nodes supporting the Diameter overload control mechanism.",
      "ja": "負荷の可視性を制御し、情報を過負荷、送信することは、受信機の認証および認可のいくつかのフォームを受けるべきです。彼らが受ける負荷および過負荷情報が正当なソースからのもので自信を持っていることも、受信機にとって重要です。 REQ 28は、ネットワーク内のすべてのDiameterノードが過負荷と負荷情報を交換する目的のために信頼されていると仮定することなく、その溶液の作業を必要とします。 REQ 29は、ソリューションは、ノードが過負荷情報を見てから権限のない者を制限させていることが必要です。これは直径過負荷制御機構を支持するノードで構成可能のある量を意味することに注意してください。"
    },
    {
      "indent": 0,
      "text": "8.2. Denial-of-Service Attacks",
      "section_title": true,
      "ja": "8.2。サービス拒否攻撃"
    },
    {
      "indent": 3,
      "text": "An overload control mechanism provides a very attractive target for denial-of-service attacks. A small number of messages may effect a large service disruption by falsely reporting overload conditions. Alternately, attacking servers nearing, or in, overload may also be facilitated by disrupting their overload indications, potentially preventing them from mitigating their overload condition.",
      "ja": "過負荷制御機構は、サービス拒否攻撃のために非常に魅力的な標的を提供します。メッセージの数が少ない誤って過負荷状態を報告することにより、大規模なサービス中断をもたらすことができます。代わりに、サーバの間近、またはで攻撃、過負荷にも潜在的に彼らの過負荷状態を緩和するからそれらを防ぐ、その過負荷表示を破壊することによって容易にすることができます。"
    },
    {
      "indent": 3,
      "text": "A design goal for the Diameter overload control mechanism is to minimize or eliminate the possibility of using the mechanism for this type of attack. More strongly, REQ 27 forbids the solution from introducing new vulnerabilities to malicious attack. Additionally, REQ 30 stipulates that the solution not interfere with other mechanisms used for protection against denial-of-service attacks.",
      "ja": "直径過負荷制御機構の設計目標は、この種の攻撃のためのメカニズムを使用しての可能性を最小限にするかまたは排除することです。より強く、REQ 27は、悪意のある攻撃に新たな脆弱性を導入するからソリューションを禁止します。また、REQ 30は、ソリューションは、サービス拒否攻撃に対する保護のために使用される他のメカニズムに干渉しないことを規定しています。"
    },
    {
      "indent": 3,
      "text": "As the intent of some denial-of-service attacks is to induce overload conditions, an effective overload control mechanism should help to mitigate the effects of such an attack.",
      "ja": "いくつかのサービス拒否攻撃の意図が過負荷状態を誘発することがあるので、効果的な過負荷制御機構は、このような攻撃の影響を軽減するために役立つはずです。"
    },
    {
      "indent": 0,
      "text": "8.3. Replay Attacks",
      "section_title": true,
      "ja": "8.3。リプレイ攻撃"
    },
    {
      "indent": 3,
      "text": "An attacker that has managed to obtain some messages from the overload control mechanism may attempt to affect the behavior of nodes supporting the mechanism by sending those messages at potentially inopportune times. In addition to time shifting, replay attacks may send messages to other nodes as well (target shifting).",
      "ja": "過負荷制御機構からいくつかのメッセージを得ることに成功した攻撃者は、潜在的に都合の悪い時期にそれらのメッセージを送信することにより、支持機構のノードの動作に影響を与えることを試みることができます。時間シフトに加えて、リプレイ攻撃は、他のノードに（目標シフトを）メッセージを送信することができます。"
    },
    {
      "indent": 3,
      "text": "A design goal for the Diameter overload control solution is to minimize or eliminate the possibility of causing disruption by using a replay attack on the Diameter overload control mechanism. (Allowing a replay attack using the overload control solution would violate REQ 27.)",
      "ja": "ダイアメータ過負荷制御ソリューションの設計目標は、Diameter過負荷制御機構にリプレイ攻撃を使用して混乱を引き起こす可能性を最小化または除去することです。 （REQ 27に違反する過負荷制御ソリューションを使用して、リプレイ攻撃を許可）"
    },
    {
      "indent": 0,
      "text": "8.4. Man-in-the-Middle Attacks",
      "section_title": true,
      "ja": "8.4。 man-in-the-middle攻撃"
    },
    {
      "indent": 3,
      "text": "By inserting themselves between two nodes supporting the Diameter overload control mechanism, an attacker may potentially both access and alter the information sent between those nodes. This can be used for information gathering for business intelligence and attack targeting, as well as direct attacks.",
      "ja": "ダイアメータ過負荷制御機構を支持する2つのノード間自身を挿入することにより、攻撃者はこれらのノード間で送信される情報にアクセスし、両方変更することができます。これは、ビジネス・インテリジェンスと攻撃ターゲティングのための情報収集だけでなく、直接攻撃に使用することができます。"
    },
    {
      "indent": 3,
      "text": "REQs 27, 28, and 29 imply a need to prevent man-in-the-middle attacks on the overload control solution. A transport using Transport Layer Security (TLS) and/or IPsec may be desirable for this purpose.",
      "ja": "REQS 27、28、および29は、過負荷制御ソリューションのman-in-the-middle攻撃を防止するための必要性を示唆しています。トランスポート層セキュリティ（TLS）を使用して、および/またはIPsecのトランスポートは、この目的のために望ましいかもしれません。"
    },
    {
      "indent": 0,
      "text": "8.5. Compromised Hosts",
      "section_title": true,
      "ja": "8.5。妥協ホスト"
    },
    {
      "indent": 3,
      "text": "A compromised host that supports the Diameter overload control mechanism could be used for information gathering as well as for sending malicious information to any Diameter node that would normally accept information from it. While it is beyond the scope of the Diameter overload control mechanism to mitigate any operational interruption to the compromised host, REQs 28 and 29 imply a need to minimize the impact that a compromised host can have on other nodes through the use of the Diameter overload control mechanism. Of course, a compromised host could be used to cause damage in a number of other ways. This is out of scope for a Diameter overload control mechanism.",
      "ja": "直径過負荷制御機構をサポート損なわホストは、情報収集のために、ならびに、通常、そこから情報を受け入れる任意の直径ノードに悪意のある情報を送信するために使用することができます。それが損なわホストへ動作中断を軽減する直径過負荷制御機構の範囲を超えている間、REQS 28及び29は、Diameter過負荷制御の使用を介して他のノード上の妥協ホストが持つことができる影響を最小化する必要性を暗示します機構。もちろん、妥協ホストは、他のいくつかの方法で損傷を引き起こすために使用することができます。これは、直径過負荷制御機構のための範囲外です。"
    },
    {
      "indent": 0,
      "text": "9. References",
      "section_title": true,
      "ja": "9.参考文献"
    },
    {
      "indent": 0,
      "text": "9.1. Normative References",
      "section_title": true,
      "ja": "9.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC6733] Fajardo, V., Arkko, J., Loughney, J., and G. Zorn, \"Diameter Base Protocol\", RFC 6733, October 2012.",
      "ja": "[RFC6733]ファハルド、V.、Arkko、J.、Loughney、J.、およびG.ゾルン、 \"直径ベースプロトコル\"、RFC 6733、2012年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC2914] Floyd, S., \"Congestion Control Principles\", BCP 41, RFC 2914, September 2000.",
      "ja": "[RFC2914]フロイド、S.、 \"輻輳制御の原理\"、BCP 41、RFC 2914、2000年9月。"
    },
    {
      "indent": 3,
      "text": "[RFC3539] Aboba, B. and J. Wood, \"Authentication, Authorization and Accounting (AAA) Transport Profile\", RFC 3539, June 2003.",
      "ja": "[RFC3539] Aboba、B.、およびJ.ウッド、 \"認証、認可およびアカウンティング（AAA）のトランスポート・プロファイル\"、RFC 3539、2003年6月。"
    },
    {
      "indent": 0,
      "text": "9.2. Informative References",
      "section_title": true,
      "ja": "9.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC5390] Rosenberg, J., \"Requirements for Management of Overload in the Session Initiation Protocol\", RFC 5390, December 2008.",
      "ja": "[RFC5390]ローゼンバーグ、J.、「セッション開始プロトコルにおける過負荷の管理のための要件」、RFC 5390、2008年12月。"
    },
    {
      "indent": 3,
      "text": "[RFC6357] Hilt, V., Noel, E., Shen, C., and A. Abdelal, \"Design Considerations for Session Initiation Protocol (SIP) Overload Control\", RFC 6357, August 2011.",
      "ja": "[RFC6357]柄、V.、ノエル、E.、シェン、C.、およびA. Abdelal、RFC 6357、2011年8月 \"セッション開始プロトコル（SIP）過負荷制御のための設計上の考慮事項\"。"
    },
    {
      "indent": 3,
      "text": "[TR23.843] 3GPP, \"Study on Core Network (CN) overload solutions\", TR 23.843 1.2.0, Work in Progress, October 2013.",
      "ja": "[TR23.843] 3GPP、 \"コアネットワーク（CN）、過負荷・ソリューションに関する研究\"、TR 23.843 1.2.0、進歩、2013年10月での作業。"
    },
    {
      "indent": 3,
      "text": "[IR.34] GSMA, \"Inter-Service Provider IP Backbone Guidelines\", IR 34 9.1, May 2013.",
      "ja": "[IR.34] GSMA、 \"インターサービスプロバイダーIPバックボーンのガイドライン\"、IR 34 9.1、2013年5月。"
    },
    {
      "indent": 3,
      "text": "[IR.88] GSMA, \"LTE Roaming Guidelines\", IR 88 9.0, January 2013.",
      "ja": "[IR.88] GSMA、LTEローミングのガイドライン」、および9.0 88、2013年1月。"
    },
    {
      "indent": 3,
      "text": "[IR.92] GSMA, \"IMS Profile for Voice and SMS\", IR 92 7.0, March 2013.",
      "ja": "[IR.92] GSMA、 \"音声およびSMSのためのIMSプロファイル\"、IR 92 7.0、2013年3月。"
    },
    {
      "indent": 3,
      "text": "[TS23.002] 3GPP, \"Network Architecture\", TS 23.002 12.2.0, June 2013.",
      "ja": "[TS23.002] 3GPP、 \"ネットワークアーキテクチャ\"、TS 23.002 12.2.0、2013年6月。"
    },
    {
      "indent": 3,
      "text": "[TS29.272] 3GPP, \"Evolved Packet System (EPS); Mobility Management Entity (MME) and Serving GPRS Support Node (SGSN) related interfaces based on Diameter protocol\", TS 29.272 12.2.0, September 2013.",
      "ja": "[TS29.272] 3GPP、 \"進化型パケットシステム（EPS）モビリティ管理エンティティ（MME）とGPRSサポートノードDiameterプロトコルに基づく（SGSN）関連インタフェースサービング\"、TS 29.272 12.2.0を、2013年9月。"
    },
    {
      "indent": 3,
      "text": "[TS29.212] 3GPP, \"Policy and Charging Control (PCC) over Gx/Sd reference point\", TS 29.212 12.2.0, September 2013.",
      "ja": "[TS29.212] 3GPP、 \"ポリシーおよび課金制御のGx / SD基準点上（PCC）\"、TS 29.212 12.2.0、2013年9月。"
    },
    {
      "indent": 3,
      "text": "[TS29.228] 3GPP, \"IP Multimedia (IM) Subsystem Cx and Dx interfaces; Signalling flows and message contents\", TS 29.228 12.0.0, September 2013.",
      "ja": "[TS29.228] 3GPP、 \"IPマルチメディア（IM）サブシステムCxとDxとし、インターフェース、シグナリングフロー及びメッセージの内容\"、TS 29.228 12.0.0 2013年9月。"
    },
    {
      "indent": 3,
      "text": "[TS29.002] 3GPP, \"Mobile Application Part (MAP) specification\", TS 29.002 12.2.0, September 2013.",
      "ja": "[TS29.002] 3GPP、 \"モバイルアプリケーションパート（MAP）仕様\"、TS 29.002 12.2.0、2013年9月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Contributors",
      "ja": "付録A.協力者"
    },
    {
      "indent": 3,
      "text": "Significant contributions to this document were made by Adam Roach and Eric Noel.",
      "ja": "このドキュメントへの重要な貢献は、アダムローチとエリック・ノエルによって作られました。"
    },
    {
      "indent": 0,
      "text": "Appendix B. Acknowledgements",
      "ja": "付録B.謝辞"
    },
    {
      "indent": 3,
      "text": "Review of, and contributions to, this specification by Martin Dolly, Carolyn Johnson, Jianrong Wang, Imtiaz Shaikh, Jouni Korhonen, Robert Sparks, Dieter Jacobsohn, Janet Gunn, Jean-Jacques Trottin, Laurent Thiebaut, Andrew Booth, and Lionel Morand were most appreciated. We would like to thank them for their time and expertise.",
      "ja": "レビュー、およびへの貢献、マーティンドリー、キャロリン・ジョンソン、Jianrong王、Imtiazシェイク、Jouni Korhonen、ロバート・スパークス、ディーターJacobsohn、ジャネット・ガン、ジャン・ジャック・Trottin、ローランThiebaut、アンドリュー・ブース、そしてライオネル・モランによって、この仕様であった最も感謝。私たちは、自分の時間と専門知識のためにそれらを感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Eric McMurry Oracle 17210 Campbell Rd. Suite 250 Dallas, TX 75252 US",
      "ja": "エリック・マクマリーオラクル17210キャンベルRdを。スイート250、ダラス、TX 75252米国"
    },
    {
      "indent": 3,
      "text": "EMail: emcmurry@computer.org",
      "ja": "メールアドレス：emcmurry@computer.org"
    },
    {
      "indent": 3,
      "text": "Ben Campbell Oracle 17210 Campbell Rd. Suite 250 Dallas, TX 75252 US",
      "ja": "ベン・キャンベルオラクル17210キャンベルRdを。スイート250、ダラス、TX 75252米国"
    },
    {
      "indent": 3,
      "text": "EMail: ben@nostrum.com",
      "ja": "メールアドレス：ben@nostrum.com"
    }
  ]
}