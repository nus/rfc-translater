{
  "title": {
    "text": "RFC 7158 - The JavaScript Object Notation (JSON) Data Interchange Format",
    "ja": "RFC 7158 - JavaScriptのオブジェクト表記法（JSON）データ交換フォーマット"
  },
  "number": 7158,
  "created_at": "2019-10-29 10:57:50.582555+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                      T. Bray, Ed.\nRequest for Comments: 7158                                  Google, Inc.\nObsoletes: 4627                                               March 2013\nCategory: Standards Track\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 5,
      "text": "The JavaScript Object Notation (JSON) Data Interchange Format",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.",
      "ja": "JavaScriptのオブジェクト表記法（JSON）は、軽量、テキストベースの、言語に依存しないデータ交換フォーマットです。これは、ECMAScriptのプログラミング言語の標準から派生しました。 JSONは、構造化データのポータブル表現するための規則の書式の小さなセットを定義します。"
    },
    {
      "indent": 3,
      "text": "This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.",
      "ja": "この文書では、JSONの他の仕様に矛盾を取り除く修理仕様の誤り、および経験に基づく相互運用性のガイダンスを提供しています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 5741のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7158.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7158で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2013 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2013 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 3,
      "text": "This document may contain material from IETF Documents or IETF Contributions published or made publicly available before November 10, 2008. The person(s) controlling the copyright in some of this material may not have granted the IETF Trust the right to allow modifications of such material outside the IETF Standards Process. Without obtaining an adequate license from the person(s) controlling the copyright in such materials, this document may not be modified outside the IETF Standards Process, and derivative works of it may not be created outside the IETF Standards Process, except to format it for publication as an RFC or to translate it into languages other than English.",
      "ja": "この材料の一部がIETFトラストにこのような材料の変更を許可する権利を与えられていない可能性がありますにこの文書は、2008年、IETFドキュメントまたは11月10日以前に発行または公開さIETF貢献から著作権を支配する者（複数可）材料を含んでいてもよいですIETF標準化プロセスの外。そのような材料の著作権を管理者（単数または複数）から適切なライセンスを取得することなく、この文書は、IETF標準化過程の外側修正されないかもしれません、そして、それの派生物は、IETF標準化過程の外側に作成されない場合があり、それをフォーマットする以外出版RFCとして、英語以外の言語に翻訳します。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Conventions Used in This Document ..........................4\n   1.2. Specifications of JSON .....................................4\n   1.3. Introduction to This Revision ..............................4\n2. JSON Grammar ....................................................4\n3. Values ..........................................................5\n4. Objects .........................................................6\n5. Arrays ..........................................................6\n6. Numbers .........................................................6\n7. Strings .........................................................8\n8. String and Character Issues .....................................9\n   8.1. Character Encoding .........................................9\n   8.2. Unicode Characters .........................................9\n   8.3. String Comparison ..........................................9\n9. Parsers ........................................................10\n10. Generators ....................................................10\n11. IANA Considerations ...........................................10\n12. Security Considerations .......................................11\n13. Examples ......................................................12\n14. Contributors ..................................................13\n15. References ....................................................13\n   15.1. Normative References .....................................13\n   15.2. Informative References ...................................13\nAppendix A. Changes from RFC 4627 .................................15",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "JavaScript Object Notation (JSON) is a text format for the serialization of structured data. It is derived from the object literals of JavaScript, as defined in the ECMAScript Programming Language Standard, Third Edition [ECMA-262].",
      "ja": "JavaScriptのオブジェクト表記（JSON）は、構造化されたデータのシリアル化のためにテキスト形式です。 ECMAScriptのプログラミング言語標準第3版[ECMA-262]で定義されるように、それは、JavaScriptをオブジェクトリテラルから誘導されます。"
    },
    {
      "indent": 3,
      "text": "JSON can represent four primitive types (strings, numbers, booleans, and null) and two structured types (objects and arrays).",
      "ja": "JSONは、4つの基本型（文字列、数値、ブール値、およびnull）と2つの構造型（オブジェクトや配列）を表すことができます。"
    },
    {
      "indent": 3,
      "text": "A string is a sequence of zero or more Unicode characters [UNICODE]. Note that this citation references the latest version of Unicode rather than a specific release. It is not expected that future changes in the UNICODE specification will impact the syntax of JSON.",
      "ja": "文字列は、ゼロ以上のUnicode文字[UNICODE]の配列です。この引用は、Unicodeの最新バージョンではなく、特定のリリースを参照することに注意してください。 Unicode仕様の将来の変化は、JSONの構文に影響を与えることが期待されていません。"
    },
    {
      "indent": 3,
      "text": "An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array.",
      "ja": "オブジェクトは、名前が文字列であり、ゼロ以上の名前/値の組の順序付けられていないコレクションであり、値は、文字列、数値、ブール値、ヌル、オブジェクト、または配列です。"
    },
    {
      "indent": 3,
      "text": "An array is an ordered sequence of zero or more values.",
      "ja": "アレイはゼロ以上の値の順序付きシーケンスです。"
    },
    {
      "indent": 3,
      "text": "The terms \"object\" and \"array\" come from the conventions of JavaScript.",
      "ja": "用語「対象」および「アレイ」はJavaScriptの規則から来ます。"
    },
    {
      "indent": 3,
      "text": "JSON's design goals were for it to be minimal, portable, textual, and a subset of JavaScript.",
      "ja": "それは、最小限のポータブル、テキスト形式、およびJavaScriptのサブセットであるためにJSONの設計目標でした。"
    },
    {
      "indent": 0,
      "text": "1.1. Conventions Used in This Document",
      "section_title": true,
      "ja": "1.1. このドキュメントの表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "この文書のキーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、、、、 \"べきではない\" \"べきである\" \"ないもの\" \"ものとし\"、 \"推奨\"、 \"MAY\"、および \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "The grammatical rules in this document are to be interpreted as described in [RFC5234].",
      "ja": "この文書の文法規則は、[RFC5234]に記載されているように解釈されるべきです。"
    },
    {
      "indent": 0,
      "text": "1.2. Specifications of JSON",
      "section_title": true,
      "ja": "1.2.  JSONの仕様"
    },
    {
      "indent": 3,
      "text": "This document updates [RFC4627], which describes JSON and registers the media type \"application/json\".",
      "ja": "JSONを記述するメディアタイプ「アプリケーション/ JSON」を登録し、この文書の更新[RFC4627]。"
    },
    {
      "indent": 3,
      "text": "A description of JSON in ECMAScript terms appears in Version 5.1 of the ECMAScript specification [ECMA-262], Section 15.12. JSON is also described in [ECMA-404].",
      "ja": "ECMAScriptの用語でJSONの説明はECMAScript仕様[ECMA-262]、セクション15.12のバージョン5.1に表示されます。 JSONはまた、[ECMA-404]に記載されています。"
    },
    {
      "indent": 3,
      "text": "All of the specifications of JSON syntax agree on the syntactic elements of the language.",
      "ja": "JSONの構文の仕様はすべて、言語の構文要素については同意します。"
    },
    {
      "indent": 0,
      "text": "1.3. Introduction to This Revision",
      "section_title": true,
      "ja": "1.3. この改正の概要"
    },
    {
      "indent": 3,
      "text": "In the years since the publication of RFC 4627, JSON has found very wide use. This experience has revealed certain patterns, which, while allowed by its specifications, have caused interoperability problems.",
      "ja": "RFC 4627の発表以来、年間では、JSONは非常に広く用いられています。この経験は、相互運用性の問題を引き起こしている、その仕様によって許可されている間、特定のパターンを、明らかにしました。"
    },
    {
      "indent": 3,
      "text": "Also, a small number of errata have been reported (see RFC Errata IDs 607 [Err607] and 3607 [Err3607]).",
      "ja": "また、正誤表の少数（RFC正誤表IDが607 [Err607]と3607 [Err3607]を参照）が報告されています。"
    },
    {
      "indent": 3,
      "text": "This document's goal is to apply the errata, remove inconsistencies with other specifications of JSON, and highlight practices that can lead to interoperability problems.",
      "ja": "このドキュメントの目標は、正誤表を適用JSONの他の仕様との不整合を取り除き、および相互運用性の問題につながる可能慣行を強調することです。"
    },
    {
      "indent": 0,
      "text": "2. JSON Grammar",
      "section_title": true,
      "ja": "2. JSON文法"
    },
    {
      "indent": 3,
      "text": "A JSON text is a sequence of tokens. The set of tokens includes six structural characters, strings, numbers, and three literal names.",
      "ja": "JSONテキストは、トークンのシーケンスです。トークンのセットは6つの構造の文字、文字列、数値、および3リテラル名が含まれています。"
    },
    {
      "indent": 3,
      "text": "A JSON text is a serialized value. Note that certain previous specifications of JSON constrained a JSON text to be an object or an array. Implementations that generate only objects or arrays where a JSON text is called for will be interoperable in the sense that all implementations will accept these as conforming JSON texts.",
      "ja": "JSONテキストは、シリアライズされた値です。 JSONの特定の前仕様はJSONテキストオブジェクトまたは配列に制限することに注意してください。唯一のオブジェクトやJSONテキストが呼び出された配列を生成する実装は、すべての実装は、JSONテキストを適合し、これらを受け入れるという意味で相互運用可能になります。"
    },
    {
      "indent": 6,
      "text": "JSON-text = ws value ws",
      "ja": "valyeとしてXSONテキスト="
    },
    {
      "indent": 3,
      "text": "These are the six structural characters:",
      "ja": "これらは、6つの構造文字です。"
    },
    {
      "indent": 6,
      "text": "begin-array = ws %x5B ws ; [ left square bracket",
      "ja": "アレイを開始= WS％のX5BのWS。 [左角括弧"
    },
    {
      "indent": 6,
      "text": "begin-object = ws %x7B ws ; { left curly bracket",
      "ja": "= WS％のx7BのWS-オブジェクトを開始します。 {左中かっこ"
    },
    {
      "indent": 6,
      "text": "end-array = ws %x5D ws ; ] right square bracket",
      "ja": "エンドアレイ= WS％x5D WS。 ]右角カッコ"
    },
    {
      "indent": 6,
      "text": "end-object = ws %x7D ws ; } right curly bracket",
      "ja": "エンド物体= WS％x7D WS。 }右中括弧"
    },
    {
      "indent": 6,
      "text": "name-separator = ws %x3A ws ; : colon",
      "ja": "名前区切り= WS％のX3AのWS。 ：コロン"
    },
    {
      "indent": 6,
      "text": "value-separator = ws %x2C ws ; , comma",
      "ja": "％のX2CのWSとしてvalyeセパレータ=？ 、パーティー"
    },
    {
      "indent": 3,
      "text": "Insignificant whitespace is allowed before or after any of the six structural characters.",
      "ja": "無意味な空白文字は、前または6つの構造のいずれかの文字の後に許可されています。"
    },
    {
      "indent": 6,
      "text": "ws = *( %x20 / ; Space %x09 / ; Horizontal tab %x0A / ; Line feed or New line %x0D ) ; Carriage return",
      "ja": "WS = *（％X20 /;スペース％X09 /;水平タブ％のX0A /;ラインフィードまたは改行％x0D）。キャリッジリターン"
    },
    {
      "indent": 0,
      "text": "3. Values",
      "section_title": true,
      "ja": "3.値"
    },
    {
      "indent": 3,
      "text": "A JSON value MUST be an object, array, number, or string, or one of the following three literal names:",
      "ja": "JSON値は、オブジェクト、配列、数値、文字列、または以下の三つリテラル名のいずれかである必要があります"
    },
    {
      "indent": 6,
      "text": "false null true",
      "ja": "偽ヌル真"
    },
    {
      "indent": 3,
      "text": "The literal names MUST be lowercase. No other literal names are allowed.",
      "ja": "リテラル名は小文字でなければなりません。他のリテラル名は許可されません。"
    },
    {
      "indent": 6,
      "text": "value = false / null / true / object / array / number / string",
      "ja": "値= falseを/ nullを/真/オブジェクト/配列/数/文字列"
    },
    {
      "indent": 6,
      "text": "false = %x66.61.6c.73.65 ; false",
      "ja": "偽=％x66.61.6c.73.65。偽"
    },
    {
      "indent": 6,
      "text": "null = %x6e.75.6c.6c ; null",
      "ja": "ゼロ=％のx6e.75.6c.6c。ヌル"
    },
    {
      "indent": 6,
      "text": "true = %x74.72.75.65 ; true",
      "ja": "真=％のx74.72.75.65。真"
    },
    {
      "indent": 0,
      "text": "4. Objects",
      "section_title": true,
      "ja": "4.オブジェクト"
    },
    {
      "indent": 3,
      "text": "An object structure is represented as a pair of curly brackets surrounding zero or more name/value pairs (or members). A name is a string. A single colon comes after each name, separating the name from the value. A single comma separates a value from a following name. The names within an object SHOULD be unique.",
      "ja": "オブジェクト構造は、ゼロまたはそれ以上の名前/値のペア（または部材）を囲む中括弧の対として表されます。名前は文字列です。 1つのコロンが値から名前を分離し、それぞれの名前の後に来ます。単一のコンマは、次の名前から値を分離します。オブジェクト内の名前は一意である必要があります。"
    },
    {
      "indent": 6,
      "text": "object = begin-object [ member *( value-separator member ) ] end-object",
      "ja": "物体=始まるオブジェクト[メンバー*（値セパレータ部材）]エンドオブジェクト"
    },
    {
      "indent": 6,
      "text": "member = string name-separator value",
      "ja": "メンバー=列名区切り値"
    },
    {
      "indent": 3,
      "text": "An object whose names are all unique is interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings. When the names within an object are not unique, the behavior of software that receives such an object is unpredictable. Many implementations report the last name/value pair only. Other implementations report an error or fail to parse the object, and some implementations report all of the name/value pairs, including duplicates.",
      "ja": "名前がすべて一意であるオブジェクトは、そのオブジェクトを受けるすべてのソフトウェアの実装は、名前と値のマッピングに同意するだろうという意味で相互運用可能です。オブジェクト内の名前が固有でない場合には、そのようなオブジェクトを受け取り、ソフトウェアの動作は予測できません。多くの実装では、唯一の最後の名前/値のペアを報告しています。他の実装はエラーを報告したり、オブジェクトを解析するために失敗し、いくつかの実装は、重複を含め、名前/値ペアのすべてを報告します。"
    },
    {
      "indent": 3,
      "text": "JSON parsing libraries have been observed to differ as to whether or not they make the ordering of object members visible to calling software. Implementations whose behavior does not depend on member ordering will be interoperable in the sense that they will not be affected by these differences.",
      "ja": "JSONの構文解析ライブラリは、彼らがソフトウェアを呼び出すに見えるオブジェクトのメンバの順序付けを行うか否かの異なることが観察されています。その行動メンバーの順序に依存しない実装は、彼らがこれらの違いに影響されないという意味で、相互運用可能になります。"
    },
    {
      "indent": 0,
      "text": "5. Arrays",
      "section_title": true,
      "ja": "5.配列"
    },
    {
      "indent": 3,
      "text": "An array structure is represented as square brackets surrounding zero or more values (or elements). Elements are separated by commas.",
      "ja": "アレイ構造は、ゼロ以上の値（または要素）を囲む角括弧として表されます。要素は、カンマで区切られています。"
    },
    {
      "indent": 3,
      "text": "array = begin-array [ value *( value-separator value ) ] end-array",
      "ja": "アレイ=始まるアレイ[値*（値区切り値）]エンドアレイ"
    },
    {
      "indent": 3,
      "text": "There is no requirement that the values in an array be of the same type.",
      "ja": "配列の値が同じタイプである必要はありません。"
    },
    {
      "indent": 0,
      "text": "6. Numbers",
      "section_title": true,
      "ja": "6.数字"
    },
    {
      "indent": 3,
      "text": "The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed.",
      "ja": "数字の表現は、ほとんどのプログラミング言語で使用されるものと同様です。数桁を使用してベース10に示されています。これは、小数部および/または指数部が続いてもよい任意マイナス記号、接頭辞することができる整数成分を含みます。先行ゼロは許可されていません。"
    },
    {
      "indent": 3,
      "text": "A fraction part is a decimal point followed by one or more digits.",
      "ja": "小数部は、一つ以上の数字が続く小数点です。"
    },
    {
      "indent": 3,
      "text": "An exponent part begins with the letter E in upper or lower case, which may be followed by a plus or minus sign. The E and optional sign are followed by one or more digits.",
      "ja": "指数部は、プラスまたはマイナス記号が続いてもよい大文字または小文字の文字Eで始まります。 Eおよびオプションの符号は、一つ以上の数字が続くされています。"
    },
    {
      "indent": 3,
      "text": "Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted.",
      "ja": "（例えば無限大とNaNのような）以下の文法で表現できない数値が許可されていません。"
    },
    {
      "indent": 6,
      "text": "number = [ minus ] int [ frac ] [ exp ]",
      "ja": "番号= [マイナス] INT [FRAC] [EXP]"
    },
    {
      "indent": 6,
      "text": "decimal-point = %x2E ; .",
      "ja": "小数点=％のx2E。 。"
    },
    {
      "indent": 6,
      "text": "digit1-9 = %x31-39 ; 1-9",
      "ja": "digit1-9 =％x31-39。 1-9"
    },
    {
      "indent": 6,
      "text": "e = %x65 / %x45 ; e E",
      "ja": "E =％X65 / X45％。そして、E"
    },
    {
      "indent": 6,
      "text": "exp = e [ minus / plus ] 1*DIGIT",
      "ja": "EXP = E [マイナス/プラス] 1 * DIGIT"
    },
    {
      "indent": 6,
      "text": "frac = decimal-point 1*DIGIT",
      "ja": "FRAC =小数点1 * DIGIT"
    },
    {
      "indent": 6,
      "text": "int = zero / ( digit1-9 *DIGIT )",
      "ja": "int型=ゼロ/（digit1-9 * DIGIT）"
    },
    {
      "indent": 6,
      "text": "minus = %x2D ; -",
      "ja": "マイナス= x2D％; - "
    },
    {
      "indent": 6,
      "text": "plus = %x2B ; +",
      "ja": "よりX2B％で、 +"
    },
    {
      "indent": 6,
      "text": "zero = %x30 ; 0",
      "ja": "ゼロ=％のX30。 0"
    },
    {
      "indent": 3,
      "text": "This specification allows implementations to set limits on the range and precision of numbers accepted. Since software that implements IEEE 754-2008 binary64 (double precision) numbers [IEEE754] is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision. A JSON number such as 1E400 or 3.141592653589793238462643383279 may indicate potential interoperability problems, since it suggests that the software that created it expects receiving software to have greater capabilities for numeric magnitude and precision than is widely available.",
      "ja": "この仕様は、実装が受け付けた数値の範囲および精度に制限を設定することを可能にします。 IEEE 754-2008 binary64（倍精度）番号[IEEE754]を実現するソフトウェアは、一般的に入手可能であり、広く使用されるので、良好な相互運用性は、これらの実装がJSONを近似する意味で、提供を超えない精度又は範囲を期待しない実装することによって達成することができます予想精度内の数字。それを作成したソフトウェアが広く入手可能であるよりも数値の大きさと精度のために大きな能力を持っているソフトウェアを受信期待していることを示唆しているので、JSONのよう1E400などの数または3.141592653589793238462643383279は、潜在的な相互運用性の問題を示すことができます。"
    },
    {
      "indent": 3,
      "text": "Note that when such software is used, numbers that are integers and are in the range [-(2**53)+1, (2**53)-1] are interoperable in the sense that implementations will agree exactly on their numeric values.",
      "ja": "[ - （2 ** 53）+1、（2 ** 53）-1]の実装は、その数値に厳密に同意するという意味で相互運用可能であるようなソフトウェアを使用した場合、整数であり、範囲内にある数字は、ことに注意してください値。"
    },
    {
      "indent": 0,
      "text": "7. Strings",
      "section_title": true,
      "ja": "7.文字列"
    },
    {
      "indent": 3,
      "text": "The representation of strings is similar to conventions used in the C family of programming languages. A string begins and ends with quotation marks. All Unicode characters may be placed within the quotation marks, except for the characters that must be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F).",
      "ja": "文字列の表現は、プログラミング言語のCファミリで使用される表記規則と同様です。文字列が始まり、引用符で終わります。すべてのUnicode文字をエスケープする必要がある文字を除き、引用符内に配置されてもよい。引用符、固相を逆転し、制御文字（0000 U + U + 001Fを介して）。"
    },
    {
      "indent": 3,
      "text": "Any character may be escaped. If the character is in the Basic Multilingual Plane (U+0000 through U+FFFF), then it may be represented as a six-character sequence: a reverse solidus, followed by the lowercase letter u, followed by four hexadecimal digits that encode the character's code point. The hexadecimal letters A though F can be upper or lower case. So, for example, a string containing only a single reverse solidus character may be represented as \"\\u005C\".",
      "ja": "任意の文字をエスケープすることができます。コードする4桁の16進数が続く、逆固相、小文字U続く：文字は基本多言語面（U + FFFFを介してU + 0000）である場合、それは、6つの文字列として表すことができます。文字のコードポイント。進文字AしかしFは、大文字または小文字であることができます。したがって、たとえば、単一の逆ソリダス文字を含む文字列は「\\ u005C」として表すことができます。"
    },
    {
      "indent": 3,
      "text": "Alternatively, there are two-character sequence escape representations of some popular characters. So, for example, a string containing only a single reverse solidus character may be represented more compactly as \"\\\\\".",
      "ja": "あるいは、いくつかの人気キャラクターの2文字列エスケープ表現があります。したがって、たとえば、単一の逆ソリダス文字を含む文字列は「\\\\」として、よりコンパクトに表現することができます。"
    },
    {
      "indent": 3,
      "text": "To escape an extended character that is not in the Basic Multilingual Plane, the character is represented as a 12-character sequence, encoding the UTF-16 surrogate pair. So, for example, a string containing only the G clef character (U+1D11E) may be represented as \"\\uD834\\uDD1E\".",
      "ja": "基本多言語面にない拡張文字をエスケープするために、文字はUTF-16サロゲートペアをコードする、12文字のシーケンスとして表されます。だから、例えば、唯一のG音部記号（U + 1D11E）を含む文字列が「\\ uD834 \\ uDD1E」として表されてもよいです。"
    },
    {
      "indent": 6,
      "text": "string = quotation-mark *char quotation-mark",
      "ja": "文字列=引用マーク* char型の二重引用符マーク"
    },
    {
      "indent": 6,
      "text": "char = unescaped / escape ( %x22 / ; \" quotation mark U+0022 %x5C / ; \\ reverse solidus U+005C %x2F / ; / solidus U+002F %x62 / ; b backspace U+0008 %x66 / ; f form feed U+000C %x6E / ; n line feed U+000A %x72 / ; r carriage return U+000D %x74 / ; t tab U+0009 %x75 4HEXDIG ) ; uXXXX U+XXXX",
      "ja": "F形;チャー=エスケープ/エスケープ（％X22 /; \"引用符U + 0022パーセントのx5C /; \\逆固相U + 005C％のx2F /; /固相U + 002F％X62 /; X66 /バックスペースB U + 0008パーセントフィードU + 000C％のx6E /; nは改行U + X72 / 000A％; RキャリッジリターンU + 000D％X74 /; tタブU + 0009パーセントのX75 4HEXDIG）; uXXXXというU + XXXX"
    },
    {
      "indent": 6,
      "text": "escape = %x5C ; \\",
      "ja": "=％のx5Cを逃れます。 \\"
    },
    {
      "indent": 6,
      "text": "quotation-mark = %x22 ; \"",
      "ja": "クォーテーションマーク=％のX22。 \""
    },
    {
      "indent": 6,
      "text": "unescaped = %x20-21 / %x23-5B / %x5D-10FFFF",
      "ja": "エスケープ=％x20-21 /％x23-5B /％x5D-10FFFF"
    },
    {
      "indent": 0,
      "text": "8. String and Character Issues",
      "section_title": true,
      "ja": "8.文字列と文字の問題"
    },
    {
      "indent": 0,
      "text": "8.1. Character Encoding",
      "section_title": true,
      "ja": "8.1. 文字コード"
    },
    {
      "indent": 3,
      "text": "JSON text SHALL be encoded in UTF-8, UTF-16, or UTF-32. The default encoding is UTF-8, and JSON texts that are encoded in UTF-8 are interoperable in the sense that they will be read successfully by the maximum number of implementations; there are many implementations that cannot successfully read texts in other encodings (such as UTF-16 and UTF-32).",
      "ja": "JSONテキストはUTF-8、UTF-16、またはUTF-32で符号化されます。デフォルトのエンコーディングはUTF-8であり、UTF-8でエンコードされたJSONテキストは、それらが実装の最大数で正常に読み取られるという意味で相互運用可能です。正常（例えば、UTF-16、UTF-32など）、他のエンコーディングのテキストを読み取ることができない多くの実装が存在します。"
    },
    {
      "indent": 3,
      "text": "Implementations MUST NOT add a byte order mark to the beginning of a JSON text. In the interests of interoperability, implementations that parse JSON texts MAY ignore the presence of a byte order mark rather than treating it as an error.",
      "ja": "実装はJSONテキストの先頭にバイト順マークを追加してはなりません。相互運用性の利益では、JSONテキストを解析実装はむしろエラーとして扱うよりも、バイト順マークの存在を無視するかもしれません。"
    },
    {
      "indent": 0,
      "text": "8.2. Unicode Characters",
      "section_title": true,
      "ja": "8.2.  Unicode文字"
    },
    {
      "indent": 3,
      "text": "When all the strings represented in a JSON text are composed entirely of Unicode characters [UNICODE] (however escaped), then that JSON text is interoperable in the sense that all software implementations that parse it will agree on the contents of names and of string values in objects and arrays.",
      "ja": "JSONテキストで表現のすべての文字列はUnicode文字で完全に構成されている場合は、[UNICODE]（但しエスケープ）、その後、JSONテキストは、それが名前の内容に同意し、文字列値の意志解析し、すべてのソフトウェアの実装という意味で相互運用可能であることオブジェクトと配列インチ"
    },
    {
      "indent": 3,
      "text": "However, the ABNF in this specification allows member names and string values to contain bit sequences that cannot encode Unicode characters; for example, \"\\uDEAD\" (a single unpaired UTF-16 surrogate). Instances of this have been observed, for example, when a library truncates a UTF-16 string without checking whether the truncation split a surrogate pair. The behavior of software that receives JSON texts containing such values is unpredictable; for example, implementations might return different values for the length of a string value or even suffer fatal runtime exceptions.",
      "ja": "しかしながら、本明細書でABNFは、メンバー名および文字列値は、Unicode文字をエンコードすることができないビット・シーケンスを含むことができます。たとえば、 \"\\ uDEAD\"（単一の不対UTF-16サロゲート）。これのインスタンスは、ライブラリは切り捨てがサロゲートペアを分割するかどうかを確認せずにUTF-16文字列を切り捨てるとき、例えば、観察されています。このような値を含むJSONテキストを受けるソフトウェアの挙動は予測不可能です。例えば、実装は、文字列値の長さの異なる値を返すかさえ致命的な実行時例外を被る可能性があります。"
    },
    {
      "indent": 0,
      "text": "8.3. String Comparison",
      "section_title": true,
      "ja": "8.3. 文字列比較"
    },
    {
      "indent": 3,
      "text": "Software implementations are typically required to test names of object members for equality. Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings. For example, implementations that compare strings with escaped characters unconverted may incorrectly find that \"a\\\\b\" and \"a\\u005Cb\" are not equal.",
      "ja": "ソフトウェアの実装は、一般的平等のためのオブジェクトのメンバーの名前をテストするために必要とされています。 Unicodeコード単位のシーケンスにテキスト表現を変換し、コード単位で数値的に比較、コード単位を実行する実装は、実装は二つの文字列の平等または不平等上のすべてのケースに同意する意味での相互運用が可能です。例えば、未変換のエスケープ文字と文字列を比較する実装が間違って「\\\\ bの」と「\\のu005Cbは」等しくないことがあります。"
    },
    {
      "indent": 0,
      "text": "9. Parsers",
      "section_title": true,
      "ja": "9.パーサ"
    },
    {
      "indent": 3,
      "text": "A JSON parser transforms a JSON text into another representation. A JSON parser MUST accept all texts that conform to the JSON grammar. A JSON parser MAY accept non-JSON forms or extensions.",
      "ja": "JSONパーサーは、別の表現にJSONテキストに変換します。 JSONパーサーはJSON文法に準拠するすべてのテキストを受け入れなければなりません。 JSONパーサーは非JSON形式や拡張子を受け入れることができます。"
    },
    {
      "indent": 3,
      "text": "An implementation may set limits on the size of texts that it accepts. An implementation may set limits on the maximum depth of nesting. An implementation may set limits on the range and precision of numbers. An implementation may set limits on the length and character contents of strings.",
      "ja": "実装は、それが受け入れテキストのサイズに制限を設定することができます。実装は、ネストの最大深さに制限を設定してもよいです。実装は、数値の範囲および精度に限度を設定してもよいです。実装は、文字列の長さと文字の内容に制限を設定することがあります。"
    },
    {
      "indent": 0,
      "text": "10. Generators",
      "section_title": true,
      "ja": "10.ジェネレータ"
    },
    {
      "indent": 3,
      "text": "A JSON generator produces JSON text. The resulting text MUST strictly conform to the JSON grammar.",
      "ja": "JSONジェネレータはJSONテキストを生成します。結果のテキストは、厳密にはJSONの文法に従わなければなりません。"
    },
    {
      "indent": 0,
      "text": "11. IANA Considerations",
      "section_title": true,
      "ja": "11. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "The MIME media type for JSON text is application/json.",
      "ja": "JSONテキストのMIMEメディアタイプは、アプリケーション/ JSONです。"
    },
    {
      "indent": 3,
      "text": "Type name: application",
      "ja": "型名：アプリケーション"
    },
    {
      "indent": 3,
      "text": "Subtype name: json",
      "ja": "サブタイプ名：JSON"
    },
    {
      "indent": 3,
      "text": "Required parameters: n/a",
      "ja": "必須パラメータ：N / A"
    },
    {
      "indent": 3,
      "text": "Optional parameters: n/a",
      "ja": "オプションのパラメータ：N / A"
    },
    {
      "indent": 3,
      "text": "Encoding considerations: binary",
      "ja": "エンコードの考慮事項：バイナリ"
    },
    {
      "indent": 3,
      "text": "Security considerations: See [RFC7158], Section 12.",
      "ja": "セキュリティの考慮事項：[RFC7158]、セクション12を参照してください。"
    },
    {
      "indent": 3,
      "text": "Interoperability considerations: Described in [RFC7158]",
      "ja": "相互運用性に関する注意事項：[RFC7158]で説明"
    },
    {
      "indent": 3,
      "text": "Published specification: [RFC7158]",
      "ja": "公開された仕様：[RFC7158]"
    },
    {
      "indent": 3,
      "text": "Applications that use this media type: JSON has been used to exchange data between applications written in all of these programming languages: ActionScript, C, C#, Clojure, ColdFusion, Common Lisp, E, Erlang, Go, Java, JavaScript, Lua, Objective CAML, Perl, PHP, Python, Rebol, Ruby, Scala, and Scheme.",
      "ja": "JSONは、これらのプログラミング言語のすべてで書かれたアプリケーション間でデータを交換するために使用されています：ActionScriptの、C、C＃、Clojureは、ColdFusionの、Common Lispの、E、アーラン、ゴー、ジャワ、JavaScriptの、Luaの、客観このメディアタイプを使用するアプリケーションCAMLやPerl、PHP、Pythonの、REBOLの、ルビー、スカラ座、およびスキーム。"
    },
    {
      "indent": 3,
      "text": "Additional information: Magic number(s): n/a File extension(s): .json Macintosh file type code(s): TEXT",
      "ja": "追加情報：マジックナンバー（S）：N /ファイルの拡張子（S）：Macintoshファイルタイプコード（S）.json：TEXT"
    },
    {
      "indent": 3,
      "text": "Person & email address to contact for further information: IESG <iesg@ietf.org>",
      "ja": "人と詳細のために連絡する電子メールアドレス：IESG <iesg@ietf.org>"
    },
    {
      "indent": 3,
      "text": "Intended usage: COMMON",
      "ja": "意図している用法：COMMON"
    },
    {
      "indent": 3,
      "text": "Restrictions on usage: none",
      "ja": "使用に関する制限事項：なし"
    },
    {
      "indent": 3,
      "text": "Author: Douglas Crockford <douglas@crockford.com>",
      "ja": "著者：ダグラス・クロックフォード<douglas@crockford.com>"
    },
    {
      "indent": 3,
      "text": "Change controller: IESG <iesg@ietf.org>",
      "ja": "変更コントローラ：IESG <iesg@ietf.org>"
    },
    {
      "indent": 3,
      "text": "Note: No \"charset\" parameter is defined for this registration. Adding one really has no effect on compliant recipients.",
      "ja": "注：「文字セット」パラメータは、この登録のために定義されていません。 1を追加すると、実際に準拠した受信者には影響を与えません。"
    },
    {
      "indent": 0,
      "text": "12. Security Considerations",
      "section_title": true,
      "ja": "12.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "Generally, there are security issues with scripting languages. JSON is a subset of JavaScript but excludes assignment and invocation.",
      "ja": "一般的に、スクリプト言語でのセキュリティ上の問題があります。 JSONはJavaScriptのサブセットですが、割り当てと呼び出しを除外します。"
    },
    {
      "indent": 3,
      "text": "Since JSON's syntax is borrowed from JavaScript, it is possible to use that language's \"eval()\" function to parse JSON texts. This generally constitutes an unacceptable security risk, since the text could contain executable code along with data declarations. The same consideration applies to the use of eval()-like functions in any other programming language in which JSON texts conform to that language's syntax.",
      "ja": "JSONの構文はJavaScriptから借用されているので、JSONテキストを解析し、その言語の「のeval（）」機能を使用することが可能です。テキストは、データ宣言と共に実行可能なコードを含むことができるので、これは一般的に、容認できないセキュリティ上のリスクを構成します。同じ対価がevalの使用に適用されます（） -  JSONテキストがその言語の構文に準拠する任意の他のプログラミング言語の関数のよう。"
    },
    {
      "indent": 0,
      "text": "13. Examples",
      "section_title": true,
      "ja": "13例"
    },
    {
      "indent": 3,
      "text": "This is a JSON object:",
      "ja": "これは、JSONオブジェクトです："
    },
    {
      "indent": 6,
      "text": "{\n  \"Image\": {\n      \"Width\":  800,\n      \"Height\": 600,\n      \"Title\":  \"View from 15th Floor\",\n      \"Thumbnail\": {\n          \"Url\":    \"http://www.example.com/image/481989943\",\n          \"Height\": 125,\n          \"Width\":  100\n      },\n      \"Animated\" : false,\n      \"IDs\": [116, 943, 234, 38793]\n    }\n}",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Its Image member is an object whose Thumbnail member is an object and whose IDs member is an array of numbers.",
      "ja": "そのイメージのメンバーは、そのサムネイルメンバーとIDメンバー数字の配列であるオブジェクトであるオブジェクトです。"
    },
    {
      "indent": 3,
      "text": "This is a JSON array containing two objects:",
      "ja": "これは、2つのオブジェクトを含むJSON配列であります："
    },
    {
      "indent": 6,
      "text": "[\n  {\n     \"precision\": \"zip\",\n     \"Latitude\":  37.7668,\n     \"Longitude\": -122.3959,\n     \"Address\":   \"\",\n     \"City\":      \"SAN FRANCISCO\",\n     \"State\":     \"CA\",\n     \"Zip\":       \"94107\",\n     \"Country\":   \"US\"\n  },\n  {\n     \"precision\": \"zip\",\n     \"Latitude\":  37.371991,\n     \"Longitude\": -122.026020,\n     \"Address\":   \"\",\n     \"City\":      \"SUNNYVALE\",\n     \"State\":     \"CA\",\n     \"Zip\":       \"94085\",\n     \"Country\":   \"US\"\n  }\n]",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Here are three small JSON texts containing only values:",
      "ja": "ここでは値のみを含む3つの小さなJSONテキストは以下のとおりです。"
    },
    {
      "indent": 3,
      "text": "\"Hello world!\"",
      "ja": "\"こんにちは世界！\""
    },
    {
      "indent": 3,
      "text": "42",
      "ja": "４２"
    },
    {
      "indent": 3,
      "text": "true",
      "ja": "真"
    },
    {
      "indent": 0,
      "text": "14. Contributors",
      "section_title": true,
      "ja": "14.協力者"
    },
    {
      "indent": 3,
      "text": "RFC 4627 was written by Douglas Crockford. This document was constructed by making a relatively small number of changes to that document; thus, the vast majority of the text here is his.",
      "ja": "RFC 4627は、ダグラス・クロックフォードによって書かれました。この文書は、その文書への変更の比較的少数にすることによって構築しました。したがって、ここではテキストの大半は彼のです。"
    },
    {
      "indent": 0,
      "text": "15. References",
      "section_title": true,
      "ja": "15.参考文献"
    },
    {
      "indent": 0,
      "text": "15.1. Normative References",
      "section_title": true,
      "ja": "15.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[IEEE754] IEEE, \"IEEE Standard for Floating-Point Arithmetic\", IEEE Standard 754, August 2008, <http://grouper.ieee.org/groups/754/>.",
      "ja": "、IEEE規格754、2008年8月、<http://grouper.ieee.org/groups/754/> \"浮動小数点演算のためのIEEE規格\" [IEEE754] IEEE、。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC5234] Crocker, D. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, January 2008.",
      "ja": "[RFC5234]クロッカー、D.、およびP. Overell、 \"構文仕様のための増大しているBNF：ABNF\"、STD 68、RFC 5234、2008年1月。"
    },
    {
      "indent": 3,
      "text": "[UNICODE] The Unicode Consortium, \"The Unicode Standard\", <http://www.unicode.org/versions/latest/>.",
      "ja": "[UNICODE]ユニコードコンソーシアム、 \"Unicode規格\"、<http://www.unicode.org/versions/latest/>。"
    },
    {
      "indent": 0,
      "text": "15.2. Informative References",
      "section_title": true,
      "ja": "15.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[ECMA-262] Ecma International, \"ECMAScript Language Specification Edition 5.1\", Standard ECMA-262, June 2011, <http://www.ecma-international.org/publications/standards/ Ecma-262.htm>.",
      "ja": "[ECMA-262] Ecmaインターナショナル、 \"ECMAScriptの言語仕様版5.1\"、標準ECMA-262、2011年6月、<http://www.ecma-international.org/publications/standards/ ECMA-262.htm>。"
    },
    {
      "indent": 3,
      "text": "[ECMA-404] Ecma International, \"The JSON Data Interchange Format\", Standard ECMA-404, October 2013, <http://www.ecma-international.org/publications/standards/ Ecma-404.htm>.",
      "ja": "[ECMA-404] Ecmaインターナショナル、 \"JSONデータ交換フォーマット\"、標準ECMA-404、2013年10月、<http://www.ecma-international.org/publications/standards/ ECMA-404.htm>。"
    },
    {
      "indent": 3,
      "text": "[Err3607] RFC Errata, Errata ID 3607, RFC 3607, <http://www.rfc-editor.org>.",
      "ja": "【Err3607] RFCエラッタ、エラッタのID 3607、RFC 3607、<http://www.rfc-editor.org>。"
    },
    {
      "indent": 3,
      "text": "[Err607] RFC Errata, Errata ID 607, RFC 607, <http://www.rfc-editor.org>.",
      "ja": "【Err607] RFCエラッタ、エラッタID 607、RFC 607、<http://www.rfc-editor.org>。"
    },
    {
      "indent": 3,
      "text": "[RFC4627] Crockford, D., \"The application/json Media Type for JavaScript Object Notation (JSON)\", RFC 4627, July 2006.",
      "ja": "[RFC4627]クロックフォード、D.、RFC 4627、2006年7月 \"JavaScriptのObject Notation（JSON）形式のためのアプリケーション/ JSONのメディアタイプ\"。"
    },
    {
      "indent": 1,
      "text": "Appendix A. Changes from",
      "ja": "付録A.からの変更点"
    },
    {
      "indent": 3,
      "text": "This section lists changes between this document and the text in RFC 4627.",
      "ja": "このセクションでは、この文書とRFC 4627でテキストの間の変化を示しています。"
    },
    {
      "indent": 3,
      "text": "o Changed the title and abstract of the document.",
      "ja": "O、本書のタイトルとアブストラクトを変更しました。"
    },
    {
      "indent": 3,
      "text": "o Changed the reference to [UNICODE] to be not version specific.",
      "ja": "Oいないバージョン具体的に[UNICODE]への参照を変更しました。"
    },
    {
      "indent": 3,
      "text": "o Added a \"Specifications of JSON\" section.",
      "ja": "O「仕様JSONの」セクションを追加しました。"
    },
    {
      "indent": 3,
      "text": "o Added an \"Introduction to This Revision\" section.",
      "ja": "Oセクション「この改訂の概要」を追加しました。"
    },
    {
      "indent": 3,
      "text": "o Changed the definition of \"JSON text\" so that it can be any JSON value, removing the constraint that it be an object or array.",
      "ja": "それは、オブジェクトまたは配列であるという制約を除去し、任意のJSON値とすることができるように○「JSONテキスト」の定義を変更しました。"
    },
    {
      "indent": 3,
      "text": "o Added language about duplicate object member names, member ordering, and interoperability.",
      "ja": "O重複するオブジェクトメンバー名、メンバーの順序、および相互運用性についての言語を追加しました。"
    },
    {
      "indent": 3,
      "text": "o Clarified the absence of a requirement that values in an array be of the same JSON type.",
      "ja": "Oアレイ同じJSONタイプのものの値の要件が存在しないことを明らかにしました。"
    },
    {
      "indent": 3,
      "text": "o Applied erratum #607 from RFC 4627 to correctly align the artwork for the definition of \"object\".",
      "ja": "O正しく「オブジェクト」の定義のためのアートワークを揃えるためにRFC 4627からエラータ＃607を適用しました。"
    },
    {
      "indent": 3,
      "text": "o Changed \"as sequences of digits\" to \"in the grammar below\" in the \"Numbers\" section, and made base-10-ness explicit.",
      "ja": "Oに「数字」の、およびからなるベース10らしさ「以下文法における」明示的な「数字のシーケンスとして」に変更。"
    },
    {
      "indent": 3,
      "text": "o Added language about number interoperability as a function of IEEE754, and added an IEEE754 reference.",
      "ja": "O IEEE754の関数として多数の相互運用性についての言語を追加し、IEEE754基準を追加しました。"
    },
    {
      "indent": 3,
      "text": "o Added language about interoperability and Unicode characters and about string comparisons. To do this, turned the old \"Encoding\" section into a \"String and Character Issues\" section, with three subsections: \"Character Encoding\", \"Unicode Characters\", and \"String Comparison\".",
      "ja": "O相互運用性およびUnicode文字について、文字列の比較についての言語を追加しました。 「文字エンコーディング」、「Unicode文字」、および「文字列の比較」：これを行うには、3つのサブセクションで、「文字列と文字の問題」セクションに古い「エンコーディング」のセクションを回しました。"
    },
    {
      "indent": 3,
      "text": "o Changed guidance in the \"Parsers\" section to point out that implementations may set limits on the range \"and precision\" of numbers.",
      "ja": "O実装が数値の範囲「および精度」に制限を設定してもよいことを指摘し、「パーサー」にガイダンスを変更しました。"
    },
    {
      "indent": 3,
      "text": "o Updated and tidied the \"IANA Considerations\" section.",
      "ja": "Oを更新し、「IANAの考慮事項」のセクションを整理。"
    },
    {
      "indent": 3,
      "text": "o Made a real \"Security Considerations\" section and lifted the text out of the previous \"IANA Considerations\" section.",
      "ja": "O本物の「セキュリティに関する考慮事項」のセクションを作り、以前の「IANAの考慮事項」セクションの外にテキストを持ち上げました。"
    },
    {
      "indent": 3,
      "text": "o Applied erratum #3607 from RFC 4627 by removing the security consideration that begins \"A JSON text can be safely passed\" and the JavaScript code that went with that consideration.",
      "ja": "RFC 4627からのO応用エラータ＃3607「JSONテキストを安全に渡すことができ、」始まりのセキュリティ上の考慮事項とその対価と一緒に行ったJavaScriptコードを削除することもできます。"
    },
    {
      "indent": 3,
      "text": "o Added a note to the \"Security Considerations\" section pointing out the risks of using the \"eval()\" function in JavaScript or any other language in which JSON texts conform to that language's syntax.",
      "ja": "O JavaScriptで「のeval（）」関数またはJSONテキストがその言語の構文に準拠した他のどの言語を使用することの危険性を指摘し、「セキュリティに関する考慮事項」セクションにメモを追加しました。"
    },
    {
      "indent": 3,
      "text": "o Added a note to the \"IANA Considerations\" clarifying the absence of a \"charset\" parameter for the application/json media type.",
      "ja": "Oアプリケーション/ JSONのメディアタイプのための「文字セット」のパラメータが存在しないことを明確に「IANAの考慮事項」にメモを追加しました。"
    },
    {
      "indent": 3,
      "text": "o Changed \"100\" to 100 and added a boolean field, both in the first example.",
      "ja": "O 100に「100」に変更し、最初の例では、両方のブールフィールドを追加しました。"
    },
    {
      "indent": 3,
      "text": "o Added examples of JSON texts with simple values, neither objects nor arrays.",
      "ja": "O単純な値、どちらのオブジェクトも配列とJSONテキストの例を追加しました。"
    },
    {
      "indent": 3,
      "text": "o Added a \"Contributors\" section crediting Douglas Crockford.",
      "ja": "Oダグラス・クロックフォードのクレジット「協力者」セクションを追加しました。"
    },
    {
      "indent": 3,
      "text": "o Added a reference to RFC 4627.",
      "ja": "O RFC 4627への参照を追加しました。"
    },
    {
      "indent": 3,
      "text": "o Moved the ECMAScript reference from Normative to Informative and updated it to reference ECMAScript 5.1, and added a reference to ECMA 404.",
      "ja": "O規範から有益にECMAScriptの参照を移動し、ECMAScriptの5.1を参照するように更新され、ECMA 404への参照を追加しました。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Tim Bray (editor) Google, Inc.",
      "ja": "ティム・ブレイ（編集者）グーグル株式会社"
    },
    {
      "indent": 3,
      "text": "EMail: tbray@textuality.com",
      "ja": "メールアドレス：tbray@textuality.com"
    }
  ]
}