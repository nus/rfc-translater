{
  "title": {
    "text": "RFC 7667 - RTP Topologies",
    "ja": "RFC 7667 - RTPトポロジ"
  },
  "number": 7667,
  "created_at": "2019-10-31 23:23:07.256374+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                     M. Westerlund\nRequest for Comments: 7667                                      Ericsson\nObsoletes: 5117                                                S. Wenger\nCategory: Informational                                            Vidyo\nISSN: 2070-1721                                            November 2015",
      "raw": true
    },
    {
      "indent": 29,
      "text": "RTP Topologies",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document discusses point-to-point and multi-endpoint topologies used in environments based on the Real-time Transport Protocol (RTP). In particular, centralized topologies commonly employed in the video conferencing industry are mapped to the RTP terminology.",
      "ja": "この文書では、ポイントツーポイントおよびリアルタイム転送プロトコル（RTP）に基づいた環境で使用されるマルチエンドポイントトポロジについて説明します。具体的には、一般的にビデオ会議業界で採用の集中トポロジはRTPの用語にマッピングされます。"
    },
    {
      "indent": 3,
      "text": "This document is updated with additional topologies and replaces RFC 5117.",
      "ja": "この文書は、追加のトポロジで更新され、RFC 5117に置き換えられています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、情報提供の目的のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7667.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7667で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2015 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2015 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4\n2.  Definitions . . . . . . . . . . . . . . . . . . . . . . . . .   5\n  2.1.  Glossary  . . . . . . . . . . . . . . . . . . . . . . . .   5\n  2.2.  Definitions Related to RTP Grouping Taxonomy  . . . . . .   5\n3.  Topologies  . . . . . . . . . . . . . . . . . . . . . . . . .   6\n  3.1.  Point to Point  . . . . . . . . . . . . . . . . . . . . .   6\n  3.2.  Point to Point via Middlebox  . . . . . . . . . . . . . .   7\n    3.2.1.  Translators . . . . . . . . . . . . . . . . . . . . .   7\n    3.2.2.  Back-to-Back RTP sessions . . . . . . . . . . . . . .  11\n  3.3.  Point to Multipoint Using Multicast . . . . . . . . . . .  12\n    3.3.1.  Any-Source Multicast (ASM)  . . . . . . . . . . . . .  12\n    3.3.2.  Source-Specific Multicast (SSM) . . . . . . . . . . .  14\n    3.3.3.  SSM with Local Unicast Resources  . . . . . . . . . .  15\n  3.4.  Point to Multipoint Using Mesh  . . . . . . . . . . . . .  17\n  3.5.  Point to Multipoint Using the RFC 3550 Translator . . . .  20\n    3.5.1.  Relay - Transport Translator  . . . . . . . . . . . .  20\n    3.5.2.  Media Translator  . . . . . . . . . . . . . . . . . .  21\n  3.6.  Point to Multipoint Using the RFC 3550 Mixer Model  . . .  22\n    3.6.1.  Media-Mixing Mixer  . . . . . . . . . . . . . . . . .  24\n    3.6.2.  Media-Switching Mixer . . . . . . . . . . . . . . . .  27\n  3.7.  Selective Forwarding Middlebox  . . . . . . . . . . . . .  29\n  3.8.  Point to Multipoint Using Video-Switching MCUs  . . . . .  33\n  3.9.  Point to Multipoint Using RTCP-Terminating MCU  . . . . .  34\n  3.10. Split Component Terminal  . . . . . . . . . . . . . . . .  35\n  3.11. Non-symmetric Mixer/Translators . . . . . . . . . . . . .  38\n  3.12. Combining Topologies  . . . . . . . . . . . . . . . . . .  38\n4.  Topology Properties . . . . . . . . . . . . . . . . . . . . .  39\n  4.1.  All-to-All Media Transmission . . . . . . . . . . . . . .  39\n  4.2.  Transport or Media Interoperability . . . . . . . . . . .  40\n  4.3.  Per-Domain Bitrate Adaptation . . . . . . . . . . . . . .  40\n  4.4.  Aggregation of Media  . . . . . . . . . . . . . . . . . .  41\n  4.5.  View of All Session Participants  . . . . . . . . . . . .  41\n  4.6.  Loop Detection  . . . . . . . . . . . . . . . . . . . . .  42\n  4.7.  Consistency between Header Extensions and RTCP  . . . . .  42\n5.  Comparison of Topologies  . . . . . . . . . . . . . . . . . .  42\n6.  Security Considerations . . . . . . . . . . . . . . . . . . .  43\n7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  45\n  7.1.  Normative References  . . . . . . . . . . . . . . . . . .  45\n  7.2.  Informative References  . . . . . . . . . . . . . . . . .  45\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  48\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  48",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "Real-time Transport Protocol (RTP) [RFC3550] topologies describe methods for interconnecting RTP entities and their processing behavior for RTP and the RTP Control Protocol (RTCP). This document tries to address past and existing confusion, especially with respect to terms not defined in RTP but in common use in the communication industry, such as the Multipoint Control Unit or MCU.",
      "ja": "リアルタイムトランスポートプロトコル（RTP）[RFC3550]トポロジは、RTPとRTP制御プロトコル（RTCP）のためのRTPのエンティティとその処理動作を相互接続するための方法について説明します。この文書では、特にRTPではなく、このようなマルチポイントコントロールユニットやMCUなどの通信業界で一般的に使用、で定義されていない用語に関して、過去および既存の混乱に対処しようとします。"
    },
    {
      "indent": 3,
      "text": "When the Audio-Visual Profile with Feedback (AVPF) [RFC4585] was developed, the main emphasis lay in the efficient support of point-to-point and small multipoint scenarios without centralized multipoint control. In practice, however, most multipoint conferences operate utilizing centralized units referred to as MCUs. MCUs may implement mixer or translator functionality (in RTP [RFC3550] terminology) and signaling support. They may also contain additional application-layer functionality. This document focuses on the media transport aspects of the MCU that can be realized using RTP, as discussed below. Further considered are the properties of mixers and translators, and how some types of deployed MCUs deviate from these properties.",
      "ja": "フィードバック（AVPF）と視聴覚プロフィール[RFC4585]を開発したときに、重点は、集中マルチポイント制御なしのポイント・ツー・ポイントと小さなマルチポイントシナリオの効率的なサポートにありました。しかし実際には、ほとんどのマルチポイント会議は、マイコンと呼ばれる集中管理ユニットを利用して動作します。 MCUはミキサーやトランスレータ機能（RTP [RFC3550]用語における）およびシグナリングサポートを実装してもよいです。彼らはまた、追加のアプリケーション層の機能が含まれていてもよいです。この文書では、以下に説明するように、RTPを使用して実現することができるMCUの媒体搬送側面に焦点を当てています。さらにミキサーと翻訳者、そしてどのように展開されたMCUの種類によっては、これらの特性から逸脱の性質があると考えました。"
    },
    {
      "indent": 3,
      "text": "This document also codifies new multipoint architectures that have recently been introduced and that were not anticipated in RFC 5117; thus, this document replaces [RFC5117]. These architectures use scalable video coding and simulcasting, and their associated centralized units are referred to as Selective Forwarding Middleboxes (SFMs). This codification provides a common information basis for future discussion and specification work.",
      "ja": "また、このドキュメントでは、最近導入されており、それはRFC 5117で予想されていなかった新しいマルチポイント・アーキテクチャを体系化。したがって、このドキュメントは[RFC5117]を置き換えます。これらのアーキテクチャは、スケーラブルビデオ符号化およびサイマルキャストを使用し、それらに関連する集中部は、選択的転送のMiddleboxes（支給材料）と呼ばれます。このコード化は、今後の議論と仕様の作業のための共通の情報基盤を提供します。"
    },
    {
      "indent": 3,
      "text": "The new topologies are Point to Point via Middlebox (Section 3.2), Source-Specific Multicast (Section 3.3.2), SSM with Local Unicast Resources (Section 3.3.3), Point to Multipoint Using Mesh (Section 3.4), Selective Forwarding Middlebox (Section 3.7), and Split Component Terminal (Section 3.10). The Point to Multipoint Using the RFC 3550 Mixer Model (Section 3.6) has been significantly expanded to cover two different versions, namely Media-Mixing Mixer (Section 3.6.1) and Media-Switching Mixer (Section 3.6.2).",
      "ja": "新しいトポロジは、メッシュ（3.4節）、選択的転送ミドルを使用して対多ミドル（3.2節）、ソース固有のマルチキャスト（3.3.2）、ローカルユニキャストリソースとSSM（3.3.3項）、ポイントを経由してポイントツーポイントです（3.7節）、およびスプリットコンポーネント端子（3.10節）。 RFCに3550ミキサーモデル（セクション3.6）を使用して、ポイントツーマルチポイントは大きく2つの異なるバージョン、つまりメディア・ミックスミキサー（3.6.1項）とメディア・スイッチングミキサー（セクション3.6.2）をカバーするために拡張されました。"
    },
    {
      "indent": 3,
      "text": "The document's attempt to clarify and explain sections of the RTP spec [RFC3550] is informal. It is not intended to update or change what is normatively specified within RFC 3550.",
      "ja": "明確にし、RTP仕様[RFC3550]のセクションを説明するための文書の試みは非公式です。更新または規範的にRFC 3550の中に指定されている内容を変更するものではありません。"
    },
    {
      "indent": 0,
      "text": "2. Definitions",
      "section_title": true,
      "ja": "2.定義"
    },
    {
      "indent": 0,
      "text": "2.1. Glossary",
      "section_title": true,
      "ja": "2.1。用語集"
    },
    {
      "indent": 3,
      "text": "ASM: Any-Source Multicast",
      "ja": "ASM：どれ-ソースマルチキャスト"
    },
    {
      "indent": 3,
      "text": "AVPF: The extended RTP profile for RTCP-based feedback",
      "ja": "AVPF：RTCPベースのフィードバックのための拡張RTPプロファイル"
    },
    {
      "indent": 3,
      "text": "CSRC: Contributing Source",
      "ja": "CSRC：貢献ソース"
    },
    {
      "indent": 3,
      "text": "Link: The data transport to the next IP hop",
      "ja": "リンク：次のIPホップへのデータ転送"
    },
    {
      "indent": 3,
      "text": "Middlebox: A device that is on the Path that media travel between two endpoints",
      "ja": "ミドル：2つのエンドポイント間のメディアの移動がパス上にあるデバイス"
    },
    {
      "indent": 3,
      "text": "MCU: Multipoint Control Unit",
      "ja": "MCU：マルチポイントコントロールユニット"
    },
    {
      "indent": 3,
      "text": "Path: The concatenation of multiple links, resulting in an end-to-end data transfer.",
      "ja": "パス：複数のリンクを連結し、エンド・ツー・エンドのデータ転送をもたらします。"
    },
    {
      "indent": 3,
      "text": "PtM: Point to Multipoint",
      "ja": "PtM：ポイント対多"
    },
    {
      "indent": 3,
      "text": "PtP: Point to Point",
      "ja": "ポイントツーポイント：ポイントツーポイント"
    },
    {
      "indent": 3,
      "text": "SFM: Selective Forwarding Middlebox",
      "ja": "SFM：選択転送ミドル"
    },
    {
      "indent": 3,
      "text": "SSM: Source-Specific Multicast",
      "ja": "SSM：ソース固有マルチキャスト"
    },
    {
      "indent": 3,
      "text": "SSRC: Synchronization Source",
      "ja": "SSRC：同期ソース"
    },
    {
      "indent": 0,
      "text": "2.2. Definitions Related to RTP Grouping Taxonomy",
      "section_title": true,
      "ja": "2.2。 RTPグループ分類に関連する用語の定義"
    },
    {
      "indent": 3,
      "text": "The following definitions have been taken from [RFC7656].",
      "ja": "以下の定義は[RFC7656]から取られています。"
    },
    {
      "indent": 3,
      "text": "Communication Session: A Communication Session is an association among two or more Participants communicating with each other via one or more Multimedia Sessions.",
      "ja": "通信セッション：通信セッションは、一つ以上のマルチメディアセッションを介して互いに連通する二つ以上の参加者間の関連付けです。"
    },
    {
      "indent": 3,
      "text": "Endpoint: A single addressable entity sending or receiving RTP packets. It may be decomposed into several functional blocks, but as long as it behaves as a single RTP stack mentity, it is classified as a single \"endpoint\".",
      "ja": "エンドポイント：単一アドレス指定可能なエンティティは、RTPパケットの送信または受信。これは、いくつかの機能ブロックに分解することができるが、限り、それは、単一のRTPスタックMENTITYとして振る舞うように、単一の「エンドポイント」として分類されています。"
    },
    {
      "indent": 3,
      "text": "Media Source: A Media Source is the logical source of a time progressing digital media stream synchronized to a reference clock. This stream is called a Source Stream.",
      "ja": "メディアソース：メディアソースは、基準クロックに同期したデジタルメディアストリームを進め、時間の論理的なソースです。この流れは、ソースストリームと呼ばれています。"
    },
    {
      "indent": 3,
      "text": "Multimedia Session: A Multimedia Session is an association among a group of participants engaged in communication via one or more RTP sessions.",
      "ja": "マルチメディアセッション：マルチメディアセッションは、一つ以上のRTPセッションを介した通信に従事して参加者のグループ間の関連です。"
    },
    {
      "indent": 0,
      "text": "3. Topologies",
      "section_title": true,
      "ja": "3.トポロジ"
    },
    {
      "indent": 3,
      "text": "This subsection defines several topologies that are relevant for codec control but also RTP usage in other contexts. The section starts with point-to-point cases, with or without middleboxes. Then it follows a number of different methods for establishing point-to-multipoint communication. These are structured around the most fundamental enabler, i.e., multicast, a mesh of connections, translators, mixers, and finally MCUs and SFMs. The section ends by discussing decomposited terminals, asymmetric middlebox behaviors, and combining topologies.",
      "ja": "このサブセクションでは、他の文脈におけるコーデック制御だけでなく、RTPの使用に関連するいくつかのトポロジを定義します。セクションには、または中間箱なしで、ポイントツーポイントの例で始まります。それはポイントツーマルチポイント通信を確立するための異なる方法の数に従います。これらは、最も基本的なイネーブラ、すなわち、マルチキャスト、接続のメッシュ、翻訳者、ミキサー、そして最後にMCUと支給材料を中心に構成されています。セクションはdecomposited端子、非対称ミドル行動を議論、およびトポロジを組み合わせることによって終了します。"
    },
    {
      "indent": 3,
      "text": "The topologies may be referenced in other documents by a shortcut name, indicated by the prefix \"Topo-\".",
      "ja": "トポロジーは、接頭辞「TOPO-」で示され、ショートカット名によって他の文書で参照することができます。"
    },
    {
      "indent": 3,
      "text": "For each of the RTP-defined topologies, we discuss how RTP, RTCP, and the carried media are handled. With respect to RTCP, we also discuss the handling of RTCP feedback messages as defined in [RFC4585] and [RFC5104].",
      "ja": "RTPに定義されたトポロジのそれぞれについて、私たちは、RTP、RTCP、および運ばメディアがどのように処理されるかについて説明します。 [RFC4585]と[RFC5104]で定義されたRTCPに関しては、我々はまた、RTCPフィードバックメッセージの取り扱いを議論します。"
    },
    {
      "indent": 0,
      "text": "3.1. Point to Point",
      "section_title": true,
      "ja": "3.1。ポイントからポイントへ"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Point-to-Point",
      "ja": "ショートカット名：TOPO-ポイントツーポイント"
    },
    {
      "indent": 3,
      "text": "The Point-to-Point (PtP) topology (Figure 1) consists of two endpoints, communicating using unicast. Both RTP and RTCP traffic are conveyed endpoint to endpoint, using unicast traffic only (even if, in exotic cases, this unicast traffic happens to be conveyed over an IP multicast address).",
      "ja": "ポイントツーポイント（PTP）トポロジー（図1）は、ユニキャストを使用して通信する、2つのエンドポイントから成ります。両方のRTPおよびRTCPトラフィックがユニキャストトラフィックのみを使用して、エンドポイント間を搬送される（エキゾチックな場合には、このユニキャストトラフィックは、IPマルチキャストアドレス上を搬送されるように起こる場合でも）。"
    },
    {
      "indent": 28,
      "text": "+---+         +---+\n| A |<------->| B |\n+---+         +---+",
      "raw": true
    },
    {
      "indent": 25,
      "text": "Figure 1: Point to Point",
      "ja": "図1：ポイントツーポイント"
    },
    {
      "indent": 3,
      "text": "The main property of this topology is that A sends to B, and only B, while B sends to A, and only A. This avoids all complexities of handling multiple endpoints and combining the requirements stemming from them. Note that an endpoint can still use multiple RTP Synchronization Sources (SSRCs) in an RTP session. The number of RTP sessions in use between A and B can also be of any number, subject only to system-level limitations like the number range of ports.",
      "ja": "このトポロジの主な特性は、BがAに送信し、唯一A.これは、複数のエンドポイントを処理し、それらから生じる要件を組み合わせる全て複雑さを回避しながら、Aは、B、およびBのみに送信することです。エンドポイントがまだRTPのセッションで複数のRTP同期ソース（SSRCs）を使用できることに注意してください。 AとBの間に使用されているRTPセッションの数は、任意の数のポートだけの数の範囲のようなシステムレベルの制限を受けることができます。"
    },
    {
      "indent": 3,
      "text": "RTCP feedback messages for the indicated SSRCs are communicated directly between the endpoints. Therefore, this topology poses minimal (if any) issues for any feedback messages. For RTP sessions that use multiple SSRCs per endpoint, it can be relevant to implement support for cross-reporting suppression as defined in \"Sending Multiple Media Streams in a Single RTP Session\" [MULTI-STREAM-OPT].",
      "ja": "示さSSRCsためのRTCPフィードバックメッセージは、エンドポイント間で直接通信されます。そのため、このトポロジは、任意のフィードバックメッセージのための最小限の（もしあれば）の問題を提起します。エンドポイントごとに複数のSSRCsを使用するRTPセッションでは、[MULTI-STREAM-OPT]「シングルRTPセッションで複数のメディアストリームの送信」で定義されているクロス報告抑制のためのサポートを実装するために関連することができます。"
    },
    {
      "indent": 0,
      "text": "3.2. Point to Point via Middlebox",
      "section_title": true,
      "ja": "3.2。ミドル経由ポイントへのポイント"
    },
    {
      "indent": 3,
      "text": "This section discusses cases where two endpoints communicate but have one or more middleboxes involved in the RTP session.",
      "ja": "このセクションでは、2つのエンドポイントは、RTPセッションに関与する1つのまたは複数のミドルボックスを伝えるが、持っている例について説明します。"
    },
    {
      "indent": 0,
      "text": "3.2.1. Translators",
      "section_title": true,
      "ja": "3.2.1。翻訳者"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-PtP-Translator",
      "ja": "ショートカット名：TOPO-PTP-翻訳"
    },
    {
      "indent": 3,
      "text": "Two main categories of translators can be distinguished: Transport Translators and Media Translators. Both translator types share common attributes that separate them from mixers. For each RTP stream that the translator receives, it generates an individual RTP stream in the other domain. A translator keeps the SSRC for an RTP stream across the translation, whereas a mixer can select a single RTP stream from multiple received RTP streams (in cases like audio/ video switching) or send out an RTP stream composed of multiple mixed media received in multiple RTP streams (in cases like audio mixing or video tiling), but always under its own SSRC, possibly using the CSRC field to indicate the source(s) of the content. Mixers are more common in point-to-multipoint cases than in PtP. The reason is that in PtP use cases, the primary focus of a middlebox is enabling interoperability, between otherwise non-interoperable endpoints, such as transcoding to a codec the receiver supports, which can be done by a Media Translator.",
      "ja": "翻訳の2つの主なカテゴリを区別することができます：交通翻訳者とメディア翻訳者。どちらの翻訳者タイプは、ミキサーからそれらを分離し、共通の属性を共有します。翻訳者が受信する各RTPストリームのために、それは他のドメイン内の個々のRTPストリームを生成します。翻訳者は、ミキサーは複数から単一のRTPストリームを選択することができるのに対し、（オーディオ/ビデオ・スイッチングのような場合には）RTPストリームを受信し、翻訳を横切るRTPストリームのためにSSRCを保持し、または複数の混合メディアからなるRTPストリームを送出複数で受信RTPは、おそらくコンテンツのソース（S）を示すために、CSRCフィールドを使用して、（オーディオミキシングやビデオタイルのような場合）、常に独自のSSRC下ストリーム。ミキサーは、PTPよりも、ポイント・ツー・マルチポイントの場合、より一般的です。その理由は、PTPのユースケースでは、ミドルボックスの主な焦点は、メディアトランスレータによって行うことができるようなコーデックへのトランスコーディングなどの他の非相互運用可能なエンドポイント、レシーバ支持体との間で、相互運用性を可能にすることです。"
    },
    {
      "indent": 3,
      "text": "As specified in Section 7.1 of [RFC3550], the SSRC space is common for all participants in the RTP session, independent of on which side of the translator the session resides. Therefore, it is the responsibility of the endpoints (as the RTP session participants) to run SSRC collision detection, and the SSRC is thus a field the translator cannot change. Any Source Description (SDES) information associated with an SSRC or CSRC also needs to be forwarded between the domains for any SSRC/CSRC used in the different domains.",
      "ja": "[RFC3550]のセクション7.1で指定されるように、SSRCスペースは、セッションが存在トランスレータのどちら側での独立したRTPセッションのすべての参加者のために共通しています。したがって、SSRC衝突検出を実行する（RTPセッションの参加者など）のエンドポイントの責任である、とSSRCはこのように翻訳者が変更することはできませんフィールドです。 SSRCまたはCSRCに関連付けられた任意のソース記述（SDES）情報は、異なるドメインで使用される任意のSSRC / CSRCのためのドメイン間で転送する必要があります。"
    },
    {
      "indent": 3,
      "text": "A translator commonly does not use an SSRC of its own and is not visible as an active participant in the RTP session. One reason to have its own SSRC is when a translator acts as a quality monitor that sends RTCP reports and therefore is required to have an SSRC. Another example is the case when a translator is prepared to use RTCP feedback messages. This may, for example, occur in a translator configured to detect packet loss of important video packets, and it wants to trigger repair by the media sending endpoint, by sending feedback messages. While such feedback could use the SSRC of the target for the translator (the receiving endpoint), this in turn would require translation of the target RTCP reports to make them consistent. It may be simpler to expose an additional SSRC in the session. The only concern is that endpoints failing to support the full RTP specification may have issues with multiple SSRCs reporting on the RTP streams sent by that endpoint, as this use case may be viewed as exotic by implementers.",
      "ja": "翻訳者は、一般的に、自身のSSRCを使用していないし、RTPセッションに積極的に参加者として表示されることはありません。翻訳者がRTCPレポートを送信し、したがって、SSRCを有することが要求される品質モニタとして作用したときに、自身のSSRCを持っている一つの理由です。別の例は、翻訳者がRTCPフィードバックメッセージを使用する用意がある場合です。これは、例えば、重要なビデオパケットのパケットロスを検出するように構成された翻訳者に発生する可能性があり、フィードバックメッセージを送信することにより、エンドポイントを送信することにより、メディアの修復をトリガしたいと考えています。そのようなフィードバックは、翻訳者（受信側エンドポイント）のための目標のSSRCを使用することができますが、これは順番にRTCPは、それらの一貫性を保つためにレポートをターゲットの翻訳を必要とします。セッション中に追加のSSRCを公開する方が簡単かもしれません。唯一の懸念は、エンドポイントがこのユースケースは、実装によってエキゾチックとして見ることができるように、複数のSSRCsは、そのエンドポイントによって送信されたRTPストリーム上で報告して問題が発生する可能性があり、完全なRTPの仕様をサポートすることができないということです。"
    },
    {
      "indent": 3,
      "text": "In general, a translator implementation should consider which RTCP feedback messages or codec-control messages it needs to understand in relation to the functionality of the translator itself. This is completely in line with the requirement to also translate RTCP messages between the domains.",
      "ja": "一般的に、翻訳者の実装は、それが翻訳自体の機能に関連して理解する必要のあるRTCPフィードバックメッセージやコーデック制御メッセージを考慮する必要があります。これは完全にも、ドメイン間のRTCPメッセージを翻訳するための要件に沿ったものです。"
    },
    {
      "indent": 0,
      "text": "3.2.1.1. Transport Relay/Anchoring",
      "section_title": true,
      "ja": "3.2.1.1。交通リレー/アンカー"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-PtP-Relay",
      "ja": "ショートカット名：TOPO-PTP-リレー"
    },
    {
      "indent": 3,
      "text": "There exist a number of different types of middleboxes that might be inserted between two endpoints on the transport level, e.g., to perform changes on the IP/UDP headers, and are, therefore, basic Transport Translators. These middleboxes come in many variations including NAT [RFC3022] traversal by pinning the media path to a public address domain relay and network topologies where the RTP stream is required to pass a particular point for audit by employing relaying, or preserving privacy by hiding each peer's transport addresses to the other party. Other protocols or functionalities that provide this behavior are Traversal Using Relays around NAT (TURN) [RFC5766] servers, Session Border Gateways, and Media Processing Nodes with media anchoring functionalities.",
      "ja": "基本的なトランスポート・トランスレータは、従って、そこにIP / UDPヘッダーに変更を行うために、例えば、トランスポート・レベルで2つのエンドポイント間に挿入されるかもしれない中間装置の異なる種類の数が存在する、としています。これらの中間装置は、RTPストリームは、各ピアの使用中継、または非表示にしてプライバシーを保護することによって、監査のために特定の点を通過するのに必要とされるパブリックアドレスドメインリレーおよびネットワークトポロジにメディアパスを固定することによってNAT [RFC3022]トラバーサルを含む多くのバリエーションに来ます他のパーティへのトランスポートアドレス。この動作を提供する他のプロトコルや機能がトラバーサルは、メディアが機能を固定してNAT（TURN）[RFC5766]のサーバー、セッションボーダーゲートウェイ、およびメディア処理ノードの周りのリレーを使用しています。"
    },
    {
      "indent": 21,
      "text": "+---+        +---+         +---+\n| A |<------>| T |<------->| B |\n+---+        +---+         +---+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 2: Point to Point with Translator",
      "ja": "図2：ポイントは翻訳でポイントします"
    },
    {
      "indent": 3,
      "text": "A common element in these functions is that they are normally transparent at the RTP level, i.e., they perform no changes on any RTP or RTCP packet fields and only affect the lower layers. They may affect, however, the path since the RTP and RTCP packets are routed between the endpoints in the RTP session, and thereby they indirectly affect the RTP session. For this reason, one could believe that Transport Translator-type middleboxes do not need to be included in this document. This topology, however, can raise additional requirements in the RTP implementation and its interactions with the signaling solution. Both in signaling and in certain RTCP fields, network addresses other than those of the relay can occur since B has a different network address than the relay (T). Implementations that cannot support this will also not work correctly when endpoints are subject to NAT.",
      "ja": "これらの機能に共通の要素は、それらが、それらは任意のRTPまたはRTCPパケットフィールドには変更を行わないとだけ下位層に影響を与える、すなわち通常RTPレベルで透明であることです。 RTPとRTCPパケットは、RTPセッション内のエンドポイント間でルーティングされているので、彼らは、しかし、パスに影響を与える可能性があり、それによって彼らは間接的にRTPセッションに影響を与えます。このため、一つは交通翻訳型ミドルボックスは、この文書に含まれる必要がないことを信じている可能性があります。このトポロジでは、しかし、追加のRTPの実装における要件およびシグナル・ソリューションとの相互作用を高めることができます。 Bは、リレー（T）とは異なるネットワーク・アドレスを有するので、シグナリングおよび特定のRTCPフィールドの両方において、リレー以外のネットワークアドレスが発生する可能性があります。エンドポイントがNATの対象となっているとき、これをサポートすることはできませんまた、実装は正しく動作しません。"
    },
    {
      "indent": 3,
      "text": "The Transport Relay implementations also have to take into account security considerations. In particular, source address filtering of incoming packets is usually important in relays, to prevent attackers from injecting traffic into a session, which one peer may, in the absence of adequate security in the relay, think it comes from the other peer.",
      "ja": "交通リレー実装も、アカウントのセキュリティの考慮事項を考慮する必要があります。具体的には、着信パケットの送信元アドレスフィルタリングは、セッションにトラフィックを注入するから攻撃を防ぐために、リレーでは通常重要であり、一方のピアは、リレーで十分なセキュリティが存在しない場合に、それは他のピアから来ていると思うことがあります。"
    },
    {
      "indent": 0,
      "text": "3.2.1.2. Transport Translator",
      "section_title": true,
      "ja": "3.2.1.2。交通翻訳"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Trn-Translator",
      "ja": "ショートカット名：TOPO-Trnの-翻訳"
    },
    {
      "indent": 3,
      "text": "Transport Translators (Topo-Trn-Translator) do not modify the RTP stream itself but are concerned with transport parameters. Transport parameters, in the sense of this section, comprise the transport addresses (to bridge different domains such as unicast to multicast) and the media packetization to allow other transport protocols to be interconnected to a session (in gateways).",
      "ja": "交通翻訳者（TOPO-Trnは-翻訳）は、RTPストリーム自体を変更するが、トランスポートパラメータと懸念しているしないでください。トランスポートパラメータは、このセクションの意味で、他のトランスポートプロトコルは、（ゲートウェイで）セッションに相互接続することを可能にするトランスポート・アドレス（例えば、マルチキャストのユニキャストなどの異なるドメインを埋めること）とメディアパケットを含みます。"
    },
    {
      "indent": 3,
      "text": "Translators that bridge between different protocol worlds need to be concerned about the mapping of the SSRC/CSRC (Contributing Source) concept to the non-RTP protocol. When designing a translator to a non-RTP-based media transport, an important consideration is how to handle different sources and their identities. This problem space is not discussed henceforth.",
      "ja": "翻訳者は、異なるプロトコルの世界の間のブリッジは非RTPプロトコルにSSRC / CSRC（貢献ソース）の概念のマッピングを心配する必要があります。非RTPベースのメディアトランスポートにトランスレータを設計する際、考慮すべき重要な点は、異なるソースや身元を処理する方法です。この問題空間は今後議論されていません。"
    },
    {
      "indent": 3,
      "text": "Of the Transport Translators, this memo is primarily interested in those that use RTP on both sides, and this is assumed henceforth.",
      "ja": "交通翻訳者の、このメモは両側にRTPを使用するもので、主に興味があり、これが今後想定されます。"
    },
    {
      "indent": 3,
      "text": "The most basic Transport Translators that operate below the RTP level were already discussed in Section 3.2.1.1.",
      "ja": "RTPレベル未満で動作最も基本的な交通の翻訳者はすでに3.2.1.1項で説明しました。"
    },
    {
      "indent": 0,
      "text": "3.2.1.3. Media Translator",
      "section_title": true,
      "ja": "3.2.1.3。メディア翻訳"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Media-Translator",
      "ja": "ショートカット名：TOPO-MEDIA-翻訳"
    },
    {
      "indent": 3,
      "text": "Media Translators (Topo-Media-Translator) modify the media inside the RTP stream. This process is commonly known as transcoding. The modification of the media can be as small as removing parts of the stream, and it can go all the way to a full decoding and re-encoding (down to the sample level or equivalent) utilizing a different media codec. Media Translators are commonly used to connect endpoints without a common interoperability point in the media encoding.",
      "ja": "メディア翻訳者（トポ・メディア・翻訳）RTPストリーム内のメディアを変更します。このプロセスは、一般的に、トランスコーディングとして知られています。メディアの変更は、ストリームの部分を除去すると小さくすることができ、異なるメディアコーデックを利用する（サンプルレベルまたは同等まで）ずっと完全な復号化および再符号化に行くことができます。メディア翻訳者は、一般的にメディアエンコーディングに共通の相互運用ポイントなしでエンドポイントを接続するために使用されています。"
    },
    {
      "indent": 3,
      "text": "Stand-alone Media Translators are rare. Most commonly, a combination of Transport and Media Translator is used to translate both the media and the transport aspects of the RTP stream carrying the media between two transport domains.",
      "ja": "スタンドアロンメディア翻訳者はまれです。最も一般的には、交通やメディア翻訳の組み合わせは、メディアと2つのトランスポートドメイン間でメディアを運ぶRTPストリームの輸送面の両方を変換するために使用されます。"
    },
    {
      "indent": 3,
      "text": "When media translation occurs, the translator's task regarding handling of RTCP traffic becomes substantially more complex. In this case, the translator needs to rewrite endpoint B's RTCP receiver report before forwarding them to endpoint A. The rewriting is needed as the RTP stream received by B is not the same RTP stream as the other participants receive. For example, the number of packets transmitted to B may be lower than what A sends, due to the different media format and data rate. Therefore, if the receiver reports were forwarded without changes, the extended highest sequence number would indicate that B was substantially behind in reception, while it most likely would not be. Therefore, the translator must translate that number to a corresponding sequence number for the stream the translator received. Similar requirements exist for most other fields in the RTCP receiver reports.",
      "ja": "メディアの変換が発生すると、RTCPトラフィックの取り扱いに関する翻訳者の仕事は、実質的に複雑になります。この場合、翻訳者は、他の参加者が受け取るとBが受信したRTPストリームは同じRTPストリームではないとして、書き換えが必要とされているエンドポイントAにそれらを転送する前に、エンドポイントBのRTCPレシーバレポートを書き換える必要があります。例えば、Bへ送信されるパケットの数は、異なるメディアフォーマット及びデータレートに、Aが送​​信するものより低くてもよいです。レシーバレポートを変更せずに転送された場合したがって、拡張最高シーケンス番号は、それが最も可能性が高いではないであろうしながらBは、受信中に実質的に後ろにあったことを示すであろう。そのため、翻訳者は、翻訳者が受信したストリームのための対応するシーケンス番号にその番号を変換する必要があります。同様の要件は、RTCP受信レポートの中で最も他のフィールドのために存在します。"
    },
    {
      "indent": 3,
      "text": "A Media Translator may in some cases act on behalf of the \"real\" source (the endpoint originally sending the media to the translator) and respond to RTCP feedback messages. This may occur, for example, when a receiving endpoint requests a bandwidth reduction, and the Media Translator has not detected any congestion or other reasons for bandwidth reduction between the sending endpoint and itself. In that case, it is sensible that the Media Translator reacts to codec control messages itself, for example, by transcoding to a lower media rate.",
      "ja": "メディアトランスレータは、いくつかのケースでは「本物」のソース（本来は翻訳者にメディアを送信するエンドポイント）に代わって動作し、フィードバックメッセージをRTCPに応答することができます。これは、受信側エンドポイントが帯域幅の減少を要求し、メディアトランスレータは、任意の輻輳や送信エンドポイントとそれ自体との間の帯域幅の低減のための他の理由を検出していない場合、例えば、起こり得ます。その場合には、メディアトランスレータが低いメディアレートにトランスコードすることにより、例えば、制御メッセージ自体をコーデックに反応することが賢明です。"
    },
    {
      "indent": 3,
      "text": "A variant of translator behavior worth pointing out is the one depicted in Figure 3 of an endpoint A sending an RTP stream containing media (only) to B. On the path, there is a device T that manipulates the RTP streams on A's behalf. One common example is that T adds a second RTP stream containing Forward Error Correction (FEC) information in order to protect A's (non FEC-protected) RTP stream. In this case, T needs to semantically bind the new FEC RTP stream to A's media-carrying RTP stream, for example, by using the same CNAME as A.",
      "ja": "指摘する価値トランスレータ挙動の変異体がパス上にBにRTPストリームを含むメディアを（のみ）送信エンドポイントAの図3に示されているものである、RTPはAの代わりにストリーム操作装置Tが存在します。一つの一般的な例は、TはAの（非FEC保護）RTPストリームを保護するために前方誤り訂正（FEC）情報を含む第二のRTPストリームを追加することです。この場合、Tは、意味的にAのメディア担持RTPストリームに、例えば、Aと同じCNAMEを使用して、新しいFEC RTPストリームを結合するために必要"
    },
    {
      "indent": 17,
      "text": "+------+        +------+         +------+\n|      |        |      |         |      |\n|  A   |------->|  T   |-------->|  B   |\n|      |        |      |---FEC-->|      |\n+------+        +------+         +------+",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 3: Media Translator Adding FEC",
      "ja": "図3：FECを追加するメディア翻訳"
    },
    {
      "indent": 3,
      "text": "There may also be cases where information is added into the original RTP stream, while leaving most or all of the original RTP packets intact (with the exception of certain RTP header fields, such as the sequence number). One example is the injection of metadata into the RTP stream, carried in their own RTP packets.",
      "ja": "また、ほとんどまたは完全な（例えばシーケンス番号などの特定のRTPヘッダフィールドを除く）は、元のRTPパケットのすべてを残して情報が、元のRTPストリームに追加される場合があります。一つの例は、独自のRTPパケットで運ばれ、RTPストリームへのメタデータの注射です。"
    },
    {
      "indent": 3,
      "text": "Similarly, a Media Translator can sometimes remove information from the RTP stream, while otherwise leaving the remaining RTP packets unchanged (again with the exception of certain RTP header fields).",
      "ja": "そうでなければ（再び一定RTPヘッダフィールドを除いて）不変の残りのRTPパケットを残して同様に、メディアトランスレータは、時々、RTPストリームから情報を削除することができます。"
    },
    {
      "indent": 3,
      "text": "Either type of functionality where T manipulates the RTP stream, or adds an accompanying RTP stream, on behalf of A is also covered under the Media Translator definition.",
      "ja": "TはAに代わって、付随するRTPストリームをRTPストリームを操作、または追加機能のどちらのタイプも、メディア翻訳者定義の下に覆われています。"
    },
    {
      "indent": 0,
      "text": "3.2.2. Back-to-Back RTP sessions",
      "section_title": true,
      "ja": "3.2.2。バックツーバックのRTPセッション"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Back-To-Back",
      "ja": "ショートカット名：TOPO-バックツーバック"
    },
    {
      "indent": 3,
      "text": "There exist middleboxes that interconnect two endpoints (A and B) through themselves (MB), but not by being part of a common RTP session. Instead, they establish two different RTP sessions: one between A and the middlebox and another between the middlebox and B. This topology is called Topo-Back-To-Back.",
      "ja": "そこそれ自体インターコネクト2つのエンドポイント（A及びB）の（MB）中間装置が存在ではなく、共通のRTPセッションの一部であることによって。 AとBの間のミドルとミドルと別のこのトポロジは、TOPO-バック・トゥ・バックと呼ばれている間に1：代わりに、彼らは二つの異なるRTPセッションを確立します。"
    },
    {
      "indent": 17,
      "text": "  |<--Session A-->|  |<--Session B-->|\n+------+        +------+         +------+\n|  A   |------->|  MB  |-------->|  B   |\n+------+        +------+         +------+",
      "raw": true
    },
    {
      "indent": 11,
      "text": "Figure 4: Back-to-Back RTP Sessions through Middlebox",
      "ja": "図4：バックツーバックミドルてRTPセッション"
    },
    {
      "indent": 3,
      "text": "The middlebox acts as an application-level gateway and bridges the two RTP sessions. This bridging can be as basic as forwarding the RTP payloads between the sessions or more complex including media transcoding. The difference of this topology relative to the single RTP session context is the handling of the SSRCs and the other session-related identifiers, such as CNAMEs. With two different RTP sessions, these can be freely changed and it becomes the middlebox's responsibility to maintain the correct relations.",
      "ja": "ミドルボックスは、アプリケーション・レベルのゲートウェイとして機能する二つのRTPセッションをブリッジ。このブリッジは、メディアトランスコーディングを含むセッション以上の複合体との間のRTPペイロードを転送するなどといった基本的なことができます。シングルRTPセッションのコンテキストにこのトポロジの相対的な差がSSRCsなどのCNAMEなどの他のセッション関連識別子の取り扱いです。二つの異なるRTPセッションでは、これらを自由に変更することができ、それが正しい関係を維持するためにミドルの責任となります。"
    },
    {
      "indent": 3,
      "text": "The signaling or other above RTP-level functionalities referencing RTP streams may be what is most impacted by using two RTP sessions and changing identifiers. The structure with two RTP sessions also puts a congestion control requirement on the middlebox, because it becomes fully responsible for the media stream it sources into each of the sessions.",
      "ja": "RTPストリームを参照するRTPレベルの機能上のシグナリングまたは他のは多くても2つのRTPセッションを使用して、識別子を変更することによって影響を受けるものであってもよいです。それはセッションのそれぞれにソースするメディアストリームのために完全に責任になるので2つのRTPセッションを有する構造はまた、ミドルに輻輳制御要件を置きます。"
    },
    {
      "indent": 3,
      "text": "Adherence to congestion control can be solved locally on each of the two segments or by bridging statistics from the receiving endpoint through the middlebox to the sending endpoint. From an implementation point, however, the latter requires dealing with a number of inconsistencies. First, packet loss must be detected for an RTP stream sent from A to the middlebox, and that loss must be reported through a skipped sequence number in the RTP stream from the middlebox to B. This coupling and the resulting inconsistencies are conceptually easier to handle when considering the two RTP streams as belonging to a single RTP session.",
      "ja": "輻輳制御への付着は、二つのセグメントの各々に又は送信エンドポイントにミドル介して受信エンドポイントからの統計を架橋することによって局所的に解決することができます。実装の観点から、しかし、後者は、不整合の数を扱う必要があります。まず、パケットロスがミドルボックスから送信されたRTPストリームのために検出されなければならず、その損失は、この結合BにミドルからRTPストリーム内のスキップされたシーケンス番号を介して報告されなければならない、そして得られた矛盾は取り扱いが概念的に容易です考えるときに、2つのRTPは、単一のRTPセッションに属するものとしてストリーム。"
    },
    {
      "indent": 0,
      "text": "3.3. Point to Multipoint Using Multicast",
      "section_title": true,
      "ja": "3.3。マルチキャストを使用したポイントツーマルチポイント"
    },
    {
      "indent": 3,
      "text": "Multicast is an IP-layer functionality that is available in some networks. Two main flavors can be distinguished: Any-Source Multicast (ASM) [RFC1112] where any multicast group participant can send to the group address and expect the packet to reach all group participants and Source-Specific Multicast (SSM) [RFC3569], where only a particular IP host sends to the multicast group. Each of these models are discussed below in their respective sections.",
      "ja": "マルチキャストは、一部のネットワークで利用可能なIPレイヤ機能です。二つの主要なフレーバーが区別することができます：任意のマルチキャストグループ参加者はパケットをグループアドレスに送ると期待することができ、任意の-ソースマルチキャスト（ASM）[RFC1112]は、すべてのグループの参加者とソース固有マルチキャスト（SSM）[RFC3569]を、到達しますのみ、特定のIPホストがマルチキャストグループに送信します。これらのモデルのそれぞれは、それぞれのセクションには、以下に説明されています。"
    },
    {
      "indent": 0,
      "text": "3.3.1. Any-Source Multicast (ASM)",
      "section_title": true,
      "ja": "3.3.1。どれ-ソースマルチキャスト（ASM）"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-ASM (was Topo-Multicast)",
      "ja": "ショートカット名：TOPO-ASMは、（TOPO-マルチキャストありました）"
    },
    {
      "indent": 24,
      "text": "           +-----+\n+---+     /       \\    +---+\n| A |----/         \\---| B |\n+---+   /   Multi-  \\  +---+\n       +    cast     +\n+---+   \\  Network  /  +---+\n| C |----\\         /---| D |\n+---+     \\       /    +---+\n           +-----+",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 5: Point to Multipoint Using Multicast",
      "ja": "図5：ポイントは、マルチキャストを使用して対多"
    },
    {
      "indent": 3,
      "text": "Point to Multipoint (PtM) is defined here as using a multicast topology as a transmission model, in which traffic from any multicast group participant reaches all the other multicast group participants, except for cases such as:",
      "ja": "マルチポイント（PTM）へのポイントのような場合を除き、他のすべてのマルチキャストグループ参加者に到達する任意のマルチキャストグループ参加者からのトラフィック伝送モデルとしてマルチキャストトポロジーを使用するものとしてここで定義されます。"
    },
    {
      "indent": 3,
      "text": "o packet loss, or",
      "ja": "Oパケット損失、または"
    },
    {
      "indent": 3,
      "text": "o when a multicast group participant does not wish to receive the traffic for a specific multicast group and, therefore, has not subscribed to the IP multicast group in question. This scenario can occur, for example, where a Multimedia Session is distributed using two or more multicast groups, and a multicast group participant is subscribed only to a subset of these sessions.",
      "ja": "マルチキャストグループの参加者は、したがって、特定のマルチキャストグループのトラフィックを受信したくないとき、O、問題のIPマルチキャストグループに加入していません。このシナリオでは、マルチメディアセッションは、2つのまたは複数のマルチキャストグループを使用して分配され、マルチキャストグループ参加者のみが、これらのセッションのサブセットに加入している例のために、起こり得ます。"
    },
    {
      "indent": 3,
      "text": "In the above context, \"traffic\" encompasses both RTP and RTCP traffic. The number of multicast group participants can vary between one and many, as RTP and RTCP scale to very large multicast groups (the theoretical limit of the number of participants in a single RTP session is in the range of billions). The above can be realized using ASM.",
      "ja": "上記文脈において、「トラフィック」は、RTPおよびRTCPトラフィックの両方を包含する。マルチキャストグループ参加者の数は、RTPとRTCPスケールに非常に大きなマルチキャストグループ（シングルRTPセッションの参加者数の理論的限界は、数十億の範囲内である）ように、一方と多くの間で変化させることができます。上記ASMを使用して実現することができます。"
    },
    {
      "indent": 3,
      "text": "For feedback usage, it is useful to define a \"small multicast group\" as a group where the number of multicast group participants is so low (and other factors such as the connectivity is so good) that it allows the participants to use early or immediate feedback, as defined in AVPF [RFC4585]. Even when the environment would allow for the use of a small multicast group, some applications may still want to use the more limited options for RTCP feedback available to large multicast groups, for example, when there is a likelihood that the threshold of the small multicast group (in terms of multicast group participants) may be exceeded during the lifetime of a session.",
      "ja": "フィードバックの使用のためには、マルチキャストグループ参加者の数は、それが参加者が早期または即時使用することを可能にするように低い（例えば、接続性は非常に良好である等の他の要因）がグループとして「小マルチキャストグループ」を定義することが有用ですフィードバック、AVPF [RFC4585]で定義されます。環境は小規模なマルチキャストグループの使用を可能にするとき可能性がある場合でも、一部のアプリケーションは、まだ、例えば、大規模なマルチキャストグループへの利用可能RTCPフィードバックのためのより限定されたオプションを使用したい場合があり、小さなマルチキャストのしきい値（マルチキャストグループ参加者の観点から）グループセッションの存続期間中に超えることができます。"
    },
    {
      "indent": 3,
      "text": "RTCP feedback messages in multicast reach, like media data, every subscriber (subject to packet losses and multicast group subscription). Therefore, the feedback suppression mechanism discussed in [RFC4585] is typically required. Each individual endpoint that is a multicast group participant needs to process every feedback message it receives, not only to determine if it is affected or if the feedback message applies only to some other endpoint but also to derive timing restrictions for the sending of its own feedback messages, if any.",
      "ja": "RTCPフィードバックメディアデータのようなマルチキャスト到達範囲内のメッセージ、すべての加入者（パケットロスおよびマルチキャストグループのサブスクリプションの対象）。したがって、[RFC4585]で説明したフィードバック抑制機構は、典型的には必要とされています。マルチキャストグループの参加者である個々のエンドポイントは、それが影響を受けているかどうかを判断するだけでなく、それが受け取るすべてのフィードバックメッセージを処理する必要があるか、フィードバックメッセージは、独自のフィードバックを送信するためのタイミング制約を導出するだけでいくつかの他のエンドポイントに適用されるだけでなく、場合メッセージがあれば。"
    },
    {
      "indent": 0,
      "text": "3.3.2. Source-Specific Multicast (SSM)",
      "section_title": true,
      "ja": "3.3.2。ソース固有マルチキャスト（SSM）"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-SSM",
      "ja": "ショートカット名：TOPO-SSM"
    },
    {
      "indent": 3,
      "text": "In Any-Source Multicast, any of the multicast group participants can send to all the other multicast group participants, by sending a packet to the multicast group. In contrast, Source-Specific Multicast [RFC3569][RFC4607] refers to scenarios where only a single source (Distribution Source) can send to the multicast group, creating a topology that looks like the one below:",
      "ja": "どれ-ソースマルチキャストでは、マルチキャストグループ参加者のいずれかがマルチキャストグループにパケットを送信することにより、他のすべてのマルチキャストグループの参加者に送信することができます。対照的に、ソース固有マルチキャスト[RFC3569]、[RFC4607]は以下のいずれかのように見えるのトポロジを作成する、単一のソース（配信元）をマルチキャストグループに送信することができるシナリオを指します。"
    },
    {
      "indent": 10,
      "text": "+--------+       +-----+\n|Media   |       |     |       Source-Specific\n|Sender 1|<----->| D S |          Multicast\n+--------+       | I O |  +--+----------------> R(1)\n                 | S U |  |  |                    |\n+--------+       | T R |  |  +-----------> R(2)   |\n|Media   |<----->| R C |->+  |           :   |    |\n|Sender 2|       | I E |  |  +------> R(n-1) |    |\n+--------+       | B   |  |  |          |    |    |\n    :            | U   |  +--+--> R(n)  |    |    |\n    :            | T +-|          |     |    |    |\n    :            | I | |<---------+     |    |    |\n+--------+       | O |F|<---------------+    |    |\n|Media   |       | N |T|<--------------------+    |\n|Sender M|<----->|   | |<-------------------------+\n+--------+       +-----+       RTCP Unicast",
      "raw": true
    },
    {
      "indent": 10,
      "text": "FT = Feedback Target Transport from the Feedback Target to the Distribution Source is via unicast or multicast RTCP if they are not co-located.",
      "ja": "フィードバック目標からFT =フィードバックターゲット交通の配信元に、彼らは同じ場所に配置されていない場合、ユニキャストまたはマルチキャストRTCPを経由しています。"
    },
    {
      "indent": 7,
      "text": "Figure 6: Point to Multipoint Using Source-Specific Multicast",
      "ja": "図6：ポイントは、ソース固有のマルチキャストを使用して対多"
    },
    {
      "indent": 3,
      "text": "In the SSM topology (Figure 6), a number of RTP sending endpoints (RTP sources henceforth) (1 to M) are allowed to send media to the SSM group. These sources send media to a dedicated Distribution Source, which forwards the RTP streams to the multicast group on behalf of the original RTP sources. The RTP streams reach the receiving endpoints (receivers henceforth) (R(1) to R(n)). The receivers' RTCP messages cannot be sent to the multicast group, as the SSM multicast group by definition has only a single IP sender. To support RTCP, an RTP extension for SSM [RFC5760] was defined. It uses unicast transmission to send RTCP from each of the receivers to one or more Feedback Targets (FT). The Feedback Targets relay the RTCP unmodified, or provide a summary of the participants' RTCP reports towards the whole group by forwarding the RTCP traffic to the",
      "ja": "SSMトポロジ（図6）において、RTP送信エンドポイントの数（以下、RTPソース）（M 1）はSSMグループにメディアを送信することを許可されています。これらのソースは、RTPは、元のRTPソースの代わりに、マルチキャストグループにストリームを転送し、専用の配布ソースにメディアを送信します。 RTPは（R（n）はR（1））の受信エンドポイント（以下レシーバ）に達するストリーム。定義により、SSMマルチキャストグループは、単一のIP送信元を持っているとして、受信者RTCPメッセージは、マルチキャストグループに送信することはできません。 RTCP、SSM [RFC5760]のためのRTPの拡張をサポートするために定義されました。これは、1つの以上のフィードバックターゲット（FT）に受信機のそれぞれからRTCPを送信するユニキャスト送信を使用します。フィードバック目標は、RTCPをそのまま中継し、またはにRTCPトラフィックを転送することによって、グループ全体への参加者のRTCPレポートの要約を提供します"
    },
    {
      "indent": 3,
      "text": "Distribution Source. Figure 6 only shows a single Feedback Target integrated in the Distribution Source, but for scalability the FT can be distributed and each instance can have responsibility for subgroups of the receivers. For summary reports, however, there typically must be a single Feedback Target aggregating all the summaries to a common message to the whole receiver group.",
      "ja": "配布ソース。図6は、配信元に統合単一フィードバック目標を示しているが、スケーラビリティのためにFTを分散することができ、各インスタンスは、受信機のサブグループに責任を持つことができます。要約レポートでは、しかし、一般的に受信機全体のグループに共通のメッセージへのすべての要約を集約し、単一のフィードバック目標がなければなりません。"
    },
    {
      "indent": 3,
      "text": "The RTP extension for SSM specifies how feedback (both reception information and specific feedback events) are handled. The more general problems associated with the use of multicast, where everyone receives what the Distribution Source sends, need to be accounted for.",
      "ja": "SSM用のRTP拡張子はフィードバック（受信情報の両方と特異的フィードバックイベント）が処理される方法を指定します。誰もが配布ソースが送信するものを受けるマルチキャストの使用に関連した、より一般的な問題は、計上する必要があります。"
    },
    {
      "indent": 3,
      "text": "The aforementioned situation results in common behavior for RTP multicast:",
      "ja": "上記の状況は、RTPマルチキャストのための一般的な動作になり："
    },
    {
      "indent": 3,
      "text": "1. Multicast applications often use a group of RTP sessions, not one. Each endpoint needs to be a member of most or all of these RTP sessions in order to perform well.",
      "ja": "1.マルチキャストアプリケーションは、多くの場合、RTPセッションのグループではなく、いずれかを使用します。各エンドポイントはうまく実行するためにこれらのRTPセッションの大部分または全てのメンバーである必要があります。"
    },
    {
      "indent": 3,
      "text": "2. Within each RTP session, the number of media sinks is likely to be much larger than the number of RTP sources.",
      "ja": "各RTPセッション内2.メディアシンクの数は、RTPソースの数よりもはるかに大きくなる可能性があります。"
    },
    {
      "indent": 3,
      "text": "3. Multicast applications need signaling functions to identify the relationships between RTP sessions.",
      "ja": "3.マルチキャストアプリケーションは、RTPセッションの間の関係を識別するためのシグナリング機能を必要とします。"
    },
    {
      "indent": 3,
      "text": "4. Multicast applications need signaling functions to identify the relationships between SSRCs in different RTP sessions.",
      "ja": "4.マルチキャストアプリケーションは、異なるRTPセッションにおけるSSRCs間の関係を識別するためのシグナリング機能を必要とします。"
    },
    {
      "indent": 3,
      "text": "All multicast configurations share a signaling requirement: all of the endpoints need to have the same RTP and payload type configuration. Otherwise, endpoint A could, for example, be using payload type 97 to identify the video codec H.264, while endpoint B would identify it as MPEG-2, with unpredictable but almost certainly not visually pleasing results.",
      "ja": "すべてのマルチキャストの構成は、シグナリング要件を共有する：すべてのエンドポイントが同じRTPペイロードタイプの構成を持っている必要があります。エンドポイントBは、予測できないが、ほぼ確実ではない視覚的に満足な結果で、MPEG-2としてそれを識別しながら、それ以外の場合、エンドポイントAは、例えば、ビデオコーデック264を識別するために、ペイロードタイプ97を使用することができます。"
    },
    {
      "indent": 3,
      "text": "Security solutions for this type of group communication are also challenging. First, the key management and the security protocol must support group communication. Source authentication becomes more difficult and requires specialized solutions. For more discussion on this, please review \"Options for Securing RTP Sessions\" [RFC7201].",
      "ja": "グループ通信のこのタイプのためのセキュリティソリューションも挑戦しています。まず、鍵管理およびセキュリティプロトコルは、グループ通信をサポートしている必要があります。ソース認証は、より困難になり、専門的なソリューションを必要とします。これに関する詳細については、[RFC7201]「RTPセッションの保護のオプション」をお読みください。"
    },
    {
      "indent": 0,
      "text": "3.3.3. SSM with Local Unicast Resources",
      "section_title": true,
      "ja": "3.3.3。ローカルユニキャストリソースとSSM"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-SSM-RAMS",
      "ja": "ショートカット名：TOPO-SSM-RAMS"
    },
    {
      "indent": 3,
      "text": "\"Unicast-Based Rapid Acquisition of Multicast RTP Sessions\" [RFC6285] results in additional extensions to SSM topology.",
      "ja": "「マルチキャストRTPセッションのユニキャストベースの高速取得」[RFC6285]はSSMトポロジに追加の拡張をもたらします。"
    },
    {
      "indent": 3,
      "text": " -----------                                       --------------\n|           |------------------------------------>|              |\n|           |.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.->|              |\n|           |                                     |              |\n| Multicast |          ----------------           |              |\n|  Source   |         | Retransmission |          |              |\n|           |-------->|  Server (RS)   |          |              |\n|           |.-.-.-.->|                |          |              |\n|           |         |  ------------  |          |              |\n -----------          | |  Feedback  | |<.=.=.=.=.|              |\n                      | | Target (FT)| |<~~~~~~~~~| RTP Receiver |\nPRIMARY MULTICAST     |  ------------  |          |   (RTP_Rx)   |\nRTP SESSION with      |                |          |              |\nUNICAST FEEDBACK      |                |          |              |\n                      |                |          |              |\n- - - - - - - - - - - |- - - - - - - - |- - - - - |- - - - - - - |- -\n                      |                |          |              |\nUNICAST BURST         |  ------------  |          |              |\n(or RETRANSMISSION)   | |   Burst/   | |<~~~~~~~~>|              |\nRTP SESSION           | |  Retrans.  | |.........>|              |\n                      | |Source (BRS)| |<.=.=.=.=>|              |\n                      |  ------------  |          |              |\n                      |                |          |              |\n                       ----------------            --------------",
      "raw": true
    },
    {
      "indent": 6,
      "text": "-------> Multicast RTP Stream\n.-.-.-.> Multicast RTCP Stream\n.=.=.=.> Unicast RTCP Reports\n~~~~~~~> Unicast RTCP Feedback Messages\n.......> Unicast RTP Stream",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 7: SSM with Local Unicast Resources (RAMS)",
      "ja": "図7：ローカルユニキャストリソースとSSM（RAMS）"
    },
    {
      "indent": 3,
      "text": "The rapid acquisition extension allows an endpoint joining an SSM multicast session to request media starting with the last sync point (from where media can be decoded without requiring context established by the decoding of prior packets) to be sent at high speed until such time where, after the decoding of these burst-delivered media packets, the correct media timing is established, i.e., media packets are received within adequate buffer intervals for this application. This is accomplished by first establishing a unicast PtP RTP session between the Burst/Retransmission Source (BRS) (Figure 7) and the RTP Receiver. The unicast session is used to transmit cached packets from the multicast group at higher then normal speed in order to synchronize the receiver to the ongoing multicast RTP stream. Once the RTP receiver and its decoder have caught up with the multicast session's current delivery, the receiver switches over to receiving directly from the multicast group. In many deployed applications, the (still existing) PtP RTP session is used as a repair channel, i.e., for RTP Retransmission traffic of those packets that were not received from the multicast group.",
      "ja": "急速取得拡張は、エンドポイントがどこな時間まで高速に送信する（メディアが前のパケットの復号により確立されたコンテキストを必要とせずに復号することができる場所から）最後の同期点で始まるメディアを要求するSSMマルチキャストセッションに参加可能これらのバースト配信メディアパケットの復号化が、正しいメディアタイミングが確立された後、すなわち、メディアパケットは、このアプリケーションのために十分なバッファ間隔内に受信されます。これは、最初のバースト/再送ソース（BRS）（図7）とRTP受信機との間のユニキャストのPtP RTPセッションを確立することによって達成されます。ユニキャストセッションが進行中のマルチキャストRTPストリームに受信機を同期させるために通常の速度より高い時にマルチキャストグループからのキャッシュされたパケットを送信するために使用されます。 RTP受信機及びそのデコーダがマルチキャストセッションの現在の送達に追いついたら、受信機はマルチキャストグループから直接受信に切り替わります。多くのデプロイされたアプリケーションでは、（まだ存在）のPtP RTPセッションは、マルチキャストグループから受信されなかったパケットのRTP再送トラフィックのために、修理チャネル、すなわちとして使用されます。"
    },
    {
      "indent": 0,
      "text": "3.4. Point to Multipoint Using Mesh",
      "section_title": true,
      "ja": "3.4。メッシュを使用したポイントツーマルチポイント"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Mesh",
      "ja": "ショートカット名：TOPO-メッシュ"
    },
    {
      "indent": 29,
      "text": "+---+      +---+\n| A |<---->| B |\n+---+      +---+\n  ^         ^\n   \\       /\n    \\     /\n     v   v\n     +---+\n     | C |\n     +---+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 8: Point to Multipoint Using Mesh",
      "ja": "図8：ポイントはメッシュを使用して対多"
    },
    {
      "indent": 3,
      "text": "Based on the RTP session definition, it is clearly possible to have a joint RTP session involving three or more endpoints over multiple unicast transport flows, like the joint three-endpoint session depicted above. In this case, A needs to send its RTP streams and RTCP packets to both B and C over their respective transport flows. As long as all endpoints do the same, everyone will have a joint view of the RTP session.",
      "ja": "RTPセッションの定義に基づいて、上に示したジョイント三のエンドポイントセッションのような複数のユニキャストトランスポート・フロー上に三つ以上のエンドポイントを伴う関節RTPセッションを持つことが明らかに可能です。この場合、Aは、それぞれのトランスポート・フロー上にBとCの両方へのRTPストリームとRTCPパケットを送信する必要があります。限り、すべてのエンドポイントが同じことを行うよう、誰もがRTPセッションの共同見解を持っています。"
    },
    {
      "indent": 3,
      "text": "This topology does not create any additional requirements beyond the need to have multiple transport flows associated with a single RTP session. Note that an endpoint may use a single local port to receive all these transport flows (in which case the sending port, IP address, or SSRC can be used to demultiplex), or it might have separate local reception ports for each of the endpoints.",
      "ja": "このトポロジでは、単一のRTPセッションに関連付けられた複数のトランスポート・フローを持つ必要性を超えた任意の追加要件を作成しません。終点が（送信ポート、IPアドレス、またはSSRCを逆多重化するために使用することができる場合）は、すべてのこれらのトランスポート・フローを受信するために単一のローカルポートを使用することができる、又はそれはエンドポイントの各々のための別々のローカル受信ポートを持っているかもしれないことに留意されたいです。"
    },
    {
      "indent": 9,
      "text": "+-A--------------------+\n|+---+                 |\n||CAM|                 |                 +-B-----------+\n|+---+     +-UDP1------|                 |-UDP1------+ |\n|  |       | +-RTP1----|                 |-RTP1----+ | |\n|  V       | | +-Video-|                 |-Video-+ | | |\n|+----+    | | |       |<----------------|BV1    | | | |\n||ENC |----+-+-+--->AV1|---------------->|       | | | |\n|+----+    | | +-------|                 |-------+ | | |\n|  |       | +---------|                 |---------+ | |\n|  |       +-----------|                 |-----------+ |\n|  |                   |                 +-------------+\n|  |                   |\n|  |                   |                 +-C-----------+\n|  |       +-UDP2------|                 |-UDP2------+ |\n|  |       | +-RTP1----|                 |-RTP1----+ | |\n|  |       | | +-Video-|                 |-Video-+ | | |\n|  +-------+-+-+--->AV1|---------------->|       | | | |\n|          | | |       |<----------------|CV1    | | | |\n|          | | +-------|                 |-------+ | | |\n|          | +---------|                 |---------+ | |\n|          +-----------|                 |-----------+ |\n+----------------------+                 +-------------+",
      "raw": true
    },
    {
      "indent": 10,
      "text": "Figure 9: A Multi-Unicast Mesh with a Joint RTP Session",
      "ja": "図9：合同RTPセッションにマルチユニキャストメッシュ"
    },
    {
      "indent": 3,
      "text": "Figure 9 depicts endpoint A's view of using a common RTP session when establishing the mesh as shown in Figure 8. There is only one RTP session (RTP1) but two transport flows (UDP1 and UDP2). The Media Source (CAM) is encoded and transmitted over the SSRC (AV1) across both transport layers. However, as this is a joint RTP session, the two streams must be the same. Thus, a congestion control adaptation needed for the paths A to B and A to C needs to use the most restricting path's properties.",
      "ja": "図8に示すように、図9は、1つのRTPセッション（RTP1）が、2つの搬送流れ（UDP1とUDP2）が存在するメッシュを確立するときに共通のRTPセッションを使用するエンドポイントAの図を示します。メディアソース（CAM）は、符号化され、両方の輸送層を横切っSSRC（AV1）を介して送信されます。これは、関節のRTPセッションとしてしかしながら、2つの流れは同じでなければなりません。したがって、CにBとAにパスAに必要な輻輳制御適応が最も規制パスのプロパティを使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "An alternative structure for establishing the above topology is to use independent RTP sessions between each pair of peers, i.e., three different RTP sessions. In some scenarios, the same RTP stream may be sent from the transmitting endpoint; however, it also supports local adaptation taking place in one or more of the RTP streams, rendering them non-identical.",
      "ja": "上記トポロジーを確立するための代替的な構造は、ピアの各ペア、即ち、三つの異なるRTPセッションの間に独立したRTPセッションを使用することです。いくつかのシナリオでは、同一のRTPストリームは、送信エンドポイントから送信されても​​よいです。しかし、それはまた、非同一それらをレンダリングし、RTPストリームの1つまたはそれ以上で行われている地元の適応をサポートしています。"
    },
    {
      "indent": 10,
      "text": "+-A----------------------+              +-B-----------+\n|+---+                   |              |             |\n||MIC|       +-UDP1------|              |-UDP1------+ |\n|+---+       | +-RTP1----|              |-RTP1----+ | |\n| |  +----+  | | +-Audio-|              |-Audio-+ | | |\n| +->|ENC1|--+-+-+--->AA1|------------->|       | | | |\n| |  +----+  | | |       |<-------------|BA1    | | | |\n| |          | | +-------|              |-------+ | | |\n| |          | +---------|              |---------+ | |\n| |          +-----------|              |-----------+ |\n| |          ------------|              |-------------|\n| |                      |              |-------------+\n| |                      |\n| |                      |              +-C-----------+\n| |                      |              |             |\n| |          +-UDP2------|              |-UDP2------+ |\n| |          | +-RTP2----|              |-RTP2----+ | |\n| |  +----+  | | +-Audio-|              |-Audio-+ | | |\n| +->|ENC2|--+-+-+--->AA2|------------->|       | | | |\n|    +----+  | | |       |<-------------|CA1    | | | |\n|            | | +-------|              |-------+ | | |\n|            | +---------|              |---------+ | |\n|            +-----------|              |-----------+ |\n+------------------------+              +-------------+",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Figure 10: A Multi-Unicast Mesh with an Independent RTP Session",
      "ja": "図10：独立したRTPセッションを使用したマルチユニキャストメッシュ"
    },
    {
      "indent": 3,
      "text": "Let's review the topology when independent RTP sessions are used from A's perspective in Figure 10 by considering both how the media is handled and how the RTP sessions are set up in Figure 10. A's microphone is captured and the audio is fed into two different encoder instances, each with a different independent RTP session, i.e., RTP1 and RTP2, respectively. The SSRCs (AA1 and AA2) in each RTP session are completely independent, and the media bitrate produced by the encoders can also be tuned differently to address any congestion control requirements differing for the paths A to B compared to A to C.",
      "ja": "独立したRTPセッションがどのようにメディアが処理される方法とRTPセッションが図10のAのマイクに設定されているが捕捉されたオーディオは、2つの異なるエンコーダ・インスタンスに供給される両方考慮して図10のAの観点から使用される場合のトポロジを確認してみましょうそれぞれ異なる独立したRTPセッション、すなわち、RTP1およびRTP2、各。各RTPセッションでSSRCs（AA1およびAA2）は完全に独立しており、エンコーダによって生成されたメディアビットレートはまたCへと比べてBへのパスのために異なる任意の輻輳制御要件に対処するために異なる調整することができます"
    },
    {
      "indent": 3,
      "text": "From a topologies viewpoint, an important difference exists in the behavior around RTCP. First, when a single RTP session spans all three endpoints A, B, and C, and their connecting RTP streams, a common RTCP bandwidth is calculated and used for this single joint session. In contrast, when there are multiple independent RTP sessions, each RTP session has its local RTCP bandwidth allocation.",
      "ja": "トポロジの観点から、重要な違いは、RTCPの周りの挙動に存在します。まず、単一のRTPセッションは、すべての3つのエンドポイントA、B、及びCにまたがる場合、その接続RTPは、一般的なRTCP帯域幅が計算され、この単一の合同会議のために使用される、ストリーム。これとは対照的に、複数の独立したRTPセッションがある場合には、各RTPセッションは、ローカルRTCP帯域幅の割り当てを持っています。"
    },
    {
      "indent": 3,
      "text": "Further, when multiple sessions are used, endpoints not directly involved in a session do not have any awareness of the conditions in those sessions. For example, in the case of the three-endpoint configuration in Figure 8, endpoint A has no awareness of the conditions occurring in the session between endpoints B and C (whereas if a single RTP session were used, it would have such awareness).",
      "ja": "さらに、複数のセッションを使用した場合、直接セッションに関与していないエンドポイントは、これらのセッションでの条件のいずれかの意識を持っていません。例えば、図8の三エンドポイント構成の場合、エンドポイントAがエンドポイントBとCとの間のセッションで発生する条件のない意識を持っていない（単一のRTPセッションを使用した場合に対し、このような意識を持っているであろう）。"
    },
    {
      "indent": 3,
      "text": "Loop detection is also affected. With independent RTP sessions, the SSRC/CSRC cannot be used to determine when an endpoint receives its own media stream, or a mixed media stream including its own media stream (a condition known as a loop). The identification of loops and, in most cases, their avoidance, has to be achieved by other means, for example, through signaling or the use of an RTP external namespace binding SSRC/CSRC among any communicating RTP sessions in the mesh.",
      "ja": "ループ検出にも影響を与えています。独立したRTPセッションと、SSRC / CSRCは、エンドポイントは、自身のメディアストリーム、または独自のメディアストリーム（ループとして知られる状態）を含む混合メディア・ストリームを受信したときに決定するために使用することができません。ループの識別と、ほとんどの場合、それらの回避は、他の手段によって、例えば、シグナル伝達またはメッシュ内の任意の通信RTPセッションの間SSRC / CSRC結合RTP外部ネームスペースを使用して達成されなければなりません。"
    },
    {
      "indent": 0,
      "text": "3.5. Point to Multipoint Using the Translator",
      "section_title": true,
      "ja": "3.5。翻訳を使用してポイントツーマルチポイント"
    },
    {
      "indent": 3,
      "text": "This section discusses some additional usages related to point to multipoint of translators compared to the point-to-point cases in Section 3.2.1.",
      "ja": "このセクションでは、3.2.1節で、ポイントツーポイントの場合と比較して翻訳者のポイントツーマルチポイントに関連するいくつかの追加の用途を説明します。"
    },
    {
      "indent": 0,
      "text": "3.5.1. Relay - Transport Translator",
      "section_title": true,
      "ja": "3.5.1。リレー - 交通翻訳"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-PtM-Trn-Translator",
      "ja": "ショートカット名：TOPO-PTM-Trnの-翻訳"
    },
    {
      "indent": 3,
      "text": "This section discusses Transport Translator-only usages to enable multipoint sessions.",
      "ja": "このセクションでは、マルチセッションを有効にするには、交通翻訳のみの使用法について説明します。"
    },
    {
      "indent": 13,
      "text": "           +-----+\n+---+     /       \\     +------------+      +---+\n| A |<---/         \\    |            |<---->| B |\n+---+   /           \\   |            |      +---+\n       +  Multicast  +->| Translator |\n+---+   \\  Network  /   |            |      +---+\n| C |<---\\         /    |            |<---->| D |\n+---+     \\       /     +------------+      +---+\n           +-----+",
      "raw": true
    },
    {
      "indent": 14,
      "text": "Figure 11: Point to Multipoint Using Multicast",
      "ja": "図11：ポイントは、マルチキャストを使用して対多"
    },
    {
      "indent": 3,
      "text": "Figure 11 depicts an example of a Transport Translator performing at least IP address translation. It allows the (non-multicast-capable) endpoints B and D to take part in an Any-Source Multicast session involving endpoints A and C, by having the translator forward their unicast traffic to the multicast addresses in use, and vice versa. It must also forward B's traffic to D, and vice versa, to provide both B and D with a complete view of the session.",
      "ja": "図11は、少なくともIPアドレス変換を実行する交通翻訳の例を示しています。これは（非マルチキャスト対応）は、その逆の使用中のマルチキャストアドレスを楽しみ、そのユニキャストトラフィックを翻訳を有し、そしてにより、エンドポイントAとCを含む任意-ソースマルチキャストセッションに参加するBおよびDをエンドポイントができます。また、前方のBのDへのトラフィック、およびその逆は、セッションの完全なビューとBとDの両方を提供する必要があります。"
    },
    {
      "indent": 19,
      "text": "+---+      +------------+      +---+\n| A |<---->|            |<---->| B |\n+---+      |            |      +---+\n           | Translator |\n+---+      |            |      +---+\n| C |<---->|            |<---->| D |\n+---+      +------------+      +---+",
      "raw": true
    },
    {
      "indent": 9,
      "text": "Figure 12: RTP Translator (Relay) with Only Unicast Paths",
      "ja": "図12：ユニキャストパスとRTPトランスレータ（リレー）"
    },
    {
      "indent": 3,
      "text": "Another translator scenario is depicted in Figure 12. The translator in this case connects multiple endpoints through unicast. This can be implemented using a very simple Transport Translator which, in this document, is called a relay. The relay forwards all traffic it receives, both RTP and RTCP, to all other endpoints. In doing so, a multicast network is emulated without relying on a multicast-capable network infrastructure.",
      "ja": "別のトランスレータシナリオが図12に示されているこの場合のトランスレータは、ユニキャストを介して複数のエンドポイントを接続しています。これは、このドキュメントでは、リレーと呼ばれ、非常に単純な交通トランスレータを使用して実装することができます。リレーは、すべてのトラフィックを転送し、それは他のすべてのエンドポイントに、両方のRTPとRTCPを受け取ります。そうすることで、マルチキャストネットワークは、マルチキャスト対応のネットワークインフラに頼らずにエミュレートされます。"
    },
    {
      "indent": 3,
      "text": "For RTCP feedback, this results in a similar set of considerations to those described in the ASM RTP topology. It also puts some additional signaling requirements onto the session establishment; for example, a common configuration of RTP payload types is required.",
      "ja": "RTCPフィードバックのために、これは、ASM RTPトポロジに記載されているものと考察の同様のセットをもたらします。また、セッションの確立にいくつかの追加のシグナリング要件を置きます。例えば、RTPペイロードタイプの一般的な構成が必要となります。"
    },
    {
      "indent": 3,
      "text": "Transport Translators and relays should always consider implementing source address filtering, to prevent attackers from using the listening ports on the translator to inject traffic. The translator can, however, go one step further, especially if explicit SSRC signaling is used, to prevent endpoints from sending SSRCs other than its own (that are, for example, used by other participants in the session). This can improve the security properties of the session, despite the use of group keys that on a cryptographic level allows anyone to impersonate another in the same RTP session.",
      "ja": "交通翻訳者とリレーは常にトラフィックを注入する翻訳者のリスニングポートを使用してから攻撃を防ぐために、送信元アドレスフィルタリングを実装することを検討すべきです。翻訳者は、しかし、（例えば、セッションの他の参加者によって使用される）、自社以外SSRCsを送信してからエンドポイントを防ぐために、明示的なSSRCシグナリングが使用されている場合は特に、さらに一歩行くことができます。これは、暗号化レベルで、誰もが同じRTPセッション中に別のを偽装することを可能にするグループキーの使用にもかかわらず、セッションのセキュリティ性を向上させることができます。"
    },
    {
      "indent": 3,
      "text": "A translator that doesn't change the RTP/RTCP packet content can be operated without requiring it to have access to the security contexts used to protect the RTP/RTCP traffic between the participants.",
      "ja": "RTP / RTCPパケットの内容を変更しない翻訳者は、参加者間のRTP / RTCPトラフィックを保護するために使用するセキュリティコンテキストへのアクセス権を持っていることを必要とせずに操作することができます。"
    },
    {
      "indent": 0,
      "text": "3.5.2. Media Translator",
      "section_title": true,
      "ja": "3.5.2。メディア翻訳"
    },
    {
      "indent": 3,
      "text": "In the context of multipoint communications, a Media Translator is not providing new mechanisms to establish a multipoint session. It is more of an enabler, or facilitator, that ensures a given endpoint or a defined subset of endpoints can participate in the session.",
      "ja": "マルチポイント通信の文脈では、メディアトランスレータは、マルチセッションを確立するための新しいメカニズムを提供していません。これは、特定のエンドポイントまたはセッションに参加することができるエンドポイントの定義されたサブセットを保証イネーブラ、または促進、の以上です。"
    },
    {
      "indent": 3,
      "text": "If endpoint B in Figure 11 were behind a limited network path, the translator may perform media transcoding to allow the traffic received from the other endpoints to reach B without overloading the path. This transcoding can help the other endpoints in the multicast part of the session, by not requiring the quality transmitted by A to be lowered to the bitrates that B is actually capable of receiving (and vice versa).",
      "ja": "図11のエンドポイントBは、限られたネットワークパスの後ろにあった場合、翻訳者は、他のエンドポイントから受信したトラフィックは、経路に過負荷をかけることなく、Bに到達することを可能にするメディアトランスコーディングを実行することができます。このトランスコーディングは、Bは、受信（及びその逆）の実際に可能なビットレートに低下するAによって送信された品質を必要としないことにより、セッションのマルチキャスト部分において他のエンドポイントを助けることができます。"
    },
    {
      "indent": 0,
      "text": "3.6. Point to Multipoint Using the Mixer Model",
      "section_title": true,
      "ja": "3.6。ミキサーモデルを用いたポイントツーマルチポイント"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Mixer",
      "ja": "ショートカット名：TOPO-ミキサー"
    },
    {
      "indent": 3,
      "text": "A mixer is a middlebox that aggregates multiple RTP streams that are part of a session by generating one or more new RTP streams and, in most cases, by manipulating the media data. One common application for a mixer is to allow a participant to receive a session with a reduced amount of resources.",
      "ja": "ミキサは、メディアデータを操作することにより、ほとんどの場合、1つまたは複数の新しいRTPストリームを生成することにより、セッションの一部であり、複数のRTPストリームを集約ミドルあります。ミキサーのための一つの一般的なアプリケーションは、参加者が資源の減少量とのセッションを受けることを可能にすることです。"
    },
    {
      "indent": 13,
      "text": "           +-----+\n+---+     /       \\     +-----------+      +---+\n| A |<---/         \\    |           |<---->| B |\n+---+   /   Multi-  \\   |           |      +---+\n       +    cast     +->|   Mixer   |\n+---+   \\  Network  /   |           |      +---+\n| C |<---\\         /    |           |<---->| D |\n+---+     \\       /     +-----------+      +---+\n           +-----+",
      "raw": true
    },
    {
      "indent": 7,
      "text": "Figure 13: Point to Multipoint Using the RFC 3550 Mixer Model",
      "ja": "図13：ポイントは、RFC 3550ミキサーモデルを用いた対多"
    },
    {
      "indent": 3,
      "text": "A mixer can be viewed as a device terminating the RTP streams received from other endpoints in the same RTP session. Using the media data carried in the received RTP streams, a mixer generates derived RTP streams that are sent to the receiving endpoints.",
      "ja": "ミキサは、RTPストリームが同じRTPセッション内の他のエンドポイントから受信した終端装置とみなすことができます。受信したRTPで運ばれたメディアデータをストリーミング使用して、ミキサは、受信エンドポイントに送信される派生RTPストリームを生成します。"
    },
    {
      "indent": 3,
      "text": "The content that the mixer provides is the mixed aggregate of what the mixer receives over the PtP or PtM paths, which are part of the same Communication Session.",
      "ja": "ミキサが提供するコンテンツは、ミキサーが同じ通信セッションの一部であるのPtPまたはPtM方式パス上受け取るものの混合集合体です。"
    },
    {
      "indent": 3,
      "text": "The mixer creates the Media Source and the source RTP stream just like an endpoint, as it mixes the content (often in the uncompressed domain) and then encodes and packetizes it for transmission to a receiving endpoint. The CSRC Count (CC) and CSRC fields in the RTP header can be used to indicate the contributors to the newly generated RTP stream. The SSRCs of the to-be-mixed streams on the mixer input appear as the CSRCs at the mixer output. That output stream uses a unique SSRC that identifies the mixer's stream. The CSRC should be forwarded between the different endpoints to allow for loop detection and identification of sources that are part of the Communication Session. Note that Section 7.1 of RFC 3550 requires",
      "ja": "それは（多くの場合、圧縮されていない領域で）コンテンツを混合した後、符号化し、受信側エンドポイントに送信するためにそれをパケットとしてミキサは、単にエンドポイントなどのメディアソースとソースRTPストリームを作成します。 RTPヘッダ内CSRCカウント（CC）とCSRCフィールドは、新たに生成されたRTPストリームに貢献者を示すために使用することができます。ミキサ入力になるように、混合流のSSRCsは、ミキサ出力でCSRCsとして現れます。その出力ストリームは、ミキサーのストリームを識別する一意のSSRCを使用しています。 CSRCは、通信セッションの一部である元のループ検出および同定を可能にするために、異なるエンドポイント間で転送されるべきです。 RFC 3550のセクション7.1が必要であることに注意してください"
    },
    {
      "indent": 3,
      "text": "the SSRC space to be shared between domains for these reasons. This also implies that any SDES information normally needs to be forwarded across the mixer.",
      "ja": "これらの理由のためにドメイン間で共有することがSSRCスペース。これはまた、任意のSDES情報は、通常のミキサーを介して転送する必要があることを意味します。"
    },
    {
      "indent": 3,
      "text": "The mixer is responsible for generating RTCP packets in accordance with its role. It is an RTP receiver and should therefore send RTCP receiver reports for the RTP streams it receives and terminates. In its role as an RTP sender, it should also generate RTCP sender reports for those RTP streams it sends. As specified in Section 7.3 of RFC 3550, a mixer must not forward RTCP unaltered between the two domains.",
      "ja": "ミキサーは、その役割に基づいてRTCPパケットを生成するための責任があります。これは、RTP受信機であるとRTPは、それが受信して、終了ストリーム用のため、RTCPレシーバレポートを送信する必要があります。これらのRTPは、送信するストリームのためのRTPの送信者としての役割で、それはまた、RTCP送信者レポートを生成する必要があります。 RFC 3550のセクション7.3で規定されているように、ミキサーは、2つのドメイン間で変更されていないRTCPを転送してはいけません。"
    },
    {
      "indent": 3,
      "text": "The mixer depicted in Figure 13 is involved in three domains that need to be separated: the Any-Source Multicast network (including endpoints A and C), endpoint B, and endpoint D. Assuming all four endpoints in the conference are interested in receiving content from all other endpoints, the mixer produces different mixed RTP streams for B and D, as the one to B may contain content received from D, and vice versa. However, the mixer may only need one SSRC per media type in each domain where it is the receiving entity and transmitter of mixed content.",
      "ja": "図13に示されているミキサーを分離する必要が三つのドメインに関与している：会議にすべての4つのエンドポイントを想定する（エンドポイントA及びCを含む）、ソースマルチキャストネットワーク、エンドポイントB、およびエンドポイントD.は、コンテンツを受信することに興味を持っています他のすべてのエンドポイントから、ミキサは、B 1つのコンテンツがDから受信した、およびその逆含有することができるように、異なる混合RTPは、B及びDのためのストリームを生成します。しかしながら、ミキサーは、それが混在したコンテンツの受信エンティティと送信され、各ドメイン内のメディアタイプごとにSSRCを必要とするかもしれません。"
    },
    {
      "indent": 3,
      "text": "In the multicast domain, a mixer still needs to provide a mixed view of the other domains. This makes the mixer simpler to implement and avoids any issues with advanced RTCP handling or loop detection, which would be problematic if the mixer were providing non-symmetric behavior. Please see Section 3.11 for more discussion on this topic. The mixing operation, however, in each domain could potentially be different.",
      "ja": "マルチキャストドメインでは、ミキサーは、依然として他のドメインとの混合ビューを提供する必要があります。これは、実装するためにミキサーが簡単になり、ミキサーが非対称挙動を提供した場合に問題となる高度RTCP処理またはループ検出を伴う問題を回避します。このトピックの詳細な議論については、セクション3.11を参照してください。混合操作は、しかしながら、各ドメイン内の潜在的に異なる可能性があります。"
    },
    {
      "indent": 3,
      "text": "A mixer is responsible for receiving RTCP feedback messages and handling them appropriately. The definition of \"appropriate\" depends on the message itself and the context. In some cases, the reception of a codec-control message by the mixer may result in the generation and transmission of RTCP feedback messages by the mixer to the endpoints in the other domain(s). In other cases, a message is handled by the mixer locally and therefore not forwarded to any other domain.",
      "ja": "ミキサーはRTCPフィードバックメッセージを受信し、それらを適切に処理する責任があります。 「適切な」の定義は、メッセージ自体とコンテキストに依存します。いくつかの場合において、ミキサーによるコーデック制御メッセージの受信は、他のドメイン（単数または複数）内のエンドポイントにミキサーでRTCPフィードバックメッセージの生成及び送信をもたらすことができます。他の場合には、メッセージがローカルミキサーによって処理され、従って、他のドメインに転送されません。"
    },
    {
      "indent": 3,
      "text": "When replacing the multicast network in Figure 13 (to the left of the mixer) with individual unicast paths as depicted in Figure 14, the mixer model is very similar to the one discussed in Section 3.9 below. Please see the discussion in Section 3.9 about the differences between these two models.",
      "ja": "図14に示すように、個々のユニキャスト経路を有する（ミキサーの左側に）図13に、マルチキャストネットワークを交換する場合、ミキサーモデルは、以下のセクション3.9で説明したものと非常に類似しています。これら二つのモデルの違いについて3.9節で議論を参照してください。"
    },
    {
      "indent": 19,
      "text": "+---+      +------------+      +---+\n| A |<---->|            |<---->| B |\n+---+      |            |      +---+\n           |   Mixer    |\n+---+      |            |      +---+\n| C |<---->|            |<---->| D |\n+---+      +------------+      +---+",
      "raw": true
    },
    {
      "indent": 15,
      "text": "Figure 14: RTP Mixer with Only Unicast Paths",
      "ja": "図14：ユニキャストパスとRTPミキサー"
    },
    {
      "indent": 3,
      "text": "We now discuss in more detail the different mixing operations that a mixer can perform and how they can affect RTP and RTCP behavior.",
      "ja": "私たちは今、より詳細にミキサーが実行できる異なる混合操作を議論し、彼らはRTPとRTCPの行動にどのような影響を与えますか。"
    },
    {
      "indent": 0,
      "text": "3.6.1. Media-Mixing Mixer",
      "section_title": true,
      "ja": "3.6.1。メディアミキシングミキサー"
    },
    {
      "indent": 3,
      "text": "The Media-Mixing Mixer is likely the one that most think of when they hear the term \"mixer\". Its basic mode of operation is that it receives RTP streams from several endpoints and selects the stream(s) to be included in a media-domain mix. The selection can be through static configuration or by dynamic, content-dependent means such as voice activation. The mixer then creates a single outgoing RTP stream from this mix.",
      "ja": "メディアミキシングミキサーは、おそらく最も彼らは用語「ミキサー」を聞いたときに考えるものです。操作の基本的なモードは、いくつかのエンドポイントからRTPストリームを受信し、メディアドメインミックスに含まれるストリーム（単数または複数）を選択することです。選択は、静的な構成を介して、または、音声活性化などの動的、コンテンツ依存の手段によることができます。ミキサーは、このミックスからの単一の発信RTPストリームを作成します。"
    },
    {
      "indent": 3,
      "text": "The most commonly deployed Media-Mixing Mixer is probably the audio mixer, used in voice conferencing, where the output consists of a mixture of all the input audio signals; this needs minimal signaling to be successfully set up. From a signal processing viewpoint, audio mixing is relatively straightforward and commonly possible for a reasonable number of endpoints. Assume, for example, that one wants to mix N streams from N different endpoints. The mixer needs to decode those N streams, typically into the sample domain, and then produce N or N+1 mixes. Different mixes are needed so that each endpoint gets a mix of all other sources except its own, as this would result in an echo. When N is lower than the number of all endpoints, one may produce a mix of all N streams for the group that are currently not included in the mix; thus, N+1 mixes. These audio streams are then encoded again, RTP packetized, and sent out. In many cases, audio level normalization, noise suppression, and similar signal processing steps are also required or desirable before the actual mixing process commences.",
      "ja": "最も一般的に展開メディアミキシングミキサーは、おそらく出力は、すべての入力オーディオ信号の混合物からなる音声会議に使用されるオーディオミキサーです。これは、最小限のシグナリングが正常に設定する必要があります。信号処理の観点から、オーディオ混合が比較的簡単とエンドポイントの合理的な数のために一般的に可能です。例えば、1つは、N個の異なるエンドポイントからN個のストリームを混合するために望んでいる、と仮定します。ミキサーは、典型的には、サンプルドメインに、それらのNストリームを復号化する必要があり、その後、N又はN + 1つのミックスを作り出します。各エンドポイントは、自身を除く他のすべてのソースのミックスを取得するように、これはエコーにつながるように、異なるミックスは、必要とされています。 Nは、すべてのエンドポイントの数よりも低い場合、一方が現在のミックスに含まれていないグループのためのすべてのN個のストリームミックスを生成することができます。従って、N + 1ミックス。これらのオーディオストリームは、その後、再びRTPのパケットを符号化され、送信されます。実際の混合プロセスが開始する前に、多くの場合、音声レベル正規化、ノイズ抑制、及び同様の信号処理ステップも必要又は望ましいです。"
    },
    {
      "indent": 3,
      "text": "In video, the term \"mixing\" has a different interpretation than audio. It is commonly used to refer to the process of spatially combining contributed video streams, which is also known as \"tiling\". The reconstructed, appropriately scaled down videos can be spatially arranged in a set of tiles, with each tile containing the video from an endpoint (typically showing a human participant). Tiles can be of different sizes so that, for example, a particularly important participant, or the loudest speaker, is being shown in a larger tile than other participants. A self-view picture can be included in the tiling, which can be either locally produced or feedback from a mixer-received and reconstructed video image. Such remote loopback allows for confidence monitoring, i.e., it enables the participant to see himself/herself in the same quality as other participants see him/her. The tiling normally operates on reconstructed video in the sample domain. The tiled image is encoded, packetized, and sent by the mixer to the receiving endpoints. It is possible that a middlebox with media mixing duties contains only a single mixer of the aforementioned type, in which case all participants necessarily see the same tiled video, even if it is being sent over different RTP streams. More common, however, are mixing arrangements where an individual mixer is available for each outgoing port of the middlebox, allowing individual compositions for each receiving endpoint (a feature commonly referred to as personalized layout).",
      "ja": "ビデオでは、「混合」という用語は、オーディオとは異なる解釈を持っています。一般的に、空間的にも「タイリング」として知られている貢献ビデオストリームを、合成のプロセスを指すのに使用されます。再構成された、適切に縮小されたビデオは、空間的に（典型的にはヒト参加者を示す）エンドポイントからビデオを含む各タイルと、タイルの組に配置することができます。例えば、特に重要な参加者、または最大音量スピーカが、他の参加者よりも大きいタイルに表示されている、ように、タイルは、異なるサイズであってもよいです。自己ビュー・ピクチャは、局所的に産生さまたはミキサ受信及び再構成されたビデオ画像からフィードバックすることができるいずれかのタイルに含まれることができます。このようなリモートループバックは、すなわち、それは他の参加者が彼/彼女の参照と同じ品質で彼自身/彼女自身を見て参加を可能にし、信頼性の監視が可能になります。タイリングは、通常、サンプルドメインに再構成されたビデオ上で動作します。タイル画像は、符号化されたパケット、および受信エンドポイントにミキサーで送信されます。メディアが職務を混合しながらミドルボックスは、すべての参加者は、必ずしもそれが異なるRTPストリームを介して送信された場合であっても、同じタイルビデオを見ている場合には、前述のタイプの単一のミキサを含むことが可能です。より一般的な、しかし、個々のミキサは、各受信エンドポイント（一般にパーソナライズレイアウトと呼ばれる機能）についての個々の組成物を可能にする、ミドルボックスの各出力ポートのために利用可能である配置を混合しています。"
    },
    {
      "indent": 3,
      "text": "One problem with media mixing is that it consumes both large amounts of media processing resources (for the decoding and mixing process in the uncompressed domain) and encoding resources (for the encoding of the mixed signal). Another problem is the quality degradation created by decoding and re-encoding the media, which is the result of the lossy nature of the most commonly used media codecs. A third problem is the latency introduced by the media mixing, which can be substantial and annoyingly noticeable in case of video, or in case of audio if that mixed audio is lip-synchronized with high-latency video. The advantage of media mixing is that it is straightforward for the endpoints to handle the single media stream (which includes the mixed aggregate of many sources), as they don't need to handle multiple decodings, local mixing, and composition. In fact, mixers were introduced in pre-RTP times so that legacy, single stream receiving endpoints (that, in some protocol environments, actually didn't need to be aware of the multipoint nature of the conference) could successfully participate in what a user would recognize as a multiparty video conference.",
      "ja": "メディアミキシングに伴う1つの問題は、それが符号化リソース（復号および混合プロセス圧縮されていないドメインでの場合）（混合信号の符号化のために）、メディア処理資源大量の両方を消費することです。もう一つの問題は、デコードし、最も一般的に使用されるメディアコーデックの非可逆性の結果であるメディアを、再エンコードして作成された品質劣化です。第3の問題は、そのミックス音声がリップ同期高レイテンシビデオである場合、ビデオの場合には、オーディオの場合には実質的かつうるさく顕著であることができるメディア混合によって導入待ち時間です。メディアミックスの利点は、それらが複数の復号化、局所混合し、組成物を処理する必要がないのでエンドポイントは、（多くのソースの混合骨材を含む）単一のメディアストリームを処理するための簡単であることです。そのレガシー、単一ストリームの受信エンドポイントは（実際に会議の多地点性質を意識する必要はありませんでした、いくつかのプロトコル環境では、ということ）が正常にどのようなユーザーに参加できるので、実際には、ミキサーは事前にRTPの時代に導入されましたマルチパーティのビデオ会議として認識することになります。"
    },
    {
      "indent": 11,
      "text": "+-A---------+          +-MIXER----------------------+\n| +-RTP1----|          |-RTP1------+        +-----+ |\n| | +-Audio-|          |-Audio---+ | +---+  |     | |\n| | |    AA1|--------->|---------+-+-|DEC|->|     | |\n| | |       |<---------|MA1 <----+ | +---+  |     | |\n| | |       |          |(BA1+CA1)|\\| +---+  |     | |\n| | +-------|          |---------+ +-|ENC|<-| B+C | |\n| +---------|          |-----------+ +---+  |     | |\n+-----------+          |                    |     | |\n                       |                    |  M  | |\n+-B---------+          |                    |  E  | |\n| +-RTP2----|          |-RTP2------+        |  D  | |\n| | +-Audio-|          |-Audio---+ | +---+  |  I  | |\n| | |    BA1|--------->|---------+-+-|DEC|->|  A  | |\n| | |       |<---------|MA2 <----+ | +---+  |     | |\n| | +-------|          |(AA1+CA1)|\\| +---+  |     | |\n| +---------|          |---------+ +-|ENC|<-| A+C | |\n+-----------+          |-----------+ +---+  |     | |\n                       |                    |  M  | |\n+-C---------+          |                    |  I  | |\n| +-RTP3----|          |-RTP3------+        |  X  | |\n| | +-Audio-|          |-Audio---+ | +---+  |  E  | |\n| | |    CA1|--------->|---------+-+-|DEC|->|  R  | |\n| | |       |<---------|MA3 <----+ | +---+  |     | |\n| | +-------|          |(AA1+BA1)|\\| +---+  |     | |\n| +---------|          |---------+ +-|ENC|<-| A+B | |\n+-----------+          |-----------+ +---+  +-----+ |\n                       +----------------------------+",
      "raw": true
    },
    {
      "indent": 12,
      "text": "Figure 15: Session and SSRC Details for Media Mixer",
      "ja": "図15：メディアミキサーのセッションとSSRC詳細"
    },
    {
      "indent": 3,
      "text": "From an RTP perspective, media mixing can be a very simple process, as can be seen in Figure 15. The mixer presents one SSRC towards the receiving endpoint, e.g., MA1 to Peer A, where the associated stream is the media mix of the other endpoints. As each peer, in this example, receives a different version of a mix from the mixer, there is no actual relation between the different RTP sessions in terms of actual media or transport-level information. There are, however, common relationships between RTP1-RTP3, namely SSRC space and identity information. When A receives the MA1 stream, which is a combination of BA1 and CA1 streams, the mixer may include CSRC information in the MA1 stream to identify the Contributing Sources BA1 and CA1, allowing the receiver to identify the Contributing Sources even if this were not possible through the media itself or through other signaling means.",
      "ja": "RTPの観点から、メディア混合は、ミキサーは、関連するストリームは、他のメディアミックスされた受信エンドポイントに向かって1 SSRC、例えば、ピアするMA1を示す図15に見られるように、非常に単純なプロセスであることができますエンドポイント。各ピアは、この例では、ミキサーからの混合物の異なるバージョンを受信するように、実際のメディアまたはトランスポートレベルの情報の点で異なるRTPセッションの間の実際の関係は存在しません。 RTP1-RTP3、すなわちSSRCスペースとアイデンティティ情報間の共通の関係は、しかし、があります。 Aは、BA1の組み合わせであり、CA1ストリームMA1ストリームを受信すると、ミキサは、これは不可能であった場合でも、受信機が貢献ソースを識別することができ、BA1及びCA1貢献ソースを識別するために、MA1ストリーム内CSRC情報を含んでいてもよいですメディア自体を介して、又は他のシグナリング手段を介し。"
    },
    {
      "indent": 3,
      "text": "The CSRC has, in turn, utility in RTP extensions, like the RTP header extension for Mixer-to-Client Audio Level Indication [RFC6465]. If",
      "ja": "CSRCは、ミキサーからクライアントへのオーディオレベル表示、[RFC6465]のためのRTPヘッダ拡張と同様に、RTPの拡張では、順番に、有用性を有します。もし"
    },
    {
      "indent": 3,
      "text": "the SSRCs from the endpoint to mixer paths are used as CSRCs in another RTP session, then RTP1, RTP2, and RTP3 become one joint session as they have a common SSRC space. At this stage, the mixer also needs to consider which RTCP information it needs to expose in the different paths. In the above scenario, a mixer would normally expose nothing more than the SDES information and RTCP BYE for a CSRC leaving the session. The main goal would be to enable the correct binding against the application logic and other information sources. This also enables loop detection in the RTP session.",
      "ja": "それらは共通のSSRCの空間を有するように経路をミキサーにエンドポイントからSSRCsが他のRTPセッションにおいてCSRCsとして使用され、その後、RTP1、RTP2、RTP3とは、一つのジョイントセッションになります。この段階で、ミキサーはまた、異なる経路に露出させる必要があるRTCP情報を検討する必要があります。上記のシナリオでは、ミキサーは、通常のセッションを残すCSRCのためのSDES情報とRTCP BYE以上のものを公開しないだろう。主な目的は、アプリケーションロジックおよび他の情報源に対して正しい結合を可能にすることであろう。また、これはRTPセッションでループ検出を可能にします。"
    },
    {
      "indent": 0,
      "text": "3.6.2. Media-Switching Mixer",
      "section_title": true,
      "ja": "3.6.2。メディア・スイッチングミキサー"
    },
    {
      "indent": 3,
      "text": "Media-Switching Mixers are used in limited functionality scenarios where no, or only very limited, concurrent presentation of multiple sources is required by the application and also in more complex multi-stream usages with receiver mixing or tiling, including combined with simulcast and/or scalability between source and mixer. An RTP mixer based on media switching avoids the media decoding and encoding operations in the mixer, as it conceptually forwards the encoded media stream as it was being sent to the mixer. It does not avoid, however, the decryption and re-encryption cycle as it rewrites RTP headers. Forwarding media (in contrast to reconstructing-mixing-encoding media) reduces the amount of computational resources needed in the mixer and increases the media quality (both in terms of fidelity and reduced latency).",
      "ja": "メディアスイッチングミキサーは、サイマル放送と組み合わせ、および/または含むない、または非常に限られ、複数のソースの同時提示は、アプリケーションによって必要とされる限定された機能のシナリオにおいて、また、受信機混合又はタイルを有するより複雑なマルチストリーム用途で使用されていますソースとミキサとの間のスケーラビリティ。メディア切替に基づいてRTPミキサは、ミキサに送られたとして概念的に転送エンコードされたメディア・ストリームとして、ミキサー内のメディアの復号及び符号化操作を回避します。しかし、復号化および再暗号化サイクルは、それがRTPヘッダを書き換えて、避けることはありません。 （メディア・ミキシング・コードを再構成とは対照的に）転送媒体がミキサに必要な計算リソースの量を低減し、メディア品質（両方忠実度及び低減待ち時間の点で）を増加させます。"
    },
    {
      "indent": 3,
      "text": "A Media-Switching Mixer maintains a pool of SSRCs representing conceptual or functional RTP streams that the mixer can produce. These RTP streams are created by selecting media from one of the RTP streams received by the mixer and forwarded to the peer using the mixer's own SSRCs. The mixer can switch between available sources if that is required by the concept for the source, like the currently active speaker. Note that the mixer, in most cases, still needs to perform a certain amount of media processing, as many media formats do not allow to \"tune into\" the stream at arbitrary points in their bitstream.",
      "ja": "メディアスイッチングミキサーは、概念又はその機能RTP表すSSRCsのプールは、ミキサが生成できることストリームを維持します。これらのRTPストリームはRTPミキサーで受信し、ミキサー自身のSSRCsを使用してピアに転送ストリームの1つからメディアを選択して作成されます。それは、現在アクティブスピーカのような、ソースの概念によって必要とされる場合、ミキサーは、使用可能なソースを切り替えることができます。多くのメディアフォーマットは、そのビットストリーム内の任意のポイントでストリーム「への調整」することはできませんよう、ミキサーは、ほとんどの場合、まだメディア処理の一定量を実行する必要があることに注意してください。"
    },
    {
      "indent": 3,
      "text": "To achieve a coherent RTP stream from the mixer's SSRC, the mixer needs to rewrite the incoming RTP packet's header. First, the SSRC field must be set to the value of the mixer's SSRC. Second, the sequence number must be the next in the sequence of outgoing packets it sent. Third, the RTP timestamp value needs to be adjusted using an offset that changes each time one switches the Media Source. Finally, depending on the negotiation of the RTP payload type, the value representing this particular RTP payload configuration may have to be changed if the different endpoint-to-mixer paths have not arrived on the same numbering for a given configuration. This also requires that the different endpoints support a common set of codecs, otherwise media transcoding for codec compatibility would still be required.",
      "ja": "ミキサーのSSRCからのコヒーレントRTPストリームを達成するために、ミキサは、着信RTPパケットのヘッダを書き換える必要があります。まず、SSRCフィールドには、ミキサーのSSRCの値に設定する必要があります。第二に、シーケンス番号は、それが送信された発信パケットのシーケンス内の次でなければなりません。第三に、RTPタイムスタンプ値は、1つのメディアソースを切り替えたびに変化するオフセットを使用して調整する必要があります。最後に、RTPペイロードタイプのネゴシエーションに応じて、この特定のRTPペイロード構成を示す値は、異なるエンドポイント・ツー・ミキサのパスが指定されたコンフィギュレーションのために同じ番号に到着していない場合は変更されなければなりません。これはまた、異なるエンドポイントは、コーデックの共通セットをサポートしている必要がそれ以外のコーデックとの互換性のためのメディアトランスコーディングはまだ必要とされるであろう。"
    },
    {
      "indent": 3,
      "text": "We now consider the operation of a Media-Switching Mixer that supports a video conference with six participating endpoints (A-F) where the two most recent speakers in the conference are shown to each receiving endpoint. Thus, the mixer has two SSRCs sending video to each peer, and each peer is capable of locally handling two video streams simultaneously.",
      "ja": "私たちは、今会議で最近の2個のスピーカーが各受信エンドポイントに示されている6つの、参加エンドポイント（A-F）とのビデオ会議をサポートメディア・スイッチングミキサーの操作を考えます。したがって、ミキサは、各ピアにビデオを送信する2 SSRCsを有し、各ピアは、局所的に同時に2つのビデオストリームを処理することができます。"
    },
    {
      "indent": 9,
      "text": "+-A---------+             +-MIXER----------------------+\n| +-RTP1----|             |-RTP1------+        +-----+ |\n| | +-Video-|             |-Video---+ |        |     | |\n| | |    AV1|------------>|---------+-+------->|  S  | |\n| | |       |<------------|MV1 <----+-+-BV1----|  W  | |\n| | |       |<------------|MV2 <----+-+-EV1----|  I  | |\n| | +-------|             |---------+ |        |  T  | |\n| +---------|             |-----------+        |  C  | |\n+-----------+             |                    |  H  | |\n                          |                    |     | |\n+-B---------+             |                    |  M  | |\n| +-RTP2----|             |-RTP2------+        |  A  | |\n| | +-Video-|             |-Video---+ |        |  T  | |\n| | |    BV1|------------>|---------+-+------->|  R  | |\n| | |       |<------------|MV3 <----+-+-AV1----|  I  | |\n| | |       |<------------|MV4 <----+-+-EV1----|  X  | |\n| | +-------|             |---------+ |        |     | |\n| +---------|             |-----------+        |     | |\n+-----------+             |                    |     | |\n                          :                    :     : :\n                          :                    :     : :\n+-F---------+             |                    |     | |\n| +-RTP6----|             |-RTP6------+        |     | |\n| | +-Video-|             |-Video---+ |        |     | |\n| | |    FV1|------------>|---------+-+------->|     | |\n| | |       |<------------|MV11 <---+-+-AV1----|     | |\n| | |       |<------------|MV12 <---+-+-EV1----|     | |\n| | +-------|             |---------+ |        |     | |\n| +---------|             |-----------+        +-----+ |\n+-----------+             +----------------------------+",
      "raw": true
    },
    {
      "indent": 19,
      "text": "Figure 16: Media-Switching RTP Mixer",
      "ja": "図16：メディア・スイッチングRTPミキサー"
    },
    {
      "indent": 3,
      "text": "The Media-Switching Mixer can, similarly to the Media-Mixing Mixer, reduce the bitrate required for media transmission towards the different peers by selecting and forwarding only a subset of RTP streams it receives from the sending endpoints. In case the mixer receives simulcast transmissions or a scalable encoding of the Media Source, the mixer has more degrees of freedom to select streams or subsets of streams to forward to a receiving endpoint, both based on transport or endpoint restrictions as well as application logic.",
      "ja": "メディアスイッチングミキサーは、同様にメディアミキシングミキサーに、RTPのサブセットのみを選択して転送することによって、異なるピアに向けメディア伝送のために必要なビットレートを低減することができ、それは送信エンドポイントから受信したストリーム。場合にミキサの両方の輸送またはエンドポイントの制限ならびにアプリケーションロジックに基づいて、ミキサは、受信エンドポイントに転送するストリームのストリームまたはサブセットを選択する自由度を有し、サイマルキャスト送信、またはメディアソースのスケーラブル符号化を受けます。"
    },
    {
      "indent": 3,
      "text": "To ensure that a media receiver in an endpoint can correctly decode the media in the RTP stream after a switch, a codec that uses temporal prediction needs to start its decoding from independent refresh points, or points in the bitstream offering similar functionality (like \"dirty refresh points\"). For some codecs, for example, frame-based speech and audio codecs, this is easily achieved by starting the decoding at RTP packet boundaries, as each packet boundary provides a refresh point (assuming proper packetization on the encoder side). For other codecs, particularly in video, refresh points are less common in the bitstream or may not be present at all without an explicit request to the respective encoder. The Full Intra Request [RFC5104] RTCP codec control message has been defined for this purpose.",
      "ja": "エンドポイントでメディア受信機が正しく切り替え後のRTPストリーム内のメディアを復号することができることを確実にするために、時間予測を使用するコーデックは、「汚いような同様の機能を（提供ビットストリーム内の独立リフレッシュポイント、またはポイントからの復号を開始する必要がありますリフレッシュポイント」）。各パケットの境界は、リフレッシュポイント（エンコーダ側で適切なパケットを仮定）を提供するようないくつかのコーデックのために、例えば、フレームベースの音声およびオーディオコーデックのため、これは簡単に、RTPパケット境界でデコーディングを開始することによって達成されます。特に動画の他のコーデックについては、リフレッシュポイントは、ビットストリームにあまり一般的であるか、または各エンコーダへの明示的な要求なしにすべて存在しなくてもよいです。フルイントラ要求[RFC5104] RTCPコーデック制御メッセージは、この目的のために定義されています。"
    },
    {
      "indent": 3,
      "text": "In this type of mixer, one could consider fully terminating the RTP sessions between the different endpoint and mixer paths. The same arguments and considerations as discussed in Section 3.9 need to be taken into consideration and apply here.",
      "ja": "ミキサーのこのタイプでは、一つは完全に異なるエンドポイントとミキサ経路間のRTPセッションを終了考えることができました。 3.9節で説明したのと同じ引数と考慮事項が考慮され、ここで適用する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.7. Selective Forwarding Middlebox",
      "section_title": true,
      "ja": "3.7。選択転送ミドル"
    },
    {
      "indent": 3,
      "text": "Another method for handling media in the RTP mixer is to \"project\", or make available, all potential RTP sources (SSRCs) into a per-endpoint, independent RTP session. The middlebox can select which of the potential sources that are currently actively transmitting media will be sent to each of the endpoints. This is similar to the Media-Switching Mixer but has some important differences in RTP details.",
      "ja": "RTPミキサーでメディアを処理するための別の方法ごとのエンドポイント、独立したRTPセッションに「プロジェクト」であり、あるいは利用できるように、すべての潜在的なRTP源（SSRCs）。ミドルは、各エンドポイントに送信されます、現在積極的にメディアを送信している潜在的なソースのどれを選択することができます。これは、メディア・スイッチングミキサーに似ていますが、RTPの詳細にいくつかの重要な違いがあります。"
    },
    {
      "indent": 10,
      "text": "+-A---------+             +-Middlebox-----------------+\n| +-RTP1----|             |-RTP1------+       +-----+ |\n| | +-Video-|             |-Video---+ |       |     | |\n| | |    AV1|------------>|---------+-+------>|     | |\n| | |       |<------------|BV1 <----+-+-------|  S  | |\n| | |       |<------------|CV1 <----+-+-------|  W  | |\n| | |       |<------------|DV1 <----+-+-------|  I  | |\n| | |       |<------------|EV1 <----+-+-------|  T  | |\n| | |       |<------------|FV1 <----+-+-------|  C  | |\n| | +-------|             |---------+ |       |  H  | |\n| +---------|             |-----------+       |     | |\n+-----------+             |                   |  M  | |\n                          |                   |  A  | |\n+-B---------+             |                   |  T  | |\n| +-RTP2----|             |-RTP2------+       |  R  | |\n| | +-Video-|             |-Video---+ |       |  I  | |\n| | |    BV1|------------>|---------+-+------>|  X  | |\n| | |       |<------------|AV1 <----+-+-------|     | |\n| | |       |<------------|CV1 <----+-+-------|     | |\n| | |       | :    :    : |: :  : : : : :  : :|     | |\n| | |       |<------------|FV1 <----+-+-------|     | |\n| | +-------|             |---------+ |       |     | |\n| +---------|             |-----------+       |     | |\n+-----------+             |                   |     | |\n                          :                   :     : :\n                          :                   :     : :\n+-F---------+             |                   |     | |\n| +-RTP6----|             |-RTP6------+       |     | |\n| | +-Video-|             |-Video---+ |       |     | |\n| | |    FV1|------------>|---------+-+------>|     | |\n| | |       |<------------|AV1 <----+-+-------|     | |\n| | |       | :    :    : |: :  : : : : :  : :|     | |\n| | |       |<------------|EV1 <----+-+-------|     | |\n| | +-------|             |---------+ |       |     | |\n| +---------|             |-----------+       +-----+ |\n+-----------+             +---------------------------+",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 17: Selective Forwarding Middlebox",
      "ja": "図17：選択転送ミドル"
    },
    {
      "indent": 3,
      "text": "In the six endpoint conference depicted above (in Figure 17), one can see that endpoint A is aware of five incoming SSRCs, BV1-FV1. If this middlebox intends to have a similar behavior as in Section 3.6.2 where the mixer provides the endpoints with the two latest speaking endpoints, then only two out of these five SSRCs need concurrently transmit media to A. As the middlebox selects the source in the different RTP sessions that transmit media to the endpoints, each RTP stream requires the rewriting of certain RTP header fields when being projected from one session into another. In particular, the sequence number needs to be consecutively incremented based on the packet actually being transmitted in each RTP session. Therefore, the RTP sequence number offset will change each time a source is turned on in an RTP session. The timestamp (possibly offset) stays the same.",
      "ja": "（図17において）上方に描か6つのエンドポイント会議では、一方のエンドポイントAは、5着信SSRCs、BV1-FV1を認識していることがわかります。このミドルミキサーが同時にミドルとしてA.にメディアを送信する必要が、その後、最新の2つのを話すエンドポイントとこれらの5つのSSRCsのうち2つだけをエンドポイントを提供し、セクション3.6.2と同様の振る舞いを持ってしようとする場合、ソース内を選択し、エンドポイントにメディアを送信異なるRTPセッション別に一つのセッションから投影されたときに、各RTPストリームは、特定のRTPヘッダフィールドの書き換えを必要とします。具体的には、シーケンス番号が連続して、実際に各RTPセッションで送信されるパケットに基づいてインクリメントされる必要があります。したがって、オフセットRTPシーケンス番号は、ソースがRTPセッションでオンにされるたびに変更されます。タイムスタンプは、（おそらくオフセット）と同じままです。"
    },
    {
      "indent": 3,
      "text": "The RTP sessions can be considered independent, resulting in that the SSRC numbers used can also be handled independently. This simplifies the SSRC collision detection and avoidance but requires tools such as remapping tables between the RTP sessions. Using independent RTP sessions is not required, as it is possible for the switching behavior to also perform with a common SSRC space. However, in this case, collision detection and handling becomes a different problem. It is up to the implementation to use a single common SSRC space or separate ones.",
      "ja": "RTPセッションが使用SSRC番号も独立して扱うことができることになり、独立したと考えることができます。これは、SSRC衝突検出と回避を簡素化しますが、このようなRTPセッションの間にテーブルを再マッピングなどのツールが必要です。独立したRTPセッションを使用すると、スイッチング動作は、共通SSRCスペースで実行することが可能であるとして、必要とされていません。しかし、この場合には、衝突検出と取り扱いが異なる問題となります。これは、単一の共通SSRCスペースまたは別のものを使用するように実装次第です。"
    },
    {
      "indent": 3,
      "text": "Using separate SSRC spaces has some implications. For example, the RTP stream that is being sent by endpoint B to the middlebox (BV1) may use an SSRC value of 12345678. When that RTP stream is sent to endpoint F by the middlebox, it can use any SSRC value, e.g., 87654321. As a result, each endpoint may have a different view of the application usage of a particular SSRC. Any RTP-level identity information, such as SDES items, also needs to update the SSRC referenced, if the included SDES items are intended to be global. Thus, the application must not use SSRC as references to RTP streams when communicating with other peers directly. This also affects loop detection, which will fail to work as there is no common namespace and identities across the different legs in the Communication Session on the RTP level. Instead, this responsibility falls onto higher layers.",
      "ja": "別のSSRCスペースを使用すると、いくつかの意味を持っています。例えば、そのRTPストリームがミドルボックスによってエンドポイントFに送られるとミドル（BV1）にエンドポイントBによって送信されているRTPストリームは12345678のSSRC値を使用することができ、それは任意のSSRC値を使用することができ、例えば、87654321その結果、各エンドポイントは、特定のSSRCのアプリケーションの使用の異なるビューを有していてもよいです。含まSDESアイテムがグローバルであることが意図される場合、このようなSDESアイテムなどの任意のRTPレベルの識別情報は、また、参照SSRCを更新する必要があります。直接他のピアと通信する際にこのように、RTPに参照としてSSRCを使用してはならないアプリケーションでは、ストリーム。また、これはRTPレベルでのコミュニケーションのセッションで異なる脚の間で共通の名前空間とアイデンティティがないとして動作するように失敗するループ検出に影響します。代わりに、この責任は、より高い層の上に落下します。"
    },
    {
      "indent": 3,
      "text": "The middlebox is also responsible for receiving any RTCP codec control requests coming from an endpoint and deciding if it can act on the request locally or needs to translate the request into the RTP session/transport leg that contains the Media Source. Both endpoints and the middlebox need to implement conference-related codec control functionalities to provide a good experience. Commonly used are Full Intra Request to request from the Media Source that switching points be provided between the sources and Temporary Maximum Media Bitrate Request (TMMBR) to enable the middlebox to aggregate congestion control responses towards the Media Source so to enable it to adjust its bitrate (obviously, only in case the limitation is not in the source to middlebox link).",
      "ja": "ミドルはまた、エンドポイントからの任意のRTCPコーデック制御要求を受信し、それをローカル要求に基づいて行動やメディアソースが含まれているRTPセッション/トランスポート足への要求を変換する必要があることができるかどうかを決定する責任があります。両方のエンドポイントとミドルは良い経験を提供するために、会議関連のコーデック制御機能を実装する必要があります。一般的に使用されるので、そのビットレートを調整することを可能にするために、メディアソースに向かって輻輳制御応答を集約するミドルボックスを有効にする切り替えポイントがソースと一時最大メディアビットレート要求（TMMBR）との間に設けられていることがメディアソースからの要求にフルイントラ要求されています（明らかに、場合のみに制限はミドルリンクのソースではありません）。"
    },
    {
      "indent": 3,
      "text": "The Selective Forwarding Middlebox has been introduced in recently developed videoconferencing systems in conjunction with, and to capitalize on, scalable video coding as well as simulcasting. An example of scalable video coding is Annex G of H.264, but other codecs, including H.264 AVC and VP8, also exhibit scalability, albeit only in the temporal dimension. In both scalable coding and simulcast cases, the video signal is represented by a set of two or more bitstreams, providing a corresponding number of distinct fidelity points. The middlebox selects which parts of a scalable bitstream (or which bitstream, in the case of simulcasting) to forward to each of the receiving endpoints. The decision may be driven by a number of factors, such as available bitrate, desired layout, etc. Contrary to transcoding MCUs, SFMs have extremely low delay and provide features that are typically associated with high-end systems (personalized layout, error localization) without any signal processing at the middlebox. They are also capable of scaling to a large number of concurrent users, and--due to their very low delay--can also be cascaded.",
      "ja": "選択転送ミドルは、スケーラブルビデオコーディングだけでなく、同時放送と併せて、最近開発されたビデオ会議システムに導入されており、上活用します。スケーラブルビデオ符号化の例は、H.264の附属書Gですが、H.264 AVCおよびVP8を含む他のコーデックも、唯一の時間次元ではあるものの、スケーラビリティを発揮します。スケーラブル符号化と同時放送の場合の両方において、ビデオ信号は、別個の忠実度点の対応する数を提供する、二つ以上のビットストリームの集合によって表されます。ミドルボックスは、受信エンドポイントのそれぞれに転送する（サイマルキャストの場合に、又はビットストリーム）は、スケーラブルビットストリームの部分を選択します。決定等、レイアウトを所望の使用可能なビットレートなどの要因、の数で駆動することができるマイコンをトランスコードに反して、支給材料は、非常に低遅延を有し、典型的には、ハイエンド・システム（パーソナライズされたレイアウト、エラー局在）に関連付けられている機能を提供ミドルボックスにおける任意の信号処理無し。彼らの非常に低遅延のために -   - 彼らはまた、多数の同時ユーザーへのスケーリングが可能であり、またカスケード接続することができます。"
    },
    {
      "indent": 3,
      "text": "This version of the middlebox also puts different requirements on the endpoint when it comes to decoder instances and handling of the RTP streams providing media. As each projected SSRC can, at any time, provide media, the endpoint either needs to be able to handle as many decoder instances as the middlebox received, or have efficient switching of decoder contexts in a more limited set of actual decoder instances to cope with the switches. The application also gets more responsibility to update how the media provided is to be presented to the user.",
      "ja": "それはメディアを提供RTPストリームのインスタンスおよび取り扱いをデコーダになるとミドルのこのバージョンは、エンドポイント上のさまざまな要件を置きます。各々がSSRCは、いつでも、メディアを提供することができる投影されるように、エンドポイントは、ミドルボックスは、受信限り多くのデコーダ・インスタンスを扱うことができるようにする必要がある、またはに対処するために、実際のデコーダ・インスタンスのより限定されたセット内のデコーダコンテキストの効率的なスイッチングを有するいずれかスイッチ。また、アプリケーションは提供されたメディアをユーザに提示する方法を更新するために、より多くの責任を取得します。"
    },
    {
      "indent": 3,
      "text": "Note that this topology could potentially be seen as a Media Translator that includes an on/off logic as part of its media translation. The topology has the property that all SSRCs present in the session are visible to an endpoint. It also has mixer aspects, as the streams it provides are not basically translated versions, but instead they have conceptual property assigned to them and can be both turned on/off as well as fully or partially delivered. Thus, this topology appears to be some hybrid between the translator and mixer model.",
      "ja": "このトポロジは、潜在的にそのメディア翻訳の一環として、オン/オフ論理を含むメディア翻訳者として見ることができることに注意してください。トポロジーは、セッション中に存在する全てのSSRCsがエンドポイントに表示されている特性を有しています。それが提供するストリームが、基本的に翻訳されたバージョンではなく、代わりに、彼らはそれらに割り当てられた概念的な性質を有し、両方ならびに完全にまたは部分的に送達されるようオン/オフすることができるように、それはまた、ミキサーの側面を有しています。このように、このトポロジは、翻訳者とミキサーモデルの間にいくつかのハイブリッドであるように思われます。"
    },
    {
      "indent": 3,
      "text": "The differences between a Selective Forwarding Middlebox and a Switching-Media Mixer (Section 3.6.2) are minor, and they share most properties. The above requirement on having a large number of decoding instances or requiring efficient switching of decoder contexts, are one point of difference. The other is how the identification is performed, where the mixer uses CSRC to provide information on what is included in a particular RTP stream that represents a particular concept. Selective forwarding gets the source information through the SSRC and instead uses other mechanisms to indicate the streams intended usage, if needed.",
      "ja": "選択転送ミドルとスイッチング・メディアミキサー（3.6.2項）との違いは軽微であり、それらはほとんどのプロパティを共有しています。復号インスタンスの数が多いまたはデコーダコンテキストの効率的な切り替えを必要に上記の要件は、差の一点です。他のミキサーが特定の概念を表す特定のRTPストリームに含まれているものに関する情報を提供するために、CSRCを使用する場合の識別は、実行される方法です。選択的な転送はSSRCを介してソース情報を取得し、代わりに、必要に応じて、使用を意図したストリームを示すために他のメカニズムを使用します。"
    },
    {
      "indent": 0,
      "text": "3.8. Point to Multipoint Using Video-Switching MCUs",
      "section_title": true,
      "ja": "3.8。ビデオ・スイッチングのMCUを使用したポイントツーマルチポイント"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Video-switch-MCU",
      "ja": "ショートカット名：TOPO-ビデオスイッチ-MCU"
    },
    {
      "indent": 19,
      "text": "+---+      +------------+      +---+\n| A |------| Multipoint |------| B |\n+---+      |  Control   |      +---+\n           |   Unit     |\n+---+      |   (MCU)    |      +---+\n| C |------|            |------| D |\n+---+      +------------+      +---+",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 18: Point to Multipoint Using a Video-Switching MCU",
      "ja": "図18：ポイントは、ビデオ・スイッチングMCUを使用して対多"
    },
    {
      "indent": 3,
      "text": "This PtM topology was popular in early implementations of multipoint videoconferencing systems due to its simplicity, and the corresponding middlebox design has been known as a \"video-switching MCU\". The more complex RTCP-terminating MCUs, discussed in the next section, became the norm, however, when technology allowed implementations at acceptable costs.",
      "ja": "これのPtMトポロジは、その単純に、多地点ビデオ会議システムの初期の実装では人気があった、とそれに対応するミドルのデザインは、「ビデオ・スイッチングMCU」として知られています。次のセクションで説明するより複雑なRTCP-終了MCUは、技術が許容できるコストで実装を許可する場合は、しかし、当たり前になりました。"
    },
    {
      "indent": 3,
      "text": "A video-switching MCU forwards to a participant a single media stream, selected from the available streams. The criteria for selection are often based on voice activity in the audio-visual conference, but other conference management mechanisms (like presentation mode or explicit floor control) are known to exist as well.",
      "ja": "ビデオスイッチング参加者に単一のメディアストリームをMCUに転送し、利用可能なストリームから選ばれます。選択の基準は、多くの場合、オーディオビジュアル会議での音声アクティビティに基づいていますが、（プレゼンテーションモードまたは明示的なフロア制御のような）他の会議管理メカニズムも同様に存在することが知られています。"
    },
    {
      "indent": 3,
      "text": "The video-switching MCU may also perform media translation to modify the content in bitrate, encoding, or resolution. However, it still may indicate the original sender of the content through the SSRC. In this case, the values of the CC and CSRC fields are retained.",
      "ja": "ビデオスイッチングMCUはまた、ビットレート、符号化、または解像度のコンテンツを変更するためにメディア変換を実行することができます。しかし、それはまだSSRCを介してコンテンツの元の送信者を示すかもしれません。この場合、CCおよびCSRCフィールドの値が保持されます。"
    },
    {
      "indent": 3,
      "text": "If not terminating RTP, the RTCP sender reports are forwarded for the currently selected sender. All RTCP receiver reports are freely forwarded between the endpoints. In addition, the MCU may also originate RTCP control traffic in order to control the session and/or report on status from its viewpoint.",
      "ja": "RTPを終了していない場合は、RTCP送信者レポートは、現在選択されている送信者のために転送されます。すべてのRTCPレシーバレポートは自由にエンドポイント間で転送されます。また、MCUは、セッションを制御し、および/またはその観点からのステータスを報告するために、RTCP制御トラフィックを発信することができます。"
    },
    {
      "indent": 3,
      "text": "The video-switching MCU has most of the attributes of a translator. However, its stream selection is a mixing behavior. This behavior has some RTP and RTCP issues associated with it. The suppression of all but one RTP stream results in most participants seeing only a subset of the sent RTP streams at any given time, often a single RTP stream per conference. Therefore, RTCP receiver reports only report on these RTP streams. Consequently, the endpoints emitting RTP streams that are not currently forwarded receive a view of the session that indicates their RTP streams disappear somewhere en route. This makes the use of RTCP for congestion control, or any type of quality reporting, very problematic.",
      "ja": "ビデオスイッチングMCUは、翻訳者の属性のほとんどを持っています。しかし、そのストリーム選択は、混合動作です。この動作は、それに関連付けられているいくつかのRTPとRTCPの問題があります。送信されたRTPのサブセットだけを見て、ほとんどの参加者の内の1つのRTPストリームの結果が、すべての抑制は、任意の時点での会議ごとに、多くの場合、単一のRTPストリームをストリーミングします。したがって、RTCP受信機レポートは、これらのRTPストリーム上で報告しています。その結果、現在は転送されないRTPストリームを放出するエンドポイントは、彼らのRTPストリームは途中でどこかに消え示しセッションのビューを受けます。これは、輻輳制御のためのRTCPの使用、または品質報告のいずれかのタイプ、非常に問題になります。"
    },
    {
      "indent": 3,
      "text": "To avoid the aforementioned issues, the MCU needs to implement two features. First, it needs to act as a mixer (see Section 3.6) and forward the selected RTP stream under its own SSRC and with the appropriate CSRC values. Second, the MCU needs to modify the RTCP RRs it forwards between the domains. As a result, it is recommended that one implement a centralized video-switching conference using a mixer according to RFC 3550, instead of the shortcut implementation described here.",
      "ja": "上記の問題を回避するには、MCUは、二つの機能を実装する必要があります。まず、それはミキサーとして作用する（セクション3.6を参照）、それ自身のSSRC下で適切なCSRC値で選択されたRTPストリームを転送する必要があります。第二に、MCUは、ドメイン間で転送するRTCPのRRを修正する必要があります。結果として、一つは、RFC 3550に従ってミキサーを使用して集中型のビデオスイッチング会議の代わりに、ここで説明したショートカットの実装を実現することが推奨されます。"
    },
    {
      "indent": 0,
      "text": "3.9. Point to Multipoint Using RTCP-Terminating MCU",
      "section_title": true,
      "ja": "3.9。 RTCP-終端MCUを使用したポイントツーマルチポイント"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-RTCP-terminating-MCU",
      "ja": "ショートカット名：TOPO-RTCP-終端-MCU"
    },
    {
      "indent": 19,
      "text": "+---+      +------------+      +---+\n| A |<---->| Multipoint |<---->| B |\n+---+      |  Control   |      +---+\n           |   Unit     |\n+---+      |   (MCU)    |      +---+\n| C |<---->|            |<---->| D |\n+---+      +------------+      +---+",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 19: Point to Multipoint Using Content Modifying MCUs",
      "ja": "図19：ポイントは、コンテンツの変更のMCUを使用して対多"
    },
    {
      "indent": 3,
      "text": "In this PtM scenario, each endpoint runs an RTP point-to-point session between itself and the MCU. This is a very commonly deployed topology in multipoint video conferencing. The content that the MCU provides to each participant is either:",
      "ja": "これのPtMシナリオでは、各エンドポイントは、それ自体とMCUとの間のRTPポイント・ツー・ポイントセッションを実行します。これは、多地点ビデオ会議では非常に一般的に展開トポロジです。 MCUは、各参加者に提供するコンテンツのいずれかです："
    },
    {
      "indent": 3,
      "text": "a. a selection of the content received from the other endpoints or",
      "ja": "A。コンテンツの選択は、他のエンドポイントから受信した又は"
    },
    {
      "indent": 3,
      "text": "b. the mixed aggregate of what the MCU receives from the other PtP paths, which are part of the same Communication Session.",
      "ja": "B。 MCUは、同じ通信セッションの一部である他のPtPパスから受け取るものとの混合凝集体。"
    },
    {
      "indent": 3,
      "text": "In case (a), the MCU may modify the content in terms of bitrate, encoding format, or resolution. No explicit RTP mechanism is used to establish the relationship between the original RTP stream of the media being sent and the RTP stream the MCU sends. In other words, the outgoing RTP streams typically use a different SSRC, and may well use a different payload type (PT), even if this different PT happens to be mapped to the same media type. This is a result of the individually negotiated RTP session for each endpoint.",
      "ja": "ケース（a）において、MCUは、ビットレート、符号化フォーマット、または解像度の点で内容を修正してもよいです。明示的なRTPメカニズムは、MCUが送信するストリーム送信されているメディアとRTPのオリジナルのRTPストリームとの間の関係を確立するために使用されていません。換言すれば、発信RTPは、典型的には、異なるSSRCを使用して、同様にこの異なるPTは、同じメディアタイプにマッピングすることを起こる場合であっても、異なるペイロードタイプ（PT）を使用することができるストリーム。これは、エンドポイントごとに個別に交渉RTPセッションの結果です。"
    },
    {
      "indent": 3,
      "text": "In case (b), the MCU is the Media Source and generates the Source RTP Stream as it mixes the received content and then encodes and packetizes it for transmission to an endpoint. According to RTP",
      "ja": "ケース（B）において、MCUは、メディアソースであり、それは、受信したコンテンツを混合した後、符号化し、エンドポイントに送信するため、それをパケットとしてソースRTPストリームを生成します。 RTPによると、"
    },
    {
      "indent": 3,
      "text": "[RFC3550], the SSRC of the contributors are to be signaled using the CSRC/CC mechanism. In practice, today, most deployed MCUs do not implement this feature. Instead, the identification of the endpoints whose content is included in the mixer's output is not indicated through any explicit RTP mechanism. That is, most deployed MCUs set the CC field in the RTP header to zero, thereby indicating no available CSRC information, even if they could identify the original sending endpoints as suggested in RTP.",
      "ja": "[RFC3550]、貢献者のSSRCは、CSRC / CCの機構を用いてシグナリングされます。実際には、今日、ほとんどの展開MCUは、この機能を実装していません。代わりに、コンテンツミキサの出力に含まれる明示的なRTP機構を介して示されていないエンドポイントの識別。つまり、ほとんどの展開MCUは、それによりRTPで示唆したように、彼らは、元の送信エンドポイントを識別することができる場合であっても、利用可能なCSRC情報がないことを示すゼロにRTPヘッダ内のCCフィールドを設定します。"
    },
    {
      "indent": 3,
      "text": "The main feature that sets this topology apart from what RFC 3550 describes is the breaking of the common RTP session across the centralized device, such as the MCU. This results in the loss of explicit RTP-level indication of all participants. If one were using the mechanisms available in RTP and RTCP to signal this explicitly, the topology would follow the approach of an RTP mixer. The lack of explicit indication has at least the following potential problems:",
      "ja": "説明何RFC 3550から離れて、このトポロジを設定し、主な機能は、MCUなどの集中デバイス、全体で共通のRTPセッションの破壊です。これは、すべての参加者の明示的なRTPレベルの表示の損失をもたらします。一つは、明示的にこれを通知するために、RTPおよびRTCPで使用可能なメカニズムを使用していた場合、トポロジーは、RTPミキサのアプローチに従うことになります。明示的な表示の欠如は、少なくとも以下の潜在的な問題があります。"
    },
    {
      "indent": 3,
      "text": "1. Loop detection cannot be performed on the RTP level. When carelessly connecting two misconfigured MCUs, a loop could be generated.",
      "ja": "1.ループ検出は、RTPレベルで行うことができません。不用意2個の誤設定のMCUを接続する場合、ループが発生することができます。"
    },
    {
      "indent": 3,
      "text": "2. There is no information about active media senders available in the RTP packet. As this information is missing, receivers cannot use it. It also deprives the client of information related to currently active senders in a machine-usable way, thus preventing clients from indicating currently active speakers in user interfaces, etc.",
      "ja": "2. RTPパケットで利用可能なアクティブなメディアの送信者についての情報はありません。この情報が欠落していると、受信機はそれを使用することはできません。また、このようにユーザインタフェース、等で現在アクティブスピーカーを示すからクライアントを防止する、機械使用可能な方法で現在アクティブな送信者に関連する情報のクライアントを奪います"
    },
    {
      "indent": 3,
      "text": "Note that many/most deployed MCUs (and video conferencing endpoints) rely on signaling-layer mechanisms for the identification of the Contributing Sources, for example, a SIP conferencing package [RFC4575]. This alleviates, to some extent, the aforementioned issues resulting from ignoring RTP's CSRC mechanism.",
      "ja": "多くの/最も展開マイコン（及びビデオ会議エンドポイント）は、例えば、貢献ソースの識別のためのシグナリング・レイヤ・メカニズムに依存していることに注意し、SIP会議パッケージ[RFC4575]。これは、ある程度、RTPのCSRCメカニズムを無視しての結果、前述の問題を軽減します。"
    },
    {
      "indent": 0,
      "text": "3.10. Split Component Terminal",
      "section_title": true,
      "ja": "3.10。スプリットコンポーネント端子"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Split-Terminal",
      "ja": "ショートカット名：TOPO-スプリットターミナル"
    },
    {
      "indent": 3,
      "text": "In some applications, for example, in some telepresence systems, terminals may not be integrated into a single functional unit but composed of more than one subunits. For example, a telepresence room terminal employing multiple cameras and monitors may consist of multiple video conferencing subunits, each capable of handling a single camera and monitor. Another example would be a video conferencing terminal in which audio is handled by one subunit, and video by another. Each of these subunits uses its own physical network interface (for example: Ethernet jack) and network address.",
      "ja": "いくつかの用途では、例えば、いくつかのテレプレゼンスシステムでは、端末は、単一の機能ユニットに一体化されなくてもよいが、複数のサブユニットから構成される。例えば、複数のカメラ及びモニタを用いテレプレゼンスルーム端末は、単一のカメラとモニタを取り扱うの各々が可能な、複数のビデオ会議のサブユニットから構成されてもよいです。別の例は、別のことで、ビデオ会議の音声を1つのサブユニットによって処理され、端末、およびビデオのだろう。ネットワークアドレス：これらのサブユニットの各々は、（イーサネットジャック例えば）独自の物理ネットワーク・インターフェースを使用します。"
    },
    {
      "indent": 3,
      "text": "The various (media processing) subunits need (logically and physically) to be interconnected by control functionality, but their media plane functionality may be split. These types of terminals are referred to as split component terminals. Historically, the earliest split component terminals were perhaps the independent audio and video conference software tools used over the MBONE in the late 1990s.",
      "ja": "種々の（メディア処理）サブユニットは、制御機能によって相互接続されるように（論理的および物理的）必要があるが、それらのメディアプレーン機能を分割することができます。端末のこれらのタイプは、分割コンポーネント端子と呼ばれます。歴史的に、最も初期の分割コンポーネント端子は、おそらく1990年代後半にMBONE上で使用独立したオーディオおよびビデオ会議ソフトウェアツールでした。"
    },
    {
      "indent": 3,
      "text": "An example for such a split component terminal is depicted in Figure 20. Within split component terminal A, at least audio and video subunits are addressed by their own network addresses. In some of these systems, the control stack subunit may also have its own network address.",
      "ja": "そのような分割された成分端末の例は、少なくともオーディオとビデオのサブユニットは、独自のネットワークアドレスによってアドレス指定され、分割された成分端末A内の図20に示されています。これらのシステムの一部では、制御スタックサブユニットは、独自のネットワークアドレスを持つことができます。"
    },
    {
      "indent": 3,
      "text": "From an RTP viewpoint, each of the subunits terminates RTP and acts as an endpoint in the sense that each subunit includes its own, independent RTP stack. However, as the subunits are semantically part of the same terminal, it is appropriate that this semantic relationship is expressed in RTCP protocol elements, namely in the CNAME.",
      "ja": "RTPの観点から、サブユニットのそれぞれは、RTPを終了し、各サブユニットがそれ自身の独立したRTPスタックを含むという意味でエンドポイントとして機能します。サブユニットは、意味的に同一の端末の一部であるとして、しかし、この意味的な関係が、すなわちCNAMEにおけるRTCPプロトコル要素で表現されることが適当です。"
    },
    {
      "indent": 15,
      "text": "+---------------------+\n| Endpoint A          |\n| Local Area Network  |\n|      +------------+ |\n|   +->| Audio      |<+-RTP---\\\n|   |  +------------+ |        \\    +------+\n|   |  +------------+ |         +-->|      |\n|   +->| Video      |<+-RTP-------->|  B   |\n|   |  +------------+ |         +-->|      |\n|   |  +------------+ |        /    +------+\n|   +->| Control    |<+-SIP---/\n|      +------------+ |\n+---------------------+",
      "raw": true
    },
    {
      "indent": 20,
      "text": "Figure 20: Split Component Terminal",
      "ja": "図20：スプリットコンポーネント端子"
    },
    {
      "indent": 3,
      "text": "It is further sensible that the subunits share a common clock from which RTP and RTCP clocks are derived, to facilitate synchronization and avoid clock drift.",
      "ja": "サブユニットは、同期を容易にし、クロックドリフトを回避するためにRTP及びRTCPクロックが由来する共通のクロックを共有することがさらに賢明です。"
    },
    {
      "indent": 3,
      "text": "To indicate that audio and video Source Streams generated by different subunits share a common clock, and can be synchronized, the RTP streams generated from those Source Streams need to include the same CNAME in their RTCP SDES packets. The use of a common CNAME for RTP flows carried in different transport-layer flows is entirely normal for RTP and RTCP senders, and fully compliant RTP endpoints, middleboxes, and other tools should have no problem with this.",
      "ja": "異なるサブユニットによって生成されるオーディオとビデオソースストリームが共通のクロックを共有し、同期することができますを示すために、RTPは、それらのソースストリームから生成されたストリーム彼らのRTCP SDESパケットで同じCNAMEを含める必要があります。 RTPのための共通のCNAMEの使用は、異なるトランスポート層に流れる運ばフローRTPとRTCP送信者のために完全に正常であり、かつ完全に準拠RTPエンドポイント、ミドルボックス、および他のツールは、これで問題はないはずです。"
    },
    {
      "indent": 3,
      "text": "However, outside of the split component terminal scenario (and perhaps a multihomed endpoint scenario, which is not further discussed herein), the use of a common CNAME in RTP streams sent from separate endpoints (as opposed to a common CNAME for RTP streams sent on different transport-layer flows between two endpoints) is rare. It has been reported that at least some third-party tools like some network monitors do not handle gracefully endpoints that use a common CNAME across multiple transport-layer flows: they report an error condition in which two separate endpoints are using the same CNAME. Depending on the sophistication of the support staff, such erroneous reports can lead to support issues.",
      "ja": "RTPのための共通のCNAMEとは対照的に、しかし、（本明細書でさらに議論されておらず、おそらくマルチホームエンドポイントシナリオ）スプリットコンポーネント端子シナリオの外に、RTPにおける共通のCNAMEの使用は、上で送信されるストリーム（別のエンドポイントから送信されるストリーム2つのエンドポイント間で異なるトランスポート・レイヤ・フロー）はまれです。いくつかのネットワークモニターは、複数のトランスポート層のフロー間で共通のCNAMEを使用して優雅にエンドポイントを処理していないようですが、少なくともいくつかのサードパーティ製のツールことが報告されている：彼らは、2つの別々のエンドポイントが同じCNAMEを使用しているエラー状態を報告します。サポートスタッフの高度化によって、このような誤報告書は、サポートの問題につながることができます。"
    },
    {
      "indent": 3,
      "text": "The aforementioned support issue can sometimes be avoided if each of the subunits of a split component terminal is configured to use a different CNAME, with the synchronization between the RTP streams being indicated by some non-RTP signaling channel rather than using a common CNAME sent in RTCP. This complicates the signaling, especially in cases where there are multiple SSRCs in use with complex synchronization requirements, as is the same in many current telepresence systems. Unless one uses RTCP terminating topologies such as Topo-RTCP-terminating-MCU, sessions involving more than one video subunit with a common CNAME are close to unavoidable.",
      "ja": "スプリットコンポーネント端子のサブユニットの各々が異なるCNAMEを使用するように構成されている場合、前述のサポート問題は、時にはむしろ共通のCNAMEが送られてき使用するよりもいくつかの非RTPシグナリングチャネルによって示されるRTPストリーム間の同期で、回避することができますRTCP。多くの現在のテレプレゼンスシステムで同じであるので、これは、特に複雑な同期要件に使用されている複数SSRCsがある場合には、シグナル伝達を複雑にします。 1は、TOPO-RTCP終端-MCUとしてRTCP終端トポロジを使用しない限り、一般的なCNAMEを持つ複数のビデオサブユニットを含むセッションは避けられないに近いです。"
    },
    {
      "indent": 3,
      "text": "The different RTP streams comprising a split terminal system can form a single RTP session or they can form multiple RTP sessions, depending on the visibility of their SSRC values in RTCP reports. If the receiver of the RTP streams sent by the split terminal sends reports relating to all of the RTP flows (i.e., to each SSRC) in each RTCP report, then a single RTP session is formed. Alternatively, if the receiver of the RTP streams sent by the split terminal does not send cross-reports in RTCP, then the audio and video form separate RTP sessions.",
      "ja": "異なるRTPは、単一のRTPセッションを形成することができるスプリット端末システムを含むストリームまたはそれらはRTCPレポートにそれらのSSRC値の視認性に応じて、複数のRTPセッションを形成することができます。分割された端末によって送信されたRTPストリームの受信機は、各RTCPレポートのRTPフロー（すなわち、各SSRCまで）の全てに関連するレポートを送信する場合、単一のRTPセッションが形成されます。 RTPの受信機はスプリット端末によって送信されたストリーム場合あるいは、RTCPに、オーディオとビデオの形式の別個のRTPセッションをクロスレポートを送信しません。"
    },
    {
      "indent": 3,
      "text": "For example, in Figure 20, B will send RTCP reports to each of the subunits of A. If the RTCP packets that B sends to the audio subunit of A include reports on the reception quality of the video as well as the audio, and similarly if the RTCP packets that B sends to the video subunit of A include reports on the reception quality of the audio as well as video, then a single RTP session is formed. However, if the RTCP packets B sends to the audio subunit of A only report on the received audio, and the RTCP packets B sends to the video subunit of A only report on the received video, then there are two separate RTP sessions.",
      "ja": "Bは、Aのオーディオサブユニットに送信するRTCPパケットが同様にビデオの受信品質ならびにオーディオの報告などが含まれている場合、例えば、図20において、Bは、RTCPを送信するAのサブユニットのそれぞれに報告Bは、Aのビデオサブユニットに送信するRTCPパケットがオーディオの受信品質の報告と同様に、ビデオを含む場合には、単一のRTPセッションが形成されます。 RTCPパケットBは、受信した音声上のレポートのみのオーディオサブユニットに送信し、RTCPパケットBは、受信した映像上のレポートのみの映像サブユニットに送信する場合は、2つの別々のRTPセッションがあります。"
    },
    {
      "indent": 3,
      "text": "Forming a single RTP session across the RTP streams sent by the different subunits of a split terminal gives each subunit visibility into reception quality of RTP streams sent by the other subunits.",
      "ja": "分割された端末の異なるサブユニットによって送信されたRTPストリームを横切る単一のRTPセッションを形成する他のサブユニットによって送信されたRTPストリームの受信品質に各サブユニットの可視性を与えます。"
    },
    {
      "indent": 3,
      "text": "This information can help diagnose reception quality problems, but at the cost of increased RTCP bandwidth use.",
      "ja": "この情報は、受信品質の問題を診断するのに役立ちますが、増加したRTCP帯域幅の使用を犠牲にすることができます。"
    },
    {
      "indent": 3,
      "text": "RTP streams sent by the subunits of a split terminal need to use the same CNAME in their RTCP packets if they are to be synchronized, irrespective of whether a single RTP session is formed or not.",
      "ja": "RTPは、分割された端末のサブユニットによって送信されたストリームそれらが同期される場合にかかわらず、単一のRTPセッションが形成されているか否かに、それらのRTCPパケットに同じCNAMEを使用する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.11. Non-symmetric Mixer/Translators",
      "section_title": true,
      "ja": "3.11。非対称ミキサー/翻訳者"
    },
    {
      "indent": 3,
      "text": "Shortcut name: Topo-Asymmetric",
      "ja": "ショートカット名：TOPO-非対称"
    },
    {
      "indent": 3,
      "text": "It is theoretically possible to construct an MCU that is a mixer in one direction and a translator in another. The main reason to consider this would be to allow topologies similar to Figure 13, where the mixer does not need to mix in the direction from B or D towards the multicast domains with A and C. Instead, the RTP streams from B and D are forwarded without changes. Avoiding this mixing would save media processing resources that perform the mixing in cases where it isn't needed. However, there would still be a need to mix B's media towards D. Only in the direction B -> multicast domain or D -> multicast domain would it be possible to work as a translator. In all other directions, it would function as a mixer.",
      "ja": "1つの方向別に翻訳ミキサーでMCUを構築することは理論的に可能です。このミキサは、その代わりにAとCとマルチキャストドメインに向かってBまたはDの方向に混合する必要がない13を、図をトポロジが同様可能にするであろう考慮すべき主な理由は、RTPは、B及びDからのストリームであります変更せずに転送されます。この混合を避けることは、それが必要とされていない場合には混合を行うメディア処理リソースを節約するでしょう。 >マルチキャストドメインまたはD  -   - >マルチキャストドメイン、翻訳者として働くことが可能であろうが、まだのみ、方向Bに向けてD. Bのメディアをミックスする必要があるだろう。他のすべての方向では、ミキサーとして機能します。"
    },
    {
      "indent": 3,
      "text": "The mixer/translator would still need to process and change the RTCP before forwarding it in the directions of B or D to the multicast domain. One issue is that A and C do not know about the mixed-media stream the mixer sends to either B or D. Therefore, any reports related to these streams must be removed. Also, receiver reports related to A's and C's RTP streams would be missing. To avoid A and C thinking that B and D aren't receiving A and C at all, the mixer needs to insert locally generated reports reflecting the situation for the streams from A and C into B's and D's sender reports. In the opposite direction, the receiver reports from A and C about B's and D's streams also need to be aggregated into the mixer's receiver reports sent to B and D. Since B and D only have the mixer as source for the stream, all RTCP from A and C must be suppressed by the mixer.",
      "ja": "ミキサー/トランスレータは、まだマルチキャストドメインにBまたはDの方向にそれを転送する前にRTCPを処理し、変更する必要があります。 1つの問題は、AとCは、ミキサーはこれらのストリームに関連するすべてのレポートを削除する必要があり、したがって、BまたはDのいずれかに送信するストリーミング混合メディアについて知らないということです。また、AさんとCさんRTPストリームに関連した受信レポートが欠落していることになります。 AとCはBとDは全くAとCを受けていないことを考えないようにするには、ミキサーはBさんとD'sの送信者レポートにAとCからストリームの状況を反映して、ローカルに生成されたレポートを挿入する必要があります。反対方向に、BさんとDのストリームについてA及びCから受信レポートはまた、BためBおよびDに送信ミキサのレシーバレポートに集約する必要があり、Dは、唯一のストリームのソースとしてミキサーを有する、すべてのRTCPからAとCは、ミキサによって抑制されなければなりません。"
    },
    {
      "indent": 3,
      "text": "This topology is so problematic, and it is so easy to get the RTCP processing wrong, that it is not recommended for implementation.",
      "ja": "このトポロジはそれほど問題であり、それは、実装のために推奨されていないことを、RTCP処理誤解しやすいようです。"
    },
    {
      "indent": 0,
      "text": "3.12. Combining Topologies",
      "section_title": true,
      "ja": "3.12。トポロジを組み合わせます"
    },
    {
      "indent": 3,
      "text": "Topologies can be combined and linked to each other using mixers or translators. However, care must be taken in handling the SSRC/CSRC space. A mixer does not forward RTCP from sources in other domains, but instead generates its own RTCP packets for each domain it mixes into, including the necessary SDES information for both the CSRCs and the SSRCs. Thus, in a mixed domain, the only SSRCs seen will be the ones present in the domain, while there can be CSRCs from all the domains connected together with a combination of mixers and translators. The combined SSRC and CSRC space is common over any translator or mixer. It is important to facilitate loop detection, something that is likely to be even more important in combined topologies due to the mixed behavior between the domains. Any hybrid, like the Topo-Video-switch-MCU or Topo-Asymmetric, requires considerable thought on how RTCP is dealt with.",
      "ja": "トポロジを合わせ、ミキサーまたはトランスレータを使用して互いに連結することができます。しかし、ケアはSSRC / CSRCスペースの取り扱いに注意する必要があります。ミキサは、他のドメイン内のソースからRTCPを転送し、その代わりにCSRCsとSSRCsの両方に必要なSDES情報を含むことがに混入ドメインごとに独自のRTCPパケットを生成しません。ミキサおよびトランスレータの組み合わせと一緒に接続されたすべてのドメインからCSRCsあり得るつつ、混合領域において、見られるだけSSRCsは、ドメイン内に存在するものであろう。組み合わせSSRCやCSRCスペースは、任意の翻訳者やミキサーを超える一般的です。ループ検出を容易にするために、ドメイン間の混合行動による組み合わせのトポロジでも、より重要である可能性が高い何かが重要です。任意のハイブリッドは、TOPO-ビデオスイッチ-MCUまたはTOPO-非対称のように、RTCPを扱っている方法にかなりの思考が必要です。"
    },
    {
      "indent": 0,
      "text": "4. Topology Properties",
      "section_title": true,
      "ja": "4.トポロジのプロパティ"
    },
    {
      "indent": 3,
      "text": "The topologies discussed in Section 3 have different properties. This section describes these properties. Note that, even if a certain property is supported within a particular topology concept, the necessary functionality may be optional to implement.",
      "ja": "第3節で述べたトポロジは、異なる特性を持っています。このセクションでは、これらのプロパティについて説明しています。なお、特定のプロパティは、特定のトポロジ概念内に支持されている場合でも、必要な機能を実装するために任意であってもよいです。"
    },
    {
      "indent": 0,
      "text": "4.1. All-to-All Media Transmission",
      "section_title": true,
      "ja": "4.1。全対全メディア伝送"
    },
    {
      "indent": 3,
      "text": "To recapitulate, multicast, and in particular ASM, provides the functionality that everyone may send to, or receive from, everyone else within the session. SSM can provide a similar functionality by having anyone intending to participate as a sender to send its media to the SSM Distribution Source. The SSM Distribution Source forwards the media to all receivers subscribed to the multicast group. Mesh, MCUs, mixers, Selective Forwarding Middleboxes (SFMs), and translators may all provide that functionality at least on some basic level. However, there are some differences in which type of reachability they provide.",
      "ja": "、マルチキャストを再現し、特にASMで、誰もがに送信、またはセッション内の他の皆から受け取ることができる機能を提供します。 SSMは、SSM配布ソースにそのメディアを送信する送信者として参加するつもり誰を持つことにより、同様の機能を提供することができます。 SSM配布ソースは、マルチキャストグループに加入してすべての受信機にメディアを転送します。メッシュ、MCUは、ミキサは、選択的転送のMiddleboxes（支給材料）、および翻訳者は、すべて、少なくともいくつかの基本的なレベルでその機能を提供することができます。しかし、それらが提供する到達可能性のタイプにいくつかの違いがあります。"
    },
    {
      "indent": 3,
      "text": "The topologies that come closest to emulating Any-Source IP Multicast, with all-to-all transmission capabilities, are the Transport Translator function called \"relay\" in Section 3.5, as well as the Mesh with joint RTP sessions (Section 3.4). Media Translators, Mesh with independent RTP Sessions, mixers, SFUs, and the MCU variants do not provide a fully meshed forwarding on the transport level; instead, they only allow limited forwarding of content from the other session participants.",
      "ja": "全対全伝送能力と、任意の送信元IPマルチキャストをエミュレートに最も近い来トポロジは、3.5節と同様に、共同のRTPセッション（3.4節）とメッシュに「リレー」と呼ばれる交通翻訳機能です。メディア翻訳者、独立したRTPセッションのメッシュ、ミキサー、SFUs、およびMCUの変異体は、トランスポートレベルでの完全なメッシュの転送を提供していません。代わりに、彼らは他のセッション参加者からのコンテンツの限定された転送を可能にします。"
    },
    {
      "indent": 3,
      "text": "The \"all-to-all media transmission\" requires that any media transmitting endpoint considers the path to the least-capable receiving endpoint. Otherwise, the media transmissions may overload that path. Therefore, a sending endpoint needs to monitor the path from itself to any of the receiving endpoints, to detect the currently least-capable receiver and adapt its sending rate accordingly. As multiple endpoints may send simultaneously, the available resources may vary. RTCP's receiver reports help perform this monitoring, at least on a medium time scale.",
      "ja": "「全対全メディア伝送」は、任意のメディア送信エンドポイントは、最小可能な受信エンドポイントへのパスを考慮することを必要とします。そうでない場合は、メディアの送信は、そのパスをオーバーロードがあります。したがって、送信エンドポイントが現在最小可能な受信機を検出し、それに応じて送信速度を適応させるために、受信エンドポイントのいずれかに自体からのパスを監視する必要があります。複数のエンドポイントを同時に送信することにより、利用可能なリソースは変更される場合があります。 RTCPの受信者レポートは、少なくとも中の時間スケールで、この監視を実行するのに役立ちます。"
    },
    {
      "indent": 3,
      "text": "The resource consumption for performing all-to-all transmission varies depending on the topology. Both ASM and SSM have the benefit that only one copy of each packet traverses a particular link. Using a relay causes the transmission of one copy of a packet per endpoint-to-relay path and packet transmitted. However, in most cases, the links carrying the multiple copies will be the ones close to the relay (which can be assumed to be part of the network infrastructure with good connectivity to the backbone) rather than the endpoints (which may be behind slower access links). The Mesh topologies causes N-1 streams of transmitted packets to traverse the first-hop link from the endpoint, in a mesh with N endpoints. How long the different paths are common is highly situation dependent.",
      "ja": "全対全送信を行うためのリソース消費は、トポロジに依存して変化します。 ASMとSSMの両方は、各パケットのコピーは1つだけ特定のリンクを横断利点を持っています。リレーを使用して送信されたエンドポイント・ツー・リレー経路およびパケットあたりのパケットのコピーの送信を引き起こします。しかし、ほとんどの場合、複数のコピーを搬送するリンクが遅くアクセスの背後にあり（バックボーンへの良好な接続性とネットワークインフラストラクチャの一部であると仮定することができます）リレーに近いものではなく、エンドポイント（になりますリンク）。メッシュトポロジNエンドポイントと噛み合って、エンドポイントからの第1ホップリンクを横断する送信パケットのN-1ストリームを生じさせます。どのくらい異なるパスが共通していることは非常に状況依存しています。"
    },
    {
      "indent": 3,
      "text": "The transmission of RTCP by design adapts to any changes in the number of participants due to the transmission algorithm, defined in the RTP specification [RFC3550], and the extensions in AVPF [RFC4585] (when applicable). That way, the resources utilized for RTCP stay within the bounds configured for the session.",
      "ja": "設計によってRTCPの送信は、RTP仕様で定義され、伝送アルゴリズムへの参加者の数の変化、[RFC3550]、およびAVPFに拡張[RFC4585]（該当する場合）に適応します。その方法は、RTCPに利用リソースは、セッションのために設定範囲内にとどまります。"
    },
    {
      "indent": 0,
      "text": "4.2. Transport or Media Interoperability",
      "section_title": true,
      "ja": "4.2。交通やメディアの相互運用性"
    },
    {
      "indent": 3,
      "text": "All translators, mixers, RTCP-terminating MCUs, and Mesh with individual RTP sessions allow changing the media encoding or the transport to other properties of the other domain, thereby providing extended interoperability in cases where the endpoints lack a common set of media codecs and/or transport protocols. Selective Forwarding Middleboxes can adopt the transport and (at least) selectively forward the encoded streams that match a receiving endpoint's capability. It requires an additional translator to change the media encoding if the encoded streams do not match the receiving endpoint's capabilities.",
      "ja": "すべての翻訳、ミキサー、RTCP終端マイコン、および個々のRTPセッションがそれによってエンドポイントがメディアコーデックの共通セットを欠く場合には、拡張相互運用性を提供し、他のドメインの他の特性にメディア符号化またはトランスポートを変更可能と噛合及び/またはトランスポートプロトコル。選択的転送のMiddleboxesを選択受信するエンドポイントの能力と一致する符号化ストリームを転送輸送および（少なくとも）を採用することができます。これは、符号化ストリームを受信エンドポイントの機能と一致しない場合は、メディアのエンコーディングを変更するには、追加の翻訳が必要です。"
    },
    {
      "indent": 0,
      "text": "4.3. Per-Domain Bitrate Adaptation",
      "section_title": true,
      "ja": "4.3。ドメイン単位のビットレート適応"
    },
    {
      "indent": 3,
      "text": "Endpoints are often connected to each other with a heterogeneous set of paths. This makes congestion control in a Point-to-Multipoint set problematic. In the ASM, SSM, Mesh with common RTP session, and Transport Relay scenarios, each individual sending endpoint has to adapt to the receiving endpoint behind the least-capable path, yielding suboptimal quality for the endpoints behind the more capable paths. This is no longer an issue when Media Translators, mixers, SFMs, or MCUs are involved, as each endpoint only needs to adapt to the slowest path within its own domain. The translator, mixer, SFM, or MCU topologies all require their respective outgoing RTP streams to adjust the bitrate, packet rate, etc., to adapt to the least-capable path in each of the other domains. That way one can avoid lowering the quality to the least-capable endpoint in all the domains at the cost (complexity, delay, equipment) of the mixer, SFM, or translator, and potentially the media sender (multicast/layered encoding and sending the different representations).",
      "ja": "エンドポイントは、多くの場合、パスの異種組と相互に接続されています。これは、ポイントツーマルチポイントで輻輳制御が問題設定になります。 ASMでは、SSMは、共通のRTPセッションとメッシュ、輸送リレーシナリオは、各個々の送信エンドポイントがより可能なパスの後ろにエンドポイントの準最適な品質が得られ、最小可能なパスの後ろに受信エンドポイントに対応しています。これは、各エンドポイントでのみ、自身のドメイン内の最も遅いパスに適応する必要があるとして、メディア翻訳者、ミキサー、支給材料、またはのMCUは、関与しているとき、もはや問題ではありません。トランスレータ、ミキサー、SFM、またはMCUは、全てがそれぞれの発信RTPを必要とするトポロジは、他のドメインの各々における最小可能な経路に適合するように、ビットレート、パケットレート、等を調整するストリーム。一つは、ミキサのコスト（複雑さ、遅延、機器）ですべてのドメインに少なくとも対応エンドポイントにSFMの品質を低下させる、又は翻訳、及び潜在的にメディア送信元（マルチキャスト/階層符号化と送信を避けることができ、その方法異なる表現）。"
    },
    {
      "indent": 0,
      "text": "4.4. Aggregation of Media",
      "section_title": true,
      "ja": "4.4。メディアの集約"
    },
    {
      "indent": 3,
      "text": "In the all-to-all media property mentioned above and provided by ASM, SSM, Mesh with common RTP session, and relay, all simultaneous media transmissions share the available bitrate. For endpoints with limited reception capabilities, this may result in a situation where even a minimal, acceptable media quality cannot be accomplished, because multiple RTP streams need to share the same resources. One solution to this problem is to use a mixer, or MCU, to aggregate the multiple RTP streams into a single one, where the single RTP stream takes up less resources in terms of bitrate. This aggregation can be performed according to different methods. Mixing or selection are two common methods. Selection is almost always possible and easy to implement. Mixing requires resources in the mixer and may be relatively easy and not impair the quality too badly (audio) or quite difficult (video tiling, which is not only computationally complex but also reduces the pixel count per stream, with corresponding loss in perceptual quality).",
      "ja": "上記とASM、SSMによって提供される、共通のRTPセッションとメッシュ、リレー全対全メディアプロパティに、全て同時のメディア伝送は、利用可能なビットレートを共有します。限定受信機能を備えたエンドポイントの場合、これは、複数のRTPストリームが同じリソースを共有する必要があるためにも、最小限の、許容されるメディアの品質を達成することができない状況をもたらし得ます。この問題に対する1つの解決策は、複数のRTPは、単一のRTPストリームは、ビットレートの点でより少ないリソースを占める単一のもの、にストリーム凝集し、ミキサー、またはMCUを使用することです。この凝集は、異なる方法に従って行うことができます。混合または選択は2つの一般的な方法です。選択はほとんど常に可能と実装が容易です。混合は、ミキサー内のリソースを必要とし、あまりにもひどく（オーディオ）または非常に困難（だけではなく、計算上複雑であるだけでなく、知覚品質の対応する損失で、ストリームあたりのピクセル数を減らしビデオタイリング、）の品質を損なう比較的容易でなくてもよいです。"
    },
    {
      "indent": 0,
      "text": "4.5. View of All Session Participants",
      "section_title": true,
      "ja": "4.5。すべてのセッション参加者のビュー"
    },
    {
      "indent": 3,
      "text": "The RTP protocol includes functionality to identify the session participants through the use of the SSRC and CSRC fields. In addition, it is capable of carrying some further identity information about these participants using the RTCP SDES. In topologies that provide a full all-to-all functionality, i.e., ASM, Mesh with common RTP session, and relay, a compliant RTP implementation offers the functionality directly as specified in RTP. In topologies that do not offer all-to-all communication, it is necessary that RTCP is handled correctly in domain bridging functions. RTP includes explicit specification text for translators and mixers, and for SFMs the required functionality can be derived from that text. However, the MCU described in Section 3.8 cannot offer the full functionality for session participant identification through RTP means. The topologies that create independent RTP sessions per endpoint or pair of endpoints, like a Back-to-Back RTP session, MESH with independent RTP sessions, and the RTCP terminating MCU (Section 3.9), with an exception of SFM, do not support RTP-based identification of session participants. In all those cases, other non-RTP-based mechanisms need to be implemented if such knowledge is required or desirable. When it comes to SFM, the SSRC namespace is not necessarily joint. Instead, identification will require knowledge of SSRC/CSRC mappings that the SFM performed; see Section 3.7.",
      "ja": "RTPプロトコルはSSRCとCSRCフィールドの使用を介してセッション参加者を識別するための機能を含みます。また、RTCP SDESを使用して、これらの参加者に関するさらにいくつかの識別情報を搬送することができます。フル全対全機能を提供するトポロジでは、すなわち、ASMは、一般的なRTPセッションとメッシュ、およびリレー、準拠したRTPの実装は直接としてRTPで指定された機能を提供しています。全対全通信を提供していないトポロジでは、RTCPは、ドメインブリッジング機能で正しく処理されることが必要です。 RTPは、翻訳者とミキサーの明示的な仕様のテキストを含み、支給材料のために必要な機能は、そのテキストに由来することができます。しかし、3.8節で説明したMCUは、RTPを通じてセッション参加者の識別のための完全な機能を提供できないことを意味します。バックツーバックRTPセッションのように、エンドポイントまたはエンドポイントのペアごとに独立したRTPセッションを作成トポロジーは、RTPをサポートしていない、SFMを除いて、MCUを終了RTCP（3.9節）の独立したRTPセッションに噛合し、セッション参加者の識別をベース。これらすべての場合において、他の非RTPベースのメカニズムは、そのような知識が必要または望ましい場合に実施される必要があります。それはSFMになると、SSRC名前空間は必ずしも共同ではありません。その代わりに、識別はSFMが行わSSRC / CSRCマッピングの知識を必要とするであろう。 3.7節を参照してください。"
    },
    {
      "indent": 0,
      "text": "4.6. Loop Detection",
      "section_title": true,
      "ja": "4.6。ループ検出"
    },
    {
      "indent": 3,
      "text": "In complex topologies with multiple interconnected domains, it is possible to unintentionally form media loops. RTP and RTCP support detecting such loops, as long as the SSRC and CSRC identities are maintained and correctly set in forwarded packets. Loop detection will work in ASM, SSM, Mesh with joint RTP session, and relay. It is likely that loop detection works for the video-switching MCU, Section 3.8, at least as long as it forwards the RTCP between the endpoints. However, the Back-to-Back RTP sessions, Mesh with independent RTP sessions, and SFMs will definitely break the loop detection mechanism.",
      "ja": "複数の相互接続されたドメインを有する複雑なトポロジでは、意図せずにメディアループを形成することが可能です。限り、SSRCやCSRCのアイデンティティを維持し、正しく転送されたパケットに設定されているようなループを検出するRTPとRTCPのサポート、。ループ検出は、共同RTPセッション、およびリレーでメッシュ、ASM、SSMで動作します。ループ検出は、少なくとも限り、それはエンドポイント間でRTCPを転送するように、ビデオ・スイッチング、MCUを3.8節のために働く可能性が高いです。しかし、バックツーバックRTPセッションは、独立したRTPセッションでメッシュ、および支給材料は間違いなくループ検出メカニズムを中断します。"
    },
    {
      "indent": 0,
      "text": "4.7. Consistency between Header Extensions and RTCP",
      "section_title": true,
      "ja": "4.7。ヘッダーの拡張とRTCPとの整合性"
    },
    {
      "indent": 3,
      "text": "Some RTP header extensions have relevance not only end to end but also hop to hop, meaning at least some of the middleboxes in the path are aware of their potential presence through signaling, intercept and interpret such header extensions, and potentially also rewrite or generate them. Modern header extensions generally follow \"A General Mechanism for RTP Header Extensions\" [RFC5285], which allows for all of the above. Examples for such header extensions include the Media ID (MID) in [SDP-BUNDLE]. At the time of writing, there was also a proposal for how to include some SDES into an RTP header extension [RTCP-SDES].",
      "ja": "いくつかのRTPヘッダの拡張は、パス内のミドルボックスの少なくとも一部を意味し、端へだけでなく、ホップするホップだけでなく、関連性を持っているようにヘッダ拡張を、シグナルインターセプトし、解釈を通じて潜在的な存在を認識している、そして潜在的にも書き直したり、それらを生成します。現代のヘッダ拡張子は、一般に上記のすべてを可能にする、「RTPヘッダ拡張のための一般的なメカニズム」[RFC5285]を辿ります。このようなヘッダ拡張の例は、[SDP-BUNDLE]でメディアID（MID）が挙げられます。書き込み時に、RTPヘッダ拡張[RTCP-SDES]にいくつかのSDESを含む方法に関する提案もありました。"
    },
    {
      "indent": 3,
      "text": "When such header extensions are in use, any middlebox that understands it must ensure consistency between the extensions it sees and/or generates and the RTCP it receives and generates. For example, the MID of the bundle is sent in an RTP header extension and also in an RTCP SDES message. This apparent redundancy was introduced as unaware middleboxes may choose to discard RTP header extensions. Obviously, inconsistency between the MID sent in the RTP header extension and in the RTCP SDES message could lead to undesirable results, and, therefore, consistency is needed. Middleboxes unaware of the nature of a header extension, as specified in [RFC5285], are free to forward or discard header extensions.",
      "ja": "このようなヘッダ拡張を使用しているとき、それを理解し、任意のミドルは、それが見て、および/または生成し、RTCPは、それが受信して生成する拡張機能との整合性を保証しなければなりません。例えば、束のMIDは、RTPヘッダ拡張内に、また、RTCP SDESメッセージで送信されます。気づかないミドルボックスは、RTPヘッダ拡張を破棄することもできますので、この見かけ上の冗長性が導入されました。明らかに、RTPヘッダ拡張およびRTCP SDESメッセージで送信MIDとの間の矛盾は、望ましくない結果につながる可能性、及び、従って、一貫性が必要です。 [RFC5285]で指定されるように、ヘッダ拡張の性質を知らない中間装置は、転送またはヘッダ拡張を廃棄する自由です。"
    },
    {
      "indent": 0,
      "text": "5. Comparison of Topologies",
      "section_title": true,
      "ja": "トポロジの5比較"
    },
    {
      "indent": 3,
      "text": "The table below attempts to summarize the properties of the different topologies. The legend to the topology abbreviations are: Topo-Point-to-Point (PtP), Topo-ASM (ASM), Topo-SSM (SSM), Topo-Trn-Translator (TT), Topo-Media-Translator (including Transport Translator) (MT), Topo-Mesh with joint session (MJS), Topo-Mesh with individual sessions (MIS), Topo-Mixer (Mix), Topo-Asymmetric (ASY), Topo-Video-switch-MCU (VSM), Topo-RTCP-terminating-MCU (RTM), and Selective Forwarding Middlebox (SFM). In the table below, Y indicates Yes or full support, N indicates No support, (Y) indicates partial support, and N/A indicates not applicable.",
      "ja": "以下の表は、異なるトポロジの特性を要約しよう。トポロジー略語の凡例は以下のとおりですTOPO-ポイントツーポイント（PTP）、TOPO-ASM（ASM）、TOPO-SSM（SSM）、TOPO-Trnは、翻訳（TT）、TOPO-メディア・翻訳（含む交通翻訳）（MT）、TOPO-メッシュ合同会議（MJS）、個々のセッションでTOPO-メッシュ（MIS）、TOPO-ミキサー（ミックス）、TOPO-非対称（ASY）と、TOPO-ビデオスイッチ-MCU（VSM） 、TOPO-RTCP-終端-MCU（RTM）、及び選択的転送ミドル（SFM）。以下の表において、YはYesまたはフルサポートを示し、Nは未サポートがないことを示し、（Y）は、部分的なサポートを示し、N / Aは適用できない示します。"
    },
    {
      "indent": 3,
      "text": "Property             PtP  ASM SSM  TT MT MJS MIS Mix ASY VSM RTM SFM\n---------------------------------------------------------------------\nAll-to-All Media      N    Y  (Y)  Y  Y   Y  (Y) (Y) (Y) (Y) (Y) (Y)\nInteroperability      N/A  N   N   Y  Y   Y   Y   Y   Y   N   Y   Y\nPer-Domain Adaptation N/A  N   N   N  Y   N   Y   Y   Y   N   Y   Y\nAggregation of Media  N    N   N   N  N   N   N   Y  (Y)  Y   Y   N\nFull Session View     Y    Y   Y   Y  Y   Y   N   Y   Y  (Y)  N   Y\nLoop Detection        Y    Y   Y   Y  Y   Y   N   Y   Y  (Y)  N   N",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Please note that the Media Translator also includes the Transport Translator functionality.",
      "ja": "メディア翻訳も交通翻訳機能が含まれていることに注意してください。"
    },
    {
      "indent": 0,
      "text": "6. Security Considerations",
      "section_title": true,
      "ja": "6.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "The use of mixers, SFMs, and translators has impact on security and the security functions used. The primary issue is that mixers, SFMs, and translators modify packets, thus preventing the use of integrity and source authentication, unless they are trusted devices that take part in the security context, e.g., the device can send Secure Real-time Transport Protocol (SRTP) and Secure Real-time Transport Control Protocol (SRTCP) [RFC3711] packets to endpoints in the Communication Session. If encryption is employed, the Media Translator, SFM, and mixer need to be able to decrypt the media to perform its function. A Transport Translator may be used without access to the encrypted payload in cases where it translates parts that are not included in the encryption and integrity protection, for example, IP address and UDP port numbers in a media stream using SRTP [RFC3711]. However, in general, the translator, SFM, or mixer needs to be part of the signaling context and get the necessary security associations (e.g., SRTP crypto contexts) established with its RTP session participants.",
      "ja": "ミキサ、支給材料、及び翻訳の使用は、セキュリティと使用されるセキュリティ機能に影響を与えます。主な問題は、それらがセキュリティコンテキストに参加するデバイス、例えば、信頼されていない限り、このように、整合性とソース認証の使用を防止し、ミキサー、支給材料、および翻訳者がパケットを変更することで、デバイスは、（セキュアリアルタイムトランスポートプロトコルを送信することができますSRTP）およびセキュアリアルタイムトランスポート制御プロトコル（SRTCP）通信セッション内のエンドポイントへの[RFC3711]パケット。暗号化が採用されている場合は、メディア翻訳、SFM、およびミキサーは、その機能を実行するためにメディアを復号化できるようにする必要があります。交通トランスレータは、例えば、メディアストリームにおけるIPアドレスとUDPポート番号は、SRTP [RFC3711]を使用して、それが暗号化と整合性の保護には含まれていない部分を翻訳する場合は暗号化されたペイロードにアクセスすることなく使用することができます。しかし、一般的に、翻訳者は、SFM、またはミキサーは、シグナリングコンテキストの一部であっても、そのRTPセッション参加者との確立に必要なセキュリティアソシエーション（例えば、SRTP暗号コンテキスト）を取得する必要があります。"
    },
    {
      "indent": 3,
      "text": "Including the mixer, SFM, and translator in the security context allows the entity, if subverted or misbehaving, to perform a number of very serious attacks as it has full access. It can perform all the attacks possible (see RFC 3550 and any applicable profiles) as if the media session were not protected at all, while giving the impression to the human session participants that they are protected.",
      "ja": "それは完全なアクセス権を持っているとして、非常に深刻な攻撃の数を実行するために、堕落または不正な動作と、セキュリティコンテキストでミキサー、SFM、および翻訳者を含めると、エンティティを可能にします。これは、可能なすべての攻撃を（RFC 3550および適用プロフィールを参照）、彼らは保護されていることを人間のセッション参加者に印象を与えながら、メディアセッションが、すべてで保護されていなかったかのように実行することができます。"
    },
    {
      "indent": 3,
      "text": "Transport Translators have no interactions with cryptography that work above the transport layer, such as SRTP, since that sort of translator leaves the RTP header and payload unaltered. Media Translators, on the other hand, have strong interactions with cryptography, since they alter the RTP payload. A Media Translator in a session that uses cryptographic protection needs to perform cryptographic processing to both inbound and outbound packets.",
      "ja": "トランスレータのソートは、RTPヘッダ及びペイロード不変を残すので、輸送翻訳は、SRTPのように、トランスポート層の上に動作暗号化とは相互作用を持ちません。彼らはRTPペイロードを変更するため、メディア翻訳者は、他の一方で、暗号との強力な相互作用を持っています。暗号保護を使用するセッションでメディアトランスレータは、インバウンドとアウトバウンドの両方のパケットに暗号処理を実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "A Media Translator may need to use different cryptographic keys for the inbound and outbound processing. For SRTP, different keys are required, because an RFC 3550 Media Translator leaves the SSRC unchanged during its packet processing, and SRTP key sharing is only allowed when distinct SSRCs can be used to protect distinct packet streams.",
      "ja": "メディアトランスレータは、インバウンドとアウトバウンド処理のために異なる暗号鍵を使用する必要があります。 SRTPの場合は、RFC 3550メディアトランスレータは、そのパケットの処理中にSSRCは変わりませんので、別のキーは、必要とされる、と明確なSSRCsが別個のパケットストリームを保護するために使用することができたときにSRTP鍵共有にのみ許可されます。"
    },
    {
      "indent": 3,
      "text": "When the Media Translator uses different keys to process inbound and outbound packets, each session participant needs to be provided with the appropriate key, depending on whether they are listening to the translator or the original source. (Note that there is an architectural difference between RTP media translation, in which participants can rely on the RTP payload type field of a packet to determine appropriate processing, and cryptographically protected media translation, in which participants must use information that is not carried in the packet.)",
      "ja": "メディアトランスレータは、インバウンドとアウトバウンドのパケットを処理するために異なる鍵を使用する場合は、各セッションの参加者は、彼らは翻訳者または元のソースを聴いているかどうかに応じて、適切なキーを設ける必要があります。 （参加者が参加者で運ばれていない情報を使用する必要がある適切な処理、及び暗号保護されたメディア変換を決定するために、パケットのRTPペイロードタイプフィールドに依存することができたRTPメディア翻訳のアーキテクチャの違いがあることに注意してくださいパケット。）"
    },
    {
      "indent": 3,
      "text": "When using security mechanisms with translators, SFMs, and mixers, it is possible that the translator, SFM, or mixer could create different security associations for the different domains they are working in. Doing so has some implications:",
      "ja": "。翻訳者、支給材料、およびミキサーとのセキュリティ・メカニズムを使用している場合、それは翻訳者、SFM、またはミキサーは、彼らが作業している異なるドメインごとに異なるセキュリティアソシエーションを作成する可能性があるそうすることで、いくつかの影響があります。"
    },
    {
      "indent": 3,
      "text": "First, it might weaken security if the mixer/translator accepts a weaker algorithm or key in one domain rather than in another. Therefore, care should be taken that appropriately strong security parameters are negotiated in all domains. In many cases, \"appropriate\" translates to \"similar\" strength. If a key-management system does allow the negotiation of security parameters resulting in a different strength of the security, then this system should notify the participants in the other domains about this.",
      "ja": "ミキサー/翻訳者は、1個のドメインではなく、他にも弱いアルゴリズムまたはキーを受け入れる場合まず、それはセキュリティを弱める可能性があります。そのため、注意が適切に強力なセキュリティパラメータは、すべてのドメインで交渉していることに注意しなければなりません。多くの場合、「適切な」とは、「類似」強さに変換します。鍵管理システムは、セキュリティのさまざまな強度が得られたセキュリティパラメータのネゴシエーションを許可しない場合、このシステムは、このことについて、他のドメインに参加者に通知しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Second, the number of crypto contexts (keys and security-related state) needed (for example, in SRTP [RFC3711]) may vary between mixers, SFMs, and translators. A mixer normally needs to represent only a single SSRC per domain and therefore needs to create only one security association (SRTP crypto context) per domain. In contrast, a translator needs one security association per participant it translates towards, in the opposite domain. Considering Figure 11, the translator needs two security associations towards the multicast domain: one for B and one for D. It may be forced to maintain a set of totally independent security associations between itself and B and D, respectively, so as to avoid two-time pad occurrences. These contexts must also be capable of handling all the sources present in the other domains. Hence, using completely independent security associations (for certain keying mechanisms) may force a translator to handle N*DM keys and related state, where N is the total number of SSRCs used over all domains and DM is the total number of domains.",
      "ja": "第二に、必要に応じて暗号コンテキスト（キーおよびセキュリティ関連状態）の数は、（例えば、SRTP [RFC3711]に）ミキサ、支給材料、及び翻訳の間で変化し得ます。ミキサーは、通常、ドメインごとに1つだけSSRCを表現する必要があり、したがって、ドメインごとに1つだけのセキュリティアソシエーション（SRTP暗号コンテキスト）を作成する必要があります。これとは対照的に、翻訳者は、参加者ごとにセキュリティアソシエーションが、それは逆のドメインで、の方に変換しなければなりません。図11を考慮すると、翻訳者は、マルチキャストドメインに向かって2つのセキュリティアソシエーションを必要とする：B用とDの1〜2を避けるためにそれぞれ、それ自体とBとDとの間の完全に独立したセキュリティアソシエーションのセットを維持するように強制することができます-timeパッド出現。これらの状況は、他のドメインに存在するすべてのソースを処理できる必要があります。したがって、N個の*のDMキーとNは、すべてのドメインとDMにわたって使用SSRCsの総数である関連状態を、処理するためのトランスレータを強制してもよい（特定のキーイング機構のために）完全に独立したセキュリティアソシエーションを使用してドメインの総数です。"
    },
    {
      "indent": 3,
      "text": "The ASM, SSM, Relay, and Mesh (with common RTP session) topologies each have multiple endpoints that require shared knowledge about the different crypto contexts for the endpoints. These multiparty topologies have special requirements on the key management as well as the security functions. Specifically, source authentication in these environments has special requirements.",
      "ja": "ASM、SSM、リレー、及び（共通RTPセッションに）メッシュは、各エンドポイントごとに異なる暗号コンテキストに関する共有知識を必要とする複数のエンドポイントを有するトポロジー。これらのマルチパーティのトポロジは、特殊な鍵管理上の要件だけでなく、セキュリティ機能を持っています。具体的には、これらの環境でソース認証は、特別な要件があります。"
    },
    {
      "indent": 3,
      "text": "There exist a number of different mechanisms to provide keys to the different participants. One example is the choice between group keys and unique keys per SSRC. The appropriate keying model is impacted by the topologies one intends to use. The final security properties are dependent on both the topologies in use and the keying mechanisms' properties and need to be considered by the application. Exactly which mechanisms are used is outside of the scope of this document. Please review RTP Security Options [RFC7201] to get a better understanding of most of the available options.",
      "ja": "別の参加者への鍵を提供するために、多くの異なる機構が存在します。一つの例は、グループキーとSSRCごとに一意のキーの間の選択です。適切なキーイングモデルが1を使用しようとするトポロジによって影響されます。最終的なセキュリティ・プロパティは、使用中のトポロジーとキーイングメカニズムのプロパティの両方に依存しており、アプリケーションによって考慮される必要があります。正確メカニズムが使用されるが、この文書の範囲外です。 RTPセキュリティオプション[RFC7201]は、使用可能なオプションのほとんどのより良い理解を得るために確認してください。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7.参考"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC3550] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson, \"RTP: A Transport Protocol for Real-Time Applications\", STD 64, RFC 3550, DOI 10.17487/RFC3550, July 2003, <http://www.rfc-editor.org/info/rfc3550>.",
      "ja": "[RFC3550] Schulzrinneと、H.、Casner、S.、フレデリック、R.、およびV.ヤコブソン、 \"RTP：リアルタイムアプリケーションのためのトランスポートプロトコル\"、STD 64、RFC 3550、DOI 10.17487 / RFC3550、2003年7月、 <http://www.rfc-editor.org/info/rfc3550>。"
    },
    {
      "indent": 3,
      "text": "[RFC4585] Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey, \"Extended RTP Profile for Real-time Transport Control Protocol (RTCP)-Based Feedback (RTP/AVPF)\", RFC 4585, DOI 10.17487/RFC4585, July 2006, <http://www.rfc-editor.org/info/rfc4585>.",
      "ja": "[RFC4585]オット、J.、ウェンガー、S.、佐藤、N.、Burmeister、C.、およびJ.レイ「ベースのフィードバック（RTP / AVPF）リアルタイムトランスポート制御プロトコル（RTCP）の拡張RTPプロファイル」、RFC 4585、DOI 10.17487 / RFC4585、2006年7月、<http://www.rfc-editor.org/info/rfc4585>。"
    },
    {
      "indent": 3,
      "text": "[RFC7656] Lennox, J., Gross, K., Nandakumar, S., Salgueiro, G., and B. Burman, Ed., \"A Taxonomy of Grouping Semantics and Mechanisms for Real-Time Transport Protocol (RTP) Sources\", RFC 7656, November 2015, <http://www.rfc-editor.org/info/rfc7656>.",
      "ja": "[RFC7656]レノックス、J.、グロス、K.、Nandakumar、S.、Salgueiro、G.、およびB.ビルマ、エド。、 \"グループ化セマンティクスとリアルタイムトランスポートプロトコルのメカニズムの分類（RTP）ソース\" 、RFC 7656、2015年11月、<http://www.rfc-editor.org/info/rfc7656>。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[MULTI-STREAM-OPT] Lennox, J., Westerlund, M., Wu, W., and C. Perkins, \"Sending Multiple Media Streams in a Single RTP Session: Grouping RTCP Reception Statistics and Other Feedback\", Work in Progress, draft-ietf-avtcore-rtp-multi-stream-optimisation-08, October 2015.",
      "ja": "[MULTI-STREAM-OPT]レノックス、J.、ウェスター、M.、呉、W.、およびC.パーキンス、「シングルRTPセッションで複数のメディアストリームを送信：グループ化RTCPレセプション統計やその他のフィードバック」、進行中の作業は、 、ドラフト-IETF-avtcore-RTP-マルチストリーム最適化-08、2015年10月。"
    },
    {
      "indent": 3,
      "text": "[RFC1112] Deering, S., \"Host extensions for IP multicasting\", STD 5, RFC 1112, DOI 10.17487/RFC1112, August 1989, <http://www.rfc-editor.org/info/rfc1112>.",
      "ja": "[RFC1112]デアリング、S.、STD 5、RFC 1112 \"IPマルチキャスティングのためのホスト拡大\"、DOI 10.17487 / RFC1112、1989年8月、<http://www.rfc-editor.org/info/rfc1112>。"
    },
    {
      "indent": 3,
      "text": "[RFC3022] Srisuresh, P. and K. Egevang, \"Traditional IP Network Address Translator (Traditional NAT)\", RFC 3022, DOI 10.17487/RFC3022, January 2001, <http://www.rfc-editor.org/info/rfc3022>.",
      "ja": "[RFC3022] Srisuresh、P.とK. Egevang、 \"伝統的なIPネットワークアドレス変換（NAT繁体字）\"、RFC 3022、DOI 10.17487 / RFC3022、2001年1月、<http://www.rfc-editor.org/info/ RFC3022>。"
    },
    {
      "indent": 3,
      "text": "[RFC3569] Bhattacharyya, S., Ed., \"An Overview of Source-Specific Multicast (SSM)\", RFC 3569, DOI 10.17487/RFC3569, July 2003, <http://www.rfc-editor.org/info/rfc3569>.",
      "ja": "[RFC3569]バッタチャリヤ、S.、エド。、 \"ソース固有マルチキャスト（SSM）の概要\"、RFC 3569、DOI 10.17487 / RFC3569、2003年7月、<http://www.rfc-editor.org/info/ RFC3569>。"
    },
    {
      "indent": 3,
      "text": "[RFC3711] Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K. Norrman, \"The Secure Real-time Transport Protocol (SRTP)\", RFC 3711, DOI 10.17487/RFC3711, March 2004, <http://www.rfc-editor.org/info/rfc3711>.",
      "ja": "[RFC3711] Baugher、M.、マグリュー、D.、Naslund、M.、カララ、E.、およびK. Norrman、 \"セキュアリアルタイムトランスポートプロトコル（SRTP）\"、RFC 3711、DOI 10.17487 / RFC3711、マーチ2004年、<http://www.rfc-editor.org/info/rfc3711>。"
    },
    {
      "indent": 3,
      "text": "[RFC4575] Rosenberg, J., Schulzrinne, H., and O. Levin, Ed., \"A Session Initiation Protocol (SIP) Event Package for Conference State\", RFC 4575, DOI 10.17487/RFC4575, August 2006, <http://www.rfc-editor.org/info/rfc4575>.",
      "ja": "[RFC4575]ローゼンバーグ、J.、Schulzrinneと、H.、およびO.レヴィン、エド、 \"Aセッション開始プロトコル（SIP）の会議の状態のためのイベントパッケージ\"、RFC 4575、DOI 10.17487 / RFC4575、2006年8月、<HTTP。： //www.rfc-editor.org/info/rfc4575>。"
    },
    {
      "indent": 3,
      "text": "[RFC4607] Holbrook, H. and B. Cain, \"Source-Specific Multicast for IP\", RFC 4607, DOI 10.17487/RFC4607, August 2006, <http://www.rfc-editor.org/info/rfc4607>.",
      "ja": "[RFC4607]ホルブルック、H.、およびB.カイン、 \"IPのためのソース固有のマルチキャスト\"、RFC 4607、DOI 10.17487 / RFC4607、2006年8月、<http://www.rfc-editor.org/info/rfc4607>。"
    },
    {
      "indent": 3,
      "text": "[RFC5104] Wenger, S., Chandra, U., Westerlund, M., and B. Burman, \"Codec Control Messages in the RTP Audio-Visual Profile with Feedback (AVPF)\", RFC 5104, DOI 10.17487/RFC5104, February 2008, <http://www.rfc-editor.org/info/rfc5104>.",
      "ja": "[RFC5104]ウェンガー、S.、チャンドラ、U.、ウェスター、M.、およびB.ビルマ、RFC 5104 \"フィードバック（AVPF）とRTPオーディオビジュアルプロファイルにおけるコーデック制御メッセージ\"、DOI 10.17487は/ RFC5104 2月2008年、<http://www.rfc-editor.org/info/rfc5104>。"
    },
    {
      "indent": 3,
      "text": "[RFC5117] Westerlund, M. and S. Wenger, \"RTP Topologies\", RFC 5117, DOI 10.17487/RFC5117, January 2008, <http://www.rfc-editor.org/info/rfc5117>.",
      "ja": "[RFC5117]ウェスター、M.とS.ベンゲル監督、 \"RTPトポロジ\"、RFC 5117、DOI 10.17487 / RFC5117、2008年1月、<http://www.rfc-editor.org/info/rfc5117>。"
    },
    {
      "indent": 3,
      "text": "[RFC5285] Singer, D. and H. Desineni, \"A General Mechanism for RTP Header Extensions\", RFC 5285, DOI 10.17487/RFC5285, July 2008, <http://www.rfc-editor.org/info/rfc5285>.",
      "ja": "[RFC5285]歌手、D.およびH. Desineni、 \"RTPヘッダー拡張のための一般的なメカニズム\"、RFC 5285、DOI 10.17487 / RFC5285、2008年7月、<http://www.rfc-editor.org/info/rfc5285> 。"
    },
    {
      "indent": 3,
      "text": "[RFC5760] Ott, J., Chesterfield, J., and E. Schooler, \"RTP Control Protocol (RTCP) Extensions for Single-Source Multicast Sessions with Unicast Feedback\", RFC 5760, DOI 10.17487/RFC5760, February 2010, <http://www.rfc-editor.org/info/rfc5760>.",
      "ja": "[RFC5760]オット、J.、チェスターフィールド、J.、およびE.学生、 \"RTP制御プロトコル（RTCP）ユニキャストフィードバックを有する単一ソースマルチキャストセッションのための拡張\"、RFC 5760、DOI 10.17487 / RFC5760、2010年2月、<HTTP ：//www.rfc-editor.org/info/rfc5760>。"
    },
    {
      "indent": 3,
      "text": "[RFC5766] Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN)\", RFC 5766, DOI 10.17487/RFC5766, April 2010, <http://www.rfc-editor.org/info/rfc5766>.",
      "ja": "[RFC5766]マーイ、R.、マシューズ、P.、およびJ.ローゼンバーグ、 \"トラバーサルNAT（TURN）の周りにリレーを使用してリレーNAT（STUN）のセッショントラバーサルユーティリティへの拡張\"、RFC 5766、DOI 10.17487 / RFC5766、4月2010年、<http://www.rfc-editor.org/info/rfc5766>。"
    },
    {
      "indent": 3,
      "text": "[RFC6285] Ver Steeg, B., Begen, A., Van Caenegem, T., and Z. Vax, \"Unicast-Based Rapid Acquisition of Multicast RTP Sessions\", RFC 6285, DOI 10.17487/RFC6285, June 2011, <http://www.rfc-editor.org/info/rfc6285>.",
      "ja": "[RFC6285]版シュテーク、B.、Begen、A.、ヴァンCaenegem、T.、およびZ. Vaxの、 \"マルチキャストRTPセッションのユニキャストベースの高速取得\"、RFC 6285、DOI 10.17487 / RFC6285、2011年6月、<HTTP ：//www.rfc-editor.org/info/rfc6285>。"
    },
    {
      "indent": 3,
      "text": "[RFC6465] Ivov, E., Ed., Marocco, E., Ed., and J. Lennox, \"A Real-time Transport Protocol (RTP) Header Extension for Mixer-to-Client Audio Level Indication\", RFC 6465, DOI 10.17487/RFC6465, December 2011, <http://www.rfc-editor.org/info/rfc6465>.",
      "ja": "[RFC6465] Ivov、E.、エド。、Marocco、E.、エド。、およびJ.レノックス、 \"リアルタイム転送プロトコルミキサーからクライアントへのオーディオレベル表示について（RTP）ヘッダ拡張\"、RFC 6465、 DOI 10.17487 / RFC6465、2011年12月、<http://www.rfc-editor.org/info/rfc6465>。"
    },
    {
      "indent": 3,
      "text": "[RFC7201] Westerlund, M. and C. Perkins, \"Options for Securing RTP Sessions\", RFC 7201, DOI 10.17487/RFC7201, April 2014, <http://www.rfc-editor.org/info/rfc7201>.",
      "ja": "[RFC7201]ウェスター、M.とC.パーキンス、 \"RTPセッションを確保するためのオプション\"、RFC 7201、DOI 10.17487 / RFC7201、2014年4月、<http://www.rfc-editor.org/info/rfc7201>。"
    },
    {
      "indent": 3,
      "text": "[RTCP-SDES] Westerlund, M., Burman, B., Even, R., and M. Zanaty, \"RTP Header Extension for RTCP Source Description Items\", Work in Progress, draft-ietf-avtext-sdes-hdr-ext-02, July 2015.",
      "ja": "[RTCP-SDES]ウェスター、M.、ビルマ、B.、であっても、R.、およびM. Zanaty、 \"RTCPソース説明項目のRTPヘッダ拡張子\"、進行中で働いて、ドラフトIETF-avtext-SDES-hdr- EXT-02、2015年7月。"
    },
    {
      "indent": 3,
      "text": "[SDP-BUNDLE] Holmberg, C., Alvestrand, H., and C. Jennings, \"Negotiating Media Multiplexing Using the Session Description Protocol (SDP)\", Work in Progress, draft-ietf-mmusic-sdp-bundle-negotiation-23, July 2015.",
      "ja": "[SDP-BUNDLE] Holmbergの、C.、Alvestrand、H.、およびC.ジェニングス、 \"セッション記述プロトコル（SDP）を使用したメディアの多重化を交渉\" が進行中で働いて、ドラフト-IETF-MMUSIC-SDP-バンドルnegotiation- 23、2015年7月。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Mark Baugher, Bo Burman, Ben Campbell, Umesh Chandra, Alex Eleftheriadis, Roni Even, Ladan Gharai, Geoff Hunt, Suresh Krishnan, Keith Lantz, Jonathan Lennox, Scarlet Liuyan, Suhas Nandakumar, Colin Perkins, and Dan Wing for their help in reviewing and improving this document.",
      "ja": "著者はマーク・Baugher、ボービルマ、ベン・キャンベル、Umeshチャンドラ、アレックスEleftheriadis、ロニでも、ラダンGharai、ジェフ・ハント、スレシュクリシュナン、キースランツ、ジョナサン・レノックス、スカーレットLiuyan、Suhas Nandakumar、コリンパーキンス、そしてダンに感謝したいと思いますこの文書を見直し、改善に彼らの助けのためのウィング。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Magnus Westerlund Ericsson Farogatan 2 SE-164 80 Kista Sweden",
      "ja": "マグヌスウェスターエリクソンFärögatan2 SE-164 80シスタ、スウェーデン"
    },
    {
      "indent": 3,
      "text": "Phone: +46 10 714 82 87 Email: magnus.westerlund@ericsson.com",
      "ja": "電話：+46 10 714 82 87 Eメール：magnus.westerlund@ericsson.com"
    },
    {
      "indent": 3,
      "text": "Stephan Wenger Vidyo 433 Hackensack Ave Hackensack, NJ 07601 United States",
      "ja": "ステファン・ウェンガーVidyoの433ハッケンサックアベニューハッケンサック、NJ 07601米国"
    },
    {
      "indent": 3,
      "text": "Email: stewe@stewe.org",
      "ja": "メール：stewe@stewe.org"
    }
  ]
}