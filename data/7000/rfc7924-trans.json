{
  "title": {
    "text": "RFC 7924 - Transport Layer Security (TLS) Cached Information Extension",
    "ja": "RFC 7924 - トランスポート層セキュリティ（TLS）キャッシュされた情報拡張"
  },
  "number": 7924,
  "created_at": "2019-11-01 23:43:54.761623+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                      S. Santesson\nRequest for Comments: 7924                               3xA Security AB\nCategory: Standards Track                                  H. Tschofenig\nISSN: 2070-1721                                                 ARM Ltd.\n                                                               July 2016",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Transport Layer Security (TLS) Cached Information Extension",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "Transport Layer Security (TLS) handshakes often include fairly static information, such as the server certificate and a list of trusted certification authorities (CAs). This information can be of considerable size, particularly if the server certificate is bundled with a complete certificate chain (i.e., the certificates of intermediate CAs up to the root CA).",
      "ja": "トランスポート層セキュリティ（TLS）ハンドシェイクは、多くの場合、このようなサーバー証明書と信頼された証明機関（CA）のリストとしてかなり静的な情報が含まれています。この情報は、サーバ証明書は、完全な証明書チェーンにバンドルされている場合は特に、かなりの大きさのものとすることができる（すなわち、アップルートCA中間CAの証明書）。"
    },
    {
      "indent": 3,
      "text": "This document defines an extension that allows a TLS client to inform a server of cached information, thereby enabling the server to omit already available information.",
      "ja": "この文書では、TLSクライアントは、それによって、すでに入手可能な情報を省略するサーバーを有効にする、キャッシュされた情報をサーバに通知することを可能にする拡張機能を定義します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 7841のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7924.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7924で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2016 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2016 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3\n3.  Cached Information Extension  . . . . . . . . . . . . . . . .   3\n4.  Exchange Specification  . . . . . . . . . . . . . . . . . . .   5\n  4.1.  Server Certificate Message  . . . . . . . . . . . . . . .   6\n  4.2.  CertificateRequest Message  . . . . . . . . . . . . . . .   7\n5.  Fingerprint Calculation . . . . . . . . . . . . . . . . . . .   7\n6.  Example . . . . . . . . . . . . . . . . . . . . . . . . . . .   8\n7.  Security Considerations . . . . . . . . . . . . . . . . . . .  10\n8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10\n  8.1.  New Entry to the TLS ExtensionType Registry . . . . . . .  10\n  8.2.  New Registry for CachedInformationType  . . . . . . . . .  11\n9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  11\n  9.1.  Normative References  . . . . . . . . . . . . . . . . . .  11\n  9.2.  Informative References  . . . . . . . . . . . . . . . . .  12\nAppendix A.  Example  . . . . . . . . . . . . . . . . . . . . . .  13\nAcknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  18\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  19",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1.はじめに"
    },
    {
      "indent": 3,
      "text": "Reducing the amount of information exchanged during a Transport Layer Security handshake to a minimum helps to improve performance in environments where devices are connected to a network with a low bandwidth and lossy radio technology. With the Internet of Things, such environments exist, for example, when devices use IEEE 802.15.4, Bluetooth Low Energy, or low power wide area networks. For more information about the challenges with smart object deployments, please see [RFC6574].",
      "ja": "最小限にトランスポート層セキュリティハンドシェイク中に交換される情報の量を減らすと、デバイスは低帯域幅と損失の多い無線技術を使ってネットワークに接続されている環境でのパフォーマンスを向上させることができます。デバイスは、IEEE 802.15.4、ブルートゥース低エネルギー、低消費電力の広域ネットワークを使用するときにモノのインターネットでは、そのような環境では、例えば、存在します。スマートオブジェクトの展開と課題の詳細については、[RFC6574]を参照してください。"
    },
    {
      "indent": 3,
      "text": "This specification defines a TLS extension that allows a client and a server to exclude transmission information cached in an earlier TLS handshake.",
      "ja": "この仕様では、クライアントとサーバーは、以前のTLSハンドシェイクでキャッシュされた送信情報を除外することを可能にするTLS拡張を定義します。"
    },
    {
      "indent": 3,
      "text": "A typical example exchange may therefore look as follows. First, the client and the server execute the full TLS handshake. The client then caches the certificate provided by the server. When the TLS client connects to the TLS server some time in the future, without using session resumption, it then attaches the \"cached_info\" extension defined in this document to the ClientHello message to indicate that it has cached the certificate, and it provides the fingerprint of it. If the server's certificate has not changed, then the TLS server does not need to send its certificate and the corresponding certificate chain again. In case information has changed, which can be seen from the fingerprint provided by the client, the certificate payload is transmitted to the client to allow the client to update the cache.",
      "ja": "次のように典型的な例交換は、したがって、見えるかもしれ。まず、クライアントとサーバーは、完全なTLSハンドシェイクを実行します。次に、クライアントは、サーバが提供する証明書をキャッシュします。 TLSクライアントは、将来的にTLSサーバにいくつかの時間を接続すると、セッション再開を使用しなくても、それはそれは、証明書をキャッシュしたことを示すためにClientHelloメッセージには、この文書で定義された「cached_info」の拡張子を付け、そしてそれは、指紋を提供しますそれの。サーバの証明書が変更されていない場合は、TLSサーバは、再びその証明書とそれに対応する証明書チェーンを送信する必要はありません。ケースでは、情報は、クライアントによって提供された指紋から見ることができる、変更された、証明書ペイロードは、クライアントがキャッシュを更新できるようにするためにクライアントに送信されます。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "キーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、 \"MUST\"、 \"MUST NOT\"、この文書では、 \"SHOULD\"、 \"推奨\" \"NOT SHOULD\"、 \"MAY\"、 \"OPTIONAL\" はあります[RFC2119]に記載されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "This document refers to the TLS protocol, but the description is equally applicable to Datagram Transport Layer Security (DTLS) as well.",
      "ja": "このドキュメントは、TLSプロトコルを指しますが、説明は同様にデータグラムトランスポート層セキュリティ（DTLS）にも同様に適用可能です。"
    },
    {
      "indent": 0,
      "text": "3. Cached Information Extension",
      "section_title": true,
      "ja": "3.キャッシュされた情報拡張"
    },
    {
      "indent": 3,
      "text": "This document defines a new extension type (cached_info(25)), which is used in ClientHello and ServerHello messages. The extension type is specified as follows.",
      "ja": "この文書はのClientHelloとのServerHelloメッセージで使用される新しい拡張型（cached_info（25））を定義します。次のように拡張タイプが指定されています。"
    },
    {
      "indent": 9,
      "text": "enum {\n     cached_info(25), (65535)\n} ExtensionType;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The extension_data field of this extension, when included in the ClientHello, MUST contain the CachedInformation structure. The client MAY send multiple CachedObjects of the same CachedInformationType. This may, for example, be the case when the client has cached multiple certificates from a server.",
      "ja": "ClientHelloに含まれ、この拡張機能の拡大分野は、CachedInformation構造を含まなければなりません。クライアントは、同じCachedInformationTypeの複数CachedObjectsを送信することができます。クライアントがサーバから複数の証明書をキャッシュしたとき、これは、例えば、ケースかもしれません。"
    },
    {
      "indent": 9,
      "text": "enum {\n     cert(1), cert_req(2) (255)\n} CachedInformationType;",
      "raw": true
    },
    {
      "indent": 9,
      "text": "struct {\n     select (type) {\n       case client:\n         CachedInformationType type;\n         opaque hash_value<1..255>;\n       case server:\n         CachedInformationType type;\n     } body;\n} CachedObject;",
      "raw": true
    },
    {
      "indent": 9,
      "text": "struct {\n     CachedObject cached_info<1..2^16-1>;\n} CachedInformation;",
      "raw": true
    },
    {
      "indent": 3,
      "text": "This document defines the following two types:",
      "ja": "このドキュメントは、次の2つのタイプを定義しています。"
    },
    {
      "indent": 3,
      "text": "'cert' type for not sending the complete server certificate message:",
      "ja": "完全なサーバ証明書メッセージを送信しないための「証明書」タイプ："
    },
    {
      "indent": 6,
      "text": "With the type field set to 'cert', the client MUST include the fingerprint of the Certificate message in the hash_value field. For this type, the fingerprint MUST be calculated using the procedure described in Section 5 with the Certificate message as input data.",
      "ja": "「証明書」に設定タイプフィールドでは、クライアントはHASH_VALUEフィールドでCertificateメッセージのフィンガープリントを含まなければなりません。このタイプのために、指紋は、入力データとして証明書メッセージのセクション5に記載された手順を使用して計算しなければなりません。"
    },
    {
      "indent": 3,
      "text": "'cert_req' Type for not sending the complete CertificateRequest Message:",
      "ja": "完全CertificateRequestメッセージを送信しないための「cert_req」種類："
    },
    {
      "indent": 6,
      "text": "With the type set to 'cert_req', the client MUST include the fingerprint of the CertificateRequest message in the hash_value field. For this type, the fingerprint MUST be calculated using the procedure described in Section 5 with the CertificateRequest message as input data.",
      "ja": "「cert_req」に設定タイプでは、クライアントはHASH_VALUEフィールドにCertificateRequestメッセージのフィンガープリントを含まなければなりません。このタイプのために、指紋は、入力データとしてCertificateRequestメッセージのセクション5に記載された手順を使用して計算しなければなりません。"
    },
    {
      "indent": 3,
      "text": "New cached info types can be added following the policy described in the IANA Considerations (Section 8). New message digest algorithms for use with these types can also be added by registering a new type that makes use of the updated message digest algorithm. For practical reasons, we recommend reusing hash algorithms already available with TLS ciphersuites. To avoid additional code and to keep the collision probability low, new hash algorithms MUST NOT have a collision resistance worse than SHA-256.",
      "ja": "新しいキャッシュされたインフォタイプは、IANAの考慮事項（第8節）で説明したポリシー以下を追加することができます。これらのタイプで使用する新しいメッセージダイジェストアルゴリズムも更新されたメッセージダイジェストアルゴリズムを利用した新しいタイプを登録することによって追加することができます。実用上の理由から、我々は、TLS暗号スイートですでに利用可能なハッシュアルゴリズムを再利用することをお勧めします。追加のコードを避けるために、衝突確率を低く保つために、新しいハッシュアルゴリズムはSHA-256よりも悪い衝突耐性を持ってはいけません。"
    },
    {
      "indent": 0,
      "text": "4. Exchange Specification",
      "section_title": true,
      "ja": "4.交換仕様"
    },
    {
      "indent": 3,
      "text": "Clients supporting this extension MAY include the \"cached_info\" extension in the (extended) ClientHello. If the client includes the extension, then it MUST contain one or more CachedObject attributes.",
      "ja": "この拡張機能をサポートするクライアントは、（拡張）のClientHelloに「cached_info」拡張子を含むかもしれません。クライアントは拡張子が含まれている場合、それは一つ以上のCachedObject属性を含まなければなりません。"
    },
    {
      "indent": 3,
      "text": "A server supporting this extension MAY include the \"cached_info\" extension in the (extended) ServerHello. By returning the \"cached_info\" extension, the server indicates that it supports the cached info types. For each indicated cached info type, the server MUST alter the transmission of respective payloads, according to the rules outlined with each type. If the server includes the extension, it MUST only include CachedObjects of a type also supported by the client (as expressed in the ClientHello). For example, if a client indicates support for 'cert' and 'cert_req', then the server cannot respond with a \"cached_info\" attribute containing support for ('foo-bar').",
      "ja": "この拡張機能をサポートするサーバは、（拡張）のServerHelloで「cached_info」拡張子を含むかもしれません。 「cached_info」拡張子を返すことによって、サーバーは、それがキャッシュされた情報の種類をサポートしていることを示しています。各示すキャッシュさ情報タイプについて、サーバは、各タイプで概説した規則に従って、それぞれのペイロードの伝送を変更する必要があります。サーバが拡張子が含まれている場合、それだけ（のClientHello内で発現されるように）、クライアントによってサポートされているタイプのCachedObjectsを含まなければなりません。クライアントは、「証明書」と「cert_req」のサポートを示した場合、サーバは（「FOO-バー」）のサポートを含む「cached_info」属性で応答することはできません。"
    },
    {
      "indent": 3,
      "text": "Since the client includes a fingerprint of information it cached (for each indicated type), the server is able to determine whether cached information is stale. If the server supports this specification and notices a mismatch between the data cached by the client and its own information, then the server MUST include the information in full and MUST NOT list the respective type in the \"cached_info\" extension.",
      "ja": "クライアントが（それぞれ示すタイプの）がキャッシュされた情報の指紋が含まれているので、サーバは、キャッシュされた情報が古くなっているかどうかを決定することができます。サーバはこの仕様をサポートし、クライアントによってキャッシュされたデータと、自身の情報の間に不一致に気付いた場合、サーバはフルに情報を含まなければならないし、「cached_info」拡張子の各タイプをリストしてはなりません。"
    },
    {
      "indent": 3,
      "text": "Note: If a server is part of a hosting environment, then the client may have cached multiple data items for a single server. To allow the client to select the appropriate information from the cache, it is RECOMMENDED that the client utilizes the Server Name Indication (SNI) extension [RFC6066].",
      "ja": "注意：サーバがホスティング環境の一部である場合、クライアントは、単一のサーバに対して複数のデータ項目をキャッシュしている可能性があります。クライアントがキャッシュから適切な情報を選択できるようにするためには、クライアントはサーバ名表示（SNI）拡張[RFC6066]を利用することを推奨されます。"
    },
    {
      "indent": 3,
      "text": "Following a successful exchange of the \"cached_info\" extension in the ClientHello and ServerHello, the server alters sending the corresponding handshake message. How information is altered from the handshake messages and for the types defined in this specification is defined in Sections 4.1 and 4.2, respectively.",
      "ja": "ClientHelloとのServerHelloで「cached_info」拡張子の成功交換後、サーバーの変更は、対応するハンドシェイクメッセージを送信します。どの情報がハンドシェイクメッセージから変更されており、本明細書で定義されたタイプのセクションはそれぞれ4.1と4.2で定義されています。"
    },
    {
      "indent": 3,
      "text": "Appendix A shows an example hash calculation, and Section 6 illustrates an example protocol exchange.",
      "ja": "付録Aは、例えば、ハッシュ演算を示し、そして第6節は、例えば、プロトコル交換を示す図です。"
    },
    {
      "indent": 0,
      "text": "4.1. Server Certificate Message",
      "section_title": true,
      "ja": "4.1。サーバー証明書のメッセージ"
    },
    {
      "indent": 3,
      "text": "When a ClientHello message contains the \"cached_info\" extension with a type set to 'cert', then the server MAY send the Certificate message shown in Figure 1 under the following conditions:",
      "ja": "ClientHelloメッセージは、「証明書」に設定タイプの「cached_info」の拡張子が含まれている場合、サーバは、以下の条件で、図1に示されている証明書のメッセージを送信することができます。"
    },
    {
      "indent": 3,
      "text": "o The server software implements the \"cached_info\" extension defined in this specification.",
      "ja": "Oサーバ・ソフトウェアは、この仕様で定義された「cached_info」の拡張子を実装しています。"
    },
    {
      "indent": 3,
      "text": "o The 'cert' \"cached_info\" extension is enabled (for example, a policy allows the use of this extension).",
      "ja": "拡張子「cached_info」「証明書」が有効になってO（例えば、ポリシーは、この拡張機能の使用を可能にします）。"
    },
    {
      "indent": 3,
      "text": "o The server compared the value in the hash_value field of the client-provided \"cached_info\" extension with the fingerprint of the Certificate message it normally sends to clients. This check ensures that the information cached by the client is current. The procedure for calculating the fingerprint is described in Section 5.",
      "ja": "Oサーバは通常、クライアントに送信する証明書メッセージの指紋と、クライアントが提供する「cached_info」拡張子のHASH_VALUEフィールドの値を比較しました。このチェックは、クライアントによってキャッシュされた情報が最新のものであることを保証します。指紋を計算するための手順は、セクション5に記載されています。"
    },
    {
      "indent": 3,
      "text": "The original certificate handshake message syntax is defined in [RFC5246] and has been extended with [RFC7250]. RFC 7250 allows the certificate payload to contain only the SubjectPublicKeyInfo instead of the full information typically found in a certificate. Hence, when this specification is used in combination with [RFC7250] and the negotiated certificate type is a raw public key, then the TLS server omits sending a certificate payload that contains an ASN.1 certificate structure with the included SubjectPublicKeyInfo rather than the full certificate chain. As such, this extension is compatible with the raw public key extension defined in RFC 7250. Note: We assume that the server implementation is able to select the appropriate certificate or SubjectPublicKeyInfo from the received hash value. If the SNI extension is used by the client, then the server has additional information to guide the selection of the appropriate cached info.",
      "ja": "元の証明書のハンドシェークメッセージの構文は[RFC5246]で定義され、[RFC7250]で拡張されています。 RFC 7250は、証明書ペイロードのみSubjectPublicKeyInfoでの代わりに、典型的には、証明書に見られる完全な情報を含むことができます。従って、本明細書は、[RFC7250]と組み合わせて使用​​するとネゴシエート証明書タイプは、生公開鍵である場合、次いで、TLSサーバは、完全な証明書ではなく、含まSubjectPublicKeyInfoで有するASN.1証明書構造を含む証明書ペイロードを送信省略します鎖。このように、この拡張は、RFC 7250（注）で定義された生の公開鍵拡張と互換性があります。私たちは、サーバの実装は、受信したハッシュ値から適切な証明書またはSubjectPublicKeyInfoでを選択することができると仮定する。 SNI拡張がクライアントで使用されている場合、サーバーは、適切なキャッシュされた情報の選択をガイドするための追加情報を持っています。"
    },
    {
      "indent": 3,
      "text": "When the cached info specification is used, then a modified version of the Certificate message is exchanged. The modified structure is shown in Figure 1.",
      "ja": "キャッシュされた情報の仕様を使用する場合は、[証明書のメッセージの修正版が交換されます。修飾された構造は、図1に示されています。"
    },
    {
      "indent": 9,
      "text": "struct {\n    opaque hash_value<1..255>;\n} Certificate;",
      "raw": true
    },
    {
      "indent": 17,
      "text": "Figure 1: Cached Info Certificate Message",
      "ja": "図1：キャッシュされた情報証明書のメッセージ"
    },
    {
      "indent": 0,
      "text": "4.2. CertificateRequest Message",
      "section_title": true,
      "ja": "4.2。 CertificateRequestメッセージ"
    },
    {
      "indent": 3,
      "text": "When a fingerprint for an object of type 'cert_req' is provided in the ClientHello, the server MAY send the CertificateRequest message shown in Figure 2 under the following conditions:",
      "ja": "タイプ「cert_req」のオブジェクトのフィンガープリントはのClientHello内に設けられている場合、サーバは、以下の条件で図2に示されCertificateRequestメッセージを送信してもよいです。"
    },
    {
      "indent": 3,
      "text": "o The server software implements the \"cached_info\" extension defined in this specification.",
      "ja": "Oサーバ・ソフトウェアは、この仕様で定義された「cached_info」の拡張子を実装しています。"
    },
    {
      "indent": 3,
      "text": "o The 'cert_req' \"cached_info\" extension is enabled (for example, a policy allows the use of this extension).",
      "ja": "O「cert_req」「cached_info」拡張（例えば、ポリシーは、この拡張機能の使用を可能にする）が有効になっています。"
    },
    {
      "indent": 3,
      "text": "o The server compared the value in the hash_value field of the client-provided \"cached_info\" extension with the fingerprint of the CertificateRequest message it normally sends to clients. This check ensures that the information cached by the client is current. The procedure for calculating the fingerprint is described in Section 5.",
      "ja": "Oサーバは通常、クライアントに送信するCertificateRequestメッセージの指紋と、クライアントが提供する「cached_info」拡張子のHASH_VALUEフィールドの値を比較しました。このチェックは、クライアントによってキャッシュされた情報が最新のものであることを保証します。指紋を計算するための手順は、セクション5に記載されています。"
    },
    {
      "indent": 3,
      "text": "o The server wants to request a certificate from the client.",
      "ja": "Oサーバは、クライアントからの証明書を要求したいと考えています。"
    },
    {
      "indent": 3,
      "text": "The original CertificateRequest handshake message syntax is defined in [RFC5246]. The modified structure of the CertificateRequest message is shown in Figure 2.",
      "ja": "オリジナルCertificateRequestハンドシェークメッセージの構文は[RFC5246]で定義されています。 CertificateRequestメッセージの変形例を図2に示されています。"
    },
    {
      "indent": 9,
      "text": "struct {\n    opaque hash_value<1..255>;\n} CertificateRequest;",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 2: Cached Info CertificateRequest Message",
      "ja": "図2：キャッシュされた情報CertificateRequestメッセージ"
    },
    {
      "indent": 3,
      "text": "The CertificateRequest payload is the input parameter to the fingerprint calculation described in Section 5.",
      "ja": "CertificateRequestペイロードはセクション5で説明した指紋の計算への入力パラメータです。"
    },
    {
      "indent": 0,
      "text": "5. Fingerprint Calculation",
      "section_title": true,
      "ja": "5.指紋の計算"
    },
    {
      "indent": 3,
      "text": "The fingerprint for the two cached info objects defined in this document MUST be computed as follows:",
      "ja": "次のようにこの文書で定義された2つのキャッシュされた情報オブジェクトのためのフィンガープリントを計算しなければなりません。"
    },
    {
      "indent": 3,
      "text": "1. Compute the SHA-256 [RFC6234] hash of the input data. The input data depends on the cached info type. This document defines two cached info types, described in Sections 4.1 and in 4.2. Note that the computed hash only covers the input data structure (and not any type and length information of the record layer). Appendix A shows an example.",
      "ja": "1.入力データのSHA-256 [RFC6234]ハッシュを計算します。入力されたデータは、キャッシュされた情報の種類によって異なります。この文書は、セクション4.1と4.2でに記載された2つのキャッシュされた情報の種類を定義します。計算されたハッシュのみ入力データ構造（としない記録層の任意のタイプと長さ情報）をカバーすることに留意されたいです。付録Aは一例を示しています。"
    },
    {
      "indent": 3,
      "text": "2. Use the output of the SHA-256 hash.",
      "section_title": true,
      "ja": "2. SHA-256ハッシュの出力を使用してください。"
    },
    {
      "indent": 3,
      "text": "The purpose of the fingerprint provided by the client is to help the server select the correct information. For example, in case of a Certificate message, the fingerprint identifies the server certificate (and the corresponding private key) for use with the rest of the handshake. Servers may have more than one certificate, and therefore a hash needs to be long enough to keep the probably of hash collisions low. On the other hand, the cached info design aims to reduce the amount of data being exchanged. The security of the handshake depends on the private key and not on the size of the fingerprint. Hence, the fingerprint is a way to prevent the server from accidentally selecting the wrong information. If an attacker injects an incorrect fingerprint, then two outcomes are possible: (1) the fingerprint does not relate to any cached state and the server has to fall back to a full exchange, and (2) if the attacker manages to inject a fingerprint that refers to data the client has not cached, then the exchange will fail later when the client continues with the handshake and aims to verify the digital signature. The signature verification will fail since the public key cached by the client will not correspond to the private key that was used by the server to sign the message.",
      "ja": "クライアントが提供する指紋の目的は、サーバーが正しい情報を選択できるようにすることです。例えば、証明書メッセージの場合には、指紋は、ハンドシェークの残りの部分で使用するためのサーバ証明書（及び対応する秘密鍵）を識別する。サーバーは、複数の証明書を有していてもよく、したがって、ハッシュはおそらく、ハッシュ衝突の低いを維持するのに十分長くする必要があります。一方、キャッシュされた情報のデザインが交換されるデータの量を削減することを目指しています。握手のセキュリティは秘密鍵ではなく、指紋のサイズによって異なります。したがって、指紋は、間違った情報を選択するからサーバーを防ぐための方法です。 （1）指紋が任意のキャッシュされた状態に関連していないと、サーバーは、完全な交流にフォールバックする必要があり、かつ（2）攻撃者が指紋を注入する管理する場合：攻撃者が不正な指紋を注入した場合、その後、2つの結果が考えられクライアントがハンドシェイクを続行し、デジタル署名を検証することを目指していたときには、クライアントがキャッシュされていないデータを参照し、その後、交換は、後で失敗します。クライアントによってキャッシュされた公開鍵がメッセージに署名するためにサーバによって使用された秘密鍵に対応しませんので、署名検証は失敗します。"
    },
    {
      "indent": 0,
      "text": "6. Example",
      "section_title": true,
      "ja": "6.例"
    },
    {
      "indent": 3,
      "text": "In the regular, full TLS handshake exchange, shown in Figure 3, the TLS server provides its certificate in the certificate payload to the client; see step (1). This allows the client to store the certificate for future use. After some time, the TLS client again interacts with the same TLS server and makes use of the TLS \"cached_info\" extension, as shown in Figure 4. The TLS client indicates support for this specification via the \"cached_info\" extension, see step (2), and indicates that it has stored the certificate from the earlier exchange (by indicating the 'cert' type). With step (3), the TLS server acknowledges the support of the 'cert' type and by including the value in the ServerHello, it informs the client that the content of the certificate payload contains the fingerprint of the certificate instead of the payload, defined in RFC 5246, of the Certificate message; see step (4).",
      "ja": "図3に示されているレギュラー、フルTLSハンドシェイク交換において、TLSサーバは、クライアントに証明書ペイロードに証明書を提供します。工程（1）を参照。これにより、クライアントは、将来の使用のために証明書を保存することができます。図4に示すように、いくつかの時間の後、TLSクライアントは再びTLSクライアントが「cached_info」拡張を介して本明細書のサポートを示し、同じTLSサーバと相互作用し、拡張子「cached_info」TLSを利用して、2（ステップ参照）、そしてそれはCERT 'タイプを示すことにより、以前の交換（）からの証明書を格納していることを示しています。ステップ（3）、TLSサーバは、「証明書」型とのServerHelloの値を含めることによってサポートを認め、それが証明書ペイロードの内容が定義され、代わりに、ペイロードの証明書のフィンガープリントが含まれていることをクライアントに通知しますRFC 5246で、Certificateメッセージの。工程（4）を参照してください。"
    },
    {
      "indent": 3,
      "text": "ClientHello -> <- ServerHello Certificate* // (1) ServerKeyExchange* CertificateRequest* ServerHelloDone",
      "ja": "ClientHello  - > < - のServerHello証明書* //（1）ServerKeyExchange * CertificateRequest * ServerHelloDone"
    },
    {
      "indent": 3,
      "text": "Certificate* ClientKeyExchange CertificateVerify* [ChangeCipherSpec] Finished ->",
      "ja": "証明書* ClientKeyExchange CertificateVerify * [ChangeCipherSpecを]完成 - >"
    },
    {
      "indent": 26,
      "text": "<- [ChangeCipherSpec]\n   Finished",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Application Data <-------> Application Data",
      "raw": true
    },
    {
      "indent": 8,
      "text": "Figure 3: Example Message Exchange: Initial (Full) Exchange",
      "ja": "図3：例メッセージ交換：初期（フル）交換"
    },
    {
      "indent": 3,
      "text": "ClientHello cached_info=(cert) -> // (2) <- ServerHello cached_info=(cert) (3) Certificate (4) ServerKeyExchange* ServerHelloDone",
      "ja": "ClientHello cached_info =（CERT） - > //（2）< - のServerHello cached_info =（CERT）（3）証明書（4）ServerKeyExchange * ServerHelloDone"
    },
    {
      "indent": 3,
      "text": "ClientKeyExchange CertificateVerify* [ChangeCipherSpec] Finished ->",
      "ja": "ClientKeyExchange CertificateVerify * [ChangeCipherSpecを]完成 - >"
    },
    {
      "indent": 26,
      "text": "<- [ChangeCipherSpec]\n   Finished",
      "raw": true
    },
    {
      "indent": 3,
      "text": "Application Data <-------> Application Data",
      "raw": true
    },
    {
      "indent": 6,
      "text": "Figure 4: Example Message Exchange: TLS Cached Extension Usage",
      "ja": "図4：例メッセージ交換：TLSキャッシュ拡張の使用"
    },
    {
      "indent": 0,
      "text": "7. Security Considerations",
      "section_title": true,
      "ja": "7.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "This specification defines a mechanism to reference stored state using a fingerprint. Sending a fingerprint of cached information in an unencrypted handshake, as the ClientHello and ServerHello does, may allow an attacker or observer to correlate independent TLS exchanges. While some information elements used in this specification, such as server certificates, are public objects and usually do not contain sensitive information, other types that are not yet defined may. Those who implement and deploy this specification should therefore make an informed decision whether the cached information is in line with their security and privacy goals. In case of concerns, it is advised to avoid sending the fingerprint of the data objects in clear.",
      "ja": "この仕様は、指紋を使用して格納状態を参照するためのメカニズムを定義します。 ClientHelloとのServerHelloが行うように、攻撃者または観察者が独立したTLS交換を相関させることができる、暗号化されていないハンドシェイクにキャッシュされた情報の指紋を送信します。そのようなサーバ証明書として本明細書中で使用されるいくつかの情報要素、一方で、公共のオブジェクトであり、通常の機密情報、まだ5月に定義されていない他のタイプを含んでいません。この仕様を実装してデプロイする者は、したがって、キャッシュされた情報は、セキュリティとプライバシーの目標に沿ったものであるかどうかを情報に基づいた意思決定を行う必要があります。懸念の場合は、明確にデータオブジェクトのフィンガープリントを送信しないことをお勧めします。"
    },
    {
      "indent": 3,
      "text": "The use of the \"cached_info\" extension allows the server to send significantly smaller TLS messages. Consequently, these omitted parts of the messages are not included in the transcript of the handshake in the TLS Finish message. However, since the client and the server communicate the hash values of the cached data in the initial handshake messages, the fingerprints are included in the TLS Finish message.",
      "ja": "「cached_info」拡張子の使用は、サーバーが大幅に小さくTLSメッセージを送信することができます。そのため、メッセージのこれらの省略部分はTLS終了メッセージで握手のトランスクリプトに含まれていません。クライアントとサーバが初期ハンドシェイクメッセージにキャッシュされたデータのハッシュ値を通信するので、指紋はTLS終了メッセージに含まれています。"
    },
    {
      "indent": 3,
      "text": "Clients MUST ensure that they only cache information from legitimate sources. For example, when the client populates the cache from a TLS exchange, then it must only cache information after the successful completion of a TLS exchange to ensure that an attacker does not inject incorrect information into the cache. Failure to do so allows for man-in-the-middle attacks.",
      "ja": "クライアントは、彼らが唯一の合法的なソースからの情報をキャッシュしていることを確認しなければなりません。クライアントがTLS交換からキャッシュを移入する場合たとえば、それはTLS交換が正常に完了した後にのみ、キャッシュ情報は、攻撃者がキャッシュに誤った情報を注入しないことを確実にする必要があります。これを怠ると、man-in-the-middle攻撃が可能になります。"
    },
    {
      "indent": 3,
      "text": "Security considerations for the fingerprint calculation are discussed in Section 5.",
      "ja": "フィンガープリント計算のためのセキュリティの考慮事項は、第5節で議論されています。"
    },
    {
      "indent": 0,
      "text": "8. IANA Considerations",
      "section_title": true,
      "ja": "8. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "8.1. New Entry to the TLS ExtensionType Registry",
      "section_title": true,
      "ja": "8.1。 TLS ExtensionTypeレジストリに新しいエントリ"
    },
    {
      "indent": 3,
      "text": "IANA has added an entry to the existing TLS \"ExtensionType Values\" registry, defined in [RFC5246], for cached_info(25) defined in this document.",
      "ja": "IANAは、この文書で定義cached_info（25）のために[RFC5246]で定義された既存のTLS「ExtensionType値」レジストリにエントリを追加しました。"
    },
    {
      "indent": 0,
      "text": "8.2. New Registry for CachedInformationType",
      "section_title": true,
      "ja": "8.2。 CachedInformationTypeのための新しいレジストリ"
    },
    {
      "indent": 3,
      "text": "IANA has established a registry titled \"TLS CachedInformationType Values\". The entries in the registry are:",
      "ja": "IANAは、「TLS CachedInformationType値」というタイトルのレジストリを確立しています。レジストリのエントリは、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "Value    Description\n-----    -----------\n  0      Reserved\n  1      cert\n  2      cert_req\n224-255  Reserved for Private Use",
      "raw": true
    },
    {
      "indent": 3,
      "text": "The policy for adding new values to this registry, following the terminology defined in [RFC5226], is as follows:",
      "ja": "次のように[RFC5226]で定義される用語以下、このレジストリに新しい値を追加するためのポリシーは、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o 0-63 (decimal): Standards Action",
      "ja": "O 0-63（10進数）：標準アクション"
    },
    {
      "indent": 3,
      "text": "o 64-223 (decimal): Specification Required",
      "ja": "O 64から223（10進数）：仕様が必要"
    },
    {
      "indent": 0,
      "text": "9. References",
      "section_title": true,
      "ja": "9.参考文献"
    },
    {
      "indent": 0,
      "text": "9.1. Normative References",
      "section_title": true,
      "ja": "9.1。引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, DOI 10.17487/RFC5246, August 2008, <http://www.rfc-editor.org/info/rfc5246>.",
      "ja": "[RFC5246]ダークス、T.およびE.レスコラ、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.2\"、RFC 5246、DOI 10.17487 / RFC5246、2008年8月、<http://www.rfc-editor.org/info / RFC5246>。"
    },
    {
      "indent": 3,
      "text": "[RFC6066] Eastlake 3rd, D., \"Transport Layer Security (TLS) Extensions: Extension Definitions\", RFC 6066, DOI 10.17487/RFC6066, January 2011, <http://www.rfc-editor.org/info/rfc6066>.",
      "ja": "[RFC6066]イーストレイク3日、D.、 \"トランスポート層セキュリティ（TLS）拡張機能：拡張定義\"、RFC 6066、DOI 10.17487 / RFC6066、2011年1月、<http://www.rfc-editor.org/info/rfc6066> 。"
    },
    {
      "indent": 3,
      "text": "[RFC6234] Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)\", RFC 6234, DOI 10.17487/RFC6234, May 2011, <http://www.rfc-editor.org/info/rfc6234>.",
      "ja": "[RFC6234]イーストレイク3日、D.とT.ハンセン、 \"米国のセキュアハッシュアルゴリズム（SHAとHMACとHKDF SHAベース）\"、RFC 6234、DOI 10.17487 / RFC6234、2011年5月、<のhttp：//www.rfc- editor.org/info/rfc6234>。"
    },
    {
      "indent": 0,
      "text": "9.2. Informative References",
      "section_title": true,
      "ja": "9.2。参考文献"
    },
    {
      "indent": 3,
      "text": "[ASN.1-Dump] Gutmann, P., \"ASN.1 Object Dump Program\", November 2010, <http://manpages.ubuntu.com/manpages/precise/man1/ dumpasn1.1.html>.",
      "ja": "[ASN.1ダンプ] Gutmann氏、P.、 \"ASN.1オブジェクトダンププログラム\"、2010年11月、<http://manpages.ubuntu.com/manpages/precise/man1/ dumpasn1.1.html>。"
    },
    {
      "indent": 3,
      "text": "[RFC5226] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 5226, DOI 10.17487/RFC5226, May 2008, <http://www.rfc-editor.org/info/rfc5226>.",
      "ja": "[RFC5226] Narten氏、T.とH. Alvestrand、 \"RFCsにIANA問題部に書くためのガイドライン\"、BCP 26、RFC 5226、DOI 10.17487 / RFC5226、2008年5月、<http://www.rfc-editor.org /情報/ RFC5226>。"
    },
    {
      "indent": 3,
      "text": "[RFC6574] Tschofenig, H. and J. Arkko, \"Report from the Smart Object Workshop\", RFC 6574, DOI 10.17487/RFC6574, April 2012, <http://www.rfc-editor.org/info/rfc6574>.",
      "ja": "[RFC6574] Tschofenig、H.とJ. Arkko、 \"スマートオブジェクトのワークショップからの報告書\"、RFC 6574、DOI 10.17487 / RFC6574、2012年4月、<http://www.rfc-editor.org/info/rfc6574>。"
    },
    {
      "indent": 3,
      "text": "[RFC7250] Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J., Weiler, S., and T. Kivinen, \"Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)\", RFC 7250, DOI 10.17487/RFC7250, June 2014, <http://www.rfc-editor.org/info/rfc7250>.",
      "ja": "[RFC7250] WOUTERS、P.、エド。、Tschofenig、H.、エド。、ギルモア、J.、ワイラー、S.、およびT. Kivinen、「生の公共トランスポート層セキュリティにおけるキー（TLS）を使用し、データグラムトランスポート層セキュリティ（DTLS）」、RFC 7250、DOI 10.17487 / RFC7250、2014年6月、<http://www.rfc-editor.org/info/rfc7250>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Example",
      "ja": "付録A.例"
    },
    {
      "indent": 3,
      "text": "Consider a certificate containing a NIST P256 elliptic curve public key displayed using Peter Gutmann's ASN.1 decoder [ASN.1-Dump] in Figure 5.",
      "ja": "図5にピーター・ガットマンのASN.1デコーダ[ASN.1ダンプ]を使用して表示NIST P256楕円曲線公開鍵を含む証明書を検討します。"
    },
    {
      "indent": 2,
      "text": " 0 556: SEQUENCE { 4 434: SEQUENCE { 8 3: [0] { 10 1: INTEGER 2 : } 13 1: INTEGER 13 16 10: SEQUENCE { 18 8: OBJECT IDENTIFIER ecdsaWithSHA256 (1 2 840 10045 4 3 2) : } 28 62: SEQUENCE { 30 11: SET { 32 9: SEQUENCE { 34 3: OBJECT IDENTIFIER countryName (2 5 4 6) 39 2: PrintableString 'NL' : } : } 43 17: SET { 45 15: SEQUENCE { 47 3: OBJECT IDENTIFIER organizationName (2 5 4 10) 52 8: PrintableString 'PolarSSL' : } : } 62 28: SET { 64 26: SEQUENCE { 66 3: OBJECT IDENTIFIER commonName (2 5 4 3) 71 19: PrintableString 'Polarssl Test EC CA' : } : } : } 92 30: SEQUENCE { 94 13: UTCTime 24/09/2013 15:52:04 GMT 109 13: UTCTime 22/09/2023 15:52:04 GMT : } 124 65: SEQUENCE { 126 11: SET { 128 9: SEQUENCE { 130 3: OBJECT IDENTIFIER countryName (2 5 4 6) 135 2: PrintableString 'NL' : } : }",
      "ja": "0 556：SEQUENCE {4 434：SEQUENCE {8 3：[0] {10 1：INTEGER 2：} 13 1：INTEGER 13 16 10：SEQUENCE {18 8：オブジェクト識別子ecdsaWithSHA256（1 2 840 10045 4 3 2）。 } 28 62：SEQUENCE {30 11：SET {32 9：SEQUENCE {34 3：オブジェクト識別子COUNTRYNAME（2 5 4 6）39 2はPrintableString 'NL'：}} 43 17：SET {45 15：SEQUENCE {47 3：OBJECT IDENTIFIER organizationNameの（2 5 4 10）52 8：はPrintableString 'PolarSSL'：}} 62 28：SET {64 26：SEQUENCE {66 3：オブジェクト識別子のcommonName（2 5 4 3）71 19はPrintableString「Polarssl試験EC CA」：}}} 92 30：SEQUENCE {94 13：UTC時刻24/09/2013 15時52分04秒GMT 109 13：UTC時刻22/09/2023 15時52分04秒GMT：} 124 65： SEQUENCE {126 11：SET {128 9：SEQUENCE {130 3：オブジェクト識別子COUNTRYNAME（2 5 4 6）135 2はPrintableString 'NL'：}}"
    },
    {
      "indent": 2,
      "text": "139 17: SET { 141 15: SEQUENCE { 143 3: OBJECT IDENTIFIER organizationName (2 5 4 10) 148 8: PrintableString 'PolarSSL' : } : } 158 31: SET { 160 29: SEQUENCE { 162 3: OBJECT IDENTIFIER commonName (2 5 4 3) 167 22: PrintableString 'PolarSSL Test Client 2' : } : } : } 191 89: SEQUENCE { 193 19: SEQUENCE { 195 7: OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1) 204 8: OBJECT IDENTIFIER prime256v1 (1 2 840 10045 3 1 7) : } 214 66: BIT STRING : 04 57 E5 AE B1 73 DF D3 AC BB 93 B8 81 FF 12 AE : EE E6 53 AC CE 55 53 F6 34 0E CC 2E E3 63 25 0B : DF 98 E2 F3 5C 60 36 96 C0 D5 18 14 70 E5 7F 9F : D5 4B 45 18 E5 B0 6C D5 5C F8 96 8F 87 70 A3 E4 : C7 : } 282 157: [3] { 285 154: SEQUENCE { 288 9: SEQUENCE { 290 3: OBJECT IDENTIFIER basicConstraints (2 5 29 19) 295 2: OCTET STRING, encapsulates { 297 0: SEQUENCE {} : } : } 299 29: SEQUENCE { 301 3: OBJECT IDENTIFIER subjectKeyIdentifier (2 5 29 14) 306 22: OCTET STRING, encapsulates { 308 20: OCTET STRING : 7A 00 5F 86 64 FC E0 5D E5 11 10 3B B2 E6 3B C4 : 26 3F CF E2 : } : } 330 110: SEQUENCE { 332 3: OBJECT IDENTIFIER authorityKeyIdentifier (2 5 29 35) 337 103: OCTET STRING, encapsulates { 339 101: SEQUENCE {",
      "ja": "139 17：SET {141 15：SEQUENCE {143 3：オブジェクト識別子organizationNameの（2 5 4 10）148 8はPrintableString 'PolarSSL'：}} 158 31：SET {160 29：SEQUENCE {162 3：オブジェクト識別子のcommonName（ 2 5 4 3）167 22：はPrintableString 'PolarSSLテストクライアント2'：}}} 191 89：SEQUENCE {193 19：SEQUENCE {195 7：オブジェクト識別子ecPublicKey（1 2 840 10045 2 1）204 8：オブジェクト識別子prime256v1（1 2 840 10045 3 1 7）：} 214 66：BIT STRING：04 57 E5 AE B1 73 DF D3 AC BB 93 B8 81 FF 12 AE：EE E6 53 AC CE 55 53 F6 34 0E CC 2E E3 63 25 0B：DF 98 E2 F3 5C 60 36 96 C0 D5 18 14 70 E5 7F 9F：D5 4B 45 18 E5 B0 6C D5 5C F8 96 8F 87 70 A3 E4：C7：} 282 157：[3] {285 154：SEQUENCE {288 9：SEQUENCE {290 3：オブジェクト識別子basicConstraintsの（2 5 29 19）295 2：OCTET STRINGを、封入{297 0：SEQUENCE {}}} 299 29：SEQUENCE {301 3：オブジェクト識別子subjectKeyIdentifier（2 5 29 14）306 22：OCTET STRINGを、封入{308 20：オクテットSTRING：7A 00 5F 86 64 FC E0 5D E5 11 10 3B B2 E 6（b）C4：26 3F CF E2：}} 330 110：SEQUENCE {332 3：オブジェクト識別子authorityKeyIdentifier（2 5 29 35）337 103：OCTET STRINGを、封入{339 101：SEQUENCE {"
    },
    {
      "indent": 2,
      "text": "341 20: [0] : 9D 6D 20 24 49 01 3F 2B CB 78 B5 19 BC 7E 24 : C9 DB FB 36 7C 363 66: [1] { 365 64: [4] { 367 62: SEQUENCE { 369 11: SET { 371 9: SEQUENCE { 373 3: OBJECT IDENTIFIER countryName (2 5 4 6) 378 2: PrintableString 'NL' : } : } 382 17: SET { 384 15: SEQUENCE { 386 3: OBJECT IDENTIFIER organizationName : (2 5 4 10) 391 8: PrintableString 'PolarSSL' : } : } 401 28: SET { 403 26: SEQUENCE { 405 3: OBJECT IDENTIFIER commonName (2 5 4 3) 410 19: PrintableString 'Polarssl Test EC CA' : } : } : } : } : } 431 9: [2] 00 C1 43 E2 7E 62 43 CC E8 : } : } : } : } : } : } 442 10: SEQUENCE { 444 8: OBJECT IDENTIFIER ecdsaWithSHA256 (1 2 840 10045 4 3 2) : } 454 104: BIT STRING, encapsulates { 457 101: SEQUENCE { 459 48: INTEGER : 4A 65 0D 7B 20 83 A2 99 B9 A8 0F FC 8D EE 8F 3D : BB 70 4C 96 03 AC 8E 78 70 DD F2 0E A0 B2 16 CB : 65 8E 1A C9 3F 2C 61 7E F8 3C EF AD 1C EE 36 20",
      "ja": "341 20：[0]：9D 6D 20 24 49 01 3F 2B CB 78 B5 19 BC 7E 24：C9 DB FB 36（c）363 66：[1] {365 64：[4] {367 62：SEQUENCE {369 11： SET {371 9：SEQUENCE {373 3：オブジェクト識別子COUNTRYNAME（2 5 4 6）378 2はPrintableString 'NL'：}} 382 17：SET {384 15：SEQUENCE {386 3：オブジェクト識別子organizationNameの：（2 5 4 10）391 8はPrintableString 'PolarSSL'：}} 401 28：SET {403 26：SEQUENCE {405 3：オブジェクト識別子のcommonName（2 5 4 3）410 19はPrintableString 'PolarsslテストEC CA'：}} ：}}} 431 9：[​​2] 00 C1 43 E2 7E 62 43 CC E8：}}}}}} 442 10：SEQUENCE {444 8：オブジェクト識別子ecdsaWithSHA256（1 2 840 10045 4 3 2）} 454 104：SEQUENCE {459 48：INTEGER：（a）65 0D 7B 20 83 A2 99 B9 A8 0F FC 8D EE 8F 3D：BB 70 4C 96 03 AC 8E 78 70 DDビット列は、{457 101は、カプセル化F2 0E A0 B2 16 CB：65 8E 1A C9 3F 2C 61 7E F8 3C EF AD 1C EE 36 20"
    },
    {
      "indent": 2,
      "text": "509 49: INTEGER : 00 9D F2 27 A6 D5 74 B8 24 AE E1 6A 3F 31 A1 CA : 54 2F 08 D0 8D EE 4F 0C 61 DF 77 78 7D B4 FD FC : 42 49 EE E5 B2 6A C2 CD 26 77 62 8E 28 7C 9E 57 : 45 : } : } : }",
      "ja": "509 49：INTEGER：00 9D F2 27 A6 D5 74 B8 24 AE E1 6A 3F 31 A1 CA：54 2F 08 D0 8D EE 4F 0C 61 DF 77 78 7D B4 FD FC：42 49 EE E5 B2 6A C2 CD 26 77 62図8E 28 7C 9E 57：45：}}}"
    },
    {
      "indent": 16,
      "text": "Figure 5: ASN.1-Based Certificate: Example",
      "ja": "図5：ASN.1ベースの証明書：例"
    },
    {
      "indent": 3,
      "text": "To include the certificate shown in Figure 5 in a TLS/DTLS Certificate message, it is prepended with a message header. This Certificate message header in our example is 0b 00 02 36 00 02 33 00 02 00 02 30, which indicates:",
      "ja": "TLS / DTLS Certificateメッセージにおいて、図5に示す証明書を含むように、それがメッセージヘッダで付加されます。この例では、この証明書メッセージのヘッダを示しており、0B 00 02 36 00 02 33 00 02 00 02 30です。"
    },
    {
      "indent": 3,
      "text": "Message Type: 0b -- 1-byte type field indicating a Certificate message",
      "ja": "メッセージタイプ：0B  -  Certificateメッセージを示す1バイトのタイプフィールド"
    },
    {
      "indent": 3,
      "text": "Length: 00 02 36 -- 3-byte length field indicating a 566-byte payload",
      "ja": "長さ：00 02 36から566バイトのペイロードを示す3バイトの長さフィールド"
    },
    {
      "indent": 3,
      "text": "Certificates Length: 00 02 33 -- 3-byte length field indicating 563 bytes for the entire certificates_list structure, which may contain multiple certificates. In our example, only one certificate is included.",
      "ja": "証明書の長さ：00 02 33  - 複数の証明書を含むことができる全体certificates_list構造のための563のバイトを示す3バイトの長さフィールド、。この例では、1つの証明書のみが含まれています。"
    },
    {
      "indent": 3,
      "text": "Certificate Length: 00 02 30 -- 3-byte length field indicating 560 bytes of the actual certificate following immediately afterwards. In our example, this is the certificate content with 30 82 02 .... 9E 57 45 shown in Figure 6.",
      "ja": "証明書の長さ：00 02 30  - 直後に次の実際の証明書の560のバイトを示す3バイトの長さフィールド。この例では、これは、30 82 02を持つ証明書の内容.... 57 45（e）は、図6に示すです。"
    },
    {
      "indent": 3,
      "text": "The hex encoding of the ASN.1-encoded certificate payload shown in Figure 5 leads to the following encoding.",
      "ja": "図5に示されているASN.1符号化された証明書ペイロードの進符号化は、次の符号化につながります。"
    },
    {
      "indent": 13,
      "text": "30 82 02 2C 30 82 01 B2  A0 03 02 01 02 02 01 0D\n30 0A 06 08 2A 86 48 CE  3D 04 03 02 30 3E 31 0B\n30 09 06 03 55 04 06 13  02 4E 4C 31 11 30 0F 06\n03 55 04 0A 13 08 50 6F  6C 61 72 53 53 4C 31 1C\n30 1A 06 03 55 04 03 13  13 50 6F 6C 61 72 73 73\n6C 20 54 65 73 74 20 45  43 20 43 41 30 1E 17 0D\n31 33 30 39 32 34 31 35  35 32 30 34 5A 17 0D 32\n33 30 39 32 32 31 35 35  32 30 34 5A 30 41 31 0B\n30 09 06 03 55 04 06 13  02 4E 4C 31 11 30 0F 06\n03 55 04 0A 13 08 50 6F  6C 61 72 53 53 4C 31 1F\n30 1D 06 03 55 04 03 13  16 50 6F 6C 61 72 53 53\n4C 20 54 65 73 74 20 43  6C 69 65 6E 74 20 32 30\n59 30 13 06 07 2A 86 48  CE 3D 02 01 06 08 2A 86\n48 CE 3D 03 01 07 03 42  00 04 57 E5 AE B1 73 DF\nD3 AC BB 93 B8 81 FF 12  AE EE E6 53 AC CE 55 53\nF6 34 0E CC 2E E3 63 25  0B DF 98 E2 F3 5C 60 36\n96 C0 D5 18 14 70 E5 7F  9F D5 4B 45 18 E5 B0 6C\nD5 5C F8 96 8F 87 70 A3  E4 C7 A3 81 9D 30 81 9A\n30 09 06 03 55 1D 13 04  02 30 00 30 1D 06 03 55\n1D 0E 04 16 04 14 7A 00  5F 86 64 FC E0 5D E5 11\n10 3B B2 E6 3B C4 26 3F  CF E2 30 6E 06 03 55 1D\n23 04 67 30 65 80 14 9D  6D 20 24 49 01 3F 2B CB\n78 B5 19 BC 7E 24 C9 DB  FB 36 7C A1 42 A4 40 30\n3E 31 0B 30 09 06 03 55  04 06 13 02 4E 4C 31 11\n30 0F 06 03 55 04 0A 13  08 50 6F 6C 61 72 53 53\n4C 31 1C 30 1A 06 03 55  04 03 13 13 50 6F 6C 61\n72 73 73 6C 20 54 65 73  74 20 45 43 20 43 41 82\n09 00 C1 43 E2 7E 62 43  CC E8 30 0A 06 08 2A 86\n48 CE 3D 04 03 02 03 68  00 30 65 02 30 4A 65 0D\n7B 20 83 A2 99 B9 A8 0F  FC 8D EE 8F 3D BB 70 4C\n96 03 AC 8E 78 70 DD F2  0E A0 B2 16 CB 65 8E 1A\nC9 3F 2C 61 7E F8 3C EF  AD 1C EE 36 20 02 31 00\n9D F2 27 A6 D5 74 B8 24  AE E1 6A 3F 31 A1 CA 54\n2F 08 D0 8D EE 4F 0C 61  DF 77 78 7D B4 FD FC 42\n49 EE E5 B2 6A C2 CD 26  77 62 8E 28 7C 9E 57 45",
      "raw": true
    },
    {
      "indent": 13,
      "text": "Figure 6: Hex Encoding of the Example Certificate",
      "ja": "図6：例証明書の六角エンコーディング"
    },
    {
      "indent": 3,
      "text": "Applying the SHA-256 hash function to the Certificate message, which starts with 0b 00 02 and ends with 9E 57 45, produces 0x086eefb4859adfe977defac494fff6b73033b4ce1f86b8f2a9fc0c6bf98605af.",
      "ja": "0B 00 02で始まり、9E 57 45で終了証明書メッセージにSHA-256ハッシュ関数を適用し、0x086eefb4859adfe977defac494fff6b73033b4ce1f86b8f2a9fc0c6bf98605afを生成します。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "We would like to thank the following persons for your detailed document reviews:",
      "ja": "私たちはあなたの詳細なドキュメントレビューのために、次の人に感謝したいと思います："
    },
    {
      "indent": 3,
      "text": "o Paul Wouters and Nikos Mavrogiannopoulos (December 2011)",
      "ja": "OポールWOUTERSとニコスMavrogiannopoulos（2011年12月）"
    },
    {
      "indent": 3,
      "text": "o Rob Stradling (February 2012)",
      "ja": "OロブStradling（2012年2月）"
    },
    {
      "indent": 3,
      "text": "o Ondrej Mikle (March 2012)",
      "ja": "オンドレイMikle（2012年3月）によります"
    },
    {
      "indent": 3,
      "text": "o Ilari Liusvaara, Adam Langley, and Eric Rescorla (July 2014)",
      "ja": "ヒラリーlisvaraああ、アダム・ラングレー、とエリックのreskarla（2014年7月）"
    },
    {
      "indent": 3,
      "text": "o Sean Turner (August 2014)",
      "ja": "Oショーン・ターナー（2014年8月）"
    },
    {
      "indent": 3,
      "text": "o Martin Thomson (August 2015)",
      "ja": "Oマーティン・トムソン（2015年8月）"
    },
    {
      "indent": 3,
      "text": "o Jouni Korhonen (November 2015)",
      "ja": "いいえJouni Korhonenない（2015年11月）"
    },
    {
      "indent": 3,
      "text": "o Dave Garrett (December 2015)",
      "ja": "Oデイブ・ギャレット（2015年12月）"
    },
    {
      "indent": 3,
      "text": "o Matt Miller (December 2015)",
      "ja": "Oマット・ミラー（2015年12月）"
    },
    {
      "indent": 3,
      "text": "o Anirudh Ramachandran (March 2016)",
      "ja": "O Anirudhラマチャンドラン（2016）"
    },
    {
      "indent": 3,
      "text": "We would also to thank Martin Thomson, Karthikeyan Bhargavan, Sankalp Bagaria, and Eric Rescorla for their feedback regarding the fingerprint calculation.",
      "ja": "我々はまた、フィンガープリント計算に関する彼らのフィードバックのためにマーティン・トムソン、カーティケヤンBhargavan、Sankalp Bagaria、そしてエリックレスコラに感謝するでしょう。"
    },
    {
      "indent": 3,
      "text": "Finally, we would like to thank the TLS working group chairs, Sean Turner and Joe Salowey, as well as the responsible Security Area Director, Stephen Farrell, for their support and their reviews.",
      "ja": "最後に、我々は彼らのサポートとそのレビューのために、TLSワーキンググループチェア、ショーン・ターナーとジョーSaloweyだけでなく、責任のセキュリティエリアディレクター、ステファン・ファレルに感謝したいと思います。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Stefan Santesson 3xA Security AB Forskningsbyn Ideon Lund 223 70 Sweden",
      "ja": "ステファンSantesson 3XAセキュリティABイデオンサイエンスパークルンド223 70スウェーデン"
    },
    {
      "indent": 3,
      "text": "Email: sts@aaa-sec.com",
      "ja": "メール：sts@aaa-sec.com"
    },
    {
      "indent": 3,
      "text": "Hannes Tschofenig ARM Ltd. Hall in Tirol 6060 Austria",
      "ja": "チロル6060オーストリアのハンネス・Tschofenig ARM社ホール"
    },
    {
      "indent": 3,
      "text": "Email: Hannes.tschofenig@gmx.net URI: http://www.tschofenig.priv.at",
      "ja": "メール：Hannes.tschofenig@gmx.net URI：http://www.tschofenig.priv.at"
    }
  ]
}