{
  "title": {
    "text": "RFC 7360 - Datagram Transport Layer Security (DTLS) as a Transport Layer for RADIUS",
    "ja": "RFC 7360 - RADIUSのためのトランスポート層としてデータグラムトランスポート層セキュリティ（DTLS）"
  },
  "number": 7360,
  "created_at": "2019-11-01 03:14:23.869787+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          A. DeKok\nRequest for Comments: 7360                                    FreeRADIUS\nCategory: Experimental                                    September 2014\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 16,
      "text": "Datagram Transport Layer Security (DTLS)\n    as a Transport Layer for RADIUS",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "The RADIUS protocol defined in RFC 2865 has limited support for authentication and encryption of RADIUS packets. The protocol transports data in the clear, although some parts of the packets can have obfuscated content. Packets may be replayed verbatim by an attacker, and client-server authentication is based on fixed shared secrets. This document specifies how the Datagram Transport Layer Security (DTLS) protocol may be used as a fix for these problems. It also describes how implementations of this proposal can coexist with current RADIUS systems.",
      "ja": "RFC 2865で定義されたRADIUSプロトコルは、RADIUSパケットの認証および暗号化のサポートが制限されています。パケットの一部を難読化コンテンツを有することができるがプロトコルは、明確にデータを搬送します。パケットは、攻撃者によって逐語的に再生することができる、およびクライアント・サーバ認証は、固定された共有秘密に基づいています。この文書では、データグラムトランスポート層セキュリティ（DTLS）プロトコルは、これらの問題の修正として使用することができる方法を指定します。また、この提案の実装は、現在のRADIUSシステムと共存できる方法について説明します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.",
      "ja": "このドキュメントはインターネット標準化過程仕様ではありません。それは、検査、実験的な実装、および評価のために公開されています。"
    },
    {
      "indent": 3,
      "text": "This document defines an Experimental Protocol for the Internet community. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "この文書は、インターネットコミュニティのためにExperimentalプロトコルを定義します。このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。 IESGによって承認されていないすべての文書がインターネットStandardのどんなレベルの候補です。 RFC 5741のセクション2を参照してください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7360.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7360で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2014 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2014 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................4\n   1.1. Terminology ................................................5\n   1.2. Requirements Language ......................................5\n   1.3. Document Status ............................................5\n2. Building on Existing Foundations ................................6\n   2.1. Changes to RADIUS ..........................................7\n   2.2. Similarities with RADIUS/TLS ...............................8\n        2.2.1. Changes from RADIUS/TLS to RADIUS/DTLS ..............8\n3. Interaction with RADIUS/UDP .....................................9\n   3.1. DTLS Port and Packet Types ................................10\n   3.2. Server Behavior ...........................................10\n4. Client Behavior ................................................11\n5. Session Management .............................................12\n   5.1. Server Session Management .................................12\n        5.1.1. Session Opening and Closing ........................13\n   5.2. Client Session Management .................................15\n6. Implementation Guidelines ......................................16\n   6.1. Client Implementations ....................................17\n   6.2. Server Implementations ....................................18\n7. Diameter Considerations ........................................18\n8. IANA Considerations ............................................18\n9. Implementation Status ..........................................18\n   9.1. Radsecproxy ...............................................19\n   9.2. jradius ...................................................19\n10. Security Considerations .......................................19\n   10.1. Crypto-Agility ...........................................20\n   10.2. Legacy RADIUS Security ...................................21\n   10.3. Resource Exhaustion ......................................22\n   10.4. Client-Server Authentication with DTLS ...................22\n   10.5. Network Address Translation ..............................24\n   10.6. Wildcard Clients .........................................24\n   10.7. Session Closing ..........................................25\n   10.8. Client Subsystems ........................................25\n11. References ....................................................26\n   11.1. Normative References .....................................26\n   11.2. Informative References ...................................27\nAcknowledgments ...................................................27",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The RADIUS protocol as described in [RFC2865], [RFC2866], [RFC5176], and others has traditionally used methods based on MD5 [RFC1321] for per-packet authentication and integrity checks. However, the MD5 algorithm has known weaknesses such as [MD5Attack] and [MD5Break]. As a result, some specifications, such as [RFC5176], have recommended using IPsec to secure RADIUS traffic.",
      "ja": "RADIUSプロトコル[RFC2865]に記載されているように、[RFC2866]、[RFC5176]、そして他のものは、伝統的にパケットごとの認証と完全性チェックのためにMD5 [RFC1321]に基づく方法を使用してきました。しかし、MD5アルゴリズムは、[MD5Break] [MD5Attack]等の弱点を知っています。その結果、[RFC5176]などの一部の仕様は、RADIUSトラフィックを保護するためにIPsecを使用して推奨しています。"
    },
    {
      "indent": 3,
      "text": "While RADIUS over IPsec has been widely deployed, there are difficulties with this approach. The simplest point against IPsec is that there is no straightforward way for an application to control or monitor the network security policies. That is, the requirement that the RADIUS traffic be encrypted and/or authenticated is implicit in the network configuration, and it cannot be enforced by the RADIUS application.",
      "ja": "IPsecのオーバーRADIUSは広く展開されてきたが、このアプローチには困難があります。 IPsecのに対して、最も簡単なポイントは、ネットワークのセキュリティポリシーを制御または監視するアプリケーションのための簡単な方法がないことです。これは、RADIUSトラフィックが暗号化および/または認証される要件は、ネットワーク構成に内在する、であり、それはRADIUSアプリケーションによって強制することはできません。"
    },
    {
      "indent": 3,
      "text": "This specification takes a different approach. We define a method for using DTLS [RFC6347] as a RADIUS transport protocol. This approach has the benefit that the RADIUS application can directly monitor and control the security policies associated with the traffic that it processes.",
      "ja": "この仕様は異なるアプローチを採用しています。我々は、RADIUSのトランスポートプロトコルとしてDTLS [RFC6347]を使用する方法を定義します。このアプローチは、RADIUSアプリケーションが直接、処理するトラフィックに関連付けられたセキュリティポリシーを監視および制御できるという利点を有します。"
    },
    {
      "indent": 3,
      "text": "Another benefit is that RADIUS over DTLS continues to be a UDP-based protocol. The change from RADIUS/UDP is largely to add DTLS support, and make any necessary related changes to RADIUS. This allows implementations to remain UDP based, without changing to a TCP architecture.",
      "ja": "もう一つの利点は、DTLSを超えるRADIUSはUDPベースのプロトコルであり続けるということです。 RADIUS / UDPからの変更は、主にDTLSサポートを追加し、RADIUSに必要なすべての関連する変更を加えることです。これは、実装がTCPアーキテクチャに変更せずに、UDPベースのままにすることができます。"
    },
    {
      "indent": 3,
      "text": "This specification does not, however, solve all of the problems associated with RADIUS/UDP. The DTLS protocol does not add reliable or in-order transport to RADIUS. DTLS also does not support fragmentation of application-layer messages, or of the DTLS messages themselves. This specification therefore shares with traditional RADIUS the issues of order, reliability, and fragmentation. These issues are dealt with in RADIUS/TCP [RFC6613] and RADIUS/TLS [RFC6614].",
      "ja": "この仕様は、しかし、RADIUS / UDPに関連する問題のすべてを解決していません。 DTLSプロトコルは、RADIUSに信頼できるか、インオーダーの輸送を追加しません。 DTLSはまた、アプリケーション層メッセージの、またはDTLSメッセージ自身の断片化をサポートしていません。この仕様は、したがって、伝統的なRADIUSでオーダー、信頼性、および断片化の問題を共有しています。これらの問題は、RADIUS / TCP [RFC6613]およびRADIUS / TLS [RFC6614]で扱われています。"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1. 用語"
    },
    {
      "indent": 3,
      "text": "This document uses the following terms:",
      "ja": "このドキュメントでは、次の用語を使用しています："
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS This term is a shorthand for \"RADIUS over DTLS\".",
      "ja": "RADIUS / DTLSこの用語は、「DTLSオーバーRADIUS」の省略形です。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS client This term refers both to RADIUS clients as defined in [RFC2865] and to Dynamic Authorization clients as defined in [RFC5176] that implement RADIUS/DTLS.",
      "ja": "[RFC5176]で定義されるように[RFC2865]及び動的認可クライアントに定義されるようなRADIUS / DTLSクライアントは、この用語は、RADIUSクライアントの両方を指すRADIUS / DTLSを実装します。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS server This term refers both to RADIUS servers as defined in [RFC2865] and to Dynamic Authorization servers as defined in [RFC5176] that implement RADIUS/DTLS.",
      "ja": "[RFC2865]およびRADIUS / DTLSを実装する[RFC5176]で定義されるように動的認可サーバーに定義されるようなRADIUS / DTLSサーバは、この用語は、RADIUSサーバの両方を指します。"
    },
    {
      "indent": 3,
      "text": "RADIUS/UDP RADIUS over UDP, as defined in [RFC2865].",
      "ja": "[RFC2865]で定義されるようにUDP上RADIUS / UDP RADIUS、。"
    },
    {
      "indent": 3,
      "text": "RADIUS/TLS RADIUS over TLS, as defined in [RFC6614].",
      "ja": "RADIUS / TLS上TLS RADIUS [RFC6614]で定義されます。"
    },
    {
      "indent": 3,
      "text": "silently discard This means that the implementation discards the packet without further processing.",
      "ja": "黙ってこれは実装がさらに処理せずにパケットを破棄することを意味捨てます。"
    },
    {
      "indent": 0,
      "text": "1.2. Requirements Language",
      "section_title": true,
      "ja": "1.2. 要件言語"
    },
    {
      "indent": 3,
      "text": "In this document, several words are used to signify the requirements of the specification. The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "このドキュメントでは、いくつかの単語は、仕様の要件を意味するために使用されています。キーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、 \"SHALL\"、 \"SHOULD\"、 \"ないもの\"、 \"推奨\" \"ない（SHOULD NOT）\"、 \"MAY\"、 \"推奨NOT\"、および「OPTIONAL 「本書では[RFC2119]で説明されるように解釈されるべきです。"
    },
    {
      "indent": 0,
      "text": "1.3. Document Status",
      "section_title": true,
      "ja": "1.3. 文書ステータス"
    },
    {
      "indent": 3,
      "text": "This document is an Experimental RFC.",
      "ja": "このドキュメントは、実験的なRFCです。"
    },
    {
      "indent": 3,
      "text": "It contains one of several approaches to address known cryptographic weaknesses of the RADIUS protocol, such as described in [RFC6614]. This specification does not fulfill all recommendations for an Authentication, Authorization, and Accounting (AAA) transport profile as per [RFC3539]; however, unlike [RFC6614], it is based on UDP and therefore does not have head-of-line blocking issues.",
      "ja": "このような[RFC6614]で説明されるようにRADIUSプロトコルの既知の暗号化の弱点に対処するいくつかの方法のいずれかを含んでいます。本明細書は、認証のためのすべての推奨事項を満たしていない、許可、アカウンティング（AAA）トランスポート・プロファイルの通り[RFC3539]。ただし、[RFC6614]とは異なり、それはUDPに基づいており、したがって、ヘッドオブラインブロッキングの問題を持っていません。"
    },
    {
      "indent": 3,
      "text": "If this specification is indeed selected for advancement to Standards Track, certificate verification options ([RFC6614], Section 2.3, point 2) will need to be refined.",
      "ja": "この仕様は、実際に標準化過程への進出のために選択されている場合は、証明書の検証オプション（[RFC6614]、セクション2.3、ポイント2）は、洗練する必要があります。"
    },
    {
      "indent": 3,
      "text": "Another experimental characteristic of this specification is the question of key management between RADIUS/DTLS peers. RADIUS/UDP only allowed for manual key management, i.e., distribution of a shared secret between a client and a server. RADIUS/DTLS allows manual distribution of long-term proofs of peer identity, by using TLS-PSK ciphersuites. RADIUS/DTLS also allows the use of X.509 certificates in a PKIX infrastructure. It remains to be seen if one of these methods will prevail or if both will find their place in real-life deployments. The authors can imagine pre-shared keys (PSKs) to be popular in small-scale deployments (Small Office, Home Office (SOHO) or isolated enterprise deployments) where scalability is not an issue and the deployment of a Certification Authority (CA) is considered too much of a hassle; however, the authors can also imagine large roaming consortia to make use of PKIX. Readers of this specification are encouraged to read the discussion of key management issues within [RFC6421] as well as [RFC4107].",
      "ja": "この仕様の別の実験の特徴は、RADIUS / DTLSピア間のキー管理の問題です。 RADIUS / UDPは手動鍵管理、すなわち、クライアントとサーバ間の共有秘密の配布を可能にしました。 RADIUS / DTLSは、TLS-PSKの暗号スイートを使用して、ピア・アイデンティティの長期証明の手動配布を可能にします。 RADIUS / DTLSもPKIXインフラでX.509証明書を使用することができます。これらの方法のいずれかが勝つかまたは両方が現実の展開で自分の場所を見つけるかどうだろうかどうかは見守らなければなりません。著者は、スケーラビリティが問題と認証局（CA）の展開ではない小規模な展開（スモールオフィス、ホームオフィス（SOHO）または単離されたエンタープライズ展開）で人気が事前共有鍵（PSKsを）されて想像することができます口論のあまり考えられ;しかし、著者らはまた、PKIXを利用するために大規模なローミングコンソーシアムを想像することができます。この仕様書の読者は、鍵管理[RFC6421]内の問題だけでなく、[RFC4107]の議論を読むことをお勧めします。"
    },
    {
      "indent": 3,
      "text": "It has yet to be decided whether this approach is to be chosen for Standards Track. One key aspect to judge whether the approach is usable on a large scale is by observing the uptake, usability, and operational behavior of the protocol in large-scale, real-life deployments.",
      "ja": "これは、このアプローチが標準化過程のために選択する必要があるかどうかを決定するためには至っていません。アプローチが大規模に利用可能であるかどうかを判断する一つの重要な側面は、取り込み、使いやすさ、および大規模な、現実の展開におけるプロトコルの動作挙動を観察することです。"
    },
    {
      "indent": 0,
      "text": "2. Building on Existing Foundations",
      "section_title": true,
      "ja": "既存の基礎2.ビル"
    },
    {
      "indent": 3,
      "text": "Adding DTLS as a RADIUS transport protocol requires a number of changes to systems implementing standard RADIUS. This section outlines those changes, and defines new behaviors necessary to implement DTLS.",
      "ja": "RADIUSトランスポートプロトコルとしてDTLSを追加すると、標準のRADIUSを実装するシステムの変更の数を必要とします。このセクションでは、これらの変更の概要を説明し、DTLSを実装するために必要な新しい動作を定義します。"
    },
    {
      "indent": 0,
      "text": "2.1. Changes to RADIUS",
      "section_title": true,
      "ja": "2.1.  RADIUSへの変更"
    },
    {
      "indent": 3,
      "text": "The RADIUS packet format is unchanged from [RFC2865], [RFC2866], and [RFC5176]. Specifically, all of the following portions of RADIUS MUST be unchanged when using RADIUS/DTLS:",
      "ja": "RADIUSパケットフォーマットは、[RFC2865]、[RFC2866]及び[RFC5176]と変わりません。 RADIUS / DTLSを使用する場合、具体的に、RADIUSの以下の部分の全ては不変でなければなりません。"
    },
    {
      "indent": 6,
      "text": "* Packet format * Permitted codes * Request Authenticator calculation * Response Authenticator calculation * Minimum packet length * Maximum packet length * Attribute format * Vendor-Specific Attribute (VSA) format * Permitted data types * Calculations of dynamic attributes such as CHAP-Challenge, or Message-Authenticator. * Calculation of \"obfuscated\" attributes such as User-Password and Tunnel-Password.",
      "ja": "*パケットフォーマット*許可コード*要求認証算出*レスポンス認証計算*最小パケット長*最大パケット長*属性フォーマット*ベンダー固有の属性（VSA）フォーマット*許可データ型*例えばCHAPチャレンジなどの動的属性の計算、又はメッセージ認証。 *「難読化」の計算は、このようなユーザーのパスワードやトンネル、パスワードなどの属性。"
    },
    {
      "indent": 3,
      "text": "In short, the application creates a RADIUS packet via the usual methods, and then instead of sending it over a UDP socket, sends the packet to a DTLS layer for encapsulation. DTLS then acts as a transport layer for RADIUS: hence, the names \"RADIUS/UDP\" and \"RADIUS/DTLS\".",
      "ja": "つまり、アプリケーションは、通常の方法を介してRADIUSパケットを作成し、代わりに、UDPソケットを介して送信する、カプセル化のためDTLS層にパケットを送信します。したがって、名前は「RADIUS / UDP」および「RADIUS / DTLS」：DTLSは、RADIUSのためのトランスポート層として機能します。"
    },
    {
      "indent": 3,
      "text": "The requirement that RADIUS remain largely unchanged ensures the simplest possible implementation and widest interoperability of this specification.",
      "ja": "RADIUSが大きく変わらない要件は、可能な限り単純な実装と、この仕様の広い相互運用性を保証します。"
    },
    {
      "indent": 3,
      "text": "We note that the DTLS encapsulation of RADIUS means that RADIUS packets have an additional overhead due to DTLS. Implementations MUST support sending and receiving encapsulated RADIUS packets of 4096 octets in length, with a corresponding increase in the maximum size of the encapsulated DTLS packets. This larger packet size may cause the packet to be larger than the Path MTU (PMTU), where a RADIUS/UDP packet may be smaller. See Section 5.2, below, for more discussion.",
      "ja": "私たちは、RADIUSのDTLSのカプセル化は、RADIUSパケットはDTLSのために追加のオーバーヘッドを有することを意味することに注意してください。実装は、カプセル化されたDTLSパケットの最大サイズの増加に対応して、長さが4096オクテットのカプセル化されたRADIUSパケットを送信及び受信をサポートしなければなりません。これより大きなパケットサイズは、パケットがRADIUS / UDPパケットは小さくても良いパスMTU（PMTU）、より大きいことが原因となることがあります。より多くの議論のために、以下のセクション5.2を参照してください。"
    },
    {
      "indent": 3,
      "text": "The only changes made from RADIUS/UDP to RADIUS/DTLS are the following two items:",
      "ja": "RADIUSとRADIUS / UDPから作られた変更のみ/ DTLSは、次の2つの項目のとおりです。"
    },
    {
      "indent": 3,
      "text": "(1) The Length checks defined in [RFC2865], Section 3, MUST use the length of the decrypted DTLS data instead of the UDP packet length. They MUST treat any decrypted DTLS data octets outside the range of the Length field as padding and ignore it on reception.",
      "ja": "（1）[RFC2865]で定義された長さをチェックし、第3節では、復号化DTLSデータの代わりにUDPパケット長の長さを使用しなければなりません。彼らは、パディングとして長さフィールドの範囲外の復号化されたDTLSデータオクテットを治療し、受信時に、それを無視しなければなりません。"
    },
    {
      "indent": 3,
      "text": "(2) The shared secret used to compute the MD5 integrity checks and the attribute encryption MUST be \"radius/dtls\".",
      "ja": "（2）MD5整合性チェックと属性の暗号化を計算するために使用される共有秘密は、「半径/ DTLS」でなければなりません。"
    },
    {
      "indent": 3,
      "text": "All other aspects of RADIUS are unchanged.",
      "ja": "RADIUSの他のすべての側面が変更されていません。"
    },
    {
      "indent": 0,
      "text": "2.2. Similarities with RADIUS/TLS",
      "section_title": true,
      "ja": "2.2.  RADIUS / TLSとの類似点"
    },
    {
      "indent": 3,
      "text": "While this specification can be thought of as RADIUS/TLS over UDP instead of the Transmission Control Protocol (TCP), there are some differences between the two methods. The bulk of [RFC6614] applies to this specification, so we do not repeat it here.",
      "ja": "この仕様は、UDP上のRADIUS / TLSの代わりに、伝送制御プロトコル（TCP）として考えることができますが、2つの方法の間、いくつかの違いがあります。 [RFC6614]の大部分は、この仕様に適用されるので、私たちはここでそれを繰り返さないでください。"
    },
    {
      "indent": 3,
      "text": "This section explains the differences between RADIUS/TLS and RADIUS/DTLS, as semantic \"patches\" to [RFC6614]. The changes are as follows:",
      "ja": "このセクションでは、[RFC6614]にセマンティック「パッチ」として、RADIUS / TLSとRADIUS / DTLSの違いについて説明します。以下のように変更点は次のとおりです。"
    },
    {
      "indent": 6,
      "text": "* We replace references to \"TCP\" with \"UDP\"",
      "ja": "*私たちは、「UDP」で「TCP」への参照を交換してください"
    },
    {
      "indent": 6,
      "text": "* We replace references to \"RADIUS/TLS\" with \"RADIUS/DTLS\"",
      "ja": "*私たちは、 \"RADIUS / DTLS\" での \"RADIUS / TLS\" の参照を置き換えます"
    },
    {
      "indent": 6,
      "text": "* We replace references to \"TLS\" with \"DTLS\"",
      "ja": "*私たちは、「DTLS」と「TLS」への参照を交換してください"
    },
    {
      "indent": 3,
      "text": "Those changes are sufficient to cover the majority of the differences between the two specifications. The next section reviews some more detailed changes from [RFC6614], giving additional commentary only where necessary.",
      "ja": "これらの変更は、2つの仕様間の相違の大部分をカバーするのに十分なものです。次のセクションでは、必要な場合にのみ、追加のコメントを与え、[RFC6614]からいくつかのより詳細な変更を検討します。"
    },
    {
      "indent": 0,
      "text": "2.2.1. Changes from RADIUS/TLS to RADIUS/DTLS",
      "section_title": true,
      "ja": "2.2.1.  RADIUS / TLSのRADIUS / DTLSの変更"
    },
    {
      "indent": 3,
      "text": "This section describes how particular sections of [RFC6614] apply to RADIUS/DTLS.",
      "ja": "このセクションでは、特定のセクションでは、[RFC6614]はRADIUS / DTLSにどのように適用されるかについて説明します。"
    },
    {
      "indent": 3,
      "text": "Section 2.1 applies to RADIUS/DTLS, with the exception that the RADIUS/DTLS port is UDP/2083.",
      "ja": "2.1節は、RADIUS / DTLSポートは/ 2083 UDPであることを除いて、RADIUS / DTLSに適用されます。"
    },
    {
      "indent": 3,
      "text": "Section 2.2 applies to RADIUS/DTLS. Servers and clients need to be pre-configured to use RADIUS/DTLS for a given endpoint.",
      "ja": "2.2節は、RADIUS / DTLSに適用されます。サーバとクライアントは、特定のエンドポイントのためにRADIUS / DTLSを使用するように事前に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "Most of Section 2.3 applies also to RADIUS/DTLS. Item (1) should be interpreted as applying to DTLS session initiation, instead of TCP connection establishment. Item (2) applies, except for the recommendation that implementations \"SHOULD\" support TLS_RSA_WITH_RC4_128_SHA. This recommendation is a historical artifact of RADIUS/TLS, and it does not apply to RADIUS/DTLS. Item (3) applies to RADIUS/DTLS. Item (4) applies, except that the fixed shared secret is \"radius/dtls\", as described above.",
      "ja": "2.3節の大半は、RADIUS / DTLSにも適用されます。項目（1）に代えて、TCP接続確立の、DTLSセッション開始に適用されると解釈されるべきです。項目（2）は、実装がTLS_RSA_WITH_RC4_128_SHAをサポートする「べきである」推薦を除き、適用されます。この勧告は、RADIUS / TLSの歴史的な成果物であり、それはRADIUS / DTLSには適用されません。項目は（3）RADIUS / DTLSに適用されます。項目（4）上記のように固定された共有秘密は、「半径/ DTLS」であることを除いて、適用されます。"
    },
    {
      "indent": 3,
      "text": "Section 2.4 applies to RADIUS/DTLS. Client identities SHOULD be determined from DTLS parameters, instead of relying solely on the source IP address of the packet.",
      "ja": "2.4節は、RADIUS / DTLSに適用されます。クライアントのアイデンティティではなく、パケットの送信元IPアドレスのみに頼るので、DTLSパラメータから決定されるべきです。"
    },
    {
      "indent": 3,
      "text": "Section 2.5 does not apply to RADIUS/DTLS. The relationship between RADIUS packet codes and UDP ports in RADIUS/DTLS is unchanged from RADIUS/UDP.",
      "ja": "セクション2.5は、RADIUS / DTLSには適用されません。 RADIUS / DTLSにおけるRADIUSパケットコードとUDPポートとの間の関係は、RADIUS / UDPと変わりません。"
    },
    {
      "indent": 3,
      "text": "Sections 3.1, 3.2, and 3.3 apply to RADIUS/DTLS.",
      "ja": "セクション3.1、3.2、および3.3は、RADIUS / DTLSに適用されます。"
    },
    {
      "indent": 3,
      "text": "Section 3.4 item (1) does not apply to RADIUS/DTLS. Each RADIUS packet is encapsulated in one DTLS packet, and there is no \"stream\" of RADIUS packets inside of a TLS session. Implementors MUST enforce the requirements of [RFC2865], Section 3, for the RADIUS Length field, using the length of the decrypted DTLS data for the checks. This check replaces the RADIUS method of using the Length field from the UDP packet.",
      "ja": "3.4節の項目（1）RADIUS / DTLSには適用されません。各RADIUSパケットは1つのDTLSパケットにカプセル化され、およびTLSセッションの内部のRADIUSパケットのない「流れ」はありません。実装者は、チェックのために復号化DTLSデータの長さを使用して、RADIUS Lengthフィールドは[RFC2865]、セクション3の要件を適用しなければなりません。このチェックは、UDPパケットの長さフィールドを使用するRADIUS方式を置き換えます。"
    },
    {
      "indent": 3,
      "text": "Section 3.4 items (2), (3), (4), and (5) apply to RADIUS/DTLS.",
      "ja": "セクション3.4アイテム（2）、（3）、（4）、（5）RADIUS / DTLSに適用されます。"
    },
    {
      "indent": 3,
      "text": "Section 4 does not apply to RADIUS/DTLS. Protocol compatibility considerations are defined in this document.",
      "ja": "第4節では、RADIUS / DTLSには適用されません。プロトコルの互換性の考慮事項は、この文書で定義されています。"
    },
    {
      "indent": 3,
      "text": "Section 6 applies to RADIUS/DTLS.",
      "ja": "第6節は、RADIUS / DTLSに適用されます。"
    },
    {
      "indent": 0,
      "text": "3. Interaction with RADIUS/UDP",
      "section_title": true,
      "ja": "RADIUS / UDP 3.相互作用"
    },
    {
      "indent": 3,
      "text": "Transitioning to DTLS is a process that needs to be done carefully. A poorly handled transition is complex for administrators and potentially subject to security downgrade attacks. It is not sufficient to just disable RADIUS/UDP and enable RADIUS/DTLS. RADIUS has no provisions for protocol negotiation, so simply disabling RADIUS/UDP would result in timeouts, lost traffic, and network instabilities.",
      "ja": "DTLSへの移行は慎重に行う必要があるプロセスです。悪い扱いの移行は、管理者のための複雑なセキュリティダウングレード攻撃に対して潜在的に対象となります。ちょうどRADIUS / UDPを無効にし、RADIUS / DTLSを有効にするには十分ではありません。 RADIUSプロトコルのネゴシエーションのための規定を持っていないので、単純にRADIUS / UDPを無効にすると、タイムアウトにつながる、トラフィックを失い、ネットワークの不安定性。"
    },
    {
      "indent": 3,
      "text": "The end result of this specification is that nearly all RADIUS/UDP implementations should transition to using a secure alternative. In some cases, RADIUS/UDP may remain where IPsec is used as a transport, or where implementation and/or business reasons preclude a change.",
      "ja": "本明細書の最終的な結果は、ほとんどすべてのRADIUS / UDP実装は、セキュアな代替手段を使用して移行する必要があることです。 IPsecは、トランスポート、またはどこ実装および/またはビジネス上の理由で変更を妨げるとして使用されるいくつかのケースでは、RADIUS / UDPが残ることがあります。"
    },
    {
      "indent": 3,
      "text": "However, we do not recommend long-term use of RADIUS/UDP outside of isolated and secure networks.",
      "ja": "しかし、我々は孤立し、安全なネットワークの外にRADIUS / UDPの長期使用をお勧めしません。"
    },
    {
      "indent": 3,
      "text": "This section describes how clients and servers should use RADIUS/DTLS, and how it interacts with RADIUS/UDP.",
      "ja": "このセクションでは、クライアントとサーバは、RADIUS / DTLSを使用する方法について説明し、それはRADIUS / UDPと対話する方法。"
    },
    {
      "indent": 0,
      "text": "3.1. DTLS Port and Packet Types",
      "section_title": true,
      "ja": "3.1.  DTLSポートおよびパケットタイプ"
    },
    {
      "indent": 3,
      "text": "The default destination port number for RADIUS/DTLS is UDP/2083. There are no separate ports for authentication, accounting, and dynamic authorization changes. The source port is arbitrary. The text in [RFC6614], Section 3.4, describes issues surrounding the use of one port for multiple packet types. We recognize that implementations may allow the use of RADIUS/DTLS over non-standard ports. In that case, the references to UDP/2083 in this document should be read as applying to any port used for transport of RADIUS/DTLS traffic.",
      "ja": "RADIUS / DTLSのデフォルトの宛先ポート番号は、/ 2083 UDPです。認証、アカウンティング、および動的な許可の変更のための別のポートがありません。送信元ポートは任意です。 [RFC6614]、セクション3.4、内のテキストは、複数のパケットタイプのための1つのポートの使用を取り巻く問題について説明します。私たちは、実装が非標準ポート経由RADIUS / DTLSの使用を許可できることを認識する。その場合には、この文書に記載されているUDP / 2083への参照は、RADIUS / DTLSトラフィックの輸送のために使用されるすべてのポートに適用されると読まれるべきです。"
    },
    {
      "indent": 0,
      "text": "3.2. Server Behavior",
      "section_title": true,
      "ja": "3.2. サーバーの動作"
    },
    {
      "indent": 3,
      "text": "When a server receives packets on UDP/2083, all packets MUST be treated as being DTLS. RADIUS/UDP packets MUST NOT be accepted on this port.",
      "ja": "サーバはUDP / 2083上のパケットを受信すると、すべてのパケットはDTLSとして扱わなければなりません。 RADIUS / UDPパケットがこのポートで受け入れてはなりません。"
    },
    {
      "indent": 3,
      "text": "Servers MUST NOT accept DTLS packets on the old RADIUS/UDP ports. Early versions of this specification permitted this behavior. It is forbidden here, as it depended on behavior in DTLS that may change without notice.",
      "ja": "サーバーは古いRADIUS / UDPポート上のDTLSのパケットを受け入れてはいけません。この仕様の初期のバージョンでは、この動作を可能にしました。それは予告なく変更される場合がありDTLSに行動に依存していたとして、それは、ここでは禁止されています。"
    },
    {
      "indent": 3,
      "text": "Servers MUST authenticate clients. RADIUS is designed to be used by mutually trusted systems. Allowing anonymous clients would ensure privacy for RADIUS/DTLS traffic, but would negate all other security aspects of the protocol.",
      "ja": "サーバはクライアントを認証しなければなりません。 RADIUSは、相互に信頼のシステムで使用されるように設計されています。許可匿名クライアントは、RADIUS / DTLSトラフィックのプライバシーを確​​保しますが、プロトコルの他のすべてのセキュリティの側面を否定するでしょう。"
    },
    {
      "indent": 3,
      "text": "As RADIUS has no provisions for capability signaling, there is no way for a server to indicate to a client that it should transition to using DTLS. This action has to be taken by the administrators of the two systems, using a method other than RADIUS. This method will likely be out of band, or manual configuration will need to be used.",
      "ja": "RADIUSは、能力のシグナリングのための規定を持っていないとして、それはDTLSを使用してに移行すべきであることをクライアントに指示するには、サーバーのための方法はありません。このアクションは、RADIUS以外の方法を使用して、2つのシステムの管理者が注意しなければなりません。この方法は、可能性の高い帯域外となります、または手動構成が使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Some servers maintain a list of allowed clients per destination port. Others maintain a global list of clients that are permitted to send packets to any port. Where a client can send packets to multiple ports, the server MUST maintain a \"DTLS Required\" flag per client.",
      "ja": "一部のサーバーでは、宛先ポートごとに許可されたクライアントのリストを維持します。その他には、任意のポートにパケットを送信することが許可されているクライアントのグローバルなリストを維持します。クライアントが複数のポートにパケットを送信できる場合は、サーバーは、クライアントごとに「DTLS必要」フラグを維持しなければなりません。"
    },
    {
      "indent": 3,
      "text": "This flag indicates whether or not the client is required to use DTLS. When set, the flag indicates that the only traffic accepted from the client is over UDP/2083. When packets are received from a client on non-DTLS ports, for which DTLS is required, the server MUST silently discard these packets, as there is no RADIUS/UDP shared secret available.",
      "ja": "このフラグは、クライアントがDTLSを使用するために必要かどうかを示します。設定した場合、フラグは、クライアントから受け入れたトラフィックのみが/ 2083 UDPの上にあることを示しています。パケットはDTLSが必要とされている非DTLSポート、上のクライアントから受信されると何のRADIUS / UDPがないので、サーバは静かに、これらのパケットを捨てなければなりません利用できる共有秘密。"
    },
    {
      "indent": 3,
      "text": "This flag will often be set by an administrator. However, if a server receives DTLS traffic from a client, it SHOULD notify the administrator that DTLS is available for that client. It MAY mark the client as \"DTLS Required\".",
      "ja": "このフラグは、多くの場合、管理者によって設定されます。サーバはクライアントからのDTLSトラフィックを受信した場合しかし、それはDTLSはそのクライアントのために利用可能である管理者に通知する必要があります。それは「DTLS必要」としてクライアントにマークを付けることができます。"
    },
    {
      "indent": 3,
      "text": "It is RECOMMENDED that servers support the following Perfect Forward Secrecy (PFS) ciphersuites:",
      "ja": "サーバは、以下の完全転送秘密（PFS）の暗号スイートをサポートすることをお勧めします。"
    },
    {
      "indent": 6,
      "text": "o TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
      "ja": "O TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "indent": 6,
      "text": "o TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
      "ja": "O TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "indent": 3,
      "text": "Allowing RADIUS/UDP and RADIUS/DTLS from the same client exposes the traffic to downbidding attacks and is NOT RECOMMENDED.",
      "ja": "同じクライアントからのRADIUS / UDPおよびRADIUS / DTLSを許可すると、攻撃をdownbiddingへのトラフィックを公開し、推奨されません。"
    },
    {
      "indent": 0,
      "text": "4. Client Behavior",
      "section_title": true,
      "ja": "4.クライアントの動作"
    },
    {
      "indent": 3,
      "text": "When a client sends packets to the assigned RADIUS/DTLS port, all packets MUST be DTLS. RADIUS/UDP packets MUST NOT be sent to this port.",
      "ja": "クライアントが割り当てられたRADIUS / DTLSポートにパケットを送信すると、すべてのパケットはDTLSでなければなりません。 RADIUS / UDPパケットがこのポートに送ってはいけません。"
    },
    {
      "indent": 3,
      "text": "Clients MUST authenticate themselves to servers via credentials that are unique to each client.",
      "ja": "クライアントは、クライアントごとに固有のものである資格情報を経由してサーバに自分自身を認証しなければなりません。"
    },
    {
      "indent": 3,
      "text": "It is RECOMMENDED that clients support the following PFS ciphersuites:",
      "ja": "クライアントは、次のPFSの暗号スイートをサポートすることをお勧めします。"
    },
    {
      "indent": 6,
      "text": "o TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
      "ja": "O TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "indent": 6,
      "text": "o TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
      "ja": "O TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS clients SHOULD NOT probe servers to see if they support DTLS transport. Instead, clients SHOULD use DTLS as a transport layer only when administratively configured. If a client is configured to use DTLS and the server appears to be unresponsive, the client MUST NOT fall back to using RADIUS/UDP. Instead, the client should treat the server as being down.",
      "ja": "RADIUS / DTLSクライアントは、DTLSトランスポートをサポートするかどうかを確認するために、サーバを調査すべきではありません。代わりに、クライアントは、管理上設定のみトランスポート層としてDTLSを使用すべきです。クライアントは、DTLSを使用するように設定し、サーバーが応答しないように見えるされている場合は、クライアントは、RADIUS / UDPを使用するようにフォールバックしてはなりません。代わりに、クライアントがダウンしているように、サーバーを扱う必要があります。"
    },
    {
      "indent": 3,
      "text": "RADIUS clients often had multiple independent RADIUS implementations and/or processes that originate packets. This practice was simple to implement, but the result is that each independent subsystem must independently discover network issues or server failures. It is therefore RECOMMENDED that clients with multiple internal RADIUS sources use a local proxy as described in Section 6.1, below.",
      "ja": "RADIUSクライアントは、多くの場合、複数の独立したRADIUSの実装および/またはパケットを発信プロセスを持っていました。この方法は、実装が簡単だったが、結果は、それぞれ独立したサブシステムが独立したネットワークの問題やサーバーの障害を発見しなければならないということです。したがって、セクション6.1で説明したように、複数の内部RADIUSソースとクライアントは、以下、ローカルプロキシを使用することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "Clients may implement \"pools\" of servers for fail-over or load-balancing. These pools SHOULD NOT mix RADIUS/UDP and RADIUS/DTLS servers.",
      "ja": "クライアントは、フェイルオーバーや負荷分散のためのサーバーの「プール」を実装することができます。これらのプールは、RADIUS / UDPおよびRADIUS / DTLSサーバを混在させることはできません。"
    },
    {
      "indent": 0,
      "text": "5. Session Management",
      "section_title": true,
      "ja": "5.セッション管理"
    },
    {
      "indent": 3,
      "text": "Where [RFC6614] can rely on the TCP state machine to perform session tracking, this specification cannot. As a result, implementations of this specification may need to perform session management of the DTLS session in the application layer. This section describes logically how this tracking is done. Implementations may choose to use the method described here, or another, equivalent method.",
      "ja": "[RFC6614]はセッショントラッキングを実行するためにTCPステート・マシンに頼ることができる場合には、この仕様はできません。結果として、この仕様の実装は、アプリケーション層でDTLSセッションのセッション管理を実行する必要があるかもしれません。このセクションでは、このトラッキングが行われている論理的方法を説明します。実装は、ここで説明する方法、または他の同等の方法を使用することもできます。"
    },
    {
      "indent": 3,
      "text": "We note that [RFC5080], Section 2.2.2, already mandates a duplicate detection cache. The session tracking described below can be seen as an extension of that cache, where entries contain DTLS sessions instead of RADIUS/UDP packets.",
      "ja": "私たちは、[RFC5080]、セクション2.2.2は、すでに重複検出キャッシュを義務付けていることに注意してください。以下に説明するセッショントラッキングエントリはなくRADIUS / UDPパケットのDTLSセッションを含有するキャッシュの拡張とみなすことができます。"
    },
    {
      "indent": 3,
      "text": "[RFC5080], Section 2.2.2, describes how duplicate RADIUS/UDP requests result in the retransmission of a previously cached RADIUS/UDP response. Due to DTLS sequence window requirements, a server MUST NOT retransmit a previously sent DTLS packet. Instead, it should cache the RADIUS response packet, and re-process it through DTLS to create a new RADIUS/DTLS packet, every time it is necessary to retransmit a RADIUS response.",
      "ja": "[RFC5080]、セクション2.2.2は、RADIUS / UDP要求が以前にキャッシュされたRADIUS / UDP応答の再送信につながる方法を重複して説明しています。 DTLSシーケンスウィンドウの要件のため、サーバーは以前に送られたDTLSパケットを再送してはなりません。代わりに、それは、RADIUS応答を再送することが必要であるたびに新しいRADIUS / DTLSパケットを作成するためにDTLSを通じて再プロセス、それをRADIUS応答パケットをキャッシュし、必要があります。"
    },
    {
      "indent": 0,
      "text": "5.1. Server Session Management",
      "section_title": true,
      "ja": "5.1. サーバーのセッション管理"
    },
    {
      "indent": 3,
      "text": "A RADIUS/DTLS server MUST track ongoing DTLS sessions for each, based on the following 4-tuple:",
      "ja": "RADIUS / DTLSサーバは、以下の4つ組に基づいて、それぞれのための継続的なDTLSセッションを追跡しなければなりません。"
    },
    {
      "indent": 6,
      "text": "* source IP address * source port * destination IP address * destination port",
      "ja": "*送信元IPアドレス*送信元ポート*宛先IPアドレス*宛先ポート"
    },
    {
      "indent": 3,
      "text": "Note that this 4-tuple is independent of IP address version (IPv4 or IPv6).",
      "ja": "この4タプルは、IPアドレスバージョン（IPv4またはIPv6）とは無関係であることに留意されたいです。"
    },
    {
      "indent": 3,
      "text": "Each 4-tuple points to a unique session entry, which usually contains the following information:",
      "ja": "通常、次の情報が含まれて一意のセッションエントリ、各4タプル点："
    },
    {
      "indent": 3,
      "text": "DTLS Session Any information required to maintain and manage the DTLS session.",
      "ja": "DTLSセッションDTLSセッションを維持し、管理するために必要なすべての情報。"
    },
    {
      "indent": 3,
      "text": "Last Traffic A variable containing a timestamp that indicates when this session last received valid traffic. If \"Last Traffic\" is not used, this variable may not exist.",
      "ja": "最終トラフィックこのセッションは、最後の有効なトラフィックを受け取ったときに示すタイムスタンプを含む変数。 「最後のトラフィックは、」使用されていない場合は、この変数が存在しない場合があります。"
    },
    {
      "indent": 3,
      "text": "DTLS Data An implementation-specific variable that may contain information about the active DTLS session. This variable may be empty or nonexistent.",
      "ja": "DTLSデータアクティブなDTLSセッションに関する情報が含まれていてもよい実装固有の変数。この変数は、空または存在しないかもしれません。"
    },
    {
      "indent": 6,
      "text": "This data will typically contain information such as idle timeouts, session lifetimes, and other implementation-specific data.",
      "ja": "このデータは、通常、アイドルタイムアウト、セッション寿命、および他の実装固有のデータなどの情報が含まれています。"
    },
    {
      "indent": 0,
      "text": "5.1.1. Session Opening and Closing",
      "section_title": true,
      "ja": "5.1.1. セッション開閉"
    },
    {
      "indent": 3,
      "text": "Session tracking is subject to Denial-of-Service (DoS) attacks due to the ability of an attacker to forge UDP traffic. RADIUS/DTLS servers SHOULD use the stateless cookie tracking technique described in [RFC6347], Section 4.2.1. DTLS sessions SHOULD NOT be tracked until a ClientHello packet has been received with an appropriate Cookie value. Server implementation SHOULD have a way of tracking DTLS sessions that are partially set up. Servers MUST limit both the number and impact on resources of partial sessions.",
      "ja": "セッショントラッキングは、UDPトラフィックを偽造する攻撃者の能力に起因するサービス拒否（DoS）攻撃の対象となります。 RADIUS / DTLSサーバは[RFC6347]で説明ステートレスクッキー追跡技術、セクション4.2.1を使用すべきです。 ClientHelloパケットが適切なクッキー値で受信されるまでDTLSセッションが追跡されるべきではありません。サーバーの実装は、部分的に設定されているDTLSセッションを追跡する方法を持っているべきです。サーバーは、数と部分セッションのリソースへの影響の両方を制限しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Sessions (both 4-tuple and entry) MUST be deleted when a TLS Closure Alert ([RFC5246], Section 7.2.1) or a fatal TLS Error Alert ([RFC5246], Section 7.2.2) is received. When a session is deleted due to it failing security requirements, the DTLS session MUST be closed, any TLS session resumption parameters for that session MUST be discarded, and all tracking information MUST be deleted.",
      "ja": "TLS閉鎖アラート（[RFC5246]、セクション7.2.1）、または致命的なTLSエラーアラート（[RFC5246]、セクション7.2.2）を受信したときにセッション（4タプルとエントリの両方）を削除しなければなりません。セッションがセキュリティ要件を失敗により、それに削除された場合、DTLSセッションを閉じなければならない、そのセッションのすべてのTLSセッション再開パラメータを捨てなければなりませんし、すべての追跡情報を削除する必要があります。"
    },
    {
      "indent": 3,
      "text": "Sessions MUST also be deleted when a RADIUS packet fails validation due to a packet being malformed, or when it has an invalid Message-Authenticator or invalid Request Authenticator. There are other cases when the specifications require that a packet received via a DTLS session be \"silently discarded\". In those cases, implementations MAY delete the underlying session as described above. There are few reasons to communicate with a Network Access Server (NAS) that is not implementing RADIUS.",
      "ja": "RADIUSパケットが原因不正な形式中のパケットに検証が失敗したときのセッションも削除されなければならない、またはそれが無効なメッセージ・オーセンティケータまたは無効な要求認証を持っている場合。仕様はDTLSセッションを介して受信したパケットは、「黙って破棄」することを必要とする場合、他のケースがあります。上記のような場合には、実装は、基礎となるセッションを削除する場合があります。 RADIUSを実装していないネットワークアクセスサーバ（NAS）と通信するために、いくつかの理由があります。"
    },
    {
      "indent": 3,
      "text": "A session MUST be deleted when non-RADIUS traffic is received over it. This specification is for RADIUS, and there is no reason to allow non-RADIUS traffic over a RADIUS/DTLS session. A session MUST be deleted when RADIUS traffic fails to pass security checks. There is no reason to permit insecure networks. A session SHOULD NOT be deleted when a well-formed, but \"unexpected\", RADIUS packet is received over it. Future specifications may extend RADIUS/DTLS, and we do not want to forbid those specifications.",
      "ja": "非RADIUSトラフィックがそれを介して受信されたときに、セッションを削除する必要があります。この仕様は、RADIUSのためのものであり、RADIUS / DTLSセッションを介して非RADIUSトラフィックを許可する理由はありません。 RADIUSトラフィックがセキュリティチェックを渡すために失敗したときに、セッションを削除する必要があります。安全でないネットワークを許可する理由はありません。セッションは、整形時に削除されたが、「予期せぬ」、RADIUSパケットがそれを介して受信されるべきではありません。将来の仕様は、RADIUS / DTLSを延長することができる、と私たちは、これらの仕様を禁止する必要はありません。"
    },
    {
      "indent": 3,
      "text": "The goal of the above requirements is to ensure security, while maintaining flexibility. Any security-related issue causes the connection to be closed. After the security restrictions have been applied, any unexpected traffic may be safely ignored, as it cannot cause a security issue. There is no need to close the session for unexpected but valid traffic, and the session can safely remain open.",
      "ja": "上記の要件の目標は、柔軟性を維持しながら、セキュリティを確保することです。任意のセキュリティ関連の問題は、接続がクローズされます。セキュリティ制限が適用された後、それはセキュリティ上の問題を引き起こすことができないとして、予期しないトラフィックが安全に、無視することができます。そこ予期しないが、有効なトラフィックのためのセッションをクローズする必要がなく、セッションが安全に開いたままにすることができます。"
    },
    {
      "indent": 3,
      "text": "Once a DTLS session is established, a RADIUS/DTLS server SHOULD use DTLS Heartbeats [RFC6520] to determine connectivity between the two servers. A server SHOULD also use watchdog packets from the client to determine that the session is still active.",
      "ja": "DTLSセッションが確立されると、RADIUS / DTLSサーバは、2つのサーバー間の接続性を決定するためにDTLSハートビート[RFC6520]を使用すべきです。また、サーバは、セッションがまだアクティブであることを決定するために、クライアントからのウォッチドッグパケットを使用すべきです。"
    },
    {
      "indent": 3,
      "text": "As UDP does not guarantee delivery of messages, RADIUS/DTLS servers that do not implement an application-layer watchdog MUST also maintain a \"Last Traffic\" timestamp per DTLS session. The granularity of this timestamp is not critical and could be limited to one-second intervals. The timestamp SHOULD be updated on reception of a valid RADIUS/DTLS packet, or a DTLS Heartbeat, but no more than once per interval. The timestamp MUST NOT be updated in other situations.",
      "ja": "UDPはメッセージの配信を保証するものではありませんので、アプリケーション層の監視を実装していないRADIUS / DTLSサーバはまた、DTLSセッションごとに「最終トラフィック」のタイムスタンプを維持しなければなりません。このタイムスタンプの細かさは重要ではなく、1秒間隔に制限することができます。タイムスタンプは、有効なRADIUS / DTLSパケットの受信、またはDTLSハートビートに更新ませんが、一度の間隔ごとに以下とするべきです。タイムスタンプは、他の状況で更新されてはなりません。"
    },
    {
      "indent": 3,
      "text": "When a session has not received a packet for a period of time, it is labeled \"idle\". The server SHOULD delete idle DTLS sessions after an \"idle timeout\". The server MAY cache the TLS session parameters, in order to provide for fast session resumption.",
      "ja": "セッションが一定期間パケットを受信して​​いない場合は、「アイドル」というラベルが付いています。サーバーは、「アイドルタイムアウト」の後にアイドルDTLSセッションを削除する必要があります。サーバーは、高速セッション再開を提供するために、TLSセッションパラメータをキャッシュすることができます。"
    },
    {
      "indent": 3,
      "text": "This session \"idle timeout\" SHOULD be exposed to the administrator as a configurable setting. It SHOULD NOT be set to less than 60 seconds and SHOULD NOT be set to more than 600 seconds (10 minutes). The minimum useful value for this timer is determined by the application-layer watchdog mechanism defined in the following section.",
      "ja": "このセッション「アイドルタイムアウトは、」構成可能な設定と管理者にさらされるべきです。これは、60秒未満に設定しないでください以上600秒（10分）に設定しないでください。このタイマーの最小の有用な値は、以下のセクションで定義されたアプリケーション層のウォッチドッグ機構により決定されます。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS servers SHOULD also monitor the total number of open sessions. They SHOULD have a \"maximum sessions\" setting exposed to administrators as a configurable parameter. When this maximum is reached and a new session is started, the server MUST either drop an old session in order to open the new one or not create a new session.",
      "ja": "RADIUS / DTLSサーバはまた、オープンセッションの合計数を監視する必要があります。彼らは、設定可能なパラメータとして、管理者に暴露され、「最大セッション数」設定にする必要があります。この最大値に達すると、新しいセッションが開始されると、サーバーは、どちらか新しいものを開いたり、新しいセッションを作成しないために、古いセッションを削除する必要があります。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS servers SHOULD implement session resumption, preferably stateless session resumption as given in [RFC5077]. This practice lowers the time and effort required to start a DTLS session with a client and increases network responsiveness.",
      "ja": "[RFC5077]で与えられるRADIUS / DTLSサーバは、好ましくは、ステートレスセッション再開をセッション再開を実装する必要があります。この方法は、クライアントとDTLSセッションを開始するのに必要な時間と労力を低下させ、ネットワークの応答性を向上させます。"
    },
    {
      "indent": 3,
      "text": "Since UDP is stateless, the potential exists for the client to initiate a new DTLS session using a particular 4-tuple, before the server has closed the old session. For security reasons, the server MUST keep the old session active until either it has received secure notification from the client that the session is closed or the server decides to close the session based on idle timeouts. Taking any other action would permit unauthenticated clients to perform a DoS attack, by reusing a 4-tuple and thus causing the server to close an active (and authenticated) DTLS session.",
      "ja": "UDPはステートレスなので、サーバが古いセッションを閉じた前に、クライアントは、特定の4タプルを使用して新しいDTLSセッションを開始するために、可能性が存在します。セキュリティ上の理由から、サーバはセッションが閉じていることを、クライアントからのセキュアな通知を受信したか、サーバーがアイドルタイムアウトに基づいてセッションを終了することを決定するまで、アクティブな古いセッションを維持しなければなりません。 4タプルを再利用し、したがって、アクティブ（および認証）DTLSセッションを終了するためにサーバを引き起こすことによって、DoS攻撃を実行するために認証されていないクライアントを可能にする任意の他の行動をとります。"
    },
    {
      "indent": 3,
      "text": "As a result, servers MUST ignore any attempts to reuse an existing 4-tuple from an active session. This requirement can likely be reached by simply processing the packet through the existing session, as with any other packet received via that 4-tuple. Non-compliant, or unexpected packets will be ignored by the DTLS layer.",
      "ja": "その結果、サーバは、アクティブなセッションから既存の4タプルを再利用する任意の試みを無視しなければなりません。この要件は、おそらくその4タプルを介して受信された任意の他のパケットと同様に、単に既存のセッションを介してパケットを処理することによって到達することができます。非対応、または予期しないパケットはDTLS層によって無視されます。"
    },
    {
      "indent": 3,
      "text": "The above requirement is mitigated by the suggestion in Section 6.1, below, that the client use a local proxy for all RADIUS traffic. That proxy can then track the ports that it uses and ensure that reuse of 4-tuples is avoided. The exact process by which this tracking is done is outside of the scope of this document.",
      "ja": "上記の要件は、クライアントがすべてのRADIUSトラフィックのローカルプロキシを使用することを、以下、6.1節で提案することによって軽減されます。それが使用するポートを追跡し、4-タプルの再利用を確保することができ、そのプロキシが回避されます。このトラッキングが行われていることにより、正確なプロセスは、この文書の範囲外です。"
    },
    {
      "indent": 0,
      "text": "5.2. Client Session Management",
      "section_title": true,
      "ja": "5.2. クライアント・セッションの管理"
    },
    {
      "indent": 3,
      "text": "Clients SHOULD use PMTU discovery [RFC6520] to determine the PMTU between the client and server, prior to sending any RADIUS traffic. Once a DTLS session is established, a RADIUS/DTLS client SHOULD use DTLS Heartbeats [RFC6520] to determine connectivity between the two systems. RADIUS/DTLS clients SHOULD also use the application-layer watchdog algorithm defined in [RFC3539] to determine server responsiveness. The Status-Server packet defined in [RFC5997] SHOULD be used as the \"watchdog packet\" in any application-layer watchdog algorithm.",
      "ja": "クライアントは、任意のRADIUSトラフィックを送信する前に、クライアントとサーバ間のPMTUを決定するためにPMTU検出[RFC6520]を使用すべきです。 DTLSセッションが確立されると、RADIUS / DTLSクライアントは、2つのシステム間の接続を決定するためにDTLSハートビート[RFC6520]を使用すべきです。 RADIUS / DTLSクライアントは、サーバの応答性を決定するために[RFC3539]で定義されたアプリケーション層のウォッチドッグ・アルゴリズムを使用すべきです。 [RFC5997]で定義されたステータス・サーバーのパケットは、任意のアプリケーション層のウォッチドッグ・アルゴリズムの「ウォッチドッグパケット」として使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS clients SHOULD proactively close sessions when they have been idle for a period of time. Clients SHOULD close a session when the DTLS Heartbeat algorithm indicates that the session is no longer active. Clients SHOULD close a session when no traffic other than watchdog packets and (possibly) watchdog responses has been sent for three watchdog timeouts. This behavior ensures that clients do not waste resources on the server by causing it to track idle sessions.",
      "ja": "彼らは一定期間アイドル状態になっているとき、RADIUS / DTLSクライアントは、積極的にクローズセッションをする必要があります。 DTLSハートビートアルゴリズムはセッションはもはやアクティブであることを示していない場合、クライアントはセッションを閉じる必要があります。ウォッチドッグパケットと（おそらく）ウォッチドッグ応答以外のトラフィックは3つのウォッチドッグ・タイムアウトのために送られていない場合、クライアントはセッションを閉じる必要があります。この動作は、クライアントはそれがアイドル状態のセッションを追跡させることにより、サーバー上のリソースを無駄にしないことを保証します。"
    },
    {
      "indent": 3,
      "text": "When a client fails to implement both DTLS Heartbeats and watchdog packets, it has no way of knowing that a DTLS session has been closed. Therefore, there is the possibility that the server closes the session without the client knowing. When that happens, the client may later transmit packets in a session, and those packets will be ignored by the server. The client is then forced to time out those packets and then the session, leading to delays and network instabilities.",
      "ja": "クライアントは、DTLSハートビートおよびウォッチドッグパケットの両方を実装するために失敗した場合は、DTLSセッションが閉じられたことを知る方法がありません。そのため、サーバはクライアントが知らなくても、セッションを閉じてしまう可能性があります。これが発生すると、クライアントは、後のセッションでパケットを送信してもよいし、これらのパケットは、サーバによって無視されます。クライアントはその後、遅延やネットワークの不安定性につながる、それらのパケットタイムアウトして、セッションに強制されます。"
    },
    {
      "indent": 3,
      "text": "For these reasons, it is RECOMMENDED that all DTLS sessions be configured to use DTLS Heartbeats and/or watchdog packets.",
      "ja": "これらの理由から、すべてのDTLSセッションがDTLSハートビートおよび/またはウォッチドッグパケットを使用するように構成することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "DTLS sessions MUST also be deleted when a RADIUS packet fails validation due to a packet being malformed, or when it has an invalid Message-Authenticator or invalid Response Authenticator. There are other cases when the specifications require that a packet received via a DTLS session be \"silently discarded\". In those cases, implementations MAY delete the underlying DTLS session.",
      "ja": "RADIUSパケットが原因不正な形式中のパケットに検証が失敗したときにDTLSセッションも削除されなければならない、またはそれが無効なメッセージ・オーセンティケータまたは無効なレスポンス認証を持っている場合。仕様はDTLSセッションを介して受信したパケットは、「黙って破棄」することを必要とする場合、他のケースがあります。これらの例では、実装は基礎となるDTLSセッションを削除することができます。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS clients should not send both RADIUS/UDP and RADIUS/DTLS packets to different servers from the same source socket. This practice causes increased complexity in the client application and increases the potential for security breaches due to implementation issues.",
      "ja": "RADIUS / DTLSクライアントは、同じソースソケットから別のサーバーにRADIUS / UDPおよびRADIUS / DTLSパケットの両方を送信するべきではありません。この練習の原因は、クライアントアプリケーションに複雑さを増加し、実装上の問題に起因するセキュリティ違反の可能性を高めます。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS clients SHOULD implement session resumption, preferably stateless session resumption as given in [RFC5077]. This practice lowers the time and effort required to start a DTLS session with a server and increases network responsiveness.",
      "ja": "[RFC5077]で与えられるRADIUS / DTLSクライアントは、好ましくは、ステートレスセッション再開をセッション再開を実装する必要があります。このような行為は、サーバーとのDTLSセッションを開始するのに必要な時間と労力を低下させ、ネットワークの応答性を向上させます。"
    },
    {
      "indent": 0,
      "text": "6. Implementation Guidelines",
      "section_title": true,
      "ja": "6.実装のガイドライン"
    },
    {
      "indent": 3,
      "text": "The text above describes the protocol. In this section, we give additional implementation guidelines. These guidelines are not part of the protocol, but they may help implementors create simple, secure, and interoperable implementations.",
      "ja": "テキストは、上記のプロトコルを記述します。このセクションでは、追加の実装ガイドラインを与えます。これらのガイドラインは、プロトコルの一部ではありませんが、実装者は、シンプル、セキュア、および相互運用可能な実装を作成するのに役立つことがあります。"
    },
    {
      "indent": 3,
      "text": "Where a TLS-PSK method is used, implementations MUST support keys of at least 16 octets in length. Implementations SHOULD support key lengths of 32 octets and SHOULD allow for longer keys. The key data MUST be capable of being any value (0 through 255, inclusive). Implementations MUST NOT limit themselves to using textual keys. It is RECOMMENDED that the administration interface allow for the keys to be entered as human-readable strings in hex format.",
      "ja": "TLS-PSK方式が使用される場合、実装は、長さが少なくとも16オクテットのキーをサポートしなければなりません。実装は、32オクテットの鍵長をサポートする必要があり、長いキーを可能にすべきです。鍵データは、任意の値（0〜255、を含む）ことができなければなりません。実装は、テキストキーを使用して自分自身を制限してはなりません。キーが16進形式の判読可能な文字列として入力するための管理インタフェースが許可されていることを推奨します。"
    },
    {
      "indent": 3,
      "text": "When creating keys for use with PSK ciphersuites, it is RECOMMENDED that keys be derived from a Cryptographically Secure Pseudorandom Number Generator (CSPRNG) instead of administrators inventing keys on their own. If managing keys is too complicated, a certificate-based TLS method SHOULD be used instead.",
      "ja": "PSKの暗号スイートで使用するためのキーを作成する場合には、キーは暗号的に安全な擬似乱数生成器（CSPRNG）の代わりに、独自のキーを発明管理者に由来することが推奨されます。鍵の管理が複雑すぎる場合は、証明書ベースのTLS方式を代わりに使用してください。"
    },
    {
      "indent": 0,
      "text": "6.1. Client Implementations",
      "section_title": true,
      "ja": "6.1. クライアント実装"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS clients should use connected sockets where possible. Use of connected sockets means that the underlying kernel tracks the sessions, so that the client subsystem does not need to manage multiple sessions on one socket.",
      "ja": "可能であればRADIUS / DTLSクライアントが接続されているソケットを使用する必要があります。接続されたソケットを使用すると、クライアント・サブシステムは、1つのソケット上で複数のセッションを管理する必要がないように、基本となるカーネルは、セッションを追跡することを意味します。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS clients should use a single source (IP + port) when sending packets to a particular RADIUS/DTLS server. Doing so minimizes the number of DTLS session setups. It also ensures that information about the home server state is discovered only once.",
      "ja": "特定のRADIUS / DTLSサーバにパケットを送信するときにRADIUS / DTLSクライアントは、単一のソース（IP +ポート）を使用する必要があります。そうすることでDTLSセッションのセットアップの数を最小限に抑えることができます。また、ホームサーバの状態に関する情報を一度だけ発見されることを保証します。"
    },
    {
      "indent": 3,
      "text": "In practice, this means that RADIUS/DTLS clients with multiple internal RADIUS sources should use a local proxy that arbitrates all RADIUS traffic between the client and all servers. The proxy should accept traffic only from the authorized subsystems on the client machine and should proxy that traffic to known servers. Each authorized subsystem should include an attribute that uniquely identifies that subsystem to the proxy, so that the proxy can apply origin-specific proxy rules and security policies. We suggest using NAS-Identifier for this purpose.",
      "ja": "実際には、これは、複数の内部RADIUS源とRADIUS / DTLSクライアントは、クライアントとのすべてのサーバー間のすべてのRADIUSトラフィックを調停ローカルプロキシを使用しなければならないことを意味します。プロキシは、クライアントマシン上でのみ許可されたサブシステムからのトラフィックを受け入れ、必要があるべきプロキシが知らサーバへのトラフィック。プロキシが起源固有のプロキシルールおよびセキュリティポリシーを適用できるように、各認可サブシステムは、独自にプロキシにそのサブシステムを識別する属性を含める必要があります。我々は、この目的のためにNAS-識別子を使用してお勧めします。"
    },
    {
      "indent": 3,
      "text": "The local proxy should be able to interact with multiple servers at the same time. There is no requirement that each server have its own unique proxy on the client, as that would be inefficient.",
      "ja": "ローカルプロキシは、同時に複数のサーバと対話することができるはずです。それは非効率的なように、各サーバは、クライアント上で独自のプロキシを持っている必要は、ありません。"
    },
    {
      "indent": 3,
      "text": "The suggestion to use a local proxy means that there is only one process that discovers network and/or connectivity issues with a server. If each client subsystem communicated directly with a server, issues with that server would have to be discovered independently by each subsystem. The side effect would be increased delays in re-routing traffic, error reporting, and network instabilities.",
      "ja": "ローカルプロキシを使用するための提案は、サーバとネットワークおよび/または接続の問題を発見する唯一の方法があることを意味します。各クライアント・サブシステムは、サーバーと直接通信している場合、そのサーバーの問題は、各サブシステムによって独立して発見されなければなりません。副作用は、再ルーティングトラフィック、エラー報告、およびネットワークの不安定性の遅延を増加させたことになります。"
    },
    {
      "indent": 3,
      "text": "Each client subsystem can include a subsystem-specific NAS-Identifier in each request. The format of this attribute is implementation-specific. The proxy should verify that the request originated from the local system, ideally via a loopback address. The proxy MUST then rewrite any subsystem-specific NAS-Identifier to a NAS-Identifier that identifies the client as a whole, or, remove the NAS-Identifier entirely and replace it with NAS-IP-Address or NAS-IPv6-Address.",
      "ja": "各クライアント・サブシステムは、各要求にサブシステム固有のNAS-識別子を含めることができます。この属性の形式は実装固有です。プロキシは、要求は、理想的には、ループバックアドレスを経由して、ローカルシステムから発信ことを確認する必要があります。プロキシは、全体として、クライアントを識別するNAS-識別子に任意のサブシステム固有のNAS-識別子を書き換える、または、完全にNAS-識別子を削除し、NAS-IP-アドレスまたはNAS-IPv6にアドレスとそれを交換する必要があります。"
    },
    {
      "indent": 3,
      "text": "In traditional RADIUS, the cost to set up a new \"session\" between a client and server was minimal. The client subsystem could simply open a port, send a packet, wait for the response, and then close the port. With RADIUS/DTLS, the connection setup is significantly more expensive. In addition, there may be a requirement to use DTLS in order to communicate with a server, as RADIUS/UDP may not be supported by that server. The knowledge of what protocol to use is best managed by a dedicated RADIUS subsystem, rather than by each individual subsystem on the client.",
      "ja": "伝統的なRADIUSでは、クライアントとサーバ間の新しい「セッション」を設定するためのコストは最小限でした。クライアント・サブシステムは、単純に、ポートを開くパケットを送信し、応答を待ってから、ポートを閉じることができます。 RADIUS / DTLSを使用すると、接続設定はかなり高価です。また、RADIUS / UDPは、そのサーバによってサポートされなくてもよいように、サーバと通信するためにDTLSを使用する必要があるかもしれません。使用するどのようなプロトコルの知識は最高専用のRADIUSサブシステムによってではなく、クライアント上の個々のサブシステムによって管理されています。"
    },
    {
      "indent": 0,
      "text": "6.2. Server Implementations",
      "section_title": true,
      "ja": "6.2. サーバ実装"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS servers should not use connected sockets to read DTLS packets from a client. This recommendation exists because a connected UDP socket will accept packets only from one source IP address and port. This limitation would prevent the server from accepting packets from multiple clients on the same port.",
      "ja": "RADIUS / DTLSサーバは、クライアントからのDTLSのパケットを読み取るために接続されたソケットを使用しないでください。接続されているUDPソケットが一つだけ送信元IPアドレスとポートからのパケットを受け入れますので、この勧告は存在します。この制限は、同じポートで複数のクライアントからのパケットを受け入れることからサーバーを防止するであろう。"
    },
    {
      "indent": 0,
      "text": "7. Diameter Considerations",
      "section_title": true,
      "ja": "7.直径の考慮事項"
    },
    {
      "indent": 3,
      "text": "This specification defines a transport layer for RADIUS. It makes no other changes to the RADIUS protocol. As a result, there are no Diameter considerations.",
      "ja": "この仕様は、RADIUSのためのトランスポート層を規定します。これは、RADIUSプロトコルには他の変更を行うものではありません。その結果、直径考慮事項はありません。"
    },
    {
      "indent": 0,
      "text": "8. IANA Considerations",
      "section_title": true,
      "ja": "8. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "No new RADIUS attributes or packet codes are defined. IANA has updated the \"Service Name and Transport Protocol Port Number Registry\". The entries corresponding to port service name \"radsec\", port number \"2083\", and transport protocol \"UDP\" have been updated as follows:",
      "ja": "新しいRADIUS属性またはパケットコードが定義されていません。 IANAは、「サービス名とトランスポートプロトコルポート番号レジストリ」を更新しました。次のようにポートのサービス名「radsec」、ポート番号「2083」、およびトランスポートプロトコル「UDP」に対応するエントリが更新されています。"
    },
    {
      "indent": 6,
      "text": "o Assignee: IESG",
      "ja": "ああ譲受人：Ishq"
    },
    {
      "indent": 6,
      "text": "o Contact: IETF Chair",
      "ja": "O接点：IETF議長"
    },
    {
      "indent": 6,
      "text": "o Reference: This document",
      "ja": "Oリファレンス：このドキュメント"
    },
    {
      "indent": 6,
      "text": "o Assignment Notes: The UDP port 2083 was already previously assigned by IANA for \"RadSec\", an early implementation of RADIUS/TLS, prior to issuance of this RFC.",
      "ja": "O割付注：UDPポート2083はすでに以前に先立ち、このRFCの発行に、「RadSec」、RADIUS / TLSの早期実現のためにIANAによって割り当てられました。"
    },
    {
      "indent": 0,
      "text": "9. Implementation Status",
      "section_title": true,
      "ja": "9.実施状況"
    },
    {
      "indent": 3,
      "text": "This section records the status of known implementations of RADIUS/DTLS at the time of writing, and is based on a proposal described in [RFC6982].",
      "ja": "このセクションでは、書き込み時のRADIUS / DTLSの既知の実装の状態を記録し、[RFC6982]に記載の提案に基づいています。"
    },
    {
      "indent": 3,
      "text": "The description of implementations in this section is intended to assist the IETF in its decision processes in progressing Internet-Drafts to RFCs.",
      "ja": "このセクションの実装の記述はRFCのにインターネットドラフトを進んで、その決定過程にIETFを支援することを目的としています。"
    },
    {
      "indent": 0,
      "text": "9.1. Radsecproxy",
      "section_title": true,
      "ja": "9.1.  Radsecproxy"
    },
    {
      "indent": 3,
      "text": "Organization: Radsecproxy",
      "ja": "組織：Radsecproxy"
    },
    {
      "indent": 3,
      "text": "URL: https://software.uninett.no/radsecproxy/",
      "ja": "URL：https://software.uninett.no/radsecproxy/"
    },
    {
      "indent": 3,
      "text": "Maturity: Widely used software based on early versions of this document. The use of the DTLS functionality is not clear.",
      "ja": "成熟：このドキュメントの初期のバージョンに基づいて広く使用されているソフトウェア。 DTLSの機能を使用することは明らかではありません。"
    },
    {
      "indent": 3,
      "text": "Coverage: The bulk of this specification is implemented, based on earlier versions of this document. Exact revisions that were implemented are unknown.",
      "ja": "カバレッジ：本明細書の大部分はこの文書の以前のバージョンに基づいて、実現されます。実装された正確な改正は不明です。"
    },
    {
      "indent": 3,
      "text": "Licensing: Freely distributable with acknowledgment.",
      "ja": "ライセンス：承認と自由に配布。"
    },
    {
      "indent": 3,
      "text": "Implementation experience: No comments from implementors.",
      "ja": "実装経験：実装者からのコメントはありません。"
    },
    {
      "indent": 0,
      "text": "9.2. jradius",
      "section_title": true,
      "ja": "9.2.  jradius"
    },
    {
      "indent": 3,
      "text": "Organization: Coova",
      "ja": "組織：Coova"
    },
    {
      "indent": 3,
      "text": "URL: http://www.coova.org/JRadius/RadSec",
      "ja": "URL：http://www.coova.org/JRadius/RadSec"
    },
    {
      "indent": 3,
      "text": "Maturity: Production software based on early versions of this document. The use of the DTLS functionality is not clear.",
      "ja": "成熟：このドキュメントの初期のバージョンに基づいて制作ソフトウェア。 DTLSの機能を使用することは明らかではありません。"
    },
    {
      "indent": 3,
      "text": "Coverage: The bulk of this specification is implemented, based on earlier versions of this document. Exact revisions that were implemented are unknown.",
      "ja": "カバレッジ：本明細書の大部分はこの文書の以前のバージョンに基づいて、実現されます。実装された正確な改正は不明です。"
    },
    {
      "indent": 3,
      "text": "Licensing: Freely distributable with requirement to redistribute source.",
      "ja": "ライセンス：ソースを再配布するための要件と自由に配布。"
    },
    {
      "indent": 3,
      "text": "Implementation experience: No comments from implementors.",
      "ja": "実装経験：実装者からのコメントはありません。"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "ja": "10.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "The bulk of this specification is devoted to discussing security considerations related to RADIUS. However, we discuss a few additional issues here.",
      "ja": "この仕様の大部分は、RADIUSに関連するセキュリティ上の考慮事項を議論に専念しています。しかし、我々はここにいくつかの追加の問題を議論します。"
    },
    {
      "indent": 3,
      "text": "This specification relies on the existing DTLS, RADIUS/UDP, and RADIUS/TLS specifications. As a result, all security considerations for DTLS apply to the DTLS portion of RADIUS/DTLS. Similarly, the TLS and RADIUS security issues discussed in [RFC6614] also apply to this specification. Most of the security considerations for RADIUS apply to the RADIUS portion of the specification.",
      "ja": "この仕様は、既存のDTLS、RADIUS / UDP、およびRADIUS / TLSの仕様に依存しています。その結果、DTLSのすべてのセキュリティ上の考慮事項は、RADIUS / DTLSのDTLS部分に適用されます。同様に、[RFC6614]で説明したTLSとRADIUSセキュリティ問題もまた、本明細書に適用されます。 RADIUSのためのセキュリティの考慮事項のほとんどは、仕様のRADIUS部分に適用されます。"
    },
    {
      "indent": 3,
      "text": "However, many security considerations raised in the RADIUS documents are related to RADIUS encryption and authorization. Those issues are largely mitigated when DTLS is used as a transport method. The issues that are not mitigated by this specification are related to the RADIUS packet format and handling, which is unchanged in this specification.",
      "ja": "しかし、RADIUS文書で提起さ​​れた多くのセキュリティ上の考慮事項は、RADIUS暗号化および認証に関連しています。 DTLSは、輸送方法として使用されている場合、これらの問題は大幅に軽減されます。この仕様によって軽減されていない問題については、この仕様に変更されていませんRADIUSパケットフォーマットおよび取り扱いに関連しています。"
    },
    {
      "indent": 3,
      "text": "This specification also suggests that implementations use a session tracking table. This table is an extension of the duplicate detection cache mandated in [RFC5080], Section 2.2.2. The changes given here are that DTLS-specific information is tracked for each table entry. Section 5.1.1, above, describes steps to mitigate any DoS issues that result from tracking additional information.",
      "ja": "また、この仕様は実装がセッショントラッキングテーブルを使用することを示唆しています。このテーブルには、[RFC5080]で義務付け重複検出キャッシュ、セクション2.2.2の拡張機能です。ここで与えられた変化はDTLS固有の情報は、各テーブルエントリのために追跡されることがあります。 5.1.1項では、上記の、追加的な情報を追跡から生じる任意のDoS攻撃の問題を軽減するための手順を説明します。"
    },
    {
      "indent": 3,
      "text": "The fixed shared secret given above in Section 2.2.1 is acceptable only when DTLS is used with a non-null encryption method. When a DTLS session uses a null encryption method due to misconfiguration or implementation error, all of the RADIUS traffic will be readable by an observer. Therefore, implementations MUST NOT use null encryption methods for RADIUS/DTLS.",
      "ja": "セクション2.2.1に上記固定共有秘密は、DTLSが非ヌル暗号化方式で使用された場合にのみ許容されます。 DTLSセッションが原因設定ミスや実装エラーにヌル暗号化方式を使用する場合、RADIUSトラフィックのすべては、観察者によって読み取り可能になります。そのため、実装はRADIUS / DTLSのためのヌル暗号化方式を使用してはなりません。"
    },
    {
      "indent": 3,
      "text": "For systems that perform protocol-based firewalling and/or filtering, it is RECOMMENDED that they be configured to permit only DTLS over the RADIUS/DTLS port.",
      "ja": "プロトコルベースのファイアウォールおよび/またはフィルタリングを行うシステムの場合、それらはRADIUS / DTLSポート上のみDTLSを可能にするように構成されていることが推奨されます。"
    },
    {
      "indent": 0,
      "text": "10.1. Crypto-Agility",
      "section_title": true,
      "ja": "10.1. 暗号アジリティ"
    },
    {
      "indent": 3,
      "text": "Section 4.2 of [RFC6421] makes a number of recommendations about security properties of new RADIUS proposals. All of those recommendations are satisfied by using DTLS as the transport layer.",
      "ja": "[RFC6421]のセクション4.2は、新しいRADIUS提案のセキュリティ特性に関する勧告の数になります。これらの勧告はすべて、トランスポート層としてDTLSを使用することによって満たされます。"
    },
    {
      "indent": 3,
      "text": "Section 4.3 of [RFC6421] makes a number of recommendations about backwards compatibility with RADIUS. Section 3, above, addresses these concerns in detail.",
      "ja": "[RFC6421]のセクション4.3は、RADIUSとの後方互換性に関する推奨事項の数になります。第3節では、上記、詳細にこれらの懸念に対処しています。"
    },
    {
      "indent": 3,
      "text": "Section 4.4 of [RFC6421] recommends that change control be ceded to the IETF, and that interoperability is possible. Both requirements are satisfied.",
      "ja": "[RFC6421]のセクション4.4は、変更制御がIETFに譲渡することを推奨し、その相互運用が可能です。両方の要件が満たされています。"
    },
    {
      "indent": 3,
      "text": "Section 4.5 of [RFC6421] requires that the new security methods apply to all packet types. This requirement is satisfied by allowing DTLS to be used for all RADIUS traffic. In addition, Section 3, above, addresses concerns about documenting the transition from legacy RADIUS to crypto-agile RADIUS.",
      "ja": "[RFC6421]のセクション4.5は、新しいセキュリティメソッドは、すべてのパケットタイプに適用されている必要があります。この要件は、DTLSは、すべてのRADIUSトラフィックに使用できるようにすることによって満たされます。また、第3節では、上記暗号アジャイル半径レガシーRADIUSからの遷移を文書の懸念に対処します。"
    },
    {
      "indent": 3,
      "text": "Section 4.6 of [RFC6421] requires automated key management. This requirement is satisfied by using DTLS key management.",
      "ja": "[RFC6421]のセクション4.6には、キー管理を自動化する必要があります。この要件は、DTLSキー管理を使用することによって満たされます。"
    },
    {
      "indent": 0,
      "text": "10.2. Legacy RADIUS Security",
      "section_title": true,
      "ja": "10.2. レガシーRADIUSセキュリティ"
    },
    {
      "indent": 3,
      "text": "We reiterate here the poor security of the legacy RADIUS protocol. We suggest that RADIUS clients and servers implement either this specification or [RFC6614]. New attacks on MD5 have appeared over the past few years, and there is a distinct possibility that MD5 may be completely broken in the near future. Such a break would mean that RADIUS/UDP was completely insecure.",
      "ja": "ここでは、従来のRADIUSプロトコルの貧弱なセキュリティを改めて表明する。私たちは、RADIUSクライアントとサーバはこの仕様または[RFC6614]のいずれかを実装することを示唆しています。 MD5の新しい攻撃は、過去数年にわたって登場している、とMD5は完全に近い将来に破損する可能性があることに異なる可能性があります。このようなブレークは、RADIUS / UDPが完全に安全ではないだったことを意味します。"
    },
    {
      "indent": 3,
      "text": "The existence of fast and cheap attacks on MD5 could result in a loss of all network security that depends on RADIUS. Attackers could obtain user passwords and possibly gain complete network access. We cannot overstate the disastrous consequences of a successful attack on RADIUS.",
      "ja": "MD5の迅速かつ安価な攻撃の存在は、RADIUSに依存し、すべてのネットワーク・セキュリティの損失につながる可能性があります。攻撃者は、ユーザーのパスワードを取得し、おそらく完全なネットワークアクセスを得ることができました。私たちは、RADIUSに成功した攻撃の悲惨な結果を誇張することはできません。"
    },
    {
      "indent": 3,
      "text": "We also caution implementors (especially client implementors) about using RADIUS/DTLS. It may be tempting to use the shared secret as the basis for a TLS-PSK method and to leave the user interface otherwise unchanged. This practice MUST NOT be used. The administrator MUST be given the option to use DTLS. Any shared secret used for RADIUS/UDP MUST NOT be used for DTLS. Reusing a shared secret between RADIUS/UDP and RADIUS/DTLS would negate all of the benefits found by using DTLS.",
      "ja": "また、RADIUS / DTLSの使用に関する実装（特にクライアントの実装を）注意します。 TLS-PSK方式の基礎として共有秘密鍵を使用し、そうでなければ変化しないユーザインターフェースを残すように誘惑されてもよいです。この慣行を使用してはいけません。管理者は、DTLSを使用するオプションが与えられなければなりません。 RADIUS / UDPするために使用される任意の共有秘密は、DTLSのために使用してはいけません。 RADIUS / UDPおよびRADIUS / DTLSの間の共有秘密を再利用すると、DTLSを使用した利点のすべてを否定するでしょう。"
    },
    {
      "indent": 3,
      "text": "RADIUS/DTLS client implementors MUST expose a configuration that allows the administrator to choose the ciphersuite. Where certificates are used, RADIUS/DTLS client implementors MUST expose a configuration that allows an administrator to configure all certificates necessary for certificate-based authentication. These certificates include client, server, and root certificates.",
      "ja": "RADIUS / DTLSクライアントの実装者は、管理者が暗号スイートを選択することができます設定を公開する必要があります。証明書が使用されている場合は、RADIUS / DTLSクライアントの実装者は、管理者が証明書ベースの認証のために必要なすべての証明書を設定することを可能にする設定を公開する必要があります。これらの証明書は、クライアント、サーバー、およびルート証明書が含まれます。"
    },
    {
      "indent": 3,
      "text": "TLS-PSK methods are susceptible to dictionary attacks. Section 6, above, recommends deriving TLS-PSK keys from a Cryptographically Secure Pseudorandom Number Generator (CSPRNG), which makes dictionary attacks significantly more difficult. Servers SHOULD track failed client connections by TLS-PSK ID and block TLS-PSK IDs that seem to be attempting brute-force searches of the keyspace.",
      "ja": "TLS-PSK方式は、辞書攻撃を受けやすいです。セクション6は、上記、辞書攻撃を著しくより困難にする暗号的に安全な擬似乱数生成器（CSPRNG）からのTLS-PSKキーを導出するお勧めします。サーバーは、鍵空間のブルートフォース検索をしようとしているように見えるTLS-PSK IDとブロックTLS-PSK IDで失敗したクライアント接続を追跡する必要があります。"
    },
    {
      "indent": 3,
      "text": "The historic RADIUS practice of using shared secrets (here, PSKs) that are minor variations of words is NOT RECOMMENDED, as it would negate all of the security of DTLS.",
      "ja": "それはDTLSのセキュリティのすべてを否定するだろうとして共有秘密を使用しての歴史的なRADIUSの練習は（ここでは、PSKs）の単語の小さな変化をしている、お勧めしません。"
    },
    {
      "indent": 0,
      "text": "10.3. Resource Exhaustion",
      "section_title": true,
      "ja": "10.3. リソースの枯渇"
    },
    {
      "indent": 3,
      "text": "The use of DTLS allows DoS attacks and resource-exhaustion attacks that were not possible in RADIUS/UDP. These attacks are similar to those described in [RFC6614], Section 6, for TCP.",
      "ja": "DTLSを使用するには、RADIUS / UDPでは不可能だったDoS攻撃や資源枯渇の攻撃を可能にします。これらの攻撃は、TCPのために、[RFC6614]、セクション6で説明したものと同様です。"
    },
    {
      "indent": 3,
      "text": "Session tracking, as described in Section 5.1, can result in resource exhaustion. Therefore, servers MUST limit the absolute number of sessions that they track. When the total number of sessions tracked is going to exceed the configured limit, servers MAY free up resources by closing the session that has been idle for the longest time. Doing so may free up idle resources that then allow the server to accept a new session.",
      "ja": "セッショントラッキングは、5.1節で説明したように、リソースの枯渇につながることができます。そのため、サーバーは、追跡セッションの絶対数を制限しなければなりません。追跡されたセッションの合計数が設定された制限を超えたために起こっている場合は、サーバーは、最も長時間アイドル状態になっているセッションを閉じてリソースを解放するかもしれません。その後、サーバは新しいセッションを受け入れることができ遊休リソースを解放する恐れがあります。"
    },
    {
      "indent": 3,
      "text": "Servers MUST limit the number of partially open DTLS sessions. These limits SHOULD be exposed to the administrator as configurable settings.",
      "ja": "サーバーは、部分的にオープンDTLSセッションの数を制限しなければなりません。これらの制限は、構成可能な設定として管理者にさらされるべきです。"
    },
    {
      "indent": 0,
      "text": "10.4. Client-Server Authentication with DTLS",
      "section_title": true,
      "ja": "10.4.  DTLSを使用したクライアントサーバー認証"
    },
    {
      "indent": 3,
      "text": "We expect that the initial deployment of DTLS will follow the RADIUS/UDP model of statically configured client-server relationships. The specification for dynamic discovery of RADIUS servers is under development, so we will not address that here.",
      "ja": "私たちは、DTLSの最初の展開が静的に構成されたクライアント - サーバー関係のRADIUS / UDPモデルに従うことを期待しています。 RADIUSサーバの動的な発見のための仕様は開発中ですので、私たちはそのここに対処しません。"
    },
    {
      "indent": 3,
      "text": "Static configuration of client-server relationships for RADIUS/UDP means that a client has a fixed IP address for a server and a shared secret used to authenticate traffic sent to that address. The server in turn has a fixed IP address for a client and a shared secret used to authenticate traffic from that address. This model needs to be extended for RADIUS/DTLS.",
      "ja": "RADIUS / UDP用のクライアント - サーバ関係の静的な構成は、クライアントがサーバーとそのアドレスに送信されたトラフィックを認証するために使用される共有秘密のための固定IPアドレスを持っていることを意味します。順番に、サーバーは、クライアントとそのアドレスからのトラフィックを認証するために使用される共有秘密のための固定IPアドレスを持っています。このモデルは、RADIUS / DTLSのために拡張する必要があります。"
    },
    {
      "indent": 3,
      "text": "Instead of a shared secret, TLS credentials MUST be used by each party to authenticate the other. The issue of identity is more problematic. As with RADIUS/UDP, IP addresses may be used as a key to determine the authentication credentials that a client will present to a server or which credentials a server will accept from a client. This is the fixed IP address model of RADIUS/UDP, with the shared secret replaced by TLS credentials.",
      "ja": "代わりに、共有秘密を、TLS証明書が相互に認証するために、各当事者によって使用されなければなりません。アイデンティティの問題は、より多くの問題があります。 RADIUS / UDPと同様に、IPアドレスは、クライアントがサーバに提示するか、サーバーがクライアントから受け入れる資格証明書認証証明書を決定するためのキーとして使用することができます。これは、TLSの認証情報に置き換え共有秘密でRADIUS / UDPの固定IPアドレスのモデル、です。"
    },
    {
      "indent": 3,
      "text": "There are, however, additional considerations with RADIUS/DTLS. When a client is configured with a hostname for a server, the server may present to the client a certificate containing a hostname. The client MUST then verify that the hostnames match. Any mismatch is a security violation, and the connection MUST be closed.",
      "ja": "RADIUS / DTLSと追加の考慮事項は、しかし、があります。クライアントがサーバーのホスト名で構成されている場合、サーバはクライアントにホスト名を含む証明書を提示してもよいです。次に、クライアントは、ホスト名が一致していることを確かめなければなりません。任意の不一致はセキュリティ違反であり、接続が閉じられなければなりません。"
    },
    {
      "indent": 3,
      "text": "A RADIUS/DTLS server MAY be configured with a \"wildcard\" IP address match for clients, instead of a unique fixed IP address for each client. In that case, clients MUST be individually configured with a unique certificate. When the server receives a connection from a client, it MUST determine client identity from the client certificate, and MUST authenticate (or not) the client based on that certificate. See [RFC6614], Section 2.4, for a discussion of how to match a certificate to a client identity.",
      "ja": "RADIUS / DTLSサーバは、クライアント用の「ワイルドカード」のIPアドレスが一致し、代わりに各クライアントに一意の固定IPアドレスを用いて構成することができます。その場合には、クライアントは個別に一意の証明書を設定する必要があります。サーバがクライアントからの接続を受信すると、クライアント証明書からクライアントIDを決定する必要があり、その証明書に基づいてクライアントを認証（またはしない）しなければなりません。クライアントのアイデンティティに証明書と一致する方法の議論については、[RFC6614]、セクション2.4を参照してください。"
    },
    {
      "indent": 3,
      "text": "However, servers SHOULD use IP address filtering to minimize the possibility of attacks. That is, they SHOULD permit clients only from a limited IP address range or ranges. They SHOULD silently discard all traffic from outside of those ranges.",
      "ja": "しかし、サーバが攻撃の可能性を最小限にするために、IPアドレスフィルタリングを使用すべきです。つまり、彼らは限られたIPアドレス範囲または範囲からクライアントを可能にすべきです。彼らは静かにこれらの範囲の外からのすべてのトラフィックを破棄すべきです。"
    },
    {
      "indent": 3,
      "text": "Since the client-server relationship is static, the authentication credentials for that relationship must also be statically configured. That is, a client connecting to a DTLS server SHOULD be pre-configured with the server's credentials (e.g., PSK or certificate). If the server fails to present the correct credentials, the DTLS session MUST be closed. Each server SHOULD be pre-configured with sufficient information to authenticate connecting clients.",
      "ja": "クライアント - サーバの関係が静的であるので、その関係のための認証証明書はまた、静的に設定する必要があります。すなわち、DTLSサーバに接続しているクライアントは、サーバの認証情報（例えば、PSKまたは証明書）で事前構成されるべきです。サーバーが正しい資格情報を提示するために失敗した場合、DTLSセッションを閉じる必要があります。各サーバは、接続しているクライアントを認証するために十分な情報を事前に設定する必要があります。"
    },
    {
      "indent": 3,
      "text": "The requirement for clients to be individually configured with a unique certificate can be met by using a private CA for certificates used in RADIUS/DTLS environments. If a client were configured to use a public CA, then it could accept as valid any server that has a certificate signed by that CA. While the traffic would be secure from third-party observers, the server would, however, have unrestricted access to all of the RADIUS traffic, including all user credentials and passwords.",
      "ja": "個別に一意の証明書を使用して構成するクライアントのための要件は、RADIUS / DTLS環境で使用される証明書のプライベートCAを使用することによって満たすことができます。クライアントがパブリックCAを使用するように設定された場合、それはそのCAによって署名された証明書を持っている任意のサーバーを有効なものとして受け入れることができますトラフィックは、サードパーティのオブザーバーから安全であるだろうが、サーバーは、しかし、すべてのユーザーの資格情報やパスワードなどのRADIUSトラフィックのすべてに無制限にアクセスでき、必要があります。"
    },
    {
      "indent": 3,
      "text": "Therefore, clients SHOULD NOT be pre-configured with a list of known public CAs by the vendor or manufacturer. Instead, the clients SHOULD start off with an empty CA list. The addition of a CA SHOULD be done only when manually configured by an administrator.",
      "ja": "したがって、クライアントは、ベンダー又は製造業者によって知られているパブリックCAのリストを事前設定しないでください。代わりに、クライアントは空のCAのリストをオフに開始する必要があります。手動で管理者によって設定された場合にのみCAの添加が行われるべきです。"
    },
    {
      "indent": 3,
      "text": "This scenario is the opposite of web browsers, where they are pre-configured with many known CAs. The goal there is security from third-party observers, but also the ability to communicate with any unknown site that presents a signed certificate. In contrast, the goal of RADIUS/DTLS is both security from third-party observers and the ability to communicate with only a small set of well-known servers.",
      "ja": "このシナリオでは、彼らは多くの既知のCAが事前に設定されているWebブラウザの反対です。目標は、サードパーティのオブザーバーからのセキュリティだけでなく、署名された証明書を提示し未知のサイトと通信する機能があります。これとは対照的に、RADIUS / DTLSの目標は、サードパーティのオブザーバーからセキュリティ、よく知られているサーバの唯一の小さなセットと通信する機能もあります。"
    },
    {
      "indent": 3,
      "text": "This requirement does not prevent clients from using hostnames instead of IP addresses for locating a particular server. Instead, it means that the credentials for that server should be pre-configured on the client, and associated with that hostname. This requirement does suggest that in the absence of a specification for dynamic discovery, clients SHOULD use only those servers that have been manually configured by an administrator.",
      "ja": "この要件は、特定のサーバーを見つけるためにIPアドレスの代わりにホスト名を使用してからクライアントを防ぐことはできません。その代わりに、そのサーバーの証明書がクライアント上で事前に構成されなければならないことを意味し、そのホスト名に関連付けられています。この要件は、動的検出のための仕様が存在しない場合に、クライアントが手動で管理者によって設定されているサーバーのみを使用すべきであることを示唆しているん。"
    },
    {
      "indent": 0,
      "text": "10.5. Network Address Translation",
      "section_title": true,
      "ja": "10.5. ネットワークアドレス変換"
    },
    {
      "indent": 3,
      "text": "Network Address Translation (NAT) is fundamentally incompatible with RADIUS/UDP. RADIUS/UDP uses the source IP address to determine the shared secret for the client, and NAT hides many clients behind one source IP address. As a result, RADIUS/UDP clients cannot be located behind a NAT gateway.",
      "ja": "ネットワークアドレス変換（NAT）は、RADIUS / UDPと根本的に互換性がありません。 RADIUS / UDPは、クライアントの共有秘密を決定するために、送信元IPアドレスを使用し、NATは、一つのソースIPアドレスの後ろに多くのクライアントを隠します。その結果、RADIUS / UDPクライアントは、NATゲートウェイの背後に配置することができません。"
    },
    {
      "indent": 3,
      "text": "In addition, port reuse on a NAT gateway means that packets from different clients may appear to come from the same source port on the NAT. That is, a RADIUS server may receive a RADIUS/DTLS packet from one source IP/port combination, followed by the reception of a RADIUS/UDP packet from that same source IP/port combination. If this behavior is allowed, then the server would have an inconsistent view of the client's security profile, allowing an attacker to choose the most insecure method.",
      "ja": "また、NATゲートウェイのポートの再利用は、異なるクライアントからのパケットをNATで同じソースポートから来るように見えることを意味します。すなわち、RADIUSサーバは、同一の送信元IP /ポートの組み合わせからRADIUS / UDPパケットの受信に続いて一方のソースIP /ポートの組み合わせからRADIUS / DTLSパケットを受信することができるされています。この動作が許可されている場合、サーバーは、攻撃者が最も安全でない方法を選択することができ、クライアントのセキュリティプロファイルの一貫性のないビューを持っているでしょう。"
    },
    {
      "indent": 3,
      "text": "If more than one client is located behind a NAT gateway, then every client behind the NAT MUST use a secure transport such as TLS or DTLS. As discussed below, a method for uniquely identifying each client MUST be used.",
      "ja": "複数のクライアントがNATゲートウェイの背後に配置されている場合は、NATの背後にあるすべてのクライアントは、TLSまたはDTLSなどの安全な輸送を使用しなければなりません。以下に説明するように、一意に各クライアントを識別するための方法を使用しなければなりません。"
    },
    {
      "indent": 0,
      "text": "10.6. Wildcard Clients",
      "section_title": true,
      "ja": "10.6. ワイルドカードクライアント"
    },
    {
      "indent": 3,
      "text": "Some RADIUS server implementations allow for \"wildcard\" clients -- that is, clients with an IPv4 netmask of other than 32 or an IPv6 netmask of other than 128. That practice is not recommended for RADIUS/UDP, as it means multiple clients will use the same shared secret.",
      "ja": "一部のRADIUSサーバの実装は、「ワイルドカード」のクライアントを可能に - つまり、32以外のIPv4のネットマスクまたは128それ練習以外のIPv6でのネットマスクを持つクライアントは、RADIUS / UDPにはお勧めできません、それは複数のクライアントが使用する手段として、同じ共有秘密。"
    },
    {
      "indent": 3,
      "text": "The use of RADIUS/DTLS can allow for the safe usage of wildcards. When RADIUS/DTLS is used with wildcards, clients MUST be uniquely identified using TLS parameters, and any certificate or PSK used MUST be unique to each client.",
      "ja": "RADIUS / DTLSを使用すると、ワイルドカードの安全な使用を可能にすることができます。 RADIUS / DTLSをワイルドカードと共に使用される場合、クライアントは一意TLSパラメータを用いて同定されなければならない、そして使用される任意の証明書またはPSKは、各クライアントに一意でなければなりません。"
    },
    {
      "indent": 0,
      "text": "10.7. Session Closing",
      "section_title": true,
      "ja": "10.7. セッション閉会"
    },
    {
      "indent": 3,
      "text": "Section 5.1.1, above, requires that DTLS sessions be closed when the transported RADIUS packets are malformed or fail the authenticator checks. The reason is that the session is expected to be used for transport of RADIUS packets only.",
      "ja": "セクション5.1.1は、上記搬送RADIUSパケットが不正であるか、またはオーセンティケータチェックを失敗したときDTLSセッションがクローズされることを要求します。その理由は、セッションのみRADIUSパケットの転送に使用されることが予想されていることです。"
    },
    {
      "indent": 3,
      "text": "Any non-RADIUS traffic on that session means the other party is misbehaving and is a potential security risk. Similarly, any RADIUS traffic failing authentication vector or Message-Authenticator validation means that two parties do not have a common shared secret, and the session is therefore unauthenticated and insecure.",
      "ja": "そのセッション上の任意の非RADIUSトラフィックは相手が不正な動作されることを意味し、潜在的なセキュリティリスクです。同様に、認証ベクトルまたはメッセージ認証の検証を失敗任意のRADIUSトラフィックは、両当事者が共通の共有秘密を持っていないことを意味し、セッションが認証されていないため、安全でないです。"
    },
    {
      "indent": 3,
      "text": "We wish to avoid the situation where a third party can send well-formed RADIUS packets that cause a DTLS session to close. Therefore, in other situations, the session SHOULD remain open in the face of non-conformant packets.",
      "ja": "私たちは、第三者がDTLSセッションを閉じるには原因整形RADIUSパケットを送ることができるような状況を回避したいです。したがって、他の状況では、セッションは、非準拠のパケットの面に開いたままにすべきです。"
    },
    {
      "indent": 0,
      "text": "10.8. Client Subsystems",
      "section_title": true,
      "ja": "10.8. クライアントサブシステム"
    },
    {
      "indent": 3,
      "text": "Many traditional clients treat RADIUS as subsystem-specific. That is, each subsystem on the client has its own RADIUS implementation and configuration. These independent implementations work for simple systems, but break down for RADIUS when multiple servers, fail-over, and load-balancing are required. They have even worse issues when DTLS is enabled.",
      "ja": "多くの伝統的なクライアントは、サブシステム固有としてRADIUSを扱います。これは、クライアント上の各サブシステムは、独自のRADIUSの実装と構成を有しています。これらの独立した実装では、単純なシステムのために働くが、時に複数のサーバーRADIUSのためにブレークダウン、フェイルオーバー、および負荷分散が必要とされています。 DTLSが有効になっているとき、彼らはさらに悪い問題を抱えています。"
    },
    {
      "indent": 3,
      "text": "As noted in Section 6.1, above, clients SHOULD use a local proxy that arbitrates all RADIUS traffic between the client and all servers. This proxy will encapsulate all knowledge about servers, including security policies, fail-over, and load-balancing. All client subsystems SHOULD communicate with this local proxy, ideally over a loopback address. The requirements on using strong shared secrets still apply.",
      "ja": "6.1節で述べたように、上記、クライアントは、クライアントとのすべてのサーバー間のすべてのRADIUSトラフィックを調停ローカルプロキシを使用する必要があります。このプロキシは、セキュリティポリシーを含め、サーバーに関するすべての知識をカプセル化し、フェイルオーバー、およびロード・バランシングします。すべてのクライアント・サブシステムは、理想的にはループバックアドレス上で、このローカルプロキシと通信する必要があります。強力な共有秘密を使用して上の要件が適用されます。"
    },
    {
      "indent": 3,
      "text": "The benefit of this configuration is that there is one place in the client that arbitrates all RADIUS traffic. Subsystems that do not implement DTLS can remain unaware of DTLS. DTLS sessions opened by the proxy can remain open for long periods of time, even when client subsystems are restarted. The proxy can do RADIUS/UDP to some servers and RADIUS/DTLS to others.",
      "ja": "この構成の利点は、すべてのRADIUSトラフィックを調停クライアント内の1つの場所があるということです。 DTLSを実装していないサブシステムは、DTLSを知らないままにすることができます。プロキシによって開かれたDTLSセッションはクライアント・サブシステムが再起動された場合でも、長時間開いたままにすることができます。プロキシは、他の人にいくつかのサーバおよびRADIUS / DTLSにRADIUS / UDPを行うことができます。"
    },
    {
      "indent": 3,
      "text": "Delegation of responsibilities and separation of tasks are important security principles. By moving all RADIUS/DTLS knowledge to a DTLS-aware proxy, security analysis becomes simpler, and enforcement of correct security becomes easier.",
      "ja": "責任とタスクの分離の代表団は、重要なセキュリティの原則です。 DTLSを意識したプロキシにすべてのRADIUS / DTLSの知識を移動することにより、セキュリティ分析が簡単になり、正しいセキュリティの施行が容易になります。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11.参考文献"
    },
    {
      "indent": 0,
      "text": "11.1. Normative References",
      "section_title": true,
      "ja": "11.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC2865] Rigney, C., Willens, S., Rubens, A., and W. Simpson, \"Remote Authentication Dial In User Service (RADIUS)\", RFC 2865, June 2000.",
      "ja": "[RFC2865] Rigney、C.、ウィレンス、S.、ルーベン、A.、およびW.シンプソン、RFC 2865、2000年6月 \"ユーザーサービス（RADIUS）でリモート認証ダイヤル\"。"
    },
    {
      "indent": 3,
      "text": "[RFC3539] Aboba, B. and J. Wood, \"Authentication, Authorization and Accounting (AAA) Transport Profile\", RFC 3539, June 2003.",
      "ja": "[RFC3539] Aboba、B.、およびJ.ウッド、 \"認証、認可およびアカウンティング（AAA）のトランスポート・プロファイル\"、RFC 3539、2003年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC5077] Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig, \"Transport Layer Security (TLS) Session Resumption without Server-Side State\", RFC 5077, January 2008.",
      "ja": "[RFC5077] Salowey、J.、周、H.、Eronen、P.、およびH. Tschofenig、 \"サーバー側の状態なしのトランスポート層セキュリティ（TLS）セッション再開\"、RFC 5077、2008年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC5080] Nelson, D. and A. DeKok, \"Common Remote Authentication Dial In User Service (RADIUS) Implementation Issues and Suggested Fixes\", RFC 5080, December 2007.",
      "ja": "[RFC5080]ネルソン、D.とA. DeKok、RFC 5080、2007年12月 \"ユーザーサービス（RADIUS）の実装の問題と推奨修正に共通のリモート認証ダイヤル\"。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246]ダークス、T.およびE.レスコラ、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.2\"、RFC 5246、2008年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC5997] DeKok, A., \"Use of Status-Server Packets in the Remote Authentication Dial In User Service (RADIUS) Protocol\", RFC 5997, August 2010.",
      "ja": "[RFC5997] DeKok、A.、 \"利用ユーザーサービス（RADIUS）でリモート認証ダイヤルのStatus-Serverのパケットのプロトコル\"、RFC 5997、2010年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC6347] Rescorla, E. and N. Modadugu, \"Datagram Transport Layer Security Version 1.2\", RFC 6347, January 2012.",
      "ja": "[RFC6347]レスコラ、E.およびN. Modadugu、 \"データグラムトランスポート層セキュリティバージョン1.2\"、RFC 6347、2012年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC6520] Seggelmann, R., Tuexen, M., and M. Williams, \"Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) Heartbeat Extension\", RFC 6520, February 2012.",
      "ja": "[RFC6520] Seggelmann、R.、Tuexen、M.、およびM.ウィリアムズ、 \"トランスポート層セキュリティ（TLS）およびデータグラムトランスポート層セキュリティ（DTLS）ハートビート拡張\"、RFC 6520、2012年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC6613] DeKok, A., \"RADIUS over TCP\", RFC 6613, May 2012.",
      "ja": "[RFC6613] DeKok、A.、 \"TCP上のRADIUS\"、RFC 6613、2012月。"
    },
    {
      "indent": 3,
      "text": "[RFC6614] Winter, S., McCauley, M., Venaas, S., and K. Wierenga, \"Transport Layer Security (TLS) Encryption for RADIUS\", RFC 6614, May 2012.",
      "ja": "[RFC6614]冬、S.、マッコーリー、M.、Venaas、S.、およびK. Wierenga、 \"RADIUSのためのトランスポート層セキュリティ（TLS）暗号化\"、RFC 6614、2012年5月。"
    },
    {
      "indent": 0,
      "text": "11.2. Informative References",
      "section_title": true,
      "ja": "11.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC1321] Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321, April 1992.",
      "ja": "[RFC1321]のRivest、R.、 \"MD5メッセージダイジェストアルゴリズム\"、RFC 1321、1992年4月。"
    },
    {
      "indent": 3,
      "text": "[RFC2866] Rigney, C., \"RADIUS Accounting\", RFC 2866, June 2000.",
      "ja": "[RFC2866] Rigney、C.、 \"RADIUSアカウンティング\"、RFC 2866、2000年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC4107] Bellovin, S. and R. Housley, \"Guidelines for Cryptographic Key Management\", BCP 107, RFC 4107, June 2005.",
      "ja": "[RFC4107] Bellovin氏、S.とR. Housley氏、 \"暗号鍵管理のためのガイドライン\"、BCP 107、RFC 4107、2005年6月。"
    },
    {
      "indent": 3,
      "text": "[RFC5176] Chiba, M., Dommety, G., Eklund, M., Mitton, D., and B. Aboba, \"Dynamic Authorization Extensions to Remote Authentication Dial In User Service (RADIUS)\", RFC 5176, January 2008.",
      "ja": "、RFC 5176、2008年1月[RFC5176]千葉、M.、Dommety、G.、エクランド、M.、ミトン、D.、およびB. Aboba、 \"ユーザーサービス（RADIUS）でリモート認証ダイヤルへのダイナミックな承認拡張機能\"。"
    },
    {
      "indent": 3,
      "text": "[RFC6421] Nelson, D., Ed., \"Crypto-Agility Requirements for Remote Authentication Dial-In User Service (RADIUS)\", RFC 6421, November 2011.",
      "ja": "[RFC6421]ネルソン、D.編、RFC 6421、2011年11月、 \"リモート認証ダイヤルインユーザーサービス（RADIUS）のための暗号・敏捷性の要件\"。"
    },
    {
      "indent": 3,
      "text": "[RFC6982] Sheffer, Y. and A. Farrel, \"Improving Awareness of Running Code: The Implementation Status Section\", RFC 6982, July 2013.",
      "ja": "[RFC6982]シェファー、Y.およびA.ファレル、 \"コードの実行の意識の改善：実施状況セクション\"、RFC 6982、2013年7月。"
    },
    {
      "indent": 3,
      "text": "[MD5Attack] Dobbertin, H., \"The Status of MD5 After a Recent Attack\", CryptoBytes Vol.2 No.2, Summer 1996.",
      "ja": "[MD5Attack] Dobbertin、H.、 \"最近の攻撃の後MD5の状況\"、CryptoBytes第2巻第2号、夏1996。"
    },
    {
      "indent": 3,
      "text": "[MD5Break] Wang, X. and H. Yu, \"How to Break MD5 and Other Hash Functions\", EUROCRYPT '05 Proceedings of the 24th annual international conference on Theory and Applications of Cryptographic Techniques, pp. 19-35, ISBN 3-540-25910-4, 2005.",
      "ja": "[MD5Break]王、X.およびH.ユーは、EUROCRYPT理論と暗号技術の応用上の第24回年次国際会議の議事録'05、頁19-35、ISBN 3  - 「どのようにMD5および他のハッシュ関数を破ります」 540-25910-4、2005。"
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Parts of the text in Section 3 defining the Request and Response Authenticators were taken with minor edits from [RFC2865], Section 3.",
      "ja": "リクエストとレスポンスのオーセンティケータを定義するセクション3のテキストの一部は、[RFC2865]から細部の編集、第3節で撮影しました。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Alan DeKok The FreeRADIUS Server Project URI: http://freeradius.org EMail: aland@freeradius.org",
      "ja": "アラン煎じFreeRADIUSサーバプロジェクトURI：http://freeradius.org Eメール：aland@freeradius.org"
    }
  ]
}