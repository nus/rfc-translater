{
  "title": {
    "text": "RFC 7628 - A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth",
    "ja": "RFC 7628 - 簡易認証セキュリティー層（SASL）のOAuthのた​​めの一連のメカニズム"
  },
  "number": 7628,
  "created_at": "2019-10-31 10:38:33.936819+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                          W. Mills\nRequest for Comments: 7628                                     Microsoft\nCategory: Standards Track                                   T. Showalter\nISSN: 2070-1721\n                                                           H. Tschofenig\n                                                                ARM Ltd.\n                                                             August 2015",
      "raw": true
    },
    {
      "indent": 2,
      "text": "A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth",
      "ja": "簡易認証セキュリティー層（SASL）のOAuthのた​​めの一連のメカニズム"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "OAuth enables a third-party application to obtain limited access to a protected resource, either on behalf of a resource owner by orchestrating an approval interaction or by allowing the third-party application to obtain access on its own behalf.",
      "ja": "OAuthのは、リソースの所有者に代わって承認の相互作用を編成するか、サードパーティ製のアプリケーションが独自に代わってアクセス権を取得できるようにすることで、どちらか、保護されたリソースへのアクセスが制限されて得るために、サードパーティのアプリケーションを可能にします。"
    },
    {
      "indent": 3,
      "text": "This document defines how an application client uses credentials obtained via OAuth over the Simple Authentication and Security Layer (SASL) to access a protected resource at a resource server. Thereby, it enables schemes defined within the OAuth framework for non-HTTP-based application protocols.",
      "ja": "この文書では、アプリケーションクライアントがリソースサーバで保護されたリソースにアクセスするための簡易認証セキュリティー層（SASL）上でのOAuth経由で取得した資格情報を使用する方法を定義します。これにより、非HTTPベースのアプリケーションプロトコルのOAuthフレームワーク内で定義されたスキームを可能にします。"
    },
    {
      "indent": 3,
      "text": "Clients typically store the user's long-term credential. This does, however, lead to significant security vulnerabilities, for example, when such a credential leaks. A significant benefit of OAuth for usage in those clients is that the password is replaced by a shared secret with higher entropy, i.e., the token. Tokens typically provide limited access rights and can be managed and revoked separately from the user's long-term password.",
      "ja": "クライアントは通常、ユーザの長期的な資格情報を格納します。これは、しかし、たとえば、そのような資格情報漏洩のため、重大なセキュリティ上の脆弱性につながるん。これらのクライアントでの使用のためのOAuthの重要な利点は、パスワードがより高いエントロピー、すなわち、トークンを使用して共有シークレットによって置換されていることです。トークンは通常、制限されたアクセス権を提供し、管理し、利用者の長期的なパスワードとは別に取り消すことができます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 5741のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7628.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7628で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2015 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2015 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5\n3.  OAuth SASL Mechanism Specifications . . . . . . . . . . . . .   6\n  3.1.  Initial Client Response . . . . . . . . . . . . . . . . .   7\n    3.1.1.  Reserved Key/Values . . . . . . . . . . . . . . . . .   8\n  3.2.  Server's Response . . . . . . . . . . . . . . . . . . . .   8\n    3.2.1.  OAuth Identifiers in the SASL Context . . . . . . . .   9\n    3.2.2.  Server Response to Failed Authentication  . . . . . .   9\n    3.2.3.  Completing an Error Message Sequence  . . . . . . . .  10\n  3.3.  OAuth Access Token Types using Keyed Message Digests  . .  11\n4.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  12\n  4.1.  Successful Bearer Token Exchange  . . . . . . . . . . . .  12\n  4.2.  Successful OAuth 1.0a Token Exchange  . . . . . . . . . .  13\n  4.3.  Failed Exchange . . . . . . . . . . . . . . . . . . . . .  14\n  4.4.  SMTP Example of a Failed Negotiation  . . . . . . . . . .  15\n5.  Security Considerations . . . . . . . . . . . . . . . . . . .  16\n6.  Internationalization Considerations . . . . . . . . . . . . .  17\n7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  18\n  7.1.  SASL Registration . . . . . . . . . . . . . . . . . . . .  18\n8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  19\n  8.1.  Normative References  . . . . . . . . . . . . . . . . . .  19\n  8.2.  Informative References  . . . . . . . . . . . . . . . . .  20\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  21\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  21",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "OAuth 1.0a [RFC5849] and OAuth 2.0 [RFC6749] are protocol frameworks that enable a third-party application to obtain limited access to a protected resource, either by orchestrating an approval interaction on behalf of a resource owner or by allowing the third-party application to obtain access on its own behalf.",
      "ja": "OAuth 1.0A [RFC5849]とOAuth 2.0の[RFC6749]保護されたリソースへの制限されたアクセスを取得するために、サードパーティのアプリケーションを有効にプロトコルフレームワーク、いずれかのリソースの所有者に代わって承認相互作用を編成することによって、またはサードパーティを可能にすることによるものですアプリケーションは、独自に代わってアクセスを得ることができます。"
    },
    {
      "indent": 3,
      "text": "The core OAuth 2.0 specification [RFC6749] specifies the interaction between the OAuth client and the authorization server; it does not define the interaction between the OAuth client and the resource server for the access to a protected resource using an access token. Instead, the OAuth client to resource server interaction is described in separate specifications, such as the bearer token specification [RFC6750]. OAuth 1.0a includes the protocol specification for the communication between the OAuth client and the resource server in [RFC5849].",
      "ja": "コアOAuth 2.0の仕様[RFC6749]はOAuthクライアントと認証サーバとの間の相互作用を指定します。それはOAuthのクライアントとアクセストークンを使用して保護されたリソースへのアクセスのためのリソースサーバ間の相互作用を定義していません。代わりに、サーバとの対話をリソースへのOAuthクライアントは、ベアラトークン仕様[RFC6750]などの別仕様に記載されています。 OAuth 1.0AはOAuthクライアントと[RFC5849]でのリソースサーバの間の通信のためのプロトコル仕様を含みます。"
    },
    {
      "indent": 3,
      "text": "The main use cases for OAuth 1.0a and OAuth 2.0 have so far focused on an HTTP-based [RFC7230] environment only. This document integrates OAuth 1.0a and OAuth 2.0 into non-HTTP-based applications using the integration into the Simple Authentication and Security Layer (SASL) [RFC4422]. Hence, this document takes advantage of the OAuth protocol and its deployment base to provide a way to use SASL to gain access to resources when using non-HTTP-based protocols, such as the Internet Message Access Protocol (IMAP) [RFC3501] and the Simple Mail Transfer Protocol (SMTP) [RFC5321]. This document gives examples of use in IMAP and SMTP.",
      "ja": "OAuth 1.0aのとOAuth 2.0のための主な使用例は、これまでのところ唯一のHTTPベース[RFC7230]環境に焦点を当てています。この文書では、簡易認証セキュリティー層（SASL）[RFC4422]への統合を使用して、非HTTPベースのアプリケーションへのOAuth 1.0aのとOAuth 2.0のを統合しています。したがって、この文書は、インターネットメッセージアクセスプロトコル（IMAP）などの非HTTPベースのプロトコル、[RFC3501]を使用する場合のリソースにアクセスするためにSASLを使用する方法を提供するOAuthプロトコルおよびその展開基地を利用すると簡易メール転送プロトコル（SMTP）[RFC5321]。この文書は、IMAPとSMTPでの使用例を示します。"
    },
    {
      "indent": 3,
      "text": "To illustrate the impact of integrating this specification into an OAuth-enabled application environment, Figure 1 shows the abstract message flow of OAuth 2.0 [RFC6749]. As indicated in the figure, this document impacts the exchange of messages (E) and (F) since SASL is used for interaction between the client and the resource server instead of HTTP.",
      "ja": "OAuthの対応アプリケーション環境にこの仕様を統合の影響を示すために、図1は、OAuth 2.0の[RFC6749]の抽象メッセージフローを示します。 SASLは、クライアントとリソースサーバの代わりにHTTPとの間の相互作用のために使用されるので、メッセージ（E）及び（F）の図に示すように、これは、文書の影響交換。"
    },
    {
      "indent": 3,
      "text": "                                                           ----+\n+--------+                                  +---------------+  |\n|        |--(A)-- Authorization Request --->|   Resource    |  |\n|        |                                  |    Owner      |  |Plain\n|        |<-(B)------ Access Grant ---------|               |  |OAuth\n|        |                                  +---------------+  |2.0\n|        |                                                     |\n|        |         Client Credentials &     +---------------+  |\n|        |--(C)------ Access Grant -------->| Authorization |  |\n| Client |                                  |    Server     |  |\n|        |<-(D)------ Access Token ---------|               |  |\n|        |      (w/ Optional Refresh Token) +---------------+  |\n|        |                                                 ----+\n|        |                                                 ----+\n|        |                                  +---------------+  |\n|        |                                  |               |  |OAuth\n|        |--(E)------ Access Token -------->|   Resource    |  |over\n|        |                                  |    Server     |  |SASL\n|        |<-(F)---- Protected Resource -----|               |  |\n|        |                                  |               |  |\n+--------+                                  +---------------+  |\n                                                           ----+",
      "raw": true
    },
    {
      "indent": 21,
      "text": "Figure 1: OAuth 2.0 Protocol Flow",
      "ja": "図1：OAuth 2.0のプロトコルフロー"
    },
    {
      "indent": 3,
      "text": "SASL is a framework for providing authentication and data security services in connection-oriented protocols via replaceable authentication mechanisms. It provides a structured interface between protocols and mechanisms. The resulting framework allows new protocols to reuse existing authentication mechanisms and allows old protocols to make use of new authentication mechanisms. The framework also provides a protocol for securing subsequent exchanges within a data security layer.",
      "ja": "SASLは、交換可能な認証メカニズムを経由して接続指向のプロトコルで認証とデータのセキュリティサービスを提供するためのフレームワークです。これは、プロトコルと機構との間の構造化されたインターフェースを提供します。結果のフレームワークは、新しいプロトコルが既存の認証メカニズムを再利用することを可能にし、古いプロトコルは、新たな認証メカニズムを利用することができます。フレームワークは、データセキュリティ層内の後続の交換を確保するためのプロトコルを提供します。"
    },
    {
      "indent": 3,
      "text": "When OAuth is integrated into SASL, the high-level steps are as follows:",
      "ja": "OAuthのをSASLに統合される場合、以下のように、高レベルの手順は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "(A) The client requests authorization from the resource owner. The authorization request can be made directly to the resource owner (as shown) or indirectly via the authorization server as an intermediary.",
      "ja": "（A）クライアントは、リソースの所有者から許可を要求します。認証要求は、リソースの所有者に直接行わ（図示のように）または間接的に仲介者として認証サーバを介して行うことができます。"
    },
    {
      "indent": 3,
      "text": "(B) The client receives an authorization grant, which is a credential representing the resource owner's authorization, expressed using one of the grant types defined in [RFC6749] or [RFC5849] or using an extension grant type. The authorization grant type depends on the method used by the client to request authorization and the types supported by the authorization server.",
      "ja": "（B）クライアントがリソースの所有者の許可を表す信用証明書で認可グラントを受信し、[RFC6749]または[RFC5849]または拡張グラントタイプを使用して定義された助成金型のいずれかを使用して発現させました。承認許可タイプは、許可を要求するためにクライアントが使用する方法と、認証サーバによってサポートされているタイプに依存します。"
    },
    {
      "indent": 3,
      "text": "(C) The client requests an access token by authenticating with the authorization server and presenting the authorization grant.",
      "ja": "（C）クライアントは、認証サーバーとの認証と承認の助成金を提示することによって、アクセストークンを要求します。"
    },
    {
      "indent": 3,
      "text": "(D) The authorization server authenticates the client and validates the authorization grant, and if valid, it issues an access token.",
      "ja": "（D）、認可サーバーはクライアントを認証し、認証許可を検証し、有効であれば、それはアクセストークンを発行します。"
    },
    {
      "indent": 3,
      "text": "(E) The client requests the protected resource from the resource server and authenticates it by presenting the access token.",
      "ja": "（E）は、クライアントがリソースサーバから保護されたリソースを要求し、アクセストークンを提示することによって、それを認証します。"
    },
    {
      "indent": 3,
      "text": "(F) The resource server validates the access token, and if valid, it indicates a successful authentication.",
      "ja": "（F）は、リソースサーバーはアクセストークンを検証し、有効であれば、それは成功した認証を示します。"
    },
    {
      "indent": 3,
      "text": "Again, steps (E) and (F) are not defined in [RFC6749] (but are described in, for example, [RFC6750] for the OAuth bearer token instead) and are the main functionality specified within this document. Consequently, the message exchange shown in Figure 1 is the result of this specification. The client will generally need to determine the authentication endpoints (and perhaps the service endpoints) before the OAuth 2.0 protocol exchange messages in steps (A)-(D) are executed. The discovery of the resource owner, authorization server endpoints, and client registration are outside the scope of this specification. The client must discover the authorization endpoints using a discovery mechanism such as OpenID Connect Discovery (OIDCD) [OpenID.Discovery] or WebFinger using host-meta [RFC7033]. Once credentials are obtained, the client proceeds to steps (E) and (F) defined in this specification. Authorization endpoints MAY require client registration, and generic clients SHOULD support the Dynamic Client Registration protocol [RFC7591].",
      "ja": "再び、ステップ（E）及び（F）は、[RFC6749]に定義されていない（しかしに記載され、例えば、[RFC6750]のOAuthベアラのトークンの代わりに）、このドキュメント内で指定された主な機能です。従って、図1に示すメッセージ交換は、本明細書の結果です。 （D）が実行される - クライアントは、一般的手順（A）でのOAuth 2.0プロトコル交換メッセージが前に認証エンドポイント（及び多分サービスエンドポイント）を決定する必要があります。リソースの所有者、認可サーバ、エンドポイント、およびクライアント登録の発見は、この仕様の範囲外です。クライアントは、OpenIDの接続ディスカバリー（OIDCD）[OpenID.Discovery]またはホスト・メタ[RFC7033]を使用してWebFingerとして検出メカニズムを使用して、認可エンドポイントを検出する必要があります。資格情報が取得されると、クライアントはこの仕様で定義された手順（E）及び（F）に進みます。認証エンドポイントは、クライアントの登録を必要とすることができ、一般的なクライアントは、動的クライアントの登録プロトコル[RFC7591]をサポートすべきです。"
    },
    {
      "indent": 3,
      "text": "OAuth 1.0a follows a similar model but uses a different terminology and does not separate the resource server from the authorization server.",
      "ja": "OAuth 1.0aのは同様のモデルに従いますが、異なる用語を使用し、認証サーバからのリソースサーバを分離しません。"
    },
    {
      "indent": 0,
      "text": "2. Terminology",
      "section_title": true,
      "ja": "2.用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "キーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、 \"SHALL\"、 \"SHOULD\"、 \"ないもの\"、 \"推奨\" \"ない（SHOULD NOT）\"、 \"MAY\"、 \"推奨NOT\"、および「OPTIONAL 「本書では[RFC2119]で説明されるように解釈されるべきです。"
    },
    {
      "indent": 3,
      "text": "The reader is assumed to be familiar with the terms used in the OAuth 2.0 specification [RFC6749] and SASL [RFC4422].",
      "ja": "読者はOAuth 2.0の仕様[RFC6749]とSASL [RFC4422]で使用される用語に精通していることを想定しています。"
    },
    {
      "indent": 3,
      "text": "In examples, \"C:\" and \"S:\" indicate lines sent by the client and server, respectively. Line breaks have been inserted for readability.",
      "ja": "実施例において、「C：」および「S：」は、それぞれ、クライアントとサーバによって送信されたラインを示します。改行は読みやすくするために挿入されています。"
    },
    {
      "indent": 3,
      "text": "Note that the IMAP SASL specification requires base64 encoding, as specified in Section 4 of [RFC4648].",
      "ja": "[RFC4648]のセクション4で指定されるようにIMAP SASL仕様は、base64エンコーディングを必要とすることに留意されたいです。"
    },
    {
      "indent": 0,
      "text": "3. OAuth SASL Mechanism Specifications",
      "section_title": true,
      "ja": "3. OAuthのSASLメカニズムの仕様"
    },
    {
      "indent": 3,
      "text": "SASL is used as an authentication framework in a variety of application-layer protocols. This document defines the following SASL mechanisms for usage with OAuth:",
      "ja": "SASLは、アプリケーション層プロトコルの様々な認証フレームワークとして使用されます。この文書では、OAuthのでの使用のために、以下のSASLメカニズムを定義しています。"
    },
    {
      "indent": 6,
      "text": "OAUTHBEARER: OAuth 2.0 bearer tokens, as described in [RFC6750]. RFC 6750 uses Transport Layer Security (TLS) [RFC5246] to secure the protocol interaction between the client and the resource server.",
      "ja": "OAUTHBEARER：OAuth 2.0のベアラトークン、[RFC6750]に記載されているように。 RFC 6750は、クライアントとリソースサーバ間のプロトコルの相互作用を確保するためにトランスポート層セキュリティ（TLS）[RFC5246]を使用しています。"
    },
    {
      "indent": 6,
      "text": "OAUTH10A: OAuth 1.0a Message Authentication Code (MAC) tokens (using the HMAC-SHA1 keyed message digest), as described in Section 3.4.2 of [RFC5849].",
      "ja": "OAUTH10A：のOAuth 1.0Aメッセージ認証コード（MAC）トークン（HMAC-SHA1キー付きメッセージダイジェストを使用して）、[RFC5849]のセクション3.4.2に記載されているように。"
    },
    {
      "indent": 3,
      "text": "New extensions may be defined to add additional OAuth Access Token Types. Such a new SASL OAuth mechanism can be added by registering the new name(s) with IANA in the SASL Mechanisms registry and citing this specification for the further definition.",
      "ja": "新しい拡張機能は、追加のOAuthアクセストークンタイプを追加するように定義することができます。このような新しいSASLのOAuthメカニズムは、SASLメカニズムのレジストリにIANAに新しい名前（複数可）を登録し、さらに定義については、この仕様書を引用して追加することができます。"
    },
    {
      "indent": 3,
      "text": "SASL mechanisms using this document as their definition do not provide a data security layer; that is, they cannot provide integrity or confidentiality protection for application messages after the initial authentication. If such protection is needed, TLS or some similar solution should be used. Additionally, for the two mechanisms specified in this document, TLS MUST be used for OAUTHBEARER to protect the bearer token; for OAUTH10A, the use of TLS is RECOMMENDED.",
      "ja": "彼らの定義として、この文書を使用してSASLメカニズムは、データセキュリティ層を提供していません。つまり、彼らは最初の認証後にアプリケーション・メッセージの完全性や機密性の保護を提供することはできません。そのような保護が必要な場合は、TLSまたはいくつかの同様のソリューションを使用する必要があります。また、本書で指定された2つのメカニズムのために、TLSは、ベアラトークンを保護するためにOAUTHBEARERために使用されなければなりません。 OAUTH10Aのために、TLSの使用が推奨されます。"
    },
    {
      "indent": 3,
      "text": "These mechanisms are client initiated and in lockstep, with the server always replying to a client message. In the case where the client has and correctly uses a valid token, the flow is:",
      "ja": "これらのメカニズムは、サーバが常にクライアントのメッセージに返信すると、クライアント開始し、ロックステップです。クライアントが有効なトークンを持っているし、正しく使用する場合には、フローは次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. Client sends a valid and correct initial client response.",
      "section_title": true,
      "ja": "1.クライアントが有効で正しい初期のクライアント応答を送信します。"
    },
    {
      "indent": 3,
      "text": "2. Server responds with a successful authentication.",
      "section_title": true,
      "ja": "2.サーバーは認証が成功で応答します。"
    },
    {
      "indent": 3,
      "text": "In the case where authentication fails, the server sends an error result; the client MUST then send an additional message to the server in order to allow the server to finish the exchange. Some protocols and common SASL implementations do not support both sending a SASL message and finalizing a SASL negotiation. The additional client message in the error case deals with this problem. This exchange is:",
      "ja": "認証が失敗した場合、サーバはエラー結果を送信します。次に、クライアントは、サーバーが交換を完了することを可能にするために、サーバーに追加メッセージを送らなければなりません。いくつかのプロトコルと、共通のSASLの実装は、SASLメッセージを送信し、SASLの交渉を最終決定の両方をサポートしていません。エラーのない場合、追加のクライアント・メッセージは、この問題を扱っています。この交換は、次のとおりです。"
    },
    {
      "indent": 3,
      "text": "1. Client sends an invalid initial client response.",
      "section_title": true,
      "ja": "1.クライアントは、無効な初期のクライアント応答を送信します。"
    },
    {
      "indent": 3,
      "text": "2. Server responds with an error message.",
      "section_title": true,
      "ja": "2.サーバーはエラーメッセージで応答します。"
    },
    {
      "indent": 3,
      "text": "3. Client sends a dummy client response.",
      "section_title": true,
      "ja": "3.クライアントは、ダミーのクライアント応答を送信します。"
    },
    {
      "indent": 3,
      "text": "4. Server fails the authentication.",
      "section_title": true,
      "ja": "4.サーバーは認証が失敗しました。"
    },
    {
      "indent": 0,
      "text": "3.1. Initial Client Response",
      "section_title": true,
      "ja": "3.1. 初期のクライアント応答"
    },
    {
      "indent": 3,
      "text": "Client responses are a GS2 [RFC5801] header followed by zero or more key/value pairs, or it may be empty. The gs2-header rule is defined here as a placeholder for compatibility with GS2 if a GS2 mechanism is formally defined, but this document does not define one. The key/ value pairs take the place of the corresponding HTTP headers and values to convey the information necessary to complete an OAuth-style HTTP authorization. Unknown key/value pairs MUST be ignored by the server. The ABNF [RFC5234] syntax is:",
      "ja": "クライアント応答は、ゼロ以上のキー/値のペアが続くGS2 [RFC5801]ヘッダである、またはそれは空であってもよいです。 GS2ヘッダルールはGS2機構が正式に定義されている場合GS2との互換性のためのプレースホルダとしてここで定義されているが、この文書は、いずれかを定義していません。キー/値のペアは、OAuthのスタイルのHTTP認証を完了するのに必要な情報を伝えるために、対応するHTTPヘッダと値の場所を取ります。不明なキー/値のペアは、サーバによって無視されなければなりません。 ABNF [RFC5234]構文は次のとおりです。"
    },
    {
      "indent": 3,
      "text": " kvsep = %x01 key = 1*(ALPHA) value = *(VCHAR / SP / HTAB / CR / LF ) kvpair = key \"=\" value kvsep ;;gs2-header = See RFC 5801 client-resp = (gs2-header kvsep *kvpair kvsep) / kvsep",
      "ja": "kvsep =％X01キー= 1 *（ALPHA）値= *（VCHAR / SP / HTAB / CR / LF）kvpair =キー \"=\" 値kvsep ;; GS2ヘッダー= RFC 5801クライアント-RESP =（GS2ヘッダを見ますkvsep * kvpairのkvsep）/ kvsep"
    },
    {
      "indent": 3,
      "text": "The GS2 header MAY include the username associated with the resource being accessed, the \"authzid\". It is worth noting that application protocols are allowed to require an authzid, as are specific server implementations.",
      "ja": "リソースに関連付けられたユーザ名を含むかもしれGS2ヘッダは、「authzidは」アクセス中。これは、特定のサーバー実装されているように、アプリケーション・プロトコルは、authzidはを必要とするように許可されていることは注目に値します。"
    },
    {
      "indent": 3,
      "text": "The client response consisting of only a single kvsep is used only when authentication fails and is only valid in that context. If sent as the first message from the client, the server MAY simply fail the authentication without returning discovery information since there is no user or server name indication.",
      "ja": "認証が失敗し、そのコンテキストでのみ有効である場合にのみ、単一のkvsepからなるクライアントの応答にのみ使用されます。クライアントからの最初のメッセージとして送信された場合、サーバは単にユーザーまたはサーバー名の表示がないため、発見情報を返さずに認証を失敗することがあります。"
    },
    {
      "indent": 3,
      "text": "The following keys and corresponding values are defined in the client response:",
      "ja": "以下のキーと対応する値は、クライアントの応答で定義されています。"
    },
    {
      "indent": 6,
      "text": "auth (REQUIRED): The payload that would be in the HTTP Authorization header if this OAuth exchange was being carried out over HTTP.",
      "ja": "AUTH（必須）：このOAuthの交換がHTTP経由で行われた場合は、HTTP認証ヘッダであろうペイロード。"
    },
    {
      "indent": 6,
      "text": "host: Contains the hostname to which the client connected. In an HTTP context, this is the value of the HTTP Host header.",
      "ja": "ホストは、クライアントが接続先のホスト名が含まれています。 HTTPの文脈では、これはHTTPホストヘッダの値です。"
    },
    {
      "indent": 6,
      "text": "port: Contains the destination port that the client connected to, represented as a decimal positive integer string without leading zeros.",
      "ja": "ポート：先行ゼロなしの小数正の整数文字列として表され、クライアントが接続先ポートが含まれています。"
    },
    {
      "indent": 3,
      "text": "For OAuth token types such as OAuth 1.0a that use keyed message digests, the client MUST send host and port number key/values, and the server MUST fail an authorization request requiring keyed message digests that are not accompanied by host and port values. In OAuth 1.0a, for example, the so-called \"signature base string calculation\" includes the reconstructed HTTP URL.",
      "ja": "キー付きメッセージダイジェストを使用するなどのOAuth 1.0aのようOAuthのトーク​​ンタイプでは、クライアントがホストとポート番号のキー/値を送らなければなりませんし、サーバがホストとポートの値を伴わないキー付きメッセージダイジェストを要求する認証要求に失敗しなければなりません。 OAuth 1.0Aでは、例えば、いわゆる「署名ベース文字列演算は、」再構成されたHTTP URLを含みます。"
    },
    {
      "indent": 0,
      "text": "3.1.1. Reserved Key/Values",
      "section_title": true,
      "ja": "3.1.1. 予約済みのキー/値"
    },
    {
      "indent": 3,
      "text": "In these mechanisms, values for path, query string and post body are assigned default values. OAuth authorization schemes MAY define usage of these in the SASL context and extend this specification. For OAuth Access Token Types that include a keyed message digest of the request, the default values MUST be used unless explicit values are provided in the client response. The following key values are reserved for future use:",
      "ja": "これらのメカニズムでは、パス、クエリ文字列とポスト本体の値はデフォルト値が割り当てられます。 OAuth認証スキームは、SASLコンテキストでこれらの使用方法を定義し、この仕様を拡張することができます。明示的な値は、クライアントの応答で提供されていない限り、要求のキー付きメッセージダイジェストを含めるのOAuthアクセストークンタイプの場合、デフォルト値を使用しなければなりません。次のキーの値は、将来の使用のために予約されています。"
    },
    {
      "indent": 6,
      "text": "mthd (RESERVED): HTTP method; the default value is \"POST\".",
      "ja": "mthd（RESERVED）：HTTPメソッド。デフォルト値は「POST」です。"
    },
    {
      "indent": 6,
      "text": "path (RESERVED): HTTP path data; the default value is \"/\".",
      "ja": "経路（RESERVED）：HTTPパスデータ。デフォルト値は「/」です。"
    },
    {
      "indent": 6,
      "text": "post (RESERVED): HTTP post data; the default value is the empty string (\"\").",
      "ja": "ポスト（RESERVED）：HTTP POSTデータ。デフォルト値は空の文字列（「」）です。"
    },
    {
      "indent": 6,
      "text": "qs (RESERVED): The HTTP query string; the default value is the empty string (\"\").",
      "ja": "適量（RESERVED）：HTTPクエリ文字列。デフォルト値は空の文字列（「」）です。"
    },
    {
      "indent": 0,
      "text": "3.2. Server's Response",
      "section_title": true,
      "ja": "3.2. サーバの応答"
    },
    {
      "indent": 3,
      "text": "The server validates the response according to the specification for the OAuth Access Token Types used. If the OAuth Access Token Type utilizes a keyed message digest of the request parameters, then the client must provide a client response that satisfies the data requirements for the scheme in use.",
      "ja": "サーバーは、使用のOAuthアクセストークンタイプの仕様に応じた応答を検証します。 OAuthのアクセストークンタイプがリクエストパラメータのキー付きメッセージダイジェストを利用した場合、クライアントは、使用中のスキームのデータ要件を満たすクライアントの応答を提供しなければなりません。"
    },
    {
      "indent": 3,
      "text": "The server fully validates the client response before generating a server response; this will necessarily include the validation steps listed in the specification for the OAuth Access Token Type used. However, additional validation steps may be needed, depending on the particular application protocol making use of SASL. In particular, values included as kvpairs in the client response (such as host and port) that correspond to values known to the application server by some other mechanism (such as an application protocol data unit or preconfigured values) MUST be validated to match between the initial client response and the other source(s) of such information. As a concrete example, when SASL is used over IMAP to an IMAP server for a single domain, the hostname can be available via configuration; this hostname must be validated to match the value sent in the 'host' kvpair.",
      "ja": "サーバーは、完全にサーバの応答を生成する前に、クライアントの応答を検証します。これは必ずしも使用のOAuthアクセストークンタイプの仕様に記載されている検証手順が含まれます。しかし、追加の検証ステップは、SASLを利用して、特定のアプリケーションプロトコルに応じて、必要とされるかもしれません。特に、値がの間で一致するように検証されなければならない（例えば、アプリケーションプロトコルデータユニットまたは事前設定された値など）いくつかの他のメカニズムによってアプリケーションサーバに知られている値に対応する（例えばホストおよびポートのような）クライアント応答のkvpairsとして含ま初期クライアントの応答と、そのような情報の他のソース（S）。具体例として、SASLは、単一ドメインのIMAPサーバーにIMAP上で使用される場合、ホストは、構成を介して利用することができます。このホスト名は「ホスト」kvpairに送信された値と一致するように検証する必要があります。"
    },
    {
      "indent": 3,
      "text": "The server responds to a successfully verified client message by completing the SASL negotiation. The authenticated identity reported by the SASL mechanism is the identity securely established for the client with the OAuth credential. The application, not the SASL mechanism, based on local access policy determines whether the identity reported by the mechanism is allowed access to the requested resource. Note that the semantics of the authzid are specified by the SASL framework [RFC4422].",
      "ja": "サーバーは、SASLネゴシエーションを完了することによって、検証に成功したクライアントのメッセージに応答します。 SASLメカニズムによって報告された認証されたアイデンティティはしっかりとOAuthの認証情報を使用して、クライアントのために確立された識別情報です。ローカルのアクセスポリシーに基づいて、アプリケーションではなく、SASLメカニズムは、メカニズムによって報告されたアイデンティティが要求されたリソースへのアクセスを許可されているかどうかを決定します。 authzidはのセマンティクスがSASLフレームワーク[RFC4422]で指定されることに留意されたいです。"
    },
    {
      "indent": 0,
      "text": "3.2.1. OAuth Identifiers in the SASL Context",
      "section_title": true,
      "ja": "3.2.1.  SASLコンテキストでのOAuthの識別子"
    },
    {
      "indent": 3,
      "text": "In the OAuth framework, the client may be authenticated by the authorization server, and the resource owner is authenticated to the authorization server. OAuth access tokens may contain information about the authentication of the resource owner and about the client and may therefore make this information accessible to the resource server.",
      "ja": "OAuthのフレームワークでは、クライアントは、認証サーバによって認証され、リソースの所有者は、認証サーバに認証されます。 OAuthアクセストークンは、リソースの所有者の認証について、クライアントについての情報を含んでいてもよく、従って、リソースサーバにこの情報にアクセスできるようにします。"
    },
    {
      "indent": 3,
      "text": "If both identifiers are needed by an application the developer will need to provide a way to communicate that from the SASL mechanism back to the application.",
      "ja": "両方の識別子がアプリケーションによって必要とされている場合、開発者はアプリケーションに戻さSASLメカニズムからそれを通信する方法を提供する必要があります。"
    },
    {
      "indent": 0,
      "text": "3.2.2. Server Response to Failed Authentication",
      "section_title": true,
      "ja": "3.2.2. 失敗した認証に対するサーバの応答"
    },
    {
      "indent": 3,
      "text": "For a failed authentication, the server returns an error result in JSON [RFC7159] format and fails the authentication. The error result consists of the following values:",
      "ja": "失敗した認証のために、サーバは、JSON [RFC7159]の形式でエラー結果を返し、認証に失敗しました。エラー結果は以下の値で構成されています。"
    },
    {
      "indent": 6,
      "text": "status (REQUIRED): The authorization error code. Valid error codes are defined in the IANA \"OAuth Extensions Error Registry\" as specified in the OAuth 2.0 core specification.",
      "ja": "ステータス（必須）：認証エラーコード。 OAuth 2.0のコア仕様で指定されるように、有効なエラーコードはIANA「のOAuth拡張エラーレジストリ」に定義されています。"
    },
    {
      "indent": 6,
      "text": "scope (OPTIONAL): An OAuth scope that is valid to access the service. This may be omitted, which implies that unscoped tokens are required. If a scope is specified, then a single scope is preferred. At the time this document was written, there are several implementations that do not properly support space-separated lists of scopes, so the use of a space-separated list of scopes is NOT RECOMMENDED.",
      "ja": "スコープ（オプション）：サービスにアクセスするために有効であるのOAuthスコープ。これは、スコープ外トークンが必要であることを意味する、省略することができます。範囲が指定されている場合、単一の範囲が好ましいです。この文書が書かれた時点では、スコープのスペース区切りのリストの使用が推奨されていないので、正しく、スコープのスペース区切りのリストをサポートしていないいくつかの実装があります。"
    },
    {
      "indent": 6,
      "text": "openid-configuration (OPTIONAL): The URL for a document following the OpenID Provider Configuration Information schema as described in OIDCD [OpenID.Discovery], Section 3 that is appropriate for the user. As specified in OIDCD, this will have the \"https\" URL scheme. This document MUST have all OAuth-related data elements populated. The server MAY return different URLs for users in different domains, and the client SHOULD NOT cache a single returned value and assume it applies for all users/domains that the server supports. The returned discovery document SHOULD have all data elements required by the OpenID Connect Discovery specification populated. In addition, the discovery document SHOULD contain the 'registration_endpoint' element to identify the endpoint to be used with the Dynamic Client Registration protocol [RFC7591] to obtain the minimum number of parameters necessary for the OAuth protocol exchange to function. Another comparable discovery or client registration mechanism MAY be used if available.",
      "ja": "OpenIDのコンフィギュレーション（オプション）：ユーザーのために適切であるOIDCD [OpenID.Discovery]、セクション3で説明したようにOpenIDプロバイダ構成情報スキーマを以下の文書のURL。 OIDCDで指定されているように、これは「https」のURLスキームを持っています。この文書では、人口のすべてのOAuth関連のデータ要素を持たなければなりません。サーバーは、異なるドメインのユーザーのために別のURLを返すことができ、クライアントは、単一の戻り値をキャッシュし、それは、サーバーがサポートするすべてのユーザー/ドメインに適用されると仮定してはいけません。返された探索ドキュメントは、人口のOpenID接続ディスカバリー仕様で必要とされるすべてのデータ要素を持っているべきです。加えて、発見文書が機能するOAuthプロトコル交換のために必要なパラメータの最小数を取得するために動的クライアント登録プロトコル[RFC7591]で使用するエンドポイントを識別するために「registration_endpoint」要素を含むべきです。利用可能な場合は、別の同等の発見やクライアントの登録メカニズムを使用することができます。"
    },
    {
      "indent": 9,
      "text": "The use of the 'offline_access' scope, as defined in [OpenID.Core], is RECOMMENDED to give clients the capability to explicitly request a refresh token.",
      "ja": "「offline_access」スコープの使用は、[OpenID.Core]で定義されるように、クライアントに明示的にリフレッシュトークンを要求する機能を提供することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "If the resource server provides a scope, then the client MUST always request scoped tokens from the token endpoint. If the resource server does not return a scope, the client SHOULD presume an unscoped token is required to access the resource.",
      "ja": "リソースサーバがスコープを提供する場合、クライアントは常にトークンエンドポイントからスコープのトークンを要求しなければなりません。リソースサーバがスコープを返さない場合、クライアントは、スコープ外トークンがリソースにアクセスするために必要な推測すべきです。"
    },
    {
      "indent": 3,
      "text": "Since clients may interact with a number of application servers, such as email servers and Extensible Messaging and Presence Protocol (XMPP) [RFC6120] servers, they need to have a way to determine whether dynamic client registration has been performed already and whether an already available refresh token can be reused to obtain an access token for the desired resource server. This specification RECOMMENDS that a client uses the information in the 'iss' element defined in OpenID Connect Core [OpenID.Core] to make this determination.",
      "ja": "クライアントは、このようなメールサーバと拡張メッセージングおよびプレゼンスプロトコル（XMPP）などのアプリケーション・サーバー、[RFC6120]サーバの数と相互作用することができるので、動的なクライアント登録が既に行われ、すでに利用可能かどうかをされているかどうかを決定する方法を持っている必要がありますリフレッシュトークンは、目的のリソースサーバのアクセストークンを取得するために再利用することができます。この仕様は、クライアントがこの決定を行うためにOpenIDの接続コア【Op​​enID.Core]で定義された「ISS」要素内の情報を使用することをお勧めします。"
    },
    {
      "indent": 0,
      "text": "3.2.3. Completing an Error Message Sequence",
      "section_title": true,
      "ja": "3.2.3. エラーメッセージシーケンスを完了"
    },
    {
      "indent": 3,
      "text": "Section 3.6 of SASL [RFC4422] explicitly prohibits additional information in an unsuccessful authentication outcome. Therefore, the error message is sent in a normal message. The client MUST then send either an additional client response consisting of a single %x01 (control A) character to the server in order to allow the server to finish the exchange or a SASL abort message as generally defined in Section 3.5 of SASL [RFC4422]. A specific example of an abort message is the \"BAD\" response to an AUTHENTICATE in IMAP [RFC3501], Section 6.2.2.",
      "ja": "SASL [RFC4422]のセクション3.6は、明示的に不成功の認証結果に追加情報を禁止しています。したがって、エラーメッセージは通常のメッセージで送信されます。次に、クライアントは、サーバがとして一般SASL [RFC4422]のセクション3.5で定義された交換またはSASLアボートメッセージを完了できるようにするためにサーバに単一％のX01からなる追加のクライアントの応答（制御A）文字のいずれかを送信しなければなりません。アボートメッセージの具体例としては、IMAPで認証するために、「BAD」応答[RFC3501]、セクション6.2.2です。"
    },
    {
      "indent": 0,
      "text": "3.3. OAuth Access Token Types using Keyed Message Digests",
      "section_title": true,
      "ja": "3.3. キー付きメッセージダイジェストを使用してOAuthのアクセストークンタイプ"
    },
    {
      "indent": 3,
      "text": "OAuth Access Token Types may use keyed message digests, and the client and the resource server may need to perform a cryptographic computation for integrity protection and data origin authentication.",
      "ja": "OAuthのアクセストークンタイプは、キー付きメッセージダイジェストを使用して、クライアントとリソースサーバは、完全性保護とデータ発信元認証のための暗号計算を実行する必要があるかもしれません。"
    },
    {
      "indent": 3,
      "text": "OAuth is designed for access to resources identified by URIs. SASL is designed for user authentication and has no facility for more fine-grained access control. In this specification, we require or define default values for the data elements from an HTTP request that allows the signature base string to be constructed properly. The default HTTP path is \"/\", and the default post body is empty. These atoms are defined as extension points so that no changes are needed if there is a revision of SASL that supports more specific resource authorization, e.g., IMAP access to a specific folder or FTP access limited to a specific directory.",
      "ja": "OAuthのは、URIので識別されるリソースへのアクセスのために設計されています。 SASLは、ユーザ認証のために設計されており、よりきめ細かなアクセス制御のための施設がありません。本明細書において、我々は、必要または署名ベース文字列が適切に構成されることを可能にするHTTPリクエストからのデータ要素のデフォルト値を定義します。デフォルトのHTTPパスは「/」で、デフォルトのポスト本体は空です。例えば、特定のフォルダまたは特定のディレクトリに制限されたFTPアクセスへのIMAPアクセスをより具体的なリソース承認をサポートSASLの改正があった場合には変更が必要とされないように、これらの原子は、拡張点として定義されています。"
    },
    {
      "indent": 3,
      "text": "Using the example in the OAuth 1.0a specification as a starting point, below is the authorization request in OAuth 1.0a style (with %x01 shown as ^A and line breaks added for readability), assuming it is on an IMAP server running on port 143:",
      "ja": "以下、出発点としてのOAuth 1.0Aの仕様の例を使用すると、認証要求は、ポート上で実行されているIMAPサーバ上にあると仮定すると、（読みやすさのために追加^ Aと改行として示さ％のX01を有する）のOAuth 1.0Aスタイルであります143："
    },
    {
      "indent": 3,
      "text": "n,a=user@example.com,^A host=example.com^A port=143^A auth=OAuth realm=\"Example\", oauth_consumer_key=\"9djdj82h48djs9d2\", oauth_token=\"kkk9d7dh3k39sjv7\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"137131201\", oauth_nonce=\"7d8f3e4a\", oauth_signature=\"Tm90IGEgcmVhbCBzaWduYXR1cmU\"^A^A",
      "ja": "N、A =ユーザ@ example.com、^ホスト= example.com ^ポート= 143 ^ A AUTH = OAuthのレルム= \"例\"、oauth_consumer_key = \"9djdj82h48djs9d2\"、oauth_token = \"kkk9d7dh3k39sjv7\"、oauth_signature_method = \"HMAC- SHA1\" 、oauth_timestamp = \"137131201\"、oauth_nonce = \"7d8f3e4a\"、oauth_signature = \"Tm90IGEgcmVhbCBzaWduYXR1cmU\" ^ A ^ A"
    },
    {
      "indent": 3,
      "text": "The signature base string would be constructed per the OAuth 1.0a specification [RFC5849] with the following things noted:",
      "ja": "注目署名ベース文字列は、次のものとのOAuth 1.0aの仕様[RFC5849]ごとに構築されるであろう。"
    },
    {
      "indent": 3,
      "text": "o The method value is defaulted to POST.",
      "ja": "Oメソッド値がPOSTにデフォルト設定されています。"
    },
    {
      "indent": 3,
      "text": "o The scheme defaults to be \"http\", and any port number other than 80 is included.",
      "ja": "スキームデフォルトは「HTTP」に、80以外のポート番号が含まれている、O。"
    },
    {
      "indent": 3,
      "text": "o The path defaults to \"/\".",
      "ja": "「/」へのパスのデフォルトは、O。"
    },
    {
      "indent": 3,
      "text": "o The query string defaults to \"\".",
      "ja": "「」へのクエリ文字列のデフォルトはO。"
    },
    {
      "indent": 3,
      "text": "In this example, the signature base string with line breaks added for readability would be:",
      "ja": "この例では、読みやすくするために追加改行と署名ベース文字列は次のようになります。"
    },
    {
      "indent": 3,
      "text": "POST&http%3A%2F%2Fexample.com:143%2F&oauth_consumer_key%3D9djdj82h4 8djs9d2%26oauth_nonce%3D7d8f3e4a%26oauth_signature_method%3DHMAC-SH A1%26oauth_timestamp%3D137131201%26oauth_token%3Dkkk9d7dh3k39sjv7",
      "ja": "POST＆HTTP％3A％2F％2Fexample.com 143％2F＆oauth_consumer_key％3D9djdj82h4 8djs9d2％26oauth_nonce％3D7d8f3e4a％26oauth_signature_method％3DHMAC-SH A1％26oauth_timestamp％3D137131201％26oauth_token％3Dkkk9d7dh3k39sjv7"
    },
    {
      "indent": 0,
      "text": "4. Examples",
      "section_title": true,
      "ja": "4.例"
    },
    {
      "indent": 3,
      "text": "These examples illustrate exchanges between IMAP and SMTP clients and servers. All IMAP examples use SASL-IR [RFC4959] and send payload in the initial client response. The bearer token examples assume encrypted transport; if the underlying connection is not already TLS, then STARTTLS MUST be used as TLS is required in the bearer token specification.",
      "ja": "これらの例は、IMAPとSMTPクライアントとサーバ間のやり取りを示しています。すべてのIMAPの例は、SASL-IR [RFC4959]を使用して、初期のクライアント応答してペイロードを送信します。ベアラトークンの例は、暗号化された輸送を想定します。基礎となる接続がすでにTLSない場合TLSがベアラトークン仕様に必要とされるように、その後、STARTTLSを使用しなければなりません。"
    },
    {
      "indent": 3,
      "text": "Note to implementers: The SASL OAuth method names are case insensitive. One example uses \"Bearer\" but that could as easily be \"bearer\", \"BEARER\", or \"BeArEr\".",
      "ja": "実装者への注意：SASLのOAuthメソッド名は大文字と小文字を区別しません。一例では、「ベアラ」を使用するが、それはのように簡単に「ベアラ」、「BEARER」、または「ベアラ」とすることができます。"
    },
    {
      "indent": 0,
      "text": "4.1. Successful Bearer Token Exchange",
      "section_title": true,
      "ja": "4.1. 成功したベアラトークン交換"
    },
    {
      "indent": 3,
      "text": "This example shows a successful OAuth 2.0 bearer token exchange in IMAP. Note that line breaks are inserted for readability.",
      "ja": "この例では、IMAPに成功OAuth 2.0のベアラトークン交換を示しています。改行は読みやすくするために挿入されていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "[Initial connection and TLS establishment...] S: * OK IMAP4rev1 Server Ready C: t0 CAPABILITY S: * CAPABILITY IMAP4rev1 AUTH=OAUTHBEARER SASL-IR S: t0 OK Completed C: t1 AUTHENTICATE OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAWhv c3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9QmVhcmVyI HZGOWRmdDRxbVRjMk52YjNSbGNrQmhiSFJoZG1semRHRXVZMjl0Q2c9PQ EB S: t1 OK SASL authentication succeeded",
      "ja": "[初期接続とTLS確立...] S：* OKのIMAP4rev1サーバレディC：T0能力S：* CAPABILITYのIMAP4rev1 AUTH = OAUTHBEARER SASL-IR S：T0のOK完了C：T1 AUTHENTICATE OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAWhv c3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9QmVhcmVyI HZGOWRmdDRxbVRjMk52YjNSbGNrQmhiSFJoZG1semRHRXVZMjl0Q2c9PQ EB S：T1 OK SASL認証が成功しました"
    },
    {
      "indent": 3,
      "text": "As required by IMAP [RFC3501], the payloads are base64 encoded. The decoded initial client response (with %x01 represented as ^A and long lines wrapped for readability) is:",
      "ja": "IMAP [RFC3501]によって必要とされるように、ペイロードはbase64エンコードされています。 （^ Aと読みやすいように改行長い列として表さ％のX01で）デコードされた初期のクライアント応答は次のようになります。"
    },
    {
      "indent": 3,
      "text": "n,a=user@example.com,^Ahost=server.example.com^Aport=143^A auth=Bearer vF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg==^A^A",
      "ja": "N、=ユーザ@ example.com、^ Ahost = server.example.com ^ Aport = 143 ^ A AUTH =ベアラvF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg == ^ A ^ A"
    },
    {
      "indent": 3,
      "text": "The same credential used in an SMTP exchange is shown below. Again, this example assumes that TLS is already established per the bearer token specification requirements.",
      "ja": "SMTP交換に使用したのと同じ資格情報を以下に示します。再び、この例では、TLSは、既にベアラトークン仕様要件ごとに確立されることを想定しています。"
    },
    {
      "indent": 3,
      "text": "[connection begins] S: 220 mx.example.com ESMTP 12sm2095603fks.9 C: EHLO sender.example.com S: 250-mx.example.com at your service,[172.31.135.47] S: 250-SIZE 35651584 S: 250-8BITMIME S: 250-AUTH LOGIN PLAIN OAUTHBEARER S: 250-ENHANCEDSTATUSCODES S: 250-STARTTLS S: 250 PIPELINING [Negotiate TLS...] C: t1 AUTH OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9c2Vy dmVyLmV4YW1wbGUuY29tAXBvcnQ9NTg3AWF1dGg9QmVhcmVyIHZGOWRmd DRxbVRjMk52YjNSbGNrQmhiSFJoZG1semRHRXVZMjl0Q2c9PQEB S: 235 Authentication successful. [connection continues...]",
      "ja": "220 mx.example.com ESMTP 12sm2095603fks.9 C：EHLO sender.example.com S：250-mx.example.comあなたのサービスで、[172.31.135.47] S：250-SIZE 35651584 S S [接続を開始します]を： 250-8BITMIME S：250-AUTH LOGIN PLAIN OAUTHBEARER S：250 ENHANCEDSTATUSCODES S：250-STARTTLS S：T1 AUTH OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9c2Vy dmVyLmV4YW1wbGUuY29tAXBvcnQ9NTg3AWF1dGg9QmVhcmVyIHZGOWRmd DRxbVRjMk52YjNSbGNrQmhiSFJoZG1semRHRXVZMjl0Q2c9PQEB S：235認証成功250パイプライン化は、C [... TLSネゴシエート]。 [接続が続きます...]"
    },
    {
      "indent": 3,
      "text": "The decoded initial client response is:",
      "ja": "デコードされた最初のクライアントの応答は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "n,a=user@example.com,^Ahost=server.example.com^Aport=587^A auth=Bearer vF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg==^A^A",
      "ja": "N、=ユーザ@ example.com、^ Ahost = server.example.com ^ Aport = 587 ^ A AUTH =ベアラvF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg == ^ A ^ A"
    },
    {
      "indent": 0,
      "text": "4.2. Successful OAuth 1.0a Token Exchange",
      "section_title": true,
      "ja": "4.2. 成功したのOAuth 1.0aのトークンの交換"
    },
    {
      "indent": 3,
      "text": "This IMAP example shows a successful OAuth 1.0a token exchange. Note that line breaks are inserted for readability. This example assumes that TLS is already established. Signature computation is discussed in Section 3.3.",
      "ja": "このIMAPの例では、成功したのOAuth 1.0aのトークン交換を示します。改行は読みやすくするために挿入されていることに注意してください。この例では、TLSがすでに確立されていることを前提としています。署名の計算は、セクション3.3で議論されています。"
    },
    {
      "indent": 3,
      "text": "S: * OK IMAP4rev1 Server Ready C: t0 CAPABILITY S: * CAPABILITY IMAP4rev1 AUTH=OAUTHBEARER AUTH=OAUTH10A SASL-IR S: t0 OK Completed C: t1 AUTHENTICATE OAUTH10A bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9ZXhhb XBsZS5jb20BcG9ydD0xNDMBYXV0aD1PQXV0aCByZWFsbT0iRXhhbXBsZSIsb2F1 dGhfY29uc3VtZXJfa2V5PSI5ZGpkajgyaDQ4ZGpzOWQyIixvYXV0aF90b2tlbj0 ia2trOWQ3ZGgzazM5c2p2NyIsb2F1dGhfc2lnbmF0dXJlX21ldGhvZD0iSE1BQy 1TSEExIixvYXV0aF90aW1lc3RhbXA9IjEzNzEzMTIwMSIsb2F1dGhfbm9uY2U9I jdkOGYzZTRhIixvYXV0aF9zaWduYXR1cmU9IlRtOTBJR0VnY21WaGJDQnphV2R1 WVhSMWNtVSUzRCIBAQ== S: t1 OK SASL authentication succeeded",
      "ja": "S：* OKのIMAP4rev1サーバレディC：T0能力S：* CAPABILITYのIMAP4rev1 AUTH = OAUTHBEARER AUTH = OAUTH10A SASL-IR S：T0のOK完了C：T1 AUTHENTICATE OAUTH10A bixhPXVzZXJAZXhhbXBsZS5jb20sAWhvc3Q9ZXhhb XBsZS5jb20BcG9ydD0xNDMBYXV0aD1PQXV0aCByZWFsbT0iRXhhbXBsZSIsb2F1 dGhfY29uc3VtZXJfa2V5PSI5ZGpkajgyaDQ4ZGpzOWQyIixvYXV0aF90b2tlbj0 ia2trOWQ3ZGgzazM5c2p2NyIsb2F1dGhfc2lnbmF0dXJlX21ldGhvZD0iSE1BQy 1TSEExIixvYXV0aF90aW1lc3RhbXA9IjEzNzEzMTIwMSIsb2F1dGhfbm9uY2U9I jdkOGYzZTRhIixvYXV0aF9zaWduYXR1cmU9IlRtOTBJR0VnY21WaGJDQnphV2R1 WVhSMWNtVSUzRCIBAQ == S：T1 OK SASL認証成功しました"
    },
    {
      "indent": 3,
      "text": "As required by IMAP [RFC3501], the payloads are base64 encoded. The decoded initial client response (with %x01 represented as ^A and lines wrapped for readability) is:",
      "ja": "IMAP [RFC3501]によって必要とされるように、ペイロードはbase64エンコードされています。 （読みやすくするために改行^ Aと線として表さ％のX01で）デコードされた初期のクライアント応答は次のようになります。"
    },
    {
      "indent": 3,
      "text": "n,a=user@example.com,^A host=example.com^A port=143^A auth=OAuth realm=\"Example\", oauth_consumer_key=\"9djdj82h48djs9d2\", oauth_token=\"kkk9d7dh3k39sjv7\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"137131201\", oauth_nonce=\"7d8f3e4a\", oauth_signature=\"SSdtIGEgbGl0dGxlIHRlYSBwb3Qu\"^A^A",
      "ja": "N、A =ユーザ@ example.com、^ホスト= example.com ^ポート= 143 ^ A AUTH = OAuthのレルム= \"例\"、oauth_consumer_key = \"9djdj82h48djs9d2\"、oauth_token = \"kkk9d7dh3k39sjv7\"、oauth_signature_method = \"HMAC- SHA1\" 、oauth_timestamp = \"137131201\"、oauth_nonce = \"7d8f3e4a\"、oauth_signature = \"SSdtIGEgbGl0dGxlIHRlYSBwb3Qu\" ^ A ^ A"
    },
    {
      "indent": 0,
      "text": "4.3. Failed Exchange",
      "section_title": true,
      "ja": "4.3. 失敗した取引"
    },
    {
      "indent": 3,
      "text": "This IMAP example shows a failed exchange because of the empty Authorization header, which is how a client can query for the needed scope. Note that line breaks are inserted for readability.",
      "ja": "このIMAPの例では、理由は、クライアントが必要な範囲を照会することができますどのように空のAuthorizationヘッダーの失敗交換を示します。改行は読みやすくするために挿入されていることに注意してください。"
    },
    {
      "indent": 3,
      "text": "S: * OK IMAP4rev1 Server Ready C: t0 CAPABILITY S: * CAPABILITY IMAP4rev1 AUTH=OAUTHBEARER SASL-IR S: t0 OK Completed C: t1 AUTHENTICATE OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAW hvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9AQE= S: + eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NvcGUiOiJleGFtcGxl X3Njb3BlIiwib3BlbmlkLWNvbmZpZ3VyYXRpb24iOiJodHRwczovL2V4 YW1wbGUuY29tLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9u In0= C: AQ== S: t1 NO SASL authentication failed",
      "ja": "S：* OKのIMAP4rev1サーバーの準備ができましたC：T0能力のS：* CAPABILITY IMAP4rev1のAUTH = OAUTHBEARER SASL-IR S：T0のOK完了C：T1のAUTHENTICATE OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAW hvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9AQE = S：+ eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NvcGUiOiJleGFtcGxl X3Njb3BlIiwib3BlbmlkLWNvbmZpZ3VyYXRpb24iOiJodHRwczovL2V4 YW1wbGUuY29tLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9u IN0 = C：AQ == S： T1 NO SASL認証に失敗しました"
    },
    {
      "indent": 3,
      "text": "The decoded initial client response is:",
      "ja": "デコードされた最初のクライアントの応答は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "n,a=user@example.com,^Ahost=server.example.com^A port=143^Aauth=^A^A",
      "ja": "N、A =ユーザ@ example.com、^ Ahost = server.example.com ^ポート= 143 ^ Aauth = ^ A ^ A"
    },
    {
      "indent": 3,
      "text": "The decoded server error response is:",
      "ja": "デコードされたサーバーエラー応答は次のとおりです。"
    },
    {
      "indent": 2,
      "text": "{ \"status\":\"invalid_token\", \"scope\":\"example_scope\", \"openid-configuration\":\"https://example.com/.well-known/openid-config\" }",
      "ja": "{ \"ステータス\"： \"invalid_token\"、 \"範囲\"： \"example_scope\"、 \"OpenIDのコンフィギュレーション\"： \"https://example.com/.well-known/openid-config\"}"
    },
    {
      "indent": 3,
      "text": "The client responds with the required dummy response; \"AQ==\" is the base64 encoding of the ASCII value 0x01. The same exchange using the IMAP-specific method of canceling an AUTHENTICATE command sends \"*\" and is shown below.",
      "ja": "クライアントは、必要なダミー応答で応答します。 「AQ ==」はASCII値が0x01のbase64エンコーディングです。 AUTHENTICATEコマンドをキャンセルするIMAP固有の方法を使用して同じ交換は「*」を送信し、以下に示されています。"
    },
    {
      "indent": 3,
      "text": "S: * OK IMAP4rev1 Server Ready C: t0 CAPABILITY S: * CAPABILITY IMAP4rev1 AUTH=OAUTHBEARER SASL-IR IMAP4rev1 S: t0 OK Completed C: t1 AUTHENTICATE OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAW hvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9AQE= S: + eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NvcGUiOiJleGFtcGxl X3Njb3BlIiwib3BlbmlkLWNvbmZpZ3VyYXRpb24iOiJodHRwczovL2V4 YW1wbGUuY29tLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9u In0= C: * S: t1 NO SASL authentication failed",
      "ja": "S：* OKのIMAP4rev1サーバレディC：T0能力S：* CAPABILITYのIMAP4rev1 AUTH = OAUTHBEARER SASL-IRのIMAP4rev1 S：C完成T0のOK：T1のAUTHENTICATE OAUTHBEARER bixhPXVzZXJAZXhhbXBsZS5jb20sAW hvc3Q9c2VydmVyLmV4YW1wbGUuY29tAXBvcnQ9MTQzAWF1dGg9AQE = S：+ eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NvcGUiOiJleGFtcGxl X3Njb3BlIiwib3BlbmlkLWNvbmZpZ3VyYXRpb24iOiJodHRwczovL2V4 YW1wbGUuY29tLy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9u IN0 = C * S：T1 NO SASL認証が失敗しました"
    },
    {
      "indent": 0,
      "text": "4.4. SMTP Example of a Failed Negotiation",
      "section_title": true,
      "ja": "4.4. 失敗した交渉のSMTP例"
    },
    {
      "indent": 3,
      "text": "This example shows an authorization failure in an SMTP exchange. TLS negotiation is not shown, but as noted above, it is required for the use of bearer tokens.",
      "ja": "この例では、SMTP交換に認証の失敗を示しています。 TLSネゴシエーションは示されていないが、上述のように、それがベアラトークンの使用のために必要とされます。"
    },
    {
      "indent": 0,
      "text": "[connection begins] S: 220 mx.example.com ESMTP 12sm2095603fks.9 C: EHLO sender.example.com S: 250-mx.example.com at your service,[172.31.135.47] S: 250-SIZE 35651584 S: 250-8BITMIME S: 250-AUTH LOGIN PLAIN OAUTHBEARER S: 250-ENHANCEDSTATUSCODES S: 250 PIPELINING [Negotiate TLS...] C: AUTH OAUTHBEARER bix1c2VyPXNvbWV1c2VyQGV4YW1wbGUuY29tLAFhdXRoPUJlYXJl ciB2RjlkZnQ0cW1UYzJOdmIzUmxja0JoZEhSaGRtbHpkR0V1WTI5dENnPT0BAQ== S: 334 eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NoZW1lcyI6ImJlYXJlciBtYWMiL CJzY29wZSI6Imh0dHBzOi8vbWFpbC5leGFtcGxlLmNvbS8ifQ== C: AQ== S: 535-5.7.1 Username and Password not accepted. Learn more at S: 535 5.7.1 http://support.example.com/mail/oauth [connection continues...]",
      "ja": "220 mx.example.com ESMTP 12sm2095603fks.9 C：EHLO sender.example.com S：250-mx.example.comあなたのサービスで、[172.31.135.47] S：250-SIZE 35651584 S S [接続を開始します]を： 250-8BITMIME S：250-AUTH LOGIN PLAIN OAUTHBEARER S：250 ENHANCEDSTATUSCODES S：250 PIPELINING [TLSをネゴシエート...] C：AUTH OAUTHBEARER bix1c2VyPXNvbWV1c2VyQGV4YW1wbGUuY29tLAFhdXRoPUJlYXJl ciB2RjlkZnQ0cW1UYzJOdmIzUmxja0JoZEhSaGRtbHpkR0V1WTI5dENnPT0BAQ == S：334 eyJzdGF0dXMiOiJpbnZhbGlkX3Rva2VuIiwic2NoZW1lcyI6ImJlYXJlciBtYWMiL CJzY29wZSI6Imh0dHBzOi8vbWFpbC5leGFtcGxlLmNvbS8ifQ == C：AQ == S：535 -5.7.1のユーザー名とパスワード受け入れられません。 Sの詳細はこちら：535 5.7.1 http://support.example.com/mail/oauth [接続が続きます...]"
    },
    {
      "indent": 3,
      "text": "The initial client response is:",
      "ja": "初期のクライアント応答は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "n,user=someuser@example.com,^A auth=Bearer vF9dft4qmTc2Nvb3RlckBhdHRhdmlzdGEuY29tCg==^A^A",
      "ja": "N、ユーザー= someuser @ example.com、^ AUTH =ベアラvF9dft4qmTc2Nvb3RlckBhdHRhdmlzdGEuY29tCg == ^ A ^ A"
    },
    {
      "indent": 3,
      "text": "The server returned an error message in the 334 SASL message; the client responds with the required dummy response, and the server finalizes the negotiation.",
      "ja": "サーバーは、334 SASLメッセージにエラーメッセージが返されます。クライアントは、必要なダミー応答で応答し、サーバが交渉を確定します。"
    },
    {
      "indent": 3,
      "text": "{ \"status\":\"invalid_token\", \"schemes\":\"bearer mac\", \"scope\":\"https://mail.example.com/\" }",
      "ja": "{ \"ステータス\"： \"invalid_token\"、 \"スキーム\"： \"ベアラMAC\"、 \"スコープ\"： \"https://mail.example.com/\"}"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5.セキュリティについての考慮事項"
    },
    {
      "indent": 3,
      "text": "OAuth 1.0a and OAuth 2.0 allow for a variety of deployment scenarios, and the security properties of these profiles vary. As shown in Figure 1, this specification is aimed to be integrated into a larger OAuth deployment. Application developers therefore need to understand their security requirements based on a threat assessment before selecting a specific SASL OAuth mechanism. For OAuth 2.0, a detailed security document [RFC6819] provides guidance to select those OAuth 2.0 components that help to mitigate threats for a given deployment. For OAuth 1.0a, Section 4 of [RFC5849] provides guidance specific to OAuth 1.0a.",
      "ja": "OAuth 1.0aのとOAuth 2.0のは、展開シナリオのさまざまなことができ、そしてこれらのプロファイルのセキュリティプロパティが異なります。図1に示すように、本明細書は、より大きなOAuthの展開に統合することを目的とします。アプリケーション開発者は、したがって、特定のSASLのOAuthメカニズムを選択する前に、脅威の評価に基づいて、セキュリティ要件を理解する必要があります。 OAuth 2.0のために、詳細なセキュリティドキュメント[RFC6819]は与えられた展開に脅威を軽減するのに役立つものをOAuth 2.0のコンポーネントを選択するためのガイダンスを提供します。 OAuth 1.0Aのために、[RFC5849]のセクション4でのOAuth 1.0Aに具体的なガイダンスを提供します。"
    },
    {
      "indent": 3,
      "text": "This document specifies two SASL Mechanisms for OAuth and each comes with different security properties.",
      "ja": "この文書では、OAuthのた​​めの2つのSASLメカニズムを指定し、それぞれが異なるセキュリティプロパティが付属しています。"
    },
    {
      "indent": 3,
      "text": "OAUTHBEARER: This mechanism borrows from OAuth 2.0 bearer tokens [RFC6750]. It relies on the application using TLS to protect the OAuth 2.0 bearer token exchange; without TLS usage at the application layer, this method is completely insecure. Consequently, TLS MUST be provided by the application when choosing this authentication mechanism.",
      "ja": "OAUTHBEARER：このメカニズムはOAuth 2.0のベアラトークン[RFC6750]から借用します。これは、OAuth 2.0のベアラトークン交換を保護するためにTLSを使用して、アプリケーションに依存しています。アプリケーション層でのTLSの使用なしに、この方法は完全に安全でありません。この認証機構を選択する際にその結果、TLSは、アプリケーションによって提供されなければなりません。"
    },
    {
      "indent": 3,
      "text": "OAUTH10A: This mechanism reuses OAuth 1.0a MAC tokens (using the HMAC-SHA1 keyed message digest), as described in Section 3.4.2 of [RFC5849]. To compute the keyed message digest in the same way as in RFC 5839, this specification conveys additional parameters between the client and the server. This SASL mechanism only supports client authentication. If server-side authentication is desirable, then it must be provided by the application underneath the SASL layer. The use of TLS is strongly RECOMMENDED.",
      "ja": "OAUTH10A：[RFC5849]のセクション3.4.2に記載したように、この機構は、（HMAC-SHA1キー付きメッセージダイジェストを使用して）のOAuth 1.0A MACトークンを再利用します。 RFC 5839と同様にキー付きメッセージダイジェストを計算するには、この仕様では、クライアントとサーバーの間の追加のパラメータを伝えます。このSASLメカニズムは、クライアント認証をサポートしています。サーバ側認証が望ましい場合、それはSASL層の下アプリケーションによって提供されなければなりません。 TLSの使用を強くお勧めします。"
    },
    {
      "indent": 3,
      "text": "Additionally, the following aspects are worth pointing out:",
      "ja": "また、以下の側面が指摘価値があります："
    },
    {
      "indent": 3,
      "text": "An access token is not equivalent to the user's long term password.",
      "ja": "アクセストークンは、ユーザーの長期的なパスワードと同等ではありません。"
    },
    {
      "indent": 6,
      "text": "Care has to be taken when these OAuth credentials are used for actions like changing passwords (as it is possible with some protocols, e.g., XMPP [RFC6120]). The resource server should ensure that actions taken in the authenticated channel are appropriate to the strength of the presented credential.",
      "ja": "ケア（例えば、XMPP [RFC6120]、それはいくつかのプロトコルで可能であるように）これらのOAuth認証情報がパスワードを変更するようなアクションのために使用される場合に注意しなければなりません。リソースサーバーは認証されたチャネルで行われるアクションが提示資格の強さに適切であることを確認する必要があります。"
    },
    {
      "indent": 3,
      "text": "Lifetime of the application sessions.",
      "ja": "アプリケーションセッションの生涯。"
    },
    {
      "indent": 6,
      "text": "It is possible that SASL will be used to authenticate a connection, and the life of that connection may outlast the life of the access token used to establish it. This is a common problem in application protocols where connections are long lived and not a problem with this mechanism, per se. Resource servers may unilaterally disconnect clients in accordance with the application protocol.",
      "ja": "SASL接続を認証するために使用され、その接続の人生は、それを確立するために使用されるアクセストークンの寿命を長持ちする可能性があります。これは、接続が長い自体、このメカニズムに問題が住んでいたとされていないアプリケーションプロトコルにおける共通の問題です。リソースサーバーは、一方的にアプリケーションプロトコルに従ってクライアントを切断することがあります。"
    },
    {
      "indent": 3,
      "text": "Access tokens have a lifetime.",
      "ja": "アクセストークンには寿命があります。"
    },
    {
      "indent": 6,
      "text": "Reducing the lifetime of an access token provides security benefits, and OAuth 2.0 introduces refresh tokens to obtain new access tokens on the fly without any need for human interaction. Additionally, a previously obtained access token might be revoked or rendered invalid at any time. The client MAY request a new access token for each connection to a resource server, but it SHOULD cache and reuse valid credentials.",
      "ja": "アクセストークンの寿命を減らすことは、セキュリティ上の利点を提供し、OAuth 2.0のは、人間の相互作用を必要とせずにその場で新しいアクセストークンを取得するためにリフレッシュトークンを導入しています。また、以前に取得したアクセストークンは、いつでも取り消すか、無効とされる可能性があります。クライアントは、リソースサーバーへの接続ごとに新しいアクセストークンを要求することができるが、それは有効な資格情報をキャッシュして再利用する必要があります。"
    },
    {
      "indent": 0,
      "text": "6. Internationalization Considerations",
      "section_title": true,
      "ja": "6.国際化に関する注意事項"
    },
    {
      "indent": 3,
      "text": "The identifier asserted by the OAuth authorization server about the resource owner inside the access token may be displayed to a human. For example, when SASL is used in the context of IMAP, the client may assert the resource owner's email address to the IMAP server for usage in an email-based application. The identifier may therefore contain internationalized characters, and an application needs to ensure that the mapping between the identifier provided by OAuth is suitable for use with the application-layer protocol SASL is incorporated into. An example of a SASL-compatible container is the JSON Web Token (JWT) [RFC7519], which provides a standardized format for exchanging authorization and identity information that supports internationalized characters.",
      "ja": "アクセストークン内のリソースの所有者についてのOAuth認証サーバによってアサート識別子は、人間に表示することができます。たとえば、SASLは、IMAPのコンテキストで使用されている場合、クライアントは、電子メールベースのアプリケーションで使用するためにIMAPサーバーへのリソースの所有者の電子メールアドレスをアサートしてもよいです。識別子は、したがって、国際文字が含まれていてもよいし、アプリケーションはOAuthのによって提供される識別子との間のマッピングは、SASLが中に組み込まれているアプリケーション層プロトコルでの使用に適していることを確認する必要があります。 SASL互換容器の例は、国際文字をサポート認可および識別情報を交換するための標準フォーマットを提供するJSONウェブトークン（JWT）[RFC7519]です。"
    },
    {
      "indent": 0,
      "text": "7. IANA Considerations",
      "section_title": true,
      "ja": "7. IANAの考慮事項"
    },
    {
      "indent": 0,
      "text": "7.1. SASL Registration",
      "section_title": true,
      "ja": "7.1.  SASL登録"
    },
    {
      "indent": 3,
      "text": "The IANA has registered the following entry in the SASL Mechanisms registry:",
      "ja": "IANAはSASLメカニズムのレジストリで次のエントリを登録しています："
    },
    {
      "indent": 6,
      "text": "SASL mechanism name: OAUTHBEARER",
      "ja": "SASLメカニズム名：OAUTHBEARER"
    },
    {
      "indent": 6,
      "text": "Security Considerations: See this document",
      "ja": "セキュリティの考慮事項：このドキュメントを参照してください。"
    },
    {
      "indent": 6,
      "text": "Published Specification: See this document",
      "ja": "公開された仕様：このドキュメントを参照してください。"
    },
    {
      "indent": 6,
      "text": "For further information: Contact the authors of this document.",
      "ja": "詳細について：この文書の著者にお問い合わせください。"
    },
    {
      "indent": 6,
      "text": "Intended usage: COMMON",
      "ja": "意図している用法：COMMON"
    },
    {
      "indent": 6,
      "text": "Owner/Change controller: the IESG",
      "ja": "所有者/変更コントローラ：IESG"
    },
    {
      "indent": 6,
      "text": "Note: None",
      "ja": "注：なし"
    },
    {
      "indent": 3,
      "text": "The IANA has registered the following entry in the SASL Mechanisms registry:",
      "ja": "IANAはSASLメカニズムのレジストリで次のエントリを登録しています："
    },
    {
      "indent": 6,
      "text": "SASL mechanism name: OAUTH10A",
      "ja": "SASLメカニズム名：OAUTH10A"
    },
    {
      "indent": 6,
      "text": "Security Considerations: See this document",
      "ja": "セキュリティの考慮事項：このドキュメントを参照してください。"
    },
    {
      "indent": 6,
      "text": "Published Specification: See this document",
      "ja": "公開された仕様：このドキュメントを参照してください。"
    },
    {
      "indent": 6,
      "text": "For further information: Contact the authors of this document.",
      "ja": "詳細について：この文書の著者にお問い合わせください。"
    },
    {
      "indent": 6,
      "text": "Intended usage: COMMON",
      "ja": "意図している用法：COMMON"
    },
    {
      "indent": 6,
      "text": "Owner/Change controller: the IESG",
      "ja": "所有者/変更コントローラ：IESG"
    },
    {
      "indent": 6,
      "text": "Note: None",
      "ja": "注：なし"
    },
    {
      "indent": 0,
      "text": "8. References",
      "section_title": true,
      "ja": "8.参照文献"
    },
    {
      "indent": 0,
      "text": "8.1. Normative References",
      "section_title": true,
      "ja": "8.1. 引用規格"
    },
    {
      "indent": 3,
      "text": "[OpenID.Core] Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and C. Mortimore, \"OpenID Connect Core 1.0\", November 2014, <http://openid.net/specs/openid-connect-core-1_0.html>.",
      "ja": "【OpenID.Core] Sakimura、N.、ブラッドリー、J.、ジョーンズ、M.、デメデイロス、B.、およびC. Mortimore、 \"OpenIDの接続コア1.0\"、2014年11月、<http://openid.net/スペック/ OpenIDのコネクト・コア・1_0.html>。"
    },
    {
      "indent": 3,
      "text": "[OpenID.Discovery] Sakimura, N., Bradley, J., Jones, M., and E. Jay, \"OpenID Connect Discovery 1.0\", November 2014, <http://openid.net/specs/ openid-connect-discovery-1_0.html>.",
      "ja": "【OpenID.Discovery] Sakimura、N.、ブラッドリー、J.、ジョーンズ、M.、およびE.ジェイ、 \"OpenIDの接続ディスカバリー1.0\"、2014年11月、<http://openid.net/specs/ OpenIDの-connect-発見-1_0.html>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ RFC2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC4422] Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple Authentication and Security Layer (SASL)\", RFC 4422, DOI 10.17487/RFC4422, June 2006, <http://www.rfc-editor.org/info/rfc4422>.",
      "ja": "[RFC4422]メルニコフ、A.編。そして、K. Zeilenga、エド。、 \"簡易認証セキュリティー層（SASL）\"、RFC 4422、DOI 10.17487 / RFC4422、2006年6月、<http://www.rfc-editor.org/info/rfc4422>。"
    },
    {
      "indent": 3,
      "text": "[RFC4648] Josefsson, S., \"The Base16, Base32, and Base64 Data Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006, <http://www.rfc-editor.org/info/rfc4648>.",
      "ja": "[RFC4648] Josefsson氏、S.、 \"Base16、Base32、およびBase64でデータエンコーディング\"、RFC 4648、DOI 10.17487 / RFC4648、2006年10月、<http://www.rfc-editor.org/info/rfc4648>。"
    },
    {
      "indent": 3,
      "text": "[RFC5234] Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, DOI 10.17487/RFC5234, January 2008, <http://www.rfc-editor.org/info/rfc5234>.",
      "ja": "[RFC5234]クロッカー、D.、エド。そして、P. Overell、 \"構文仕様のための増大しているBNF：ABNF\"、STD 68、RFC 5234、DOI 10.17487 / RFC5234、2008年1月、<http://www.rfc-editor.org/info/rfc5234>。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, DOI 10.17487/RFC5246, August 2008, <http://www.rfc-editor.org/info/rfc5246>.",
      "ja": "[RFC5246]ダークス、T.およびE.レスコラ、 \"トランスポート層セキュリティ（TLS）プロトコルバージョン1.2\"、RFC 5246、DOI 10.17487 / RFC5246、2008年8月、<http://www.rfc-editor.org/info / RFC5246>。"
    },
    {
      "indent": 3,
      "text": "[RFC5801] Josefsson, S. and N. Williams, \"Using Generic Security Service Application Program Interface (GSS-API) Mechanisms in Simple Authentication and Security Layer (SASL): The GS2 Mechanism Family\", RFC 5801, DOI 10.17487/RFC5801, July 2010, <http://www.rfc-editor.org/info/rfc5801>.",
      "ja": "[RFC5801] Josefsson氏、S.およびN.ウィリアムズ、 \"ジェネリックセキュリティーサービス適用業務プログラムインタフェース（GSS-API）を使用した簡易認証セキュリティー層（SASL）でのメカニズム：GS2メカニズムファミリー\"、RFC 5801、DOI 10.17487 / RFC5801、 2010年7月、<http://www.rfc-editor.org/info/rfc5801>。"
    },
    {
      "indent": 3,
      "text": "[RFC5849] Hammer-Lahav, E., Ed., \"The OAuth 1.0 Protocol\", RFC 5849, DOI 10.17487/RFC5849, April 2010, <http://www.rfc-editor.org/info/rfc5849>.",
      "ja": "[RFC5849]ハンマー -  Lahav、E.編、 \"OAuthの1.0プロトコル\"、RFC 5849、DOI 10.17487 / RFC5849、2010年4月<http://www.rfc-editor.org/info/rfc5849>。"
    },
    {
      "indent": 3,
      "text": "[RFC6749] Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\", RFC 6749, DOI 10.17487/RFC6749, October 2012, <http://www.rfc-editor.org/info/rfc6749>.",
      "ja": "[RFC6749]ハルト、D.編、 \"OAuth 2.0の認証フレームワーク\"、RFC 6749、DOI 10.17487 / RFC6749、2012年10月、<http://www.rfc-editor.org/info/rfc6749>。"
    },
    {
      "indent": 3,
      "text": "[RFC6750] Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization Framework: Bearer Token Usage\", RFC 6750, DOI 10.17487/RFC6750, October 2012, <http://www.rfc-editor.org/info/rfc6750>.",
      "ja": "[RFC6750]ジョーンズ、M.とD.ハルト、 \"OAuth 2.0の認証フレームワーク：ベアラトークンの使用\"、RFC 6750、DOI 10.17487 / RFC6750、2012年10月、<http://www.rfc-editor.org/info/ rfc6750>。"
    },
    {
      "indent": 3,
      "text": "[RFC7159] Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March 2014, <http://www.rfc-editor.org/info/rfc7159>.",
      "ja": "[RFC7159]ブレイ、T.、エド。、 \"JavaScriptのObject Notation（JSON）形式のデータ交換フォーマット\"、RFC 7159、DOI 10.17487 / RFC7159、2014年3月、<http://www.rfc-editor.org/info/ rfc7159>。"
    },
    {
      "indent": 3,
      "text": "[RFC7591] Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and P. Hunt, \"OAuth 2.0 Dynamic Client Registration Protocol\", RFC 7591, DOI 10.17487/RFC7591, July 2015, <http://www.rfc-editor.org/info/rfc7591>.",
      "ja": "[RFC7591]豊かな、J.、編、ジョーンズ、M.、ブラッドリー、J.、Machulak、M.、およびP.ハント、 \"OAuth 2.0のダイナミッククライアント登録プロトコル\"、RFC 7591、DOI 10.17487 / RFC7591、2015年7月、<http://www.rfc-editor.org/info/rfc7591>。"
    },
    {
      "indent": 0,
      "text": "8.2. Informative References",
      "section_title": true,
      "ja": "8.2. 参考文献"
    },
    {
      "indent": 3,
      "text": "[RFC3501] Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1\", RFC 3501, DOI 10.17487/RFC3501, March 2003, <http://www.rfc-editor.org/info/rfc3501>.",
      "ja": "[RFC3501]のCrispin、M.、 \"インターネットメッセージアクセスプロトコル -  VERSION 4rev1\"、RFC 3501、DOI 10.17487 / RFC3501、2003年3月、<http://www.rfc-editor.org/info/rfc3501>。"
    },
    {
      "indent": 3,
      "text": "[RFC4959] Siemborski, R. and A. Gulbrandsen, \"IMAP Extension for Simple Authentication and Security Layer (SASL) Initial Client Response\", RFC 4959, DOI 10.17487/RFC4959, September 2007, <http://www.rfc-editor.org/info/rfc4959>.",
      "ja": "[RFC4959] Siemborski、R.とA. Gulbrandsenの、RFC 4959、DOI 10.17487 / RFC4959、2007年9月、<HTTP \"簡易認証セキュリティー層（SASL）初期クライアント応答用のIMAP拡張\"：//www.rfc-editor .ORG /情報/ rfc4959>。"
    },
    {
      "indent": 3,
      "text": "[RFC5321] Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321, DOI 10.17487/RFC5321, October 2008, <http://www.rfc-editor.org/info/rfc5321>.",
      "ja": "[RFC5321] Klensin、J.、 \"簡易メール転送プロトコル\"、RFC 5321、DOI 10.17487 / RFC5321、2008年10月、<http://www.rfc-editor.org/info/rfc5321>。"
    },
    {
      "indent": 3,
      "text": "[RFC6120] Saint-Andre, P., \"Extensible Messaging and Presence Protocol (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120, March 2011, <http://www.rfc-editor.org/info/rfc6120>.",
      "ja": "[RFC6120]サンアンドレ、P.、 \"拡張メッセージングおよびプレゼンスプロトコル（XMPP）：コア\"、RFC 6120、DOI 10.17487 / RFC6120、2011年3月、<http://www.rfc-editor.org/info/rfc6120 >。"
    },
    {
      "indent": 3,
      "text": "[RFC6819] Lodderstedt, T., Ed., McGloin, M., and P. Hunt, \"OAuth 2.0 Threat Model and Security Considerations\", RFC 6819, DOI 10.17487/RFC6819, January 2013, <http://www.rfc-editor.org/info/rfc6819>.",
      "ja": "[RFC6819] Lodderstedt、T.、エド、McGloin、M.、およびP.ハント、 \"OAuth 2.0の脅威モデルおよびセキュリティに関する注意事項\"、RFC 6819、DOI 10.17487 / RFC6819、2013年1月、<のhttp：。//www.rfc -editor.org/info/rfc6819>。"
    },
    {
      "indent": 3,
      "text": "[RFC7033] Jones, P., Salgueiro, G., Jones, M., and J. Smarr, \"WebFinger\", RFC 7033, DOI 10.17487/RFC7033, September 2013, <http://www.rfc-editor.org/info/rfc7033>.",
      "ja": "[RFC7033]ジョーンズ、P.、Salgueiro、G.、ジョーンズ、M.、およびJ. Smarr、 \"WebFinger\"、RFC 7033、DOI 10.17487 / RFC7033、2013年9月、<http://www.rfc-editor.org /情報/ rfc7033>。"
    },
    {
      "indent": 3,
      "text": "[RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <http://www.rfc-editor.org/info/rfc7230>.",
      "ja": "[RFC7230]フィールディング、R.、エド。及びJ. Reschke、編、 \"ハイパーテキスト転送プロトコル（HTTP / 1.1）：メッセージの構文およびルーティング\"、RFC 7230、DOI 10.17487 / RFC7230、2014年6月、<http://www.rfc-editor.org/info/ rfc7230>。"
    },
    {
      "indent": 3,
      "text": "[RFC7519] Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015, <http://www.rfc-editor.org/info/rfc7519>.",
      "ja": "[RFC7519]ジョーンズ、M.、ブラッドリー、J。、およびN. Sakimura、 \"JSONウェブトークン（JWT）\"、RFC 7519、DOI 10.17487 / RFC7519、2015年5月、<http://www.rfc-editor.org /情報/ rfc7519>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank the members of the KITTEN working group and in addition and specifically: Simon Josefson, Torsten Lodderstadt, Ryan Troll, Alexey Melnikov, Jeffrey Hutzelman, Nico Williams, Matt Miller, and Benjamin Kaduk.",
      "ja": "サイモンJosefson、トルステンLodderstadt、ライアントロール、アレクセイ・メルニコフ、ジェフリーHutzelman、ニコ・ウィリアムス、マット・ミラー、およびベンジャミンKaduk：著者は、具体的KITTENワーキンググループのメンバーと加えて、とに感謝したいと思います。"
    },
    {
      "indent": 3,
      "text": "This document was produced under the chairmanship of Alexey Melnikov, Tom Yu, Shawn Emery, Josh Howlett, Sam Hartman, Matthew Miller, and Benjamin Kaduk. The supervising Area Director was Stephen Farrell.",
      "ja": "この文書はアレクセイ・メルニコフ、トム・ゆう、ショーン・エメリー、ジョシュ・ハウレット、サム・ハートマン、マシュー・ミラー、およびベンジャミンKadukの議長の下で生産されました。監督エリアディレクターは、ステファン・ファレルでした。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "William Mills Microsoft",
      "ja": "ウィリアム・ミルズマイクロソフト"
    },
    {
      "indent": 3,
      "text": "Email: wmills_92105@yahoo.com",
      "ja": "メール：wmills_92105@yahoo.com"
    },
    {
      "indent": 3,
      "text": "Tim Showalter",
      "ja": "ティム・ショーウォルター監督"
    },
    {
      "indent": 3,
      "text": "Email: tjs@psaux.com",
      "ja": "メール：tjs@psaux.com"
    },
    {
      "indent": 3,
      "text": "Hannes Tschofenig ARM Ltd. 110 Fulbourn Rd Cambridge CB1 9NJ United Kingdom",
      "ja": "ハンネスTschofenig ARM社110 Fulbourn RdのケンブリッジCB1 9NJイギリス"
    },
    {
      "indent": 3,
      "text": "Email: Hannes.tschofenig@gmx.net URI: http://www.tschofenig.priv.at",
      "ja": "メール：Hannes.tschofenig@gmx.net URI：http://www.tschofenig.priv.at"
    }
  ]
}