{
  "title": {
    "text": "RFC 7464 - JavaScript Object Notation (JSON) Text Sequences",
    "ja": "RFC 7464 - JavaScriptのObject Notation（JSON）形式のテキストシーケンス"
  },
  "number": 7464,
  "created_at": "2019-11-02 14:35:19.126995+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                       N. Williams\nRequest for Comments: 7464                                  Cryptonector\nCategory: Standards Track                                  February 2015\nISSN: 2070-1721",
      "raw": true
    },
    {
      "indent": 12,
      "text": "JavaScript Object Notation (JSON) Text Sequences",
      "raw": true
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "抽象"
    },
    {
      "indent": 3,
      "text": "This document describes the JavaScript Object Notation (JSON) text sequence format and associated media type \"application/json-seq\". A JSON text sequence consists of any number of JSON texts, all encoded in UTF-8, each prefixed by an ASCII Record Separator (0x1E), and each ending with an ASCII Line Feed character (0x0A).",
      "ja": "このドキュメントは、JavaScript Object Notation（JSON）テキストシーケンスフォーマットと関連したメディアタイプ「アプリケーション/ JSON-SEQ」を記述する。 JSONテキストシーケンスは、すべてのASCIIレコードの区切り（0x1Eを）で始まる各、UTF-8でエンコードされ、それぞれがASCIIの改行文字（0x0Aを）で終わる、JSONテキストの任意の数で構成されています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "このメモのステータス"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準化過程文書です。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741.",
      "ja": "このドキュメントはインターネットエンジニアリングタスクフォース（IETF）の製品です。これは、IETFコミュニティの総意を表しています。これは、公開レビューを受けており、インターネットエンジニアリング運営グループ（IESG）によって公表のために承認されています。インターネット標準の詳細については、RFC 5741のセクション2で利用可能です。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7464.",
      "ja": "このドキュメントの現在の状態、任意の正誤表、そしてどのようにフィードバックを提供するための情報がhttp://www.rfc-editor.org/info/rfc7464で取得することができます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2015 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（C）2015 IETF信託とドキュメントの作成者として特定の人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "ja": "この文書では、BCP 78と、この文書の発行日に有効なIETFドキュメント（http://trustee.ietf.org/license-info）に関連IETFトラストの法律の規定に従うものとします。彼らは、この文書に関してあなたの権利と制限を説明するように、慎重にこれらの文書を確認してください。コードコンポーネントは、トラスト法規定のセクションで説明4.eおよび簡体BSDライセンスで説明したように、保証なしで提供されているよう簡体BSDライセンスのテキストを含める必要があり、この文書から抽出されました。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction and Motivation .....................................2\n   1.1. Conventions Used in This Document ..........................2\n2. JSON Text Sequence Format .......................................3\n   2.1. JSON Text Sequence Parsing .................................3\n   2.2. JSON Text Sequence Encoding ................................4\n   2.3. Incomplete/Invalid JSON Texts Need Not Be Fatal ............4\n   2.4. Top-Level Values: numbers, true, false, and null ...........5\n3. Security Considerations .........................................6\n4. IANA Considerations .............................................6\n5. Normative References ............................................7\nAcknowledgements ...................................................8\nAuthor's Address ...................................................8",
      "raw": true
    },
    {
      "indent": 0,
      "text": "1. Introduction and Motivation",
      "section_title": true,
      "ja": "1.はじめと動機"
    },
    {
      "indent": 3,
      "text": "The JavaScript Object Notation (JSON) [RFC7159] is a very handy serialization format. However, when serializing a large sequence of values as an array, or a possibly indeterminate-length or never-ending sequence of values, JSON becomes difficult to work with.",
      "ja": "JavaScriptオブジェクト表記（JSON）[RFC7159]は非常に便利なシリアル化形式です。アレイ、または場合によって不定長または値の終わりのない配列として値の大きな配列をシリアル化するときしかし、JSONは、で動作することが困難となります。"
    },
    {
      "indent": 3,
      "text": "Consider a sequence of one million values, each possibly one kilobyte when encoded -- roughly one gigabyte. It is often desirable to process such a dataset in an incremental manner without having to first read all of it before beginning to produce results. Traditionally, the way to do this with JSON is to use a \"streaming\" parser, but these are not widely available, widely used, or easy to use.",
      "ja": "約1ギガバイト - 百万値のシーケンス、符号化された各おそらくは1キロバイトを考えます。最初の結果を生成するために開始する前に、それのすべてを読まなく増分的に、このようなデータセットを処理することが望ましい場合が多いです。伝統的に、JSONでこれを行う方法は、「ストリーミング」パーサーを使用することであるが、これらは、広く利用可能な広く使われている、または使用することは容易ではないです。"
    },
    {
      "indent": 3,
      "text": "This document describes the concept and format of \"JSON text sequences\", which are specifically not JSON texts themselves but are composed of (possible) JSON texts. JSON text sequences can be parsed (and produced) incrementally without having to have a streaming parser (nor streaming encoder).",
      "ja": "この文書では、特に自分自身ではなくJSONテキストですが（可能な）JSONテキストで構成されている「JSONテキストシーケンス」の概念と形式について説明します。 JSONテキスト配列は、増分ストリーミングパーサー（やストリーミングエンコーダ）を有することなく解析され（および生成）することができます。"
    },
    {
      "indent": 0,
      "text": "1.1. Conventions Used in This Document",
      "section_title": true,
      "ja": "1.1。このドキュメントの表記規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "キーワード \"MUST\"、 \"MUST NOT\"、 \"REQUIRED\"、 \"SHALL\"、 \"SHOULD\"、 \"ないもの\"、 \"推奨\" \"ない（SHOULD NOT）\"、 \"MAY\"、 \"推奨NOT\"、および「OPTIONAL 「本書では[RFC2119]で説明されるように解釈されるべきです。"
    },
    {
      "indent": 0,
      "text": "2. JSON Text Sequence Format",
      "section_title": true,
      "ja": "2. JSONテキストシーケンスフォーマット"
    },
    {
      "indent": 3,
      "text": "Two different sets of ABNF rules are provided for the definition of JSON text sequences: one for parsers and one for encoders. Having two different sets of rules permits recovery by parsers from sequences where some of the elements are truncated for whatever reason. The syntax for parsers is specified in terms of octet strings that are then interpreted as JSON texts, if possible. The syntax for encoders, on the other hand, assumes that sequence elements are not truncated.",
      "ja": "パーサ用とエンコーダ用1：ABNF規則の二つの異なるセットがJSONテキストシーケンスを定義するために設けられています。ルールの2つの異なるセットを持つことは、要素の一部が何らかの理由で切り捨てられているシーケンスからのパーサによって回復が可能になります。パーサの構文は、可能な場合は、その後、JSONテキストとして解釈されているオクテット文字列の条件で指定されています。エンコーダの構文は、他の一方で、配列要素が切り捨てられていないことを前提としています。"
    },
    {
      "indent": 3,
      "text": "JSON text sequences MUST use UTF-8 encoding; other encodings of JSON (i.e., UTF-16 and UTF-32) MUST NOT be used.",
      "ja": "JSONテキスト列はUTF-8エンコーディングを使用する必要があります。 JSON（すなわち、UTF-16およびUTF-32）の他のエンコーディングを使用してはいけません。"
    },
    {
      "indent": 0,
      "text": "2.1. JSON Text Sequence Parsing",
      "section_title": true,
      "ja": "2.1。 JSONテキストシーケンス解析"
    },
    {
      "indent": 3,
      "text": "The ABNF [RFC5234] for the JSON text sequence parser is as given in Figure 1.",
      "ja": "JSONテキスト配列パーサーのABNF [RFC5234]は、図1に示されているように。"
    },
    {
      "indent": 6,
      "text": "input-JSON-sequence = *(1*RS possible-JSON) RS = %x1E; \"record separator\" (RS), see RFC 20 ; Also known as: Unicode Character INFORMATION SEPARATOR ; TWO (U+001E) possible-JSON = 1*(not-RS); attempt to parse as UTF-8-encoded ; JSON text (see RFC 7159) not-RS = %x00-1d / %x1f-ff; any octets other than RS",
      "ja": "入力JSON配列= *（1つの* RS可能-JSON）RS =％X1E。 \"レコード区切り\"（RS）、RFC 20を参照してください。別名：Unicodeの文字情報分離; TWO（U + 001E）可能-JSON = 1 *（ない-RS）。 UTF-8でエンコードされたとして解析しようとすると、 JSONテキスト（RFC 7159を参照）は、RS =％x00-1d /％X1F-FF。 RS以外の任意のオクテット"
    },
    {
      "indent": 21,
      "text": "Figure 1: JSON Text Sequence ABNF",
      "ja": "図1：JSONテキストシーケンスABNF"
    },
    {
      "indent": 3,
      "text": "In prose: a series of octet strings, each containing any octet other than a record separator (RS) (0x1E) [RFC20]. All octet strings are preceded by an RS byte. Each octet string in the sequence is to be parsed as a JSON text in the UTF-8 encoding [RFC3629].",
      "ja": "散文で：オクテットストリングの直列、各レコードセパレータ（RS）（0x1Eを）[RFC20]以外の任意のオクテットを含みます。すべてのオクテット文字列は、RSバイトが先行しています。シーケンス内の各オクテットストリングは、UTF-8エンコーディング[RFC3629]でJSONテキストとして解析されるべきです。"
    },
    {
      "indent": 3,
      "text": "If parsing of such an octet string as a UTF-8-encoded JSON text fails, the parser SHOULD nonetheless continue parsing the remainder of the sequence. The parser can report such failures to applications, which might then choose to terminate parsing of a sequence. Multiple consecutive RS octets do not denote empty sequence elements between them and can be ignored.",
      "ja": "UTF-8でエンコードされたJSONテキストなどのオクテット文字列の構文解析が失敗した場合、パーサは、それにもかかわらず、シーケンスの残りの部分を解析し続けるべきです。パーサはその後、シーケンスの解析を終了することを選択するかもしれないアプリケーションにこのような障害を報告することができます。連続した複数のRSのオクテットは、それらの間の空のシーケンスの要素を意味するものではなく、無視することができます。"
    },
    {
      "indent": 3,
      "text": "This document does not define a mechanism for reliably identifying text sequence by position (for example, when sending individual elements of an array as unique text sequences). For applications where truncation is a possibility, this means that intended sequence elements can be truncated and can even be missing entirely; therefore, a reference to an nth element would be unreliable.",
      "ja": "この文書では、確実に（例えば、一意のテキスト配列として配列の個々の要素を送信する）位置によってテキストの配列を同定するための機構を定義していません。切り捨てが可能であるアプリケーションでは、これは意図した配列要素が切り捨てられることができ、さらには完全に欠落していることができることを意味します。したがって、n番目の要素への言及は、信頼できないであろう。"
    },
    {
      "indent": 3,
      "text": "There is no end of sequence indicator.",
      "ja": "シーケンス・インジケータの終わりはありません。"
    },
    {
      "indent": 0,
      "text": "2.2. JSON Text Sequence Encoding",
      "section_title": true,
      "ja": "2.2。 JSONテキストをコードする配列"
    },
    {
      "indent": 3,
      "text": "The ABNF for the JSON text sequence encoder is given in Figure 2.",
      "ja": "JSONテキストシーケンスエンコーダのABNFは、図2に示されています。"
    },
    {
      "indent": 6,
      "text": "JSON-sequence = *(RS JSON-text LF) RS = %x1E; see RFC 20 ; Also known as: Unicode Character INFORMATION SEPARATOR ; TWO (U+001E) LF = %x0A; \"line feed\" (LF), see RFC 20 JSON-text = <given by RFC 7159, using UTF-8 encoding>",
      "ja": "JSON配列= *（RS JSONテキストLF）RS =％X1E。 RFC 20を参照してください。別名：Unicodeの文字情報分離; TWO（U + 001E）LF =％X0A。 \"改行\"（LF）、RFC 20 JSONテキストは= <UTF-8エンコーディングを使用して、RFC 7159によって与え>参照"
    },
    {
      "indent": 21,
      "text": "Figure 2: JSON Text Sequence ABNF",
      "ja": "図2：JSONテキストシーケンスABNF"
    },
    {
      "indent": 3,
      "text": "In prose: any number of JSON texts, each encoded in UTF-8 [RFC3629], each preceded by one ASCII RS character, and each followed by a line feed (LF). Since RS is an ASCII control character, it may only appear in JSON strings in escaped form (see [RFC7159]), and since RS may not appear in JSON texts in any other form, RS unambiguously delimits the start of any element in the sequence. RS is sufficient to unambiguously delimit all top-level JSON value types other than numbers. Following each JSON text in the sequence with an LF allows detection of truncated JSON texts consisting of a number at the top-level; see Section 2.4.",
      "ja": "散文で：JSONテキストの任意の数、UTF-8 [RFC3629]でエンコード各々は、それぞれ1つのASCII RS文字によって先行され、それぞれがラインフィード（LF）が続きます。 RSは、ASCII制御文字があるので、それだけでエスケープ形式でJSON文字列に表示される場合があります（[RFC7159]参照）、およびRSは、他の形式のJSONテキストで表示されない可能性があるため、RSは明確シーケンス内の任意の要素の開始を区切ります。 RSは、明確に数字以外のすべてのトップレベルのJSON値の型を区切るのに十分です。 LFとシーケンスの各JSONテキストに続いてトップレベルの数からなる切断型JSONテキストの検出を可能にします。 2.4節を参照してください。"
    },
    {
      "indent": 3,
      "text": "JSON text sequence encoders are expected to ensure that the sequence elements are properly formed. When the JSON text sequence encoder does the JSON text encoding, the sequence elements will naturally be properly formed. When the JSON text sequence encoder accepts already-encoded JSON texts, the JSON text sequence encoder ought to parse them before adding them to a sequence.",
      "ja": "JSONテキストシーケンスエンコーダは、配列要素が適切に形成されていることを確認することが期待されています。 JSONテキストシーケンスエンコーダはJSONテキストエンコーディングを行う場合、配列エレメントは、自然に適切に形成されます。 JSONテキストシーケンスエンコーダは既にエンコードされたJSONテキストを受け付けると、JSONテキストシーケンスエンコーダは、シーケンスに追加する前にそれらを解析するべきです。"
    },
    {
      "indent": 3,
      "text": "Note that on some systems it\"s possible to input RS by typing \"ctrl-^\"; on some system or applications, the correct sequence may be \"ctrl-v ctrl-^\". This is helpful when constructing a sequence manually with a text editor.",
      "ja": "それは^ CTRL-」と入力して、入力RSに可能だ 『いくつかのシステム上でなお』;いくつかのシステムまたはアプリケーションに、正しい順序であってもよい 『』 ^ CTRL-VのCTRL-して手動で配列を構築するときに有用です。テキストエディタ。"
    },
    {
      "indent": 0,
      "text": "2.3. Incomplete/Invalid JSON Texts Need Not Be Fatal",
      "section_title": true,
      "ja": "2.3。不完全/無効JSONテキストは致命的である必要はありません"
    },
    {
      "indent": 3,
      "text": "Per Section 2.1, JSON text sequence parsers should not abort when an octet string contains a malformed JSON text. Instead, the JSON text sequence parser should skip to the next RS. Such a situation may arise in contexts where, for example, data that is appended to log files to log files is truncated by the filesystem (e.g., due to a crash or administrative process termination).",
      "ja": "オクテット文字列が不正な形式のJSONテキストが含まれている場合、セクション2.1あたり、JSONテキスト・シーケンス・パーサは中止してはなりません。代わりに、JSONテキストシーケンスパーサは次のRSにスキップする必要があります。そのような状況は、例えば、ファイルを記録するログファイルに添付されているデータは、ファイルシステム（例えば、原因クラッシュまたは管理プロセスの終了まで）で切り捨てられ、文脈で生じ得ます。"
    },
    {
      "indent": 3,
      "text": "Incremental JSON text parsers may be used, though of course failure to parse a given text may result after first producing some incremental parse results.",
      "ja": "増分JSONテキストパーサは、与えられたテキストが最初にいくつかの増分解析結果を生成した後に生じ得る解析する進路に障害が発生しても、使用することができます。"
    },
    {
      "indent": 3,
      "text": "Sequence parsers should have an option to warn about truncated JSON texts.",
      "ja": "シーケンスパーサは切り捨てJSONテキストについて警告するためのオプションを持っている必要があります。"
    },
    {
      "indent": 0,
      "text": "2.4. Top-Level Values: numbers, true, false, and null",
      "section_title": true,
      "ja": "2.4。トップレベルの値：数字、真、偽、およびヌル"
    },
    {
      "indent": 3,
      "text": "While objects, arrays, and strings are self-delimited in JSON texts, numbers and the values 'true', 'false', and 'null' are not. Only whitespace can delimit the latter four kinds of values.",
      "ja": "オブジェクト、配列、および文字列は自己区切りJSONテキストであるが、数字や価値観、「真」「偽」、および「ヌル」はありません。唯一の空白は値の後者の4種類区切ることができます。"
    },
    {
      "indent": 3,
      "text": "JSON text sequences use 0x0A as a \"canary\" octet to detect truncation.",
      "ja": "JSONテキストシーケンスは切り捨てを検出するために、「カナリア」オクテットとしては0x0Aを使用します。"
    },
    {
      "indent": 3,
      "text": "Parsers MUST check that any JSON texts that are a top-level number, or that might be 'true', 'false', or 'null', include JSON whitespace (at least one byte matching the \"ws\" ABNF rule from [RFC7159]) after that value; otherwise, the JSON-text may have been truncated. Note that the LF following each JSON text matches the \"ws\" ABNF rule.",
      "ja": "パーサは、トップレベルの数ある、またはそれは、「真」「偽」、または「NULL」であるかもしれない任意のJSONテキストは、[RFC7159から「WS」ABNF規則に合致するJSONの空白（少なくとも1つのバイトが含まれていることをチェックしなければなりません]）、その値の後に、それ以外の場合は、JSONテキストが切り捨てられている可能性があります。 LFは、次の各JSONテキストが「WS」ABNF規則と一致していることに注意してください。"
    },
    {
      "indent": 3,
      "text": "Parsers MUST drop JSON-text sequence elements consisting of non-self-delimited top-level values that may have been truncated (that are not delimited by whitespace). Parsers can report such texts as warnings (including, optionally, the parsed text and/or the original octet string).",
      "ja": "パーサは（空白で区切られていない）トランケートされていてもよい非自己区切りトップレベルの値からなるJSONテキスト配列要素を削除する必要があります。パーサは（必要に応じて、解析されたテキスト及び/又は元のオクテット文字列を含む）、警告などのテキストを報告することができます。"
    },
    {
      "indent": 3,
      "text": "For example, '<RS>123<RS>' might have been intended to carry the top-level number 1234, but it got truncated. Similarly, '<RS>true<RS>' might have been intended to carry the invalid text 'trueish'. '<RS>truefalse<RS>' is not two top-level values, 'true', and 'false'; it is simply not a valid JSON text.",
      "ja": "たとえば、「<RSは> 123 <RS>」トップレベルの番号1234を運ぶために意図されている場合がありますが、それは切り捨てられました。同様に、「<RS>真<RS>」は無効な文字「trueish」を運ぶために意図されている場合があります。 '<RS> truefalse <RS>' 'true' に、2つのトップレベルの値ではない、と '偽';それは単に、有効なJSONテキストではありません。"
    },
    {
      "indent": 3,
      "text": "Implementations may produce a value when parsing '<RS>\"foo\"<RS>' because their JSON text parser might be able to consume bytes incrementally; since the JSON text in this case is a self-delimiting top-level value, the parser can produce the result without consuming an additional byte. Such implementations ought to skip to the next RS byte, possibly reporting any intervening non-whitespace bytes.",
      "ja": "解析時に実装が値を生成することが「<RS> 『foo』という<RS>」自分のJSONテキストパーサはインクリメンタルバイトを消費することができるかもしれないからです。この場合、JSONテキストが自己区切りトップレベルの値であるため、パーサは、追加のバイトを消費せずに結果を生成することができます。このような実装は、おそらく何らかの介入の非空白バイトを報告し、次のRSバイトにスキップするべきです。"
    },
    {
      "indent": 3,
      "text": "Detection of truncation of non-self-delimited sequence elements (numbers, true, false, and null) is only possible when the sequence encoder produces or receives complete JSON texts. Implementations where the sequence encoder is not also in charge of encoding the individual JSON texts should ensure that those JSON texts are complete.",
      "ja": "シーケンスエンコーダは、完全なJSONテキストを生成または受信したときに非自己区切り配列要素（番号、真、偽、及びヌル）の切断の検出にのみ可能です。シーケンスエンコーダは、個々のJSONテキストをコードするも担当していない実装は、これらのJSONテキストが完了していることを確認する必要があります。"
    },
    {
      "indent": 0,
      "text": "3. Security Considerations",
      "section_title": true,
      "ja": "3.セキュリティの考慮事項"
    },
    {
      "indent": 3,
      "text": "All the security considerations of JSON [RFC7159] apply. This format provides no cryptographic integrity protection of any kind.",
      "ja": "JSON [RFC7159]のすべてのセキュリティに関する考慮事項が適用されます。この形式は、いかなる種類の暗号の完全性保護を提供していません。"
    },
    {
      "indent": 3,
      "text": "As usual, parsers must operate on input that is assumed to be untrusted. This means that parsers must fail gracefully in the face of malicious inputs.",
      "ja": "いつものように、パーサは信頼できないと見なされた入力で動作する必要があります。これは、パーサは、悪意のある入力の顔に正常に失敗しなければならないことを意味します。"
    },
    {
      "indent": 3,
      "text": "Note that incremental JSON text parsers can produce partial results and later indicate failure to parse the remainder of a text. A sequence parser that uses an incremental JSON text parser might treat a sequence like '<RS>\"foo\"<LF>456<LF><RS>' as a sequence of one element (\"foo\"), while a sequence parser that uses a non-incremental JSON text parser might treat the same sequence as being empty. This effect, and texts that fail to parse and are ignored, can be used to smuggle data past sequence parsers that don't warn about JSON text failures.",
      "ja": "増分JSONテキストパーサは部分的な結果を生成し、後でテキストの残りの部分を解析する故障を示すことができることに留意されたいです。以下のようなシーケンスを扱うかもしれないインクリメンタルJSONテキストパーサーを使用してシーケンスパーサ「<RS> 『foo』という<LF> 456 <LF> <RS>」、一つの要素（「foo」という）のシーケンスとしてシーケンスパーサことながら、非増分JSONテキストパーサは空の状態と同じ配列を扱うかもしれません使用しています。この効果、および構文解析に失敗すると、無視されているテキストは、データをJSONテキストの失敗を警告しません過去シーケンスパーサを密輸するために使用することができます。"
    },
    {
      "indent": 3,
      "text": "Repeated parsing and re-encoding of a JSON text sequence can result in the addition (or stripping) of trailing LF bytes from (to) individual sequence element JSON texts. This can break signature validation. JSON has no canonical form for JSON texts, therefore neither does the JSON text sequence format.",
      "ja": "繰り返し解析およびJSONテキスト配列の再エンコードは、LFは、個々の配列要素JSONテキスト（まで）のバイト後続の付加（または除去）をもたらすことができます。これは、署名の検証を破ることができます。 JSONはそのため、JSONテキストのための標準的な形式があり、どちらもJSONテキストシーケンスフォーマットを行います。"
    },
    {
      "indent": 0,
      "text": "4. IANA Considerations",
      "section_title": true,
      "ja": "4. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "The MIME media type for JSON text sequences is application/json-seq.",
      "ja": "JSONテキストシーケンスのためのMIMEメディアタイプは、アプリケーション/ JSON-seqのです。"
    },
    {
      "indent": 3,
      "text": "Type name: application",
      "ja": "型名：アプリケーション"
    },
    {
      "indent": 3,
      "text": "Subtype name: json-seq",
      "ja": "サブタイプ名：JSON-seqの"
    },
    {
      "indent": 3,
      "text": "Required parameters: N/A",
      "ja": "必須パラメータ：N / A"
    },
    {
      "indent": 3,
      "text": "Optional parameters: N/A",
      "ja": "オプションのパラメータ：N / A"
    },
    {
      "indent": 3,
      "text": "Encoding considerations: binary",
      "ja": "エンコードの考慮事項：バイナリ"
    },
    {
      "indent": 3,
      "text": "Security considerations: See RFC 7464, Section 3.",
      "ja": "セキュリティの考慮事項：RFC 7464、セクション3を参照してください。"
    },
    {
      "indent": 3,
      "text": "Interoperability considerations: Described herein.",
      "ja": "相互運用性に関する注意事項：本明細書で説明。"
    },
    {
      "indent": 3,
      "text": "Published specification: RFC 7464.",
      "ja": "公開された仕様：RFC 7464。"
    },
    {
      "indent": 3,
      "text": "Applications that use this media type:",
      "ja": "このメディアタイプを使用するアプリケーション："
    },
    {
      "indent": 6,
      "text": "<https://stedolan.github.io/jq> <https://github.com/mapbox/cligj> <https://github.com/hildjj/json-text-sequence>",
      "ja": "＜ｈっｔｐｓ：／／ｓてどぁん。ぎてゅｂ。いお／ｊｑ＞ ＜ｈっｔｐｓ：／／ぎてゅｂ。こｍ／まｐぼｘ／ｃぃｇｊ＞ ＜ｈっｔｐｓ：／／ぎてゅｂ。こｍ／ひｌｄっｊ／ｊそんーてｘｔーせくえんせ＞"
    },
    {
      "indent": 3,
      "text": "Fragment identifier considerations: N/A",
      "ja": "フラグメント識別子の考慮事項：N / A"
    },
    {
      "indent": 3,
      "text": "Additional information:",
      "ja": "追加情報："
    },
    {
      "indent": 3,
      "text": "o Deprecated alias names for this type: N/A",
      "ja": "このタイプのO非推奨別名：N / A"
    },
    {
      "indent": 3,
      "text": "o Magic number(s): N/A",
      "ja": "Oマジックナンバー（S）：N / A"
    },
    {
      "indent": 3,
      "text": "o File extension(s): N/A",
      "ja": "Oファイル拡張子（S）：N / A"
    },
    {
      "indent": 3,
      "text": "o Macintosh file type code(s): N/A",
      "ja": "O Macintoshファイルタイプコード（S）：N / A"
    },
    {
      "indent": 3,
      "text": "Person & email address to contact for further information:",
      "ja": "詳細のために連絡する人とEメールアドレス："
    },
    {
      "indent": 6,
      "text": "json@ietf.org",
      "ja": "ｊそん＠いえｔｆ。おｒｇ"
    },
    {
      "indent": 3,
      "text": "Intended usage: COMMON",
      "ja": "意図している用法：COMMON"
    },
    {
      "indent": 3,
      "text": "Author: Nicolas Williams (nico@cryptonector.com)",
      "ja": "著者：ニコラス・ウィリアムズ（nico@cryptonector.com）"
    },
    {
      "indent": 3,
      "text": "Change controller: IETF",
      "ja": "変更コントローラ：IETF"
    },
    {
      "indent": 0,
      "text": "5. Normative References",
      "section_title": true,
      "ja": "5.引用規格"
    },
    {
      "indent": 3,
      "text": "[RFC20] Cerf, V., \"ASCII format for network interchange\", STD 80, RFC 20, October 1969, <http://www.rfc-editor.org/info/rfc20>.",
      "ja": "[RFC20]サーフ、V.、 \"ネットワークの交換のためのASCIIフォーマット\"、STD 80、RFC 20、1969年10月、<http://www.rfc-editor.org/info/rfc20>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119]ブラドナーの、S.、 \"要件レベルを示すためにRFCsにおける使用のためのキーワード\"、BCP 14、RFC 2119、1997年3月、<http://www.rfc-editor.org/info/rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC3629] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD 63, RFC 3629, November 2003, <http://www.rfc-editor.org/info/rfc3629>.",
      "ja": "[RFC3629] Yergeau、F.、 \"UTF-8、ISO 10646の変換フォーマット\"、STD 63、RFC 3629、2003年11月、<http://www.rfc-editor.org/info/rfc3629>。"
    },
    {
      "indent": 3,
      "text": "[RFC5234] Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, January 2008, <http://www.rfc-editor.org/info/rfc5234>.",
      "ja": "[RFC5234]クロッカー、D.、エド。そして、P. Overell、 \"構文仕様のための増大しているBNF：ABNF\"、STD 68、RFC 5234、2008年1月、<http://www.rfc-editor.org/info/rfc5234>。"
    },
    {
      "indent": 3,
      "text": "[RFC7159] Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", RFC 7159, March 2014, <http://www.rfc-editor.org/info/rfc7159>.",
      "ja": "[RFC7159]ブレイ、T.、エド。、 \"JavaScriptのObject Notation（JSON）形式のデータ交換フォーマット\"、RFC 7159、2014年3月、<http://www.rfc-editor.org/info/rfc7159>。"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Phillip Hallam-Baker proposed the use of JSON text sequences for logfiles and pointed out the need for resynchronization. Stephen Dolan created <https://github.com/stedolan/jq>, which uses something like JSON text sequences (with LF as the separator between texts on output, and requiring only such whitespace as needed to disambiguate on input). Carsten Bormann suggested the use of ASCII RS, and Joe Hildebrand suggested the use of LF in addition to RS for disambiguating top-level number values. Paul Hoffman shepherded the document. Many others contributed reviews and comments on the JSON Working Group mailing list.",
      "ja": "フィリップハラム - ベイカーは、ログファイルのためのJSONテキスト配列の使用を提案し、再同期化の必要性を指摘しました。スティーブン・ドランは<https://github.com/stedolan/jq>、（出力上のテキストとの間のセパレータとしてLFと、入力に明確にするために、必要に応じてのみ、そのような空白を必要とする）JSONテキスト配列のようなものを使用するの作成しました。カルステンボルマンは、ASCII RSの使用を提案し、ジョー・ヒルデブラントは、トップレベルの数値を一義化のためのRSに加えて、LFの使用を示唆しました。ポール・ホフマンは、文書を導きました。他の多くは、JSONワーキンググループのメーリングリストでレビューやコメントを貢献しました。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Nicolas Williams Cryptonector, LLC",
      "ja": "ニコラス・ウィリアムズCryptonector、LLC"
    },
    {
      "indent": 3,
      "text": "EMail: nico@cryptonector.com",
      "ja": "メールアドレス：nico@cryptonector.com"
    }
  ]
}